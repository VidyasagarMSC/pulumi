# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetCosBackupPolicyResult',
    'AwaitableGetCosBackupPolicyResult',
    'get_cos_backup_policy',
    'get_cos_backup_policy_output',
]

@pulumi.output_type
class GetCosBackupPolicyResult:
    """
    A collection of values returned by getCosBackupPolicy.
    """
    def __init__(__self__, backup_type=None, bucket_name=None, id=None, initial_delete_after_days=None, policy_id=None, policy_name=None, target_backup_vault_crn=None):
        if backup_type and not isinstance(backup_type, str):
            raise TypeError("Expected argument 'backup_type' to be a str")
        pulumi.set(__self__, "backup_type", backup_type)
        if bucket_name and not isinstance(bucket_name, str):
            raise TypeError("Expected argument 'bucket_name' to be a str")
        pulumi.set(__self__, "bucket_name", bucket_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if initial_delete_after_days and not isinstance(initial_delete_after_days, float):
            raise TypeError("Expected argument 'initial_delete_after_days' to be a float")
        pulumi.set(__self__, "initial_delete_after_days", initial_delete_after_days)
        if policy_id and not isinstance(policy_id, str):
            raise TypeError("Expected argument 'policy_id' to be a str")
        pulumi.set(__self__, "policy_id", policy_id)
        if policy_name and not isinstance(policy_name, str):
            raise TypeError("Expected argument 'policy_name' to be a str")
        pulumi.set(__self__, "policy_name", policy_name)
        if target_backup_vault_crn and not isinstance(target_backup_vault_crn, str):
            raise TypeError("Expected argument 'target_backup_vault_crn' to be a str")
        pulumi.set(__self__, "target_backup_vault_crn", target_backup_vault_crn)

    @_builtins.property
    @pulumi.getter(name="backupType")
    def backup_type(self) -> _builtins.str:
        return pulumi.get(self, "backup_type")

    @_builtins.property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> _builtins.str:
        return pulumi.get(self, "bucket_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="initialDeleteAfterDays")
    def initial_delete_after_days(self) -> _builtins.float:
        return pulumi.get(self, "initial_delete_after_days")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> _builtins.str:
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> _builtins.str:
        return pulumi.get(self, "policy_name")

    @_builtins.property
    @pulumi.getter(name="targetBackupVaultCrn")
    def target_backup_vault_crn(self) -> _builtins.str:
        return pulumi.get(self, "target_backup_vault_crn")


class AwaitableGetCosBackupPolicyResult(GetCosBackupPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCosBackupPolicyResult(
            backup_type=self.backup_type,
            bucket_name=self.bucket_name,
            id=self.id,
            initial_delete_after_days=self.initial_delete_after_days,
            policy_id=self.policy_id,
            policy_name=self.policy_name,
            target_backup_vault_crn=self.target_backup_vault_crn)


def get_cos_backup_policy(bucket_name: Optional[_builtins.str] = None,
                          id: Optional[_builtins.str] = None,
                          policy_id: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCosBackupPolicyResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['bucketName'] = bucket_name
    __args__['id'] = id
    __args__['policyId'] = policy_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCosBackupPolicy:getCosBackupPolicy', __args__, opts=opts, typ=GetCosBackupPolicyResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCosBackupPolicyResult(
        backup_type=pulumi.get(__ret__, 'backup_type'),
        bucket_name=pulumi.get(__ret__, 'bucket_name'),
        id=pulumi.get(__ret__, 'id'),
        initial_delete_after_days=pulumi.get(__ret__, 'initial_delete_after_days'),
        policy_id=pulumi.get(__ret__, 'policy_id'),
        policy_name=pulumi.get(__ret__, 'policy_name'),
        target_backup_vault_crn=pulumi.get(__ret__, 'target_backup_vault_crn'))
def get_cos_backup_policy_output(bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
                                 id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCosBackupPolicyResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['bucketName'] = bucket_name
    __args__['id'] = id
    __args__['policyId'] = policy_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCosBackupPolicy:getCosBackupPolicy', __args__, opts=opts, typ=GetCosBackupPolicyResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCosBackupPolicyResult(
        backup_type=pulumi.get(__response__, 'backup_type'),
        bucket_name=pulumi.get(__response__, 'bucket_name'),
        id=pulumi.get(__response__, 'id'),
        initial_delete_after_days=pulumi.get(__response__, 'initial_delete_after_days'),
        policy_id=pulumi.get(__response__, 'policy_id'),
        policy_name=pulumi.get(__response__, 'policy_name'),
        target_backup_vault_crn=pulumi.get(__response__, 'target_backup_vault_crn')))
