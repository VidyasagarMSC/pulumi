# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsInstanceGroupManagerArgs', 'IsInstanceGroupManager']

@pulumi.input_type
class IsInstanceGroupManagerArgs:
    def __init__(__self__, *,
                 instance_group: pulumi.Input[_builtins.str],
                 aggregation_window: Optional[pulumi.Input[_builtins.float]] = None,
                 cooldown: Optional[pulumi.Input[_builtins.float]] = None,
                 enable_manager: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_instance_group_manager_id: Optional[pulumi.Input[_builtins.str]] = None,
                 manager_type: Optional[pulumi.Input[_builtins.str]] = None,
                 max_membership_count: Optional[pulumi.Input[_builtins.float]] = None,
                 min_membership_count: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['IsInstanceGroupManagerTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a IsInstanceGroupManager resource.
        :param pulumi.Input[_builtins.str] instance_group: instance group ID
        :param pulumi.Input[_builtins.float] aggregation_window: The time window in seconds to aggregate metrics prior to evaluation
        :param pulumi.Input[_builtins.float] cooldown: The duration of time in seconds to pause further scale actions after scaling has taken place
        :param pulumi.Input[_builtins.bool] enable_manager: enable instance group manager
        :param pulumi.Input[_builtins.str] manager_type: The type of instance group manager.
        :param pulumi.Input[_builtins.float] max_membership_count: The maximum number of members in a managed instance group
        :param pulumi.Input[_builtins.float] min_membership_count: The minimum number of members in a managed instance group
        :param pulumi.Input[_builtins.str] name: instance group manager name
        """
        pulumi.set(__self__, "instance_group", instance_group)
        if aggregation_window is not None:
            pulumi.set(__self__, "aggregation_window", aggregation_window)
        if cooldown is not None:
            pulumi.set(__self__, "cooldown", cooldown)
        if enable_manager is not None:
            pulumi.set(__self__, "enable_manager", enable_manager)
        if is_instance_group_manager_id is not None:
            pulumi.set(__self__, "is_instance_group_manager_id", is_instance_group_manager_id)
        if manager_type is not None:
            pulumi.set(__self__, "manager_type", manager_type)
        if max_membership_count is not None:
            pulumi.set(__self__, "max_membership_count", max_membership_count)
        if min_membership_count is not None:
            pulumi.set(__self__, "min_membership_count", min_membership_count)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="instanceGroup")
    def instance_group(self) -> pulumi.Input[_builtins.str]:
        """
        instance group ID
        """
        return pulumi.get(self, "instance_group")

    @instance_group.setter
    def instance_group(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_group", value)

    @_builtins.property
    @pulumi.getter(name="aggregationWindow")
    def aggregation_window(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The time window in seconds to aggregate metrics prior to evaluation
        """
        return pulumi.get(self, "aggregation_window")

    @aggregation_window.setter
    def aggregation_window(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "aggregation_window", value)

    @_builtins.property
    @pulumi.getter
    def cooldown(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The duration of time in seconds to pause further scale actions after scaling has taken place
        """
        return pulumi.get(self, "cooldown")

    @cooldown.setter
    def cooldown(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "cooldown", value)

    @_builtins.property
    @pulumi.getter(name="enableManager")
    def enable_manager(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        enable instance group manager
        """
        return pulumi.get(self, "enable_manager")

    @enable_manager.setter
    def enable_manager(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_manager", value)

    @_builtins.property
    @pulumi.getter(name="isInstanceGroupManagerId")
    def is_instance_group_manager_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_instance_group_manager_id")

    @is_instance_group_manager_id.setter
    def is_instance_group_manager_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_instance_group_manager_id", value)

    @_builtins.property
    @pulumi.getter(name="managerType")
    def manager_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of instance group manager.
        """
        return pulumi.get(self, "manager_type")

    @manager_type.setter
    def manager_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "manager_type", value)

    @_builtins.property
    @pulumi.getter(name="maxMembershipCount")
    def max_membership_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The maximum number of members in a managed instance group
        """
        return pulumi.get(self, "max_membership_count")

    @max_membership_count.setter
    def max_membership_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "max_membership_count", value)

    @_builtins.property
    @pulumi.getter(name="minMembershipCount")
    def min_membership_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The minimum number of members in a managed instance group
        """
        return pulumi.get(self, "min_membership_count")

    @min_membership_count.setter
    def min_membership_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "min_membership_count", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        instance group manager name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsInstanceGroupManagerTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsInstanceGroupManagerTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _IsInstanceGroupManagerState:
    def __init__(__self__, *,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceGroupManagerActionArgs']]]] = None,
                 aggregation_window: Optional[pulumi.Input[_builtins.float]] = None,
                 cooldown: Optional[pulumi.Input[_builtins.float]] = None,
                 enable_manager: Optional[pulumi.Input[_builtins.bool]] = None,
                 instance_group: Optional[pulumi.Input[_builtins.str]] = None,
                 is_instance_group_manager_id: Optional[pulumi.Input[_builtins.str]] = None,
                 manager_id: Optional[pulumi.Input[_builtins.str]] = None,
                 manager_type: Optional[pulumi.Input[_builtins.str]] = None,
                 max_membership_count: Optional[pulumi.Input[_builtins.float]] = None,
                 min_membership_count: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['IsInstanceGroupManagerTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering IsInstanceGroupManager resources.
        :param pulumi.Input[_builtins.float] aggregation_window: The time window in seconds to aggregate metrics prior to evaluation
        :param pulumi.Input[_builtins.float] cooldown: The duration of time in seconds to pause further scale actions after scaling has taken place
        :param pulumi.Input[_builtins.bool] enable_manager: enable instance group manager
        :param pulumi.Input[_builtins.str] instance_group: instance group ID
        :param pulumi.Input[_builtins.str] manager_id: instance group manager ID
        :param pulumi.Input[_builtins.str] manager_type: The type of instance group manager.
        :param pulumi.Input[_builtins.float] max_membership_count: The maximum number of members in a managed instance group
        :param pulumi.Input[_builtins.float] min_membership_count: The minimum number of members in a managed instance group
        :param pulumi.Input[_builtins.str] name: instance group manager name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] policies: list of Policies associated with instancegroup manager
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if aggregation_window is not None:
            pulumi.set(__self__, "aggregation_window", aggregation_window)
        if cooldown is not None:
            pulumi.set(__self__, "cooldown", cooldown)
        if enable_manager is not None:
            pulumi.set(__self__, "enable_manager", enable_manager)
        if instance_group is not None:
            pulumi.set(__self__, "instance_group", instance_group)
        if is_instance_group_manager_id is not None:
            pulumi.set(__self__, "is_instance_group_manager_id", is_instance_group_manager_id)
        if manager_id is not None:
            pulumi.set(__self__, "manager_id", manager_id)
        if manager_type is not None:
            pulumi.set(__self__, "manager_type", manager_type)
        if max_membership_count is not None:
            pulumi.set(__self__, "max_membership_count", max_membership_count)
        if min_membership_count is not None:
            pulumi.set(__self__, "min_membership_count", min_membership_count)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceGroupManagerActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceGroupManagerActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @_builtins.property
    @pulumi.getter(name="aggregationWindow")
    def aggregation_window(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The time window in seconds to aggregate metrics prior to evaluation
        """
        return pulumi.get(self, "aggregation_window")

    @aggregation_window.setter
    def aggregation_window(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "aggregation_window", value)

    @_builtins.property
    @pulumi.getter
    def cooldown(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The duration of time in seconds to pause further scale actions after scaling has taken place
        """
        return pulumi.get(self, "cooldown")

    @cooldown.setter
    def cooldown(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "cooldown", value)

    @_builtins.property
    @pulumi.getter(name="enableManager")
    def enable_manager(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        enable instance group manager
        """
        return pulumi.get(self, "enable_manager")

    @enable_manager.setter
    def enable_manager(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_manager", value)

    @_builtins.property
    @pulumi.getter(name="instanceGroup")
    def instance_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        instance group ID
        """
        return pulumi.get(self, "instance_group")

    @instance_group.setter
    def instance_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_group", value)

    @_builtins.property
    @pulumi.getter(name="isInstanceGroupManagerId")
    def is_instance_group_manager_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_instance_group_manager_id")

    @is_instance_group_manager_id.setter
    def is_instance_group_manager_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_instance_group_manager_id", value)

    @_builtins.property
    @pulumi.getter(name="managerId")
    def manager_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        instance group manager ID
        """
        return pulumi.get(self, "manager_id")

    @manager_id.setter
    def manager_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "manager_id", value)

    @_builtins.property
    @pulumi.getter(name="managerType")
    def manager_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of instance group manager.
        """
        return pulumi.get(self, "manager_type")

    @manager_type.setter
    def manager_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "manager_type", value)

    @_builtins.property
    @pulumi.getter(name="maxMembershipCount")
    def max_membership_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The maximum number of members in a managed instance group
        """
        return pulumi.get(self, "max_membership_count")

    @max_membership_count.setter
    def max_membership_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "max_membership_count", value)

    @_builtins.property
    @pulumi.getter(name="minMembershipCount")
    def min_membership_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The minimum number of members in a managed instance group
        """
        return pulumi.get(self, "min_membership_count")

    @min_membership_count.setter
    def min_membership_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "min_membership_count", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        instance group manager name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        list of Policies associated with instancegroup manager
        """
        return pulumi.get(self, "policies")

    @policies.setter
    def policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "policies", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsInstanceGroupManagerTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsInstanceGroupManagerTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/isInstanceGroupManager:IsInstanceGroupManager")
class IsInstanceGroupManager(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aggregation_window: Optional[pulumi.Input[_builtins.float]] = None,
                 cooldown: Optional[pulumi.Input[_builtins.float]] = None,
                 enable_manager: Optional[pulumi.Input[_builtins.bool]] = None,
                 instance_group: Optional[pulumi.Input[_builtins.str]] = None,
                 is_instance_group_manager_id: Optional[pulumi.Input[_builtins.str]] = None,
                 manager_type: Optional[pulumi.Input[_builtins.str]] = None,
                 max_membership_count: Optional[pulumi.Input[_builtins.float]] = None,
                 min_membership_count: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsInstanceGroupManagerTimeoutsArgs', 'IsInstanceGroupManagerTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a IsInstanceGroupManager resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] aggregation_window: The time window in seconds to aggregate metrics prior to evaluation
        :param pulumi.Input[_builtins.float] cooldown: The duration of time in seconds to pause further scale actions after scaling has taken place
        :param pulumi.Input[_builtins.bool] enable_manager: enable instance group manager
        :param pulumi.Input[_builtins.str] instance_group: instance group ID
        :param pulumi.Input[_builtins.str] manager_type: The type of instance group manager.
        :param pulumi.Input[_builtins.float] max_membership_count: The maximum number of members in a managed instance group
        :param pulumi.Input[_builtins.float] min_membership_count: The minimum number of members in a managed instance group
        :param pulumi.Input[_builtins.str] name: instance group manager name
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsInstanceGroupManagerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsInstanceGroupManager resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsInstanceGroupManagerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsInstanceGroupManagerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aggregation_window: Optional[pulumi.Input[_builtins.float]] = None,
                 cooldown: Optional[pulumi.Input[_builtins.float]] = None,
                 enable_manager: Optional[pulumi.Input[_builtins.bool]] = None,
                 instance_group: Optional[pulumi.Input[_builtins.str]] = None,
                 is_instance_group_manager_id: Optional[pulumi.Input[_builtins.str]] = None,
                 manager_type: Optional[pulumi.Input[_builtins.str]] = None,
                 max_membership_count: Optional[pulumi.Input[_builtins.float]] = None,
                 min_membership_count: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsInstanceGroupManagerTimeoutsArgs', 'IsInstanceGroupManagerTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsInstanceGroupManagerArgs.__new__(IsInstanceGroupManagerArgs)

            __props__.__dict__["aggregation_window"] = aggregation_window
            __props__.__dict__["cooldown"] = cooldown
            __props__.__dict__["enable_manager"] = enable_manager
            if instance_group is None and not opts.urn:
                raise TypeError("Missing required property 'instance_group'")
            __props__.__dict__["instance_group"] = instance_group
            __props__.__dict__["is_instance_group_manager_id"] = is_instance_group_manager_id
            __props__.__dict__["manager_type"] = manager_type
            __props__.__dict__["max_membership_count"] = max_membership_count
            __props__.__dict__["min_membership_count"] = min_membership_count
            __props__.__dict__["name"] = name
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["actions"] = None
            __props__.__dict__["manager_id"] = None
            __props__.__dict__["policies"] = None
        super(IsInstanceGroupManager, __self__).__init__(
            'ibm:index/isInstanceGroupManager:IsInstanceGroupManager',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            actions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceGroupManagerActionArgs', 'IsInstanceGroupManagerActionArgsDict']]]]] = None,
            aggregation_window: Optional[pulumi.Input[_builtins.float]] = None,
            cooldown: Optional[pulumi.Input[_builtins.float]] = None,
            enable_manager: Optional[pulumi.Input[_builtins.bool]] = None,
            instance_group: Optional[pulumi.Input[_builtins.str]] = None,
            is_instance_group_manager_id: Optional[pulumi.Input[_builtins.str]] = None,
            manager_id: Optional[pulumi.Input[_builtins.str]] = None,
            manager_type: Optional[pulumi.Input[_builtins.str]] = None,
            max_membership_count: Optional[pulumi.Input[_builtins.float]] = None,
            min_membership_count: Optional[pulumi.Input[_builtins.float]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            policies: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            timeouts: Optional[pulumi.Input[Union['IsInstanceGroupManagerTimeoutsArgs', 'IsInstanceGroupManagerTimeoutsArgsDict']]] = None) -> 'IsInstanceGroupManager':
        """
        Get an existing IsInstanceGroupManager resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] aggregation_window: The time window in seconds to aggregate metrics prior to evaluation
        :param pulumi.Input[_builtins.float] cooldown: The duration of time in seconds to pause further scale actions after scaling has taken place
        :param pulumi.Input[_builtins.bool] enable_manager: enable instance group manager
        :param pulumi.Input[_builtins.str] instance_group: instance group ID
        :param pulumi.Input[_builtins.str] manager_id: instance group manager ID
        :param pulumi.Input[_builtins.str] manager_type: The type of instance group manager.
        :param pulumi.Input[_builtins.float] max_membership_count: The maximum number of members in a managed instance group
        :param pulumi.Input[_builtins.float] min_membership_count: The minimum number of members in a managed instance group
        :param pulumi.Input[_builtins.str] name: instance group manager name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] policies: list of Policies associated with instancegroup manager
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsInstanceGroupManagerState.__new__(_IsInstanceGroupManagerState)

        __props__.__dict__["actions"] = actions
        __props__.__dict__["aggregation_window"] = aggregation_window
        __props__.__dict__["cooldown"] = cooldown
        __props__.__dict__["enable_manager"] = enable_manager
        __props__.__dict__["instance_group"] = instance_group
        __props__.__dict__["is_instance_group_manager_id"] = is_instance_group_manager_id
        __props__.__dict__["manager_id"] = manager_id
        __props__.__dict__["manager_type"] = manager_type
        __props__.__dict__["max_membership_count"] = max_membership_count
        __props__.__dict__["min_membership_count"] = min_membership_count
        __props__.__dict__["name"] = name
        __props__.__dict__["policies"] = policies
        __props__.__dict__["timeouts"] = timeouts
        return IsInstanceGroupManager(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> pulumi.Output[Sequence['outputs.IsInstanceGroupManagerAction']]:
        return pulumi.get(self, "actions")

    @_builtins.property
    @pulumi.getter(name="aggregationWindow")
    def aggregation_window(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        The time window in seconds to aggregate metrics prior to evaluation
        """
        return pulumi.get(self, "aggregation_window")

    @_builtins.property
    @pulumi.getter
    def cooldown(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        The duration of time in seconds to pause further scale actions after scaling has taken place
        """
        return pulumi.get(self, "cooldown")

    @_builtins.property
    @pulumi.getter(name="enableManager")
    def enable_manager(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        enable instance group manager
        """
        return pulumi.get(self, "enable_manager")

    @_builtins.property
    @pulumi.getter(name="instanceGroup")
    def instance_group(self) -> pulumi.Output[_builtins.str]:
        """
        instance group ID
        """
        return pulumi.get(self, "instance_group")

    @_builtins.property
    @pulumi.getter(name="isInstanceGroupManagerId")
    def is_instance_group_manager_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_instance_group_manager_id")

    @_builtins.property
    @pulumi.getter(name="managerId")
    def manager_id(self) -> pulumi.Output[_builtins.str]:
        """
        instance group manager ID
        """
        return pulumi.get(self, "manager_id")

    @_builtins.property
    @pulumi.getter(name="managerType")
    def manager_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The type of instance group manager.
        """
        return pulumi.get(self, "manager_type")

    @_builtins.property
    @pulumi.getter(name="maxMembershipCount")
    def max_membership_count(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        The maximum number of members in a managed instance group
        """
        return pulumi.get(self, "max_membership_count")

    @_builtins.property
    @pulumi.getter(name="minMembershipCount")
    def min_membership_count(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        The minimum number of members in a managed instance group
        """
        return pulumi.get(self, "min_membership_count")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        instance group manager name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def policies(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        list of Policies associated with instancegroup manager
        """
        return pulumi.get(self, "policies")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IsInstanceGroupManagerTimeouts']]:
        return pulumi.get(self, "timeouts")

