# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsBackupPoliciesResult',
    'AwaitableGetIsBackupPoliciesResult',
    'get_is_backup_policies',
    'get_is_backup_policies_output',
]

@pulumi.output_type
class GetIsBackupPoliciesResult:
    """
    A collection of values returned by getIsBackupPolicies.
    """
    def __init__(__self__, backup_policies=None, id=None, name=None, resource_group=None, tag=None):
        if backup_policies and not isinstance(backup_policies, list):
            raise TypeError("Expected argument 'backup_policies' to be a list")
        pulumi.set(__self__, "backup_policies", backup_policies)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resource_group and not isinstance(resource_group, str):
            raise TypeError("Expected argument 'resource_group' to be a str")
        pulumi.set(__self__, "resource_group", resource_group)
        if tag and not isinstance(tag, str):
            raise TypeError("Expected argument 'tag' to be a str")
        pulumi.set(__self__, "tag", tag)

    @_builtins.property
    @pulumi.getter(name="backupPolicies")
    def backup_policies(self) -> Sequence['outputs.GetIsBackupPoliciesBackupPolicyResult']:
        return pulumi.get(self, "backup_policies")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter
    def tag(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "tag")


class AwaitableGetIsBackupPoliciesResult(GetIsBackupPoliciesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsBackupPoliciesResult(
            backup_policies=self.backup_policies,
            id=self.id,
            name=self.name,
            resource_group=self.resource_group,
            tag=self.tag)


def get_is_backup_policies(id: Optional[_builtins.str] = None,
                           name: Optional[_builtins.str] = None,
                           resource_group: Optional[_builtins.str] = None,
                           tag: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsBackupPoliciesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['resourceGroup'] = resource_group
    __args__['tag'] = tag
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsBackupPolicies:getIsBackupPolicies', __args__, opts=opts, typ=GetIsBackupPoliciesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsBackupPoliciesResult(
        backup_policies=pulumi.get(__ret__, 'backup_policies'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        resource_group=pulumi.get(__ret__, 'resource_group'),
        tag=pulumi.get(__ret__, 'tag'))
def get_is_backup_policies_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  resource_group: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  tag: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsBackupPoliciesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['resourceGroup'] = resource_group
    __args__['tag'] = tag
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsBackupPolicies:getIsBackupPolicies', __args__, opts=opts, typ=GetIsBackupPoliciesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsBackupPoliciesResult(
        backup_policies=pulumi.get(__response__, 'backup_policies'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        resource_group=pulumi.get(__response__, 'resource_group'),
        tag=pulumi.get(__response__, 'tag')))
