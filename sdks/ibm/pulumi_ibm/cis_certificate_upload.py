# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['CisCertificateUploadArgs', 'CisCertificateUpload']

@pulumi.input_type
class CisCertificateUploadArgs:
    def __init__(__self__, *,
                 certificate: pulumi.Input[_builtins.str],
                 cis_id: pulumi.Input[_builtins.str],
                 domain_id: pulumi.Input[_builtins.str],
                 private_key: pulumi.Input[_builtins.str],
                 bundle_method: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_certificate_upload_id: Optional[pulumi.Input[_builtins.str]] = None,
                 priority: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a CisCertificateUpload resource.
        :param pulumi.Input[_builtins.str] certificate: Certificate key
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.str] private_key: Certificate private key
        :param pulumi.Input[_builtins.str] bundle_method: Certificate bundle method
        :param pulumi.Input[_builtins.float] priority: Certificate priority
        """
        pulumi.set(__self__, "certificate", certificate)
        pulumi.set(__self__, "cis_id", cis_id)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "private_key", private_key)
        if bundle_method is not None:
            pulumi.set(__self__, "bundle_method", bundle_method)
        if cis_certificate_upload_id is not None:
            pulumi.set(__self__, "cis_certificate_upload_id", cis_certificate_upload_id)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @_builtins.property
    @pulumi.getter
    def certificate(self) -> pulumi.Input[_builtins.str]:
        """
        Certificate key
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "certificate", value)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Input[_builtins.str]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Input[_builtins.str]:
        """
        Associated CIS domain
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Input[_builtins.str]:
        """
        Certificate private key
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "private_key", value)

    @_builtins.property
    @pulumi.getter(name="bundleMethod")
    def bundle_method(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Certificate bundle method
        """
        return pulumi.get(self, "bundle_method")

    @bundle_method.setter
    def bundle_method(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bundle_method", value)

    @_builtins.property
    @pulumi.getter(name="cisCertificateUploadId")
    def cis_certificate_upload_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_certificate_upload_id")

    @cis_certificate_upload_id.setter
    def cis_certificate_upload_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_certificate_upload_id", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Certificate priority
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "priority", value)


@pulumi.input_type
class _CisCertificateUploadState:
    def __init__(__self__, *,
                 bundle_method: Optional[pulumi.Input[_builtins.str]] = None,
                 certificate: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_certificate_upload_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 custom_cert_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 expires_on: Optional[pulumi.Input[_builtins.str]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 issuer: Optional[pulumi.Input[_builtins.str]] = None,
                 modified_on: Optional[pulumi.Input[_builtins.str]] = None,
                 priority: Optional[pulumi.Input[_builtins.float]] = None,
                 private_key: Optional[pulumi.Input[_builtins.str]] = None,
                 signature: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 uploaded_on: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CisCertificateUpload resources.
        :param pulumi.Input[_builtins.str] bundle_method: Certificate bundle method
        :param pulumi.Input[_builtins.str] certificate: Certificate key
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.str] expires_on: certificate expires date
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] hosts: hosts which the certificate uploaded to
        :param pulumi.Input[_builtins.str] issuer: certificate issuer
        :param pulumi.Input[_builtins.str] modified_on: certificate modified date
        :param pulumi.Input[_builtins.float] priority: Certificate priority
        :param pulumi.Input[_builtins.str] private_key: Certificate private key
        :param pulumi.Input[_builtins.str] signature: certificate signature
        :param pulumi.Input[_builtins.str] status: certificate status
        :param pulumi.Input[_builtins.str] uploaded_on: certificate uploaded date
        """
        if bundle_method is not None:
            pulumi.set(__self__, "bundle_method", bundle_method)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if cis_certificate_upload_id is not None:
            pulumi.set(__self__, "cis_certificate_upload_id", cis_certificate_upload_id)
        if cis_id is not None:
            pulumi.set(__self__, "cis_id", cis_id)
        if custom_cert_id is not None:
            pulumi.set(__self__, "custom_cert_id", custom_cert_id)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if expires_on is not None:
            pulumi.set(__self__, "expires_on", expires_on)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if modified_on is not None:
            pulumi.set(__self__, "modified_on", modified_on)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if signature is not None:
            pulumi.set(__self__, "signature", signature)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if uploaded_on is not None:
            pulumi.set(__self__, "uploaded_on", uploaded_on)

    @_builtins.property
    @pulumi.getter(name="bundleMethod")
    def bundle_method(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Certificate bundle method
        """
        return pulumi.get(self, "bundle_method")

    @bundle_method.setter
    def bundle_method(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bundle_method", value)

    @_builtins.property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Certificate key
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate", value)

    @_builtins.property
    @pulumi.getter(name="cisCertificateUploadId")
    def cis_certificate_upload_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_certificate_upload_id")

    @cis_certificate_upload_id.setter
    def cis_certificate_upload_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_certificate_upload_id", value)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter(name="customCertId")
    def custom_cert_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "custom_cert_id")

    @custom_cert_id.setter
    def custom_cert_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "custom_cert_id", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Associated CIS domain
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        certificate expires date
        """
        return pulumi.get(self, "expires_on")

    @expires_on.setter
    def expires_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expires_on", value)

    @_builtins.property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        hosts which the certificate uploaded to
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "hosts", value)

    @_builtins.property
    @pulumi.getter
    def issuer(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        certificate issuer
        """
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "issuer", value)

    @_builtins.property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        certificate modified date
        """
        return pulumi.get(self, "modified_on")

    @modified_on.setter
    def modified_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "modified_on", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Certificate priority
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "priority", value)

    @_builtins.property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Certificate private key
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_key", value)

    @_builtins.property
    @pulumi.getter
    def signature(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        certificate signature
        """
        return pulumi.get(self, "signature")

    @signature.setter
    def signature(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "signature", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        certificate status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="uploadedOn")
    def uploaded_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        certificate uploaded date
        """
        return pulumi.get(self, "uploaded_on")

    @uploaded_on.setter
    def uploaded_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "uploaded_on", value)


@pulumi.type_token("ibm:index/cisCertificateUpload:CisCertificateUpload")
class CisCertificateUpload(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bundle_method: Optional[pulumi.Input[_builtins.str]] = None,
                 certificate: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_certificate_upload_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 priority: Optional[pulumi.Input[_builtins.float]] = None,
                 private_key: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a CisCertificateUpload resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] bundle_method: Certificate bundle method
        :param pulumi.Input[_builtins.str] certificate: Certificate key
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.float] priority: Certificate priority
        :param pulumi.Input[_builtins.str] private_key: Certificate private key
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CisCertificateUploadArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CisCertificateUpload resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CisCertificateUploadArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CisCertificateUploadArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bundle_method: Optional[pulumi.Input[_builtins.str]] = None,
                 certificate: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_certificate_upload_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 priority: Optional[pulumi.Input[_builtins.float]] = None,
                 private_key: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CisCertificateUploadArgs.__new__(CisCertificateUploadArgs)

            __props__.__dict__["bundle_method"] = bundle_method
            if certificate is None and not opts.urn:
                raise TypeError("Missing required property 'certificate'")
            __props__.__dict__["certificate"] = None if certificate is None else pulumi.Output.secret(certificate)
            __props__.__dict__["cis_certificate_upload_id"] = cis_certificate_upload_id
            if cis_id is None and not opts.urn:
                raise TypeError("Missing required property 'cis_id'")
            __props__.__dict__["cis_id"] = cis_id
            if domain_id is None and not opts.urn:
                raise TypeError("Missing required property 'domain_id'")
            __props__.__dict__["domain_id"] = domain_id
            __props__.__dict__["priority"] = priority
            if private_key is None and not opts.urn:
                raise TypeError("Missing required property 'private_key'")
            __props__.__dict__["private_key"] = None if private_key is None else pulumi.Output.secret(private_key)
            __props__.__dict__["custom_cert_id"] = None
            __props__.__dict__["expires_on"] = None
            __props__.__dict__["hosts"] = None
            __props__.__dict__["issuer"] = None
            __props__.__dict__["modified_on"] = None
            __props__.__dict__["signature"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["uploaded_on"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["certificate", "privateKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(CisCertificateUpload, __self__).__init__(
            'ibm:index/cisCertificateUpload:CisCertificateUpload',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bundle_method: Optional[pulumi.Input[_builtins.str]] = None,
            certificate: Optional[pulumi.Input[_builtins.str]] = None,
            cis_certificate_upload_id: Optional[pulumi.Input[_builtins.str]] = None,
            cis_id: Optional[pulumi.Input[_builtins.str]] = None,
            custom_cert_id: Optional[pulumi.Input[_builtins.str]] = None,
            domain_id: Optional[pulumi.Input[_builtins.str]] = None,
            expires_on: Optional[pulumi.Input[_builtins.str]] = None,
            hosts: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            issuer: Optional[pulumi.Input[_builtins.str]] = None,
            modified_on: Optional[pulumi.Input[_builtins.str]] = None,
            priority: Optional[pulumi.Input[_builtins.float]] = None,
            private_key: Optional[pulumi.Input[_builtins.str]] = None,
            signature: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            uploaded_on: Optional[pulumi.Input[_builtins.str]] = None) -> 'CisCertificateUpload':
        """
        Get an existing CisCertificateUpload resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] bundle_method: Certificate bundle method
        :param pulumi.Input[_builtins.str] certificate: Certificate key
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.str] expires_on: certificate expires date
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] hosts: hosts which the certificate uploaded to
        :param pulumi.Input[_builtins.str] issuer: certificate issuer
        :param pulumi.Input[_builtins.str] modified_on: certificate modified date
        :param pulumi.Input[_builtins.float] priority: Certificate priority
        :param pulumi.Input[_builtins.str] private_key: Certificate private key
        :param pulumi.Input[_builtins.str] signature: certificate signature
        :param pulumi.Input[_builtins.str] status: certificate status
        :param pulumi.Input[_builtins.str] uploaded_on: certificate uploaded date
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CisCertificateUploadState.__new__(_CisCertificateUploadState)

        __props__.__dict__["bundle_method"] = bundle_method
        __props__.__dict__["certificate"] = certificate
        __props__.__dict__["cis_certificate_upload_id"] = cis_certificate_upload_id
        __props__.__dict__["cis_id"] = cis_id
        __props__.__dict__["custom_cert_id"] = custom_cert_id
        __props__.__dict__["domain_id"] = domain_id
        __props__.__dict__["expires_on"] = expires_on
        __props__.__dict__["hosts"] = hosts
        __props__.__dict__["issuer"] = issuer
        __props__.__dict__["modified_on"] = modified_on
        __props__.__dict__["priority"] = priority
        __props__.__dict__["private_key"] = private_key
        __props__.__dict__["signature"] = signature
        __props__.__dict__["status"] = status
        __props__.__dict__["uploaded_on"] = uploaded_on
        return CisCertificateUpload(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="bundleMethod")
    def bundle_method(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Certificate bundle method
        """
        return pulumi.get(self, "bundle_method")

    @_builtins.property
    @pulumi.getter
    def certificate(self) -> pulumi.Output[_builtins.str]:
        """
        Certificate key
        """
        return pulumi.get(self, "certificate")

    @_builtins.property
    @pulumi.getter(name="cisCertificateUploadId")
    def cis_certificate_upload_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cis_certificate_upload_id")

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Output[_builtins.str]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @_builtins.property
    @pulumi.getter(name="customCertId")
    def custom_cert_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "custom_cert_id")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Output[_builtins.str]:
        """
        Associated CIS domain
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> pulumi.Output[_builtins.str]:
        """
        certificate expires date
        """
        return pulumi.get(self, "expires_on")

    @_builtins.property
    @pulumi.getter
    def hosts(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        hosts which the certificate uploaded to
        """
        return pulumi.get(self, "hosts")

    @_builtins.property
    @pulumi.getter
    def issuer(self) -> pulumi.Output[_builtins.str]:
        """
        certificate issuer
        """
        return pulumi.get(self, "issuer")

    @_builtins.property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> pulumi.Output[_builtins.str]:
        """
        certificate modified date
        """
        return pulumi.get(self, "modified_on")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> pulumi.Output[_builtins.float]:
        """
        Certificate priority
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Output[_builtins.str]:
        """
        Certificate private key
        """
        return pulumi.get(self, "private_key")

    @_builtins.property
    @pulumi.getter
    def signature(self) -> pulumi.Output[_builtins.str]:
        """
        certificate signature
        """
        return pulumi.get(self, "signature")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        certificate status
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="uploadedOn")
    def uploaded_on(self) -> pulumi.Output[_builtins.str]:
        """
        certificate uploaded date
        """
        return pulumi.get(self, "uploaded_on")

