# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsLbListenerResult',
    'AwaitableGetIsLbListenerResult',
    'get_is_lb_listener',
    'get_is_lb_listener_output',
]

@pulumi.output_type
class GetIsLbListenerResult:
    """
    A collection of values returned by getIsLbListener.
    """
    def __init__(__self__, accept_proxy_protocol=None, certificate_instances=None, connection_limit=None, created_at=None, default_pools=None, href=None, https_redirects=None, id=None, idle_connection_timeout=None, lb=None, listener_id=None, policies=None, port=None, port_max=None, port_min=None, protocol=None, provisioning_status=None):
        if accept_proxy_protocol and not isinstance(accept_proxy_protocol, bool):
            raise TypeError("Expected argument 'accept_proxy_protocol' to be a bool")
        pulumi.set(__self__, "accept_proxy_protocol", accept_proxy_protocol)
        if certificate_instances and not isinstance(certificate_instances, list):
            raise TypeError("Expected argument 'certificate_instances' to be a list")
        pulumi.set(__self__, "certificate_instances", certificate_instances)
        if connection_limit and not isinstance(connection_limit, float):
            raise TypeError("Expected argument 'connection_limit' to be a float")
        pulumi.set(__self__, "connection_limit", connection_limit)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if default_pools and not isinstance(default_pools, list):
            raise TypeError("Expected argument 'default_pools' to be a list")
        pulumi.set(__self__, "default_pools", default_pools)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if https_redirects and not isinstance(https_redirects, list):
            raise TypeError("Expected argument 'https_redirects' to be a list")
        pulumi.set(__self__, "https_redirects", https_redirects)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if idle_connection_timeout and not isinstance(idle_connection_timeout, float):
            raise TypeError("Expected argument 'idle_connection_timeout' to be a float")
        pulumi.set(__self__, "idle_connection_timeout", idle_connection_timeout)
        if lb and not isinstance(lb, str):
            raise TypeError("Expected argument 'lb' to be a str")
        pulumi.set(__self__, "lb", lb)
        if listener_id and not isinstance(listener_id, str):
            raise TypeError("Expected argument 'listener_id' to be a str")
        pulumi.set(__self__, "listener_id", listener_id)
        if policies and not isinstance(policies, list):
            raise TypeError("Expected argument 'policies' to be a list")
        pulumi.set(__self__, "policies", policies)
        if port and not isinstance(port, float):
            raise TypeError("Expected argument 'port' to be a float")
        pulumi.set(__self__, "port", port)
        if port_max and not isinstance(port_max, float):
            raise TypeError("Expected argument 'port_max' to be a float")
        pulumi.set(__self__, "port_max", port_max)
        if port_min and not isinstance(port_min, float):
            raise TypeError("Expected argument 'port_min' to be a float")
        pulumi.set(__self__, "port_min", port_min)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if provisioning_status and not isinstance(provisioning_status, str):
            raise TypeError("Expected argument 'provisioning_status' to be a str")
        pulumi.set(__self__, "provisioning_status", provisioning_status)

    @_builtins.property
    @pulumi.getter(name="acceptProxyProtocol")
    def accept_proxy_protocol(self) -> _builtins.bool:
        return pulumi.get(self, "accept_proxy_protocol")

    @_builtins.property
    @pulumi.getter(name="certificateInstances")
    def certificate_instances(self) -> Sequence['outputs.GetIsLbListenerCertificateInstanceResult']:
        return pulumi.get(self, "certificate_instances")

    @_builtins.property
    @pulumi.getter(name="connectionLimit")
    def connection_limit(self) -> _builtins.float:
        return pulumi.get(self, "connection_limit")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="defaultPools")
    def default_pools(self) -> Sequence['outputs.GetIsLbListenerDefaultPoolResult']:
        return pulumi.get(self, "default_pools")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="httpsRedirects")
    def https_redirects(self) -> Sequence['outputs.GetIsLbListenerHttpsRedirectResult']:
        return pulumi.get(self, "https_redirects")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="idleConnectionTimeout")
    def idle_connection_timeout(self) -> _builtins.float:
        return pulumi.get(self, "idle_connection_timeout")

    @_builtins.property
    @pulumi.getter
    def lb(self) -> _builtins.str:
        return pulumi.get(self, "lb")

    @_builtins.property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> _builtins.str:
        return pulumi.get(self, "listener_id")

    @_builtins.property
    @pulumi.getter
    def policies(self) -> Sequence['outputs.GetIsLbListenerPolicyResult']:
        return pulumi.get(self, "policies")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.float:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="portMax")
    def port_max(self) -> _builtins.float:
        return pulumi.get(self, "port_max")

    @_builtins.property
    @pulumi.getter(name="portMin")
    def port_min(self) -> _builtins.float:
        return pulumi.get(self, "port_min")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> _builtins.str:
        return pulumi.get(self, "provisioning_status")


class AwaitableGetIsLbListenerResult(GetIsLbListenerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsLbListenerResult(
            accept_proxy_protocol=self.accept_proxy_protocol,
            certificate_instances=self.certificate_instances,
            connection_limit=self.connection_limit,
            created_at=self.created_at,
            default_pools=self.default_pools,
            href=self.href,
            https_redirects=self.https_redirects,
            id=self.id,
            idle_connection_timeout=self.idle_connection_timeout,
            lb=self.lb,
            listener_id=self.listener_id,
            policies=self.policies,
            port=self.port,
            port_max=self.port_max,
            port_min=self.port_min,
            protocol=self.protocol,
            provisioning_status=self.provisioning_status)


def get_is_lb_listener(id: Optional[_builtins.str] = None,
                       lb: Optional[_builtins.str] = None,
                       listener_id: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsLbListenerResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['lb'] = lb
    __args__['listenerId'] = listener_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsLbListener:getIsLbListener', __args__, opts=opts, typ=GetIsLbListenerResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsLbListenerResult(
        accept_proxy_protocol=pulumi.get(__ret__, 'accept_proxy_protocol'),
        certificate_instances=pulumi.get(__ret__, 'certificate_instances'),
        connection_limit=pulumi.get(__ret__, 'connection_limit'),
        created_at=pulumi.get(__ret__, 'created_at'),
        default_pools=pulumi.get(__ret__, 'default_pools'),
        href=pulumi.get(__ret__, 'href'),
        https_redirects=pulumi.get(__ret__, 'https_redirects'),
        id=pulumi.get(__ret__, 'id'),
        idle_connection_timeout=pulumi.get(__ret__, 'idle_connection_timeout'),
        lb=pulumi.get(__ret__, 'lb'),
        listener_id=pulumi.get(__ret__, 'listener_id'),
        policies=pulumi.get(__ret__, 'policies'),
        port=pulumi.get(__ret__, 'port'),
        port_max=pulumi.get(__ret__, 'port_max'),
        port_min=pulumi.get(__ret__, 'port_min'),
        protocol=pulumi.get(__ret__, 'protocol'),
        provisioning_status=pulumi.get(__ret__, 'provisioning_status'))
def get_is_lb_listener_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              lb: Optional[pulumi.Input[_builtins.str]] = None,
                              listener_id: Optional[pulumi.Input[_builtins.str]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsLbListenerResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['lb'] = lb
    __args__['listenerId'] = listener_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsLbListener:getIsLbListener', __args__, opts=opts, typ=GetIsLbListenerResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsLbListenerResult(
        accept_proxy_protocol=pulumi.get(__response__, 'accept_proxy_protocol'),
        certificate_instances=pulumi.get(__response__, 'certificate_instances'),
        connection_limit=pulumi.get(__response__, 'connection_limit'),
        created_at=pulumi.get(__response__, 'created_at'),
        default_pools=pulumi.get(__response__, 'default_pools'),
        href=pulumi.get(__response__, 'href'),
        https_redirects=pulumi.get(__response__, 'https_redirects'),
        id=pulumi.get(__response__, 'id'),
        idle_connection_timeout=pulumi.get(__response__, 'idle_connection_timeout'),
        lb=pulumi.get(__response__, 'lb'),
        listener_id=pulumi.get(__response__, 'listener_id'),
        policies=pulumi.get(__response__, 'policies'),
        port=pulumi.get(__response__, 'port'),
        port_max=pulumi.get(__response__, 'port_max'),
        port_min=pulumi.get(__response__, 'port_min'),
        protocol=pulumi.get(__response__, 'protocol'),
        provisioning_status=pulumi.get(__response__, 'provisioning_status')))
