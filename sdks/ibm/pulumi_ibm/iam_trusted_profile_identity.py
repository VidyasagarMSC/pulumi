# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['IamTrustedProfileIdentityArgs', 'IamTrustedProfileIdentity']

@pulumi.input_type
class IamTrustedProfileIdentityArgs:
    def __init__(__self__, *,
                 identifier: pulumi.Input[_builtins.str],
                 identity_type: pulumi.Input[_builtins.str],
                 profile_id: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 accounts: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_trusted_profile_identity_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a IamTrustedProfileIdentity resource.
        :param pulumi.Input[_builtins.str] identifier: Identifier of the identity that can assume the trusted profiles. This can be a user identifier (IAM id), serviceid or
               crn. Internally it uses account id of the service id for the identifier 'serviceid' and for the identifier 'crn' it uses
               account id contained in the CRN.
        :param pulumi.Input[_builtins.str] identity_type: Type of the identity.
        :param pulumi.Input[_builtins.str] profile_id: ID of the trusted profile.
        :param pulumi.Input[_builtins.str] type: Type of the identity.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] accounts: Only valid for the type user. Accounts from which a user can assume the trusted profile.
        :param pulumi.Input[_builtins.str] description: Description of the identity that can assume the trusted profile. This is optional field for all the types of identities.
               When this field is not set for the identity type 'serviceid' then the description of the service id is used. Description
               is recommended for the identity type 'crn' E.g. 'Instance 1234 of IBM Cloud Service project'.
        """
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "identity_type", identity_type)
        pulumi.set(__self__, "profile_id", profile_id)
        pulumi.set(__self__, "type", type)
        if accounts is not None:
            pulumi.set(__self__, "accounts", accounts)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if iam_trusted_profile_identity_id is not None:
            pulumi.set(__self__, "iam_trusted_profile_identity_id", iam_trusted_profile_identity_id)

    @_builtins.property
    @pulumi.getter
    def identifier(self) -> pulumi.Input[_builtins.str]:
        """
        Identifier of the identity that can assume the trusted profiles. This can be a user identifier (IAM id), serviceid or
        crn. Internally it uses account id of the service id for the identifier 'serviceid' and for the identifier 'crn' it uses
        account id contained in the CRN.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "identifier", value)

    @_builtins.property
    @pulumi.getter(name="identityType")
    def identity_type(self) -> pulumi.Input[_builtins.str]:
        """
        Type of the identity.
        """
        return pulumi.get(self, "identity_type")

    @identity_type.setter
    def identity_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "identity_type", value)

    @_builtins.property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> pulumi.Input[_builtins.str]:
        """
        ID of the trusted profile.
        """
        return pulumi.get(self, "profile_id")

    @profile_id.setter
    def profile_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "profile_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Type of the identity.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def accounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Only valid for the type user. Accounts from which a user can assume the trusted profile.
        """
        return pulumi.get(self, "accounts")

    @accounts.setter
    def accounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "accounts", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the identity that can assume the trusted profile. This is optional field for all the types of identities.
        When this field is not set for the identity type 'serviceid' then the description of the service id is used. Description
        is recommended for the identity type 'crn' E.g. 'Instance 1234 of IBM Cloud Service project'.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="iamTrustedProfileIdentityId")
    def iam_trusted_profile_identity_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "iam_trusted_profile_identity_id")

    @iam_trusted_profile_identity_id.setter
    def iam_trusted_profile_identity_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_trusted_profile_identity_id", value)


@pulumi.input_type
class _IamTrustedProfileIdentityState:
    def __init__(__self__, *,
                 accounts: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_trusted_profile_identity_id: Optional[pulumi.Input[_builtins.str]] = None,
                 identifier: Optional[pulumi.Input[_builtins.str]] = None,
                 identity_type: Optional[pulumi.Input[_builtins.str]] = None,
                 profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IamTrustedProfileIdentity resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] accounts: Only valid for the type user. Accounts from which a user can assume the trusted profile.
        :param pulumi.Input[_builtins.str] description: Description of the identity that can assume the trusted profile. This is optional field for all the types of identities.
               When this field is not set for the identity type 'serviceid' then the description of the service id is used. Description
               is recommended for the identity type 'crn' E.g. 'Instance 1234 of IBM Cloud Service project'.
        :param pulumi.Input[_builtins.str] identifier: Identifier of the identity that can assume the trusted profiles. This can be a user identifier (IAM id), serviceid or
               crn. Internally it uses account id of the service id for the identifier 'serviceid' and for the identifier 'crn' it uses
               account id contained in the CRN.
        :param pulumi.Input[_builtins.str] identity_type: Type of the identity.
        :param pulumi.Input[_builtins.str] profile_id: ID of the trusted profile.
        :param pulumi.Input[_builtins.str] type: Type of the identity.
        """
        if accounts is not None:
            pulumi.set(__self__, "accounts", accounts)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if iam_trusted_profile_identity_id is not None:
            pulumi.set(__self__, "iam_trusted_profile_identity_id", iam_trusted_profile_identity_id)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if identity_type is not None:
            pulumi.set(__self__, "identity_type", identity_type)
        if profile_id is not None:
            pulumi.set(__self__, "profile_id", profile_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def accounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Only valid for the type user. Accounts from which a user can assume the trusted profile.
        """
        return pulumi.get(self, "accounts")

    @accounts.setter
    def accounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "accounts", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the identity that can assume the trusted profile. This is optional field for all the types of identities.
        When this field is not set for the identity type 'serviceid' then the description of the service id is used. Description
        is recommended for the identity type 'crn' E.g. 'Instance 1234 of IBM Cloud Service project'.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="iamTrustedProfileIdentityId")
    def iam_trusted_profile_identity_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "iam_trusted_profile_identity_id")

    @iam_trusted_profile_identity_id.setter
    def iam_trusted_profile_identity_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_trusted_profile_identity_id", value)

    @_builtins.property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Identifier of the identity that can assume the trusted profiles. This can be a user identifier (IAM id), serviceid or
        crn. Internally it uses account id of the service id for the identifier 'serviceid' and for the identifier 'crn' it uses
        account id contained in the CRN.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "identifier", value)

    @_builtins.property
    @pulumi.getter(name="identityType")
    def identity_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of the identity.
        """
        return pulumi.get(self, "identity_type")

    @identity_type.setter
    def identity_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "identity_type", value)

    @_builtins.property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the trusted profile.
        """
        return pulumi.get(self, "profile_id")

    @profile_id.setter
    def profile_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "profile_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of the identity.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("ibm:index/iamTrustedProfileIdentity:IamTrustedProfileIdentity")
class IamTrustedProfileIdentity(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accounts: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_trusted_profile_identity_id: Optional[pulumi.Input[_builtins.str]] = None,
                 identifier: Optional[pulumi.Input[_builtins.str]] = None,
                 identity_type: Optional[pulumi.Input[_builtins.str]] = None,
                 profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IamTrustedProfileIdentity resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] accounts: Only valid for the type user. Accounts from which a user can assume the trusted profile.
        :param pulumi.Input[_builtins.str] description: Description of the identity that can assume the trusted profile. This is optional field for all the types of identities.
               When this field is not set for the identity type 'serviceid' then the description of the service id is used. Description
               is recommended for the identity type 'crn' E.g. 'Instance 1234 of IBM Cloud Service project'.
        :param pulumi.Input[_builtins.str] identifier: Identifier of the identity that can assume the trusted profiles. This can be a user identifier (IAM id), serviceid or
               crn. Internally it uses account id of the service id for the identifier 'serviceid' and for the identifier 'crn' it uses
               account id contained in the CRN.
        :param pulumi.Input[_builtins.str] identity_type: Type of the identity.
        :param pulumi.Input[_builtins.str] profile_id: ID of the trusted profile.
        :param pulumi.Input[_builtins.str] type: Type of the identity.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IamTrustedProfileIdentityArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IamTrustedProfileIdentity resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IamTrustedProfileIdentityArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IamTrustedProfileIdentityArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accounts: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_trusted_profile_identity_id: Optional[pulumi.Input[_builtins.str]] = None,
                 identifier: Optional[pulumi.Input[_builtins.str]] = None,
                 identity_type: Optional[pulumi.Input[_builtins.str]] = None,
                 profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IamTrustedProfileIdentityArgs.__new__(IamTrustedProfileIdentityArgs)

            __props__.__dict__["accounts"] = accounts
            __props__.__dict__["description"] = description
            __props__.__dict__["iam_trusted_profile_identity_id"] = iam_trusted_profile_identity_id
            if identifier is None and not opts.urn:
                raise TypeError("Missing required property 'identifier'")
            __props__.__dict__["identifier"] = identifier
            if identity_type is None and not opts.urn:
                raise TypeError("Missing required property 'identity_type'")
            __props__.__dict__["identity_type"] = identity_type
            if profile_id is None and not opts.urn:
                raise TypeError("Missing required property 'profile_id'")
            __props__.__dict__["profile_id"] = profile_id
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
        super(IamTrustedProfileIdentity, __self__).__init__(
            'ibm:index/iamTrustedProfileIdentity:IamTrustedProfileIdentity',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accounts: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            iam_trusted_profile_identity_id: Optional[pulumi.Input[_builtins.str]] = None,
            identifier: Optional[pulumi.Input[_builtins.str]] = None,
            identity_type: Optional[pulumi.Input[_builtins.str]] = None,
            profile_id: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None) -> 'IamTrustedProfileIdentity':
        """
        Get an existing IamTrustedProfileIdentity resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] accounts: Only valid for the type user. Accounts from which a user can assume the trusted profile.
        :param pulumi.Input[_builtins.str] description: Description of the identity that can assume the trusted profile. This is optional field for all the types of identities.
               When this field is not set for the identity type 'serviceid' then the description of the service id is used. Description
               is recommended for the identity type 'crn' E.g. 'Instance 1234 of IBM Cloud Service project'.
        :param pulumi.Input[_builtins.str] identifier: Identifier of the identity that can assume the trusted profiles. This can be a user identifier (IAM id), serviceid or
               crn. Internally it uses account id of the service id for the identifier 'serviceid' and for the identifier 'crn' it uses
               account id contained in the CRN.
        :param pulumi.Input[_builtins.str] identity_type: Type of the identity.
        :param pulumi.Input[_builtins.str] profile_id: ID of the trusted profile.
        :param pulumi.Input[_builtins.str] type: Type of the identity.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IamTrustedProfileIdentityState.__new__(_IamTrustedProfileIdentityState)

        __props__.__dict__["accounts"] = accounts
        __props__.__dict__["description"] = description
        __props__.__dict__["iam_trusted_profile_identity_id"] = iam_trusted_profile_identity_id
        __props__.__dict__["identifier"] = identifier
        __props__.__dict__["identity_type"] = identity_type
        __props__.__dict__["profile_id"] = profile_id
        __props__.__dict__["type"] = type
        return IamTrustedProfileIdentity(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def accounts(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Only valid for the type user. Accounts from which a user can assume the trusted profile.
        """
        return pulumi.get(self, "accounts")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Description of the identity that can assume the trusted profile. This is optional field for all the types of identities.
        When this field is not set for the identity type 'serviceid' then the description of the service id is used. Description
        is recommended for the identity type 'crn' E.g. 'Instance 1234 of IBM Cloud Service project'.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="iamTrustedProfileIdentityId")
    def iam_trusted_profile_identity_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "iam_trusted_profile_identity_id")

    @_builtins.property
    @pulumi.getter
    def identifier(self) -> pulumi.Output[_builtins.str]:
        """
        Identifier of the identity that can assume the trusted profiles. This can be a user identifier (IAM id), serviceid or
        crn. Internally it uses account id of the service id for the identifier 'serviceid' and for the identifier 'crn' it uses
        account id contained in the CRN.
        """
        return pulumi.get(self, "identifier")

    @_builtins.property
    @pulumi.getter(name="identityType")
    def identity_type(self) -> pulumi.Output[_builtins.str]:
        """
        Type of the identity.
        """
        return pulumi.get(self, "identity_type")

    @_builtins.property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> pulumi.Output[_builtins.str]:
        """
        ID of the trusted profile.
        """
        return pulumi.get(self, "profile_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Type of the identity.
        """
        return pulumi.get(self, "type")

