# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetSmPublicCertificateConfigurationCaLetsEncryptResult',
    'AwaitableGetSmPublicCertificateConfigurationCaLetsEncryptResult',
    'get_sm_public_certificate_configuration_ca_lets_encrypt',
    'get_sm_public_certificate_configuration_ca_lets_encrypt_output',
]

@pulumi.output_type
class GetSmPublicCertificateConfigurationCaLetsEncryptResult:
    """
    A collection of values returned by getSmPublicCertificateConfigurationCaLetsEncrypt.
    """
    def __init__(__self__, created_at=None, created_by=None, endpoint_type=None, id=None, instance_id=None, lets_encrypt_environment=None, lets_encrypt_preferred_chain=None, lets_encrypt_private_key=None, name=None, region=None, updated_at=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if endpoint_type and not isinstance(endpoint_type, str):
            raise TypeError("Expected argument 'endpoint_type' to be a str")
        pulumi.set(__self__, "endpoint_type", endpoint_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if lets_encrypt_environment and not isinstance(lets_encrypt_environment, str):
            raise TypeError("Expected argument 'lets_encrypt_environment' to be a str")
        pulumi.set(__self__, "lets_encrypt_environment", lets_encrypt_environment)
        if lets_encrypt_preferred_chain and not isinstance(lets_encrypt_preferred_chain, str):
            raise TypeError("Expected argument 'lets_encrypt_preferred_chain' to be a str")
        pulumi.set(__self__, "lets_encrypt_preferred_chain", lets_encrypt_preferred_chain)
        if lets_encrypt_private_key and not isinstance(lets_encrypt_private_key, str):
            raise TypeError("Expected argument 'lets_encrypt_private_key' to be a str")
        pulumi.set(__self__, "lets_encrypt_private_key", lets_encrypt_private_key)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="letsEncryptEnvironment")
    def lets_encrypt_environment(self) -> _builtins.str:
        return pulumi.get(self, "lets_encrypt_environment")

    @_builtins.property
    @pulumi.getter(name="letsEncryptPreferredChain")
    def lets_encrypt_preferred_chain(self) -> _builtins.str:
        return pulumi.get(self, "lets_encrypt_preferred_chain")

    @_builtins.property
    @pulumi.getter(name="letsEncryptPrivateKey")
    def lets_encrypt_private_key(self) -> _builtins.str:
        return pulumi.get(self, "lets_encrypt_private_key")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")


class AwaitableGetSmPublicCertificateConfigurationCaLetsEncryptResult(GetSmPublicCertificateConfigurationCaLetsEncryptResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSmPublicCertificateConfigurationCaLetsEncryptResult(
            created_at=self.created_at,
            created_by=self.created_by,
            endpoint_type=self.endpoint_type,
            id=self.id,
            instance_id=self.instance_id,
            lets_encrypt_environment=self.lets_encrypt_environment,
            lets_encrypt_preferred_chain=self.lets_encrypt_preferred_chain,
            lets_encrypt_private_key=self.lets_encrypt_private_key,
            name=self.name,
            region=self.region,
            updated_at=self.updated_at)


def get_sm_public_certificate_configuration_ca_lets_encrypt(endpoint_type: Optional[_builtins.str] = None,
                                                            id: Optional[_builtins.str] = None,
                                                            instance_id: Optional[_builtins.str] = None,
                                                            name: Optional[_builtins.str] = None,
                                                            region: Optional[_builtins.str] = None,
                                                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSmPublicCertificateConfigurationCaLetsEncryptResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSmPublicCertificateConfigurationCaLetsEncrypt:getSmPublicCertificateConfigurationCaLetsEncrypt', __args__, opts=opts, typ=GetSmPublicCertificateConfigurationCaLetsEncryptResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSmPublicCertificateConfigurationCaLetsEncryptResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        created_by=pulumi.get(__ret__, 'created_by'),
        endpoint_type=pulumi.get(__ret__, 'endpoint_type'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        lets_encrypt_environment=pulumi.get(__ret__, 'lets_encrypt_environment'),
        lets_encrypt_preferred_chain=pulumi.get(__ret__, 'lets_encrypt_preferred_chain'),
        lets_encrypt_private_key=pulumi.get(__ret__, 'lets_encrypt_private_key'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        updated_at=pulumi.get(__ret__, 'updated_at'))
def get_sm_public_certificate_configuration_ca_lets_encrypt_output(endpoint_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                                   id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                                   instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                                   name: Optional[pulumi.Input[_builtins.str]] = None,
                                                                   region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSmPublicCertificateConfigurationCaLetsEncryptResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSmPublicCertificateConfigurationCaLetsEncrypt:getSmPublicCertificateConfigurationCaLetsEncrypt', __args__, opts=opts, typ=GetSmPublicCertificateConfigurationCaLetsEncryptResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSmPublicCertificateConfigurationCaLetsEncryptResult(
        created_at=pulumi.get(__response__, 'created_at'),
        created_by=pulumi.get(__response__, 'created_by'),
        endpoint_type=pulumi.get(__response__, 'endpoint_type'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        lets_encrypt_environment=pulumi.get(__response__, 'lets_encrypt_environment'),
        lets_encrypt_preferred_chain=pulumi.get(__response__, 'lets_encrypt_preferred_chain'),
        lets_encrypt_private_key=pulumi.get(__response__, 'lets_encrypt_private_key'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        updated_at=pulumi.get(__response__, 'updated_at')))
