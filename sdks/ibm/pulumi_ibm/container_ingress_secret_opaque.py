# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ContainerIngressSecretOpaqueArgs', 'ContainerIngressSecretOpaque']

@pulumi.input_type
class ContainerIngressSecretOpaqueArgs:
    def __init__(__self__, *,
                 cluster: pulumi.Input[_builtins.str],
                 fields: pulumi.Input[Sequence[pulumi.Input['ContainerIngressSecretOpaqueFieldArgs']]],
                 secret_name: pulumi.Input[_builtins.str],
                 secret_namespace: pulumi.Input[_builtins.str],
                 container_ingress_secret_opaque_id: Optional[pulumi.Input[_builtins.str]] = None,
                 persistence: Optional[pulumi.Input[_builtins.bool]] = None,
                 timeouts: Optional[pulumi.Input['ContainerIngressSecretOpaqueTimeoutsArgs']] = None,
                 update_secret: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a ContainerIngressSecretOpaque resource.
        :param pulumi.Input[_builtins.str] cluster: Cluster ID or name
        :param pulumi.Input[Sequence[pulumi.Input['ContainerIngressSecretOpaqueFieldArgs']]] fields: Fields of an opaque secret
        :param pulumi.Input[_builtins.str] secret_name: Secret name
        :param pulumi.Input[_builtins.str] secret_namespace: Secret namespace
        :param pulumi.Input[_builtins.bool] persistence: Persistence of secret
        :param pulumi.Input[_builtins.float] update_secret: Updates secret from secrets manager if value is changed (increment each usage)
        """
        pulumi.set(__self__, "cluster", cluster)
        pulumi.set(__self__, "fields", fields)
        pulumi.set(__self__, "secret_name", secret_name)
        pulumi.set(__self__, "secret_namespace", secret_namespace)
        if container_ingress_secret_opaque_id is not None:
            pulumi.set(__self__, "container_ingress_secret_opaque_id", container_ingress_secret_opaque_id)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if update_secret is not None:
            pulumi.set(__self__, "update_secret", update_secret)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> pulumi.Input[_builtins.str]:
        """
        Cluster ID or name
        """
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster", value)

    @_builtins.property
    @pulumi.getter
    def fields(self) -> pulumi.Input[Sequence[pulumi.Input['ContainerIngressSecretOpaqueFieldArgs']]]:
        """
        Fields of an opaque secret
        """
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: pulumi.Input[Sequence[pulumi.Input['ContainerIngressSecretOpaqueFieldArgs']]]):
        pulumi.set(self, "fields", value)

    @_builtins.property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[_builtins.str]:
        """
        Secret name
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "secret_name", value)

    @_builtins.property
    @pulumi.getter(name="secretNamespace")
    def secret_namespace(self) -> pulumi.Input[_builtins.str]:
        """
        Secret namespace
        """
        return pulumi.get(self, "secret_namespace")

    @secret_namespace.setter
    def secret_namespace(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "secret_namespace", value)

    @_builtins.property
    @pulumi.getter(name="containerIngressSecretOpaqueId")
    def container_ingress_secret_opaque_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_ingress_secret_opaque_id")

    @container_ingress_secret_opaque_id.setter
    def container_ingress_secret_opaque_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_ingress_secret_opaque_id", value)

    @_builtins.property
    @pulumi.getter
    def persistence(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Persistence of secret
        """
        return pulumi.get(self, "persistence")

    @persistence.setter
    def persistence(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "persistence", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ContainerIngressSecretOpaqueTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ContainerIngressSecretOpaqueTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="updateSecret")
    def update_secret(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Updates secret from secrets manager if value is changed (increment each usage)
        """
        return pulumi.get(self, "update_secret")

    @update_secret.setter
    def update_secret(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "update_secret", value)


@pulumi.input_type
class _ContainerIngressSecretOpaqueState:
    def __init__(__self__, *,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 container_ingress_secret_opaque_id: Optional[pulumi.Input[_builtins.str]] = None,
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerIngressSecretOpaqueFieldArgs']]]] = None,
                 last_updated_timestamp: Optional[pulumi.Input[_builtins.str]] = None,
                 persistence: Optional[pulumi.Input[_builtins.bool]] = None,
                 secret_name: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['ContainerIngressSecretOpaqueTimeoutsArgs']] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 update_secret: Optional[pulumi.Input[_builtins.float]] = None,
                 user_managed: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        Input properties used for looking up and filtering ContainerIngressSecretOpaque resources.
        :param pulumi.Input[_builtins.str] cluster: Cluster ID or name
        :param pulumi.Input[Sequence[pulumi.Input['ContainerIngressSecretOpaqueFieldArgs']]] fields: Fields of an opaque secret
        :param pulumi.Input[_builtins.str] last_updated_timestamp: Timestamp secret was last updated
        :param pulumi.Input[_builtins.bool] persistence: Persistence of secret
        :param pulumi.Input[_builtins.str] secret_name: Secret name
        :param pulumi.Input[_builtins.str] secret_namespace: Secret namespace
        :param pulumi.Input[_builtins.str] status: Status of the secret
        :param pulumi.Input[_builtins.str] type: Opaque secret type
        :param pulumi.Input[_builtins.float] update_secret: Updates secret from secrets manager if value is changed (increment each usage)
        :param pulumi.Input[_builtins.bool] user_managed: If the secret was created by the user
        """
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if container_ingress_secret_opaque_id is not None:
            pulumi.set(__self__, "container_ingress_secret_opaque_id", container_ingress_secret_opaque_id)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)
        if last_updated_timestamp is not None:
            pulumi.set(__self__, "last_updated_timestamp", last_updated_timestamp)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)
        if secret_namespace is not None:
            pulumi.set(__self__, "secret_namespace", secret_namespace)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if update_secret is not None:
            pulumi.set(__self__, "update_secret", update_secret)
        if user_managed is not None:
            pulumi.set(__self__, "user_managed", user_managed)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cluster ID or name
        """
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster", value)

    @_builtins.property
    @pulumi.getter(name="containerIngressSecretOpaqueId")
    def container_ingress_secret_opaque_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_ingress_secret_opaque_id")

    @container_ingress_secret_opaque_id.setter
    def container_ingress_secret_opaque_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_ingress_secret_opaque_id", value)

    @_builtins.property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerIngressSecretOpaqueFieldArgs']]]]:
        """
        Fields of an opaque secret
        """
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerIngressSecretOpaqueFieldArgs']]]]):
        pulumi.set(self, "fields", value)

    @_builtins.property
    @pulumi.getter(name="lastUpdatedTimestamp")
    def last_updated_timestamp(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Timestamp secret was last updated
        """
        return pulumi.get(self, "last_updated_timestamp")

    @last_updated_timestamp.setter
    def last_updated_timestamp(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_updated_timestamp", value)

    @_builtins.property
    @pulumi.getter
    def persistence(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Persistence of secret
        """
        return pulumi.get(self, "persistence")

    @persistence.setter
    def persistence(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "persistence", value)

    @_builtins.property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Secret name
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_name", value)

    @_builtins.property
    @pulumi.getter(name="secretNamespace")
    def secret_namespace(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Secret namespace
        """
        return pulumi.get(self, "secret_namespace")

    @secret_namespace.setter
    def secret_namespace(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_namespace", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Status of the secret
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ContainerIngressSecretOpaqueTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ContainerIngressSecretOpaqueTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Opaque secret type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="updateSecret")
    def update_secret(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Updates secret from secrets manager if value is changed (increment each usage)
        """
        return pulumi.get(self, "update_secret")

    @update_secret.setter
    def update_secret(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "update_secret", value)

    @_builtins.property
    @pulumi.getter(name="userManaged")
    def user_managed(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If the secret was created by the user
        """
        return pulumi.get(self, "user_managed")

    @user_managed.setter
    def user_managed(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "user_managed", value)


@pulumi.type_token("ibm:index/containerIngressSecretOpaque:ContainerIngressSecretOpaque")
class ContainerIngressSecretOpaque(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 container_ingress_secret_opaque_id: Optional[pulumi.Input[_builtins.str]] = None,
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerIngressSecretOpaqueFieldArgs', 'ContainerIngressSecretOpaqueFieldArgsDict']]]]] = None,
                 persistence: Optional[pulumi.Input[_builtins.bool]] = None,
                 secret_name: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['ContainerIngressSecretOpaqueTimeoutsArgs', 'ContainerIngressSecretOpaqueTimeoutsArgsDict']]] = None,
                 update_secret: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a ContainerIngressSecretOpaque resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster: Cluster ID or name
        :param pulumi.Input[Sequence[pulumi.Input[Union['ContainerIngressSecretOpaqueFieldArgs', 'ContainerIngressSecretOpaqueFieldArgsDict']]]] fields: Fields of an opaque secret
        :param pulumi.Input[_builtins.bool] persistence: Persistence of secret
        :param pulumi.Input[_builtins.str] secret_name: Secret name
        :param pulumi.Input[_builtins.str] secret_namespace: Secret namespace
        :param pulumi.Input[_builtins.float] update_secret: Updates secret from secrets manager if value is changed (increment each usage)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ContainerIngressSecretOpaqueArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ContainerIngressSecretOpaque resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ContainerIngressSecretOpaqueArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ContainerIngressSecretOpaqueArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 container_ingress_secret_opaque_id: Optional[pulumi.Input[_builtins.str]] = None,
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerIngressSecretOpaqueFieldArgs', 'ContainerIngressSecretOpaqueFieldArgsDict']]]]] = None,
                 persistence: Optional[pulumi.Input[_builtins.bool]] = None,
                 secret_name: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['ContainerIngressSecretOpaqueTimeoutsArgs', 'ContainerIngressSecretOpaqueTimeoutsArgsDict']]] = None,
                 update_secret: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ContainerIngressSecretOpaqueArgs.__new__(ContainerIngressSecretOpaqueArgs)

            if cluster is None and not opts.urn:
                raise TypeError("Missing required property 'cluster'")
            __props__.__dict__["cluster"] = cluster
            __props__.__dict__["container_ingress_secret_opaque_id"] = container_ingress_secret_opaque_id
            if fields is None and not opts.urn:
                raise TypeError("Missing required property 'fields'")
            __props__.__dict__["fields"] = fields
            __props__.__dict__["persistence"] = persistence
            if secret_name is None and not opts.urn:
                raise TypeError("Missing required property 'secret_name'")
            __props__.__dict__["secret_name"] = secret_name
            if secret_namespace is None and not opts.urn:
                raise TypeError("Missing required property 'secret_namespace'")
            __props__.__dict__["secret_namespace"] = secret_namespace
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["update_secret"] = update_secret
            __props__.__dict__["last_updated_timestamp"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["type"] = None
            __props__.__dict__["user_managed"] = None
        super(ContainerIngressSecretOpaque, __self__).__init__(
            'ibm:index/containerIngressSecretOpaque:ContainerIngressSecretOpaque',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster: Optional[pulumi.Input[_builtins.str]] = None,
            container_ingress_secret_opaque_id: Optional[pulumi.Input[_builtins.str]] = None,
            fields: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerIngressSecretOpaqueFieldArgs', 'ContainerIngressSecretOpaqueFieldArgsDict']]]]] = None,
            last_updated_timestamp: Optional[pulumi.Input[_builtins.str]] = None,
            persistence: Optional[pulumi.Input[_builtins.bool]] = None,
            secret_name: Optional[pulumi.Input[_builtins.str]] = None,
            secret_namespace: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['ContainerIngressSecretOpaqueTimeoutsArgs', 'ContainerIngressSecretOpaqueTimeoutsArgsDict']]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            update_secret: Optional[pulumi.Input[_builtins.float]] = None,
            user_managed: Optional[pulumi.Input[_builtins.bool]] = None) -> 'ContainerIngressSecretOpaque':
        """
        Get an existing ContainerIngressSecretOpaque resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster: Cluster ID or name
        :param pulumi.Input[Sequence[pulumi.Input[Union['ContainerIngressSecretOpaqueFieldArgs', 'ContainerIngressSecretOpaqueFieldArgsDict']]]] fields: Fields of an opaque secret
        :param pulumi.Input[_builtins.str] last_updated_timestamp: Timestamp secret was last updated
        :param pulumi.Input[_builtins.bool] persistence: Persistence of secret
        :param pulumi.Input[_builtins.str] secret_name: Secret name
        :param pulumi.Input[_builtins.str] secret_namespace: Secret namespace
        :param pulumi.Input[_builtins.str] status: Status of the secret
        :param pulumi.Input[_builtins.str] type: Opaque secret type
        :param pulumi.Input[_builtins.float] update_secret: Updates secret from secrets manager if value is changed (increment each usage)
        :param pulumi.Input[_builtins.bool] user_managed: If the secret was created by the user
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ContainerIngressSecretOpaqueState.__new__(_ContainerIngressSecretOpaqueState)

        __props__.__dict__["cluster"] = cluster
        __props__.__dict__["container_ingress_secret_opaque_id"] = container_ingress_secret_opaque_id
        __props__.__dict__["fields"] = fields
        __props__.__dict__["last_updated_timestamp"] = last_updated_timestamp
        __props__.__dict__["persistence"] = persistence
        __props__.__dict__["secret_name"] = secret_name
        __props__.__dict__["secret_namespace"] = secret_namespace
        __props__.__dict__["status"] = status
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["type"] = type
        __props__.__dict__["update_secret"] = update_secret
        __props__.__dict__["user_managed"] = user_managed
        return ContainerIngressSecretOpaque(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> pulumi.Output[_builtins.str]:
        """
        Cluster ID or name
        """
        return pulumi.get(self, "cluster")

    @_builtins.property
    @pulumi.getter(name="containerIngressSecretOpaqueId")
    def container_ingress_secret_opaque_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "container_ingress_secret_opaque_id")

    @_builtins.property
    @pulumi.getter
    def fields(self) -> pulumi.Output[Sequence['outputs.ContainerIngressSecretOpaqueField']]:
        """
        Fields of an opaque secret
        """
        return pulumi.get(self, "fields")

    @_builtins.property
    @pulumi.getter(name="lastUpdatedTimestamp")
    def last_updated_timestamp(self) -> pulumi.Output[_builtins.str]:
        """
        Timestamp secret was last updated
        """
        return pulumi.get(self, "last_updated_timestamp")

    @_builtins.property
    @pulumi.getter
    def persistence(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Persistence of secret
        """
        return pulumi.get(self, "persistence")

    @_builtins.property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Output[_builtins.str]:
        """
        Secret name
        """
        return pulumi.get(self, "secret_name")

    @_builtins.property
    @pulumi.getter(name="secretNamespace")
    def secret_namespace(self) -> pulumi.Output[_builtins.str]:
        """
        Secret namespace
        """
        return pulumi.get(self, "secret_namespace")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Status of the secret
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.ContainerIngressSecretOpaqueTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Opaque secret type
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updateSecret")
    def update_secret(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Updates secret from secrets manager if value is changed (increment each usage)
        """
        return pulumi.get(self, "update_secret")

    @_builtins.property
    @pulumi.getter(name="userManaged")
    def user_managed(self) -> pulumi.Output[_builtins.bool]:
        """
        If the secret was created by the user
        """
        return pulumi.get(self, "user_managed")

