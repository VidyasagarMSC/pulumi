# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['BackupRecoveryConnectionRegistrationTokenArgs', 'BackupRecoveryConnectionRegistrationToken']

@pulumi.input_type
class BackupRecoveryConnectionRegistrationTokenArgs:
    def __init__(__self__, *,
                 connection_id: pulumi.Input[_builtins.str],
                 x_ibm_tenant_id: pulumi.Input[_builtins.str],
                 backup_recovery_connection_registration_token_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a BackupRecoveryConnectionRegistrationToken resource.
        :param pulumi.Input[_builtins.str] connection_id: Specifies the ID of the connection, connectors belonging to which are to be fetched.
        :param pulumi.Input[_builtins.str] x_ibm_tenant_id: Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
               be specified.
        """
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "x_ibm_tenant_id", x_ibm_tenant_id)
        if backup_recovery_connection_registration_token_id is not None:
            pulumi.set(__self__, "backup_recovery_connection_registration_token_id", backup_recovery_connection_registration_token_id)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the connection, connectors belonging to which are to be fetched.
        """
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "connection_id", value)

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
        be specified.
        """
        return pulumi.get(self, "x_ibm_tenant_id")

    @x_ibm_tenant_id.setter
    def x_ibm_tenant_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "x_ibm_tenant_id", value)

    @_builtins.property
    @pulumi.getter(name="backupRecoveryConnectionRegistrationTokenId")
    def backup_recovery_connection_registration_token_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "backup_recovery_connection_registration_token_id")

    @backup_recovery_connection_registration_token_id.setter
    def backup_recovery_connection_registration_token_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_recovery_connection_registration_token_id", value)


@pulumi.input_type
class _BackupRecoveryConnectionRegistrationTokenState:
    def __init__(__self__, *,
                 backup_recovery_connection_registration_token_id: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 registration_token: Optional[pulumi.Input[_builtins.str]] = None,
                 x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering BackupRecoveryConnectionRegistrationToken resources.
        :param pulumi.Input[_builtins.str] connection_id: Specifies the ID of the connection, connectors belonging to which are to be fetched.
        :param pulumi.Input[_builtins.str] x_ibm_tenant_id: Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
               be specified.
        """
        if backup_recovery_connection_registration_token_id is not None:
            pulumi.set(__self__, "backup_recovery_connection_registration_token_id", backup_recovery_connection_registration_token_id)
        if connection_id is not None:
            pulumi.set(__self__, "connection_id", connection_id)
        if registration_token is not None:
            pulumi.set(__self__, "registration_token", registration_token)
        if x_ibm_tenant_id is not None:
            pulumi.set(__self__, "x_ibm_tenant_id", x_ibm_tenant_id)

    @_builtins.property
    @pulumi.getter(name="backupRecoveryConnectionRegistrationTokenId")
    def backup_recovery_connection_registration_token_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "backup_recovery_connection_registration_token_id")

    @backup_recovery_connection_registration_token_id.setter
    def backup_recovery_connection_registration_token_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_recovery_connection_registration_token_id", value)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the connection, connectors belonging to which are to be fetched.
        """
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connection_id", value)

    @_builtins.property
    @pulumi.getter(name="registrationToken")
    def registration_token(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "registration_token")

    @registration_token.setter
    def registration_token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "registration_token", value)

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
        be specified.
        """
        return pulumi.get(self, "x_ibm_tenant_id")

    @x_ibm_tenant_id.setter
    def x_ibm_tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "x_ibm_tenant_id", value)


@pulumi.type_token("ibm:index/backupRecoveryConnectionRegistrationToken:BackupRecoveryConnectionRegistrationToken")
class BackupRecoveryConnectionRegistrationToken(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_recovery_connection_registration_token_id: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a BackupRecoveryConnectionRegistrationToken resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] connection_id: Specifies the ID of the connection, connectors belonging to which are to be fetched.
        :param pulumi.Input[_builtins.str] x_ibm_tenant_id: Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
               be specified.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BackupRecoveryConnectionRegistrationTokenArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a BackupRecoveryConnectionRegistrationToken resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param BackupRecoveryConnectionRegistrationTokenArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BackupRecoveryConnectionRegistrationTokenArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_recovery_connection_registration_token_id: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BackupRecoveryConnectionRegistrationTokenArgs.__new__(BackupRecoveryConnectionRegistrationTokenArgs)

            __props__.__dict__["backup_recovery_connection_registration_token_id"] = backup_recovery_connection_registration_token_id
            if connection_id is None and not opts.urn:
                raise TypeError("Missing required property 'connection_id'")
            __props__.__dict__["connection_id"] = connection_id
            if x_ibm_tenant_id is None and not opts.urn:
                raise TypeError("Missing required property 'x_ibm_tenant_id'")
            __props__.__dict__["x_ibm_tenant_id"] = x_ibm_tenant_id
            __props__.__dict__["registration_token"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["registrationToken"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(BackupRecoveryConnectionRegistrationToken, __self__).__init__(
            'ibm:index/backupRecoveryConnectionRegistrationToken:BackupRecoveryConnectionRegistrationToken',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            backup_recovery_connection_registration_token_id: Optional[pulumi.Input[_builtins.str]] = None,
            connection_id: Optional[pulumi.Input[_builtins.str]] = None,
            registration_token: Optional[pulumi.Input[_builtins.str]] = None,
            x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'BackupRecoveryConnectionRegistrationToken':
        """
        Get an existing BackupRecoveryConnectionRegistrationToken resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] connection_id: Specifies the ID of the connection, connectors belonging to which are to be fetched.
        :param pulumi.Input[_builtins.str] x_ibm_tenant_id: Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
               be specified.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BackupRecoveryConnectionRegistrationTokenState.__new__(_BackupRecoveryConnectionRegistrationTokenState)

        __props__.__dict__["backup_recovery_connection_registration_token_id"] = backup_recovery_connection_registration_token_id
        __props__.__dict__["connection_id"] = connection_id
        __props__.__dict__["registration_token"] = registration_token
        __props__.__dict__["x_ibm_tenant_id"] = x_ibm_tenant_id
        return BackupRecoveryConnectionRegistrationToken(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="backupRecoveryConnectionRegistrationTokenId")
    def backup_recovery_connection_registration_token_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "backup_recovery_connection_registration_token_id")

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the connection, connectors belonging to which are to be fetched.
        """
        return pulumi.get(self, "connection_id")

    @_builtins.property
    @pulumi.getter(name="registrationToken")
    def registration_token(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "registration_token")

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
        be specified.
        """
        return pulumi.get(self, "x_ibm_tenant_id")

