# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsVpnGatewayArgs', 'IsVpnGateway']

@pulumi.input_type
class IsVpnGatewayArgs:
    def __init__(__self__, *,
                 subnet: pulumi.Input[_builtins.str],
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 is_vpn_gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
                 mode: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['IsVpnGatewayTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a IsVpnGateway resource.
        :param pulumi.Input[_builtins.str] subnet: VPNGateway subnet info
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.str] mode: mode in VPN gateway(route/policy)
        :param pulumi.Input[_builtins.str] name: VPN Gateway instance name
        :param pulumi.Input[_builtins.str] resource_group: The resource group for this VPN gateway
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: VPN Gateway tags list
        """
        pulumi.set(__self__, "subnet", subnet)
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if is_vpn_gateway_id is not None:
            pulumi.set(__self__, "is_vpn_gateway_id", is_vpn_gateway_id)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def subnet(self) -> pulumi.Input[_builtins.str]:
        """
        VPNGateway subnet info
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "subnet", value)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter(name="isVpnGatewayId")
    def is_vpn_gateway_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_vpn_gateway_id")

    @is_vpn_gateway_id.setter
    def is_vpn_gateway_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_vpn_gateway_id", value)

    @_builtins.property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        mode in VPN gateway(route/policy)
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mode", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        VPN Gateway instance name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource group for this VPN gateway
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        VPN Gateway tags list
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsVpnGatewayTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsVpnGatewayTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _IsVpnGatewayState:
    def __init__(__self__, *,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 health_reasons: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnGatewayHealthReasonArgs']]]] = None,
                 health_state: Optional[pulumi.Input[_builtins.str]] = None,
                 is_vpn_gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lifecycle_reasons: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnGatewayLifecycleReasonArgs']]]] = None,
                 lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnGatewayMemberArgs']]]] = None,
                 mode: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 private_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 private_ip_address2: Optional[pulumi.Input[_builtins.str]] = None,
                 public_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 public_ip_address2: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_controller_url: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_status: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['IsVpnGatewayTimeoutsArgs']] = None,
                 vpcs: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnGatewayVpcArgs']]]] = None):
        """
        Input properties used for looking up and filtering IsVpnGateway resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.str] created_at: Created Time of the VPN Gateway
        :param pulumi.Input[_builtins.str] crn: The crn of the resource
        :param pulumi.Input[_builtins.str] health_state: The health of this resource.- `ok`: Healthy- `degraded`: Suffering from compromised performance, capacity, or
               connectivity- `faulted`: Completely unreachable, inoperative, or otherwise entirely incapacitated- `inapplicable`: The
               health state does not apply because of the current lifecycle state. A resource with a lifecycle state of `failed` or
               `deleting` will have a health state of `inapplicable`. A `pending` resource may also have this state.
        :param pulumi.Input[Sequence[pulumi.Input['IsVpnGatewayLifecycleReasonArgs']]] lifecycle_reasons: The reasons for the current lifecycle_state (if any).
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of the VPN route.
        :param pulumi.Input[Sequence[pulumi.Input['IsVpnGatewayMemberArgs']]] members: Collection of VPN gateway members
        :param pulumi.Input[_builtins.str] mode: mode in VPN gateway(route/policy)
        :param pulumi.Input[_builtins.str] name: VPN Gateway instance name
        :param pulumi.Input[_builtins.str] private_ip_address: The Private IP address assigned to the VPN gateway member.
        :param pulumi.Input[_builtins.str] private_ip_address2: The Second Private IP address assigned to the VPN gateway member.
        :param pulumi.Input[_builtins.str] public_ip_address: The public IP address assigned to the VPN gateway member.
        :param pulumi.Input[_builtins.str] public_ip_address2: The second public IP address assigned to the VPN gateway member.
        :param pulumi.Input[_builtins.str] resource_controller_url: The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        :param pulumi.Input[_builtins.str] resource_crn: The crn of the resource
        :param pulumi.Input[_builtins.str] resource_group: The resource group for this VPN gateway
        :param pulumi.Input[_builtins.str] resource_group_name: The resource group name in which resource is provisioned
        :param pulumi.Input[_builtins.str] resource_name: The name of the resource
        :param pulumi.Input[_builtins.str] resource_status: The status of the resource
        :param pulumi.Input[_builtins.str] status: The status of the VPN gateway
        :param pulumi.Input[_builtins.str] subnet: VPNGateway subnet info
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: VPN Gateway tags list
        :param pulumi.Input[Sequence[pulumi.Input['IsVpnGatewayVpcArgs']]] vpcs: VPC for the VPN Gateway
        """
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if health_reasons is not None:
            pulumi.set(__self__, "health_reasons", health_reasons)
        if health_state is not None:
            pulumi.set(__self__, "health_state", health_state)
        if is_vpn_gateway_id is not None:
            pulumi.set(__self__, "is_vpn_gateway_id", is_vpn_gateway_id)
        if lifecycle_reasons is not None:
            pulumi.set(__self__, "lifecycle_reasons", lifecycle_reasons)
        if lifecycle_state is not None:
            pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_ip_address is not None:
            pulumi.set(__self__, "private_ip_address", private_ip_address)
        if private_ip_address2 is not None:
            pulumi.set(__self__, "private_ip_address2", private_ip_address2)
        if public_ip_address is not None:
            pulumi.set(__self__, "public_ip_address", public_ip_address)
        if public_ip_address2 is not None:
            pulumi.set(__self__, "public_ip_address2", public_ip_address2)
        if resource_controller_url is not None:
            pulumi.set(__self__, "resource_controller_url", resource_controller_url)
        if resource_crn is not None:
            pulumi.set(__self__, "resource_crn", resource_crn)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_status is not None:
            pulumi.set(__self__, "resource_status", resource_status)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if vpcs is not None:
            pulumi.set(__self__, "vpcs", vpcs)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Created Time of the VPN Gateway
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The crn of the resource
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="healthReasons")
    def health_reasons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnGatewayHealthReasonArgs']]]]:
        return pulumi.get(self, "health_reasons")

    @health_reasons.setter
    def health_reasons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnGatewayHealthReasonArgs']]]]):
        pulumi.set(self, "health_reasons", value)

    @_builtins.property
    @pulumi.getter(name="healthState")
    def health_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The health of this resource.- `ok`: Healthy- `degraded`: Suffering from compromised performance, capacity, or
        connectivity- `faulted`: Completely unreachable, inoperative, or otherwise entirely incapacitated- `inapplicable`: The
        health state does not apply because of the current lifecycle state. A resource with a lifecycle state of `failed` or
        `deleting` will have a health state of `inapplicable`. A `pending` resource may also have this state.
        """
        return pulumi.get(self, "health_state")

    @health_state.setter
    def health_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "health_state", value)

    @_builtins.property
    @pulumi.getter(name="isVpnGatewayId")
    def is_vpn_gateway_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_vpn_gateway_id")

    @is_vpn_gateway_id.setter
    def is_vpn_gateway_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_vpn_gateway_id", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleReasons")
    def lifecycle_reasons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnGatewayLifecycleReasonArgs']]]]:
        """
        The reasons for the current lifecycle_state (if any).
        """
        return pulumi.get(self, "lifecycle_reasons")

    @lifecycle_reasons.setter
    def lifecycle_reasons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnGatewayLifecycleReasonArgs']]]]):
        pulumi.set(self, "lifecycle_reasons", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The lifecycle state of the VPN route.
        """
        return pulumi.get(self, "lifecycle_state")

    @lifecycle_state.setter
    def lifecycle_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lifecycle_state", value)

    @_builtins.property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnGatewayMemberArgs']]]]:
        """
        Collection of VPN gateway members
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnGatewayMemberArgs']]]]):
        pulumi.set(self, "members", value)

    @_builtins.property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        mode in VPN gateway(route/policy)
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mode", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        VPN Gateway instance name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Private IP address assigned to the VPN gateway member.
        """
        return pulumi.get(self, "private_ip_address")

    @private_ip_address.setter
    def private_ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_ip_address", value)

    @_builtins.property
    @pulumi.getter(name="privateIpAddress2")
    def private_ip_address2(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Second Private IP address assigned to the VPN gateway member.
        """
        return pulumi.get(self, "private_ip_address2")

    @private_ip_address2.setter
    def private_ip_address2(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_ip_address2", value)

    @_builtins.property
    @pulumi.getter(name="publicIpAddress")
    def public_ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The public IP address assigned to the VPN gateway member.
        """
        return pulumi.get(self, "public_ip_address")

    @public_ip_address.setter
    def public_ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_ip_address", value)

    @_builtins.property
    @pulumi.getter(name="publicIpAddress2")
    def public_ip_address2(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The second public IP address assigned to the VPN gateway member.
        """
        return pulumi.get(self, "public_ip_address2")

    @public_ip_address2.setter
    def public_ip_address2(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_ip_address2", value)

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        """
        return pulumi.get(self, "resource_controller_url")

    @resource_controller_url.setter
    def resource_controller_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_controller_url", value)

    @_builtins.property
    @pulumi.getter(name="resourceCrn")
    def resource_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The crn of the resource
        """
        return pulumi.get(self, "resource_crn")

    @resource_crn.setter
    def resource_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_crn", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource group for this VPN gateway
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource group name in which resource is provisioned
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_name", value)

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_name", value)

    @_builtins.property
    @pulumi.getter(name="resourceStatus")
    def resource_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the resource
        """
        return pulumi.get(self, "resource_status")

    @resource_status.setter
    def resource_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_status", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the VPN gateway
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        VPNGateway subnet info
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        VPN Gateway tags list
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsVpnGatewayTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsVpnGatewayTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def vpcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnGatewayVpcArgs']]]]:
        """
        VPC for the VPN Gateway
        """
        return pulumi.get(self, "vpcs")

    @vpcs.setter
    def vpcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnGatewayVpcArgs']]]]):
        pulumi.set(self, "vpcs", value)


@pulumi.type_token("ibm:index/isVpnGateway:IsVpnGateway")
class IsVpnGateway(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 is_vpn_gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
                 mode: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsVpnGatewayTimeoutsArgs', 'IsVpnGatewayTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a IsVpnGateway resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.str] mode: mode in VPN gateway(route/policy)
        :param pulumi.Input[_builtins.str] name: VPN Gateway instance name
        :param pulumi.Input[_builtins.str] resource_group: The resource group for this VPN gateway
        :param pulumi.Input[_builtins.str] subnet: VPNGateway subnet info
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: VPN Gateway tags list
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsVpnGatewayArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsVpnGateway resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsVpnGatewayArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsVpnGatewayArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 is_vpn_gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
                 mode: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsVpnGatewayTimeoutsArgs', 'IsVpnGatewayTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsVpnGatewayArgs.__new__(IsVpnGatewayArgs)

            __props__.__dict__["access_tags"] = access_tags
            __props__.__dict__["is_vpn_gateway_id"] = is_vpn_gateway_id
            __props__.__dict__["mode"] = mode
            __props__.__dict__["name"] = name
            __props__.__dict__["resource_group"] = resource_group
            if subnet is None and not opts.urn:
                raise TypeError("Missing required property 'subnet'")
            __props__.__dict__["subnet"] = subnet
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["created_at"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["health_reasons"] = None
            __props__.__dict__["health_state"] = None
            __props__.__dict__["lifecycle_reasons"] = None
            __props__.__dict__["lifecycle_state"] = None
            __props__.__dict__["members"] = None
            __props__.__dict__["private_ip_address"] = None
            __props__.__dict__["private_ip_address2"] = None
            __props__.__dict__["public_ip_address"] = None
            __props__.__dict__["public_ip_address2"] = None
            __props__.__dict__["resource_controller_url"] = None
            __props__.__dict__["resource_crn"] = None
            __props__.__dict__["resource_group_name"] = None
            __props__.__dict__["resource_name"] = None
            __props__.__dict__["resource_status"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["vpcs"] = None
        super(IsVpnGateway, __self__).__init__(
            'ibm:index/isVpnGateway:IsVpnGateway',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            health_reasons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVpnGatewayHealthReasonArgs', 'IsVpnGatewayHealthReasonArgsDict']]]]] = None,
            health_state: Optional[pulumi.Input[_builtins.str]] = None,
            is_vpn_gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
            lifecycle_reasons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVpnGatewayLifecycleReasonArgs', 'IsVpnGatewayLifecycleReasonArgsDict']]]]] = None,
            lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
            members: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVpnGatewayMemberArgs', 'IsVpnGatewayMemberArgsDict']]]]] = None,
            mode: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            private_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
            private_ip_address2: Optional[pulumi.Input[_builtins.str]] = None,
            public_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
            public_ip_address2: Optional[pulumi.Input[_builtins.str]] = None,
            resource_controller_url: Optional[pulumi.Input[_builtins.str]] = None,
            resource_crn: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_name: Optional[pulumi.Input[_builtins.str]] = None,
            resource_name_: Optional[pulumi.Input[_builtins.str]] = None,
            resource_status: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            subnet: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            timeouts: Optional[pulumi.Input[Union['IsVpnGatewayTimeoutsArgs', 'IsVpnGatewayTimeoutsArgsDict']]] = None,
            vpcs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVpnGatewayVpcArgs', 'IsVpnGatewayVpcArgsDict']]]]] = None) -> 'IsVpnGateway':
        """
        Get an existing IsVpnGateway resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.str] created_at: Created Time of the VPN Gateway
        :param pulumi.Input[_builtins.str] crn: The crn of the resource
        :param pulumi.Input[_builtins.str] health_state: The health of this resource.- `ok`: Healthy- `degraded`: Suffering from compromised performance, capacity, or
               connectivity- `faulted`: Completely unreachable, inoperative, or otherwise entirely incapacitated- `inapplicable`: The
               health state does not apply because of the current lifecycle state. A resource with a lifecycle state of `failed` or
               `deleting` will have a health state of `inapplicable`. A `pending` resource may also have this state.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsVpnGatewayLifecycleReasonArgs', 'IsVpnGatewayLifecycleReasonArgsDict']]]] lifecycle_reasons: The reasons for the current lifecycle_state (if any).
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of the VPN route.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsVpnGatewayMemberArgs', 'IsVpnGatewayMemberArgsDict']]]] members: Collection of VPN gateway members
        :param pulumi.Input[_builtins.str] mode: mode in VPN gateway(route/policy)
        :param pulumi.Input[_builtins.str] name: VPN Gateway instance name
        :param pulumi.Input[_builtins.str] private_ip_address: The Private IP address assigned to the VPN gateway member.
        :param pulumi.Input[_builtins.str] private_ip_address2: The Second Private IP address assigned to the VPN gateway member.
        :param pulumi.Input[_builtins.str] public_ip_address: The public IP address assigned to the VPN gateway member.
        :param pulumi.Input[_builtins.str] public_ip_address2: The second public IP address assigned to the VPN gateway member.
        :param pulumi.Input[_builtins.str] resource_controller_url: The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        :param pulumi.Input[_builtins.str] resource_crn: The crn of the resource
        :param pulumi.Input[_builtins.str] resource_group: The resource group for this VPN gateway
        :param pulumi.Input[_builtins.str] resource_group_name: The resource group name in which resource is provisioned
        :param pulumi.Input[_builtins.str] resource_name_: The name of the resource
        :param pulumi.Input[_builtins.str] resource_status: The status of the resource
        :param pulumi.Input[_builtins.str] status: The status of the VPN gateway
        :param pulumi.Input[_builtins.str] subnet: VPNGateway subnet info
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: VPN Gateway tags list
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsVpnGatewayVpcArgs', 'IsVpnGatewayVpcArgsDict']]]] vpcs: VPC for the VPN Gateway
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsVpnGatewayState.__new__(_IsVpnGatewayState)

        __props__.__dict__["access_tags"] = access_tags
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["crn"] = crn
        __props__.__dict__["health_reasons"] = health_reasons
        __props__.__dict__["health_state"] = health_state
        __props__.__dict__["is_vpn_gateway_id"] = is_vpn_gateway_id
        __props__.__dict__["lifecycle_reasons"] = lifecycle_reasons
        __props__.__dict__["lifecycle_state"] = lifecycle_state
        __props__.__dict__["members"] = members
        __props__.__dict__["mode"] = mode
        __props__.__dict__["name"] = name
        __props__.__dict__["private_ip_address"] = private_ip_address
        __props__.__dict__["private_ip_address2"] = private_ip_address2
        __props__.__dict__["public_ip_address"] = public_ip_address
        __props__.__dict__["public_ip_address2"] = public_ip_address2
        __props__.__dict__["resource_controller_url"] = resource_controller_url
        __props__.__dict__["resource_crn"] = resource_crn
        __props__.__dict__["resource_group"] = resource_group
        __props__.__dict__["resource_group_name"] = resource_group_name
        __props__.__dict__["resource_name"] = resource_name_
        __props__.__dict__["resource_status"] = resource_status
        __props__.__dict__["status"] = status
        __props__.__dict__["subnet"] = subnet
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["vpcs"] = vpcs
        return IsVpnGateway(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Created Time of the VPN Gateway
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The crn of the resource
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="healthReasons")
    def health_reasons(self) -> pulumi.Output[Sequence['outputs.IsVpnGatewayHealthReason']]:
        return pulumi.get(self, "health_reasons")

    @_builtins.property
    @pulumi.getter(name="healthState")
    def health_state(self) -> pulumi.Output[_builtins.str]:
        """
        The health of this resource.- `ok`: Healthy- `degraded`: Suffering from compromised performance, capacity, or
        connectivity- `faulted`: Completely unreachable, inoperative, or otherwise entirely incapacitated- `inapplicable`: The
        health state does not apply because of the current lifecycle state. A resource with a lifecycle state of `failed` or
        `deleting` will have a health state of `inapplicable`. A `pending` resource may also have this state.
        """
        return pulumi.get(self, "health_state")

    @_builtins.property
    @pulumi.getter(name="isVpnGatewayId")
    def is_vpn_gateway_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_vpn_gateway_id")

    @_builtins.property
    @pulumi.getter(name="lifecycleReasons")
    def lifecycle_reasons(self) -> pulumi.Output[Sequence['outputs.IsVpnGatewayLifecycleReason']]:
        """
        The reasons for the current lifecycle_state (if any).
        """
        return pulumi.get(self, "lifecycle_reasons")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> pulumi.Output[_builtins.str]:
        """
        The lifecycle state of the VPN route.
        """
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter
    def members(self) -> pulumi.Output[Sequence['outputs.IsVpnGatewayMember']]:
        """
        Collection of VPN gateway members
        """
        return pulumi.get(self, "members")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        mode in VPN gateway(route/policy)
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        VPN Gateway instance name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> pulumi.Output[_builtins.str]:
        """
        The Private IP address assigned to the VPN gateway member.
        """
        return pulumi.get(self, "private_ip_address")

    @_builtins.property
    @pulumi.getter(name="privateIpAddress2")
    def private_ip_address2(self) -> pulumi.Output[_builtins.str]:
        """
        The Second Private IP address assigned to the VPN gateway member.
        """
        return pulumi.get(self, "private_ip_address2")

    @_builtins.property
    @pulumi.getter(name="publicIpAddress")
    def public_ip_address(self) -> pulumi.Output[_builtins.str]:
        """
        The public IP address assigned to the VPN gateway member.
        """
        return pulumi.get(self, "public_ip_address")

    @_builtins.property
    @pulumi.getter(name="publicIpAddress2")
    def public_ip_address2(self) -> pulumi.Output[_builtins.str]:
        """
        The second public IP address assigned to the VPN gateway member.
        """
        return pulumi.get(self, "public_ip_address2")

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> pulumi.Output[_builtins.str]:
        """
        The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        """
        return pulumi.get(self, "resource_controller_url")

    @_builtins.property
    @pulumi.getter(name="resourceCrn")
    def resource_crn(self) -> pulumi.Output[_builtins.str]:
        """
        The crn of the resource
        """
        return pulumi.get(self, "resource_crn")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Output[_builtins.str]:
        """
        The resource group for this VPN gateway
        """
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Output[_builtins.str]:
        """
        The resource group name in which resource is provisioned
        """
        return pulumi.get(self, "resource_group_name")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceStatus")
    def resource_status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the resource
        """
        return pulumi.get(self, "resource_status")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the VPN gateway
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def subnet(self) -> pulumi.Output[_builtins.str]:
        """
        VPNGateway subnet info
        """
        return pulumi.get(self, "subnet")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        VPN Gateway tags list
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IsVpnGatewayTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def vpcs(self) -> pulumi.Output[Sequence['outputs.IsVpnGatewayVpc']]:
        """
        VPC for the VPN Gateway
        """
        return pulumi.get(self, "vpcs")

