# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetBackupRecoveryProtectionGroupResult',
    'AwaitableGetBackupRecoveryProtectionGroupResult',
    'get_backup_recovery_protection_group',
    'get_backup_recovery_protection_group_output',
]

@pulumi.output_type
class GetBackupRecoveryProtectionGroupResult:
    """
    A collection of values returned by getBackupRecoveryProtectionGroup.
    """
    def __init__(__self__, abort_in_blackouts=None, advanced_configs=None, alert_policies=None, cluster_id=None, description=None, end_time_usecs=None, environment=None, group_id=None, id=None, include_last_run_info=None, invalid_entities=None, is_active=None, is_deleted=None, is_paused=None, is_protect_once=None, last_modified_timestamp_usecs=None, last_runs=None, missing_entities=None, mssql_params=None, name=None, num_protected_objects=None, pause_in_blackouts=None, permissions=None, physical_params=None, policy_id=None, priority=None, protection_group_id=None, prune_excluded_source_ids=None, prune_source_ids=None, qos_policy=None, region_id=None, request_initiator_type=None, slas=None, start_times=None, x_ibm_tenant_id=None):
        if abort_in_blackouts and not isinstance(abort_in_blackouts, bool):
            raise TypeError("Expected argument 'abort_in_blackouts' to be a bool")
        pulumi.set(__self__, "abort_in_blackouts", abort_in_blackouts)
        if advanced_configs and not isinstance(advanced_configs, list):
            raise TypeError("Expected argument 'advanced_configs' to be a list")
        pulumi.set(__self__, "advanced_configs", advanced_configs)
        if alert_policies and not isinstance(alert_policies, list):
            raise TypeError("Expected argument 'alert_policies' to be a list")
        pulumi.set(__self__, "alert_policies", alert_policies)
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if end_time_usecs and not isinstance(end_time_usecs, float):
            raise TypeError("Expected argument 'end_time_usecs' to be a float")
        pulumi.set(__self__, "end_time_usecs", end_time_usecs)
        if environment and not isinstance(environment, str):
            raise TypeError("Expected argument 'environment' to be a str")
        pulumi.set(__self__, "environment", environment)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if include_last_run_info and not isinstance(include_last_run_info, bool):
            raise TypeError("Expected argument 'include_last_run_info' to be a bool")
        pulumi.set(__self__, "include_last_run_info", include_last_run_info)
        if invalid_entities and not isinstance(invalid_entities, list):
            raise TypeError("Expected argument 'invalid_entities' to be a list")
        pulumi.set(__self__, "invalid_entities", invalid_entities)
        if is_active and not isinstance(is_active, bool):
            raise TypeError("Expected argument 'is_active' to be a bool")
        pulumi.set(__self__, "is_active", is_active)
        if is_deleted and not isinstance(is_deleted, bool):
            raise TypeError("Expected argument 'is_deleted' to be a bool")
        pulumi.set(__self__, "is_deleted", is_deleted)
        if is_paused and not isinstance(is_paused, bool):
            raise TypeError("Expected argument 'is_paused' to be a bool")
        pulumi.set(__self__, "is_paused", is_paused)
        if is_protect_once and not isinstance(is_protect_once, bool):
            raise TypeError("Expected argument 'is_protect_once' to be a bool")
        pulumi.set(__self__, "is_protect_once", is_protect_once)
        if last_modified_timestamp_usecs and not isinstance(last_modified_timestamp_usecs, float):
            raise TypeError("Expected argument 'last_modified_timestamp_usecs' to be a float")
        pulumi.set(__self__, "last_modified_timestamp_usecs", last_modified_timestamp_usecs)
        if last_runs and not isinstance(last_runs, list):
            raise TypeError("Expected argument 'last_runs' to be a list")
        pulumi.set(__self__, "last_runs", last_runs)
        if missing_entities and not isinstance(missing_entities, list):
            raise TypeError("Expected argument 'missing_entities' to be a list")
        pulumi.set(__self__, "missing_entities", missing_entities)
        if mssql_params and not isinstance(mssql_params, list):
            raise TypeError("Expected argument 'mssql_params' to be a list")
        pulumi.set(__self__, "mssql_params", mssql_params)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if num_protected_objects and not isinstance(num_protected_objects, float):
            raise TypeError("Expected argument 'num_protected_objects' to be a float")
        pulumi.set(__self__, "num_protected_objects", num_protected_objects)
        if pause_in_blackouts and not isinstance(pause_in_blackouts, bool):
            raise TypeError("Expected argument 'pause_in_blackouts' to be a bool")
        pulumi.set(__self__, "pause_in_blackouts", pause_in_blackouts)
        if permissions and not isinstance(permissions, list):
            raise TypeError("Expected argument 'permissions' to be a list")
        pulumi.set(__self__, "permissions", permissions)
        if physical_params and not isinstance(physical_params, list):
            raise TypeError("Expected argument 'physical_params' to be a list")
        pulumi.set(__self__, "physical_params", physical_params)
        if policy_id and not isinstance(policy_id, str):
            raise TypeError("Expected argument 'policy_id' to be a str")
        pulumi.set(__self__, "policy_id", policy_id)
        if priority and not isinstance(priority, str):
            raise TypeError("Expected argument 'priority' to be a str")
        pulumi.set(__self__, "priority", priority)
        if protection_group_id and not isinstance(protection_group_id, str):
            raise TypeError("Expected argument 'protection_group_id' to be a str")
        pulumi.set(__self__, "protection_group_id", protection_group_id)
        if prune_excluded_source_ids and not isinstance(prune_excluded_source_ids, bool):
            raise TypeError("Expected argument 'prune_excluded_source_ids' to be a bool")
        pulumi.set(__self__, "prune_excluded_source_ids", prune_excluded_source_ids)
        if prune_source_ids and not isinstance(prune_source_ids, bool):
            raise TypeError("Expected argument 'prune_source_ids' to be a bool")
        pulumi.set(__self__, "prune_source_ids", prune_source_ids)
        if qos_policy and not isinstance(qos_policy, str):
            raise TypeError("Expected argument 'qos_policy' to be a str")
        pulumi.set(__self__, "qos_policy", qos_policy)
        if region_id and not isinstance(region_id, str):
            raise TypeError("Expected argument 'region_id' to be a str")
        pulumi.set(__self__, "region_id", region_id)
        if request_initiator_type and not isinstance(request_initiator_type, str):
            raise TypeError("Expected argument 'request_initiator_type' to be a str")
        pulumi.set(__self__, "request_initiator_type", request_initiator_type)
        if slas and not isinstance(slas, list):
            raise TypeError("Expected argument 'slas' to be a list")
        pulumi.set(__self__, "slas", slas)
        if start_times and not isinstance(start_times, list):
            raise TypeError("Expected argument 'start_times' to be a list")
        pulumi.set(__self__, "start_times", start_times)
        if x_ibm_tenant_id and not isinstance(x_ibm_tenant_id, str):
            raise TypeError("Expected argument 'x_ibm_tenant_id' to be a str")
        pulumi.set(__self__, "x_ibm_tenant_id", x_ibm_tenant_id)

    @_builtins.property
    @pulumi.getter(name="abortInBlackouts")
    def abort_in_blackouts(self) -> _builtins.bool:
        return pulumi.get(self, "abort_in_blackouts")

    @_builtins.property
    @pulumi.getter(name="advancedConfigs")
    def advanced_configs(self) -> Sequence['outputs.GetBackupRecoveryProtectionGroupAdvancedConfigResult']:
        return pulumi.get(self, "advanced_configs")

    @_builtins.property
    @pulumi.getter(name="alertPolicies")
    def alert_policies(self) -> Sequence['outputs.GetBackupRecoveryProtectionGroupAlertPolicyResult']:
        return pulumi.get(self, "alert_policies")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="endTimeUsecs")
    def end_time_usecs(self) -> _builtins.float:
        return pulumi.get(self, "end_time_usecs")

    @_builtins.property
    @pulumi.getter
    def environment(self) -> _builtins.str:
        return pulumi.get(self, "environment")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> _builtins.str:
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="includeLastRunInfo")
    def include_last_run_info(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "include_last_run_info")

    @_builtins.property
    @pulumi.getter(name="invalidEntities")
    def invalid_entities(self) -> Sequence['outputs.GetBackupRecoveryProtectionGroupInvalidEntityResult']:
        return pulumi.get(self, "invalid_entities")

    @_builtins.property
    @pulumi.getter(name="isActive")
    def is_active(self) -> _builtins.bool:
        return pulumi.get(self, "is_active")

    @_builtins.property
    @pulumi.getter(name="isDeleted")
    def is_deleted(self) -> _builtins.bool:
        return pulumi.get(self, "is_deleted")

    @_builtins.property
    @pulumi.getter(name="isPaused")
    def is_paused(self) -> _builtins.bool:
        return pulumi.get(self, "is_paused")

    @_builtins.property
    @pulumi.getter(name="isProtectOnce")
    def is_protect_once(self) -> _builtins.bool:
        return pulumi.get(self, "is_protect_once")

    @_builtins.property
    @pulumi.getter(name="lastModifiedTimestampUsecs")
    def last_modified_timestamp_usecs(self) -> _builtins.float:
        return pulumi.get(self, "last_modified_timestamp_usecs")

    @_builtins.property
    @pulumi.getter(name="lastRuns")
    def last_runs(self) -> Sequence['outputs.GetBackupRecoveryProtectionGroupLastRunResult']:
        return pulumi.get(self, "last_runs")

    @_builtins.property
    @pulumi.getter(name="missingEntities")
    def missing_entities(self) -> Sequence['outputs.GetBackupRecoveryProtectionGroupMissingEntityResult']:
        return pulumi.get(self, "missing_entities")

    @_builtins.property
    @pulumi.getter(name="mssqlParams")
    def mssql_params(self) -> Sequence['outputs.GetBackupRecoveryProtectionGroupMssqlParamResult']:
        return pulumi.get(self, "mssql_params")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="numProtectedObjects")
    def num_protected_objects(self) -> _builtins.float:
        return pulumi.get(self, "num_protected_objects")

    @_builtins.property
    @pulumi.getter(name="pauseInBlackouts")
    def pause_in_blackouts(self) -> _builtins.bool:
        return pulumi.get(self, "pause_in_blackouts")

    @_builtins.property
    @pulumi.getter
    def permissions(self) -> Sequence['outputs.GetBackupRecoveryProtectionGroupPermissionResult']:
        return pulumi.get(self, "permissions")

    @_builtins.property
    @pulumi.getter(name="physicalParams")
    def physical_params(self) -> Sequence['outputs.GetBackupRecoveryProtectionGroupPhysicalParamResult']:
        return pulumi.get(self, "physical_params")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> _builtins.str:
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.str:
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="protectionGroupId")
    def protection_group_id(self) -> _builtins.str:
        return pulumi.get(self, "protection_group_id")

    @_builtins.property
    @pulumi.getter(name="pruneExcludedSourceIds")
    def prune_excluded_source_ids(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "prune_excluded_source_ids")

    @_builtins.property
    @pulumi.getter(name="pruneSourceIds")
    def prune_source_ids(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "prune_source_ids")

    @_builtins.property
    @pulumi.getter(name="qosPolicy")
    def qos_policy(self) -> _builtins.str:
        return pulumi.get(self, "qos_policy")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter(name="requestInitiatorType")
    def request_initiator_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "request_initiator_type")

    @_builtins.property
    @pulumi.getter
    def slas(self) -> Sequence['outputs.GetBackupRecoveryProtectionGroupSlaResult']:
        return pulumi.get(self, "slas")

    @_builtins.property
    @pulumi.getter(name="startTimes")
    def start_times(self) -> Sequence['outputs.GetBackupRecoveryProtectionGroupStartTimeResult']:
        return pulumi.get(self, "start_times")

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> _builtins.str:
        return pulumi.get(self, "x_ibm_tenant_id")


class AwaitableGetBackupRecoveryProtectionGroupResult(GetBackupRecoveryProtectionGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupRecoveryProtectionGroupResult(
            abort_in_blackouts=self.abort_in_blackouts,
            advanced_configs=self.advanced_configs,
            alert_policies=self.alert_policies,
            cluster_id=self.cluster_id,
            description=self.description,
            end_time_usecs=self.end_time_usecs,
            environment=self.environment,
            group_id=self.group_id,
            id=self.id,
            include_last_run_info=self.include_last_run_info,
            invalid_entities=self.invalid_entities,
            is_active=self.is_active,
            is_deleted=self.is_deleted,
            is_paused=self.is_paused,
            is_protect_once=self.is_protect_once,
            last_modified_timestamp_usecs=self.last_modified_timestamp_usecs,
            last_runs=self.last_runs,
            missing_entities=self.missing_entities,
            mssql_params=self.mssql_params,
            name=self.name,
            num_protected_objects=self.num_protected_objects,
            pause_in_blackouts=self.pause_in_blackouts,
            permissions=self.permissions,
            physical_params=self.physical_params,
            policy_id=self.policy_id,
            priority=self.priority,
            protection_group_id=self.protection_group_id,
            prune_excluded_source_ids=self.prune_excluded_source_ids,
            prune_source_ids=self.prune_source_ids,
            qos_policy=self.qos_policy,
            region_id=self.region_id,
            request_initiator_type=self.request_initiator_type,
            slas=self.slas,
            start_times=self.start_times,
            x_ibm_tenant_id=self.x_ibm_tenant_id)


def get_backup_recovery_protection_group(id: Optional[_builtins.str] = None,
                                         include_last_run_info: Optional[_builtins.bool] = None,
                                         protection_group_id: Optional[_builtins.str] = None,
                                         prune_excluded_source_ids: Optional[_builtins.bool] = None,
                                         prune_source_ids: Optional[_builtins.bool] = None,
                                         request_initiator_type: Optional[_builtins.str] = None,
                                         x_ibm_tenant_id: Optional[_builtins.str] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupRecoveryProtectionGroupResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['includeLastRunInfo'] = include_last_run_info
    __args__['protectionGroupId'] = protection_group_id
    __args__['pruneExcludedSourceIds'] = prune_excluded_source_ids
    __args__['pruneSourceIds'] = prune_source_ids
    __args__['requestInitiatorType'] = request_initiator_type
    __args__['xIbmTenantId'] = x_ibm_tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getBackupRecoveryProtectionGroup:getBackupRecoveryProtectionGroup', __args__, opts=opts, typ=GetBackupRecoveryProtectionGroupResult, package_ref=_utilities.get_package()).value

    return AwaitableGetBackupRecoveryProtectionGroupResult(
        abort_in_blackouts=pulumi.get(__ret__, 'abort_in_blackouts'),
        advanced_configs=pulumi.get(__ret__, 'advanced_configs'),
        alert_policies=pulumi.get(__ret__, 'alert_policies'),
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        description=pulumi.get(__ret__, 'description'),
        end_time_usecs=pulumi.get(__ret__, 'end_time_usecs'),
        environment=pulumi.get(__ret__, 'environment'),
        group_id=pulumi.get(__ret__, 'group_id'),
        id=pulumi.get(__ret__, 'id'),
        include_last_run_info=pulumi.get(__ret__, 'include_last_run_info'),
        invalid_entities=pulumi.get(__ret__, 'invalid_entities'),
        is_active=pulumi.get(__ret__, 'is_active'),
        is_deleted=pulumi.get(__ret__, 'is_deleted'),
        is_paused=pulumi.get(__ret__, 'is_paused'),
        is_protect_once=pulumi.get(__ret__, 'is_protect_once'),
        last_modified_timestamp_usecs=pulumi.get(__ret__, 'last_modified_timestamp_usecs'),
        last_runs=pulumi.get(__ret__, 'last_runs'),
        missing_entities=pulumi.get(__ret__, 'missing_entities'),
        mssql_params=pulumi.get(__ret__, 'mssql_params'),
        name=pulumi.get(__ret__, 'name'),
        num_protected_objects=pulumi.get(__ret__, 'num_protected_objects'),
        pause_in_blackouts=pulumi.get(__ret__, 'pause_in_blackouts'),
        permissions=pulumi.get(__ret__, 'permissions'),
        physical_params=pulumi.get(__ret__, 'physical_params'),
        policy_id=pulumi.get(__ret__, 'policy_id'),
        priority=pulumi.get(__ret__, 'priority'),
        protection_group_id=pulumi.get(__ret__, 'protection_group_id'),
        prune_excluded_source_ids=pulumi.get(__ret__, 'prune_excluded_source_ids'),
        prune_source_ids=pulumi.get(__ret__, 'prune_source_ids'),
        qos_policy=pulumi.get(__ret__, 'qos_policy'),
        region_id=pulumi.get(__ret__, 'region_id'),
        request_initiator_type=pulumi.get(__ret__, 'request_initiator_type'),
        slas=pulumi.get(__ret__, 'slas'),
        start_times=pulumi.get(__ret__, 'start_times'),
        x_ibm_tenant_id=pulumi.get(__ret__, 'x_ibm_tenant_id'))
def get_backup_recovery_protection_group_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                include_last_run_info: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                                protection_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                prune_excluded_source_ids: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                                prune_source_ids: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                                request_initiator_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBackupRecoveryProtectionGroupResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['includeLastRunInfo'] = include_last_run_info
    __args__['protectionGroupId'] = protection_group_id
    __args__['pruneExcludedSourceIds'] = prune_excluded_source_ids
    __args__['pruneSourceIds'] = prune_source_ids
    __args__['requestInitiatorType'] = request_initiator_type
    __args__['xIbmTenantId'] = x_ibm_tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getBackupRecoveryProtectionGroup:getBackupRecoveryProtectionGroup', __args__, opts=opts, typ=GetBackupRecoveryProtectionGroupResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetBackupRecoveryProtectionGroupResult(
        abort_in_blackouts=pulumi.get(__response__, 'abort_in_blackouts'),
        advanced_configs=pulumi.get(__response__, 'advanced_configs'),
        alert_policies=pulumi.get(__response__, 'alert_policies'),
        cluster_id=pulumi.get(__response__, 'cluster_id'),
        description=pulumi.get(__response__, 'description'),
        end_time_usecs=pulumi.get(__response__, 'end_time_usecs'),
        environment=pulumi.get(__response__, 'environment'),
        group_id=pulumi.get(__response__, 'group_id'),
        id=pulumi.get(__response__, 'id'),
        include_last_run_info=pulumi.get(__response__, 'include_last_run_info'),
        invalid_entities=pulumi.get(__response__, 'invalid_entities'),
        is_active=pulumi.get(__response__, 'is_active'),
        is_deleted=pulumi.get(__response__, 'is_deleted'),
        is_paused=pulumi.get(__response__, 'is_paused'),
        is_protect_once=pulumi.get(__response__, 'is_protect_once'),
        last_modified_timestamp_usecs=pulumi.get(__response__, 'last_modified_timestamp_usecs'),
        last_runs=pulumi.get(__response__, 'last_runs'),
        missing_entities=pulumi.get(__response__, 'missing_entities'),
        mssql_params=pulumi.get(__response__, 'mssql_params'),
        name=pulumi.get(__response__, 'name'),
        num_protected_objects=pulumi.get(__response__, 'num_protected_objects'),
        pause_in_blackouts=pulumi.get(__response__, 'pause_in_blackouts'),
        permissions=pulumi.get(__response__, 'permissions'),
        physical_params=pulumi.get(__response__, 'physical_params'),
        policy_id=pulumi.get(__response__, 'policy_id'),
        priority=pulumi.get(__response__, 'priority'),
        protection_group_id=pulumi.get(__response__, 'protection_group_id'),
        prune_excluded_source_ids=pulumi.get(__response__, 'prune_excluded_source_ids'),
        prune_source_ids=pulumi.get(__response__, 'prune_source_ids'),
        qos_policy=pulumi.get(__response__, 'qos_policy'),
        region_id=pulumi.get(__response__, 'region_id'),
        request_initiator_type=pulumi.get(__response__, 'request_initiator_type'),
        slas=pulumi.get(__response__, 'slas'),
        start_times=pulumi.get(__response__, 'start_times'),
        x_ibm_tenant_id=pulumi.get(__response__, 'x_ibm_tenant_id')))
