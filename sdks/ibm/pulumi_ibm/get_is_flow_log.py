# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsFlowLogResult',
    'AwaitableGetIsFlowLogResult',
    'get_is_flow_log',
    'get_is_flow_log_output',
]

@pulumi.output_type
class GetIsFlowLogResult:
    """
    A collection of values returned by getIsFlowLog.
    """
    def __init__(__self__, access_tags=None, active=None, auto_delete=None, created_at=None, crn=None, href=None, id=None, identifier=None, lifecycle_state=None, name=None, resource_groups=None, storage_buckets=None, targets=None, vpcs=None):
        if access_tags and not isinstance(access_tags, list):
            raise TypeError("Expected argument 'access_tags' to be a list")
        pulumi.set(__self__, "access_tags", access_tags)
        if active and not isinstance(active, bool):
            raise TypeError("Expected argument 'active' to be a bool")
        pulumi.set(__self__, "active", active)
        if auto_delete and not isinstance(auto_delete, bool):
            raise TypeError("Expected argument 'auto_delete' to be a bool")
        pulumi.set(__self__, "auto_delete", auto_delete)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identifier and not isinstance(identifier, str):
            raise TypeError("Expected argument 'identifier' to be a str")
        pulumi.set(__self__, "identifier", identifier)
        if lifecycle_state and not isinstance(lifecycle_state, str):
            raise TypeError("Expected argument 'lifecycle_state' to be a str")
        pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resource_groups and not isinstance(resource_groups, list):
            raise TypeError("Expected argument 'resource_groups' to be a list")
        pulumi.set(__self__, "resource_groups", resource_groups)
        if storage_buckets and not isinstance(storage_buckets, list):
            raise TypeError("Expected argument 'storage_buckets' to be a list")
        pulumi.set(__self__, "storage_buckets", storage_buckets)
        if targets and not isinstance(targets, list):
            raise TypeError("Expected argument 'targets' to be a list")
        pulumi.set(__self__, "targets", targets)
        if vpcs and not isinstance(vpcs, list):
            raise TypeError("Expected argument 'vpcs' to be a list")
        pulumi.set(__self__, "vpcs", vpcs)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter
    def active(self) -> _builtins.bool:
        return pulumi.get(self, "active")

    @_builtins.property
    @pulumi.getter(name="autoDelete")
    def auto_delete(self) -> _builtins.bool:
        return pulumi.get(self, "auto_delete")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def identifier(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "identifier")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> _builtins.str:
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Sequence['outputs.GetIsFlowLogResourceGroupResult']:
        return pulumi.get(self, "resource_groups")

    @_builtins.property
    @pulumi.getter(name="storageBuckets")
    def storage_buckets(self) -> Sequence['outputs.GetIsFlowLogStorageBucketResult']:
        return pulumi.get(self, "storage_buckets")

    @_builtins.property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetIsFlowLogTargetResult']:
        return pulumi.get(self, "targets")

    @_builtins.property
    @pulumi.getter
    def vpcs(self) -> Sequence['outputs.GetIsFlowLogVpcResult']:
        return pulumi.get(self, "vpcs")


class AwaitableGetIsFlowLogResult(GetIsFlowLogResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsFlowLogResult(
            access_tags=self.access_tags,
            active=self.active,
            auto_delete=self.auto_delete,
            created_at=self.created_at,
            crn=self.crn,
            href=self.href,
            id=self.id,
            identifier=self.identifier,
            lifecycle_state=self.lifecycle_state,
            name=self.name,
            resource_groups=self.resource_groups,
            storage_buckets=self.storage_buckets,
            targets=self.targets,
            vpcs=self.vpcs)


def get_is_flow_log(id: Optional[_builtins.str] = None,
                    identifier: Optional[_builtins.str] = None,
                    name: Optional[_builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsFlowLogResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['identifier'] = identifier
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsFlowLog:getIsFlowLog', __args__, opts=opts, typ=GetIsFlowLogResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsFlowLogResult(
        access_tags=pulumi.get(__ret__, 'access_tags'),
        active=pulumi.get(__ret__, 'active'),
        auto_delete=pulumi.get(__ret__, 'auto_delete'),
        created_at=pulumi.get(__ret__, 'created_at'),
        crn=pulumi.get(__ret__, 'crn'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        identifier=pulumi.get(__ret__, 'identifier'),
        lifecycle_state=pulumi.get(__ret__, 'lifecycle_state'),
        name=pulumi.get(__ret__, 'name'),
        resource_groups=pulumi.get(__ret__, 'resource_groups'),
        storage_buckets=pulumi.get(__ret__, 'storage_buckets'),
        targets=pulumi.get(__ret__, 'targets'),
        vpcs=pulumi.get(__ret__, 'vpcs'))
def get_is_flow_log_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           identifier: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsFlowLogResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['identifier'] = identifier
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsFlowLog:getIsFlowLog', __args__, opts=opts, typ=GetIsFlowLogResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsFlowLogResult(
        access_tags=pulumi.get(__response__, 'access_tags'),
        active=pulumi.get(__response__, 'active'),
        auto_delete=pulumi.get(__response__, 'auto_delete'),
        created_at=pulumi.get(__response__, 'created_at'),
        crn=pulumi.get(__response__, 'crn'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        identifier=pulumi.get(__response__, 'identifier'),
        lifecycle_state=pulumi.get(__response__, 'lifecycle_state'),
        name=pulumi.get(__response__, 'name'),
        resource_groups=pulumi.get(__response__, 'resource_groups'),
        storage_buckets=pulumi.get(__response__, 'storage_buckets'),
        targets=pulumi.get(__response__, 'targets'),
        vpcs=pulumi.get(__response__, 'vpcs')))
