# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetCosBackupVaultResult',
    'AwaitableGetCosBackupVaultResult',
    'get_cos_backup_vault',
    'get_cos_backup_vault_output',
]

@pulumi.output_type
class GetCosBackupVaultResult:
    """
    A collection of values returned by getCosBackupVault.
    """
    def __init__(__self__, activity_tracking_management_events=None, backup_vault_name=None, id=None, kms_key_crn=None, metrics_monitoring_usage_metrics=None, region=None, service_instance_id=None):
        if activity_tracking_management_events and not isinstance(activity_tracking_management_events, bool):
            raise TypeError("Expected argument 'activity_tracking_management_events' to be a bool")
        pulumi.set(__self__, "activity_tracking_management_events", activity_tracking_management_events)
        if backup_vault_name and not isinstance(backup_vault_name, str):
            raise TypeError("Expected argument 'backup_vault_name' to be a str")
        pulumi.set(__self__, "backup_vault_name", backup_vault_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if kms_key_crn and not isinstance(kms_key_crn, str):
            raise TypeError("Expected argument 'kms_key_crn' to be a str")
        pulumi.set(__self__, "kms_key_crn", kms_key_crn)
        if metrics_monitoring_usage_metrics and not isinstance(metrics_monitoring_usage_metrics, bool):
            raise TypeError("Expected argument 'metrics_monitoring_usage_metrics' to be a bool")
        pulumi.set(__self__, "metrics_monitoring_usage_metrics", metrics_monitoring_usage_metrics)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if service_instance_id and not isinstance(service_instance_id, str):
            raise TypeError("Expected argument 'service_instance_id' to be a str")
        pulumi.set(__self__, "service_instance_id", service_instance_id)

    @_builtins.property
    @pulumi.getter(name="activityTrackingManagementEvents")
    def activity_tracking_management_events(self) -> _builtins.bool:
        return pulumi.get(self, "activity_tracking_management_events")

    @_builtins.property
    @pulumi.getter(name="backupVaultName")
    def backup_vault_name(self) -> _builtins.str:
        return pulumi.get(self, "backup_vault_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="kmsKeyCrn")
    def kms_key_crn(self) -> _builtins.str:
        return pulumi.get(self, "kms_key_crn")

    @_builtins.property
    @pulumi.getter(name="metricsMonitoringUsageMetrics")
    def metrics_monitoring_usage_metrics(self) -> _builtins.bool:
        return pulumi.get(self, "metrics_monitoring_usage_metrics")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="serviceInstanceId")
    def service_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "service_instance_id")


class AwaitableGetCosBackupVaultResult(GetCosBackupVaultResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCosBackupVaultResult(
            activity_tracking_management_events=self.activity_tracking_management_events,
            backup_vault_name=self.backup_vault_name,
            id=self.id,
            kms_key_crn=self.kms_key_crn,
            metrics_monitoring_usage_metrics=self.metrics_monitoring_usage_metrics,
            region=self.region,
            service_instance_id=self.service_instance_id)


def get_cos_backup_vault(backup_vault_name: Optional[_builtins.str] = None,
                         id: Optional[_builtins.str] = None,
                         region: Optional[_builtins.str] = None,
                         service_instance_id: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCosBackupVaultResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['backupVaultName'] = backup_vault_name
    __args__['id'] = id
    __args__['region'] = region
    __args__['serviceInstanceId'] = service_instance_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCosBackupVault:getCosBackupVault', __args__, opts=opts, typ=GetCosBackupVaultResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCosBackupVaultResult(
        activity_tracking_management_events=pulumi.get(__ret__, 'activity_tracking_management_events'),
        backup_vault_name=pulumi.get(__ret__, 'backup_vault_name'),
        id=pulumi.get(__ret__, 'id'),
        kms_key_crn=pulumi.get(__ret__, 'kms_key_crn'),
        metrics_monitoring_usage_metrics=pulumi.get(__ret__, 'metrics_monitoring_usage_metrics'),
        region=pulumi.get(__ret__, 'region'),
        service_instance_id=pulumi.get(__ret__, 'service_instance_id'))
def get_cos_backup_vault_output(backup_vault_name: Optional[pulumi.Input[_builtins.str]] = None,
                                id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                region: Optional[pulumi.Input[_builtins.str]] = None,
                                service_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCosBackupVaultResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['backupVaultName'] = backup_vault_name
    __args__['id'] = id
    __args__['region'] = region
    __args__['serviceInstanceId'] = service_instance_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCosBackupVault:getCosBackupVault', __args__, opts=opts, typ=GetCosBackupVaultResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCosBackupVaultResult(
        activity_tracking_management_events=pulumi.get(__response__, 'activity_tracking_management_events'),
        backup_vault_name=pulumi.get(__response__, 'backup_vault_name'),
        id=pulumi.get(__response__, 'id'),
        kms_key_crn=pulumi.get(__response__, 'kms_key_crn'),
        metrics_monitoring_usage_metrics=pulumi.get(__response__, 'metrics_monitoring_usage_metrics'),
        region=pulumi.get(__response__, 'region'),
        service_instance_id=pulumi.get(__response__, 'service_instance_id')))
