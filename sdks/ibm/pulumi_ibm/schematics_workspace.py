# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SchematicsWorkspaceArgs', 'SchematicsWorkspace']

@pulumi.input_type
class SchematicsWorkspaceArgs:
    def __init__(__self__, *,
                 template_type: pulumi.Input[_builtins.str],
                 applied_shareddata_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 catalog_ref: Optional[pulumi.Input['SchematicsWorkspaceCatalogRefArgs']] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 frozen: Optional[pulumi.Input[_builtins.bool]] = None,
                 frozen_at: Optional[pulumi.Input[_builtins.str]] = None,
                 frozen_by: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 locked: Optional[pulumi.Input[_builtins.bool]] = None,
                 locked_by: Optional[pulumi.Input[_builtins.str]] = None,
                 locked_time: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 schematics_workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 shared_data: Optional[pulumi.Input['SchematicsWorkspaceSharedDataArgs']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 template_env_settings: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]]] = None,
                 template_git_branch: Optional[pulumi.Input[_builtins.str]] = None,
                 template_git_folder: Optional[pulumi.Input[_builtins.str]] = None,
                 template_git_has_uploadedgitrepotar: Optional[pulumi.Input[_builtins.bool]] = None,
                 template_git_release: Optional[pulumi.Input[_builtins.str]] = None,
                 template_git_repo_sha_value: Optional[pulumi.Input[_builtins.str]] = None,
                 template_git_repo_url: Optional[pulumi.Input[_builtins.str]] = None,
                 template_git_url: Optional[pulumi.Input[_builtins.str]] = None,
                 template_init_state_file: Optional[pulumi.Input[_builtins.str]] = None,
                 template_inputs: Optional[pulumi.Input[Sequence[pulumi.Input['SchematicsWorkspaceTemplateInputArgs']]]] = None,
                 template_ref: Optional[pulumi.Input[_builtins.str]] = None,
                 template_uninstall_script_name: Optional[pulumi.Input[_builtins.str]] = None,
                 template_values: Optional[pulumi.Input[_builtins.str]] = None,
                 template_values_metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['SchematicsWorkspaceTemplateValuesMetadataArgs']]]] = None,
                 x_github_token: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a SchematicsWorkspace resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] applied_shareddata_ids: List of applied shared dataset ID.
        :param pulumi.Input['SchematicsWorkspaceCatalogRefArgs'] catalog_ref: Information about the software template that you chose from the IBM Cloud catalog. This information is returned for IBM
               Cloud catalog offerings only.
        :param pulumi.Input[_builtins.str] description: The description of the workspace.
        :param pulumi.Input[_builtins.bool] frozen: If set to true, the workspace is frozen and changes to the workspace are disabled.
        :param pulumi.Input[_builtins.str] frozen_at: The timestamp when the workspace was frozen.
        :param pulumi.Input[_builtins.str] frozen_by: The user ID that froze the workspace.
        :param pulumi.Input[_builtins.str] location: The location where you want to create your Schematics workspace and run the Schematics jobs. The location that you enter
               must match the API endpoint that you use. For example, if you use the Frankfurt API endpoint, you must specify `eu-de`
               as your location. If you use an API endpoint for a geography and you do not specify a location, Schematics determines
               the location based on availability.
        :param pulumi.Input[_builtins.bool] locked: If set to true, the workspace is locked and disabled for changes.
        :param pulumi.Input[_builtins.str] locked_by: The user ID that initiated a resource-related action, such as applying or destroying resources, that locked the
               workspace.
        :param pulumi.Input[_builtins.str] locked_time: The timestamp when the workspace was locked.
        :param pulumi.Input[_builtins.str] resource_group: The ID of the resource group where you want to provision the workspace.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: A list of tags that are associated with the workspace.
        :param pulumi.Input[_builtins.str] template_git_branch: The repository branch.
        :param pulumi.Input[_builtins.bool] template_git_has_uploadedgitrepotar: Has uploaded git repo tar
        :param pulumi.Input[_builtins.str] template_git_release: The repository release.
        :param pulumi.Input[_builtins.str] template_git_repo_sha_value: The repository SHA value.
        :param pulumi.Input[_builtins.str] template_git_repo_url: The repository URL.
        :param pulumi.Input[_builtins.str] template_git_url: The source URL.
        :param pulumi.Input[Sequence[pulumi.Input['SchematicsWorkspaceTemplateInputArgs']]] template_inputs: VariablesRequest -.
        :param pulumi.Input[_builtins.str] template_ref: Workspace template ref.
        :param pulumi.Input[_builtins.str] template_uninstall_script_name: Uninstall script name.
        :param pulumi.Input[Sequence[pulumi.Input['SchematicsWorkspaceTemplateValuesMetadataArgs']]] template_values_metadatas: List of values metadata.
        """
        pulumi.set(__self__, "template_type", template_type)
        if applied_shareddata_ids is not None:
            pulumi.set(__self__, "applied_shareddata_ids", applied_shareddata_ids)
        if catalog_ref is not None:
            pulumi.set(__self__, "catalog_ref", catalog_ref)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if frozen is not None:
            pulumi.set(__self__, "frozen", frozen)
        if frozen_at is not None:
            pulumi.set(__self__, "frozen_at", frozen_at)
        if frozen_by is not None:
            pulumi.set(__self__, "frozen_by", frozen_by)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if locked_by is not None:
            pulumi.set(__self__, "locked_by", locked_by)
        if locked_time is not None:
            pulumi.set(__self__, "locked_time", locked_time)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if schematics_workspace_id is not None:
            pulumi.set(__self__, "schematics_workspace_id", schematics_workspace_id)
        if shared_data is not None:
            pulumi.set(__self__, "shared_data", shared_data)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if template_env_settings is not None:
            pulumi.set(__self__, "template_env_settings", template_env_settings)
        if template_git_branch is not None:
            pulumi.set(__self__, "template_git_branch", template_git_branch)
        if template_git_folder is not None:
            pulumi.set(__self__, "template_git_folder", template_git_folder)
        if template_git_has_uploadedgitrepotar is not None:
            pulumi.set(__self__, "template_git_has_uploadedgitrepotar", template_git_has_uploadedgitrepotar)
        if template_git_release is not None:
            pulumi.set(__self__, "template_git_release", template_git_release)
        if template_git_repo_sha_value is not None:
            pulumi.set(__self__, "template_git_repo_sha_value", template_git_repo_sha_value)
        if template_git_repo_url is not None:
            pulumi.set(__self__, "template_git_repo_url", template_git_repo_url)
        if template_git_url is not None:
            pulumi.set(__self__, "template_git_url", template_git_url)
        if template_init_state_file is not None:
            pulumi.set(__self__, "template_init_state_file", template_init_state_file)
        if template_inputs is not None:
            pulumi.set(__self__, "template_inputs", template_inputs)
        if template_ref is not None:
            pulumi.set(__self__, "template_ref", template_ref)
        if template_uninstall_script_name is not None:
            pulumi.set(__self__, "template_uninstall_script_name", template_uninstall_script_name)
        if template_values is not None:
            pulumi.set(__self__, "template_values", template_values)
        if template_values_metadatas is not None:
            pulumi.set(__self__, "template_values_metadatas", template_values_metadatas)
        if x_github_token is not None:
            pulumi.set(__self__, "x_github_token", x_github_token)

    @_builtins.property
    @pulumi.getter(name="templateType")
    def template_type(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "template_type")

    @template_type.setter
    def template_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "template_type", value)

    @_builtins.property
    @pulumi.getter(name="appliedShareddataIds")
    def applied_shareddata_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of applied shared dataset ID.
        """
        return pulumi.get(self, "applied_shareddata_ids")

    @applied_shareddata_ids.setter
    def applied_shareddata_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "applied_shareddata_ids", value)

    @_builtins.property
    @pulumi.getter(name="catalogRef")
    def catalog_ref(self) -> Optional[pulumi.Input['SchematicsWorkspaceCatalogRefArgs']]:
        """
        Information about the software template that you chose from the IBM Cloud catalog. This information is returned for IBM
        Cloud catalog offerings only.
        """
        return pulumi.get(self, "catalog_ref")

    @catalog_ref.setter
    def catalog_ref(self, value: Optional[pulumi.Input['SchematicsWorkspaceCatalogRefArgs']]):
        pulumi.set(self, "catalog_ref", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the workspace.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def frozen(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, the workspace is frozen and changes to the workspace are disabled.
        """
        return pulumi.get(self, "frozen")

    @frozen.setter
    def frozen(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "frozen", value)

    @_builtins.property
    @pulumi.getter(name="frozenAt")
    def frozen_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The timestamp when the workspace was frozen.
        """
        return pulumi.get(self, "frozen_at")

    @frozen_at.setter
    def frozen_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "frozen_at", value)

    @_builtins.property
    @pulumi.getter(name="frozenBy")
    def frozen_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user ID that froze the workspace.
        """
        return pulumi.get(self, "frozen_by")

    @frozen_by.setter
    def frozen_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "frozen_by", value)

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The location where you want to create your Schematics workspace and run the Schematics jobs. The location that you enter
        must match the API endpoint that you use. For example, if you use the Frankfurt API endpoint, you must specify `eu-de`
        as your location. If you use an API endpoint for a geography and you do not specify a location, Schematics determines
        the location based on availability.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter
    def locked(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, the workspace is locked and disabled for changes.
        """
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "locked", value)

    @_builtins.property
    @pulumi.getter(name="lockedBy")
    def locked_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user ID that initiated a resource-related action, such as applying or destroying resources, that locked the
        workspace.
        """
        return pulumi.get(self, "locked_by")

    @locked_by.setter
    def locked_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "locked_by", value)

    @_builtins.property
    @pulumi.getter(name="lockedTime")
    def locked_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The timestamp when the workspace was locked.
        """
        return pulumi.get(self, "locked_time")

    @locked_time.setter
    def locked_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "locked_time", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the resource group where you want to provision the workspace.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="schematicsWorkspaceId")
    def schematics_workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "schematics_workspace_id")

    @schematics_workspace_id.setter
    def schematics_workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "schematics_workspace_id", value)

    @_builtins.property
    @pulumi.getter(name="sharedData")
    def shared_data(self) -> Optional[pulumi.Input['SchematicsWorkspaceSharedDataArgs']]:
        return pulumi.get(self, "shared_data")

    @shared_data.setter
    def shared_data(self, value: Optional[pulumi.Input['SchematicsWorkspaceSharedDataArgs']]):
        pulumi.set(self, "shared_data", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        A list of tags that are associated with the workspace.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="templateEnvSettings")
    def template_env_settings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]]]:
        return pulumi.get(self, "template_env_settings")

    @template_env_settings.setter
    def template_env_settings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]]]):
        pulumi.set(self, "template_env_settings", value)

    @_builtins.property
    @pulumi.getter(name="templateGitBranch")
    def template_git_branch(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The repository branch.
        """
        return pulumi.get(self, "template_git_branch")

    @template_git_branch.setter
    def template_git_branch(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_git_branch", value)

    @_builtins.property
    @pulumi.getter(name="templateGitFolder")
    def template_git_folder(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "template_git_folder")

    @template_git_folder.setter
    def template_git_folder(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_git_folder", value)

    @_builtins.property
    @pulumi.getter(name="templateGitHasUploadedgitrepotar")
    def template_git_has_uploadedgitrepotar(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Has uploaded git repo tar
        """
        return pulumi.get(self, "template_git_has_uploadedgitrepotar")

    @template_git_has_uploadedgitrepotar.setter
    def template_git_has_uploadedgitrepotar(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "template_git_has_uploadedgitrepotar", value)

    @_builtins.property
    @pulumi.getter(name="templateGitRelease")
    def template_git_release(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The repository release.
        """
        return pulumi.get(self, "template_git_release")

    @template_git_release.setter
    def template_git_release(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_git_release", value)

    @_builtins.property
    @pulumi.getter(name="templateGitRepoShaValue")
    def template_git_repo_sha_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The repository SHA value.
        """
        return pulumi.get(self, "template_git_repo_sha_value")

    @template_git_repo_sha_value.setter
    def template_git_repo_sha_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_git_repo_sha_value", value)

    @_builtins.property
    @pulumi.getter(name="templateGitRepoUrl")
    def template_git_repo_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The repository URL.
        """
        return pulumi.get(self, "template_git_repo_url")

    @template_git_repo_url.setter
    def template_git_repo_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_git_repo_url", value)

    @_builtins.property
    @pulumi.getter(name="templateGitUrl")
    def template_git_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The source URL.
        """
        return pulumi.get(self, "template_git_url")

    @template_git_url.setter
    def template_git_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_git_url", value)

    @_builtins.property
    @pulumi.getter(name="templateInitStateFile")
    def template_init_state_file(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "template_init_state_file")

    @template_init_state_file.setter
    def template_init_state_file(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_init_state_file", value)

    @_builtins.property
    @pulumi.getter(name="templateInputs")
    def template_inputs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SchematicsWorkspaceTemplateInputArgs']]]]:
        """
        VariablesRequest -.
        """
        return pulumi.get(self, "template_inputs")

    @template_inputs.setter
    def template_inputs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SchematicsWorkspaceTemplateInputArgs']]]]):
        pulumi.set(self, "template_inputs", value)

    @_builtins.property
    @pulumi.getter(name="templateRef")
    def template_ref(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Workspace template ref.
        """
        return pulumi.get(self, "template_ref")

    @template_ref.setter
    def template_ref(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_ref", value)

    @_builtins.property
    @pulumi.getter(name="templateUninstallScriptName")
    def template_uninstall_script_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Uninstall script name.
        """
        return pulumi.get(self, "template_uninstall_script_name")

    @template_uninstall_script_name.setter
    def template_uninstall_script_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_uninstall_script_name", value)

    @_builtins.property
    @pulumi.getter(name="templateValues")
    def template_values(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "template_values")

    @template_values.setter
    def template_values(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_values", value)

    @_builtins.property
    @pulumi.getter(name="templateValuesMetadatas")
    def template_values_metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SchematicsWorkspaceTemplateValuesMetadataArgs']]]]:
        """
        List of values metadata.
        """
        return pulumi.get(self, "template_values_metadatas")

    @template_values_metadatas.setter
    def template_values_metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SchematicsWorkspaceTemplateValuesMetadataArgs']]]]):
        pulumi.set(self, "template_values_metadatas", value)

    @_builtins.property
    @pulumi.getter(name="xGithubToken")
    def x_github_token(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "x_github_token")

    @x_github_token.setter
    def x_github_token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "x_github_token", value)


@pulumi.input_type
class _SchematicsWorkspaceState:
    def __init__(__self__, *,
                 applied_shareddata_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 catalog_ref: Optional[pulumi.Input['SchematicsWorkspaceCatalogRefArgs']] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 frozen: Optional[pulumi.Input[_builtins.bool]] = None,
                 frozen_at: Optional[pulumi.Input[_builtins.str]] = None,
                 frozen_by: Optional[pulumi.Input[_builtins.str]] = None,
                 last_health_check_at: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 locked: Optional[pulumi.Input[_builtins.bool]] = None,
                 locked_by: Optional[pulumi.Input[_builtins.str]] = None,
                 locked_time: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 runtime_datas: Optional[pulumi.Input[Sequence[pulumi.Input['SchematicsWorkspaceRuntimeDataArgs']]]] = None,
                 schematics_workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 shared_data: Optional[pulumi.Input['SchematicsWorkspaceSharedDataArgs']] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 status_code: Optional[pulumi.Input[_builtins.str]] = None,
                 status_msg: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 template_env_settings: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]]] = None,
                 template_git_branch: Optional[pulumi.Input[_builtins.str]] = None,
                 template_git_folder: Optional[pulumi.Input[_builtins.str]] = None,
                 template_git_has_uploadedgitrepotar: Optional[pulumi.Input[_builtins.bool]] = None,
                 template_git_release: Optional[pulumi.Input[_builtins.str]] = None,
                 template_git_repo_sha_value: Optional[pulumi.Input[_builtins.str]] = None,
                 template_git_repo_url: Optional[pulumi.Input[_builtins.str]] = None,
                 template_git_url: Optional[pulumi.Input[_builtins.str]] = None,
                 template_init_state_file: Optional[pulumi.Input[_builtins.str]] = None,
                 template_inputs: Optional[pulumi.Input[Sequence[pulumi.Input['SchematicsWorkspaceTemplateInputArgs']]]] = None,
                 template_ref: Optional[pulumi.Input[_builtins.str]] = None,
                 template_type: Optional[pulumi.Input[_builtins.str]] = None,
                 template_uninstall_script_name: Optional[pulumi.Input[_builtins.str]] = None,
                 template_values: Optional[pulumi.Input[_builtins.str]] = None,
                 template_values_metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['SchematicsWorkspaceTemplateValuesMetadataArgs']]]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_by: Optional[pulumi.Input[_builtins.str]] = None,
                 x_github_token: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SchematicsWorkspace resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] applied_shareddata_ids: List of applied shared dataset ID.
        :param pulumi.Input['SchematicsWorkspaceCatalogRefArgs'] catalog_ref: Information about the software template that you chose from the IBM Cloud catalog. This information is returned for IBM
               Cloud catalog offerings only.
        :param pulumi.Input[_builtins.str] created_at: The timestamp when the workspace was created.
        :param pulumi.Input[_builtins.str] created_by: The user ID that created the workspace.
        :param pulumi.Input[_builtins.str] crn: The workspace CRN.
        :param pulumi.Input[_builtins.str] description: The description of the workspace.
        :param pulumi.Input[_builtins.bool] frozen: If set to true, the workspace is frozen and changes to the workspace are disabled.
        :param pulumi.Input[_builtins.str] frozen_at: The timestamp when the workspace was frozen.
        :param pulumi.Input[_builtins.str] frozen_by: The user ID that froze the workspace.
        :param pulumi.Input[_builtins.str] last_health_check_at: The timestamp when the last health check was performed by Schematics.
        :param pulumi.Input[_builtins.str] location: The location where you want to create your Schematics workspace and run the Schematics jobs. The location that you enter
               must match the API endpoint that you use. For example, if you use the Frankfurt API endpoint, you must specify `eu-de`
               as your location. If you use an API endpoint for a geography and you do not specify a location, Schematics determines
               the location based on availability.
        :param pulumi.Input[_builtins.bool] locked: If set to true, the workspace is locked and disabled for changes.
        :param pulumi.Input[_builtins.str] locked_by: The user ID that initiated a resource-related action, such as applying or destroying resources, that locked the
               workspace.
        :param pulumi.Input[_builtins.str] locked_time: The timestamp when the workspace was locked.
        :param pulumi.Input[_builtins.str] resource_group: The ID of the resource group where you want to provision the workspace.
        :param pulumi.Input[Sequence[pulumi.Input['SchematicsWorkspaceRuntimeDataArgs']]] runtime_datas: Information about the provisioning engine, state file, and runtime logs.
        :param pulumi.Input[_builtins.str] status_code: The success or error code that was returned for the last plan, apply, or destroy job that ran against your workspace.
        :param pulumi.Input[_builtins.str] status_msg: The success or error message that was returned for the last plan, apply, or destroy job that ran against your workspace.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: A list of tags that are associated with the workspace.
        :param pulumi.Input[_builtins.str] template_git_branch: The repository branch.
        :param pulumi.Input[_builtins.bool] template_git_has_uploadedgitrepotar: Has uploaded git repo tar
        :param pulumi.Input[_builtins.str] template_git_release: The repository release.
        :param pulumi.Input[_builtins.str] template_git_repo_sha_value: The repository SHA value.
        :param pulumi.Input[_builtins.str] template_git_repo_url: The repository URL.
        :param pulumi.Input[_builtins.str] template_git_url: The source URL.
        :param pulumi.Input[Sequence[pulumi.Input['SchematicsWorkspaceTemplateInputArgs']]] template_inputs: VariablesRequest -.
        :param pulumi.Input[_builtins.str] template_ref: Workspace template ref.
        :param pulumi.Input[_builtins.str] template_uninstall_script_name: Uninstall script name.
        :param pulumi.Input[Sequence[pulumi.Input['SchematicsWorkspaceTemplateValuesMetadataArgs']]] template_values_metadatas: List of values metadata.
        :param pulumi.Input[_builtins.str] updated_at: The timestamp when the workspace was last updated.
        :param pulumi.Input[_builtins.str] updated_by: The user ID that updated the workspace.
        """
        if applied_shareddata_ids is not None:
            pulumi.set(__self__, "applied_shareddata_ids", applied_shareddata_ids)
        if catalog_ref is not None:
            pulumi.set(__self__, "catalog_ref", catalog_ref)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if frozen is not None:
            pulumi.set(__self__, "frozen", frozen)
        if frozen_at is not None:
            pulumi.set(__self__, "frozen_at", frozen_at)
        if frozen_by is not None:
            pulumi.set(__self__, "frozen_by", frozen_by)
        if last_health_check_at is not None:
            pulumi.set(__self__, "last_health_check_at", last_health_check_at)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if locked_by is not None:
            pulumi.set(__self__, "locked_by", locked_by)
        if locked_time is not None:
            pulumi.set(__self__, "locked_time", locked_time)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if runtime_datas is not None:
            pulumi.set(__self__, "runtime_datas", runtime_datas)
        if schematics_workspace_id is not None:
            pulumi.set(__self__, "schematics_workspace_id", schematics_workspace_id)
        if shared_data is not None:
            pulumi.set(__self__, "shared_data", shared_data)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)
        if status_msg is not None:
            pulumi.set(__self__, "status_msg", status_msg)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if template_env_settings is not None:
            pulumi.set(__self__, "template_env_settings", template_env_settings)
        if template_git_branch is not None:
            pulumi.set(__self__, "template_git_branch", template_git_branch)
        if template_git_folder is not None:
            pulumi.set(__self__, "template_git_folder", template_git_folder)
        if template_git_has_uploadedgitrepotar is not None:
            pulumi.set(__self__, "template_git_has_uploadedgitrepotar", template_git_has_uploadedgitrepotar)
        if template_git_release is not None:
            pulumi.set(__self__, "template_git_release", template_git_release)
        if template_git_repo_sha_value is not None:
            pulumi.set(__self__, "template_git_repo_sha_value", template_git_repo_sha_value)
        if template_git_repo_url is not None:
            pulumi.set(__self__, "template_git_repo_url", template_git_repo_url)
        if template_git_url is not None:
            pulumi.set(__self__, "template_git_url", template_git_url)
        if template_init_state_file is not None:
            pulumi.set(__self__, "template_init_state_file", template_init_state_file)
        if template_inputs is not None:
            pulumi.set(__self__, "template_inputs", template_inputs)
        if template_ref is not None:
            pulumi.set(__self__, "template_ref", template_ref)
        if template_type is not None:
            pulumi.set(__self__, "template_type", template_type)
        if template_uninstall_script_name is not None:
            pulumi.set(__self__, "template_uninstall_script_name", template_uninstall_script_name)
        if template_values is not None:
            pulumi.set(__self__, "template_values", template_values)
        if template_values_metadatas is not None:
            pulumi.set(__self__, "template_values_metadatas", template_values_metadatas)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if x_github_token is not None:
            pulumi.set(__self__, "x_github_token", x_github_token)

    @_builtins.property
    @pulumi.getter(name="appliedShareddataIds")
    def applied_shareddata_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of applied shared dataset ID.
        """
        return pulumi.get(self, "applied_shareddata_ids")

    @applied_shareddata_ids.setter
    def applied_shareddata_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "applied_shareddata_ids", value)

    @_builtins.property
    @pulumi.getter(name="catalogRef")
    def catalog_ref(self) -> Optional[pulumi.Input['SchematicsWorkspaceCatalogRefArgs']]:
        """
        Information about the software template that you chose from the IBM Cloud catalog. This information is returned for IBM
        Cloud catalog offerings only.
        """
        return pulumi.get(self, "catalog_ref")

    @catalog_ref.setter
    def catalog_ref(self, value: Optional[pulumi.Input['SchematicsWorkspaceCatalogRefArgs']]):
        pulumi.set(self, "catalog_ref", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The timestamp when the workspace was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user ID that created the workspace.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The workspace CRN.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the workspace.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def frozen(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, the workspace is frozen and changes to the workspace are disabled.
        """
        return pulumi.get(self, "frozen")

    @frozen.setter
    def frozen(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "frozen", value)

    @_builtins.property
    @pulumi.getter(name="frozenAt")
    def frozen_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The timestamp when the workspace was frozen.
        """
        return pulumi.get(self, "frozen_at")

    @frozen_at.setter
    def frozen_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "frozen_at", value)

    @_builtins.property
    @pulumi.getter(name="frozenBy")
    def frozen_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user ID that froze the workspace.
        """
        return pulumi.get(self, "frozen_by")

    @frozen_by.setter
    def frozen_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "frozen_by", value)

    @_builtins.property
    @pulumi.getter(name="lastHealthCheckAt")
    def last_health_check_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The timestamp when the last health check was performed by Schematics.
        """
        return pulumi.get(self, "last_health_check_at")

    @last_health_check_at.setter
    def last_health_check_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_health_check_at", value)

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The location where you want to create your Schematics workspace and run the Schematics jobs. The location that you enter
        must match the API endpoint that you use. For example, if you use the Frankfurt API endpoint, you must specify `eu-de`
        as your location. If you use an API endpoint for a geography and you do not specify a location, Schematics determines
        the location based on availability.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter
    def locked(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, the workspace is locked and disabled for changes.
        """
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "locked", value)

    @_builtins.property
    @pulumi.getter(name="lockedBy")
    def locked_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user ID that initiated a resource-related action, such as applying or destroying resources, that locked the
        workspace.
        """
        return pulumi.get(self, "locked_by")

    @locked_by.setter
    def locked_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "locked_by", value)

    @_builtins.property
    @pulumi.getter(name="lockedTime")
    def locked_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The timestamp when the workspace was locked.
        """
        return pulumi.get(self, "locked_time")

    @locked_time.setter
    def locked_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "locked_time", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the resource group where you want to provision the workspace.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="runtimeDatas")
    def runtime_datas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SchematicsWorkspaceRuntimeDataArgs']]]]:
        """
        Information about the provisioning engine, state file, and runtime logs.
        """
        return pulumi.get(self, "runtime_datas")

    @runtime_datas.setter
    def runtime_datas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SchematicsWorkspaceRuntimeDataArgs']]]]):
        pulumi.set(self, "runtime_datas", value)

    @_builtins.property
    @pulumi.getter(name="schematicsWorkspaceId")
    def schematics_workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "schematics_workspace_id")

    @schematics_workspace_id.setter
    def schematics_workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "schematics_workspace_id", value)

    @_builtins.property
    @pulumi.getter(name="sharedData")
    def shared_data(self) -> Optional[pulumi.Input['SchematicsWorkspaceSharedDataArgs']]:
        return pulumi.get(self, "shared_data")

    @shared_data.setter
    def shared_data(self, value: Optional[pulumi.Input['SchematicsWorkspaceSharedDataArgs']]):
        pulumi.set(self, "shared_data", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The success or error code that was returned for the last plan, apply, or destroy job that ran against your workspace.
        """
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status_code", value)

    @_builtins.property
    @pulumi.getter(name="statusMsg")
    def status_msg(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The success or error message that was returned for the last plan, apply, or destroy job that ran against your workspace.
        """
        return pulumi.get(self, "status_msg")

    @status_msg.setter
    def status_msg(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status_msg", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        A list of tags that are associated with the workspace.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="templateEnvSettings")
    def template_env_settings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]]]:
        return pulumi.get(self, "template_env_settings")

    @template_env_settings.setter
    def template_env_settings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]]]):
        pulumi.set(self, "template_env_settings", value)

    @_builtins.property
    @pulumi.getter(name="templateGitBranch")
    def template_git_branch(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The repository branch.
        """
        return pulumi.get(self, "template_git_branch")

    @template_git_branch.setter
    def template_git_branch(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_git_branch", value)

    @_builtins.property
    @pulumi.getter(name="templateGitFolder")
    def template_git_folder(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "template_git_folder")

    @template_git_folder.setter
    def template_git_folder(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_git_folder", value)

    @_builtins.property
    @pulumi.getter(name="templateGitHasUploadedgitrepotar")
    def template_git_has_uploadedgitrepotar(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Has uploaded git repo tar
        """
        return pulumi.get(self, "template_git_has_uploadedgitrepotar")

    @template_git_has_uploadedgitrepotar.setter
    def template_git_has_uploadedgitrepotar(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "template_git_has_uploadedgitrepotar", value)

    @_builtins.property
    @pulumi.getter(name="templateGitRelease")
    def template_git_release(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The repository release.
        """
        return pulumi.get(self, "template_git_release")

    @template_git_release.setter
    def template_git_release(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_git_release", value)

    @_builtins.property
    @pulumi.getter(name="templateGitRepoShaValue")
    def template_git_repo_sha_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The repository SHA value.
        """
        return pulumi.get(self, "template_git_repo_sha_value")

    @template_git_repo_sha_value.setter
    def template_git_repo_sha_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_git_repo_sha_value", value)

    @_builtins.property
    @pulumi.getter(name="templateGitRepoUrl")
    def template_git_repo_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The repository URL.
        """
        return pulumi.get(self, "template_git_repo_url")

    @template_git_repo_url.setter
    def template_git_repo_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_git_repo_url", value)

    @_builtins.property
    @pulumi.getter(name="templateGitUrl")
    def template_git_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The source URL.
        """
        return pulumi.get(self, "template_git_url")

    @template_git_url.setter
    def template_git_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_git_url", value)

    @_builtins.property
    @pulumi.getter(name="templateInitStateFile")
    def template_init_state_file(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "template_init_state_file")

    @template_init_state_file.setter
    def template_init_state_file(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_init_state_file", value)

    @_builtins.property
    @pulumi.getter(name="templateInputs")
    def template_inputs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SchematicsWorkspaceTemplateInputArgs']]]]:
        """
        VariablesRequest -.
        """
        return pulumi.get(self, "template_inputs")

    @template_inputs.setter
    def template_inputs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SchematicsWorkspaceTemplateInputArgs']]]]):
        pulumi.set(self, "template_inputs", value)

    @_builtins.property
    @pulumi.getter(name="templateRef")
    def template_ref(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Workspace template ref.
        """
        return pulumi.get(self, "template_ref")

    @template_ref.setter
    def template_ref(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_ref", value)

    @_builtins.property
    @pulumi.getter(name="templateType")
    def template_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "template_type")

    @template_type.setter
    def template_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_type", value)

    @_builtins.property
    @pulumi.getter(name="templateUninstallScriptName")
    def template_uninstall_script_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Uninstall script name.
        """
        return pulumi.get(self, "template_uninstall_script_name")

    @template_uninstall_script_name.setter
    def template_uninstall_script_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_uninstall_script_name", value)

    @_builtins.property
    @pulumi.getter(name="templateValues")
    def template_values(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "template_values")

    @template_values.setter
    def template_values(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_values", value)

    @_builtins.property
    @pulumi.getter(name="templateValuesMetadatas")
    def template_values_metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SchematicsWorkspaceTemplateValuesMetadataArgs']]]]:
        """
        List of values metadata.
        """
        return pulumi.get(self, "template_values_metadatas")

    @template_values_metadatas.setter
    def template_values_metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SchematicsWorkspaceTemplateValuesMetadataArgs']]]]):
        pulumi.set(self, "template_values_metadatas", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The timestamp when the workspace was last updated.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user ID that updated the workspace.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_by", value)

    @_builtins.property
    @pulumi.getter(name="xGithubToken")
    def x_github_token(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "x_github_token")

    @x_github_token.setter
    def x_github_token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "x_github_token", value)


@pulumi.type_token("ibm:index/schematicsWorkspace:SchematicsWorkspace")
class SchematicsWorkspace(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 applied_shareddata_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 catalog_ref: Optional[pulumi.Input[Union['SchematicsWorkspaceCatalogRefArgs', 'SchematicsWorkspaceCatalogRefArgsDict']]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 frozen: Optional[pulumi.Input[_builtins.bool]] = None,
                 frozen_at: Optional[pulumi.Input[_builtins.str]] = None,
                 frozen_by: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 locked: Optional[pulumi.Input[_builtins.bool]] = None,
                 locked_by: Optional[pulumi.Input[_builtins.str]] = None,
                 locked_time: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 schematics_workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 shared_data: Optional[pulumi.Input[Union['SchematicsWorkspaceSharedDataArgs', 'SchematicsWorkspaceSharedDataArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 template_env_settings: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]]] = None,
                 template_git_branch: Optional[pulumi.Input[_builtins.str]] = None,
                 template_git_folder: Optional[pulumi.Input[_builtins.str]] = None,
                 template_git_has_uploadedgitrepotar: Optional[pulumi.Input[_builtins.bool]] = None,
                 template_git_release: Optional[pulumi.Input[_builtins.str]] = None,
                 template_git_repo_sha_value: Optional[pulumi.Input[_builtins.str]] = None,
                 template_git_repo_url: Optional[pulumi.Input[_builtins.str]] = None,
                 template_git_url: Optional[pulumi.Input[_builtins.str]] = None,
                 template_init_state_file: Optional[pulumi.Input[_builtins.str]] = None,
                 template_inputs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SchematicsWorkspaceTemplateInputArgs', 'SchematicsWorkspaceTemplateInputArgsDict']]]]] = None,
                 template_ref: Optional[pulumi.Input[_builtins.str]] = None,
                 template_type: Optional[pulumi.Input[_builtins.str]] = None,
                 template_uninstall_script_name: Optional[pulumi.Input[_builtins.str]] = None,
                 template_values: Optional[pulumi.Input[_builtins.str]] = None,
                 template_values_metadatas: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SchematicsWorkspaceTemplateValuesMetadataArgs', 'SchematicsWorkspaceTemplateValuesMetadataArgsDict']]]]] = None,
                 x_github_token: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a SchematicsWorkspace resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] applied_shareddata_ids: List of applied shared dataset ID.
        :param pulumi.Input[Union['SchematicsWorkspaceCatalogRefArgs', 'SchematicsWorkspaceCatalogRefArgsDict']] catalog_ref: Information about the software template that you chose from the IBM Cloud catalog. This information is returned for IBM
               Cloud catalog offerings only.
        :param pulumi.Input[_builtins.str] description: The description of the workspace.
        :param pulumi.Input[_builtins.bool] frozen: If set to true, the workspace is frozen and changes to the workspace are disabled.
        :param pulumi.Input[_builtins.str] frozen_at: The timestamp when the workspace was frozen.
        :param pulumi.Input[_builtins.str] frozen_by: The user ID that froze the workspace.
        :param pulumi.Input[_builtins.str] location: The location where you want to create your Schematics workspace and run the Schematics jobs. The location that you enter
               must match the API endpoint that you use. For example, if you use the Frankfurt API endpoint, you must specify `eu-de`
               as your location. If you use an API endpoint for a geography and you do not specify a location, Schematics determines
               the location based on availability.
        :param pulumi.Input[_builtins.bool] locked: If set to true, the workspace is locked and disabled for changes.
        :param pulumi.Input[_builtins.str] locked_by: The user ID that initiated a resource-related action, such as applying or destroying resources, that locked the
               workspace.
        :param pulumi.Input[_builtins.str] locked_time: The timestamp when the workspace was locked.
        :param pulumi.Input[_builtins.str] resource_group: The ID of the resource group where you want to provision the workspace.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: A list of tags that are associated with the workspace.
        :param pulumi.Input[_builtins.str] template_git_branch: The repository branch.
        :param pulumi.Input[_builtins.bool] template_git_has_uploadedgitrepotar: Has uploaded git repo tar
        :param pulumi.Input[_builtins.str] template_git_release: The repository release.
        :param pulumi.Input[_builtins.str] template_git_repo_sha_value: The repository SHA value.
        :param pulumi.Input[_builtins.str] template_git_repo_url: The repository URL.
        :param pulumi.Input[_builtins.str] template_git_url: The source URL.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SchematicsWorkspaceTemplateInputArgs', 'SchematicsWorkspaceTemplateInputArgsDict']]]] template_inputs: VariablesRequest -.
        :param pulumi.Input[_builtins.str] template_ref: Workspace template ref.
        :param pulumi.Input[_builtins.str] template_uninstall_script_name: Uninstall script name.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SchematicsWorkspaceTemplateValuesMetadataArgs', 'SchematicsWorkspaceTemplateValuesMetadataArgsDict']]]] template_values_metadatas: List of values metadata.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SchematicsWorkspaceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SchematicsWorkspace resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SchematicsWorkspaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SchematicsWorkspaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 applied_shareddata_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 catalog_ref: Optional[pulumi.Input[Union['SchematicsWorkspaceCatalogRefArgs', 'SchematicsWorkspaceCatalogRefArgsDict']]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 frozen: Optional[pulumi.Input[_builtins.bool]] = None,
                 frozen_at: Optional[pulumi.Input[_builtins.str]] = None,
                 frozen_by: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 locked: Optional[pulumi.Input[_builtins.bool]] = None,
                 locked_by: Optional[pulumi.Input[_builtins.str]] = None,
                 locked_time: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 schematics_workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 shared_data: Optional[pulumi.Input[Union['SchematicsWorkspaceSharedDataArgs', 'SchematicsWorkspaceSharedDataArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 template_env_settings: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]]] = None,
                 template_git_branch: Optional[pulumi.Input[_builtins.str]] = None,
                 template_git_folder: Optional[pulumi.Input[_builtins.str]] = None,
                 template_git_has_uploadedgitrepotar: Optional[pulumi.Input[_builtins.bool]] = None,
                 template_git_release: Optional[pulumi.Input[_builtins.str]] = None,
                 template_git_repo_sha_value: Optional[pulumi.Input[_builtins.str]] = None,
                 template_git_repo_url: Optional[pulumi.Input[_builtins.str]] = None,
                 template_git_url: Optional[pulumi.Input[_builtins.str]] = None,
                 template_init_state_file: Optional[pulumi.Input[_builtins.str]] = None,
                 template_inputs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SchematicsWorkspaceTemplateInputArgs', 'SchematicsWorkspaceTemplateInputArgsDict']]]]] = None,
                 template_ref: Optional[pulumi.Input[_builtins.str]] = None,
                 template_type: Optional[pulumi.Input[_builtins.str]] = None,
                 template_uninstall_script_name: Optional[pulumi.Input[_builtins.str]] = None,
                 template_values: Optional[pulumi.Input[_builtins.str]] = None,
                 template_values_metadatas: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SchematicsWorkspaceTemplateValuesMetadataArgs', 'SchematicsWorkspaceTemplateValuesMetadataArgsDict']]]]] = None,
                 x_github_token: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SchematicsWorkspaceArgs.__new__(SchematicsWorkspaceArgs)

            __props__.__dict__["applied_shareddata_ids"] = applied_shareddata_ids
            __props__.__dict__["catalog_ref"] = catalog_ref
            __props__.__dict__["description"] = description
            __props__.__dict__["frozen"] = frozen
            __props__.__dict__["frozen_at"] = frozen_at
            __props__.__dict__["frozen_by"] = frozen_by
            __props__.__dict__["location"] = location
            __props__.__dict__["locked"] = locked
            __props__.__dict__["locked_by"] = locked_by
            __props__.__dict__["locked_time"] = locked_time
            __props__.__dict__["name"] = name
            __props__.__dict__["resource_group"] = resource_group
            __props__.__dict__["schematics_workspace_id"] = schematics_workspace_id
            __props__.__dict__["shared_data"] = shared_data
            __props__.__dict__["tags"] = tags
            __props__.__dict__["template_env_settings"] = template_env_settings
            __props__.__dict__["template_git_branch"] = template_git_branch
            __props__.__dict__["template_git_folder"] = template_git_folder
            __props__.__dict__["template_git_has_uploadedgitrepotar"] = template_git_has_uploadedgitrepotar
            __props__.__dict__["template_git_release"] = template_git_release
            __props__.__dict__["template_git_repo_sha_value"] = template_git_repo_sha_value
            __props__.__dict__["template_git_repo_url"] = template_git_repo_url
            __props__.__dict__["template_git_url"] = template_git_url
            __props__.__dict__["template_init_state_file"] = template_init_state_file
            __props__.__dict__["template_inputs"] = template_inputs
            __props__.__dict__["template_ref"] = template_ref
            if template_type is None and not opts.urn:
                raise TypeError("Missing required property 'template_type'")
            __props__.__dict__["template_type"] = template_type
            __props__.__dict__["template_uninstall_script_name"] = template_uninstall_script_name
            __props__.__dict__["template_values"] = template_values
            __props__.__dict__["template_values_metadatas"] = template_values_metadatas
            __props__.__dict__["x_github_token"] = x_github_token
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["last_health_check_at"] = None
            __props__.__dict__["runtime_datas"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["status_code"] = None
            __props__.__dict__["status_msg"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["updated_by"] = None
        super(SchematicsWorkspace, __self__).__init__(
            'ibm:index/schematicsWorkspace:SchematicsWorkspace',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            applied_shareddata_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            catalog_ref: Optional[pulumi.Input[Union['SchematicsWorkspaceCatalogRefArgs', 'SchematicsWorkspaceCatalogRefArgsDict']]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            created_by: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            frozen: Optional[pulumi.Input[_builtins.bool]] = None,
            frozen_at: Optional[pulumi.Input[_builtins.str]] = None,
            frozen_by: Optional[pulumi.Input[_builtins.str]] = None,
            last_health_check_at: Optional[pulumi.Input[_builtins.str]] = None,
            location: Optional[pulumi.Input[_builtins.str]] = None,
            locked: Optional[pulumi.Input[_builtins.bool]] = None,
            locked_by: Optional[pulumi.Input[_builtins.str]] = None,
            locked_time: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group: Optional[pulumi.Input[_builtins.str]] = None,
            runtime_datas: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SchematicsWorkspaceRuntimeDataArgs', 'SchematicsWorkspaceRuntimeDataArgsDict']]]]] = None,
            schematics_workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
            shared_data: Optional[pulumi.Input[Union['SchematicsWorkspaceSharedDataArgs', 'SchematicsWorkspaceSharedDataArgsDict']]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            status_code: Optional[pulumi.Input[_builtins.str]] = None,
            status_msg: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            template_env_settings: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]]] = None,
            template_git_branch: Optional[pulumi.Input[_builtins.str]] = None,
            template_git_folder: Optional[pulumi.Input[_builtins.str]] = None,
            template_git_has_uploadedgitrepotar: Optional[pulumi.Input[_builtins.bool]] = None,
            template_git_release: Optional[pulumi.Input[_builtins.str]] = None,
            template_git_repo_sha_value: Optional[pulumi.Input[_builtins.str]] = None,
            template_git_repo_url: Optional[pulumi.Input[_builtins.str]] = None,
            template_git_url: Optional[pulumi.Input[_builtins.str]] = None,
            template_init_state_file: Optional[pulumi.Input[_builtins.str]] = None,
            template_inputs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SchematicsWorkspaceTemplateInputArgs', 'SchematicsWorkspaceTemplateInputArgsDict']]]]] = None,
            template_ref: Optional[pulumi.Input[_builtins.str]] = None,
            template_type: Optional[pulumi.Input[_builtins.str]] = None,
            template_uninstall_script_name: Optional[pulumi.Input[_builtins.str]] = None,
            template_values: Optional[pulumi.Input[_builtins.str]] = None,
            template_values_metadatas: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SchematicsWorkspaceTemplateValuesMetadataArgs', 'SchematicsWorkspaceTemplateValuesMetadataArgsDict']]]]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            updated_by: Optional[pulumi.Input[_builtins.str]] = None,
            x_github_token: Optional[pulumi.Input[_builtins.str]] = None) -> 'SchematicsWorkspace':
        """
        Get an existing SchematicsWorkspace resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] applied_shareddata_ids: List of applied shared dataset ID.
        :param pulumi.Input[Union['SchematicsWorkspaceCatalogRefArgs', 'SchematicsWorkspaceCatalogRefArgsDict']] catalog_ref: Information about the software template that you chose from the IBM Cloud catalog. This information is returned for IBM
               Cloud catalog offerings only.
        :param pulumi.Input[_builtins.str] created_at: The timestamp when the workspace was created.
        :param pulumi.Input[_builtins.str] created_by: The user ID that created the workspace.
        :param pulumi.Input[_builtins.str] crn: The workspace CRN.
        :param pulumi.Input[_builtins.str] description: The description of the workspace.
        :param pulumi.Input[_builtins.bool] frozen: If set to true, the workspace is frozen and changes to the workspace are disabled.
        :param pulumi.Input[_builtins.str] frozen_at: The timestamp when the workspace was frozen.
        :param pulumi.Input[_builtins.str] frozen_by: The user ID that froze the workspace.
        :param pulumi.Input[_builtins.str] last_health_check_at: The timestamp when the last health check was performed by Schematics.
        :param pulumi.Input[_builtins.str] location: The location where you want to create your Schematics workspace and run the Schematics jobs. The location that you enter
               must match the API endpoint that you use. For example, if you use the Frankfurt API endpoint, you must specify `eu-de`
               as your location. If you use an API endpoint for a geography and you do not specify a location, Schematics determines
               the location based on availability.
        :param pulumi.Input[_builtins.bool] locked: If set to true, the workspace is locked and disabled for changes.
        :param pulumi.Input[_builtins.str] locked_by: The user ID that initiated a resource-related action, such as applying or destroying resources, that locked the
               workspace.
        :param pulumi.Input[_builtins.str] locked_time: The timestamp when the workspace was locked.
        :param pulumi.Input[_builtins.str] resource_group: The ID of the resource group where you want to provision the workspace.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SchematicsWorkspaceRuntimeDataArgs', 'SchematicsWorkspaceRuntimeDataArgsDict']]]] runtime_datas: Information about the provisioning engine, state file, and runtime logs.
        :param pulumi.Input[_builtins.str] status_code: The success or error code that was returned for the last plan, apply, or destroy job that ran against your workspace.
        :param pulumi.Input[_builtins.str] status_msg: The success or error message that was returned for the last plan, apply, or destroy job that ran against your workspace.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: A list of tags that are associated with the workspace.
        :param pulumi.Input[_builtins.str] template_git_branch: The repository branch.
        :param pulumi.Input[_builtins.bool] template_git_has_uploadedgitrepotar: Has uploaded git repo tar
        :param pulumi.Input[_builtins.str] template_git_release: The repository release.
        :param pulumi.Input[_builtins.str] template_git_repo_sha_value: The repository SHA value.
        :param pulumi.Input[_builtins.str] template_git_repo_url: The repository URL.
        :param pulumi.Input[_builtins.str] template_git_url: The source URL.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SchematicsWorkspaceTemplateInputArgs', 'SchematicsWorkspaceTemplateInputArgsDict']]]] template_inputs: VariablesRequest -.
        :param pulumi.Input[_builtins.str] template_ref: Workspace template ref.
        :param pulumi.Input[_builtins.str] template_uninstall_script_name: Uninstall script name.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SchematicsWorkspaceTemplateValuesMetadataArgs', 'SchematicsWorkspaceTemplateValuesMetadataArgsDict']]]] template_values_metadatas: List of values metadata.
        :param pulumi.Input[_builtins.str] updated_at: The timestamp when the workspace was last updated.
        :param pulumi.Input[_builtins.str] updated_by: The user ID that updated the workspace.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SchematicsWorkspaceState.__new__(_SchematicsWorkspaceState)

        __props__.__dict__["applied_shareddata_ids"] = applied_shareddata_ids
        __props__.__dict__["catalog_ref"] = catalog_ref
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["crn"] = crn
        __props__.__dict__["description"] = description
        __props__.__dict__["frozen"] = frozen
        __props__.__dict__["frozen_at"] = frozen_at
        __props__.__dict__["frozen_by"] = frozen_by
        __props__.__dict__["last_health_check_at"] = last_health_check_at
        __props__.__dict__["location"] = location
        __props__.__dict__["locked"] = locked
        __props__.__dict__["locked_by"] = locked_by
        __props__.__dict__["locked_time"] = locked_time
        __props__.__dict__["name"] = name
        __props__.__dict__["resource_group"] = resource_group
        __props__.__dict__["runtime_datas"] = runtime_datas
        __props__.__dict__["schematics_workspace_id"] = schematics_workspace_id
        __props__.__dict__["shared_data"] = shared_data
        __props__.__dict__["status"] = status
        __props__.__dict__["status_code"] = status_code
        __props__.__dict__["status_msg"] = status_msg
        __props__.__dict__["tags"] = tags
        __props__.__dict__["template_env_settings"] = template_env_settings
        __props__.__dict__["template_git_branch"] = template_git_branch
        __props__.__dict__["template_git_folder"] = template_git_folder
        __props__.__dict__["template_git_has_uploadedgitrepotar"] = template_git_has_uploadedgitrepotar
        __props__.__dict__["template_git_release"] = template_git_release
        __props__.__dict__["template_git_repo_sha_value"] = template_git_repo_sha_value
        __props__.__dict__["template_git_repo_url"] = template_git_repo_url
        __props__.__dict__["template_git_url"] = template_git_url
        __props__.__dict__["template_init_state_file"] = template_init_state_file
        __props__.__dict__["template_inputs"] = template_inputs
        __props__.__dict__["template_ref"] = template_ref
        __props__.__dict__["template_type"] = template_type
        __props__.__dict__["template_uninstall_script_name"] = template_uninstall_script_name
        __props__.__dict__["template_values"] = template_values
        __props__.__dict__["template_values_metadatas"] = template_values_metadatas
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["updated_by"] = updated_by
        __props__.__dict__["x_github_token"] = x_github_token
        return SchematicsWorkspace(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="appliedShareddataIds")
    def applied_shareddata_ids(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of applied shared dataset ID.
        """
        return pulumi.get(self, "applied_shareddata_ids")

    @_builtins.property
    @pulumi.getter(name="catalogRef")
    def catalog_ref(self) -> pulumi.Output[Optional['outputs.SchematicsWorkspaceCatalogRef']]:
        """
        Information about the software template that you chose from the IBM Cloud catalog. This information is returned for IBM
        Cloud catalog offerings only.
        """
        return pulumi.get(self, "catalog_ref")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The timestamp when the workspace was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[_builtins.str]:
        """
        The user ID that created the workspace.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The workspace CRN.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The description of the workspace.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def frozen(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        If set to true, the workspace is frozen and changes to the workspace are disabled.
        """
        return pulumi.get(self, "frozen")

    @_builtins.property
    @pulumi.getter(name="frozenAt")
    def frozen_at(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The timestamp when the workspace was frozen.
        """
        return pulumi.get(self, "frozen_at")

    @_builtins.property
    @pulumi.getter(name="frozenBy")
    def frozen_by(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The user ID that froze the workspace.
        """
        return pulumi.get(self, "frozen_by")

    @_builtins.property
    @pulumi.getter(name="lastHealthCheckAt")
    def last_health_check_at(self) -> pulumi.Output[_builtins.str]:
        """
        The timestamp when the last health check was performed by Schematics.
        """
        return pulumi.get(self, "last_health_check_at")

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Output[_builtins.str]:
        """
        The location where you want to create your Schematics workspace and run the Schematics jobs. The location that you enter
        must match the API endpoint that you use. For example, if you use the Frankfurt API endpoint, you must specify `eu-de`
        as your location. If you use an API endpoint for a geography and you do not specify a location, Schematics determines
        the location based on availability.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def locked(self) -> pulumi.Output[_builtins.bool]:
        """
        If set to true, the workspace is locked and disabled for changes.
        """
        return pulumi.get(self, "locked")

    @_builtins.property
    @pulumi.getter(name="lockedBy")
    def locked_by(self) -> pulumi.Output[_builtins.str]:
        """
        The user ID that initiated a resource-related action, such as applying or destroying resources, that locked the
        workspace.
        """
        return pulumi.get(self, "locked_by")

    @_builtins.property
    @pulumi.getter(name="lockedTime")
    def locked_time(self) -> pulumi.Output[_builtins.str]:
        """
        The timestamp when the workspace was locked.
        """
        return pulumi.get(self, "locked_time")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The ID of the resource group where you want to provision the workspace.
        """
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="runtimeDatas")
    def runtime_datas(self) -> pulumi.Output[Sequence['outputs.SchematicsWorkspaceRuntimeData']]:
        """
        Information about the provisioning engine, state file, and runtime logs.
        """
        return pulumi.get(self, "runtime_datas")

    @_builtins.property
    @pulumi.getter(name="schematicsWorkspaceId")
    def schematics_workspace_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "schematics_workspace_id")

    @_builtins.property
    @pulumi.getter(name="sharedData")
    def shared_data(self) -> pulumi.Output[Optional['outputs.SchematicsWorkspaceSharedData']]:
        return pulumi.get(self, "shared_data")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> pulumi.Output[_builtins.str]:
        """
        The success or error code that was returned for the last plan, apply, or destroy job that ran against your workspace.
        """
        return pulumi.get(self, "status_code")

    @_builtins.property
    @pulumi.getter(name="statusMsg")
    def status_msg(self) -> pulumi.Output[_builtins.str]:
        """
        The success or error message that was returned for the last plan, apply, or destroy job that ran against your workspace.
        """
        return pulumi.get(self, "status_msg")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        A list of tags that are associated with the workspace.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="templateEnvSettings")
    def template_env_settings(self) -> pulumi.Output[Optional[Sequence[Mapping[str, _builtins.str]]]]:
        return pulumi.get(self, "template_env_settings")

    @_builtins.property
    @pulumi.getter(name="templateGitBranch")
    def template_git_branch(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The repository branch.
        """
        return pulumi.get(self, "template_git_branch")

    @_builtins.property
    @pulumi.getter(name="templateGitFolder")
    def template_git_folder(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "template_git_folder")

    @_builtins.property
    @pulumi.getter(name="templateGitHasUploadedgitrepotar")
    def template_git_has_uploadedgitrepotar(self) -> pulumi.Output[_builtins.bool]:
        """
        Has uploaded git repo tar
        """
        return pulumi.get(self, "template_git_has_uploadedgitrepotar")

    @_builtins.property
    @pulumi.getter(name="templateGitRelease")
    def template_git_release(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The repository release.
        """
        return pulumi.get(self, "template_git_release")

    @_builtins.property
    @pulumi.getter(name="templateGitRepoShaValue")
    def template_git_repo_sha_value(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The repository SHA value.
        """
        return pulumi.get(self, "template_git_repo_sha_value")

    @_builtins.property
    @pulumi.getter(name="templateGitRepoUrl")
    def template_git_repo_url(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The repository URL.
        """
        return pulumi.get(self, "template_git_repo_url")

    @_builtins.property
    @pulumi.getter(name="templateGitUrl")
    def template_git_url(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The source URL.
        """
        return pulumi.get(self, "template_git_url")

    @_builtins.property
    @pulumi.getter(name="templateInitStateFile")
    def template_init_state_file(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "template_init_state_file")

    @_builtins.property
    @pulumi.getter(name="templateInputs")
    def template_inputs(self) -> pulumi.Output[Optional[Sequence['outputs.SchematicsWorkspaceTemplateInput']]]:
        """
        VariablesRequest -.
        """
        return pulumi.get(self, "template_inputs")

    @_builtins.property
    @pulumi.getter(name="templateRef")
    def template_ref(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Workspace template ref.
        """
        return pulumi.get(self, "template_ref")

    @_builtins.property
    @pulumi.getter(name="templateType")
    def template_type(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "template_type")

    @_builtins.property
    @pulumi.getter(name="templateUninstallScriptName")
    def template_uninstall_script_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Uninstall script name.
        """
        return pulumi.get(self, "template_uninstall_script_name")

    @_builtins.property
    @pulumi.getter(name="templateValues")
    def template_values(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "template_values")

    @_builtins.property
    @pulumi.getter(name="templateValuesMetadatas")
    def template_values_metadatas(self) -> pulumi.Output[Optional[Sequence['outputs.SchematicsWorkspaceTemplateValuesMetadata']]]:
        """
        List of values metadata.
        """
        return pulumi.get(self, "template_values_metadatas")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The timestamp when the workspace was last updated.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> pulumi.Output[_builtins.str]:
        """
        The user ID that updated the workspace.
        """
        return pulumi.get(self, "updated_by")

    @_builtins.property
    @pulumi.getter(name="xGithubToken")
    def x_github_token(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "x_github_token")

