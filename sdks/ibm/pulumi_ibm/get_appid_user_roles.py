# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetAppidUserRolesResult',
    'AwaitableGetAppidUserRolesResult',
    'get_appid_user_roles',
    'get_appid_user_roles_output',
]

@pulumi.output_type
class GetAppidUserRolesResult:
    """
    A collection of values returned by getAppidUserRoles.
    """
    def __init__(__self__, id=None, roles=None, subject=None, tenant_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if roles and not isinstance(roles, list):
            raise TypeError("Expected argument 'roles' to be a list")
        pulumi.set(__self__, "roles", roles)
        if subject and not isinstance(subject, str):
            raise TypeError("Expected argument 'subject' to be a str")
        pulumi.set(__self__, "subject", subject)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def roles(self) -> Sequence['outputs.GetAppidUserRolesRoleResult']:
        return pulumi.get(self, "roles")

    @_builtins.property
    @pulumi.getter
    def subject(self) -> _builtins.str:
        return pulumi.get(self, "subject")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.str:
        return pulumi.get(self, "tenant_id")


class AwaitableGetAppidUserRolesResult(GetAppidUserRolesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppidUserRolesResult(
            id=self.id,
            roles=self.roles,
            subject=self.subject,
            tenant_id=self.tenant_id)


def get_appid_user_roles(id: Optional[_builtins.str] = None,
                         subject: Optional[_builtins.str] = None,
                         tenant_id: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppidUserRolesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['subject'] = subject
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getAppidUserRoles:getAppidUserRoles', __args__, opts=opts, typ=GetAppidUserRolesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetAppidUserRolesResult(
        id=pulumi.get(__ret__, 'id'),
        roles=pulumi.get(__ret__, 'roles'),
        subject=pulumi.get(__ret__, 'subject'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'))
def get_appid_user_roles_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                subject: Optional[pulumi.Input[_builtins.str]] = None,
                                tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppidUserRolesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['subject'] = subject
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getAppidUserRoles:getAppidUserRoles', __args__, opts=opts, typ=GetAppidUserRolesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetAppidUserRolesResult(
        id=pulumi.get(__response__, 'id'),
        roles=pulumi.get(__response__, 'roles'),
        subject=pulumi.get(__response__, 'subject'),
        tenant_id=pulumi.get(__response__, 'tenant_id')))
