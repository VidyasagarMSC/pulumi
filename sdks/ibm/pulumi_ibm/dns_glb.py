# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DnsGlbArgs', 'DnsGlb']

@pulumi.input_type
class DnsGlbArgs:
    def __init__(__self__, *,
                 default_pools: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 fallback_pool: pulumi.Input[_builtins.str],
                 instance_id: pulumi.Input[_builtins.str],
                 zone_id: pulumi.Input[_builtins.str],
                 az_pools: Optional[pulumi.Input[Sequence[pulumi.Input['DnsGlbAzPoolArgs']]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_glb_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['DnsGlbTimeoutsArgs']] = None,
                 ttl: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a DnsGlb resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] default_pools: A list of pool IDs ordered by their failover priority
        :param pulumi.Input[_builtins.str] fallback_pool: The pool ID to use when all other pools are detected as unhealthy
        :param pulumi.Input[_builtins.str] instance_id: The GUID of the private DNS.
        :param pulumi.Input[_builtins.str] zone_id: Zone Id
        :param pulumi.Input[Sequence[pulumi.Input['DnsGlbAzPoolArgs']]] az_pools: Map availability zones to pool ID's.
        :param pulumi.Input[_builtins.str] description: Descriptive text of the load balancer
        :param pulumi.Input[_builtins.bool] enabled: Whether the load balancer is enabled
        :param pulumi.Input[_builtins.str] name: Name of the load balancer
        :param pulumi.Input[_builtins.float] ttl: Time to live in second
        """
        pulumi.set(__self__, "default_pools", default_pools)
        pulumi.set(__self__, "fallback_pool", fallback_pool)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "zone_id", zone_id)
        if az_pools is not None:
            pulumi.set(__self__, "az_pools", az_pools)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dns_glb_id is not None:
            pulumi.set(__self__, "dns_glb_id", dns_glb_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @_builtins.property
    @pulumi.getter(name="defaultPools")
    def default_pools(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        A list of pool IDs ordered by their failover priority
        """
        return pulumi.get(self, "default_pools")

    @default_pools.setter
    def default_pools(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "default_pools", value)

    @_builtins.property
    @pulumi.getter(name="fallbackPool")
    def fallback_pool(self) -> pulumi.Input[_builtins.str]:
        """
        The pool ID to use when all other pools are detected as unhealthy
        """
        return pulumi.get(self, "fallback_pool")

    @fallback_pool.setter
    def fallback_pool(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "fallback_pool", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The GUID of the private DNS.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Input[_builtins.str]:
        """
        Zone Id
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "zone_id", value)

    @_builtins.property
    @pulumi.getter(name="azPools")
    def az_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DnsGlbAzPoolArgs']]]]:
        """
        Map availability zones to pool ID's.
        """
        return pulumi.get(self, "az_pools")

    @az_pools.setter
    def az_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DnsGlbAzPoolArgs']]]]):
        pulumi.set(self, "az_pools", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Descriptive text of the load balancer
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="dnsGlbId")
    def dns_glb_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dns_glb_id")

    @dns_glb_id.setter
    def dns_glb_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_glb_id", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the load balancer is enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the load balancer
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['DnsGlbTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['DnsGlbTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Time to live in second
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ttl", value)


@pulumi.input_type
class _DnsGlbState:
    def __init__(__self__, *,
                 az_pools: Optional[pulumi.Input[Sequence[pulumi.Input['DnsGlbAzPoolArgs']]]] = None,
                 created_on: Optional[pulumi.Input[_builtins.str]] = None,
                 default_pools: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_glb_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 fallback_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 glb_id: Optional[pulumi.Input[_builtins.str]] = None,
                 health: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 modified_on: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['DnsGlbTimeoutsArgs']] = None,
                 ttl: Optional[pulumi.Input[_builtins.float]] = None,
                 zone_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DnsGlb resources.
        :param pulumi.Input[Sequence[pulumi.Input['DnsGlbAzPoolArgs']]] az_pools: Map availability zones to pool ID's.
        :param pulumi.Input[_builtins.str] created_on: GLB Load Balancer creation date
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] default_pools: A list of pool IDs ordered by their failover priority
        :param pulumi.Input[_builtins.str] description: Descriptive text of the load balancer
        :param pulumi.Input[_builtins.bool] enabled: Whether the load balancer is enabled
        :param pulumi.Input[_builtins.str] fallback_pool: The pool ID to use when all other pools are detected as unhealthy
        :param pulumi.Input[_builtins.str] glb_id: Load balancer Id
        :param pulumi.Input[_builtins.str] health: Healthy state of the load balancer.
        :param pulumi.Input[_builtins.str] instance_id: The GUID of the private DNS.
        :param pulumi.Input[_builtins.str] modified_on: GLB Load Balancer Modification date
        :param pulumi.Input[_builtins.str] name: Name of the load balancer
        :param pulumi.Input[_builtins.float] ttl: Time to live in second
        :param pulumi.Input[_builtins.str] zone_id: Zone Id
        """
        if az_pools is not None:
            pulumi.set(__self__, "az_pools", az_pools)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if default_pools is not None:
            pulumi.set(__self__, "default_pools", default_pools)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dns_glb_id is not None:
            pulumi.set(__self__, "dns_glb_id", dns_glb_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if fallback_pool is not None:
            pulumi.set(__self__, "fallback_pool", fallback_pool)
        if glb_id is not None:
            pulumi.set(__self__, "glb_id", glb_id)
        if health is not None:
            pulumi.set(__self__, "health", health)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if modified_on is not None:
            pulumi.set(__self__, "modified_on", modified_on)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @_builtins.property
    @pulumi.getter(name="azPools")
    def az_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DnsGlbAzPoolArgs']]]]:
        """
        Map availability zones to pool ID's.
        """
        return pulumi.get(self, "az_pools")

    @az_pools.setter
    def az_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DnsGlbAzPoolArgs']]]]):
        pulumi.set(self, "az_pools", value)

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        GLB Load Balancer creation date
        """
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_on", value)

    @_builtins.property
    @pulumi.getter(name="defaultPools")
    def default_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        A list of pool IDs ordered by their failover priority
        """
        return pulumi.get(self, "default_pools")

    @default_pools.setter
    def default_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "default_pools", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Descriptive text of the load balancer
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="dnsGlbId")
    def dns_glb_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dns_glb_id")

    @dns_glb_id.setter
    def dns_glb_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_glb_id", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the load balancer is enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="fallbackPool")
    def fallback_pool(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The pool ID to use when all other pools are detected as unhealthy
        """
        return pulumi.get(self, "fallback_pool")

    @fallback_pool.setter
    def fallback_pool(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fallback_pool", value)

    @_builtins.property
    @pulumi.getter(name="glbId")
    def glb_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Load balancer Id
        """
        return pulumi.get(self, "glb_id")

    @glb_id.setter
    def glb_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "glb_id", value)

    @_builtins.property
    @pulumi.getter
    def health(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Healthy state of the load balancer.
        """
        return pulumi.get(self, "health")

    @health.setter
    def health(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "health", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The GUID of the private DNS.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        GLB Load Balancer Modification date
        """
        return pulumi.get(self, "modified_on")

    @modified_on.setter
    def modified_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "modified_on", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the load balancer
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['DnsGlbTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['DnsGlbTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Time to live in second
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ttl", value)

    @_builtins.property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Zone Id
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zone_id", value)


@pulumi.type_token("ibm:index/dnsGlb:DnsGlb")
class DnsGlb(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 az_pools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DnsGlbAzPoolArgs', 'DnsGlbAzPoolArgsDict']]]]] = None,
                 default_pools: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_glb_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 fallback_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['DnsGlbTimeoutsArgs', 'DnsGlbTimeoutsArgsDict']]] = None,
                 ttl: Optional[pulumi.Input[_builtins.float]] = None,
                 zone_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a DnsGlb resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DnsGlbAzPoolArgs', 'DnsGlbAzPoolArgsDict']]]] az_pools: Map availability zones to pool ID's.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] default_pools: A list of pool IDs ordered by their failover priority
        :param pulumi.Input[_builtins.str] description: Descriptive text of the load balancer
        :param pulumi.Input[_builtins.bool] enabled: Whether the load balancer is enabled
        :param pulumi.Input[_builtins.str] fallback_pool: The pool ID to use when all other pools are detected as unhealthy
        :param pulumi.Input[_builtins.str] instance_id: The GUID of the private DNS.
        :param pulumi.Input[_builtins.str] name: Name of the load balancer
        :param pulumi.Input[_builtins.float] ttl: Time to live in second
        :param pulumi.Input[_builtins.str] zone_id: Zone Id
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DnsGlbArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DnsGlb resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DnsGlbArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DnsGlbArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 az_pools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DnsGlbAzPoolArgs', 'DnsGlbAzPoolArgsDict']]]]] = None,
                 default_pools: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_glb_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 fallback_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['DnsGlbTimeoutsArgs', 'DnsGlbTimeoutsArgsDict']]] = None,
                 ttl: Optional[pulumi.Input[_builtins.float]] = None,
                 zone_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DnsGlbArgs.__new__(DnsGlbArgs)

            __props__.__dict__["az_pools"] = az_pools
            if default_pools is None and not opts.urn:
                raise TypeError("Missing required property 'default_pools'")
            __props__.__dict__["default_pools"] = default_pools
            __props__.__dict__["description"] = description
            __props__.__dict__["dns_glb_id"] = dns_glb_id
            __props__.__dict__["enabled"] = enabled
            if fallback_pool is None and not opts.urn:
                raise TypeError("Missing required property 'fallback_pool'")
            __props__.__dict__["fallback_pool"] = fallback_pool
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["name"] = name
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["ttl"] = ttl
            if zone_id is None and not opts.urn:
                raise TypeError("Missing required property 'zone_id'")
            __props__.__dict__["zone_id"] = zone_id
            __props__.__dict__["created_on"] = None
            __props__.__dict__["glb_id"] = None
            __props__.__dict__["health"] = None
            __props__.__dict__["modified_on"] = None
        super(DnsGlb, __self__).__init__(
            'ibm:index/dnsGlb:DnsGlb',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            az_pools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DnsGlbAzPoolArgs', 'DnsGlbAzPoolArgsDict']]]]] = None,
            created_on: Optional[pulumi.Input[_builtins.str]] = None,
            default_pools: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            dns_glb_id: Optional[pulumi.Input[_builtins.str]] = None,
            enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            fallback_pool: Optional[pulumi.Input[_builtins.str]] = None,
            glb_id: Optional[pulumi.Input[_builtins.str]] = None,
            health: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            modified_on: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['DnsGlbTimeoutsArgs', 'DnsGlbTimeoutsArgsDict']]] = None,
            ttl: Optional[pulumi.Input[_builtins.float]] = None,
            zone_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'DnsGlb':
        """
        Get an existing DnsGlb resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DnsGlbAzPoolArgs', 'DnsGlbAzPoolArgsDict']]]] az_pools: Map availability zones to pool ID's.
        :param pulumi.Input[_builtins.str] created_on: GLB Load Balancer creation date
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] default_pools: A list of pool IDs ordered by their failover priority
        :param pulumi.Input[_builtins.str] description: Descriptive text of the load balancer
        :param pulumi.Input[_builtins.bool] enabled: Whether the load balancer is enabled
        :param pulumi.Input[_builtins.str] fallback_pool: The pool ID to use when all other pools are detected as unhealthy
        :param pulumi.Input[_builtins.str] glb_id: Load balancer Id
        :param pulumi.Input[_builtins.str] health: Healthy state of the load balancer.
        :param pulumi.Input[_builtins.str] instance_id: The GUID of the private DNS.
        :param pulumi.Input[_builtins.str] modified_on: GLB Load Balancer Modification date
        :param pulumi.Input[_builtins.str] name: Name of the load balancer
        :param pulumi.Input[_builtins.float] ttl: Time to live in second
        :param pulumi.Input[_builtins.str] zone_id: Zone Id
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DnsGlbState.__new__(_DnsGlbState)

        __props__.__dict__["az_pools"] = az_pools
        __props__.__dict__["created_on"] = created_on
        __props__.__dict__["default_pools"] = default_pools
        __props__.__dict__["description"] = description
        __props__.__dict__["dns_glb_id"] = dns_glb_id
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["fallback_pool"] = fallback_pool
        __props__.__dict__["glb_id"] = glb_id
        __props__.__dict__["health"] = health
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["modified_on"] = modified_on
        __props__.__dict__["name"] = name
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["ttl"] = ttl
        __props__.__dict__["zone_id"] = zone_id
        return DnsGlb(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="azPools")
    def az_pools(self) -> pulumi.Output[Optional[Sequence['outputs.DnsGlbAzPool']]]:
        """
        Map availability zones to pool ID's.
        """
        return pulumi.get(self, "az_pools")

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> pulumi.Output[_builtins.str]:
        """
        GLB Load Balancer creation date
        """
        return pulumi.get(self, "created_on")

    @_builtins.property
    @pulumi.getter(name="defaultPools")
    def default_pools(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        A list of pool IDs ordered by their failover priority
        """
        return pulumi.get(self, "default_pools")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Descriptive text of the load balancer
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="dnsGlbId")
    def dns_glb_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "dns_glb_id")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether the load balancer is enabled
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="fallbackPool")
    def fallback_pool(self) -> pulumi.Output[_builtins.str]:
        """
        The pool ID to use when all other pools are detected as unhealthy
        """
        return pulumi.get(self, "fallback_pool")

    @_builtins.property
    @pulumi.getter(name="glbId")
    def glb_id(self) -> pulumi.Output[_builtins.str]:
        """
        Load balancer Id
        """
        return pulumi.get(self, "glb_id")

    @_builtins.property
    @pulumi.getter
    def health(self) -> pulumi.Output[_builtins.str]:
        """
        Healthy state of the load balancer.
        """
        return pulumi.get(self, "health")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The GUID of the private DNS.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> pulumi.Output[_builtins.str]:
        """
        GLB Load Balancer Modification date
        """
        return pulumi.get(self, "modified_on")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the load balancer
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.DnsGlbTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Time to live in second
        """
        return pulumi.get(self, "ttl")

    @_builtins.property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Output[_builtins.str]:
        """
        Zone Id
        """
        return pulumi.get(self, "zone_id")

