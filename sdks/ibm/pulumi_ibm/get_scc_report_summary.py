# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSccReportSummaryResult',
    'AwaitableGetSccReportSummaryResult',
    'get_scc_report_summary',
    'get_scc_report_summary_output',
]

@pulumi.output_type
class GetSccReportSummaryResult:
    """
    A collection of values returned by getSccReportSummary.
    """
    def __init__(__self__, accounts=None, controls=None, evaluations=None, id=None, instance_id=None, isntance_id=None, report_id=None, resources=None, scores=None):
        if accounts and not isinstance(accounts, list):
            raise TypeError("Expected argument 'accounts' to be a list")
        pulumi.set(__self__, "accounts", accounts)
        if controls and not isinstance(controls, list):
            raise TypeError("Expected argument 'controls' to be a list")
        pulumi.set(__self__, "controls", controls)
        if evaluations and not isinstance(evaluations, list):
            raise TypeError("Expected argument 'evaluations' to be a list")
        pulumi.set(__self__, "evaluations", evaluations)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if isntance_id and not isinstance(isntance_id, str):
            raise TypeError("Expected argument 'isntance_id' to be a str")
        pulumi.set(__self__, "isntance_id", isntance_id)
        if report_id and not isinstance(report_id, str):
            raise TypeError("Expected argument 'report_id' to be a str")
        pulumi.set(__self__, "report_id", report_id)
        if resources and not isinstance(resources, list):
            raise TypeError("Expected argument 'resources' to be a list")
        pulumi.set(__self__, "resources", resources)
        if scores and not isinstance(scores, list):
            raise TypeError("Expected argument 'scores' to be a list")
        pulumi.set(__self__, "scores", scores)

    @_builtins.property
    @pulumi.getter
    def accounts(self) -> Sequence['outputs.GetSccReportSummaryAccountResult']:
        return pulumi.get(self, "accounts")

    @_builtins.property
    @pulumi.getter
    def controls(self) -> Sequence['outputs.GetSccReportSummaryControlResult']:
        return pulumi.get(self, "controls")

    @_builtins.property
    @pulumi.getter
    def evaluations(self) -> Sequence['outputs.GetSccReportSummaryEvaluationResult']:
        return pulumi.get(self, "evaluations")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="isntanceId")
    def isntance_id(self) -> _builtins.str:
        return pulumi.get(self, "isntance_id")

    @_builtins.property
    @pulumi.getter(name="reportId")
    def report_id(self) -> _builtins.str:
        return pulumi.get(self, "report_id")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetSccReportSummaryResourceResult']:
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter
    def scores(self) -> Sequence['outputs.GetSccReportSummaryScoreResult']:
        return pulumi.get(self, "scores")


class AwaitableGetSccReportSummaryResult(GetSccReportSummaryResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSccReportSummaryResult(
            accounts=self.accounts,
            controls=self.controls,
            evaluations=self.evaluations,
            id=self.id,
            instance_id=self.instance_id,
            isntance_id=self.isntance_id,
            report_id=self.report_id,
            resources=self.resources,
            scores=self.scores)


def get_scc_report_summary(id: Optional[_builtins.str] = None,
                           instance_id: Optional[_builtins.str] = None,
                           report_id: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSccReportSummaryResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['reportId'] = report_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSccReportSummary:getSccReportSummary', __args__, opts=opts, typ=GetSccReportSummaryResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSccReportSummaryResult(
        accounts=pulumi.get(__ret__, 'accounts'),
        controls=pulumi.get(__ret__, 'controls'),
        evaluations=pulumi.get(__ret__, 'evaluations'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        isntance_id=pulumi.get(__ret__, 'isntance_id'),
        report_id=pulumi.get(__ret__, 'report_id'),
        resources=pulumi.get(__ret__, 'resources'),
        scores=pulumi.get(__ret__, 'scores'))
def get_scc_report_summary_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  report_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSccReportSummaryResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['reportId'] = report_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSccReportSummary:getSccReportSummary', __args__, opts=opts, typ=GetSccReportSummaryResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSccReportSummaryResult(
        accounts=pulumi.get(__response__, 'accounts'),
        controls=pulumi.get(__response__, 'controls'),
        evaluations=pulumi.get(__response__, 'evaluations'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        isntance_id=pulumi.get(__response__, 'isntance_id'),
        report_id=pulumi.get(__response__, 'report_id'),
        resources=pulumi.get(__response__, 'resources'),
        scores=pulumi.get(__response__, 'scores')))
