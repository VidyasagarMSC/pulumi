# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetPiTenantResult',
    'AwaitableGetPiTenantResult',
    'get_pi_tenant',
    'get_pi_tenant_output',
]

@pulumi.output_type
class GetPiTenantResult:
    """
    A collection of values returned by getPiTenant.
    """
    def __init__(__self__, cloud_instances=None, creation_date=None, enabled=None, id=None, pi_cloud_instance_id=None, tenant_name=None):
        if cloud_instances and not isinstance(cloud_instances, list):
            raise TypeError("Expected argument 'cloud_instances' to be a list")
        pulumi.set(__self__, "cloud_instances", cloud_instances)
        if creation_date and not isinstance(creation_date, str):
            raise TypeError("Expected argument 'creation_date' to be a str")
        pulumi.set(__self__, "creation_date", creation_date)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if pi_cloud_instance_id and not isinstance(pi_cloud_instance_id, str):
            raise TypeError("Expected argument 'pi_cloud_instance_id' to be a str")
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if tenant_name and not isinstance(tenant_name, str):
            raise TypeError("Expected argument 'tenant_name' to be a str")
        pulumi.set(__self__, "tenant_name", tenant_name)

    @_builtins.property
    @pulumi.getter(name="cloudInstances")
    def cloud_instances(self) -> Sequence['outputs.GetPiTenantCloudInstanceResult']:
        return pulumi.get(self, "cloud_instances")

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> _builtins.str:
        return pulumi.get(self, "creation_date")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="tenantName")
    def tenant_name(self) -> _builtins.str:
        return pulumi.get(self, "tenant_name")


class AwaitableGetPiTenantResult(GetPiTenantResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPiTenantResult(
            cloud_instances=self.cloud_instances,
            creation_date=self.creation_date,
            enabled=self.enabled,
            id=self.id,
            pi_cloud_instance_id=self.pi_cloud_instance_id,
            tenant_name=self.tenant_name)


def get_pi_tenant(id: Optional[_builtins.str] = None,
                  pi_cloud_instance_id: Optional[_builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPiTenantResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getPiTenant:getPiTenant', __args__, opts=opts, typ=GetPiTenantResult, package_ref=_utilities.get_package()).value

    return AwaitableGetPiTenantResult(
        cloud_instances=pulumi.get(__ret__, 'cloud_instances'),
        creation_date=pulumi.get(__ret__, 'creation_date'),
        enabled=pulumi.get(__ret__, 'enabled'),
        id=pulumi.get(__ret__, 'id'),
        pi_cloud_instance_id=pulumi.get(__ret__, 'pi_cloud_instance_id'),
        tenant_name=pulumi.get(__ret__, 'tenant_name'))
def get_pi_tenant_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPiTenantResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getPiTenant:getPiTenant', __args__, opts=opts, typ=GetPiTenantResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetPiTenantResult(
        cloud_instances=pulumi.get(__response__, 'cloud_instances'),
        creation_date=pulumi.get(__response__, 'creation_date'),
        enabled=pulumi.get(__response__, 'enabled'),
        id=pulumi.get(__response__, 'id'),
        pi_cloud_instance_id=pulumi.get(__response__, 'pi_cloud_instance_id'),
        tenant_name=pulumi.get(__response__, 'tenant_name')))
