# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['DnsLinkedZoneArgs', 'DnsLinkedZone']

@pulumi.input_type
class DnsLinkedZoneArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 owner_instance_id: pulumi.Input[_builtins.str],
                 owner_zone_id: pulumi.Input[_builtins.str],
                 approval_required_before: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_linked_zone_id: Optional[pulumi.Input[_builtins.str]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 linked_to: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DnsLinkedZone resource.
        :param pulumi.Input[_builtins.str] instance_id: The unique identifier of a DNS Linked zone.
        :param pulumi.Input[_builtins.str] owner_instance_id: The unique identifier of the owner DNS instance
        :param pulumi.Input[_builtins.str] owner_zone_id: The unique identifier of the owner DNS zone
        :param pulumi.Input[_builtins.str] approval_required_before: DNS Linked Approval required before
        :param pulumi.Input[_builtins.str] description: Descriptive text of the DNS Linked zone
        :param pulumi.Input[_builtins.str] label: The label of the DNS Linked zone
        :param pulumi.Input[_builtins.str] linked_to: The zone that is linked to the DNS Linked zone
        :param pulumi.Input[_builtins.str] name: The name of the DNS Linked zone.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "owner_instance_id", owner_instance_id)
        pulumi.set(__self__, "owner_zone_id", owner_zone_id)
        if approval_required_before is not None:
            pulumi.set(__self__, "approval_required_before", approval_required_before)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dns_linked_zone_id is not None:
            pulumi.set(__self__, "dns_linked_zone_id", dns_linked_zone_id)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if linked_to is not None:
            pulumi.set(__self__, "linked_to", linked_to)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The unique identifier of a DNS Linked zone.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="ownerInstanceId")
    def owner_instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The unique identifier of the owner DNS instance
        """
        return pulumi.get(self, "owner_instance_id")

    @owner_instance_id.setter
    def owner_instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "owner_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="ownerZoneId")
    def owner_zone_id(self) -> pulumi.Input[_builtins.str]:
        """
        The unique identifier of the owner DNS zone
        """
        return pulumi.get(self, "owner_zone_id")

    @owner_zone_id.setter
    def owner_zone_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "owner_zone_id", value)

    @_builtins.property
    @pulumi.getter(name="approvalRequiredBefore")
    def approval_required_before(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        DNS Linked Approval required before
        """
        return pulumi.get(self, "approval_required_before")

    @approval_required_before.setter
    def approval_required_before(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "approval_required_before", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Descriptive text of the DNS Linked zone
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="dnsLinkedZoneId")
    def dns_linked_zone_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dns_linked_zone_id")

    @dns_linked_zone_id.setter
    def dns_linked_zone_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_linked_zone_id", value)

    @_builtins.property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The label of the DNS Linked zone
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "label", value)

    @_builtins.property
    @pulumi.getter(name="linkedTo")
    def linked_to(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The zone that is linked to the DNS Linked zone
        """
        return pulumi.get(self, "linked_to")

    @linked_to.setter
    def linked_to(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "linked_to", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the DNS Linked zone.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _DnsLinkedZoneState:
    def __init__(__self__, *,
                 approval_required_before: Optional[pulumi.Input[_builtins.str]] = None,
                 created_on: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_linked_zone_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 linked_to: Optional[pulumi.Input[_builtins.str]] = None,
                 modified_on: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 owner_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 owner_zone_id: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DnsLinkedZone resources.
        :param pulumi.Input[_builtins.str] approval_required_before: DNS Linked Approval required before
        :param pulumi.Input[_builtins.str] created_on: DNS Linked Zone Creation date
        :param pulumi.Input[_builtins.str] description: Descriptive text of the DNS Linked zone
        :param pulumi.Input[_builtins.str] instance_id: The unique identifier of a DNS Linked zone.
        :param pulumi.Input[_builtins.str] label: The label of the DNS Linked zone
        :param pulumi.Input[_builtins.str] linked_to: The zone that is linked to the DNS Linked zone
        :param pulumi.Input[_builtins.str] modified_on: DNS Linked Zone Modification date
        :param pulumi.Input[_builtins.str] name: The name of the DNS Linked zone.
        :param pulumi.Input[_builtins.str] owner_instance_id: The unique identifier of the owner DNS instance
        :param pulumi.Input[_builtins.str] owner_zone_id: The unique identifier of the owner DNS zone
        :param pulumi.Input[_builtins.str] state: The state of the DNS Linked zone
        """
        if approval_required_before is not None:
            pulumi.set(__self__, "approval_required_before", approval_required_before)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dns_linked_zone_id is not None:
            pulumi.set(__self__, "dns_linked_zone_id", dns_linked_zone_id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if linked_to is not None:
            pulumi.set(__self__, "linked_to", linked_to)
        if modified_on is not None:
            pulumi.set(__self__, "modified_on", modified_on)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_instance_id is not None:
            pulumi.set(__self__, "owner_instance_id", owner_instance_id)
        if owner_zone_id is not None:
            pulumi.set(__self__, "owner_zone_id", owner_zone_id)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="approvalRequiredBefore")
    def approval_required_before(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        DNS Linked Approval required before
        """
        return pulumi.get(self, "approval_required_before")

    @approval_required_before.setter
    def approval_required_before(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "approval_required_before", value)

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        DNS Linked Zone Creation date
        """
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_on", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Descriptive text of the DNS Linked zone
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="dnsLinkedZoneId")
    def dns_linked_zone_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dns_linked_zone_id")

    @dns_linked_zone_id.setter
    def dns_linked_zone_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_linked_zone_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier of a DNS Linked zone.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The label of the DNS Linked zone
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "label", value)

    @_builtins.property
    @pulumi.getter(name="linkedTo")
    def linked_to(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The zone that is linked to the DNS Linked zone
        """
        return pulumi.get(self, "linked_to")

    @linked_to.setter
    def linked_to(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "linked_to", value)

    @_builtins.property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        DNS Linked Zone Modification date
        """
        return pulumi.get(self, "modified_on")

    @modified_on.setter
    def modified_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "modified_on", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the DNS Linked zone.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="ownerInstanceId")
    def owner_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier of the owner DNS instance
        """
        return pulumi.get(self, "owner_instance_id")

    @owner_instance_id.setter
    def owner_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "owner_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="ownerZoneId")
    def owner_zone_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier of the owner DNS zone
        """
        return pulumi.get(self, "owner_zone_id")

    @owner_zone_id.setter
    def owner_zone_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "owner_zone_id", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The state of the DNS Linked zone
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)


@pulumi.type_token("ibm:index/dnsLinkedZone:DnsLinkedZone")
class DnsLinkedZone(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 approval_required_before: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_linked_zone_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 linked_to: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 owner_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 owner_zone_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a DnsLinkedZone resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] approval_required_before: DNS Linked Approval required before
        :param pulumi.Input[_builtins.str] description: Descriptive text of the DNS Linked zone
        :param pulumi.Input[_builtins.str] instance_id: The unique identifier of a DNS Linked zone.
        :param pulumi.Input[_builtins.str] label: The label of the DNS Linked zone
        :param pulumi.Input[_builtins.str] linked_to: The zone that is linked to the DNS Linked zone
        :param pulumi.Input[_builtins.str] name: The name of the DNS Linked zone.
        :param pulumi.Input[_builtins.str] owner_instance_id: The unique identifier of the owner DNS instance
        :param pulumi.Input[_builtins.str] owner_zone_id: The unique identifier of the owner DNS zone
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DnsLinkedZoneArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DnsLinkedZone resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DnsLinkedZoneArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DnsLinkedZoneArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 approval_required_before: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_linked_zone_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 linked_to: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 owner_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 owner_zone_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DnsLinkedZoneArgs.__new__(DnsLinkedZoneArgs)

            __props__.__dict__["approval_required_before"] = approval_required_before
            __props__.__dict__["description"] = description
            __props__.__dict__["dns_linked_zone_id"] = dns_linked_zone_id
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["label"] = label
            __props__.__dict__["linked_to"] = linked_to
            __props__.__dict__["name"] = name
            if owner_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'owner_instance_id'")
            __props__.__dict__["owner_instance_id"] = owner_instance_id
            if owner_zone_id is None and not opts.urn:
                raise TypeError("Missing required property 'owner_zone_id'")
            __props__.__dict__["owner_zone_id"] = owner_zone_id
            __props__.__dict__["created_on"] = None
            __props__.__dict__["modified_on"] = None
            __props__.__dict__["state"] = None
        super(DnsLinkedZone, __self__).__init__(
            'ibm:index/dnsLinkedZone:DnsLinkedZone',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            approval_required_before: Optional[pulumi.Input[_builtins.str]] = None,
            created_on: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            dns_linked_zone_id: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            label: Optional[pulumi.Input[_builtins.str]] = None,
            linked_to: Optional[pulumi.Input[_builtins.str]] = None,
            modified_on: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            owner_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            owner_zone_id: Optional[pulumi.Input[_builtins.str]] = None,
            state: Optional[pulumi.Input[_builtins.str]] = None) -> 'DnsLinkedZone':
        """
        Get an existing DnsLinkedZone resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] approval_required_before: DNS Linked Approval required before
        :param pulumi.Input[_builtins.str] created_on: DNS Linked Zone Creation date
        :param pulumi.Input[_builtins.str] description: Descriptive text of the DNS Linked zone
        :param pulumi.Input[_builtins.str] instance_id: The unique identifier of a DNS Linked zone.
        :param pulumi.Input[_builtins.str] label: The label of the DNS Linked zone
        :param pulumi.Input[_builtins.str] linked_to: The zone that is linked to the DNS Linked zone
        :param pulumi.Input[_builtins.str] modified_on: DNS Linked Zone Modification date
        :param pulumi.Input[_builtins.str] name: The name of the DNS Linked zone.
        :param pulumi.Input[_builtins.str] owner_instance_id: The unique identifier of the owner DNS instance
        :param pulumi.Input[_builtins.str] owner_zone_id: The unique identifier of the owner DNS zone
        :param pulumi.Input[_builtins.str] state: The state of the DNS Linked zone
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DnsLinkedZoneState.__new__(_DnsLinkedZoneState)

        __props__.__dict__["approval_required_before"] = approval_required_before
        __props__.__dict__["created_on"] = created_on
        __props__.__dict__["description"] = description
        __props__.__dict__["dns_linked_zone_id"] = dns_linked_zone_id
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["label"] = label
        __props__.__dict__["linked_to"] = linked_to
        __props__.__dict__["modified_on"] = modified_on
        __props__.__dict__["name"] = name
        __props__.__dict__["owner_instance_id"] = owner_instance_id
        __props__.__dict__["owner_zone_id"] = owner_zone_id
        __props__.__dict__["state"] = state
        return DnsLinkedZone(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="approvalRequiredBefore")
    def approval_required_before(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        DNS Linked Approval required before
        """
        return pulumi.get(self, "approval_required_before")

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> pulumi.Output[_builtins.str]:
        """
        DNS Linked Zone Creation date
        """
        return pulumi.get(self, "created_on")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Descriptive text of the DNS Linked zone
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="dnsLinkedZoneId")
    def dns_linked_zone_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "dns_linked_zone_id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier of a DNS Linked zone.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def label(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The label of the DNS Linked zone
        """
        return pulumi.get(self, "label")

    @_builtins.property
    @pulumi.getter(name="linkedTo")
    def linked_to(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The zone that is linked to the DNS Linked zone
        """
        return pulumi.get(self, "linked_to")

    @_builtins.property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> pulumi.Output[_builtins.str]:
        """
        DNS Linked Zone Modification date
        """
        return pulumi.get(self, "modified_on")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the DNS Linked zone.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="ownerInstanceId")
    def owner_instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier of the owner DNS instance
        """
        return pulumi.get(self, "owner_instance_id")

    @_builtins.property
    @pulumi.getter(name="ownerZoneId")
    def owner_zone_id(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier of the owner DNS zone
        """
        return pulumi.get(self, "owner_zone_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> pulumi.Output[_builtins.str]:
        """
        The state of the DNS Linked zone
        """
        return pulumi.get(self, "state")

