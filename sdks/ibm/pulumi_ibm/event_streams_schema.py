# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['EventStreamsSchemaArgs', 'EventStreamsSchema']

@pulumi.input_type
class EventStreamsSchemaArgs:
    def __init__(__self__, *,
                 resource_instance_id: pulumi.Input[_builtins.str],
                 schema: pulumi.Input[_builtins.str],
                 event_streams_schema_id: Optional[pulumi.Input[_builtins.str]] = None,
                 schema_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a EventStreamsSchema resource.
        :param pulumi.Input[_builtins.str] resource_instance_id: The ID or the CRN of the Event Streams service instance
        :param pulumi.Input[_builtins.str] schema: The schema in JSON format
        :param pulumi.Input[_builtins.str] schema_id: The ID to be assigned to schema, which must be unique. If this value is not specified, a generated UUID is assigned.
        """
        pulumi.set(__self__, "resource_instance_id", resource_instance_id)
        pulumi.set(__self__, "schema", schema)
        if event_streams_schema_id is not None:
            pulumi.set(__self__, "event_streams_schema_id", event_streams_schema_id)
        if schema_id is not None:
            pulumi.set(__self__, "schema_id", schema_id)

    @_builtins.property
    @pulumi.getter(name="resourceInstanceId")
    def resource_instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID or the CRN of the Event Streams service instance
        """
        return pulumi.get(self, "resource_instance_id")

    @resource_instance_id.setter
    def resource_instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_instance_id", value)

    @_builtins.property
    @pulumi.getter
    def schema(self) -> pulumi.Input[_builtins.str]:
        """
        The schema in JSON format
        """
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "schema", value)

    @_builtins.property
    @pulumi.getter(name="eventStreamsSchemaId")
    def event_streams_schema_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "event_streams_schema_id")

    @event_streams_schema_id.setter
    def event_streams_schema_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "event_streams_schema_id", value)

    @_builtins.property
    @pulumi.getter(name="schemaId")
    def schema_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID to be assigned to schema, which must be unique. If this value is not specified, a generated UUID is assigned.
        """
        return pulumi.get(self, "schema_id")

    @schema_id.setter
    def schema_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "schema_id", value)


@pulumi.input_type
class _EventStreamsSchemaState:
    def __init__(__self__, *,
                 event_streams_schema_id: Optional[pulumi.Input[_builtins.str]] = None,
                 kafka_http_url: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 schema: Optional[pulumi.Input[_builtins.str]] = None,
                 schema_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering EventStreamsSchema resources.
        :param pulumi.Input[_builtins.str] kafka_http_url: The API endpoint for interacting with an Event Streams REST API
        :param pulumi.Input[_builtins.str] resource_instance_id: The ID or the CRN of the Event Streams service instance
        :param pulumi.Input[_builtins.str] schema: The schema in JSON format
        :param pulumi.Input[_builtins.str] schema_id: The ID to be assigned to schema, which must be unique. If this value is not specified, a generated UUID is assigned.
        """
        if event_streams_schema_id is not None:
            pulumi.set(__self__, "event_streams_schema_id", event_streams_schema_id)
        if kafka_http_url is not None:
            pulumi.set(__self__, "kafka_http_url", kafka_http_url)
        if resource_instance_id is not None:
            pulumi.set(__self__, "resource_instance_id", resource_instance_id)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)
        if schema_id is not None:
            pulumi.set(__self__, "schema_id", schema_id)

    @_builtins.property
    @pulumi.getter(name="eventStreamsSchemaId")
    def event_streams_schema_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "event_streams_schema_id")

    @event_streams_schema_id.setter
    def event_streams_schema_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "event_streams_schema_id", value)

    @_builtins.property
    @pulumi.getter(name="kafkaHttpUrl")
    def kafka_http_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The API endpoint for interacting with an Event Streams REST API
        """
        return pulumi.get(self, "kafka_http_url")

    @kafka_http_url.setter
    def kafka_http_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kafka_http_url", value)

    @_builtins.property
    @pulumi.getter(name="resourceInstanceId")
    def resource_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID or the CRN of the Event Streams service instance
        """
        return pulumi.get(self, "resource_instance_id")

    @resource_instance_id.setter
    def resource_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_instance_id", value)

    @_builtins.property
    @pulumi.getter
    def schema(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The schema in JSON format
        """
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "schema", value)

    @_builtins.property
    @pulumi.getter(name="schemaId")
    def schema_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID to be assigned to schema, which must be unique. If this value is not specified, a generated UUID is assigned.
        """
        return pulumi.get(self, "schema_id")

    @schema_id.setter
    def schema_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "schema_id", value)


@pulumi.type_token("ibm:index/eventStreamsSchema:EventStreamsSchema")
class EventStreamsSchema(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 event_streams_schema_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 schema: Optional[pulumi.Input[_builtins.str]] = None,
                 schema_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a EventStreamsSchema resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] resource_instance_id: The ID or the CRN of the Event Streams service instance
        :param pulumi.Input[_builtins.str] schema: The schema in JSON format
        :param pulumi.Input[_builtins.str] schema_id: The ID to be assigned to schema, which must be unique. If this value is not specified, a generated UUID is assigned.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EventStreamsSchemaArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a EventStreamsSchema resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param EventStreamsSchemaArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EventStreamsSchemaArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 event_streams_schema_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 schema: Optional[pulumi.Input[_builtins.str]] = None,
                 schema_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EventStreamsSchemaArgs.__new__(EventStreamsSchemaArgs)

            __props__.__dict__["event_streams_schema_id"] = event_streams_schema_id
            if resource_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'resource_instance_id'")
            __props__.__dict__["resource_instance_id"] = resource_instance_id
            if schema is None and not opts.urn:
                raise TypeError("Missing required property 'schema'")
            __props__.__dict__["schema"] = schema
            __props__.__dict__["schema_id"] = schema_id
            __props__.__dict__["kafka_http_url"] = None
        super(EventStreamsSchema, __self__).__init__(
            'ibm:index/eventStreamsSchema:EventStreamsSchema',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            event_streams_schema_id: Optional[pulumi.Input[_builtins.str]] = None,
            kafka_http_url: Optional[pulumi.Input[_builtins.str]] = None,
            resource_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            schema: Optional[pulumi.Input[_builtins.str]] = None,
            schema_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'EventStreamsSchema':
        """
        Get an existing EventStreamsSchema resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] kafka_http_url: The API endpoint for interacting with an Event Streams REST API
        :param pulumi.Input[_builtins.str] resource_instance_id: The ID or the CRN of the Event Streams service instance
        :param pulumi.Input[_builtins.str] schema: The schema in JSON format
        :param pulumi.Input[_builtins.str] schema_id: The ID to be assigned to schema, which must be unique. If this value is not specified, a generated UUID is assigned.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EventStreamsSchemaState.__new__(_EventStreamsSchemaState)

        __props__.__dict__["event_streams_schema_id"] = event_streams_schema_id
        __props__.__dict__["kafka_http_url"] = kafka_http_url
        __props__.__dict__["resource_instance_id"] = resource_instance_id
        __props__.__dict__["schema"] = schema
        __props__.__dict__["schema_id"] = schema_id
        return EventStreamsSchema(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="eventStreamsSchemaId")
    def event_streams_schema_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "event_streams_schema_id")

    @_builtins.property
    @pulumi.getter(name="kafkaHttpUrl")
    def kafka_http_url(self) -> pulumi.Output[_builtins.str]:
        """
        The API endpoint for interacting with an Event Streams REST API
        """
        return pulumi.get(self, "kafka_http_url")

    @_builtins.property
    @pulumi.getter(name="resourceInstanceId")
    def resource_instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID or the CRN of the Event Streams service instance
        """
        return pulumi.get(self, "resource_instance_id")

    @_builtins.property
    @pulumi.getter
    def schema(self) -> pulumi.Output[_builtins.str]:
        """
        The schema in JSON format
        """
        return pulumi.get(self, "schema")

    @_builtins.property
    @pulumi.getter(name="schemaId")
    def schema_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID to be assigned to schema, which must be unique. If this value is not specified, a generated UUID is assigned.
        """
        return pulumi.get(self, "schema_id")

