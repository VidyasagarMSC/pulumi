# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MqcloudQueueManagerArgs', 'MqcloudQueueManager']

@pulumi.input_type
class MqcloudQueueManagerArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[_builtins.str],
                 service_instance_guid: pulumi.Input[_builtins.str],
                 size: pulumi.Input[_builtins.str],
                 display_name: Optional[pulumi.Input[_builtins.str]] = None,
                 mqcloud_queue_manager_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['MqcloudQueueManagerTimeoutsArgs']] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a MqcloudQueueManager resource.
        :param pulumi.Input[_builtins.str] location: The locations in which the queue manager could be deployed.
        :param pulumi.Input[_builtins.str] service_instance_guid: The GUID that uniquely identifies the MQaaS service instance.
        :param pulumi.Input[_builtins.str] size: The queue manager sizes of deployment available.
        :param pulumi.Input[_builtins.str] display_name: A displayable name for the queue manager - limited only in length.
        :param pulumi.Input[_builtins.str] name: A queue manager name conforming to MQ restrictions.
        :param pulumi.Input[_builtins.str] version: The MQ version of the queue manager.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "service_instance_guid", service_instance_guid)
        pulumi.set(__self__, "size", size)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if mqcloud_queue_manager_id is not None:
            pulumi.set(__self__, "mqcloud_queue_manager_id", mqcloud_queue_manager_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Input[_builtins.str]:
        """
        The locations in which the queue manager could be deployed.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter(name="serviceInstanceGuid")
    def service_instance_guid(self) -> pulumi.Input[_builtins.str]:
        """
        The GUID that uniquely identifies the MQaaS service instance.
        """
        return pulumi.get(self, "service_instance_guid")

    @service_instance_guid.setter
    def service_instance_guid(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "service_instance_guid", value)

    @_builtins.property
    @pulumi.getter
    def size(self) -> pulumi.Input[_builtins.str]:
        """
        The queue manager sizes of deployment available.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A displayable name for the queue manager - limited only in length.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "display_name", value)

    @_builtins.property
    @pulumi.getter(name="mqcloudQueueManagerId")
    def mqcloud_queue_manager_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "mqcloud_queue_manager_id")

    @mqcloud_queue_manager_id.setter
    def mqcloud_queue_manager_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mqcloud_queue_manager_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A queue manager name conforming to MQ restrictions.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['MqcloudQueueManagerTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['MqcloudQueueManagerTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The MQ version of the queue manager.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class _MqcloudQueueManagerState:
    def __init__(__self__, *,
                 administrator_api_endpoint_url: Optional[pulumi.Input[_builtins.str]] = None,
                 available_upgrade_versions_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_info_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 date_created: Optional[pulumi.Input[_builtins.str]] = None,
                 display_name: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 mqcloud_queue_manager_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 queue_manager_id: Optional[pulumi.Input[_builtins.str]] = None,
                 rest_api_endpoint_url: Optional[pulumi.Input[_builtins.str]] = None,
                 service_instance_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 size: Optional[pulumi.Input[_builtins.str]] = None,
                 status_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['MqcloudQueueManagerTimeoutsArgs']] = None,
                 upgrade_available: Optional[pulumi.Input[_builtins.bool]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 web_console_url: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering MqcloudQueueManager resources.
        :param pulumi.Input[_builtins.str] administrator_api_endpoint_url: The url through which to access the Admin REST APIs for this queue manager.
        :param pulumi.Input[_builtins.str] available_upgrade_versions_uri: The uri through which the available versions to upgrade to can be found for this queue manager.
        :param pulumi.Input[_builtins.str] connection_info_uri: The uri through which the CDDT for this queue manager can be obtained.
        :param pulumi.Input[_builtins.str] date_created: RFC3339 formatted UTC date for when the queue manager was created.
        :param pulumi.Input[_builtins.str] display_name: A displayable name for the queue manager - limited only in length.
        :param pulumi.Input[_builtins.str] href: The URL for this queue manager.
        :param pulumi.Input[_builtins.str] location: The locations in which the queue manager could be deployed.
        :param pulumi.Input[_builtins.str] name: A queue manager name conforming to MQ restrictions.
        :param pulumi.Input[_builtins.str] queue_manager_id: The ID of the queue manager which was allocated on creation, and can be used for delete calls.
        :param pulumi.Input[_builtins.str] rest_api_endpoint_url: The url through which to access REST APIs for this queue manager.
        :param pulumi.Input[_builtins.str] service_instance_guid: The GUID that uniquely identifies the MQaaS service instance.
        :param pulumi.Input[_builtins.str] size: The queue manager sizes of deployment available.
        :param pulumi.Input[_builtins.str] status_uri: A reference uri to get deployment status of the queue manager.
        :param pulumi.Input[_builtins.bool] upgrade_available: Describes whether an upgrade is available for this queue manager.
        :param pulumi.Input[_builtins.str] version: The MQ version of the queue manager.
        :param pulumi.Input[_builtins.str] web_console_url: The url through which to access the web console for this queue manager.
        """
        if administrator_api_endpoint_url is not None:
            pulumi.set(__self__, "administrator_api_endpoint_url", administrator_api_endpoint_url)
        if available_upgrade_versions_uri is not None:
            pulumi.set(__self__, "available_upgrade_versions_uri", available_upgrade_versions_uri)
        if connection_info_uri is not None:
            pulumi.set(__self__, "connection_info_uri", connection_info_uri)
        if date_created is not None:
            pulumi.set(__self__, "date_created", date_created)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if mqcloud_queue_manager_id is not None:
            pulumi.set(__self__, "mqcloud_queue_manager_id", mqcloud_queue_manager_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if queue_manager_id is not None:
            pulumi.set(__self__, "queue_manager_id", queue_manager_id)
        if rest_api_endpoint_url is not None:
            pulumi.set(__self__, "rest_api_endpoint_url", rest_api_endpoint_url)
        if service_instance_guid is not None:
            pulumi.set(__self__, "service_instance_guid", service_instance_guid)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if status_uri is not None:
            pulumi.set(__self__, "status_uri", status_uri)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if upgrade_available is not None:
            pulumi.set(__self__, "upgrade_available", upgrade_available)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if web_console_url is not None:
            pulumi.set(__self__, "web_console_url", web_console_url)

    @_builtins.property
    @pulumi.getter(name="administratorApiEndpointUrl")
    def administrator_api_endpoint_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The url through which to access the Admin REST APIs for this queue manager.
        """
        return pulumi.get(self, "administrator_api_endpoint_url")

    @administrator_api_endpoint_url.setter
    def administrator_api_endpoint_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "administrator_api_endpoint_url", value)

    @_builtins.property
    @pulumi.getter(name="availableUpgradeVersionsUri")
    def available_upgrade_versions_uri(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The uri through which the available versions to upgrade to can be found for this queue manager.
        """
        return pulumi.get(self, "available_upgrade_versions_uri")

    @available_upgrade_versions_uri.setter
    def available_upgrade_versions_uri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "available_upgrade_versions_uri", value)

    @_builtins.property
    @pulumi.getter(name="connectionInfoUri")
    def connection_info_uri(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The uri through which the CDDT for this queue manager can be obtained.
        """
        return pulumi.get(self, "connection_info_uri")

    @connection_info_uri.setter
    def connection_info_uri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connection_info_uri", value)

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        RFC3339 formatted UTC date for when the queue manager was created.
        """
        return pulumi.get(self, "date_created")

    @date_created.setter
    def date_created(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "date_created", value)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A displayable name for the queue manager - limited only in length.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "display_name", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL for this queue manager.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The locations in which the queue manager could be deployed.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter(name="mqcloudQueueManagerId")
    def mqcloud_queue_manager_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "mqcloud_queue_manager_id")

    @mqcloud_queue_manager_id.setter
    def mqcloud_queue_manager_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mqcloud_queue_manager_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A queue manager name conforming to MQ restrictions.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="queueManagerId")
    def queue_manager_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the queue manager which was allocated on creation, and can be used for delete calls.
        """
        return pulumi.get(self, "queue_manager_id")

    @queue_manager_id.setter
    def queue_manager_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "queue_manager_id", value)

    @_builtins.property
    @pulumi.getter(name="restApiEndpointUrl")
    def rest_api_endpoint_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The url through which to access REST APIs for this queue manager.
        """
        return pulumi.get(self, "rest_api_endpoint_url")

    @rest_api_endpoint_url.setter
    def rest_api_endpoint_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rest_api_endpoint_url", value)

    @_builtins.property
    @pulumi.getter(name="serviceInstanceGuid")
    def service_instance_guid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The GUID that uniquely identifies the MQaaS service instance.
        """
        return pulumi.get(self, "service_instance_guid")

    @service_instance_guid.setter
    def service_instance_guid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_instance_guid", value)

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The queue manager sizes of deployment available.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter(name="statusUri")
    def status_uri(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A reference uri to get deployment status of the queue manager.
        """
        return pulumi.get(self, "status_uri")

    @status_uri.setter
    def status_uri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status_uri", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['MqcloudQueueManagerTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['MqcloudQueueManagerTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="upgradeAvailable")
    def upgrade_available(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Describes whether an upgrade is available for this queue manager.
        """
        return pulumi.get(self, "upgrade_available")

    @upgrade_available.setter
    def upgrade_available(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "upgrade_available", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The MQ version of the queue manager.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter(name="webConsoleUrl")
    def web_console_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The url through which to access the web console for this queue manager.
        """
        return pulumi.get(self, "web_console_url")

    @web_console_url.setter
    def web_console_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "web_console_url", value)


@pulumi.type_token("ibm:index/mqcloudQueueManager:MqcloudQueueManager")
class MqcloudQueueManager(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 display_name: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 mqcloud_queue_manager_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 service_instance_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 size: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['MqcloudQueueManagerTimeoutsArgs', 'MqcloudQueueManagerTimeoutsArgsDict']]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a MqcloudQueueManager resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] display_name: A displayable name for the queue manager - limited only in length.
        :param pulumi.Input[_builtins.str] location: The locations in which the queue manager could be deployed.
        :param pulumi.Input[_builtins.str] name: A queue manager name conforming to MQ restrictions.
        :param pulumi.Input[_builtins.str] service_instance_guid: The GUID that uniquely identifies the MQaaS service instance.
        :param pulumi.Input[_builtins.str] size: The queue manager sizes of deployment available.
        :param pulumi.Input[_builtins.str] version: The MQ version of the queue manager.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MqcloudQueueManagerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a MqcloudQueueManager resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param MqcloudQueueManagerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MqcloudQueueManagerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 display_name: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 mqcloud_queue_manager_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 service_instance_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 size: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['MqcloudQueueManagerTimeoutsArgs', 'MqcloudQueueManagerTimeoutsArgsDict']]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MqcloudQueueManagerArgs.__new__(MqcloudQueueManagerArgs)

            __props__.__dict__["display_name"] = display_name
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["mqcloud_queue_manager_id"] = mqcloud_queue_manager_id
            __props__.__dict__["name"] = name
            if service_instance_guid is None and not opts.urn:
                raise TypeError("Missing required property 'service_instance_guid'")
            __props__.__dict__["service_instance_guid"] = service_instance_guid
            if size is None and not opts.urn:
                raise TypeError("Missing required property 'size'")
            __props__.__dict__["size"] = size
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["version"] = version
            __props__.__dict__["administrator_api_endpoint_url"] = None
            __props__.__dict__["available_upgrade_versions_uri"] = None
            __props__.__dict__["connection_info_uri"] = None
            __props__.__dict__["date_created"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["queue_manager_id"] = None
            __props__.__dict__["rest_api_endpoint_url"] = None
            __props__.__dict__["status_uri"] = None
            __props__.__dict__["upgrade_available"] = None
            __props__.__dict__["web_console_url"] = None
        super(MqcloudQueueManager, __self__).__init__(
            'ibm:index/mqcloudQueueManager:MqcloudQueueManager',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            administrator_api_endpoint_url: Optional[pulumi.Input[_builtins.str]] = None,
            available_upgrade_versions_uri: Optional[pulumi.Input[_builtins.str]] = None,
            connection_info_uri: Optional[pulumi.Input[_builtins.str]] = None,
            date_created: Optional[pulumi.Input[_builtins.str]] = None,
            display_name: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            location: Optional[pulumi.Input[_builtins.str]] = None,
            mqcloud_queue_manager_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            queue_manager_id: Optional[pulumi.Input[_builtins.str]] = None,
            rest_api_endpoint_url: Optional[pulumi.Input[_builtins.str]] = None,
            service_instance_guid: Optional[pulumi.Input[_builtins.str]] = None,
            size: Optional[pulumi.Input[_builtins.str]] = None,
            status_uri: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['MqcloudQueueManagerTimeoutsArgs', 'MqcloudQueueManagerTimeoutsArgsDict']]] = None,
            upgrade_available: Optional[pulumi.Input[_builtins.bool]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None,
            web_console_url: Optional[pulumi.Input[_builtins.str]] = None) -> 'MqcloudQueueManager':
        """
        Get an existing MqcloudQueueManager resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] administrator_api_endpoint_url: The url through which to access the Admin REST APIs for this queue manager.
        :param pulumi.Input[_builtins.str] available_upgrade_versions_uri: The uri through which the available versions to upgrade to can be found for this queue manager.
        :param pulumi.Input[_builtins.str] connection_info_uri: The uri through which the CDDT for this queue manager can be obtained.
        :param pulumi.Input[_builtins.str] date_created: RFC3339 formatted UTC date for when the queue manager was created.
        :param pulumi.Input[_builtins.str] display_name: A displayable name for the queue manager - limited only in length.
        :param pulumi.Input[_builtins.str] href: The URL for this queue manager.
        :param pulumi.Input[_builtins.str] location: The locations in which the queue manager could be deployed.
        :param pulumi.Input[_builtins.str] name: A queue manager name conforming to MQ restrictions.
        :param pulumi.Input[_builtins.str] queue_manager_id: The ID of the queue manager which was allocated on creation, and can be used for delete calls.
        :param pulumi.Input[_builtins.str] rest_api_endpoint_url: The url through which to access REST APIs for this queue manager.
        :param pulumi.Input[_builtins.str] service_instance_guid: The GUID that uniquely identifies the MQaaS service instance.
        :param pulumi.Input[_builtins.str] size: The queue manager sizes of deployment available.
        :param pulumi.Input[_builtins.str] status_uri: A reference uri to get deployment status of the queue manager.
        :param pulumi.Input[_builtins.bool] upgrade_available: Describes whether an upgrade is available for this queue manager.
        :param pulumi.Input[_builtins.str] version: The MQ version of the queue manager.
        :param pulumi.Input[_builtins.str] web_console_url: The url through which to access the web console for this queue manager.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MqcloudQueueManagerState.__new__(_MqcloudQueueManagerState)

        __props__.__dict__["administrator_api_endpoint_url"] = administrator_api_endpoint_url
        __props__.__dict__["available_upgrade_versions_uri"] = available_upgrade_versions_uri
        __props__.__dict__["connection_info_uri"] = connection_info_uri
        __props__.__dict__["date_created"] = date_created
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["href"] = href
        __props__.__dict__["location"] = location
        __props__.__dict__["mqcloud_queue_manager_id"] = mqcloud_queue_manager_id
        __props__.__dict__["name"] = name
        __props__.__dict__["queue_manager_id"] = queue_manager_id
        __props__.__dict__["rest_api_endpoint_url"] = rest_api_endpoint_url
        __props__.__dict__["service_instance_guid"] = service_instance_guid
        __props__.__dict__["size"] = size
        __props__.__dict__["status_uri"] = status_uri
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["upgrade_available"] = upgrade_available
        __props__.__dict__["version"] = version
        __props__.__dict__["web_console_url"] = web_console_url
        return MqcloudQueueManager(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="administratorApiEndpointUrl")
    def administrator_api_endpoint_url(self) -> pulumi.Output[_builtins.str]:
        """
        The url through which to access the Admin REST APIs for this queue manager.
        """
        return pulumi.get(self, "administrator_api_endpoint_url")

    @_builtins.property
    @pulumi.getter(name="availableUpgradeVersionsUri")
    def available_upgrade_versions_uri(self) -> pulumi.Output[_builtins.str]:
        """
        The uri through which the available versions to upgrade to can be found for this queue manager.
        """
        return pulumi.get(self, "available_upgrade_versions_uri")

    @_builtins.property
    @pulumi.getter(name="connectionInfoUri")
    def connection_info_uri(self) -> pulumi.Output[_builtins.str]:
        """
        The uri through which the CDDT for this queue manager can be obtained.
        """
        return pulumi.get(self, "connection_info_uri")

    @_builtins.property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> pulumi.Output[_builtins.str]:
        """
        RFC3339 formatted UTC date for when the queue manager was created.
        """
        return pulumi.get(self, "date_created")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        A displayable name for the queue manager - limited only in length.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        The URL for this queue manager.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Output[_builtins.str]:
        """
        The locations in which the queue manager could be deployed.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter(name="mqcloudQueueManagerId")
    def mqcloud_queue_manager_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "mqcloud_queue_manager_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        A queue manager name conforming to MQ restrictions.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="queueManagerId")
    def queue_manager_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the queue manager which was allocated on creation, and can be used for delete calls.
        """
        return pulumi.get(self, "queue_manager_id")

    @_builtins.property
    @pulumi.getter(name="restApiEndpointUrl")
    def rest_api_endpoint_url(self) -> pulumi.Output[_builtins.str]:
        """
        The url through which to access REST APIs for this queue manager.
        """
        return pulumi.get(self, "rest_api_endpoint_url")

    @_builtins.property
    @pulumi.getter(name="serviceInstanceGuid")
    def service_instance_guid(self) -> pulumi.Output[_builtins.str]:
        """
        The GUID that uniquely identifies the MQaaS service instance.
        """
        return pulumi.get(self, "service_instance_guid")

    @_builtins.property
    @pulumi.getter
    def size(self) -> pulumi.Output[_builtins.str]:
        """
        The queue manager sizes of deployment available.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="statusUri")
    def status_uri(self) -> pulumi.Output[_builtins.str]:
        """
        A reference uri to get deployment status of the queue manager.
        """
        return pulumi.get(self, "status_uri")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.MqcloudQueueManagerTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter(name="upgradeAvailable")
    def upgrade_available(self) -> pulumi.Output[_builtins.bool]:
        """
        Describes whether an upgrade is available for this queue manager.
        """
        return pulumi.get(self, "upgrade_available")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.str]:
        """
        The MQ version of the queue manager.
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="webConsoleUrl")
    def web_console_url(self) -> pulumi.Output[_builtins.str]:
        """
        The url through which to access the web console for this queue manager.
        """
        return pulumi.get(self, "web_console_url")

