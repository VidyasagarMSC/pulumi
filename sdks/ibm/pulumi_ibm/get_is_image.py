# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsImageResult',
    'AwaitableGetIsImageResult',
    'get_is_image',
    'get_is_image_output',
]

@pulumi.output_type
class GetIsImageResult:
    """
    A collection of values returned by getIsImage.
    """
    def __init__(__self__, access_tags=None, allowed_uses=None, architecture=None, catalog_offerings=None, checksum=None, created_at=None, crn=None, deprecation_at=None, encryption=None, encryption_key=None, id=None, identifier=None, name=None, obsolescence_at=None, operating_systems=None, os=None, remotes=None, resource_groups=None, source_volume=None, status=None, status_reasons=None, user_data_format=None, visibility=None):
        if access_tags and not isinstance(access_tags, list):
            raise TypeError("Expected argument 'access_tags' to be a list")
        pulumi.set(__self__, "access_tags", access_tags)
        if allowed_uses and not isinstance(allowed_uses, list):
            raise TypeError("Expected argument 'allowed_uses' to be a list")
        pulumi.set(__self__, "allowed_uses", allowed_uses)
        if architecture and not isinstance(architecture, str):
            raise TypeError("Expected argument 'architecture' to be a str")
        pulumi.set(__self__, "architecture", architecture)
        if catalog_offerings and not isinstance(catalog_offerings, list):
            raise TypeError("Expected argument 'catalog_offerings' to be a list")
        pulumi.set(__self__, "catalog_offerings", catalog_offerings)
        if checksum and not isinstance(checksum, str):
            raise TypeError("Expected argument 'checksum' to be a str")
        pulumi.set(__self__, "checksum", checksum)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if deprecation_at and not isinstance(deprecation_at, str):
            raise TypeError("Expected argument 'deprecation_at' to be a str")
        pulumi.set(__self__, "deprecation_at", deprecation_at)
        if encryption and not isinstance(encryption, str):
            raise TypeError("Expected argument 'encryption' to be a str")
        pulumi.set(__self__, "encryption", encryption)
        if encryption_key and not isinstance(encryption_key, str):
            raise TypeError("Expected argument 'encryption_key' to be a str")
        pulumi.set(__self__, "encryption_key", encryption_key)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identifier and not isinstance(identifier, str):
            raise TypeError("Expected argument 'identifier' to be a str")
        pulumi.set(__self__, "identifier", identifier)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if obsolescence_at and not isinstance(obsolescence_at, str):
            raise TypeError("Expected argument 'obsolescence_at' to be a str")
        pulumi.set(__self__, "obsolescence_at", obsolescence_at)
        if operating_systems and not isinstance(operating_systems, list):
            raise TypeError("Expected argument 'operating_systems' to be a list")
        pulumi.set(__self__, "operating_systems", operating_systems)
        if os and not isinstance(os, str):
            raise TypeError("Expected argument 'os' to be a str")
        pulumi.set(__self__, "os", os)
        if remotes and not isinstance(remotes, list):
            raise TypeError("Expected argument 'remotes' to be a list")
        pulumi.set(__self__, "remotes", remotes)
        if resource_groups and not isinstance(resource_groups, list):
            raise TypeError("Expected argument 'resource_groups' to be a list")
        pulumi.set(__self__, "resource_groups", resource_groups)
        if source_volume and not isinstance(source_volume, str):
            raise TypeError("Expected argument 'source_volume' to be a str")
        pulumi.set(__self__, "source_volume", source_volume)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if status_reasons and not isinstance(status_reasons, list):
            raise TypeError("Expected argument 'status_reasons' to be a list")
        pulumi.set(__self__, "status_reasons", status_reasons)
        if user_data_format and not isinstance(user_data_format, str):
            raise TypeError("Expected argument 'user_data_format' to be a str")
        pulumi.set(__self__, "user_data_format", user_data_format)
        if visibility and not isinstance(visibility, str):
            raise TypeError("Expected argument 'visibility' to be a str")
        pulumi.set(__self__, "visibility", visibility)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter(name="allowedUses")
    def allowed_uses(self) -> Sequence['outputs.GetIsImageAllowedUseResult']:
        return pulumi.get(self, "allowed_uses")

    @_builtins.property
    @pulumi.getter
    def architecture(self) -> _builtins.str:
        return pulumi.get(self, "architecture")

    @_builtins.property
    @pulumi.getter(name="catalogOfferings")
    def catalog_offerings(self) -> Sequence['outputs.GetIsImageCatalogOfferingResult']:
        return pulumi.get(self, "catalog_offerings")

    @_builtins.property
    @pulumi.getter
    def checksum(self) -> _builtins.str:
        return pulumi.get(self, "checksum")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="deprecationAt")
    def deprecation_at(self) -> _builtins.str:
        return pulumi.get(self, "deprecation_at")

    @_builtins.property
    @pulumi.getter
    def encryption(self) -> _builtins.str:
        return pulumi.get(self, "encryption")

    @_builtins.property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> _builtins.str:
        return pulumi.get(self, "encryption_key")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def identifier(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "identifier")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="obsolescenceAt")
    def obsolescence_at(self) -> _builtins.str:
        return pulumi.get(self, "obsolescence_at")

    @_builtins.property
    @pulumi.getter(name="operatingSystems")
    def operating_systems(self) -> Sequence['outputs.GetIsImageOperatingSystemResult']:
        return pulumi.get(self, "operating_systems")

    @_builtins.property
    @pulumi.getter
    def os(self) -> _builtins.str:
        return pulumi.get(self, "os")

    @_builtins.property
    @pulumi.getter
    def remotes(self) -> Sequence['outputs.GetIsImageRemoteResult']:
        return pulumi.get(self, "remotes")

    @_builtins.property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Sequence['outputs.GetIsImageResourceGroupResult']:
        return pulumi.get(self, "resource_groups")

    @_builtins.property
    @pulumi.getter(name="sourceVolume")
    def source_volume(self) -> _builtins.str:
        return pulumi.get(self, "source_volume")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> Sequence['outputs.GetIsImageStatusReasonResult']:
        return pulumi.get(self, "status_reasons")

    @_builtins.property
    @pulumi.getter(name="userDataFormat")
    def user_data_format(self) -> _builtins.str:
        return pulumi.get(self, "user_data_format")

    @_builtins.property
    @pulumi.getter
    def visibility(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "visibility")


class AwaitableGetIsImageResult(GetIsImageResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsImageResult(
            access_tags=self.access_tags,
            allowed_uses=self.allowed_uses,
            architecture=self.architecture,
            catalog_offerings=self.catalog_offerings,
            checksum=self.checksum,
            created_at=self.created_at,
            crn=self.crn,
            deprecation_at=self.deprecation_at,
            encryption=self.encryption,
            encryption_key=self.encryption_key,
            id=self.id,
            identifier=self.identifier,
            name=self.name,
            obsolescence_at=self.obsolescence_at,
            operating_systems=self.operating_systems,
            os=self.os,
            remotes=self.remotes,
            resource_groups=self.resource_groups,
            source_volume=self.source_volume,
            status=self.status,
            status_reasons=self.status_reasons,
            user_data_format=self.user_data_format,
            visibility=self.visibility)


def get_is_image(id: Optional[_builtins.str] = None,
                 identifier: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 visibility: Optional[_builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsImageResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['identifier'] = identifier
    __args__['name'] = name
    __args__['visibility'] = visibility
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsImage:getIsImage', __args__, opts=opts, typ=GetIsImageResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsImageResult(
        access_tags=pulumi.get(__ret__, 'access_tags'),
        allowed_uses=pulumi.get(__ret__, 'allowed_uses'),
        architecture=pulumi.get(__ret__, 'architecture'),
        catalog_offerings=pulumi.get(__ret__, 'catalog_offerings'),
        checksum=pulumi.get(__ret__, 'checksum'),
        created_at=pulumi.get(__ret__, 'created_at'),
        crn=pulumi.get(__ret__, 'crn'),
        deprecation_at=pulumi.get(__ret__, 'deprecation_at'),
        encryption=pulumi.get(__ret__, 'encryption'),
        encryption_key=pulumi.get(__ret__, 'encryption_key'),
        id=pulumi.get(__ret__, 'id'),
        identifier=pulumi.get(__ret__, 'identifier'),
        name=pulumi.get(__ret__, 'name'),
        obsolescence_at=pulumi.get(__ret__, 'obsolescence_at'),
        operating_systems=pulumi.get(__ret__, 'operating_systems'),
        os=pulumi.get(__ret__, 'os'),
        remotes=pulumi.get(__ret__, 'remotes'),
        resource_groups=pulumi.get(__ret__, 'resource_groups'),
        source_volume=pulumi.get(__ret__, 'source_volume'),
        status=pulumi.get(__ret__, 'status'),
        status_reasons=pulumi.get(__ret__, 'status_reasons'),
        user_data_format=pulumi.get(__ret__, 'user_data_format'),
        visibility=pulumi.get(__ret__, 'visibility'))
def get_is_image_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        identifier: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        visibility: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsImageResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['identifier'] = identifier
    __args__['name'] = name
    __args__['visibility'] = visibility
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsImage:getIsImage', __args__, opts=opts, typ=GetIsImageResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsImageResult(
        access_tags=pulumi.get(__response__, 'access_tags'),
        allowed_uses=pulumi.get(__response__, 'allowed_uses'),
        architecture=pulumi.get(__response__, 'architecture'),
        catalog_offerings=pulumi.get(__response__, 'catalog_offerings'),
        checksum=pulumi.get(__response__, 'checksum'),
        created_at=pulumi.get(__response__, 'created_at'),
        crn=pulumi.get(__response__, 'crn'),
        deprecation_at=pulumi.get(__response__, 'deprecation_at'),
        encryption=pulumi.get(__response__, 'encryption'),
        encryption_key=pulumi.get(__response__, 'encryption_key'),
        id=pulumi.get(__response__, 'id'),
        identifier=pulumi.get(__response__, 'identifier'),
        name=pulumi.get(__response__, 'name'),
        obsolescence_at=pulumi.get(__response__, 'obsolescence_at'),
        operating_systems=pulumi.get(__response__, 'operating_systems'),
        os=pulumi.get(__response__, 'os'),
        remotes=pulumi.get(__response__, 'remotes'),
        resource_groups=pulumi.get(__response__, 'resource_groups'),
        source_volume=pulumi.get(__response__, 'source_volume'),
        status=pulumi.get(__response__, 'status'),
        status_reasons=pulumi.get(__response__, 'status_reasons'),
        user_data_format=pulumi.get(__response__, 'user_data_format'),
        visibility=pulumi.get(__response__, 'visibility')))
