# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['DnsRecordArgs', 'DnsRecord']

@pulumi.input_type
class DnsRecordArgs:
    def __init__(__self__, *,
                 data: pulumi.Input[_builtins.str],
                 domain_id: pulumi.Input[_builtins.float],
                 host: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 dns_record_id: Optional[pulumi.Input[_builtins.str]] = None,
                 expire: Optional[pulumi.Input[_builtins.float]] = None,
                 minimum_ttl: Optional[pulumi.Input[_builtins.float]] = None,
                 mx_priority: Optional[pulumi.Input[_builtins.float]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 priority: Optional[pulumi.Input[_builtins.float]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 refresh: Optional[pulumi.Input[_builtins.float]] = None,
                 responsible_person: Optional[pulumi.Input[_builtins.str]] = None,
                 retry: Optional[pulumi.Input[_builtins.float]] = None,
                 service: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 ttl: Optional[pulumi.Input[_builtins.float]] = None,
                 weight: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a DnsRecord resource.
        :param pulumi.Input[_builtins.str] data: DNS record data
        :param pulumi.Input[_builtins.float] domain_id: Domain ID of dns record instance
        :param pulumi.Input[_builtins.str] host: Hostname
        :param pulumi.Input[_builtins.str] type: DNS record type
        :param pulumi.Input[_builtins.float] expire: DNS record expiry info
        :param pulumi.Input[_builtins.float] minimum_ttl: Minimun TTL configuration
        :param pulumi.Input[_builtins.float] mx_priority: Maximum priority
        :param pulumi.Input[_builtins.float] port: port number
        :param pulumi.Input[_builtins.float] priority: priority info
        :param pulumi.Input[_builtins.str] protocol: protocol info
        :param pulumi.Input[_builtins.float] refresh: refresh rate
        :param pulumi.Input[_builtins.str] responsible_person: Responsible person for DNS record
        :param pulumi.Input[_builtins.float] retry: Retry count
        :param pulumi.Input[_builtins.str] service: service info
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: tags set for the resource
        :param pulumi.Input[_builtins.float] ttl: TTL configuration
        :param pulumi.Input[_builtins.float] weight: weight info
        """
        pulumi.set(__self__, "data", data)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "type", type)
        if dns_record_id is not None:
            pulumi.set(__self__, "dns_record_id", dns_record_id)
        if expire is not None:
            pulumi.set(__self__, "expire", expire)
        if minimum_ttl is not None:
            pulumi.set(__self__, "minimum_ttl", minimum_ttl)
        if mx_priority is not None:
            pulumi.set(__self__, "mx_priority", mx_priority)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if refresh is not None:
            pulumi.set(__self__, "refresh", refresh)
        if responsible_person is not None:
            pulumi.set(__self__, "responsible_person", responsible_person)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter
    def data(self) -> pulumi.Input[_builtins.str]:
        """
        DNS record data
        """
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "data", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Input[_builtins.float]:
        """
        Domain ID of dns record instance
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter
    def host(self) -> pulumi.Input[_builtins.str]:
        """
        Hostname
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "host", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        DNS record type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="dnsRecordId")
    def dns_record_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dns_record_id")

    @dns_record_id.setter
    def dns_record_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_record_id", value)

    @_builtins.property
    @pulumi.getter
    def expire(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        DNS record expiry info
        """
        return pulumi.get(self, "expire")

    @expire.setter
    def expire(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "expire", value)

    @_builtins.property
    @pulumi.getter(name="minimumTtl")
    def minimum_ttl(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Minimun TTL configuration
        """
        return pulumi.get(self, "minimum_ttl")

    @minimum_ttl.setter
    def minimum_ttl(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "minimum_ttl", value)

    @_builtins.property
    @pulumi.getter(name="mxPriority")
    def mx_priority(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Maximum priority
        """
        return pulumi.get(self, "mx_priority")

    @mx_priority.setter
    def mx_priority(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "mx_priority", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        port number
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        priority info
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "priority", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        protocol info
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter
    def refresh(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        refresh rate
        """
        return pulumi.get(self, "refresh")

    @refresh.setter
    def refresh(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "refresh", value)

    @_builtins.property
    @pulumi.getter(name="responsiblePerson")
    def responsible_person(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Responsible person for DNS record
        """
        return pulumi.get(self, "responsible_person")

    @responsible_person.setter
    def responsible_person(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "responsible_person", value)

    @_builtins.property
    @pulumi.getter
    def retry(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Retry count
        """
        return pulumi.get(self, "retry")

    @retry.setter
    def retry(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "retry", value)

    @_builtins.property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        service info
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        tags set for the resource
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        TTL configuration
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ttl", value)

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        weight info
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class _DnsRecordState:
    def __init__(__self__, *,
                 data: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_record_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.float]] = None,
                 expire: Optional[pulumi.Input[_builtins.float]] = None,
                 host: Optional[pulumi.Input[_builtins.str]] = None,
                 minimum_ttl: Optional[pulumi.Input[_builtins.float]] = None,
                 mx_priority: Optional[pulumi.Input[_builtins.float]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 priority: Optional[pulumi.Input[_builtins.float]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 refresh: Optional[pulumi.Input[_builtins.float]] = None,
                 responsible_person: Optional[pulumi.Input[_builtins.str]] = None,
                 retry: Optional[pulumi.Input[_builtins.float]] = None,
                 service: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 ttl: Optional[pulumi.Input[_builtins.float]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 weight: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering DnsRecord resources.
        :param pulumi.Input[_builtins.str] data: DNS record data
        :param pulumi.Input[_builtins.float] domain_id: Domain ID of dns record instance
        :param pulumi.Input[_builtins.float] expire: DNS record expiry info
        :param pulumi.Input[_builtins.str] host: Hostname
        :param pulumi.Input[_builtins.float] minimum_ttl: Minimun TTL configuration
        :param pulumi.Input[_builtins.float] mx_priority: Maximum priority
        :param pulumi.Input[_builtins.float] port: port number
        :param pulumi.Input[_builtins.float] priority: priority info
        :param pulumi.Input[_builtins.str] protocol: protocol info
        :param pulumi.Input[_builtins.float] refresh: refresh rate
        :param pulumi.Input[_builtins.str] responsible_person: Responsible person for DNS record
        :param pulumi.Input[_builtins.float] retry: Retry count
        :param pulumi.Input[_builtins.str] service: service info
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: tags set for the resource
        :param pulumi.Input[_builtins.float] ttl: TTL configuration
        :param pulumi.Input[_builtins.str] type: DNS record type
        :param pulumi.Input[_builtins.float] weight: weight info
        """
        if data is not None:
            pulumi.set(__self__, "data", data)
        if dns_record_id is not None:
            pulumi.set(__self__, "dns_record_id", dns_record_id)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if expire is not None:
            pulumi.set(__self__, "expire", expire)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if minimum_ttl is not None:
            pulumi.set(__self__, "minimum_ttl", minimum_ttl)
        if mx_priority is not None:
            pulumi.set(__self__, "mx_priority", mx_priority)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if refresh is not None:
            pulumi.set(__self__, "refresh", refresh)
        if responsible_person is not None:
            pulumi.set(__self__, "responsible_person", responsible_person)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter
    def data(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        DNS record data
        """
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data", value)

    @_builtins.property
    @pulumi.getter(name="dnsRecordId")
    def dns_record_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dns_record_id")

    @dns_record_id.setter
    def dns_record_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_record_id", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Domain ID of dns record instance
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter
    def expire(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        DNS record expiry info
        """
        return pulumi.get(self, "expire")

    @expire.setter
    def expire(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "expire", value)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Hostname
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host", value)

    @_builtins.property
    @pulumi.getter(name="minimumTtl")
    def minimum_ttl(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Minimun TTL configuration
        """
        return pulumi.get(self, "minimum_ttl")

    @minimum_ttl.setter
    def minimum_ttl(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "minimum_ttl", value)

    @_builtins.property
    @pulumi.getter(name="mxPriority")
    def mx_priority(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Maximum priority
        """
        return pulumi.get(self, "mx_priority")

    @mx_priority.setter
    def mx_priority(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "mx_priority", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        port number
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        priority info
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "priority", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        protocol info
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter
    def refresh(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        refresh rate
        """
        return pulumi.get(self, "refresh")

    @refresh.setter
    def refresh(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "refresh", value)

    @_builtins.property
    @pulumi.getter(name="responsiblePerson")
    def responsible_person(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Responsible person for DNS record
        """
        return pulumi.get(self, "responsible_person")

    @responsible_person.setter
    def responsible_person(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "responsible_person", value)

    @_builtins.property
    @pulumi.getter
    def retry(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Retry count
        """
        return pulumi.get(self, "retry")

    @retry.setter
    def retry(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "retry", value)

    @_builtins.property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        service info
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        tags set for the resource
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        TTL configuration
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ttl", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        DNS record type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        weight info
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "weight", value)


@pulumi.type_token("ibm:index/dnsRecord:DnsRecord")
class DnsRecord(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 data: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_record_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.float]] = None,
                 expire: Optional[pulumi.Input[_builtins.float]] = None,
                 host: Optional[pulumi.Input[_builtins.str]] = None,
                 minimum_ttl: Optional[pulumi.Input[_builtins.float]] = None,
                 mx_priority: Optional[pulumi.Input[_builtins.float]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 priority: Optional[pulumi.Input[_builtins.float]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 refresh: Optional[pulumi.Input[_builtins.float]] = None,
                 responsible_person: Optional[pulumi.Input[_builtins.str]] = None,
                 retry: Optional[pulumi.Input[_builtins.float]] = None,
                 service: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 ttl: Optional[pulumi.Input[_builtins.float]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 weight: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a DnsRecord resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] data: DNS record data
        :param pulumi.Input[_builtins.float] domain_id: Domain ID of dns record instance
        :param pulumi.Input[_builtins.float] expire: DNS record expiry info
        :param pulumi.Input[_builtins.str] host: Hostname
        :param pulumi.Input[_builtins.float] minimum_ttl: Minimun TTL configuration
        :param pulumi.Input[_builtins.float] mx_priority: Maximum priority
        :param pulumi.Input[_builtins.float] port: port number
        :param pulumi.Input[_builtins.float] priority: priority info
        :param pulumi.Input[_builtins.str] protocol: protocol info
        :param pulumi.Input[_builtins.float] refresh: refresh rate
        :param pulumi.Input[_builtins.str] responsible_person: Responsible person for DNS record
        :param pulumi.Input[_builtins.float] retry: Retry count
        :param pulumi.Input[_builtins.str] service: service info
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: tags set for the resource
        :param pulumi.Input[_builtins.float] ttl: TTL configuration
        :param pulumi.Input[_builtins.str] type: DNS record type
        :param pulumi.Input[_builtins.float] weight: weight info
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DnsRecordArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DnsRecord resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DnsRecordArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DnsRecordArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 data: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_record_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.float]] = None,
                 expire: Optional[pulumi.Input[_builtins.float]] = None,
                 host: Optional[pulumi.Input[_builtins.str]] = None,
                 minimum_ttl: Optional[pulumi.Input[_builtins.float]] = None,
                 mx_priority: Optional[pulumi.Input[_builtins.float]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 priority: Optional[pulumi.Input[_builtins.float]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 refresh: Optional[pulumi.Input[_builtins.float]] = None,
                 responsible_person: Optional[pulumi.Input[_builtins.str]] = None,
                 retry: Optional[pulumi.Input[_builtins.float]] = None,
                 service: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 ttl: Optional[pulumi.Input[_builtins.float]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 weight: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DnsRecordArgs.__new__(DnsRecordArgs)

            if data is None and not opts.urn:
                raise TypeError("Missing required property 'data'")
            __props__.__dict__["data"] = data
            __props__.__dict__["dns_record_id"] = dns_record_id
            if domain_id is None and not opts.urn:
                raise TypeError("Missing required property 'domain_id'")
            __props__.__dict__["domain_id"] = domain_id
            __props__.__dict__["expire"] = expire
            if host is None and not opts.urn:
                raise TypeError("Missing required property 'host'")
            __props__.__dict__["host"] = host
            __props__.__dict__["minimum_ttl"] = minimum_ttl
            __props__.__dict__["mx_priority"] = mx_priority
            __props__.__dict__["port"] = port
            __props__.__dict__["priority"] = priority
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["refresh"] = refresh
            __props__.__dict__["responsible_person"] = responsible_person
            __props__.__dict__["retry"] = retry
            __props__.__dict__["service"] = service
            __props__.__dict__["tags"] = tags
            __props__.__dict__["ttl"] = ttl
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["weight"] = weight
        super(DnsRecord, __self__).__init__(
            'ibm:index/dnsRecord:DnsRecord',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            data: Optional[pulumi.Input[_builtins.str]] = None,
            dns_record_id: Optional[pulumi.Input[_builtins.str]] = None,
            domain_id: Optional[pulumi.Input[_builtins.float]] = None,
            expire: Optional[pulumi.Input[_builtins.float]] = None,
            host: Optional[pulumi.Input[_builtins.str]] = None,
            minimum_ttl: Optional[pulumi.Input[_builtins.float]] = None,
            mx_priority: Optional[pulumi.Input[_builtins.float]] = None,
            port: Optional[pulumi.Input[_builtins.float]] = None,
            priority: Optional[pulumi.Input[_builtins.float]] = None,
            protocol: Optional[pulumi.Input[_builtins.str]] = None,
            refresh: Optional[pulumi.Input[_builtins.float]] = None,
            responsible_person: Optional[pulumi.Input[_builtins.str]] = None,
            retry: Optional[pulumi.Input[_builtins.float]] = None,
            service: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            ttl: Optional[pulumi.Input[_builtins.float]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            weight: Optional[pulumi.Input[_builtins.float]] = None) -> 'DnsRecord':
        """
        Get an existing DnsRecord resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] data: DNS record data
        :param pulumi.Input[_builtins.float] domain_id: Domain ID of dns record instance
        :param pulumi.Input[_builtins.float] expire: DNS record expiry info
        :param pulumi.Input[_builtins.str] host: Hostname
        :param pulumi.Input[_builtins.float] minimum_ttl: Minimun TTL configuration
        :param pulumi.Input[_builtins.float] mx_priority: Maximum priority
        :param pulumi.Input[_builtins.float] port: port number
        :param pulumi.Input[_builtins.float] priority: priority info
        :param pulumi.Input[_builtins.str] protocol: protocol info
        :param pulumi.Input[_builtins.float] refresh: refresh rate
        :param pulumi.Input[_builtins.str] responsible_person: Responsible person for DNS record
        :param pulumi.Input[_builtins.float] retry: Retry count
        :param pulumi.Input[_builtins.str] service: service info
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: tags set for the resource
        :param pulumi.Input[_builtins.float] ttl: TTL configuration
        :param pulumi.Input[_builtins.str] type: DNS record type
        :param pulumi.Input[_builtins.float] weight: weight info
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DnsRecordState.__new__(_DnsRecordState)

        __props__.__dict__["data"] = data
        __props__.__dict__["dns_record_id"] = dns_record_id
        __props__.__dict__["domain_id"] = domain_id
        __props__.__dict__["expire"] = expire
        __props__.__dict__["host"] = host
        __props__.__dict__["minimum_ttl"] = minimum_ttl
        __props__.__dict__["mx_priority"] = mx_priority
        __props__.__dict__["port"] = port
        __props__.__dict__["priority"] = priority
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["refresh"] = refresh
        __props__.__dict__["responsible_person"] = responsible_person
        __props__.__dict__["retry"] = retry
        __props__.__dict__["service"] = service
        __props__.__dict__["tags"] = tags
        __props__.__dict__["ttl"] = ttl
        __props__.__dict__["type"] = type
        __props__.__dict__["weight"] = weight
        return DnsRecord(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def data(self) -> pulumi.Output[_builtins.str]:
        """
        DNS record data
        """
        return pulumi.get(self, "data")

    @_builtins.property
    @pulumi.getter(name="dnsRecordId")
    def dns_record_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "dns_record_id")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Output[_builtins.float]:
        """
        Domain ID of dns record instance
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter
    def expire(self) -> pulumi.Output[_builtins.float]:
        """
        DNS record expiry info
        """
        return pulumi.get(self, "expire")

    @_builtins.property
    @pulumi.getter
    def host(self) -> pulumi.Output[_builtins.str]:
        """
        Hostname
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="minimumTtl")
    def minimum_ttl(self) -> pulumi.Output[_builtins.float]:
        """
        Minimun TTL configuration
        """
        return pulumi.get(self, "minimum_ttl")

    @_builtins.property
    @pulumi.getter(name="mxPriority")
    def mx_priority(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Maximum priority
        """
        return pulumi.get(self, "mx_priority")

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        port number
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        priority info
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        protocol info
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def refresh(self) -> pulumi.Output[_builtins.float]:
        """
        refresh rate
        """
        return pulumi.get(self, "refresh")

    @_builtins.property
    @pulumi.getter(name="responsiblePerson")
    def responsible_person(self) -> pulumi.Output[_builtins.str]:
        """
        Responsible person for DNS record
        """
        return pulumi.get(self, "responsible_person")

    @_builtins.property
    @pulumi.getter
    def retry(self) -> pulumi.Output[_builtins.float]:
        """
        Retry count
        """
        return pulumi.get(self, "retry")

    @_builtins.property
    @pulumi.getter
    def service(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        service info
        """
        return pulumi.get(self, "service")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        tags set for the resource
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        TTL configuration
        """
        return pulumi.get(self, "ttl")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        DNS record type
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        weight info
        """
        return pulumi.get(self, "weight")

