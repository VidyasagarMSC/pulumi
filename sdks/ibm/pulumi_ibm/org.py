# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['OrgArgs', 'Org']

@pulumi.input_type
class OrgArgs:
    def __init__(__self__, *,
                 auditors: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 billing_managers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 managers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 org_id: Optional[pulumi.Input[_builtins.str]] = None,
                 org_quota_definition_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a Org resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] auditors: The IBMID of the users who will have auditor role in this org, ex - user@example.com
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] billing_managers: The IBMID of the users who will have billing manager role in this org, ex - user@example.com
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] managers: The IBMID of the users who will have manager role in this org, ex - user@example.com
        :param pulumi.Input[_builtins.str] name: Org name, for example myorg@domain
        :param pulumi.Input[_builtins.str] org_quota_definition_guid: Org quota guid
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] users: The IBMID of the users who will have user role in this org, ex - user@example.com
        """
        if auditors is not None:
            pulumi.set(__self__, "auditors", auditors)
        if billing_managers is not None:
            pulumi.set(__self__, "billing_managers", billing_managers)
        if managers is not None:
            pulumi.set(__self__, "managers", managers)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if org_quota_definition_guid is not None:
            pulumi.set(__self__, "org_quota_definition_guid", org_quota_definition_guid)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @_builtins.property
    @pulumi.getter
    def auditors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The IBMID of the users who will have auditor role in this org, ex - user@example.com
        """
        return pulumi.get(self, "auditors")

    @auditors.setter
    def auditors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "auditors", value)

    @_builtins.property
    @pulumi.getter(name="billingManagers")
    def billing_managers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The IBMID of the users who will have billing manager role in this org, ex - user@example.com
        """
        return pulumi.get(self, "billing_managers")

    @billing_managers.setter
    def billing_managers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "billing_managers", value)

    @_builtins.property
    @pulumi.getter
    def managers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The IBMID of the users who will have manager role in this org, ex - user@example.com
        """
        return pulumi.get(self, "managers")

    @managers.setter
    def managers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "managers", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Org name, for example myorg@domain
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "org_id", value)

    @_builtins.property
    @pulumi.getter(name="orgQuotaDefinitionGuid")
    def org_quota_definition_guid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Org quota guid
        """
        return pulumi.get(self, "org_quota_definition_guid")

    @org_quota_definition_guid.setter
    def org_quota_definition_guid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "org_quota_definition_guid", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The IBMID of the users who will have user role in this org, ex - user@example.com
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "users", value)


@pulumi.input_type
class _OrgState:
    def __init__(__self__, *,
                 auditors: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 billing_managers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 managers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 org_id: Optional[pulumi.Input[_builtins.str]] = None,
                 org_quota_definition_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering Org resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] auditors: The IBMID of the users who will have auditor role in this org, ex - user@example.com
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] billing_managers: The IBMID of the users who will have billing manager role in this org, ex - user@example.com
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] managers: The IBMID of the users who will have manager role in this org, ex - user@example.com
        :param pulumi.Input[_builtins.str] name: Org name, for example myorg@domain
        :param pulumi.Input[_builtins.str] org_quota_definition_guid: Org quota guid
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] users: The IBMID of the users who will have user role in this org, ex - user@example.com
        """
        if auditors is not None:
            pulumi.set(__self__, "auditors", auditors)
        if billing_managers is not None:
            pulumi.set(__self__, "billing_managers", billing_managers)
        if managers is not None:
            pulumi.set(__self__, "managers", managers)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if org_quota_definition_guid is not None:
            pulumi.set(__self__, "org_quota_definition_guid", org_quota_definition_guid)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @_builtins.property
    @pulumi.getter
    def auditors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The IBMID of the users who will have auditor role in this org, ex - user@example.com
        """
        return pulumi.get(self, "auditors")

    @auditors.setter
    def auditors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "auditors", value)

    @_builtins.property
    @pulumi.getter(name="billingManagers")
    def billing_managers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The IBMID of the users who will have billing manager role in this org, ex - user@example.com
        """
        return pulumi.get(self, "billing_managers")

    @billing_managers.setter
    def billing_managers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "billing_managers", value)

    @_builtins.property
    @pulumi.getter
    def managers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The IBMID of the users who will have manager role in this org, ex - user@example.com
        """
        return pulumi.get(self, "managers")

    @managers.setter
    def managers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "managers", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Org name, for example myorg@domain
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "org_id", value)

    @_builtins.property
    @pulumi.getter(name="orgQuotaDefinitionGuid")
    def org_quota_definition_guid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Org quota guid
        """
        return pulumi.get(self, "org_quota_definition_guid")

    @org_quota_definition_guid.setter
    def org_quota_definition_guid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "org_quota_definition_guid", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The IBMID of the users who will have user role in this org, ex - user@example.com
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "users", value)


@pulumi.type_token("ibm:index/org:Org")
class Org(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auditors: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 billing_managers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 managers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 org_id: Optional[pulumi.Input[_builtins.str]] = None,
                 org_quota_definition_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Create a Org resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] auditors: The IBMID of the users who will have auditor role in this org, ex - user@example.com
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] billing_managers: The IBMID of the users who will have billing manager role in this org, ex - user@example.com
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] managers: The IBMID of the users who will have manager role in this org, ex - user@example.com
        :param pulumi.Input[_builtins.str] name: Org name, for example myorg@domain
        :param pulumi.Input[_builtins.str] org_quota_definition_guid: Org quota guid
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] users: The IBMID of the users who will have user role in this org, ex - user@example.com
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[OrgArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Org resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param OrgArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OrgArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auditors: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 billing_managers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 managers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 org_id: Optional[pulumi.Input[_builtins.str]] = None,
                 org_quota_definition_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OrgArgs.__new__(OrgArgs)

            __props__.__dict__["auditors"] = auditors
            __props__.__dict__["billing_managers"] = billing_managers
            __props__.__dict__["managers"] = managers
            __props__.__dict__["name"] = name
            __props__.__dict__["org_id"] = org_id
            __props__.__dict__["org_quota_definition_guid"] = org_quota_definition_guid
            __props__.__dict__["tags"] = tags
            __props__.__dict__["users"] = users
        super(Org, __self__).__init__(
            'ibm:index/org:Org',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auditors: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            billing_managers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            managers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            org_id: Optional[pulumi.Input[_builtins.str]] = None,
            org_quota_definition_guid: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            users: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'Org':
        """
        Get an existing Org resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] auditors: The IBMID of the users who will have auditor role in this org, ex - user@example.com
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] billing_managers: The IBMID of the users who will have billing manager role in this org, ex - user@example.com
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] managers: The IBMID of the users who will have manager role in this org, ex - user@example.com
        :param pulumi.Input[_builtins.str] name: Org name, for example myorg@domain
        :param pulumi.Input[_builtins.str] org_quota_definition_guid: Org quota guid
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] users: The IBMID of the users who will have user role in this org, ex - user@example.com
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OrgState.__new__(_OrgState)

        __props__.__dict__["auditors"] = auditors
        __props__.__dict__["billing_managers"] = billing_managers
        __props__.__dict__["managers"] = managers
        __props__.__dict__["name"] = name
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["org_quota_definition_guid"] = org_quota_definition_guid
        __props__.__dict__["tags"] = tags
        __props__.__dict__["users"] = users
        return Org(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def auditors(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        The IBMID of the users who will have auditor role in this org, ex - user@example.com
        """
        return pulumi.get(self, "auditors")

    @_builtins.property
    @pulumi.getter(name="billingManagers")
    def billing_managers(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        The IBMID of the users who will have billing manager role in this org, ex - user@example.com
        """
        return pulumi.get(self, "billing_managers")

    @_builtins.property
    @pulumi.getter
    def managers(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        The IBMID of the users who will have manager role in this org, ex - user@example.com
        """
        return pulumi.get(self, "managers")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Org name, for example myorg@domain
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "org_id")

    @_builtins.property
    @pulumi.getter(name="orgQuotaDefinitionGuid")
    def org_quota_definition_guid(self) -> pulumi.Output[_builtins.str]:
        """
        Org quota guid
        """
        return pulumi.get(self, "org_quota_definition_guid")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def users(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        The IBMID of the users who will have user role in this org, ex - user@example.com
        """
        return pulumi.get(self, "users")

