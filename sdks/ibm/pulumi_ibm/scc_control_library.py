# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SccControlLibraryArgs', 'SccControlLibrary']

@pulumi.input_type
class SccControlLibraryArgs:
    def __init__(__self__, *,
                 control_library_description: pulumi.Input[_builtins.str],
                 control_library_name: pulumi.Input[_builtins.str],
                 control_library_type: pulumi.Input[_builtins.str],
                 controls: pulumi.Input[Sequence[pulumi.Input['SccControlLibraryControlArgs']]],
                 instance_id: pulumi.Input[_builtins.str],
                 control_library_version: Optional[pulumi.Input[_builtins.str]] = None,
                 latest: Optional[pulumi.Input[_builtins.bool]] = None,
                 scc_control_library_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a SccControlLibrary resource.
        :param pulumi.Input[_builtins.str] control_library_description: The control library description.
        :param pulumi.Input[_builtins.str] control_library_name: The control library name.
        :param pulumi.Input[_builtins.str] control_library_type: The control library type. This should be set to custom
        :param pulumi.Input[Sequence[pulumi.Input['SccControlLibraryControlArgs']]] controls: The list of controls in a control library.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Security and Compliance Center instance.
        :param pulumi.Input[_builtins.str] control_library_version: The control library version.
        :param pulumi.Input[_builtins.bool] latest: The latest version of the control library.
        """
        pulumi.set(__self__, "control_library_description", control_library_description)
        pulumi.set(__self__, "control_library_name", control_library_name)
        pulumi.set(__self__, "control_library_type", control_library_type)
        pulumi.set(__self__, "controls", controls)
        pulumi.set(__self__, "instance_id", instance_id)
        if control_library_version is not None:
            pulumi.set(__self__, "control_library_version", control_library_version)
        if latest is not None:
            pulumi.set(__self__, "latest", latest)
        if scc_control_library_id is not None:
            pulumi.set(__self__, "scc_control_library_id", scc_control_library_id)

    @_builtins.property
    @pulumi.getter(name="controlLibraryDescription")
    def control_library_description(self) -> pulumi.Input[_builtins.str]:
        """
        The control library description.
        """
        return pulumi.get(self, "control_library_description")

    @control_library_description.setter
    def control_library_description(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "control_library_description", value)

    @_builtins.property
    @pulumi.getter(name="controlLibraryName")
    def control_library_name(self) -> pulumi.Input[_builtins.str]:
        """
        The control library name.
        """
        return pulumi.get(self, "control_library_name")

    @control_library_name.setter
    def control_library_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "control_library_name", value)

    @_builtins.property
    @pulumi.getter(name="controlLibraryType")
    def control_library_type(self) -> pulumi.Input[_builtins.str]:
        """
        The control library type. This should be set to custom
        """
        return pulumi.get(self, "control_library_type")

    @control_library_type.setter
    def control_library_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "control_library_type", value)

    @_builtins.property
    @pulumi.getter
    def controls(self) -> pulumi.Input[Sequence[pulumi.Input['SccControlLibraryControlArgs']]]:
        """
        The list of controls in a control library.
        """
        return pulumi.get(self, "controls")

    @controls.setter
    def controls(self, value: pulumi.Input[Sequence[pulumi.Input['SccControlLibraryControlArgs']]]):
        pulumi.set(self, "controls", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the Security and Compliance Center instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="controlLibraryVersion")
    def control_library_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The control library version.
        """
        return pulumi.get(self, "control_library_version")

    @control_library_version.setter
    def control_library_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "control_library_version", value)

    @_builtins.property
    @pulumi.getter
    def latest(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The latest version of the control library.
        """
        return pulumi.get(self, "latest")

    @latest.setter
    def latest(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "latest", value)

    @_builtins.property
    @pulumi.getter(name="sccControlLibraryId")
    def scc_control_library_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "scc_control_library_id")

    @scc_control_library_id.setter
    def scc_control_library_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scc_control_library_id", value)


@pulumi.input_type
class _SccControlLibraryState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 control_library_description: Optional[pulumi.Input[_builtins.str]] = None,
                 control_library_id: Optional[pulumi.Input[_builtins.str]] = None,
                 control_library_name: Optional[pulumi.Input[_builtins.str]] = None,
                 control_library_type: Optional[pulumi.Input[_builtins.str]] = None,
                 control_library_version: Optional[pulumi.Input[_builtins.str]] = None,
                 control_parents_count: Optional[pulumi.Input[_builtins.float]] = None,
                 controls: Optional[pulumi.Input[Sequence[pulumi.Input['SccControlLibraryControlArgs']]]] = None,
                 controls_count: Optional[pulumi.Input[_builtins.float]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 created_on: Optional[pulumi.Input[_builtins.str]] = None,
                 hierarchy_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 latest: Optional[pulumi.Input[_builtins.bool]] = None,
                 scc_control_library_id: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_by: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_on: Optional[pulumi.Input[_builtins.str]] = None,
                 version_group_label: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SccControlLibrary resources.
        :param pulumi.Input[_builtins.str] account_id: The account ID.
        :param pulumi.Input[_builtins.str] control_library_description: The control library description.
        :param pulumi.Input[_builtins.str] control_library_id: The control library ID.
        :param pulumi.Input[_builtins.str] control_library_name: The control library name.
        :param pulumi.Input[_builtins.str] control_library_type: The control library type. This should be set to custom
        :param pulumi.Input[_builtins.str] control_library_version: The control library version.
        :param pulumi.Input[_builtins.float] control_parents_count: The number of parent controls in the control library.
        :param pulumi.Input[Sequence[pulumi.Input['SccControlLibraryControlArgs']]] controls: The list of controls in a control library.
        :param pulumi.Input[_builtins.float] controls_count: The number of controls.
        :param pulumi.Input[_builtins.str] created_by: The user who created the control library.
        :param pulumi.Input[_builtins.str] created_on: The date when the control library was created.
        :param pulumi.Input[_builtins.bool] hierarchy_enabled: The indication of whether hierarchy is enabled for the control library.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Security and Compliance Center instance.
        :param pulumi.Input[_builtins.bool] latest: The latest version of the control library.
        :param pulumi.Input[_builtins.str] updated_by: The user who updated the control library.
        :param pulumi.Input[_builtins.str] updated_on: The date when the control library was updated.
        :param pulumi.Input[_builtins.str] version_group_label: The ID of the version update of the control library.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if control_library_description is not None:
            pulumi.set(__self__, "control_library_description", control_library_description)
        if control_library_id is not None:
            pulumi.set(__self__, "control_library_id", control_library_id)
        if control_library_name is not None:
            pulumi.set(__self__, "control_library_name", control_library_name)
        if control_library_type is not None:
            pulumi.set(__self__, "control_library_type", control_library_type)
        if control_library_version is not None:
            pulumi.set(__self__, "control_library_version", control_library_version)
        if control_parents_count is not None:
            pulumi.set(__self__, "control_parents_count", control_parents_count)
        if controls is not None:
            pulumi.set(__self__, "controls", controls)
        if controls_count is not None:
            pulumi.set(__self__, "controls_count", controls_count)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if hierarchy_enabled is not None:
            pulumi.set(__self__, "hierarchy_enabled", hierarchy_enabled)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if latest is not None:
            pulumi.set(__self__, "latest", latest)
        if scc_control_library_id is not None:
            pulumi.set(__self__, "scc_control_library_id", scc_control_library_id)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_on is not None:
            pulumi.set(__self__, "updated_on", updated_on)
        if version_group_label is not None:
            pulumi.set(__self__, "version_group_label", version_group_label)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The account ID.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_id", value)

    @_builtins.property
    @pulumi.getter(name="controlLibraryDescription")
    def control_library_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The control library description.
        """
        return pulumi.get(self, "control_library_description")

    @control_library_description.setter
    def control_library_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "control_library_description", value)

    @_builtins.property
    @pulumi.getter(name="controlLibraryId")
    def control_library_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The control library ID.
        """
        return pulumi.get(self, "control_library_id")

    @control_library_id.setter
    def control_library_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "control_library_id", value)

    @_builtins.property
    @pulumi.getter(name="controlLibraryName")
    def control_library_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The control library name.
        """
        return pulumi.get(self, "control_library_name")

    @control_library_name.setter
    def control_library_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "control_library_name", value)

    @_builtins.property
    @pulumi.getter(name="controlLibraryType")
    def control_library_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The control library type. This should be set to custom
        """
        return pulumi.get(self, "control_library_type")

    @control_library_type.setter
    def control_library_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "control_library_type", value)

    @_builtins.property
    @pulumi.getter(name="controlLibraryVersion")
    def control_library_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The control library version.
        """
        return pulumi.get(self, "control_library_version")

    @control_library_version.setter
    def control_library_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "control_library_version", value)

    @_builtins.property
    @pulumi.getter(name="controlParentsCount")
    def control_parents_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The number of parent controls in the control library.
        """
        return pulumi.get(self, "control_parents_count")

    @control_parents_count.setter
    def control_parents_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "control_parents_count", value)

    @_builtins.property
    @pulumi.getter
    def controls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SccControlLibraryControlArgs']]]]:
        """
        The list of controls in a control library.
        """
        return pulumi.get(self, "controls")

    @controls.setter
    def controls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SccControlLibraryControlArgs']]]]):
        pulumi.set(self, "controls", value)

    @_builtins.property
    @pulumi.getter(name="controlsCount")
    def controls_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The number of controls.
        """
        return pulumi.get(self, "controls_count")

    @controls_count.setter
    def controls_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "controls_count", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user who created the control library.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date when the control library was created.
        """
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_on", value)

    @_builtins.property
    @pulumi.getter(name="hierarchyEnabled")
    def hierarchy_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The indication of whether hierarchy is enabled for the control library.
        """
        return pulumi.get(self, "hierarchy_enabled")

    @hierarchy_enabled.setter
    def hierarchy_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "hierarchy_enabled", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the Security and Compliance Center instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def latest(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The latest version of the control library.
        """
        return pulumi.get(self, "latest")

    @latest.setter
    def latest(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "latest", value)

    @_builtins.property
    @pulumi.getter(name="sccControlLibraryId")
    def scc_control_library_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "scc_control_library_id")

    @scc_control_library_id.setter
    def scc_control_library_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scc_control_library_id", value)

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user who updated the control library.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_by", value)

    @_builtins.property
    @pulumi.getter(name="updatedOn")
    def updated_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date when the control library was updated.
        """
        return pulumi.get(self, "updated_on")

    @updated_on.setter
    def updated_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_on", value)

    @_builtins.property
    @pulumi.getter(name="versionGroupLabel")
    def version_group_label(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the version update of the control library.
        """
        return pulumi.get(self, "version_group_label")

    @version_group_label.setter
    def version_group_label(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version_group_label", value)


@pulumi.type_token("ibm:index/sccControlLibrary:SccControlLibrary")
class SccControlLibrary(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 control_library_description: Optional[pulumi.Input[_builtins.str]] = None,
                 control_library_name: Optional[pulumi.Input[_builtins.str]] = None,
                 control_library_type: Optional[pulumi.Input[_builtins.str]] = None,
                 control_library_version: Optional[pulumi.Input[_builtins.str]] = None,
                 controls: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SccControlLibraryControlArgs', 'SccControlLibraryControlArgsDict']]]]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 latest: Optional[pulumi.Input[_builtins.bool]] = None,
                 scc_control_library_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a SccControlLibrary resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] control_library_description: The control library description.
        :param pulumi.Input[_builtins.str] control_library_name: The control library name.
        :param pulumi.Input[_builtins.str] control_library_type: The control library type. This should be set to custom
        :param pulumi.Input[_builtins.str] control_library_version: The control library version.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SccControlLibraryControlArgs', 'SccControlLibraryControlArgsDict']]]] controls: The list of controls in a control library.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Security and Compliance Center instance.
        :param pulumi.Input[_builtins.bool] latest: The latest version of the control library.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SccControlLibraryArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SccControlLibrary resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SccControlLibraryArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SccControlLibraryArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 control_library_description: Optional[pulumi.Input[_builtins.str]] = None,
                 control_library_name: Optional[pulumi.Input[_builtins.str]] = None,
                 control_library_type: Optional[pulumi.Input[_builtins.str]] = None,
                 control_library_version: Optional[pulumi.Input[_builtins.str]] = None,
                 controls: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SccControlLibraryControlArgs', 'SccControlLibraryControlArgsDict']]]]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 latest: Optional[pulumi.Input[_builtins.bool]] = None,
                 scc_control_library_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SccControlLibraryArgs.__new__(SccControlLibraryArgs)

            if control_library_description is None and not opts.urn:
                raise TypeError("Missing required property 'control_library_description'")
            __props__.__dict__["control_library_description"] = control_library_description
            if control_library_name is None and not opts.urn:
                raise TypeError("Missing required property 'control_library_name'")
            __props__.__dict__["control_library_name"] = control_library_name
            if control_library_type is None and not opts.urn:
                raise TypeError("Missing required property 'control_library_type'")
            __props__.__dict__["control_library_type"] = control_library_type
            __props__.__dict__["control_library_version"] = control_library_version
            if controls is None and not opts.urn:
                raise TypeError("Missing required property 'controls'")
            __props__.__dict__["controls"] = controls
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["latest"] = latest
            __props__.__dict__["scc_control_library_id"] = scc_control_library_id
            __props__.__dict__["account_id"] = None
            __props__.__dict__["control_library_id"] = None
            __props__.__dict__["control_parents_count"] = None
            __props__.__dict__["controls_count"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["created_on"] = None
            __props__.__dict__["hierarchy_enabled"] = None
            __props__.__dict__["updated_by"] = None
            __props__.__dict__["updated_on"] = None
            __props__.__dict__["version_group_label"] = None
        super(SccControlLibrary, __self__).__init__(
            'ibm:index/sccControlLibrary:SccControlLibrary',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[_builtins.str]] = None,
            control_library_description: Optional[pulumi.Input[_builtins.str]] = None,
            control_library_id: Optional[pulumi.Input[_builtins.str]] = None,
            control_library_name: Optional[pulumi.Input[_builtins.str]] = None,
            control_library_type: Optional[pulumi.Input[_builtins.str]] = None,
            control_library_version: Optional[pulumi.Input[_builtins.str]] = None,
            control_parents_count: Optional[pulumi.Input[_builtins.float]] = None,
            controls: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SccControlLibraryControlArgs', 'SccControlLibraryControlArgsDict']]]]] = None,
            controls_count: Optional[pulumi.Input[_builtins.float]] = None,
            created_by: Optional[pulumi.Input[_builtins.str]] = None,
            created_on: Optional[pulumi.Input[_builtins.str]] = None,
            hierarchy_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            latest: Optional[pulumi.Input[_builtins.bool]] = None,
            scc_control_library_id: Optional[pulumi.Input[_builtins.str]] = None,
            updated_by: Optional[pulumi.Input[_builtins.str]] = None,
            updated_on: Optional[pulumi.Input[_builtins.str]] = None,
            version_group_label: Optional[pulumi.Input[_builtins.str]] = None) -> 'SccControlLibrary':
        """
        Get an existing SccControlLibrary resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] account_id: The account ID.
        :param pulumi.Input[_builtins.str] control_library_description: The control library description.
        :param pulumi.Input[_builtins.str] control_library_id: The control library ID.
        :param pulumi.Input[_builtins.str] control_library_name: The control library name.
        :param pulumi.Input[_builtins.str] control_library_type: The control library type. This should be set to custom
        :param pulumi.Input[_builtins.str] control_library_version: The control library version.
        :param pulumi.Input[_builtins.float] control_parents_count: The number of parent controls in the control library.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SccControlLibraryControlArgs', 'SccControlLibraryControlArgsDict']]]] controls: The list of controls in a control library.
        :param pulumi.Input[_builtins.float] controls_count: The number of controls.
        :param pulumi.Input[_builtins.str] created_by: The user who created the control library.
        :param pulumi.Input[_builtins.str] created_on: The date when the control library was created.
        :param pulumi.Input[_builtins.bool] hierarchy_enabled: The indication of whether hierarchy is enabled for the control library.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Security and Compliance Center instance.
        :param pulumi.Input[_builtins.bool] latest: The latest version of the control library.
        :param pulumi.Input[_builtins.str] updated_by: The user who updated the control library.
        :param pulumi.Input[_builtins.str] updated_on: The date when the control library was updated.
        :param pulumi.Input[_builtins.str] version_group_label: The ID of the version update of the control library.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SccControlLibraryState.__new__(_SccControlLibraryState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["control_library_description"] = control_library_description
        __props__.__dict__["control_library_id"] = control_library_id
        __props__.__dict__["control_library_name"] = control_library_name
        __props__.__dict__["control_library_type"] = control_library_type
        __props__.__dict__["control_library_version"] = control_library_version
        __props__.__dict__["control_parents_count"] = control_parents_count
        __props__.__dict__["controls"] = controls
        __props__.__dict__["controls_count"] = controls_count
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["created_on"] = created_on
        __props__.__dict__["hierarchy_enabled"] = hierarchy_enabled
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["latest"] = latest
        __props__.__dict__["scc_control_library_id"] = scc_control_library_id
        __props__.__dict__["updated_by"] = updated_by
        __props__.__dict__["updated_on"] = updated_on
        __props__.__dict__["version_group_label"] = version_group_label
        return SccControlLibrary(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[_builtins.str]:
        """
        The account ID.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="controlLibraryDescription")
    def control_library_description(self) -> pulumi.Output[_builtins.str]:
        """
        The control library description.
        """
        return pulumi.get(self, "control_library_description")

    @_builtins.property
    @pulumi.getter(name="controlLibraryId")
    def control_library_id(self) -> pulumi.Output[_builtins.str]:
        """
        The control library ID.
        """
        return pulumi.get(self, "control_library_id")

    @_builtins.property
    @pulumi.getter(name="controlLibraryName")
    def control_library_name(self) -> pulumi.Output[_builtins.str]:
        """
        The control library name.
        """
        return pulumi.get(self, "control_library_name")

    @_builtins.property
    @pulumi.getter(name="controlLibraryType")
    def control_library_type(self) -> pulumi.Output[_builtins.str]:
        """
        The control library type. This should be set to custom
        """
        return pulumi.get(self, "control_library_type")

    @_builtins.property
    @pulumi.getter(name="controlLibraryVersion")
    def control_library_version(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The control library version.
        """
        return pulumi.get(self, "control_library_version")

    @_builtins.property
    @pulumi.getter(name="controlParentsCount")
    def control_parents_count(self) -> pulumi.Output[_builtins.float]:
        """
        The number of parent controls in the control library.
        """
        return pulumi.get(self, "control_parents_count")

    @_builtins.property
    @pulumi.getter
    def controls(self) -> pulumi.Output[Sequence['outputs.SccControlLibraryControl']]:
        """
        The list of controls in a control library.
        """
        return pulumi.get(self, "controls")

    @_builtins.property
    @pulumi.getter(name="controlsCount")
    def controls_count(self) -> pulumi.Output[_builtins.float]:
        """
        The number of controls.
        """
        return pulumi.get(self, "controls_count")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[_builtins.str]:
        """
        The user who created the control library.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> pulumi.Output[_builtins.str]:
        """
        The date when the control library was created.
        """
        return pulumi.get(self, "created_on")

    @_builtins.property
    @pulumi.getter(name="hierarchyEnabled")
    def hierarchy_enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        The indication of whether hierarchy is enabled for the control library.
        """
        return pulumi.get(self, "hierarchy_enabled")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the Security and Compliance Center instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def latest(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        The latest version of the control library.
        """
        return pulumi.get(self, "latest")

    @_builtins.property
    @pulumi.getter(name="sccControlLibraryId")
    def scc_control_library_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "scc_control_library_id")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> pulumi.Output[_builtins.str]:
        """
        The user who updated the control library.
        """
        return pulumi.get(self, "updated_by")

    @_builtins.property
    @pulumi.getter(name="updatedOn")
    def updated_on(self) -> pulumi.Output[_builtins.str]:
        """
        The date when the control library was updated.
        """
        return pulumi.get(self, "updated_on")

    @_builtins.property
    @pulumi.getter(name="versionGroupLabel")
    def version_group_label(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the version update of the control library.
        """
        return pulumi.get(self, "version_group_label")

