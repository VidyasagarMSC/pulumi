# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetEventStreamsMirroringConfigResult',
    'AwaitableGetEventStreamsMirroringConfigResult',
    'get_event_streams_mirroring_config',
    'get_event_streams_mirroring_config_output',
]

@pulumi.output_type
class GetEventStreamsMirroringConfigResult:
    """
    A collection of values returned by getEventStreamsMirroringConfig.
    """
    def __init__(__self__, id=None, mirroring_topic_patterns=None, resource_instance_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if mirroring_topic_patterns and not isinstance(mirroring_topic_patterns, list):
            raise TypeError("Expected argument 'mirroring_topic_patterns' to be a list")
        pulumi.set(__self__, "mirroring_topic_patterns", mirroring_topic_patterns)
        if resource_instance_id and not isinstance(resource_instance_id, str):
            raise TypeError("Expected argument 'resource_instance_id' to be a str")
        pulumi.set(__self__, "resource_instance_id", resource_instance_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="mirroringTopicPatterns")
    def mirroring_topic_patterns(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "mirroring_topic_patterns")

    @_builtins.property
    @pulumi.getter(name="resourceInstanceId")
    def resource_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "resource_instance_id")


class AwaitableGetEventStreamsMirroringConfigResult(GetEventStreamsMirroringConfigResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEventStreamsMirroringConfigResult(
            id=self.id,
            mirroring_topic_patterns=self.mirroring_topic_patterns,
            resource_instance_id=self.resource_instance_id)


def get_event_streams_mirroring_config(id: Optional[_builtins.str] = None,
                                       resource_instance_id: Optional[_builtins.str] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEventStreamsMirroringConfigResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['resourceInstanceId'] = resource_instance_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getEventStreamsMirroringConfig:getEventStreamsMirroringConfig', __args__, opts=opts, typ=GetEventStreamsMirroringConfigResult, package_ref=_utilities.get_package()).value

    return AwaitableGetEventStreamsMirroringConfigResult(
        id=pulumi.get(__ret__, 'id'),
        mirroring_topic_patterns=pulumi.get(__ret__, 'mirroring_topic_patterns'),
        resource_instance_id=pulumi.get(__ret__, 'resource_instance_id'))
def get_event_streams_mirroring_config_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              resource_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEventStreamsMirroringConfigResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['resourceInstanceId'] = resource_instance_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getEventStreamsMirroringConfig:getEventStreamsMirroringConfig', __args__, opts=opts, typ=GetEventStreamsMirroringConfigResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetEventStreamsMirroringConfigResult(
        id=pulumi.get(__response__, 'id'),
        mirroring_topic_patterns=pulumi.get(__response__, 'mirroring_topic_patterns'),
        resource_instance_id=pulumi.get(__response__, 'resource_instance_id')))
