# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['AppRouteArgs', 'AppRoute']

@pulumi.input_type
class AppRouteArgs:
    def __init__(__self__, *,
                 domain_guid: pulumi.Input[_builtins.str],
                 space_guid: pulumi.Input[_builtins.str],
                 app_route_id: Optional[pulumi.Input[_builtins.str]] = None,
                 host: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a AppRoute resource.
        :param pulumi.Input[_builtins.str] domain_guid: The guid of the associated domain
        :param pulumi.Input[_builtins.str] space_guid: The guid of the associated space
        :param pulumi.Input[_builtins.str] host: The host portion of the route. Required for shared-domains.
        :param pulumi.Input[_builtins.str] path: The path for a route as raw text.Paths must be between 2 and 128 characters.Paths must start with a forward slash
               '/'.Paths must not contain a '?'
        :param pulumi.Input[_builtins.float] port: The port of the route. Supported for domains of TCP router groups only.
        """
        pulumi.set(__self__, "domain_guid", domain_guid)
        pulumi.set(__self__, "space_guid", space_guid)
        if app_route_id is not None:
            pulumi.set(__self__, "app_route_id", app_route_id)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="domainGuid")
    def domain_guid(self) -> pulumi.Input[_builtins.str]:
        """
        The guid of the associated domain
        """
        return pulumi.get(self, "domain_guid")

    @domain_guid.setter
    def domain_guid(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain_guid", value)

    @_builtins.property
    @pulumi.getter(name="spaceGuid")
    def space_guid(self) -> pulumi.Input[_builtins.str]:
        """
        The guid of the associated space
        """
        return pulumi.get(self, "space_guid")

    @space_guid.setter
    def space_guid(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "space_guid", value)

    @_builtins.property
    @pulumi.getter(name="appRouteId")
    def app_route_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "app_route_id")

    @app_route_id.setter
    def app_route_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_route_id", value)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The host portion of the route. Required for shared-domains.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The path for a route as raw text.Paths must be between 2 and 128 characters.Paths must start with a forward slash
        '/'.Paths must not contain a '?'
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The port of the route. Supported for domains of TCP router groups only.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _AppRouteState:
    def __init__(__self__, *,
                 app_route_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 host: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 space_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering AppRoute resources.
        :param pulumi.Input[_builtins.str] domain_guid: The guid of the associated domain
        :param pulumi.Input[_builtins.str] host: The host portion of the route. Required for shared-domains.
        :param pulumi.Input[_builtins.str] path: The path for a route as raw text.Paths must be between 2 and 128 characters.Paths must start with a forward slash
               '/'.Paths must not contain a '?'
        :param pulumi.Input[_builtins.float] port: The port of the route. Supported for domains of TCP router groups only.
        :param pulumi.Input[_builtins.str] space_guid: The guid of the associated space
        """
        if app_route_id is not None:
            pulumi.set(__self__, "app_route_id", app_route_id)
        if domain_guid is not None:
            pulumi.set(__self__, "domain_guid", domain_guid)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if space_guid is not None:
            pulumi.set(__self__, "space_guid", space_guid)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="appRouteId")
    def app_route_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "app_route_id")

    @app_route_id.setter
    def app_route_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_route_id", value)

    @_builtins.property
    @pulumi.getter(name="domainGuid")
    def domain_guid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The guid of the associated domain
        """
        return pulumi.get(self, "domain_guid")

    @domain_guid.setter
    def domain_guid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_guid", value)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The host portion of the route. Required for shared-domains.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The path for a route as raw text.Paths must be between 2 and 128 characters.Paths must start with a forward slash
        '/'.Paths must not contain a '?'
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The port of the route. Supported for domains of TCP router groups only.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter(name="spaceGuid")
    def space_guid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The guid of the associated space
        """
        return pulumi.get(self, "space_guid")

    @space_guid.setter
    def space_guid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "space_guid", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("ibm:index/appRoute:AppRoute")
class AppRoute(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_route_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 host: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 space_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Create a AppRoute resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] domain_guid: The guid of the associated domain
        :param pulumi.Input[_builtins.str] host: The host portion of the route. Required for shared-domains.
        :param pulumi.Input[_builtins.str] path: The path for a route as raw text.Paths must be between 2 and 128 characters.Paths must start with a forward slash
               '/'.Paths must not contain a '?'
        :param pulumi.Input[_builtins.float] port: The port of the route. Supported for domains of TCP router groups only.
        :param pulumi.Input[_builtins.str] space_guid: The guid of the associated space
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppRouteArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AppRoute resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AppRouteArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppRouteArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_route_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 host: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 space_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppRouteArgs.__new__(AppRouteArgs)

            __props__.__dict__["app_route_id"] = app_route_id
            if domain_guid is None and not opts.urn:
                raise TypeError("Missing required property 'domain_guid'")
            __props__.__dict__["domain_guid"] = domain_guid
            __props__.__dict__["host"] = host
            __props__.__dict__["path"] = path
            __props__.__dict__["port"] = port
            if space_guid is None and not opts.urn:
                raise TypeError("Missing required property 'space_guid'")
            __props__.__dict__["space_guid"] = space_guid
            __props__.__dict__["tags"] = tags
        super(AppRoute, __self__).__init__(
            'ibm:index/appRoute:AppRoute',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_route_id: Optional[pulumi.Input[_builtins.str]] = None,
            domain_guid: Optional[pulumi.Input[_builtins.str]] = None,
            host: Optional[pulumi.Input[_builtins.str]] = None,
            path: Optional[pulumi.Input[_builtins.str]] = None,
            port: Optional[pulumi.Input[_builtins.float]] = None,
            space_guid: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'AppRoute':
        """
        Get an existing AppRoute resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] domain_guid: The guid of the associated domain
        :param pulumi.Input[_builtins.str] host: The host portion of the route. Required for shared-domains.
        :param pulumi.Input[_builtins.str] path: The path for a route as raw text.Paths must be between 2 and 128 characters.Paths must start with a forward slash
               '/'.Paths must not contain a '?'
        :param pulumi.Input[_builtins.float] port: The port of the route. Supported for domains of TCP router groups only.
        :param pulumi.Input[_builtins.str] space_guid: The guid of the associated space
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppRouteState.__new__(_AppRouteState)

        __props__.__dict__["app_route_id"] = app_route_id
        __props__.__dict__["domain_guid"] = domain_guid
        __props__.__dict__["host"] = host
        __props__.__dict__["path"] = path
        __props__.__dict__["port"] = port
        __props__.__dict__["space_guid"] = space_guid
        __props__.__dict__["tags"] = tags
        return AppRoute(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="appRouteId")
    def app_route_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "app_route_id")

    @_builtins.property
    @pulumi.getter(name="domainGuid")
    def domain_guid(self) -> pulumi.Output[_builtins.str]:
        """
        The guid of the associated domain
        """
        return pulumi.get(self, "domain_guid")

    @_builtins.property
    @pulumi.getter
    def host(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The host portion of the route. Required for shared-domains.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter
    def path(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The path for a route as raw text.Paths must be between 2 and 128 characters.Paths must start with a forward slash
        '/'.Paths must not contain a '?'
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        The port of the route. Supported for domains of TCP router groups only.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="spaceGuid")
    def space_guid(self) -> pulumi.Output[_builtins.str]:
        """
        The guid of the associated space
        """
        return pulumi.get(self, "space_guid")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        return pulumi.get(self, "tags")

