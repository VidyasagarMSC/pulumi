# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIamActionControlTemplateVersionResult',
    'AwaitableGetIamActionControlTemplateVersionResult',
    'get_iam_action_control_template_version',
    'get_iam_action_control_template_version_output',
]

@pulumi.output_type
class GetIamActionControlTemplateVersionResult:
    """
    A collection of values returned by getIamActionControlTemplateVersion.
    """
    def __init__(__self__, account_id=None, action_control_template_id=None, action_controls=None, committed=None, created_at=None, created_by_id=None, description=None, href=None, id=None, last_modified_at=None, last_modified_by_id=None, name=None, state=None, version=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if action_control_template_id and not isinstance(action_control_template_id, str):
            raise TypeError("Expected argument 'action_control_template_id' to be a str")
        pulumi.set(__self__, "action_control_template_id", action_control_template_id)
        if action_controls and not isinstance(action_controls, list):
            raise TypeError("Expected argument 'action_controls' to be a list")
        pulumi.set(__self__, "action_controls", action_controls)
        if committed and not isinstance(committed, bool):
            raise TypeError("Expected argument 'committed' to be a bool")
        pulumi.set(__self__, "committed", committed)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if created_by_id and not isinstance(created_by_id, str):
            raise TypeError("Expected argument 'created_by_id' to be a str")
        pulumi.set(__self__, "created_by_id", created_by_id)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_modified_at and not isinstance(last_modified_at, str):
            raise TypeError("Expected argument 'last_modified_at' to be a str")
        pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by_id and not isinstance(last_modified_by_id, str):
            raise TypeError("Expected argument 'last_modified_by_id' to be a str")
        pulumi.set(__self__, "last_modified_by_id", last_modified_by_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="actionControlTemplateId")
    def action_control_template_id(self) -> _builtins.str:
        return pulumi.get(self, "action_control_template_id")

    @_builtins.property
    @pulumi.getter(name="actionControls")
    def action_controls(self) -> Sequence['outputs.GetIamActionControlTemplateVersionActionControlResult']:
        return pulumi.get(self, "action_controls")

    @_builtins.property
    @pulumi.getter
    def committed(self) -> _builtins.bool:
        return pulumi.get(self, "committed")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdById")
    def created_by_id(self) -> _builtins.str:
        return pulumi.get(self, "created_by_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> _builtins.str:
        return pulumi.get(self, "last_modified_at")

    @_builtins.property
    @pulumi.getter(name="lastModifiedById")
    def last_modified_by_id(self) -> _builtins.str:
        return pulumi.get(self, "last_modified_by_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        return pulumi.get(self, "version")


class AwaitableGetIamActionControlTemplateVersionResult(GetIamActionControlTemplateVersionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamActionControlTemplateVersionResult(
            account_id=self.account_id,
            action_control_template_id=self.action_control_template_id,
            action_controls=self.action_controls,
            committed=self.committed,
            created_at=self.created_at,
            created_by_id=self.created_by_id,
            description=self.description,
            href=self.href,
            id=self.id,
            last_modified_at=self.last_modified_at,
            last_modified_by_id=self.last_modified_by_id,
            name=self.name,
            state=self.state,
            version=self.version)


def get_iam_action_control_template_version(action_control_template_id: Optional[_builtins.str] = None,
                                            id: Optional[_builtins.str] = None,
                                            version: Optional[_builtins.str] = None,
                                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamActionControlTemplateVersionResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['actionControlTemplateId'] = action_control_template_id
    __args__['id'] = id
    __args__['version'] = version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIamActionControlTemplateVersion:getIamActionControlTemplateVersion', __args__, opts=opts, typ=GetIamActionControlTemplateVersionResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIamActionControlTemplateVersionResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        action_control_template_id=pulumi.get(__ret__, 'action_control_template_id'),
        action_controls=pulumi.get(__ret__, 'action_controls'),
        committed=pulumi.get(__ret__, 'committed'),
        created_at=pulumi.get(__ret__, 'created_at'),
        created_by_id=pulumi.get(__ret__, 'created_by_id'),
        description=pulumi.get(__ret__, 'description'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        last_modified_at=pulumi.get(__ret__, 'last_modified_at'),
        last_modified_by_id=pulumi.get(__ret__, 'last_modified_by_id'),
        name=pulumi.get(__ret__, 'name'),
        state=pulumi.get(__ret__, 'state'),
        version=pulumi.get(__ret__, 'version'))
def get_iam_action_control_template_version_output(action_control_template_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                   id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                   version: Optional[pulumi.Input[_builtins.str]] = None,
                                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamActionControlTemplateVersionResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['actionControlTemplateId'] = action_control_template_id
    __args__['id'] = id
    __args__['version'] = version
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIamActionControlTemplateVersion:getIamActionControlTemplateVersion', __args__, opts=opts, typ=GetIamActionControlTemplateVersionResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIamActionControlTemplateVersionResult(
        account_id=pulumi.get(__response__, 'account_id'),
        action_control_template_id=pulumi.get(__response__, 'action_control_template_id'),
        action_controls=pulumi.get(__response__, 'action_controls'),
        committed=pulumi.get(__response__, 'committed'),
        created_at=pulumi.get(__response__, 'created_at'),
        created_by_id=pulumi.get(__response__, 'created_by_id'),
        description=pulumi.get(__response__, 'description'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        last_modified_at=pulumi.get(__response__, 'last_modified_at'),
        last_modified_by_id=pulumi.get(__response__, 'last_modified_by_id'),
        name=pulumi.get(__response__, 'name'),
        state=pulumi.get(__response__, 'state'),
        version=pulumi.get(__response__, 'version')))
