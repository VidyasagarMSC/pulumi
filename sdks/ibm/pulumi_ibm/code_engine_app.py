# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CodeEngineAppArgs', 'CodeEngineApp']

@pulumi.input_type
class CodeEngineAppArgs:
    def __init__(__self__, *,
                 image_reference: pulumi.Input[_builtins.str],
                 project_id: pulumi.Input[_builtins.str],
                 code_engine_app_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_port: Optional[pulumi.Input[_builtins.float]] = None,
                 image_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 managed_domain_mappings: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 probe_liveness: Optional[pulumi.Input['CodeEngineAppProbeLivenessArgs']] = None,
                 probe_readiness: Optional[pulumi.Input['CodeEngineAppProbeReadinessArgs']] = None,
                 run_arguments: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 run_as_user: Optional[pulumi.Input[_builtins.float]] = None,
                 run_commands: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 run_env_variables: Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineAppRunEnvVariableArgs']]]] = None,
                 run_service_account: Optional[pulumi.Input[_builtins.str]] = None,
                 run_volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineAppRunVolumeMountArgs']]]] = None,
                 scale_concurrency: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_concurrency_target: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_cpu_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_down_delay: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_ephemeral_storage_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_initial_instances: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_max_instances: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_memory_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_min_instances: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_request_timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 timeouts: Optional[pulumi.Input['CodeEngineAppTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a CodeEngineApp resource.
        :param pulumi.Input[_builtins.str] image_reference: The name of the image that is used for this app. The format is `REGISTRY/NAMESPACE/REPOSITORY:TAG` where `REGISTRY` and
               `TAG` are optional. If `REGISTRY` is not specified, the default is `docker.io`. If `TAG` is not specified, the default
               is `latest`. If the image reference points to a registry that requires authentication, make sure to also specify the
               property `image_secret`.
        :param pulumi.Input[_builtins.str] project_id: The ID of the project.
        :param pulumi.Input[_builtins.float] image_port: Optional port the app listens on. While the app will always be exposed via port `443` for end users, this port is used
               to connect to the port that is exposed by the container image.
        :param pulumi.Input[_builtins.str] image_secret: Optional name of the image registry access secret. The image registry access secret is used to authenticate with a
               private registry when you download the container image. If the image reference points to a registry that requires
               authentication, the app will be created but cannot reach the ready status, until this property is provided, too.
        :param pulumi.Input[_builtins.str] managed_domain_mappings: Optional value controlling which of the system managed domain mappings will be setup for the application. Valid values
               are 'local_public', 'local_private' and 'local'. Visibility can only be 'local_private' if the project supports
               application private visibility.
        :param pulumi.Input[_builtins.str] name: The name of the app.
        :param pulumi.Input['CodeEngineAppProbeLivenessArgs'] probe_liveness: Response model for probes.
        :param pulumi.Input['CodeEngineAppProbeReadinessArgs'] probe_readiness: Response model for probes.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] run_arguments: Optional arguments for the app that are passed to start the container. If not specified an empty string array will be
               applied and the arguments specified by the container image, will be used to start the container.
        :param pulumi.Input[_builtins.float] run_as_user: Optional user ID (UID) to run the app.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] run_commands: Optional commands for the app that are passed to start the container. If not specified an empty string array will be
               applied and the command specified by the container image, will be used to start the container.
        :param pulumi.Input[Sequence[pulumi.Input['CodeEngineAppRunEnvVariableArgs']]] run_env_variables: References to config maps, secrets or literal values, which are exposed as environment variables in the application.
        :param pulumi.Input[_builtins.str] run_service_account: Optional name of the service account. For built-in service accounts, you can use the shortened names `manager` , `none`,
               `reader`, and `writer`.
        :param pulumi.Input[Sequence[pulumi.Input['CodeEngineAppRunVolumeMountArgs']]] run_volume_mounts: Mounts of config maps or secrets.
        :param pulumi.Input[_builtins.float] scale_concurrency: Optional maximum number of requests that can be processed concurrently per instance.
        :param pulumi.Input[_builtins.float] scale_concurrency_target: Optional threshold of concurrent requests per instance at which one or more additional instances are created. Use this
               value to scale up instances based on concurrent number of requests. This option defaults to the value of the
               `scale_concurrency` option, if not specified.
        :param pulumi.Input[_builtins.str] scale_cpu_limit: Optional number of CPU set for the instance of the app. For valid values see [Supported memory and CPU
               combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo).
        :param pulumi.Input[_builtins.float] scale_down_delay: Optional amount of time in seconds that delays the scale-down behavior for an app instance.
        :param pulumi.Input[_builtins.str] scale_ephemeral_storage_limit: Optional amount of ephemeral storage to set for the instance of the app. The amount specified as ephemeral storage, must
               not exceed the amount of `scale_memory_limit`. The units for specifying ephemeral storage are Megabyte (M) or Gigabyte
               (G), whereas G and M are the shorthand expressions for GB and MB. For more information see [Units of
               measurement](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo#unit-measurements).
        :param pulumi.Input[_builtins.float] scale_initial_instances: Optional initial number of instances that are created upon app creation or app update.
        :param pulumi.Input[_builtins.float] scale_max_instances: Optional maximum number of instances for this app. If you set this value to `0`, this property does not set a upper
               scaling limit. However, the app scaling is still limited by the project quota for instances. See [Limits and quotas for
               Code Engine](https://cloud.ibm.com/docs/codeengine?topic=codeengine-limits).
        :param pulumi.Input[_builtins.str] scale_memory_limit: Optional amount of memory set for the instance of the app. For valid values see [Supported memory and CPU
               combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo). The units for specifying memory are
               Megabyte (M) or Gigabyte (G), whereas G and M are the shorthand expressions for GB and MB. For more information see
               [Units of measurement](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo#unit-measurements).
        :param pulumi.Input[_builtins.float] scale_min_instances: Optional minimum number of instances for this app. If you set this value to `0`, the app will scale down to zero, if not
               hit by any request for some time.
        :param pulumi.Input[_builtins.float] scale_request_timeout: Optional amount of time in seconds that is allowed for a running app to respond to a request.
        """
        pulumi.set(__self__, "image_reference", image_reference)
        pulumi.set(__self__, "project_id", project_id)
        if code_engine_app_id is not None:
            pulumi.set(__self__, "code_engine_app_id", code_engine_app_id)
        if image_port is not None:
            pulumi.set(__self__, "image_port", image_port)
        if image_secret is not None:
            pulumi.set(__self__, "image_secret", image_secret)
        if managed_domain_mappings is not None:
            pulumi.set(__self__, "managed_domain_mappings", managed_domain_mappings)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if probe_liveness is not None:
            pulumi.set(__self__, "probe_liveness", probe_liveness)
        if probe_readiness is not None:
            pulumi.set(__self__, "probe_readiness", probe_readiness)
        if run_arguments is not None:
            pulumi.set(__self__, "run_arguments", run_arguments)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if run_commands is not None:
            pulumi.set(__self__, "run_commands", run_commands)
        if run_env_variables is not None:
            pulumi.set(__self__, "run_env_variables", run_env_variables)
        if run_service_account is not None:
            pulumi.set(__self__, "run_service_account", run_service_account)
        if run_volume_mounts is not None:
            pulumi.set(__self__, "run_volume_mounts", run_volume_mounts)
        if scale_concurrency is not None:
            pulumi.set(__self__, "scale_concurrency", scale_concurrency)
        if scale_concurrency_target is not None:
            pulumi.set(__self__, "scale_concurrency_target", scale_concurrency_target)
        if scale_cpu_limit is not None:
            pulumi.set(__self__, "scale_cpu_limit", scale_cpu_limit)
        if scale_down_delay is not None:
            pulumi.set(__self__, "scale_down_delay", scale_down_delay)
        if scale_ephemeral_storage_limit is not None:
            pulumi.set(__self__, "scale_ephemeral_storage_limit", scale_ephemeral_storage_limit)
        if scale_initial_instances is not None:
            pulumi.set(__self__, "scale_initial_instances", scale_initial_instances)
        if scale_max_instances is not None:
            pulumi.set(__self__, "scale_max_instances", scale_max_instances)
        if scale_memory_limit is not None:
            pulumi.set(__self__, "scale_memory_limit", scale_memory_limit)
        if scale_min_instances is not None:
            pulumi.set(__self__, "scale_min_instances", scale_min_instances)
        if scale_request_timeout is not None:
            pulumi.set(__self__, "scale_request_timeout", scale_request_timeout)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="imageReference")
    def image_reference(self) -> pulumi.Input[_builtins.str]:
        """
        The name of the image that is used for this app. The format is `REGISTRY/NAMESPACE/REPOSITORY:TAG` where `REGISTRY` and
        `TAG` are optional. If `REGISTRY` is not specified, the default is `docker.io`. If `TAG` is not specified, the default
        is `latest`. If the image reference points to a registry that requires authentication, make sure to also specify the
        property `image_secret`.
        """
        return pulumi.get(self, "image_reference")

    @image_reference.setter
    def image_reference(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "image_reference", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the project.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter(name="codeEngineAppId")
    def code_engine_app_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "code_engine_app_id")

    @code_engine_app_id.setter
    def code_engine_app_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "code_engine_app_id", value)

    @_builtins.property
    @pulumi.getter(name="imagePort")
    def image_port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Optional port the app listens on. While the app will always be exposed via port `443` for end users, this port is used
        to connect to the port that is exposed by the container image.
        """
        return pulumi.get(self, "image_port")

    @image_port.setter
    def image_port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "image_port", value)

    @_builtins.property
    @pulumi.getter(name="imageSecret")
    def image_secret(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional name of the image registry access secret. The image registry access secret is used to authenticate with a
        private registry when you download the container image. If the image reference points to a registry that requires
        authentication, the app will be created but cannot reach the ready status, until this property is provided, too.
        """
        return pulumi.get(self, "image_secret")

    @image_secret.setter
    def image_secret(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_secret", value)

    @_builtins.property
    @pulumi.getter(name="managedDomainMappings")
    def managed_domain_mappings(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional value controlling which of the system managed domain mappings will be setup for the application. Valid values
        are 'local_public', 'local_private' and 'local'. Visibility can only be 'local_private' if the project supports
        application private visibility.
        """
        return pulumi.get(self, "managed_domain_mappings")

    @managed_domain_mappings.setter
    def managed_domain_mappings(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "managed_domain_mappings", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the app.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="probeLiveness")
    def probe_liveness(self) -> Optional[pulumi.Input['CodeEngineAppProbeLivenessArgs']]:
        """
        Response model for probes.
        """
        return pulumi.get(self, "probe_liveness")

    @probe_liveness.setter
    def probe_liveness(self, value: Optional[pulumi.Input['CodeEngineAppProbeLivenessArgs']]):
        pulumi.set(self, "probe_liveness", value)

    @_builtins.property
    @pulumi.getter(name="probeReadiness")
    def probe_readiness(self) -> Optional[pulumi.Input['CodeEngineAppProbeReadinessArgs']]:
        """
        Response model for probes.
        """
        return pulumi.get(self, "probe_readiness")

    @probe_readiness.setter
    def probe_readiness(self, value: Optional[pulumi.Input['CodeEngineAppProbeReadinessArgs']]):
        pulumi.set(self, "probe_readiness", value)

    @_builtins.property
    @pulumi.getter(name="runArguments")
    def run_arguments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Optional arguments for the app that are passed to start the container. If not specified an empty string array will be
        applied and the arguments specified by the container image, will be used to start the container.
        """
        return pulumi.get(self, "run_arguments")

    @run_arguments.setter
    def run_arguments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "run_arguments", value)

    @_builtins.property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Optional user ID (UID) to run the app.
        """
        return pulumi.get(self, "run_as_user")

    @run_as_user.setter
    def run_as_user(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "run_as_user", value)

    @_builtins.property
    @pulumi.getter(name="runCommands")
    def run_commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Optional commands for the app that are passed to start the container. If not specified an empty string array will be
        applied and the command specified by the container image, will be used to start the container.
        """
        return pulumi.get(self, "run_commands")

    @run_commands.setter
    def run_commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "run_commands", value)

    @_builtins.property
    @pulumi.getter(name="runEnvVariables")
    def run_env_variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineAppRunEnvVariableArgs']]]]:
        """
        References to config maps, secrets or literal values, which are exposed as environment variables in the application.
        """
        return pulumi.get(self, "run_env_variables")

    @run_env_variables.setter
    def run_env_variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineAppRunEnvVariableArgs']]]]):
        pulumi.set(self, "run_env_variables", value)

    @_builtins.property
    @pulumi.getter(name="runServiceAccount")
    def run_service_account(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional name of the service account. For built-in service accounts, you can use the shortened names `manager` , `none`,
        `reader`, and `writer`.
        """
        return pulumi.get(self, "run_service_account")

    @run_service_account.setter
    def run_service_account(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "run_service_account", value)

    @_builtins.property
    @pulumi.getter(name="runVolumeMounts")
    def run_volume_mounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineAppRunVolumeMountArgs']]]]:
        """
        Mounts of config maps or secrets.
        """
        return pulumi.get(self, "run_volume_mounts")

    @run_volume_mounts.setter
    def run_volume_mounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineAppRunVolumeMountArgs']]]]):
        pulumi.set(self, "run_volume_mounts", value)

    @_builtins.property
    @pulumi.getter(name="scaleConcurrency")
    def scale_concurrency(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Optional maximum number of requests that can be processed concurrently per instance.
        """
        return pulumi.get(self, "scale_concurrency")

    @scale_concurrency.setter
    def scale_concurrency(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "scale_concurrency", value)

    @_builtins.property
    @pulumi.getter(name="scaleConcurrencyTarget")
    def scale_concurrency_target(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Optional threshold of concurrent requests per instance at which one or more additional instances are created. Use this
        value to scale up instances based on concurrent number of requests. This option defaults to the value of the
        `scale_concurrency` option, if not specified.
        """
        return pulumi.get(self, "scale_concurrency_target")

    @scale_concurrency_target.setter
    def scale_concurrency_target(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "scale_concurrency_target", value)

    @_builtins.property
    @pulumi.getter(name="scaleCpuLimit")
    def scale_cpu_limit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional number of CPU set for the instance of the app. For valid values see [Supported memory and CPU
        combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo).
        """
        return pulumi.get(self, "scale_cpu_limit")

    @scale_cpu_limit.setter
    def scale_cpu_limit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scale_cpu_limit", value)

    @_builtins.property
    @pulumi.getter(name="scaleDownDelay")
    def scale_down_delay(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Optional amount of time in seconds that delays the scale-down behavior for an app instance.
        """
        return pulumi.get(self, "scale_down_delay")

    @scale_down_delay.setter
    def scale_down_delay(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "scale_down_delay", value)

    @_builtins.property
    @pulumi.getter(name="scaleEphemeralStorageLimit")
    def scale_ephemeral_storage_limit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional amount of ephemeral storage to set for the instance of the app. The amount specified as ephemeral storage, must
        not exceed the amount of `scale_memory_limit`. The units for specifying ephemeral storage are Megabyte (M) or Gigabyte
        (G), whereas G and M are the shorthand expressions for GB and MB. For more information see [Units of
        measurement](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo#unit-measurements).
        """
        return pulumi.get(self, "scale_ephemeral_storage_limit")

    @scale_ephemeral_storage_limit.setter
    def scale_ephemeral_storage_limit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scale_ephemeral_storage_limit", value)

    @_builtins.property
    @pulumi.getter(name="scaleInitialInstances")
    def scale_initial_instances(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Optional initial number of instances that are created upon app creation or app update.
        """
        return pulumi.get(self, "scale_initial_instances")

    @scale_initial_instances.setter
    def scale_initial_instances(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "scale_initial_instances", value)

    @_builtins.property
    @pulumi.getter(name="scaleMaxInstances")
    def scale_max_instances(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Optional maximum number of instances for this app. If you set this value to `0`, this property does not set a upper
        scaling limit. However, the app scaling is still limited by the project quota for instances. See [Limits and quotas for
        Code Engine](https://cloud.ibm.com/docs/codeengine?topic=codeengine-limits).
        """
        return pulumi.get(self, "scale_max_instances")

    @scale_max_instances.setter
    def scale_max_instances(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "scale_max_instances", value)

    @_builtins.property
    @pulumi.getter(name="scaleMemoryLimit")
    def scale_memory_limit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional amount of memory set for the instance of the app. For valid values see [Supported memory and CPU
        combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo). The units for specifying memory are
        Megabyte (M) or Gigabyte (G), whereas G and M are the shorthand expressions for GB and MB. For more information see
        [Units of measurement](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo#unit-measurements).
        """
        return pulumi.get(self, "scale_memory_limit")

    @scale_memory_limit.setter
    def scale_memory_limit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scale_memory_limit", value)

    @_builtins.property
    @pulumi.getter(name="scaleMinInstances")
    def scale_min_instances(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Optional minimum number of instances for this app. If you set this value to `0`, the app will scale down to zero, if not
        hit by any request for some time.
        """
        return pulumi.get(self, "scale_min_instances")

    @scale_min_instances.setter
    def scale_min_instances(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "scale_min_instances", value)

    @_builtins.property
    @pulumi.getter(name="scaleRequestTimeout")
    def scale_request_timeout(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Optional amount of time in seconds that is allowed for a running app to respond to a request.
        """
        return pulumi.get(self, "scale_request_timeout")

    @scale_request_timeout.setter
    def scale_request_timeout(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "scale_request_timeout", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['CodeEngineAppTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['CodeEngineAppTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _CodeEngineAppState:
    def __init__(__self__, *,
                 app_id: Optional[pulumi.Input[_builtins.str]] = None,
                 build: Optional[pulumi.Input[_builtins.str]] = None,
                 build_run: Optional[pulumi.Input[_builtins.str]] = None,
                 code_engine_app_id: Optional[pulumi.Input[_builtins.str]] = None,
                 computed_env_variables: Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineAppComputedEnvVariableArgs']]]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_internal: Optional[pulumi.Input[_builtins.str]] = None,
                 entity_tag: Optional[pulumi.Input[_builtins.str]] = None,
                 etag: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 image_port: Optional[pulumi.Input[_builtins.float]] = None,
                 image_reference: Optional[pulumi.Input[_builtins.str]] = None,
                 image_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 managed_domain_mappings: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 probe_liveness: Optional[pulumi.Input['CodeEngineAppProbeLivenessArgs']] = None,
                 probe_readiness: Optional[pulumi.Input['CodeEngineAppProbeReadinessArgs']] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 run_arguments: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 run_as_user: Optional[pulumi.Input[_builtins.float]] = None,
                 run_commands: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 run_env_variables: Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineAppRunEnvVariableArgs']]]] = None,
                 run_service_account: Optional[pulumi.Input[_builtins.str]] = None,
                 run_volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineAppRunVolumeMountArgs']]]] = None,
                 scale_concurrency: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_concurrency_target: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_cpu_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_down_delay: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_ephemeral_storage_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_initial_instances: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_max_instances: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_memory_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_min_instances: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_request_timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 status_details: Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineAppStatusDetailArgs']]]] = None,
                 timeouts: Optional[pulumi.Input['CodeEngineAppTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering CodeEngineApp resources.
        :param pulumi.Input[_builtins.str] app_id: The identifier of the resource.
        :param pulumi.Input[_builtins.str] build: Reference to a build that is associated with the application.
        :param pulumi.Input[_builtins.str] build_run: Reference to a build run that is associated with the application.
        :param pulumi.Input[Sequence[pulumi.Input['CodeEngineAppComputedEnvVariableArgs']]] computed_env_variables: References to config maps, secrets or literal values, which are defined and set by Code Engine and are exposed as
               environment variables in the application.
        :param pulumi.Input[_builtins.str] created_at: The timestamp when the resource was created.
        :param pulumi.Input[_builtins.str] endpoint: Optional URL to invoke the app. Depending on visibility, this is accessible publicly or in the private network only.
               Empty in case 'managed_domain_mappings' is set to 'local'.
        :param pulumi.Input[_builtins.str] endpoint_internal: The URL to the app that is only visible within the project.
        :param pulumi.Input[_builtins.str] entity_tag: The version of the app instance, which is used to achieve optimistic locking.
        :param pulumi.Input[_builtins.str] href: When you provision a new app, a URL is created identifying the location of the instance.
        :param pulumi.Input[_builtins.float] image_port: Optional port the app listens on. While the app will always be exposed via port `443` for end users, this port is used
               to connect to the port that is exposed by the container image.
        :param pulumi.Input[_builtins.str] image_reference: The name of the image that is used for this app. The format is `REGISTRY/NAMESPACE/REPOSITORY:TAG` where `REGISTRY` and
               `TAG` are optional. If `REGISTRY` is not specified, the default is `docker.io`. If `TAG` is not specified, the default
               is `latest`. If the image reference points to a registry that requires authentication, make sure to also specify the
               property `image_secret`.
        :param pulumi.Input[_builtins.str] image_secret: Optional name of the image registry access secret. The image registry access secret is used to authenticate with a
               private registry when you download the container image. If the image reference points to a registry that requires
               authentication, the app will be created but cannot reach the ready status, until this property is provided, too.
        :param pulumi.Input[_builtins.str] managed_domain_mappings: Optional value controlling which of the system managed domain mappings will be setup for the application. Valid values
               are 'local_public', 'local_private' and 'local'. Visibility can only be 'local_private' if the project supports
               application private visibility.
        :param pulumi.Input[_builtins.str] name: The name of the app.
        :param pulumi.Input['CodeEngineAppProbeLivenessArgs'] probe_liveness: Response model for probes.
        :param pulumi.Input['CodeEngineAppProbeReadinessArgs'] probe_readiness: Response model for probes.
        :param pulumi.Input[_builtins.str] project_id: The ID of the project.
        :param pulumi.Input[_builtins.str] region: The region of the project the resource is located in. Possible values: 'au-syd', 'br-sao', 'ca-tor', 'eu-de', 'eu-gb',
               'jp-osa', 'jp-tok', 'us-east', 'us-south'.
        :param pulumi.Input[_builtins.str] resource_type: The type of the app.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] run_arguments: Optional arguments for the app that are passed to start the container. If not specified an empty string array will be
               applied and the arguments specified by the container image, will be used to start the container.
        :param pulumi.Input[_builtins.float] run_as_user: Optional user ID (UID) to run the app.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] run_commands: Optional commands for the app that are passed to start the container. If not specified an empty string array will be
               applied and the command specified by the container image, will be used to start the container.
        :param pulumi.Input[Sequence[pulumi.Input['CodeEngineAppRunEnvVariableArgs']]] run_env_variables: References to config maps, secrets or literal values, which are exposed as environment variables in the application.
        :param pulumi.Input[_builtins.str] run_service_account: Optional name of the service account. For built-in service accounts, you can use the shortened names `manager` , `none`,
               `reader`, and `writer`.
        :param pulumi.Input[Sequence[pulumi.Input['CodeEngineAppRunVolumeMountArgs']]] run_volume_mounts: Mounts of config maps or secrets.
        :param pulumi.Input[_builtins.float] scale_concurrency: Optional maximum number of requests that can be processed concurrently per instance.
        :param pulumi.Input[_builtins.float] scale_concurrency_target: Optional threshold of concurrent requests per instance at which one or more additional instances are created. Use this
               value to scale up instances based on concurrent number of requests. This option defaults to the value of the
               `scale_concurrency` option, if not specified.
        :param pulumi.Input[_builtins.str] scale_cpu_limit: Optional number of CPU set for the instance of the app. For valid values see [Supported memory and CPU
               combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo).
        :param pulumi.Input[_builtins.float] scale_down_delay: Optional amount of time in seconds that delays the scale-down behavior for an app instance.
        :param pulumi.Input[_builtins.str] scale_ephemeral_storage_limit: Optional amount of ephemeral storage to set for the instance of the app. The amount specified as ephemeral storage, must
               not exceed the amount of `scale_memory_limit`. The units for specifying ephemeral storage are Megabyte (M) or Gigabyte
               (G), whereas G and M are the shorthand expressions for GB and MB. For more information see [Units of
               measurement](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo#unit-measurements).
        :param pulumi.Input[_builtins.float] scale_initial_instances: Optional initial number of instances that are created upon app creation or app update.
        :param pulumi.Input[_builtins.float] scale_max_instances: Optional maximum number of instances for this app. If you set this value to `0`, this property does not set a upper
               scaling limit. However, the app scaling is still limited by the project quota for instances. See [Limits and quotas for
               Code Engine](https://cloud.ibm.com/docs/codeengine?topic=codeengine-limits).
        :param pulumi.Input[_builtins.str] scale_memory_limit: Optional amount of memory set for the instance of the app. For valid values see [Supported memory and CPU
               combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo). The units for specifying memory are
               Megabyte (M) or Gigabyte (G), whereas G and M are the shorthand expressions for GB and MB. For more information see
               [Units of measurement](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo#unit-measurements).
        :param pulumi.Input[_builtins.float] scale_min_instances: Optional minimum number of instances for this app. If you set this value to `0`, the app will scale down to zero, if not
               hit by any request for some time.
        :param pulumi.Input[_builtins.float] scale_request_timeout: Optional amount of time in seconds that is allowed for a running app to respond to a request.
        :param pulumi.Input[_builtins.str] status: The current status of the app.
        :param pulumi.Input[Sequence[pulumi.Input['CodeEngineAppStatusDetailArgs']]] status_details: The detailed status of the application.
        """
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if build is not None:
            pulumi.set(__self__, "build", build)
        if build_run is not None:
            pulumi.set(__self__, "build_run", build_run)
        if code_engine_app_id is not None:
            pulumi.set(__self__, "code_engine_app_id", code_engine_app_id)
        if computed_env_variables is not None:
            pulumi.set(__self__, "computed_env_variables", computed_env_variables)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if endpoint_internal is not None:
            pulumi.set(__self__, "endpoint_internal", endpoint_internal)
        if entity_tag is not None:
            pulumi.set(__self__, "entity_tag", entity_tag)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if image_port is not None:
            pulumi.set(__self__, "image_port", image_port)
        if image_reference is not None:
            pulumi.set(__self__, "image_reference", image_reference)
        if image_secret is not None:
            pulumi.set(__self__, "image_secret", image_secret)
        if managed_domain_mappings is not None:
            pulumi.set(__self__, "managed_domain_mappings", managed_domain_mappings)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if probe_liveness is not None:
            pulumi.set(__self__, "probe_liveness", probe_liveness)
        if probe_readiness is not None:
            pulumi.set(__self__, "probe_readiness", probe_readiness)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if run_arguments is not None:
            pulumi.set(__self__, "run_arguments", run_arguments)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if run_commands is not None:
            pulumi.set(__self__, "run_commands", run_commands)
        if run_env_variables is not None:
            pulumi.set(__self__, "run_env_variables", run_env_variables)
        if run_service_account is not None:
            pulumi.set(__self__, "run_service_account", run_service_account)
        if run_volume_mounts is not None:
            pulumi.set(__self__, "run_volume_mounts", run_volume_mounts)
        if scale_concurrency is not None:
            pulumi.set(__self__, "scale_concurrency", scale_concurrency)
        if scale_concurrency_target is not None:
            pulumi.set(__self__, "scale_concurrency_target", scale_concurrency_target)
        if scale_cpu_limit is not None:
            pulumi.set(__self__, "scale_cpu_limit", scale_cpu_limit)
        if scale_down_delay is not None:
            pulumi.set(__self__, "scale_down_delay", scale_down_delay)
        if scale_ephemeral_storage_limit is not None:
            pulumi.set(__self__, "scale_ephemeral_storage_limit", scale_ephemeral_storage_limit)
        if scale_initial_instances is not None:
            pulumi.set(__self__, "scale_initial_instances", scale_initial_instances)
        if scale_max_instances is not None:
            pulumi.set(__self__, "scale_max_instances", scale_max_instances)
        if scale_memory_limit is not None:
            pulumi.set(__self__, "scale_memory_limit", scale_memory_limit)
        if scale_min_instances is not None:
            pulumi.set(__self__, "scale_min_instances", scale_min_instances)
        if scale_request_timeout is not None:
            pulumi.set(__self__, "scale_request_timeout", scale_request_timeout)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_details is not None:
            pulumi.set(__self__, "status_details", status_details)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The identifier of the resource.
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_id", value)

    @_builtins.property
    @pulumi.getter
    def build(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Reference to a build that is associated with the application.
        """
        return pulumi.get(self, "build")

    @build.setter
    def build(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "build", value)

    @_builtins.property
    @pulumi.getter(name="buildRun")
    def build_run(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Reference to a build run that is associated with the application.
        """
        return pulumi.get(self, "build_run")

    @build_run.setter
    def build_run(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "build_run", value)

    @_builtins.property
    @pulumi.getter(name="codeEngineAppId")
    def code_engine_app_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "code_engine_app_id")

    @code_engine_app_id.setter
    def code_engine_app_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "code_engine_app_id", value)

    @_builtins.property
    @pulumi.getter(name="computedEnvVariables")
    def computed_env_variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineAppComputedEnvVariableArgs']]]]:
        """
        References to config maps, secrets or literal values, which are defined and set by Code Engine and are exposed as
        environment variables in the application.
        """
        return pulumi.get(self, "computed_env_variables")

    @computed_env_variables.setter
    def computed_env_variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineAppComputedEnvVariableArgs']]]]):
        pulumi.set(self, "computed_env_variables", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The timestamp when the resource was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional URL to invoke the app. Depending on visibility, this is accessible publicly or in the private network only.
        Empty in case 'managed_domain_mappings' is set to 'local'.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint", value)

    @_builtins.property
    @pulumi.getter(name="endpointInternal")
    def endpoint_internal(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL to the app that is only visible within the project.
        """
        return pulumi.get(self, "endpoint_internal")

    @endpoint_internal.setter
    def endpoint_internal(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_internal", value)

    @_builtins.property
    @pulumi.getter(name="entityTag")
    def entity_tag(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The version of the app instance, which is used to achieve optimistic locking.
        """
        return pulumi.get(self, "entity_tag")

    @entity_tag.setter
    def entity_tag(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entity_tag", value)

    @_builtins.property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "etag", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        When you provision a new app, a URL is created identifying the location of the instance.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="imagePort")
    def image_port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Optional port the app listens on. While the app will always be exposed via port `443` for end users, this port is used
        to connect to the port that is exposed by the container image.
        """
        return pulumi.get(self, "image_port")

    @image_port.setter
    def image_port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "image_port", value)

    @_builtins.property
    @pulumi.getter(name="imageReference")
    def image_reference(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the image that is used for this app. The format is `REGISTRY/NAMESPACE/REPOSITORY:TAG` where `REGISTRY` and
        `TAG` are optional. If `REGISTRY` is not specified, the default is `docker.io`. If `TAG` is not specified, the default
        is `latest`. If the image reference points to a registry that requires authentication, make sure to also specify the
        property `image_secret`.
        """
        return pulumi.get(self, "image_reference")

    @image_reference.setter
    def image_reference(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_reference", value)

    @_builtins.property
    @pulumi.getter(name="imageSecret")
    def image_secret(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional name of the image registry access secret. The image registry access secret is used to authenticate with a
        private registry when you download the container image. If the image reference points to a registry that requires
        authentication, the app will be created but cannot reach the ready status, until this property is provided, too.
        """
        return pulumi.get(self, "image_secret")

    @image_secret.setter
    def image_secret(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_secret", value)

    @_builtins.property
    @pulumi.getter(name="managedDomainMappings")
    def managed_domain_mappings(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional value controlling which of the system managed domain mappings will be setup for the application. Valid values
        are 'local_public', 'local_private' and 'local'. Visibility can only be 'local_private' if the project supports
        application private visibility.
        """
        return pulumi.get(self, "managed_domain_mappings")

    @managed_domain_mappings.setter
    def managed_domain_mappings(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "managed_domain_mappings", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the app.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="probeLiveness")
    def probe_liveness(self) -> Optional[pulumi.Input['CodeEngineAppProbeLivenessArgs']]:
        """
        Response model for probes.
        """
        return pulumi.get(self, "probe_liveness")

    @probe_liveness.setter
    def probe_liveness(self, value: Optional[pulumi.Input['CodeEngineAppProbeLivenessArgs']]):
        pulumi.set(self, "probe_liveness", value)

    @_builtins.property
    @pulumi.getter(name="probeReadiness")
    def probe_readiness(self) -> Optional[pulumi.Input['CodeEngineAppProbeReadinessArgs']]:
        """
        Response model for probes.
        """
        return pulumi.get(self, "probe_readiness")

    @probe_readiness.setter
    def probe_readiness(self, value: Optional[pulumi.Input['CodeEngineAppProbeReadinessArgs']]):
        pulumi.set(self, "probe_readiness", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the project.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the project the resource is located in. Possible values: 'au-syd', 'br-sao', 'ca-tor', 'eu-de', 'eu-gb',
        'jp-osa', 'jp-tok', 'us-east', 'us-south'.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the app.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter(name="runArguments")
    def run_arguments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Optional arguments for the app that are passed to start the container. If not specified an empty string array will be
        applied and the arguments specified by the container image, will be used to start the container.
        """
        return pulumi.get(self, "run_arguments")

    @run_arguments.setter
    def run_arguments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "run_arguments", value)

    @_builtins.property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Optional user ID (UID) to run the app.
        """
        return pulumi.get(self, "run_as_user")

    @run_as_user.setter
    def run_as_user(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "run_as_user", value)

    @_builtins.property
    @pulumi.getter(name="runCommands")
    def run_commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Optional commands for the app that are passed to start the container. If not specified an empty string array will be
        applied and the command specified by the container image, will be used to start the container.
        """
        return pulumi.get(self, "run_commands")

    @run_commands.setter
    def run_commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "run_commands", value)

    @_builtins.property
    @pulumi.getter(name="runEnvVariables")
    def run_env_variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineAppRunEnvVariableArgs']]]]:
        """
        References to config maps, secrets or literal values, which are exposed as environment variables in the application.
        """
        return pulumi.get(self, "run_env_variables")

    @run_env_variables.setter
    def run_env_variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineAppRunEnvVariableArgs']]]]):
        pulumi.set(self, "run_env_variables", value)

    @_builtins.property
    @pulumi.getter(name="runServiceAccount")
    def run_service_account(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional name of the service account. For built-in service accounts, you can use the shortened names `manager` , `none`,
        `reader`, and `writer`.
        """
        return pulumi.get(self, "run_service_account")

    @run_service_account.setter
    def run_service_account(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "run_service_account", value)

    @_builtins.property
    @pulumi.getter(name="runVolumeMounts")
    def run_volume_mounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineAppRunVolumeMountArgs']]]]:
        """
        Mounts of config maps or secrets.
        """
        return pulumi.get(self, "run_volume_mounts")

    @run_volume_mounts.setter
    def run_volume_mounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineAppRunVolumeMountArgs']]]]):
        pulumi.set(self, "run_volume_mounts", value)

    @_builtins.property
    @pulumi.getter(name="scaleConcurrency")
    def scale_concurrency(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Optional maximum number of requests that can be processed concurrently per instance.
        """
        return pulumi.get(self, "scale_concurrency")

    @scale_concurrency.setter
    def scale_concurrency(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "scale_concurrency", value)

    @_builtins.property
    @pulumi.getter(name="scaleConcurrencyTarget")
    def scale_concurrency_target(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Optional threshold of concurrent requests per instance at which one or more additional instances are created. Use this
        value to scale up instances based on concurrent number of requests. This option defaults to the value of the
        `scale_concurrency` option, if not specified.
        """
        return pulumi.get(self, "scale_concurrency_target")

    @scale_concurrency_target.setter
    def scale_concurrency_target(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "scale_concurrency_target", value)

    @_builtins.property
    @pulumi.getter(name="scaleCpuLimit")
    def scale_cpu_limit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional number of CPU set for the instance of the app. For valid values see [Supported memory and CPU
        combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo).
        """
        return pulumi.get(self, "scale_cpu_limit")

    @scale_cpu_limit.setter
    def scale_cpu_limit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scale_cpu_limit", value)

    @_builtins.property
    @pulumi.getter(name="scaleDownDelay")
    def scale_down_delay(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Optional amount of time in seconds that delays the scale-down behavior for an app instance.
        """
        return pulumi.get(self, "scale_down_delay")

    @scale_down_delay.setter
    def scale_down_delay(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "scale_down_delay", value)

    @_builtins.property
    @pulumi.getter(name="scaleEphemeralStorageLimit")
    def scale_ephemeral_storage_limit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional amount of ephemeral storage to set for the instance of the app. The amount specified as ephemeral storage, must
        not exceed the amount of `scale_memory_limit`. The units for specifying ephemeral storage are Megabyte (M) or Gigabyte
        (G), whereas G and M are the shorthand expressions for GB and MB. For more information see [Units of
        measurement](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo#unit-measurements).
        """
        return pulumi.get(self, "scale_ephemeral_storage_limit")

    @scale_ephemeral_storage_limit.setter
    def scale_ephemeral_storage_limit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scale_ephemeral_storage_limit", value)

    @_builtins.property
    @pulumi.getter(name="scaleInitialInstances")
    def scale_initial_instances(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Optional initial number of instances that are created upon app creation or app update.
        """
        return pulumi.get(self, "scale_initial_instances")

    @scale_initial_instances.setter
    def scale_initial_instances(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "scale_initial_instances", value)

    @_builtins.property
    @pulumi.getter(name="scaleMaxInstances")
    def scale_max_instances(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Optional maximum number of instances for this app. If you set this value to `0`, this property does not set a upper
        scaling limit. However, the app scaling is still limited by the project quota for instances. See [Limits and quotas for
        Code Engine](https://cloud.ibm.com/docs/codeengine?topic=codeengine-limits).
        """
        return pulumi.get(self, "scale_max_instances")

    @scale_max_instances.setter
    def scale_max_instances(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "scale_max_instances", value)

    @_builtins.property
    @pulumi.getter(name="scaleMemoryLimit")
    def scale_memory_limit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional amount of memory set for the instance of the app. For valid values see [Supported memory and CPU
        combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo). The units for specifying memory are
        Megabyte (M) or Gigabyte (G), whereas G and M are the shorthand expressions for GB and MB. For more information see
        [Units of measurement](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo#unit-measurements).
        """
        return pulumi.get(self, "scale_memory_limit")

    @scale_memory_limit.setter
    def scale_memory_limit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scale_memory_limit", value)

    @_builtins.property
    @pulumi.getter(name="scaleMinInstances")
    def scale_min_instances(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Optional minimum number of instances for this app. If you set this value to `0`, the app will scale down to zero, if not
        hit by any request for some time.
        """
        return pulumi.get(self, "scale_min_instances")

    @scale_min_instances.setter
    def scale_min_instances(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "scale_min_instances", value)

    @_builtins.property
    @pulumi.getter(name="scaleRequestTimeout")
    def scale_request_timeout(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Optional amount of time in seconds that is allowed for a running app to respond to a request.
        """
        return pulumi.get(self, "scale_request_timeout")

    @scale_request_timeout.setter
    def scale_request_timeout(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "scale_request_timeout", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The current status of the app.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineAppStatusDetailArgs']]]]:
        """
        The detailed status of the application.
        """
        return pulumi.get(self, "status_details")

    @status_details.setter
    def status_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineAppStatusDetailArgs']]]]):
        pulumi.set(self, "status_details", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['CodeEngineAppTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['CodeEngineAppTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/codeEngineApp:CodeEngineApp")
class CodeEngineApp(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 code_engine_app_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_port: Optional[pulumi.Input[_builtins.float]] = None,
                 image_reference: Optional[pulumi.Input[_builtins.str]] = None,
                 image_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 managed_domain_mappings: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 probe_liveness: Optional[pulumi.Input[Union['CodeEngineAppProbeLivenessArgs', 'CodeEngineAppProbeLivenessArgsDict']]] = None,
                 probe_readiness: Optional[pulumi.Input[Union['CodeEngineAppProbeReadinessArgs', 'CodeEngineAppProbeReadinessArgsDict']]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 run_arguments: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 run_as_user: Optional[pulumi.Input[_builtins.float]] = None,
                 run_commands: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 run_env_variables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineAppRunEnvVariableArgs', 'CodeEngineAppRunEnvVariableArgsDict']]]]] = None,
                 run_service_account: Optional[pulumi.Input[_builtins.str]] = None,
                 run_volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineAppRunVolumeMountArgs', 'CodeEngineAppRunVolumeMountArgsDict']]]]] = None,
                 scale_concurrency: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_concurrency_target: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_cpu_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_down_delay: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_ephemeral_storage_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_initial_instances: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_max_instances: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_memory_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_min_instances: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_request_timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 timeouts: Optional[pulumi.Input[Union['CodeEngineAppTimeoutsArgs', 'CodeEngineAppTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a CodeEngineApp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] image_port: Optional port the app listens on. While the app will always be exposed via port `443` for end users, this port is used
               to connect to the port that is exposed by the container image.
        :param pulumi.Input[_builtins.str] image_reference: The name of the image that is used for this app. The format is `REGISTRY/NAMESPACE/REPOSITORY:TAG` where `REGISTRY` and
               `TAG` are optional. If `REGISTRY` is not specified, the default is `docker.io`. If `TAG` is not specified, the default
               is `latest`. If the image reference points to a registry that requires authentication, make sure to also specify the
               property `image_secret`.
        :param pulumi.Input[_builtins.str] image_secret: Optional name of the image registry access secret. The image registry access secret is used to authenticate with a
               private registry when you download the container image. If the image reference points to a registry that requires
               authentication, the app will be created but cannot reach the ready status, until this property is provided, too.
        :param pulumi.Input[_builtins.str] managed_domain_mappings: Optional value controlling which of the system managed domain mappings will be setup for the application. Valid values
               are 'local_public', 'local_private' and 'local'. Visibility can only be 'local_private' if the project supports
               application private visibility.
        :param pulumi.Input[_builtins.str] name: The name of the app.
        :param pulumi.Input[Union['CodeEngineAppProbeLivenessArgs', 'CodeEngineAppProbeLivenessArgsDict']] probe_liveness: Response model for probes.
        :param pulumi.Input[Union['CodeEngineAppProbeReadinessArgs', 'CodeEngineAppProbeReadinessArgsDict']] probe_readiness: Response model for probes.
        :param pulumi.Input[_builtins.str] project_id: The ID of the project.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] run_arguments: Optional arguments for the app that are passed to start the container. If not specified an empty string array will be
               applied and the arguments specified by the container image, will be used to start the container.
        :param pulumi.Input[_builtins.float] run_as_user: Optional user ID (UID) to run the app.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] run_commands: Optional commands for the app that are passed to start the container. If not specified an empty string array will be
               applied and the command specified by the container image, will be used to start the container.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineAppRunEnvVariableArgs', 'CodeEngineAppRunEnvVariableArgsDict']]]] run_env_variables: References to config maps, secrets or literal values, which are exposed as environment variables in the application.
        :param pulumi.Input[_builtins.str] run_service_account: Optional name of the service account. For built-in service accounts, you can use the shortened names `manager` , `none`,
               `reader`, and `writer`.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineAppRunVolumeMountArgs', 'CodeEngineAppRunVolumeMountArgsDict']]]] run_volume_mounts: Mounts of config maps or secrets.
        :param pulumi.Input[_builtins.float] scale_concurrency: Optional maximum number of requests that can be processed concurrently per instance.
        :param pulumi.Input[_builtins.float] scale_concurrency_target: Optional threshold of concurrent requests per instance at which one or more additional instances are created. Use this
               value to scale up instances based on concurrent number of requests. This option defaults to the value of the
               `scale_concurrency` option, if not specified.
        :param pulumi.Input[_builtins.str] scale_cpu_limit: Optional number of CPU set for the instance of the app. For valid values see [Supported memory and CPU
               combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo).
        :param pulumi.Input[_builtins.float] scale_down_delay: Optional amount of time in seconds that delays the scale-down behavior for an app instance.
        :param pulumi.Input[_builtins.str] scale_ephemeral_storage_limit: Optional amount of ephemeral storage to set for the instance of the app. The amount specified as ephemeral storage, must
               not exceed the amount of `scale_memory_limit`. The units for specifying ephemeral storage are Megabyte (M) or Gigabyte
               (G), whereas G and M are the shorthand expressions for GB and MB. For more information see [Units of
               measurement](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo#unit-measurements).
        :param pulumi.Input[_builtins.float] scale_initial_instances: Optional initial number of instances that are created upon app creation or app update.
        :param pulumi.Input[_builtins.float] scale_max_instances: Optional maximum number of instances for this app. If you set this value to `0`, this property does not set a upper
               scaling limit. However, the app scaling is still limited by the project quota for instances. See [Limits and quotas for
               Code Engine](https://cloud.ibm.com/docs/codeengine?topic=codeengine-limits).
        :param pulumi.Input[_builtins.str] scale_memory_limit: Optional amount of memory set for the instance of the app. For valid values see [Supported memory and CPU
               combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo). The units for specifying memory are
               Megabyte (M) or Gigabyte (G), whereas G and M are the shorthand expressions for GB and MB. For more information see
               [Units of measurement](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo#unit-measurements).
        :param pulumi.Input[_builtins.float] scale_min_instances: Optional minimum number of instances for this app. If you set this value to `0`, the app will scale down to zero, if not
               hit by any request for some time.
        :param pulumi.Input[_builtins.float] scale_request_timeout: Optional amount of time in seconds that is allowed for a running app to respond to a request.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CodeEngineAppArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CodeEngineApp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CodeEngineAppArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CodeEngineAppArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 code_engine_app_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_port: Optional[pulumi.Input[_builtins.float]] = None,
                 image_reference: Optional[pulumi.Input[_builtins.str]] = None,
                 image_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 managed_domain_mappings: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 probe_liveness: Optional[pulumi.Input[Union['CodeEngineAppProbeLivenessArgs', 'CodeEngineAppProbeLivenessArgsDict']]] = None,
                 probe_readiness: Optional[pulumi.Input[Union['CodeEngineAppProbeReadinessArgs', 'CodeEngineAppProbeReadinessArgsDict']]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 run_arguments: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 run_as_user: Optional[pulumi.Input[_builtins.float]] = None,
                 run_commands: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 run_env_variables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineAppRunEnvVariableArgs', 'CodeEngineAppRunEnvVariableArgsDict']]]]] = None,
                 run_service_account: Optional[pulumi.Input[_builtins.str]] = None,
                 run_volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineAppRunVolumeMountArgs', 'CodeEngineAppRunVolumeMountArgsDict']]]]] = None,
                 scale_concurrency: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_concurrency_target: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_cpu_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_down_delay: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_ephemeral_storage_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_initial_instances: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_max_instances: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_memory_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_min_instances: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_request_timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 timeouts: Optional[pulumi.Input[Union['CodeEngineAppTimeoutsArgs', 'CodeEngineAppTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CodeEngineAppArgs.__new__(CodeEngineAppArgs)

            __props__.__dict__["code_engine_app_id"] = code_engine_app_id
            __props__.__dict__["image_port"] = image_port
            if image_reference is None and not opts.urn:
                raise TypeError("Missing required property 'image_reference'")
            __props__.__dict__["image_reference"] = image_reference
            __props__.__dict__["image_secret"] = image_secret
            __props__.__dict__["managed_domain_mappings"] = managed_domain_mappings
            __props__.__dict__["name"] = name
            __props__.__dict__["probe_liveness"] = probe_liveness
            __props__.__dict__["probe_readiness"] = probe_readiness
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["run_arguments"] = run_arguments
            __props__.__dict__["run_as_user"] = run_as_user
            __props__.__dict__["run_commands"] = run_commands
            __props__.__dict__["run_env_variables"] = run_env_variables
            __props__.__dict__["run_service_account"] = run_service_account
            __props__.__dict__["run_volume_mounts"] = run_volume_mounts
            __props__.__dict__["scale_concurrency"] = scale_concurrency
            __props__.__dict__["scale_concurrency_target"] = scale_concurrency_target
            __props__.__dict__["scale_cpu_limit"] = scale_cpu_limit
            __props__.__dict__["scale_down_delay"] = scale_down_delay
            __props__.__dict__["scale_ephemeral_storage_limit"] = scale_ephemeral_storage_limit
            __props__.__dict__["scale_initial_instances"] = scale_initial_instances
            __props__.__dict__["scale_max_instances"] = scale_max_instances
            __props__.__dict__["scale_memory_limit"] = scale_memory_limit
            __props__.__dict__["scale_min_instances"] = scale_min_instances
            __props__.__dict__["scale_request_timeout"] = scale_request_timeout
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["app_id"] = None
            __props__.__dict__["build"] = None
            __props__.__dict__["build_run"] = None
            __props__.__dict__["computed_env_variables"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["endpoint"] = None
            __props__.__dict__["endpoint_internal"] = None
            __props__.__dict__["entity_tag"] = None
            __props__.__dict__["etag"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["region"] = None
            __props__.__dict__["resource_type"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["status_details"] = None
        super(CodeEngineApp, __self__).__init__(
            'ibm:index/codeEngineApp:CodeEngineApp',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_id: Optional[pulumi.Input[_builtins.str]] = None,
            build: Optional[pulumi.Input[_builtins.str]] = None,
            build_run: Optional[pulumi.Input[_builtins.str]] = None,
            code_engine_app_id: Optional[pulumi.Input[_builtins.str]] = None,
            computed_env_variables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineAppComputedEnvVariableArgs', 'CodeEngineAppComputedEnvVariableArgsDict']]]]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            endpoint: Optional[pulumi.Input[_builtins.str]] = None,
            endpoint_internal: Optional[pulumi.Input[_builtins.str]] = None,
            entity_tag: Optional[pulumi.Input[_builtins.str]] = None,
            etag: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            image_port: Optional[pulumi.Input[_builtins.float]] = None,
            image_reference: Optional[pulumi.Input[_builtins.str]] = None,
            image_secret: Optional[pulumi.Input[_builtins.str]] = None,
            managed_domain_mappings: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            probe_liveness: Optional[pulumi.Input[Union['CodeEngineAppProbeLivenessArgs', 'CodeEngineAppProbeLivenessArgsDict']]] = None,
            probe_readiness: Optional[pulumi.Input[Union['CodeEngineAppProbeReadinessArgs', 'CodeEngineAppProbeReadinessArgsDict']]] = None,
            project_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            run_arguments: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            run_as_user: Optional[pulumi.Input[_builtins.float]] = None,
            run_commands: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            run_env_variables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineAppRunEnvVariableArgs', 'CodeEngineAppRunEnvVariableArgsDict']]]]] = None,
            run_service_account: Optional[pulumi.Input[_builtins.str]] = None,
            run_volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineAppRunVolumeMountArgs', 'CodeEngineAppRunVolumeMountArgsDict']]]]] = None,
            scale_concurrency: Optional[pulumi.Input[_builtins.float]] = None,
            scale_concurrency_target: Optional[pulumi.Input[_builtins.float]] = None,
            scale_cpu_limit: Optional[pulumi.Input[_builtins.str]] = None,
            scale_down_delay: Optional[pulumi.Input[_builtins.float]] = None,
            scale_ephemeral_storage_limit: Optional[pulumi.Input[_builtins.str]] = None,
            scale_initial_instances: Optional[pulumi.Input[_builtins.float]] = None,
            scale_max_instances: Optional[pulumi.Input[_builtins.float]] = None,
            scale_memory_limit: Optional[pulumi.Input[_builtins.str]] = None,
            scale_min_instances: Optional[pulumi.Input[_builtins.float]] = None,
            scale_request_timeout: Optional[pulumi.Input[_builtins.float]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            status_details: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineAppStatusDetailArgs', 'CodeEngineAppStatusDetailArgsDict']]]]] = None,
            timeouts: Optional[pulumi.Input[Union['CodeEngineAppTimeoutsArgs', 'CodeEngineAppTimeoutsArgsDict']]] = None) -> 'CodeEngineApp':
        """
        Get an existing CodeEngineApp resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] app_id: The identifier of the resource.
        :param pulumi.Input[_builtins.str] build: Reference to a build that is associated with the application.
        :param pulumi.Input[_builtins.str] build_run: Reference to a build run that is associated with the application.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineAppComputedEnvVariableArgs', 'CodeEngineAppComputedEnvVariableArgsDict']]]] computed_env_variables: References to config maps, secrets or literal values, which are defined and set by Code Engine and are exposed as
               environment variables in the application.
        :param pulumi.Input[_builtins.str] created_at: The timestamp when the resource was created.
        :param pulumi.Input[_builtins.str] endpoint: Optional URL to invoke the app. Depending on visibility, this is accessible publicly or in the private network only.
               Empty in case 'managed_domain_mappings' is set to 'local'.
        :param pulumi.Input[_builtins.str] endpoint_internal: The URL to the app that is only visible within the project.
        :param pulumi.Input[_builtins.str] entity_tag: The version of the app instance, which is used to achieve optimistic locking.
        :param pulumi.Input[_builtins.str] href: When you provision a new app, a URL is created identifying the location of the instance.
        :param pulumi.Input[_builtins.float] image_port: Optional port the app listens on. While the app will always be exposed via port `443` for end users, this port is used
               to connect to the port that is exposed by the container image.
        :param pulumi.Input[_builtins.str] image_reference: The name of the image that is used for this app. The format is `REGISTRY/NAMESPACE/REPOSITORY:TAG` where `REGISTRY` and
               `TAG` are optional. If `REGISTRY` is not specified, the default is `docker.io`. If `TAG` is not specified, the default
               is `latest`. If the image reference points to a registry that requires authentication, make sure to also specify the
               property `image_secret`.
        :param pulumi.Input[_builtins.str] image_secret: Optional name of the image registry access secret. The image registry access secret is used to authenticate with a
               private registry when you download the container image. If the image reference points to a registry that requires
               authentication, the app will be created but cannot reach the ready status, until this property is provided, too.
        :param pulumi.Input[_builtins.str] managed_domain_mappings: Optional value controlling which of the system managed domain mappings will be setup for the application. Valid values
               are 'local_public', 'local_private' and 'local'. Visibility can only be 'local_private' if the project supports
               application private visibility.
        :param pulumi.Input[_builtins.str] name: The name of the app.
        :param pulumi.Input[Union['CodeEngineAppProbeLivenessArgs', 'CodeEngineAppProbeLivenessArgsDict']] probe_liveness: Response model for probes.
        :param pulumi.Input[Union['CodeEngineAppProbeReadinessArgs', 'CodeEngineAppProbeReadinessArgsDict']] probe_readiness: Response model for probes.
        :param pulumi.Input[_builtins.str] project_id: The ID of the project.
        :param pulumi.Input[_builtins.str] region: The region of the project the resource is located in. Possible values: 'au-syd', 'br-sao', 'ca-tor', 'eu-de', 'eu-gb',
               'jp-osa', 'jp-tok', 'us-east', 'us-south'.
        :param pulumi.Input[_builtins.str] resource_type: The type of the app.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] run_arguments: Optional arguments for the app that are passed to start the container. If not specified an empty string array will be
               applied and the arguments specified by the container image, will be used to start the container.
        :param pulumi.Input[_builtins.float] run_as_user: Optional user ID (UID) to run the app.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] run_commands: Optional commands for the app that are passed to start the container. If not specified an empty string array will be
               applied and the command specified by the container image, will be used to start the container.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineAppRunEnvVariableArgs', 'CodeEngineAppRunEnvVariableArgsDict']]]] run_env_variables: References to config maps, secrets or literal values, which are exposed as environment variables in the application.
        :param pulumi.Input[_builtins.str] run_service_account: Optional name of the service account. For built-in service accounts, you can use the shortened names `manager` , `none`,
               `reader`, and `writer`.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineAppRunVolumeMountArgs', 'CodeEngineAppRunVolumeMountArgsDict']]]] run_volume_mounts: Mounts of config maps or secrets.
        :param pulumi.Input[_builtins.float] scale_concurrency: Optional maximum number of requests that can be processed concurrently per instance.
        :param pulumi.Input[_builtins.float] scale_concurrency_target: Optional threshold of concurrent requests per instance at which one or more additional instances are created. Use this
               value to scale up instances based on concurrent number of requests. This option defaults to the value of the
               `scale_concurrency` option, if not specified.
        :param pulumi.Input[_builtins.str] scale_cpu_limit: Optional number of CPU set for the instance of the app. For valid values see [Supported memory and CPU
               combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo).
        :param pulumi.Input[_builtins.float] scale_down_delay: Optional amount of time in seconds that delays the scale-down behavior for an app instance.
        :param pulumi.Input[_builtins.str] scale_ephemeral_storage_limit: Optional amount of ephemeral storage to set for the instance of the app. The amount specified as ephemeral storage, must
               not exceed the amount of `scale_memory_limit`. The units for specifying ephemeral storage are Megabyte (M) or Gigabyte
               (G), whereas G and M are the shorthand expressions for GB and MB. For more information see [Units of
               measurement](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo#unit-measurements).
        :param pulumi.Input[_builtins.float] scale_initial_instances: Optional initial number of instances that are created upon app creation or app update.
        :param pulumi.Input[_builtins.float] scale_max_instances: Optional maximum number of instances for this app. If you set this value to `0`, this property does not set a upper
               scaling limit. However, the app scaling is still limited by the project quota for instances. See [Limits and quotas for
               Code Engine](https://cloud.ibm.com/docs/codeengine?topic=codeengine-limits).
        :param pulumi.Input[_builtins.str] scale_memory_limit: Optional amount of memory set for the instance of the app. For valid values see [Supported memory and CPU
               combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo). The units for specifying memory are
               Megabyte (M) or Gigabyte (G), whereas G and M are the shorthand expressions for GB and MB. For more information see
               [Units of measurement](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo#unit-measurements).
        :param pulumi.Input[_builtins.float] scale_min_instances: Optional minimum number of instances for this app. If you set this value to `0`, the app will scale down to zero, if not
               hit by any request for some time.
        :param pulumi.Input[_builtins.float] scale_request_timeout: Optional amount of time in seconds that is allowed for a running app to respond to a request.
        :param pulumi.Input[_builtins.str] status: The current status of the app.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineAppStatusDetailArgs', 'CodeEngineAppStatusDetailArgsDict']]]] status_details: The detailed status of the application.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CodeEngineAppState.__new__(_CodeEngineAppState)

        __props__.__dict__["app_id"] = app_id
        __props__.__dict__["build"] = build
        __props__.__dict__["build_run"] = build_run
        __props__.__dict__["code_engine_app_id"] = code_engine_app_id
        __props__.__dict__["computed_env_variables"] = computed_env_variables
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["endpoint"] = endpoint
        __props__.__dict__["endpoint_internal"] = endpoint_internal
        __props__.__dict__["entity_tag"] = entity_tag
        __props__.__dict__["etag"] = etag
        __props__.__dict__["href"] = href
        __props__.__dict__["image_port"] = image_port
        __props__.__dict__["image_reference"] = image_reference
        __props__.__dict__["image_secret"] = image_secret
        __props__.__dict__["managed_domain_mappings"] = managed_domain_mappings
        __props__.__dict__["name"] = name
        __props__.__dict__["probe_liveness"] = probe_liveness
        __props__.__dict__["probe_readiness"] = probe_readiness
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["run_arguments"] = run_arguments
        __props__.__dict__["run_as_user"] = run_as_user
        __props__.__dict__["run_commands"] = run_commands
        __props__.__dict__["run_env_variables"] = run_env_variables
        __props__.__dict__["run_service_account"] = run_service_account
        __props__.__dict__["run_volume_mounts"] = run_volume_mounts
        __props__.__dict__["scale_concurrency"] = scale_concurrency
        __props__.__dict__["scale_concurrency_target"] = scale_concurrency_target
        __props__.__dict__["scale_cpu_limit"] = scale_cpu_limit
        __props__.__dict__["scale_down_delay"] = scale_down_delay
        __props__.__dict__["scale_ephemeral_storage_limit"] = scale_ephemeral_storage_limit
        __props__.__dict__["scale_initial_instances"] = scale_initial_instances
        __props__.__dict__["scale_max_instances"] = scale_max_instances
        __props__.__dict__["scale_memory_limit"] = scale_memory_limit
        __props__.__dict__["scale_min_instances"] = scale_min_instances
        __props__.__dict__["scale_request_timeout"] = scale_request_timeout
        __props__.__dict__["status"] = status
        __props__.__dict__["status_details"] = status_details
        __props__.__dict__["timeouts"] = timeouts
        return CodeEngineApp(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Output[_builtins.str]:
        """
        The identifier of the resource.
        """
        return pulumi.get(self, "app_id")

    @_builtins.property
    @pulumi.getter
    def build(self) -> pulumi.Output[_builtins.str]:
        """
        Reference to a build that is associated with the application.
        """
        return pulumi.get(self, "build")

    @_builtins.property
    @pulumi.getter(name="buildRun")
    def build_run(self) -> pulumi.Output[_builtins.str]:
        """
        Reference to a build run that is associated with the application.
        """
        return pulumi.get(self, "build_run")

    @_builtins.property
    @pulumi.getter(name="codeEngineAppId")
    def code_engine_app_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "code_engine_app_id")

    @_builtins.property
    @pulumi.getter(name="computedEnvVariables")
    def computed_env_variables(self) -> pulumi.Output[Sequence['outputs.CodeEngineAppComputedEnvVariable']]:
        """
        References to config maps, secrets or literal values, which are defined and set by Code Engine and are exposed as
        environment variables in the application.
        """
        return pulumi.get(self, "computed_env_variables")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The timestamp when the resource was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> pulumi.Output[_builtins.str]:
        """
        Optional URL to invoke the app. Depending on visibility, this is accessible publicly or in the private network only.
        Empty in case 'managed_domain_mappings' is set to 'local'.
        """
        return pulumi.get(self, "endpoint")

    @_builtins.property
    @pulumi.getter(name="endpointInternal")
    def endpoint_internal(self) -> pulumi.Output[_builtins.str]:
        """
        The URL to the app that is only visible within the project.
        """
        return pulumi.get(self, "endpoint_internal")

    @_builtins.property
    @pulumi.getter(name="entityTag")
    def entity_tag(self) -> pulumi.Output[_builtins.str]:
        """
        The version of the app instance, which is used to achieve optimistic locking.
        """
        return pulumi.get(self, "entity_tag")

    @_builtins.property
    @pulumi.getter
    def etag(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "etag")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        When you provision a new app, a URL is created identifying the location of the instance.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="imagePort")
    def image_port(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Optional port the app listens on. While the app will always be exposed via port `443` for end users, this port is used
        to connect to the port that is exposed by the container image.
        """
        return pulumi.get(self, "image_port")

    @_builtins.property
    @pulumi.getter(name="imageReference")
    def image_reference(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the image that is used for this app. The format is `REGISTRY/NAMESPACE/REPOSITORY:TAG` where `REGISTRY` and
        `TAG` are optional. If `REGISTRY` is not specified, the default is `docker.io`. If `TAG` is not specified, the default
        is `latest`. If the image reference points to a registry that requires authentication, make sure to also specify the
        property `image_secret`.
        """
        return pulumi.get(self, "image_reference")

    @_builtins.property
    @pulumi.getter(name="imageSecret")
    def image_secret(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Optional name of the image registry access secret. The image registry access secret is used to authenticate with a
        private registry when you download the container image. If the image reference points to a registry that requires
        authentication, the app will be created but cannot reach the ready status, until this property is provided, too.
        """
        return pulumi.get(self, "image_secret")

    @_builtins.property
    @pulumi.getter(name="managedDomainMappings")
    def managed_domain_mappings(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Optional value controlling which of the system managed domain mappings will be setup for the application. Valid values
        are 'local_public', 'local_private' and 'local'. Visibility can only be 'local_private' if the project supports
        application private visibility.
        """
        return pulumi.get(self, "managed_domain_mappings")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the app.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="probeLiveness")
    def probe_liveness(self) -> pulumi.Output[Optional['outputs.CodeEngineAppProbeLiveness']]:
        """
        Response model for probes.
        """
        return pulumi.get(self, "probe_liveness")

    @_builtins.property
    @pulumi.getter(name="probeReadiness")
    def probe_readiness(self) -> pulumi.Output[Optional['outputs.CodeEngineAppProbeReadiness']]:
        """
        Response model for probes.
        """
        return pulumi.get(self, "probe_readiness")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the project.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region of the project the resource is located in. Possible values: 'au-syd', 'br-sao', 'ca-tor', 'eu-de', 'eu-gb',
        'jp-osa', 'jp-tok', 'us-east', 'us-south'.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of the app.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="runArguments")
    def run_arguments(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Optional arguments for the app that are passed to start the container. If not specified an empty string array will be
        applied and the arguments specified by the container image, will be used to start the container.
        """
        return pulumi.get(self, "run_arguments")

    @_builtins.property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Optional user ID (UID) to run the app.
        """
        return pulumi.get(self, "run_as_user")

    @_builtins.property
    @pulumi.getter(name="runCommands")
    def run_commands(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Optional commands for the app that are passed to start the container. If not specified an empty string array will be
        applied and the command specified by the container image, will be used to start the container.
        """
        return pulumi.get(self, "run_commands")

    @_builtins.property
    @pulumi.getter(name="runEnvVariables")
    def run_env_variables(self) -> pulumi.Output[Optional[Sequence['outputs.CodeEngineAppRunEnvVariable']]]:
        """
        References to config maps, secrets or literal values, which are exposed as environment variables in the application.
        """
        return pulumi.get(self, "run_env_variables")

    @_builtins.property
    @pulumi.getter(name="runServiceAccount")
    def run_service_account(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Optional name of the service account. For built-in service accounts, you can use the shortened names `manager` , `none`,
        `reader`, and `writer`.
        """
        return pulumi.get(self, "run_service_account")

    @_builtins.property
    @pulumi.getter(name="runVolumeMounts")
    def run_volume_mounts(self) -> pulumi.Output[Optional[Sequence['outputs.CodeEngineAppRunVolumeMount']]]:
        """
        Mounts of config maps or secrets.
        """
        return pulumi.get(self, "run_volume_mounts")

    @_builtins.property
    @pulumi.getter(name="scaleConcurrency")
    def scale_concurrency(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Optional maximum number of requests that can be processed concurrently per instance.
        """
        return pulumi.get(self, "scale_concurrency")

    @_builtins.property
    @pulumi.getter(name="scaleConcurrencyTarget")
    def scale_concurrency_target(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Optional threshold of concurrent requests per instance at which one or more additional instances are created. Use this
        value to scale up instances based on concurrent number of requests. This option defaults to the value of the
        `scale_concurrency` option, if not specified.
        """
        return pulumi.get(self, "scale_concurrency_target")

    @_builtins.property
    @pulumi.getter(name="scaleCpuLimit")
    def scale_cpu_limit(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Optional number of CPU set for the instance of the app. For valid values see [Supported memory and CPU
        combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo).
        """
        return pulumi.get(self, "scale_cpu_limit")

    @_builtins.property
    @pulumi.getter(name="scaleDownDelay")
    def scale_down_delay(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Optional amount of time in seconds that delays the scale-down behavior for an app instance.
        """
        return pulumi.get(self, "scale_down_delay")

    @_builtins.property
    @pulumi.getter(name="scaleEphemeralStorageLimit")
    def scale_ephemeral_storage_limit(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Optional amount of ephemeral storage to set for the instance of the app. The amount specified as ephemeral storage, must
        not exceed the amount of `scale_memory_limit`. The units for specifying ephemeral storage are Megabyte (M) or Gigabyte
        (G), whereas G and M are the shorthand expressions for GB and MB. For more information see [Units of
        measurement](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo#unit-measurements).
        """
        return pulumi.get(self, "scale_ephemeral_storage_limit")

    @_builtins.property
    @pulumi.getter(name="scaleInitialInstances")
    def scale_initial_instances(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Optional initial number of instances that are created upon app creation or app update.
        """
        return pulumi.get(self, "scale_initial_instances")

    @_builtins.property
    @pulumi.getter(name="scaleMaxInstances")
    def scale_max_instances(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Optional maximum number of instances for this app. If you set this value to `0`, this property does not set a upper
        scaling limit. However, the app scaling is still limited by the project quota for instances. See [Limits and quotas for
        Code Engine](https://cloud.ibm.com/docs/codeengine?topic=codeengine-limits).
        """
        return pulumi.get(self, "scale_max_instances")

    @_builtins.property
    @pulumi.getter(name="scaleMemoryLimit")
    def scale_memory_limit(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Optional amount of memory set for the instance of the app. For valid values see [Supported memory and CPU
        combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo). The units for specifying memory are
        Megabyte (M) or Gigabyte (G), whereas G and M are the shorthand expressions for GB and MB. For more information see
        [Units of measurement](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo#unit-measurements).
        """
        return pulumi.get(self, "scale_memory_limit")

    @_builtins.property
    @pulumi.getter(name="scaleMinInstances")
    def scale_min_instances(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Optional minimum number of instances for this app. If you set this value to `0`, the app will scale down to zero, if not
        hit by any request for some time.
        """
        return pulumi.get(self, "scale_min_instances")

    @_builtins.property
    @pulumi.getter(name="scaleRequestTimeout")
    def scale_request_timeout(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Optional amount of time in seconds that is allowed for a running app to respond to a request.
        """
        return pulumi.get(self, "scale_request_timeout")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The current status of the app.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> pulumi.Output[Sequence['outputs.CodeEngineAppStatusDetail']]:
        """
        The detailed status of the application.
        """
        return pulumi.get(self, "status_details")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.CodeEngineAppTimeouts']]:
        return pulumi.get(self, "timeouts")

