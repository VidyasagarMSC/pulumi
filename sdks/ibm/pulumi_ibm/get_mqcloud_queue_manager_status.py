# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetMqcloudQueueManagerStatusResult',
    'AwaitableGetMqcloudQueueManagerStatusResult',
    'get_mqcloud_queue_manager_status',
    'get_mqcloud_queue_manager_status_output',
]

@pulumi.output_type
class GetMqcloudQueueManagerStatusResult:
    """
    A collection of values returned by getMqcloudQueueManagerStatus.
    """
    def __init__(__self__, id=None, queue_manager_id=None, service_instance_guid=None, status=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if queue_manager_id and not isinstance(queue_manager_id, str):
            raise TypeError("Expected argument 'queue_manager_id' to be a str")
        pulumi.set(__self__, "queue_manager_id", queue_manager_id)
        if service_instance_guid and not isinstance(service_instance_guid, str):
            raise TypeError("Expected argument 'service_instance_guid' to be a str")
        pulumi.set(__self__, "service_instance_guid", service_instance_guid)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="queueManagerId")
    def queue_manager_id(self) -> _builtins.str:
        return pulumi.get(self, "queue_manager_id")

    @_builtins.property
    @pulumi.getter(name="serviceInstanceGuid")
    def service_instance_guid(self) -> _builtins.str:
        return pulumi.get(self, "service_instance_guid")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")


class AwaitableGetMqcloudQueueManagerStatusResult(GetMqcloudQueueManagerStatusResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMqcloudQueueManagerStatusResult(
            id=self.id,
            queue_manager_id=self.queue_manager_id,
            service_instance_guid=self.service_instance_guid,
            status=self.status)


def get_mqcloud_queue_manager_status(id: Optional[_builtins.str] = None,
                                     queue_manager_id: Optional[_builtins.str] = None,
                                     service_instance_guid: Optional[_builtins.str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMqcloudQueueManagerStatusResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['queueManagerId'] = queue_manager_id
    __args__['serviceInstanceGuid'] = service_instance_guid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getMqcloudQueueManagerStatus:getMqcloudQueueManagerStatus', __args__, opts=opts, typ=GetMqcloudQueueManagerStatusResult, package_ref=_utilities.get_package()).value

    return AwaitableGetMqcloudQueueManagerStatusResult(
        id=pulumi.get(__ret__, 'id'),
        queue_manager_id=pulumi.get(__ret__, 'queue_manager_id'),
        service_instance_guid=pulumi.get(__ret__, 'service_instance_guid'),
        status=pulumi.get(__ret__, 'status'))
def get_mqcloud_queue_manager_status_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            queue_manager_id: Optional[pulumi.Input[_builtins.str]] = None,
                                            service_instance_guid: Optional[pulumi.Input[_builtins.str]] = None,
                                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMqcloudQueueManagerStatusResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['queueManagerId'] = queue_manager_id
    __args__['serviceInstanceGuid'] = service_instance_guid
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getMqcloudQueueManagerStatus:getMqcloudQueueManagerStatus', __args__, opts=opts, typ=GetMqcloudQueueManagerStatusResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetMqcloudQueueManagerStatusResult(
        id=pulumi.get(__response__, 'id'),
        queue_manager_id=pulumi.get(__response__, 'queue_manager_id'),
        service_instance_guid=pulumi.get(__response__, 'service_instance_guid'),
        status=pulumi.get(__response__, 'status')))
