# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BackupRecoveryDownloadFilesFoldersArgs', 'BackupRecoveryDownloadFilesFolders']

@pulumi.input_type
class BackupRecoveryDownloadFilesFoldersArgs:
    def __init__(__self__, *,
                 files_and_folders: pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDownloadFilesFoldersFilesAndFolderArgs']]],
                 object: pulumi.Input['BackupRecoveryDownloadFilesFoldersObjectArgs'],
                 x_ibm_tenant_id: pulumi.Input[_builtins.str],
                 backup_recovery_download_files_folders_id: Optional[pulumi.Input[_builtins.str]] = None,
                 documents: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDownloadFilesFoldersDocumentArgs']]]] = None,
                 glacier_retrieval_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_recovery_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a BackupRecoveryDownloadFilesFolders resource.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDownloadFilesFoldersFilesAndFolderArgs']]] files_and_folders: Specifies the list of files and folders to download.
        :param pulumi.Input['BackupRecoveryDownloadFilesFoldersObjectArgs'] object: Specifies the common snapshot parameters for a protected object.
        :param pulumi.Input[_builtins.str] x_ibm_tenant_id: Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
               be specified.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDownloadFilesFoldersDocumentArgs']]] documents: Specifies the list of documents to download using item ids. Only one of filesAndFolders or documents should be used.
               Currently only files are supported by documents.
        :param pulumi.Input[_builtins.str] glacier_retrieval_type: Specifies the glacier retrieval type when restoring or downloding files or folders from a Glacier-based cloud snapshot.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the recovery task. This field must be set and must be a unique name.
        :param pulumi.Input[_builtins.str] parent_recovery_id: If current recovery is child task triggered through another parent recovery operation, then this field will specify the
               id of the parent recovery.
        """
        pulumi.set(__self__, "files_and_folders", files_and_folders)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "x_ibm_tenant_id", x_ibm_tenant_id)
        if backup_recovery_download_files_folders_id is not None:
            pulumi.set(__self__, "backup_recovery_download_files_folders_id", backup_recovery_download_files_folders_id)
        if documents is not None:
            pulumi.set(__self__, "documents", documents)
        if glacier_retrieval_type is not None:
            pulumi.set(__self__, "glacier_retrieval_type", glacier_retrieval_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent_recovery_id is not None:
            pulumi.set(__self__, "parent_recovery_id", parent_recovery_id)

    @_builtins.property
    @pulumi.getter(name="filesAndFolders")
    def files_and_folders(self) -> pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDownloadFilesFoldersFilesAndFolderArgs']]]:
        """
        Specifies the list of files and folders to download.
        """
        return pulumi.get(self, "files_and_folders")

    @files_and_folders.setter
    def files_and_folders(self, value: pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDownloadFilesFoldersFilesAndFolderArgs']]]):
        pulumi.set(self, "files_and_folders", value)

    @_builtins.property
    @pulumi.getter
    def object(self) -> pulumi.Input['BackupRecoveryDownloadFilesFoldersObjectArgs']:
        """
        Specifies the common snapshot parameters for a protected object.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input['BackupRecoveryDownloadFilesFoldersObjectArgs']):
        pulumi.set(self, "object", value)

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
        be specified.
        """
        return pulumi.get(self, "x_ibm_tenant_id")

    @x_ibm_tenant_id.setter
    def x_ibm_tenant_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "x_ibm_tenant_id", value)

    @_builtins.property
    @pulumi.getter(name="backupRecoveryDownloadFilesFoldersId")
    def backup_recovery_download_files_folders_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "backup_recovery_download_files_folders_id")

    @backup_recovery_download_files_folders_id.setter
    def backup_recovery_download_files_folders_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_recovery_download_files_folders_id", value)

    @_builtins.property
    @pulumi.getter
    def documents(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDownloadFilesFoldersDocumentArgs']]]]:
        """
        Specifies the list of documents to download using item ids. Only one of filesAndFolders or documents should be used.
        Currently only files are supported by documents.
        """
        return pulumi.get(self, "documents")

    @documents.setter
    def documents(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDownloadFilesFoldersDocumentArgs']]]]):
        pulumi.set(self, "documents", value)

    @_builtins.property
    @pulumi.getter(name="glacierRetrievalType")
    def glacier_retrieval_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the glacier retrieval type when restoring or downloding files or folders from a Glacier-based cloud snapshot.
        """
        return pulumi.get(self, "glacier_retrieval_type")

    @glacier_retrieval_type.setter
    def glacier_retrieval_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "glacier_retrieval_type", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the recovery task. This field must be set and must be a unique name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="parentRecoveryId")
    def parent_recovery_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        If current recovery is child task triggered through another parent recovery operation, then this field will specify the
        id of the parent recovery.
        """
        return pulumi.get(self, "parent_recovery_id")

    @parent_recovery_id.setter
    def parent_recovery_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parent_recovery_id", value)


@pulumi.input_type
class _BackupRecoveryDownloadFilesFoldersState:
    def __init__(__self__, *,
                 backup_recovery_download_files_folders_id: Optional[pulumi.Input[_builtins.str]] = None,
                 documents: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDownloadFilesFoldersDocumentArgs']]]] = None,
                 files_and_folders: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDownloadFilesFoldersFilesAndFolderArgs']]]] = None,
                 glacier_retrieval_type: Optional[pulumi.Input[_builtins.str]] = None,
                 is_parent_recovery: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 object: Optional[pulumi.Input['BackupRecoveryDownloadFilesFoldersObjectArgs']] = None,
                 parent_recovery_id: Optional[pulumi.Input[_builtins.str]] = None,
                 recovery_action: Optional[pulumi.Input[_builtins.str]] = None,
                 recovery_can_tear_down: Optional[pulumi.Input[_builtins.bool]] = None,
                 recovery_creation_infos: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDownloadFilesFoldersRecoveryCreationInfoArgs']]]] = None,
                 recovery_end_time_usecs: Optional[pulumi.Input[_builtins.float]] = None,
                 recovery_is_multi_stage_restore: Optional[pulumi.Input[_builtins.bool]] = None,
                 recovery_messages: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 recovery_mssql_params: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDownloadFilesFoldersRecoveryMssqlParamArgs']]]] = None,
                 recovery_name: Optional[pulumi.Input[_builtins.str]] = None,
                 recovery_permissions: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDownloadFilesFoldersRecoveryPermissionArgs']]]] = None,
                 recovery_physical_params: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDownloadFilesFoldersRecoveryPhysicalParamArgs']]]] = None,
                 recovery_progress_task_id: Optional[pulumi.Input[_builtins.str]] = None,
                 recovery_request_initiator_type: Optional[pulumi.Input[_builtins.str]] = None,
                 recovery_retrieve_archive_tasks: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDownloadFilesFoldersRecoveryRetrieveArchiveTaskArgs']]]] = None,
                 recovery_snapshot_environment: Optional[pulumi.Input[_builtins.str]] = None,
                 recovery_start_time_usecs: Optional[pulumi.Input[_builtins.float]] = None,
                 recovery_status: Optional[pulumi.Input[_builtins.str]] = None,
                 recovery_tear_down_message: Optional[pulumi.Input[_builtins.str]] = None,
                 recovery_tear_down_status: Optional[pulumi.Input[_builtins.str]] = None,
                 x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering BackupRecoveryDownloadFilesFolders resources.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDownloadFilesFoldersDocumentArgs']]] documents: Specifies the list of documents to download using item ids. Only one of filesAndFolders or documents should be used.
               Currently only files are supported by documents.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDownloadFilesFoldersFilesAndFolderArgs']]] files_and_folders: Specifies the list of files and folders to download.
        :param pulumi.Input[_builtins.str] glacier_retrieval_type: Specifies the glacier retrieval type when restoring or downloding files or folders from a Glacier-based cloud snapshot.
        :param pulumi.Input[_builtins.bool] is_parent_recovery: Specifies whether the current recovery operation has created child recoveries. This is currently used in SQL recovery
               where multiple child recoveries can be tracked under a common/parent recovery.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the recovery task. This field must be set and must be a unique name.
        :param pulumi.Input['BackupRecoveryDownloadFilesFoldersObjectArgs'] object: Specifies the common snapshot parameters for a protected object.
        :param pulumi.Input[_builtins.str] parent_recovery_id: If current recovery is child task triggered through another parent recovery operation, then this field will specify the
               id of the parent recovery.
        :param pulumi.Input[_builtins.str] recovery_action: Specifies the type of recover action.
        :param pulumi.Input[_builtins.bool] recovery_can_tear_down: Specifies whether it's possible to tear down the objects created by the recovery.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDownloadFilesFoldersRecoveryCreationInfoArgs']]] recovery_creation_infos: Specifies the information about the creation of the protection group or recovery.
        :param pulumi.Input[_builtins.float] recovery_end_time_usecs: Specifies the end time of the Recovery in Unix timestamp epoch in microseconds. This field will be populated only after
               Recovery is finished.
        :param pulumi.Input[_builtins.bool] recovery_is_multi_stage_restore: Specifies whether the current recovery operation is a multi-stage restore operation. This is currently used by VMware
               recoveres for the migration/hot-standby use case.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] recovery_messages: Specifies messages about the recovery.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDownloadFilesFoldersRecoveryMssqlParamArgs']]] recovery_mssql_params: Specifies the recovery options specific to Sql environment.
        :param pulumi.Input[_builtins.str] recovery_name: Specifies the name of the Recovery.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDownloadFilesFoldersRecoveryPermissionArgs']]] recovery_permissions: Specifies the list of tenants that have permissions for this recovery.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDownloadFilesFoldersRecoveryPhysicalParamArgs']]] recovery_physical_params: Specifies the recovery options specific to Physical environment.
        :param pulumi.Input[_builtins.str] recovery_progress_task_id: Progress monitor task id for Recovery.
        :param pulumi.Input[_builtins.str] recovery_request_initiator_type: Specifies the type of request from UI, which is used for services like magneto to determine the priority of requests.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDownloadFilesFoldersRecoveryRetrieveArchiveTaskArgs']]] recovery_retrieve_archive_tasks: Specifies the list of persistent state of a retrieve of an archive task.
        :param pulumi.Input[_builtins.str] recovery_snapshot_environment: Specifies the type of snapshot environment for which the Recovery was performed.
        :param pulumi.Input[_builtins.float] recovery_start_time_usecs: Specifies the start time of the Recovery in Unix timestamp epoch in microseconds.
        :param pulumi.Input[_builtins.str] recovery_status: Status of the Recovery. 'Running' indicates that the Recovery is still running. 'Canceled' indicates that the Recovery
               has been cancelled. 'Canceling' indicates that the Recovery is in the process of being cancelled. 'Failed' indicates
               that the Recovery has failed. 'Succeeded' indicates that the Recovery has finished successfully. 'SucceededWithWarning'
               indicates that the Recovery finished successfully, but there were some warning messages. 'Skipped' indicates that the
               Recovery task was skipped.
        :param pulumi.Input[_builtins.str] recovery_tear_down_message: Specifies the error message about the tear down operation if it fails.
        :param pulumi.Input[_builtins.str] recovery_tear_down_status: Specifies the status of the tear down operation. This is only set when the canTearDown is set to true.
               'DestroyScheduled' indicates that the tear down is ready to schedule. 'Destroying' indicates that the tear down is still
               running. 'Destroyed' indicates that the tear down succeeded. 'DestroyError' indicates that the tear down failed.
        :param pulumi.Input[_builtins.str] x_ibm_tenant_id: Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
               be specified.
        """
        if backup_recovery_download_files_folders_id is not None:
            pulumi.set(__self__, "backup_recovery_download_files_folders_id", backup_recovery_download_files_folders_id)
        if documents is not None:
            pulumi.set(__self__, "documents", documents)
        if files_and_folders is not None:
            pulumi.set(__self__, "files_and_folders", files_and_folders)
        if glacier_retrieval_type is not None:
            pulumi.set(__self__, "glacier_retrieval_type", glacier_retrieval_type)
        if is_parent_recovery is not None:
            pulumi.set(__self__, "is_parent_recovery", is_parent_recovery)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if parent_recovery_id is not None:
            pulumi.set(__self__, "parent_recovery_id", parent_recovery_id)
        if recovery_action is not None:
            pulumi.set(__self__, "recovery_action", recovery_action)
        if recovery_can_tear_down is not None:
            pulumi.set(__self__, "recovery_can_tear_down", recovery_can_tear_down)
        if recovery_creation_infos is not None:
            pulumi.set(__self__, "recovery_creation_infos", recovery_creation_infos)
        if recovery_end_time_usecs is not None:
            pulumi.set(__self__, "recovery_end_time_usecs", recovery_end_time_usecs)
        if recovery_is_multi_stage_restore is not None:
            pulumi.set(__self__, "recovery_is_multi_stage_restore", recovery_is_multi_stage_restore)
        if recovery_messages is not None:
            pulumi.set(__self__, "recovery_messages", recovery_messages)
        if recovery_mssql_params is not None:
            pulumi.set(__self__, "recovery_mssql_params", recovery_mssql_params)
        if recovery_name is not None:
            pulumi.set(__self__, "recovery_name", recovery_name)
        if recovery_permissions is not None:
            pulumi.set(__self__, "recovery_permissions", recovery_permissions)
        if recovery_physical_params is not None:
            pulumi.set(__self__, "recovery_physical_params", recovery_physical_params)
        if recovery_progress_task_id is not None:
            pulumi.set(__self__, "recovery_progress_task_id", recovery_progress_task_id)
        if recovery_request_initiator_type is not None:
            pulumi.set(__self__, "recovery_request_initiator_type", recovery_request_initiator_type)
        if recovery_retrieve_archive_tasks is not None:
            pulumi.set(__self__, "recovery_retrieve_archive_tasks", recovery_retrieve_archive_tasks)
        if recovery_snapshot_environment is not None:
            pulumi.set(__self__, "recovery_snapshot_environment", recovery_snapshot_environment)
        if recovery_start_time_usecs is not None:
            pulumi.set(__self__, "recovery_start_time_usecs", recovery_start_time_usecs)
        if recovery_status is not None:
            pulumi.set(__self__, "recovery_status", recovery_status)
        if recovery_tear_down_message is not None:
            pulumi.set(__self__, "recovery_tear_down_message", recovery_tear_down_message)
        if recovery_tear_down_status is not None:
            pulumi.set(__self__, "recovery_tear_down_status", recovery_tear_down_status)
        if x_ibm_tenant_id is not None:
            pulumi.set(__self__, "x_ibm_tenant_id", x_ibm_tenant_id)

    @_builtins.property
    @pulumi.getter(name="backupRecoveryDownloadFilesFoldersId")
    def backup_recovery_download_files_folders_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "backup_recovery_download_files_folders_id")

    @backup_recovery_download_files_folders_id.setter
    def backup_recovery_download_files_folders_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_recovery_download_files_folders_id", value)

    @_builtins.property
    @pulumi.getter
    def documents(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDownloadFilesFoldersDocumentArgs']]]]:
        """
        Specifies the list of documents to download using item ids. Only one of filesAndFolders or documents should be used.
        Currently only files are supported by documents.
        """
        return pulumi.get(self, "documents")

    @documents.setter
    def documents(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDownloadFilesFoldersDocumentArgs']]]]):
        pulumi.set(self, "documents", value)

    @_builtins.property
    @pulumi.getter(name="filesAndFolders")
    def files_and_folders(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDownloadFilesFoldersFilesAndFolderArgs']]]]:
        """
        Specifies the list of files and folders to download.
        """
        return pulumi.get(self, "files_and_folders")

    @files_and_folders.setter
    def files_and_folders(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDownloadFilesFoldersFilesAndFolderArgs']]]]):
        pulumi.set(self, "files_and_folders", value)

    @_builtins.property
    @pulumi.getter(name="glacierRetrievalType")
    def glacier_retrieval_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the glacier retrieval type when restoring or downloding files or folders from a Glacier-based cloud snapshot.
        """
        return pulumi.get(self, "glacier_retrieval_type")

    @glacier_retrieval_type.setter
    def glacier_retrieval_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "glacier_retrieval_type", value)

    @_builtins.property
    @pulumi.getter(name="isParentRecovery")
    def is_parent_recovery(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the current recovery operation has created child recoveries. This is currently used in SQL recovery
        where multiple child recoveries can be tracked under a common/parent recovery.
        """
        return pulumi.get(self, "is_parent_recovery")

    @is_parent_recovery.setter
    def is_parent_recovery(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_parent_recovery", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the recovery task. This field must be set and must be a unique name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def object(self) -> Optional[pulumi.Input['BackupRecoveryDownloadFilesFoldersObjectArgs']]:
        """
        Specifies the common snapshot parameters for a protected object.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: Optional[pulumi.Input['BackupRecoveryDownloadFilesFoldersObjectArgs']]):
        pulumi.set(self, "object", value)

    @_builtins.property
    @pulumi.getter(name="parentRecoveryId")
    def parent_recovery_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        If current recovery is child task triggered through another parent recovery operation, then this field will specify the
        id of the parent recovery.
        """
        return pulumi.get(self, "parent_recovery_id")

    @parent_recovery_id.setter
    def parent_recovery_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parent_recovery_id", value)

    @_builtins.property
    @pulumi.getter(name="recoveryAction")
    def recovery_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of recover action.
        """
        return pulumi.get(self, "recovery_action")

    @recovery_action.setter
    def recovery_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "recovery_action", value)

    @_builtins.property
    @pulumi.getter(name="recoveryCanTearDown")
    def recovery_can_tear_down(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether it's possible to tear down the objects created by the recovery.
        """
        return pulumi.get(self, "recovery_can_tear_down")

    @recovery_can_tear_down.setter
    def recovery_can_tear_down(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "recovery_can_tear_down", value)

    @_builtins.property
    @pulumi.getter(name="recoveryCreationInfos")
    def recovery_creation_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDownloadFilesFoldersRecoveryCreationInfoArgs']]]]:
        """
        Specifies the information about the creation of the protection group or recovery.
        """
        return pulumi.get(self, "recovery_creation_infos")

    @recovery_creation_infos.setter
    def recovery_creation_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDownloadFilesFoldersRecoveryCreationInfoArgs']]]]):
        pulumi.set(self, "recovery_creation_infos", value)

    @_builtins.property
    @pulumi.getter(name="recoveryEndTimeUsecs")
    def recovery_end_time_usecs(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the end time of the Recovery in Unix timestamp epoch in microseconds. This field will be populated only after
        Recovery is finished.
        """
        return pulumi.get(self, "recovery_end_time_usecs")

    @recovery_end_time_usecs.setter
    def recovery_end_time_usecs(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "recovery_end_time_usecs", value)

    @_builtins.property
    @pulumi.getter(name="recoveryIsMultiStageRestore")
    def recovery_is_multi_stage_restore(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the current recovery operation is a multi-stage restore operation. This is currently used by VMware
        recoveres for the migration/hot-standby use case.
        """
        return pulumi.get(self, "recovery_is_multi_stage_restore")

    @recovery_is_multi_stage_restore.setter
    def recovery_is_multi_stage_restore(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "recovery_is_multi_stage_restore", value)

    @_builtins.property
    @pulumi.getter(name="recoveryMessages")
    def recovery_messages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies messages about the recovery.
        """
        return pulumi.get(self, "recovery_messages")

    @recovery_messages.setter
    def recovery_messages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "recovery_messages", value)

    @_builtins.property
    @pulumi.getter(name="recoveryMssqlParams")
    def recovery_mssql_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDownloadFilesFoldersRecoveryMssqlParamArgs']]]]:
        """
        Specifies the recovery options specific to Sql environment.
        """
        return pulumi.get(self, "recovery_mssql_params")

    @recovery_mssql_params.setter
    def recovery_mssql_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDownloadFilesFoldersRecoveryMssqlParamArgs']]]]):
        pulumi.set(self, "recovery_mssql_params", value)

    @_builtins.property
    @pulumi.getter(name="recoveryName")
    def recovery_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the Recovery.
        """
        return pulumi.get(self, "recovery_name")

    @recovery_name.setter
    def recovery_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "recovery_name", value)

    @_builtins.property
    @pulumi.getter(name="recoveryPermissions")
    def recovery_permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDownloadFilesFoldersRecoveryPermissionArgs']]]]:
        """
        Specifies the list of tenants that have permissions for this recovery.
        """
        return pulumi.get(self, "recovery_permissions")

    @recovery_permissions.setter
    def recovery_permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDownloadFilesFoldersRecoveryPermissionArgs']]]]):
        pulumi.set(self, "recovery_permissions", value)

    @_builtins.property
    @pulumi.getter(name="recoveryPhysicalParams")
    def recovery_physical_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDownloadFilesFoldersRecoveryPhysicalParamArgs']]]]:
        """
        Specifies the recovery options specific to Physical environment.
        """
        return pulumi.get(self, "recovery_physical_params")

    @recovery_physical_params.setter
    def recovery_physical_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDownloadFilesFoldersRecoveryPhysicalParamArgs']]]]):
        pulumi.set(self, "recovery_physical_params", value)

    @_builtins.property
    @pulumi.getter(name="recoveryProgressTaskId")
    def recovery_progress_task_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Progress monitor task id for Recovery.
        """
        return pulumi.get(self, "recovery_progress_task_id")

    @recovery_progress_task_id.setter
    def recovery_progress_task_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "recovery_progress_task_id", value)

    @_builtins.property
    @pulumi.getter(name="recoveryRequestInitiatorType")
    def recovery_request_initiator_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of request from UI, which is used for services like magneto to determine the priority of requests.
        """
        return pulumi.get(self, "recovery_request_initiator_type")

    @recovery_request_initiator_type.setter
    def recovery_request_initiator_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "recovery_request_initiator_type", value)

    @_builtins.property
    @pulumi.getter(name="recoveryRetrieveArchiveTasks")
    def recovery_retrieve_archive_tasks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDownloadFilesFoldersRecoveryRetrieveArchiveTaskArgs']]]]:
        """
        Specifies the list of persistent state of a retrieve of an archive task.
        """
        return pulumi.get(self, "recovery_retrieve_archive_tasks")

    @recovery_retrieve_archive_tasks.setter
    def recovery_retrieve_archive_tasks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDownloadFilesFoldersRecoveryRetrieveArchiveTaskArgs']]]]):
        pulumi.set(self, "recovery_retrieve_archive_tasks", value)

    @_builtins.property
    @pulumi.getter(name="recoverySnapshotEnvironment")
    def recovery_snapshot_environment(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of snapshot environment for which the Recovery was performed.
        """
        return pulumi.get(self, "recovery_snapshot_environment")

    @recovery_snapshot_environment.setter
    def recovery_snapshot_environment(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "recovery_snapshot_environment", value)

    @_builtins.property
    @pulumi.getter(name="recoveryStartTimeUsecs")
    def recovery_start_time_usecs(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the start time of the Recovery in Unix timestamp epoch in microseconds.
        """
        return pulumi.get(self, "recovery_start_time_usecs")

    @recovery_start_time_usecs.setter
    def recovery_start_time_usecs(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "recovery_start_time_usecs", value)

    @_builtins.property
    @pulumi.getter(name="recoveryStatus")
    def recovery_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Status of the Recovery. 'Running' indicates that the Recovery is still running. 'Canceled' indicates that the Recovery
        has been cancelled. 'Canceling' indicates that the Recovery is in the process of being cancelled. 'Failed' indicates
        that the Recovery has failed. 'Succeeded' indicates that the Recovery has finished successfully. 'SucceededWithWarning'
        indicates that the Recovery finished successfully, but there were some warning messages. 'Skipped' indicates that the
        Recovery task was skipped.
        """
        return pulumi.get(self, "recovery_status")

    @recovery_status.setter
    def recovery_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "recovery_status", value)

    @_builtins.property
    @pulumi.getter(name="recoveryTearDownMessage")
    def recovery_tear_down_message(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the error message about the tear down operation if it fails.
        """
        return pulumi.get(self, "recovery_tear_down_message")

    @recovery_tear_down_message.setter
    def recovery_tear_down_message(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "recovery_tear_down_message", value)

    @_builtins.property
    @pulumi.getter(name="recoveryTearDownStatus")
    def recovery_tear_down_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the status of the tear down operation. This is only set when the canTearDown is set to true.
        'DestroyScheduled' indicates that the tear down is ready to schedule. 'Destroying' indicates that the tear down is still
        running. 'Destroyed' indicates that the tear down succeeded. 'DestroyError' indicates that the tear down failed.
        """
        return pulumi.get(self, "recovery_tear_down_status")

    @recovery_tear_down_status.setter
    def recovery_tear_down_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "recovery_tear_down_status", value)

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
        be specified.
        """
        return pulumi.get(self, "x_ibm_tenant_id")

    @x_ibm_tenant_id.setter
    def x_ibm_tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "x_ibm_tenant_id", value)


@pulumi.type_token("ibm:index/backupRecoveryDownloadFilesFolders:BackupRecoveryDownloadFilesFolders")
class BackupRecoveryDownloadFilesFolders(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_recovery_download_files_folders_id: Optional[pulumi.Input[_builtins.str]] = None,
                 documents: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryDownloadFilesFoldersDocumentArgs', 'BackupRecoveryDownloadFilesFoldersDocumentArgsDict']]]]] = None,
                 files_and_folders: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryDownloadFilesFoldersFilesAndFolderArgs', 'BackupRecoveryDownloadFilesFoldersFilesAndFolderArgsDict']]]]] = None,
                 glacier_retrieval_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 object: Optional[pulumi.Input[Union['BackupRecoveryDownloadFilesFoldersObjectArgs', 'BackupRecoveryDownloadFilesFoldersObjectArgsDict']]] = None,
                 parent_recovery_id: Optional[pulumi.Input[_builtins.str]] = None,
                 x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a BackupRecoveryDownloadFilesFolders resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryDownloadFilesFoldersDocumentArgs', 'BackupRecoveryDownloadFilesFoldersDocumentArgsDict']]]] documents: Specifies the list of documents to download using item ids. Only one of filesAndFolders or documents should be used.
               Currently only files are supported by documents.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryDownloadFilesFoldersFilesAndFolderArgs', 'BackupRecoveryDownloadFilesFoldersFilesAndFolderArgsDict']]]] files_and_folders: Specifies the list of files and folders to download.
        :param pulumi.Input[_builtins.str] glacier_retrieval_type: Specifies the glacier retrieval type when restoring or downloding files or folders from a Glacier-based cloud snapshot.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the recovery task. This field must be set and must be a unique name.
        :param pulumi.Input[Union['BackupRecoveryDownloadFilesFoldersObjectArgs', 'BackupRecoveryDownloadFilesFoldersObjectArgsDict']] object: Specifies the common snapshot parameters for a protected object.
        :param pulumi.Input[_builtins.str] parent_recovery_id: If current recovery is child task triggered through another parent recovery operation, then this field will specify the
               id of the parent recovery.
        :param pulumi.Input[_builtins.str] x_ibm_tenant_id: Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
               be specified.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BackupRecoveryDownloadFilesFoldersArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a BackupRecoveryDownloadFilesFolders resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param BackupRecoveryDownloadFilesFoldersArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BackupRecoveryDownloadFilesFoldersArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_recovery_download_files_folders_id: Optional[pulumi.Input[_builtins.str]] = None,
                 documents: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryDownloadFilesFoldersDocumentArgs', 'BackupRecoveryDownloadFilesFoldersDocumentArgsDict']]]]] = None,
                 files_and_folders: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryDownloadFilesFoldersFilesAndFolderArgs', 'BackupRecoveryDownloadFilesFoldersFilesAndFolderArgsDict']]]]] = None,
                 glacier_retrieval_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 object: Optional[pulumi.Input[Union['BackupRecoveryDownloadFilesFoldersObjectArgs', 'BackupRecoveryDownloadFilesFoldersObjectArgsDict']]] = None,
                 parent_recovery_id: Optional[pulumi.Input[_builtins.str]] = None,
                 x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BackupRecoveryDownloadFilesFoldersArgs.__new__(BackupRecoveryDownloadFilesFoldersArgs)

            __props__.__dict__["backup_recovery_download_files_folders_id"] = backup_recovery_download_files_folders_id
            __props__.__dict__["documents"] = documents
            if files_and_folders is None and not opts.urn:
                raise TypeError("Missing required property 'files_and_folders'")
            __props__.__dict__["files_and_folders"] = files_and_folders
            __props__.__dict__["glacier_retrieval_type"] = glacier_retrieval_type
            __props__.__dict__["name"] = name
            if object is None and not opts.urn:
                raise TypeError("Missing required property 'object'")
            __props__.__dict__["object"] = object
            __props__.__dict__["parent_recovery_id"] = parent_recovery_id
            if x_ibm_tenant_id is None and not opts.urn:
                raise TypeError("Missing required property 'x_ibm_tenant_id'")
            __props__.__dict__["x_ibm_tenant_id"] = x_ibm_tenant_id
            __props__.__dict__["is_parent_recovery"] = None
            __props__.__dict__["recovery_action"] = None
            __props__.__dict__["recovery_can_tear_down"] = None
            __props__.__dict__["recovery_creation_infos"] = None
            __props__.__dict__["recovery_end_time_usecs"] = None
            __props__.__dict__["recovery_is_multi_stage_restore"] = None
            __props__.__dict__["recovery_messages"] = None
            __props__.__dict__["recovery_mssql_params"] = None
            __props__.__dict__["recovery_name"] = None
            __props__.__dict__["recovery_permissions"] = None
            __props__.__dict__["recovery_physical_params"] = None
            __props__.__dict__["recovery_progress_task_id"] = None
            __props__.__dict__["recovery_request_initiator_type"] = None
            __props__.__dict__["recovery_retrieve_archive_tasks"] = None
            __props__.__dict__["recovery_snapshot_environment"] = None
            __props__.__dict__["recovery_start_time_usecs"] = None
            __props__.__dict__["recovery_status"] = None
            __props__.__dict__["recovery_tear_down_message"] = None
            __props__.__dict__["recovery_tear_down_status"] = None
        super(BackupRecoveryDownloadFilesFolders, __self__).__init__(
            'ibm:index/backupRecoveryDownloadFilesFolders:BackupRecoveryDownloadFilesFolders',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            backup_recovery_download_files_folders_id: Optional[pulumi.Input[_builtins.str]] = None,
            documents: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryDownloadFilesFoldersDocumentArgs', 'BackupRecoveryDownloadFilesFoldersDocumentArgsDict']]]]] = None,
            files_and_folders: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryDownloadFilesFoldersFilesAndFolderArgs', 'BackupRecoveryDownloadFilesFoldersFilesAndFolderArgsDict']]]]] = None,
            glacier_retrieval_type: Optional[pulumi.Input[_builtins.str]] = None,
            is_parent_recovery: Optional[pulumi.Input[_builtins.bool]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            object: Optional[pulumi.Input[Union['BackupRecoveryDownloadFilesFoldersObjectArgs', 'BackupRecoveryDownloadFilesFoldersObjectArgsDict']]] = None,
            parent_recovery_id: Optional[pulumi.Input[_builtins.str]] = None,
            recovery_action: Optional[pulumi.Input[_builtins.str]] = None,
            recovery_can_tear_down: Optional[pulumi.Input[_builtins.bool]] = None,
            recovery_creation_infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryDownloadFilesFoldersRecoveryCreationInfoArgs', 'BackupRecoveryDownloadFilesFoldersRecoveryCreationInfoArgsDict']]]]] = None,
            recovery_end_time_usecs: Optional[pulumi.Input[_builtins.float]] = None,
            recovery_is_multi_stage_restore: Optional[pulumi.Input[_builtins.bool]] = None,
            recovery_messages: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            recovery_mssql_params: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryDownloadFilesFoldersRecoveryMssqlParamArgs', 'BackupRecoveryDownloadFilesFoldersRecoveryMssqlParamArgsDict']]]]] = None,
            recovery_name: Optional[pulumi.Input[_builtins.str]] = None,
            recovery_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryDownloadFilesFoldersRecoveryPermissionArgs', 'BackupRecoveryDownloadFilesFoldersRecoveryPermissionArgsDict']]]]] = None,
            recovery_physical_params: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryDownloadFilesFoldersRecoveryPhysicalParamArgs', 'BackupRecoveryDownloadFilesFoldersRecoveryPhysicalParamArgsDict']]]]] = None,
            recovery_progress_task_id: Optional[pulumi.Input[_builtins.str]] = None,
            recovery_request_initiator_type: Optional[pulumi.Input[_builtins.str]] = None,
            recovery_retrieve_archive_tasks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryDownloadFilesFoldersRecoveryRetrieveArchiveTaskArgs', 'BackupRecoveryDownloadFilesFoldersRecoveryRetrieveArchiveTaskArgsDict']]]]] = None,
            recovery_snapshot_environment: Optional[pulumi.Input[_builtins.str]] = None,
            recovery_start_time_usecs: Optional[pulumi.Input[_builtins.float]] = None,
            recovery_status: Optional[pulumi.Input[_builtins.str]] = None,
            recovery_tear_down_message: Optional[pulumi.Input[_builtins.str]] = None,
            recovery_tear_down_status: Optional[pulumi.Input[_builtins.str]] = None,
            x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'BackupRecoveryDownloadFilesFolders':
        """
        Get an existing BackupRecoveryDownloadFilesFolders resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryDownloadFilesFoldersDocumentArgs', 'BackupRecoveryDownloadFilesFoldersDocumentArgsDict']]]] documents: Specifies the list of documents to download using item ids. Only one of filesAndFolders or documents should be used.
               Currently only files are supported by documents.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryDownloadFilesFoldersFilesAndFolderArgs', 'BackupRecoveryDownloadFilesFoldersFilesAndFolderArgsDict']]]] files_and_folders: Specifies the list of files and folders to download.
        :param pulumi.Input[_builtins.str] glacier_retrieval_type: Specifies the glacier retrieval type when restoring or downloding files or folders from a Glacier-based cloud snapshot.
        :param pulumi.Input[_builtins.bool] is_parent_recovery: Specifies whether the current recovery operation has created child recoveries. This is currently used in SQL recovery
               where multiple child recoveries can be tracked under a common/parent recovery.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the recovery task. This field must be set and must be a unique name.
        :param pulumi.Input[Union['BackupRecoveryDownloadFilesFoldersObjectArgs', 'BackupRecoveryDownloadFilesFoldersObjectArgsDict']] object: Specifies the common snapshot parameters for a protected object.
        :param pulumi.Input[_builtins.str] parent_recovery_id: If current recovery is child task triggered through another parent recovery operation, then this field will specify the
               id of the parent recovery.
        :param pulumi.Input[_builtins.str] recovery_action: Specifies the type of recover action.
        :param pulumi.Input[_builtins.bool] recovery_can_tear_down: Specifies whether it's possible to tear down the objects created by the recovery.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryDownloadFilesFoldersRecoveryCreationInfoArgs', 'BackupRecoveryDownloadFilesFoldersRecoveryCreationInfoArgsDict']]]] recovery_creation_infos: Specifies the information about the creation of the protection group or recovery.
        :param pulumi.Input[_builtins.float] recovery_end_time_usecs: Specifies the end time of the Recovery in Unix timestamp epoch in microseconds. This field will be populated only after
               Recovery is finished.
        :param pulumi.Input[_builtins.bool] recovery_is_multi_stage_restore: Specifies whether the current recovery operation is a multi-stage restore operation. This is currently used by VMware
               recoveres for the migration/hot-standby use case.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] recovery_messages: Specifies messages about the recovery.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryDownloadFilesFoldersRecoveryMssqlParamArgs', 'BackupRecoveryDownloadFilesFoldersRecoveryMssqlParamArgsDict']]]] recovery_mssql_params: Specifies the recovery options specific to Sql environment.
        :param pulumi.Input[_builtins.str] recovery_name: Specifies the name of the Recovery.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryDownloadFilesFoldersRecoveryPermissionArgs', 'BackupRecoveryDownloadFilesFoldersRecoveryPermissionArgsDict']]]] recovery_permissions: Specifies the list of tenants that have permissions for this recovery.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryDownloadFilesFoldersRecoveryPhysicalParamArgs', 'BackupRecoveryDownloadFilesFoldersRecoveryPhysicalParamArgsDict']]]] recovery_physical_params: Specifies the recovery options specific to Physical environment.
        :param pulumi.Input[_builtins.str] recovery_progress_task_id: Progress monitor task id for Recovery.
        :param pulumi.Input[_builtins.str] recovery_request_initiator_type: Specifies the type of request from UI, which is used for services like magneto to determine the priority of requests.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryDownloadFilesFoldersRecoveryRetrieveArchiveTaskArgs', 'BackupRecoveryDownloadFilesFoldersRecoveryRetrieveArchiveTaskArgsDict']]]] recovery_retrieve_archive_tasks: Specifies the list of persistent state of a retrieve of an archive task.
        :param pulumi.Input[_builtins.str] recovery_snapshot_environment: Specifies the type of snapshot environment for which the Recovery was performed.
        :param pulumi.Input[_builtins.float] recovery_start_time_usecs: Specifies the start time of the Recovery in Unix timestamp epoch in microseconds.
        :param pulumi.Input[_builtins.str] recovery_status: Status of the Recovery. 'Running' indicates that the Recovery is still running. 'Canceled' indicates that the Recovery
               has been cancelled. 'Canceling' indicates that the Recovery is in the process of being cancelled. 'Failed' indicates
               that the Recovery has failed. 'Succeeded' indicates that the Recovery has finished successfully. 'SucceededWithWarning'
               indicates that the Recovery finished successfully, but there were some warning messages. 'Skipped' indicates that the
               Recovery task was skipped.
        :param pulumi.Input[_builtins.str] recovery_tear_down_message: Specifies the error message about the tear down operation if it fails.
        :param pulumi.Input[_builtins.str] recovery_tear_down_status: Specifies the status of the tear down operation. This is only set when the canTearDown is set to true.
               'DestroyScheduled' indicates that the tear down is ready to schedule. 'Destroying' indicates that the tear down is still
               running. 'Destroyed' indicates that the tear down succeeded. 'DestroyError' indicates that the tear down failed.
        :param pulumi.Input[_builtins.str] x_ibm_tenant_id: Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
               be specified.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BackupRecoveryDownloadFilesFoldersState.__new__(_BackupRecoveryDownloadFilesFoldersState)

        __props__.__dict__["backup_recovery_download_files_folders_id"] = backup_recovery_download_files_folders_id
        __props__.__dict__["documents"] = documents
        __props__.__dict__["files_and_folders"] = files_and_folders
        __props__.__dict__["glacier_retrieval_type"] = glacier_retrieval_type
        __props__.__dict__["is_parent_recovery"] = is_parent_recovery
        __props__.__dict__["name"] = name
        __props__.__dict__["object"] = object
        __props__.__dict__["parent_recovery_id"] = parent_recovery_id
        __props__.__dict__["recovery_action"] = recovery_action
        __props__.__dict__["recovery_can_tear_down"] = recovery_can_tear_down
        __props__.__dict__["recovery_creation_infos"] = recovery_creation_infos
        __props__.__dict__["recovery_end_time_usecs"] = recovery_end_time_usecs
        __props__.__dict__["recovery_is_multi_stage_restore"] = recovery_is_multi_stage_restore
        __props__.__dict__["recovery_messages"] = recovery_messages
        __props__.__dict__["recovery_mssql_params"] = recovery_mssql_params
        __props__.__dict__["recovery_name"] = recovery_name
        __props__.__dict__["recovery_permissions"] = recovery_permissions
        __props__.__dict__["recovery_physical_params"] = recovery_physical_params
        __props__.__dict__["recovery_progress_task_id"] = recovery_progress_task_id
        __props__.__dict__["recovery_request_initiator_type"] = recovery_request_initiator_type
        __props__.__dict__["recovery_retrieve_archive_tasks"] = recovery_retrieve_archive_tasks
        __props__.__dict__["recovery_snapshot_environment"] = recovery_snapshot_environment
        __props__.__dict__["recovery_start_time_usecs"] = recovery_start_time_usecs
        __props__.__dict__["recovery_status"] = recovery_status
        __props__.__dict__["recovery_tear_down_message"] = recovery_tear_down_message
        __props__.__dict__["recovery_tear_down_status"] = recovery_tear_down_status
        __props__.__dict__["x_ibm_tenant_id"] = x_ibm_tenant_id
        return BackupRecoveryDownloadFilesFolders(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="backupRecoveryDownloadFilesFoldersId")
    def backup_recovery_download_files_folders_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "backup_recovery_download_files_folders_id")

    @_builtins.property
    @pulumi.getter
    def documents(self) -> pulumi.Output[Optional[Sequence['outputs.BackupRecoveryDownloadFilesFoldersDocument']]]:
        """
        Specifies the list of documents to download using item ids. Only one of filesAndFolders or documents should be used.
        Currently only files are supported by documents.
        """
        return pulumi.get(self, "documents")

    @_builtins.property
    @pulumi.getter(name="filesAndFolders")
    def files_and_folders(self) -> pulumi.Output[Sequence['outputs.BackupRecoveryDownloadFilesFoldersFilesAndFolder']]:
        """
        Specifies the list of files and folders to download.
        """
        return pulumi.get(self, "files_and_folders")

    @_builtins.property
    @pulumi.getter(name="glacierRetrievalType")
    def glacier_retrieval_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the glacier retrieval type when restoring or downloding files or folders from a Glacier-based cloud snapshot.
        """
        return pulumi.get(self, "glacier_retrieval_type")

    @_builtins.property
    @pulumi.getter(name="isParentRecovery")
    def is_parent_recovery(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether the current recovery operation has created child recoveries. This is currently used in SQL recovery
        where multiple child recoveries can be tracked under a common/parent recovery.
        """
        return pulumi.get(self, "is_parent_recovery")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the recovery task. This field must be set and must be a unique name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def object(self) -> pulumi.Output['outputs.BackupRecoveryDownloadFilesFoldersObject']:
        """
        Specifies the common snapshot parameters for a protected object.
        """
        return pulumi.get(self, "object")

    @_builtins.property
    @pulumi.getter(name="parentRecoveryId")
    def parent_recovery_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        If current recovery is child task triggered through another parent recovery operation, then this field will specify the
        id of the parent recovery.
        """
        return pulumi.get(self, "parent_recovery_id")

    @_builtins.property
    @pulumi.getter(name="recoveryAction")
    def recovery_action(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of recover action.
        """
        return pulumi.get(self, "recovery_action")

    @_builtins.property
    @pulumi.getter(name="recoveryCanTearDown")
    def recovery_can_tear_down(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether it's possible to tear down the objects created by the recovery.
        """
        return pulumi.get(self, "recovery_can_tear_down")

    @_builtins.property
    @pulumi.getter(name="recoveryCreationInfos")
    def recovery_creation_infos(self) -> pulumi.Output[Sequence['outputs.BackupRecoveryDownloadFilesFoldersRecoveryCreationInfo']]:
        """
        Specifies the information about the creation of the protection group or recovery.
        """
        return pulumi.get(self, "recovery_creation_infos")

    @_builtins.property
    @pulumi.getter(name="recoveryEndTimeUsecs")
    def recovery_end_time_usecs(self) -> pulumi.Output[_builtins.float]:
        """
        Specifies the end time of the Recovery in Unix timestamp epoch in microseconds. This field will be populated only after
        Recovery is finished.
        """
        return pulumi.get(self, "recovery_end_time_usecs")

    @_builtins.property
    @pulumi.getter(name="recoveryIsMultiStageRestore")
    def recovery_is_multi_stage_restore(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether the current recovery operation is a multi-stage restore operation. This is currently used by VMware
        recoveres for the migration/hot-standby use case.
        """
        return pulumi.get(self, "recovery_is_multi_stage_restore")

    @_builtins.property
    @pulumi.getter(name="recoveryMessages")
    def recovery_messages(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies messages about the recovery.
        """
        return pulumi.get(self, "recovery_messages")

    @_builtins.property
    @pulumi.getter(name="recoveryMssqlParams")
    def recovery_mssql_params(self) -> pulumi.Output[Sequence['outputs.BackupRecoveryDownloadFilesFoldersRecoveryMssqlParam']]:
        """
        Specifies the recovery options specific to Sql environment.
        """
        return pulumi.get(self, "recovery_mssql_params")

    @_builtins.property
    @pulumi.getter(name="recoveryName")
    def recovery_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the Recovery.
        """
        return pulumi.get(self, "recovery_name")

    @_builtins.property
    @pulumi.getter(name="recoveryPermissions")
    def recovery_permissions(self) -> pulumi.Output[Sequence['outputs.BackupRecoveryDownloadFilesFoldersRecoveryPermission']]:
        """
        Specifies the list of tenants that have permissions for this recovery.
        """
        return pulumi.get(self, "recovery_permissions")

    @_builtins.property
    @pulumi.getter(name="recoveryPhysicalParams")
    def recovery_physical_params(self) -> pulumi.Output[Sequence['outputs.BackupRecoveryDownloadFilesFoldersRecoveryPhysicalParam']]:
        """
        Specifies the recovery options specific to Physical environment.
        """
        return pulumi.get(self, "recovery_physical_params")

    @_builtins.property
    @pulumi.getter(name="recoveryProgressTaskId")
    def recovery_progress_task_id(self) -> pulumi.Output[_builtins.str]:
        """
        Progress monitor task id for Recovery.
        """
        return pulumi.get(self, "recovery_progress_task_id")

    @_builtins.property
    @pulumi.getter(name="recoveryRequestInitiatorType")
    def recovery_request_initiator_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of request from UI, which is used for services like magneto to determine the priority of requests.
        """
        return pulumi.get(self, "recovery_request_initiator_type")

    @_builtins.property
    @pulumi.getter(name="recoveryRetrieveArchiveTasks")
    def recovery_retrieve_archive_tasks(self) -> pulumi.Output[Sequence['outputs.BackupRecoveryDownloadFilesFoldersRecoveryRetrieveArchiveTask']]:
        """
        Specifies the list of persistent state of a retrieve of an archive task.
        """
        return pulumi.get(self, "recovery_retrieve_archive_tasks")

    @_builtins.property
    @pulumi.getter(name="recoverySnapshotEnvironment")
    def recovery_snapshot_environment(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the type of snapshot environment for which the Recovery was performed.
        """
        return pulumi.get(self, "recovery_snapshot_environment")

    @_builtins.property
    @pulumi.getter(name="recoveryStartTimeUsecs")
    def recovery_start_time_usecs(self) -> pulumi.Output[_builtins.float]:
        """
        Specifies the start time of the Recovery in Unix timestamp epoch in microseconds.
        """
        return pulumi.get(self, "recovery_start_time_usecs")

    @_builtins.property
    @pulumi.getter(name="recoveryStatus")
    def recovery_status(self) -> pulumi.Output[_builtins.str]:
        """
        Status of the Recovery. 'Running' indicates that the Recovery is still running. 'Canceled' indicates that the Recovery
        has been cancelled. 'Canceling' indicates that the Recovery is in the process of being cancelled. 'Failed' indicates
        that the Recovery has failed. 'Succeeded' indicates that the Recovery has finished successfully. 'SucceededWithWarning'
        indicates that the Recovery finished successfully, but there were some warning messages. 'Skipped' indicates that the
        Recovery task was skipped.
        """
        return pulumi.get(self, "recovery_status")

    @_builtins.property
    @pulumi.getter(name="recoveryTearDownMessage")
    def recovery_tear_down_message(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the error message about the tear down operation if it fails.
        """
        return pulumi.get(self, "recovery_tear_down_message")

    @_builtins.property
    @pulumi.getter(name="recoveryTearDownStatus")
    def recovery_tear_down_status(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the status of the tear down operation. This is only set when the canTearDown is set to true.
        'DestroyScheduled' indicates that the tear down is ready to schedule. 'Destroying' indicates that the tear down is still
        running. 'Destroyed' indicates that the tear down succeeded. 'DestroyError' indicates that the tear down failed.
        """
        return pulumi.get(self, "recovery_tear_down_status")

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
        be specified.
        """
        return pulumi.get(self, "x_ibm_tenant_id")

