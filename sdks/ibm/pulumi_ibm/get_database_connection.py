# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetDatabaseConnectionResult',
    'AwaitableGetDatabaseConnectionResult',
    'get_database_connection',
    'get_database_connection_output',
]

@pulumi.output_type
class GetDatabaseConnectionResult:
    """
    A collection of values returned by getDatabaseConnection.
    """
    def __init__(__self__, amqps=None, analytics=None, bi_connectors=None, certificate_root=None, clis=None, deployment_id=None, emps=None, endpoint_type=None, grpcs=None, https=None, id=None, mongodbs=None, mqtts=None, mysqls=None, ops_managers=None, postgres=None, redisses=None, secures=None, stomp_ssls=None, user_id=None, user_type=None):
        if amqps and not isinstance(amqps, list):
            raise TypeError("Expected argument 'amqps' to be a list")
        pulumi.set(__self__, "amqps", amqps)
        if analytics and not isinstance(analytics, list):
            raise TypeError("Expected argument 'analytics' to be a list")
        pulumi.set(__self__, "analytics", analytics)
        if bi_connectors and not isinstance(bi_connectors, list):
            raise TypeError("Expected argument 'bi_connectors' to be a list")
        pulumi.set(__self__, "bi_connectors", bi_connectors)
        if certificate_root and not isinstance(certificate_root, str):
            raise TypeError("Expected argument 'certificate_root' to be a str")
        pulumi.set(__self__, "certificate_root", certificate_root)
        if clis and not isinstance(clis, list):
            raise TypeError("Expected argument 'clis' to be a list")
        pulumi.set(__self__, "clis", clis)
        if deployment_id and not isinstance(deployment_id, str):
            raise TypeError("Expected argument 'deployment_id' to be a str")
        pulumi.set(__self__, "deployment_id", deployment_id)
        if emps and not isinstance(emps, list):
            raise TypeError("Expected argument 'emps' to be a list")
        pulumi.set(__self__, "emps", emps)
        if endpoint_type and not isinstance(endpoint_type, str):
            raise TypeError("Expected argument 'endpoint_type' to be a str")
        pulumi.set(__self__, "endpoint_type", endpoint_type)
        if grpcs and not isinstance(grpcs, list):
            raise TypeError("Expected argument 'grpcs' to be a list")
        pulumi.set(__self__, "grpcs", grpcs)
        if https and not isinstance(https, list):
            raise TypeError("Expected argument 'https' to be a list")
        pulumi.set(__self__, "https", https)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if mongodbs and not isinstance(mongodbs, list):
            raise TypeError("Expected argument 'mongodbs' to be a list")
        pulumi.set(__self__, "mongodbs", mongodbs)
        if mqtts and not isinstance(mqtts, list):
            raise TypeError("Expected argument 'mqtts' to be a list")
        pulumi.set(__self__, "mqtts", mqtts)
        if mysqls and not isinstance(mysqls, list):
            raise TypeError("Expected argument 'mysqls' to be a list")
        pulumi.set(__self__, "mysqls", mysqls)
        if ops_managers and not isinstance(ops_managers, list):
            raise TypeError("Expected argument 'ops_managers' to be a list")
        pulumi.set(__self__, "ops_managers", ops_managers)
        if postgres and not isinstance(postgres, list):
            raise TypeError("Expected argument 'postgres' to be a list")
        pulumi.set(__self__, "postgres", postgres)
        if redisses and not isinstance(redisses, list):
            raise TypeError("Expected argument 'redisses' to be a list")
        pulumi.set(__self__, "redisses", redisses)
        if secures and not isinstance(secures, list):
            raise TypeError("Expected argument 'secures' to be a list")
        pulumi.set(__self__, "secures", secures)
        if stomp_ssls and not isinstance(stomp_ssls, list):
            raise TypeError("Expected argument 'stomp_ssls' to be a list")
        pulumi.set(__self__, "stomp_ssls", stomp_ssls)
        if user_id and not isinstance(user_id, str):
            raise TypeError("Expected argument 'user_id' to be a str")
        pulumi.set(__self__, "user_id", user_id)
        if user_type and not isinstance(user_type, str):
            raise TypeError("Expected argument 'user_type' to be a str")
        pulumi.set(__self__, "user_type", user_type)

    @_builtins.property
    @pulumi.getter
    def amqps(self) -> Sequence['outputs.GetDatabaseConnectionAmqpResult']:
        return pulumi.get(self, "amqps")

    @_builtins.property
    @pulumi.getter
    def analytics(self) -> Sequence['outputs.GetDatabaseConnectionAnalyticResult']:
        return pulumi.get(self, "analytics")

    @_builtins.property
    @pulumi.getter(name="biConnectors")
    def bi_connectors(self) -> Sequence['outputs.GetDatabaseConnectionBiConnectorResult']:
        return pulumi.get(self, "bi_connectors")

    @_builtins.property
    @pulumi.getter(name="certificateRoot")
    def certificate_root(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "certificate_root")

    @_builtins.property
    @pulumi.getter
    def clis(self) -> Sequence['outputs.GetDatabaseConnectionCliResult']:
        return pulumi.get(self, "clis")

    @_builtins.property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> _builtins.str:
        return pulumi.get(self, "deployment_id")

    @_builtins.property
    @pulumi.getter
    def emps(self) -> Sequence['outputs.GetDatabaseConnectionEmpResult']:
        return pulumi.get(self, "emps")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> _builtins.str:
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter
    def grpcs(self) -> Sequence['outputs.GetDatabaseConnectionGrpcResult']:
        return pulumi.get(self, "grpcs")

    @_builtins.property
    @pulumi.getter
    def https(self) -> Sequence['outputs.GetDatabaseConnectionHttpResult']:
        return pulumi.get(self, "https")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def mongodbs(self) -> Sequence['outputs.GetDatabaseConnectionMongodbResult']:
        return pulumi.get(self, "mongodbs")

    @_builtins.property
    @pulumi.getter
    def mqtts(self) -> Sequence['outputs.GetDatabaseConnectionMqttResult']:
        return pulumi.get(self, "mqtts")

    @_builtins.property
    @pulumi.getter
    def mysqls(self) -> Sequence['outputs.GetDatabaseConnectionMysqlResult']:
        return pulumi.get(self, "mysqls")

    @_builtins.property
    @pulumi.getter(name="opsManagers")
    def ops_managers(self) -> Sequence['outputs.GetDatabaseConnectionOpsManagerResult']:
        return pulumi.get(self, "ops_managers")

    @_builtins.property
    @pulumi.getter
    def postgres(self) -> Sequence['outputs.GetDatabaseConnectionPostgreResult']:
        return pulumi.get(self, "postgres")

    @_builtins.property
    @pulumi.getter
    def redisses(self) -> Sequence['outputs.GetDatabaseConnectionRedissResult']:
        return pulumi.get(self, "redisses")

    @_builtins.property
    @pulumi.getter
    def secures(self) -> Sequence['outputs.GetDatabaseConnectionSecureResult']:
        return pulumi.get(self, "secures")

    @_builtins.property
    @pulumi.getter(name="stompSsls")
    def stomp_ssls(self) -> Sequence['outputs.GetDatabaseConnectionStompSslResult']:
        return pulumi.get(self, "stomp_ssls")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> _builtins.str:
        return pulumi.get(self, "user_id")

    @_builtins.property
    @pulumi.getter(name="userType")
    def user_type(self) -> _builtins.str:
        return pulumi.get(self, "user_type")


class AwaitableGetDatabaseConnectionResult(GetDatabaseConnectionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDatabaseConnectionResult(
            amqps=self.amqps,
            analytics=self.analytics,
            bi_connectors=self.bi_connectors,
            certificate_root=self.certificate_root,
            clis=self.clis,
            deployment_id=self.deployment_id,
            emps=self.emps,
            endpoint_type=self.endpoint_type,
            grpcs=self.grpcs,
            https=self.https,
            id=self.id,
            mongodbs=self.mongodbs,
            mqtts=self.mqtts,
            mysqls=self.mysqls,
            ops_managers=self.ops_managers,
            postgres=self.postgres,
            redisses=self.redisses,
            secures=self.secures,
            stomp_ssls=self.stomp_ssls,
            user_id=self.user_id,
            user_type=self.user_type)


def get_database_connection(certificate_root: Optional[_builtins.str] = None,
                            deployment_id: Optional[_builtins.str] = None,
                            endpoint_type: Optional[_builtins.str] = None,
                            id: Optional[_builtins.str] = None,
                            user_id: Optional[_builtins.str] = None,
                            user_type: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDatabaseConnectionResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['certificateRoot'] = certificate_root
    __args__['deploymentId'] = deployment_id
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['userId'] = user_id
    __args__['userType'] = user_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getDatabaseConnection:getDatabaseConnection', __args__, opts=opts, typ=GetDatabaseConnectionResult, package_ref=_utilities.get_package()).value

    return AwaitableGetDatabaseConnectionResult(
        amqps=pulumi.get(__ret__, 'amqps'),
        analytics=pulumi.get(__ret__, 'analytics'),
        bi_connectors=pulumi.get(__ret__, 'bi_connectors'),
        certificate_root=pulumi.get(__ret__, 'certificate_root'),
        clis=pulumi.get(__ret__, 'clis'),
        deployment_id=pulumi.get(__ret__, 'deployment_id'),
        emps=pulumi.get(__ret__, 'emps'),
        endpoint_type=pulumi.get(__ret__, 'endpoint_type'),
        grpcs=pulumi.get(__ret__, 'grpcs'),
        https=pulumi.get(__ret__, 'https'),
        id=pulumi.get(__ret__, 'id'),
        mongodbs=pulumi.get(__ret__, 'mongodbs'),
        mqtts=pulumi.get(__ret__, 'mqtts'),
        mysqls=pulumi.get(__ret__, 'mysqls'),
        ops_managers=pulumi.get(__ret__, 'ops_managers'),
        postgres=pulumi.get(__ret__, 'postgres'),
        redisses=pulumi.get(__ret__, 'redisses'),
        secures=pulumi.get(__ret__, 'secures'),
        stomp_ssls=pulumi.get(__ret__, 'stomp_ssls'),
        user_id=pulumi.get(__ret__, 'user_id'),
        user_type=pulumi.get(__ret__, 'user_type'))
def get_database_connection_output(certificate_root: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   deployment_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                                   id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   user_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   user_type: Optional[pulumi.Input[_builtins.str]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDatabaseConnectionResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['certificateRoot'] = certificate_root
    __args__['deploymentId'] = deployment_id
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['userId'] = user_id
    __args__['userType'] = user_type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getDatabaseConnection:getDatabaseConnection', __args__, opts=opts, typ=GetDatabaseConnectionResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetDatabaseConnectionResult(
        amqps=pulumi.get(__response__, 'amqps'),
        analytics=pulumi.get(__response__, 'analytics'),
        bi_connectors=pulumi.get(__response__, 'bi_connectors'),
        certificate_root=pulumi.get(__response__, 'certificate_root'),
        clis=pulumi.get(__response__, 'clis'),
        deployment_id=pulumi.get(__response__, 'deployment_id'),
        emps=pulumi.get(__response__, 'emps'),
        endpoint_type=pulumi.get(__response__, 'endpoint_type'),
        grpcs=pulumi.get(__response__, 'grpcs'),
        https=pulumi.get(__response__, 'https'),
        id=pulumi.get(__response__, 'id'),
        mongodbs=pulumi.get(__response__, 'mongodbs'),
        mqtts=pulumi.get(__response__, 'mqtts'),
        mysqls=pulumi.get(__response__, 'mysqls'),
        ops_managers=pulumi.get(__response__, 'ops_managers'),
        postgres=pulumi.get(__response__, 'postgres'),
        redisses=pulumi.get(__response__, 'redisses'),
        secures=pulumi.get(__response__, 'secures'),
        stomp_ssls=pulumi.get(__response__, 'stomp_ssls'),
        user_id=pulumi.get(__response__, 'user_id'),
        user_type=pulumi.get(__response__, 'user_type')))
