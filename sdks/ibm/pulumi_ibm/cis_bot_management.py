# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['CisBotManagementArgs', 'CisBotManagement']

@pulumi.input_type
class CisBotManagementArgs:
    def __init__(__self__, *,
                 cis_id: pulumi.Input[_builtins.str],
                 domain_id: pulumi.Input[_builtins.str],
                 cis_bot_management_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CisBotManagement resource.
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        """
        pulumi.set(__self__, "cis_id", cis_id)
        pulumi.set(__self__, "domain_id", domain_id)
        if cis_bot_management_id is not None:
            pulumi.set(__self__, "cis_bot_management_id", cis_bot_management_id)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Input[_builtins.str]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Input[_builtins.str]:
        """
        Associated CIS domain
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter(name="cisBotManagementId")
    def cis_bot_management_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_bot_management_id")

    @cis_bot_management_id.setter
    def cis_bot_management_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_bot_management_id", value)


@pulumi.input_type
class _CisBotManagementState:
    def __init__(__self__, *,
                 auth_id_logging: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_bot_management_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_js: Optional[pulumi.Input[_builtins.str]] = None,
                 fight_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 session_score: Optional[pulumi.Input[_builtins.str]] = None,
                 use_latest_model: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CisBotManagement resources.
        :param pulumi.Input[_builtins.str] auth_id_logging: Auth ID Logging
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.str] enable_js: Enable JS
        :param pulumi.Input[_builtins.str] fight_mode: Fight Mode
        :param pulumi.Input[_builtins.str] session_score: Session Score
        :param pulumi.Input[_builtins.str] use_latest_model: Use Latest Model
        """
        if auth_id_logging is not None:
            pulumi.set(__self__, "auth_id_logging", auth_id_logging)
        if cis_bot_management_id is not None:
            pulumi.set(__self__, "cis_bot_management_id", cis_bot_management_id)
        if cis_id is not None:
            pulumi.set(__self__, "cis_id", cis_id)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if enable_js is not None:
            pulumi.set(__self__, "enable_js", enable_js)
        if fight_mode is not None:
            pulumi.set(__self__, "fight_mode", fight_mode)
        if session_score is not None:
            pulumi.set(__self__, "session_score", session_score)
        if use_latest_model is not None:
            pulumi.set(__self__, "use_latest_model", use_latest_model)

    @_builtins.property
    @pulumi.getter(name="authIdLogging")
    def auth_id_logging(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Auth ID Logging
        """
        return pulumi.get(self, "auth_id_logging")

    @auth_id_logging.setter
    def auth_id_logging(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auth_id_logging", value)

    @_builtins.property
    @pulumi.getter(name="cisBotManagementId")
    def cis_bot_management_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_bot_management_id")

    @cis_bot_management_id.setter
    def cis_bot_management_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_bot_management_id", value)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Associated CIS domain
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter(name="enableJs")
    def enable_js(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Enable JS
        """
        return pulumi.get(self, "enable_js")

    @enable_js.setter
    def enable_js(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_js", value)

    @_builtins.property
    @pulumi.getter(name="fightMode")
    def fight_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Fight Mode
        """
        return pulumi.get(self, "fight_mode")

    @fight_mode.setter
    def fight_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fight_mode", value)

    @_builtins.property
    @pulumi.getter(name="sessionScore")
    def session_score(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Session Score
        """
        return pulumi.get(self, "session_score")

    @session_score.setter
    def session_score(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "session_score", value)

    @_builtins.property
    @pulumi.getter(name="useLatestModel")
    def use_latest_model(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Use Latest Model
        """
        return pulumi.get(self, "use_latest_model")

    @use_latest_model.setter
    def use_latest_model(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "use_latest_model", value)


@pulumi.type_token("ibm:index/cisBotManagement:CisBotManagement")
class CisBotManagement(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cis_bot_management_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a CisBotManagement resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CisBotManagementArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CisBotManagement resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CisBotManagementArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CisBotManagementArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cis_bot_management_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CisBotManagementArgs.__new__(CisBotManagementArgs)

            __props__.__dict__["cis_bot_management_id"] = cis_bot_management_id
            if cis_id is None and not opts.urn:
                raise TypeError("Missing required property 'cis_id'")
            __props__.__dict__["cis_id"] = cis_id
            if domain_id is None and not opts.urn:
                raise TypeError("Missing required property 'domain_id'")
            __props__.__dict__["domain_id"] = domain_id
            __props__.__dict__["auth_id_logging"] = None
            __props__.__dict__["enable_js"] = None
            __props__.__dict__["fight_mode"] = None
            __props__.__dict__["session_score"] = None
            __props__.__dict__["use_latest_model"] = None
        super(CisBotManagement, __self__).__init__(
            'ibm:index/cisBotManagement:CisBotManagement',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auth_id_logging: Optional[pulumi.Input[_builtins.str]] = None,
            cis_bot_management_id: Optional[pulumi.Input[_builtins.str]] = None,
            cis_id: Optional[pulumi.Input[_builtins.str]] = None,
            domain_id: Optional[pulumi.Input[_builtins.str]] = None,
            enable_js: Optional[pulumi.Input[_builtins.str]] = None,
            fight_mode: Optional[pulumi.Input[_builtins.str]] = None,
            session_score: Optional[pulumi.Input[_builtins.str]] = None,
            use_latest_model: Optional[pulumi.Input[_builtins.str]] = None) -> 'CisBotManagement':
        """
        Get an existing CisBotManagement resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] auth_id_logging: Auth ID Logging
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.str] enable_js: Enable JS
        :param pulumi.Input[_builtins.str] fight_mode: Fight Mode
        :param pulumi.Input[_builtins.str] session_score: Session Score
        :param pulumi.Input[_builtins.str] use_latest_model: Use Latest Model
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CisBotManagementState.__new__(_CisBotManagementState)

        __props__.__dict__["auth_id_logging"] = auth_id_logging
        __props__.__dict__["cis_bot_management_id"] = cis_bot_management_id
        __props__.__dict__["cis_id"] = cis_id
        __props__.__dict__["domain_id"] = domain_id
        __props__.__dict__["enable_js"] = enable_js
        __props__.__dict__["fight_mode"] = fight_mode
        __props__.__dict__["session_score"] = session_score
        __props__.__dict__["use_latest_model"] = use_latest_model
        return CisBotManagement(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="authIdLogging")
    def auth_id_logging(self) -> pulumi.Output[_builtins.str]:
        """
        Auth ID Logging
        """
        return pulumi.get(self, "auth_id_logging")

    @_builtins.property
    @pulumi.getter(name="cisBotManagementId")
    def cis_bot_management_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cis_bot_management_id")

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Output[_builtins.str]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Output[_builtins.str]:
        """
        Associated CIS domain
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="enableJs")
    def enable_js(self) -> pulumi.Output[_builtins.str]:
        """
        Enable JS
        """
        return pulumi.get(self, "enable_js")

    @_builtins.property
    @pulumi.getter(name="fightMode")
    def fight_mode(self) -> pulumi.Output[_builtins.str]:
        """
        Fight Mode
        """
        return pulumi.get(self, "fight_mode")

    @_builtins.property
    @pulumi.getter(name="sessionScore")
    def session_score(self) -> pulumi.Output[_builtins.str]:
        """
        Session Score
        """
        return pulumi.get(self, "session_score")

    @_builtins.property
    @pulumi.getter(name="useLatestModel")
    def use_latest_model(self) -> pulumi.Output[_builtins.str]:
        """
        Use Latest Model
        """
        return pulumi.get(self, "use_latest_model")

