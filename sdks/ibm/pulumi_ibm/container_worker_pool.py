# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ContainerWorkerPoolArgs', 'ContainerWorkerPool']

@pulumi.input_type
class ContainerWorkerPoolArgs:
    def __init__(__self__, *,
                 cluster: pulumi.Input[_builtins.str],
                 machine_type: pulumi.Input[_builtins.str],
                 size_per_zone: pulumi.Input[_builtins.float],
                 worker_pool_name: pulumi.Input[_builtins.str],
                 container_worker_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 disk_encryption: Optional[pulumi.Input[_builtins.bool]] = None,
                 entitlement: Optional[pulumi.Input[_builtins.str]] = None,
                 hardware: Optional[pulumi.Input[_builtins.str]] = None,
                 import_on_create: Optional[pulumi.Input[_builtins.bool]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 operating_system: Optional[pulumi.Input[_builtins.str]] = None,
                 orphan_on_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerWorkerPoolTaintArgs']]]] = None,
                 timeouts: Optional[pulumi.Input['ContainerWorkerPoolTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a ContainerWorkerPool resource.
        :param pulumi.Input[_builtins.str] cluster: Cluster name
        :param pulumi.Input[_builtins.str] machine_type: worker nodes machine type
        :param pulumi.Input[_builtins.float] size_per_zone: Number of nodes per zone
        :param pulumi.Input[_builtins.str] worker_pool_name: worker pool name
        :param pulumi.Input[_builtins.bool] disk_encryption: worker node disk encrypted if set to true
        :param pulumi.Input[_builtins.str] entitlement: Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        :param pulumi.Input[_builtins.str] hardware: Hardware type
        :param pulumi.Input[_builtins.bool] import_on_create: Import an existing workerpool from the cluster instead of creating a new
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: list of labels to worker pool
        :param pulumi.Input[_builtins.str] operating_system: The operating system of the workers in the worker pool.
        :param pulumi.Input[_builtins.bool] orphan_on_delete: Orphan the workerpool resource instead of deleting it
        :param pulumi.Input[_builtins.str] region: The worker pool region
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[Sequence[pulumi.Input['ContainerWorkerPoolTaintArgs']]] taints: WorkerPool Taints
        """
        pulumi.set(__self__, "cluster", cluster)
        pulumi.set(__self__, "machine_type", machine_type)
        pulumi.set(__self__, "size_per_zone", size_per_zone)
        pulumi.set(__self__, "worker_pool_name", worker_pool_name)
        if container_worker_pool_id is not None:
            pulumi.set(__self__, "container_worker_pool_id", container_worker_pool_id)
        if disk_encryption is not None:
            pulumi.set(__self__, "disk_encryption", disk_encryption)
        if entitlement is not None:
            pulumi.set(__self__, "entitlement", entitlement)
        if hardware is not None:
            pulumi.set(__self__, "hardware", hardware)
        if import_on_create is not None:
            pulumi.set(__self__, "import_on_create", import_on_create)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if operating_system is not None:
            pulumi.set(__self__, "operating_system", operating_system)
        if orphan_on_delete is not None:
            pulumi.set(__self__, "orphan_on_delete", orphan_on_delete)
        if region is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""region is deprecated: Deprecated""")
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> pulumi.Input[_builtins.str]:
        """
        Cluster name
        """
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster", value)

    @_builtins.property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> pulumi.Input[_builtins.str]:
        """
        worker nodes machine type
        """
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "machine_type", value)

    @_builtins.property
    @pulumi.getter(name="sizePerZone")
    def size_per_zone(self) -> pulumi.Input[_builtins.float]:
        """
        Number of nodes per zone
        """
        return pulumi.get(self, "size_per_zone")

    @size_per_zone.setter
    def size_per_zone(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "size_per_zone", value)

    @_builtins.property
    @pulumi.getter(name="workerPoolName")
    def worker_pool_name(self) -> pulumi.Input[_builtins.str]:
        """
        worker pool name
        """
        return pulumi.get(self, "worker_pool_name")

    @worker_pool_name.setter
    def worker_pool_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "worker_pool_name", value)

    @_builtins.property
    @pulumi.getter(name="containerWorkerPoolId")
    def container_worker_pool_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_worker_pool_id")

    @container_worker_pool_id.setter
    def container_worker_pool_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_worker_pool_id", value)

    @_builtins.property
    @pulumi.getter(name="diskEncryption")
    def disk_encryption(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        worker node disk encrypted if set to true
        """
        return pulumi.get(self, "disk_encryption")

    @disk_encryption.setter
    def disk_encryption(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disk_encryption", value)

    @_builtins.property
    @pulumi.getter
    def entitlement(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        """
        return pulumi.get(self, "entitlement")

    @entitlement.setter
    def entitlement(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entitlement", value)

    @_builtins.property
    @pulumi.getter
    def hardware(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Hardware type
        """
        return pulumi.get(self, "hardware")

    @hardware.setter
    def hardware(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hardware", value)

    @_builtins.property
    @pulumi.getter(name="importOnCreate")
    def import_on_create(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Import an existing workerpool from the cluster instead of creating a new
        """
        return pulumi.get(self, "import_on_create")

    @import_on_create.setter
    def import_on_create(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "import_on_create", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        list of labels to worker pool
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The operating system of the workers in the worker pool.
        """
        return pulumi.get(self, "operating_system")

    @operating_system.setter
    def operating_system(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "operating_system", value)

    @_builtins.property
    @pulumi.getter(name="orphanOnDelete")
    def orphan_on_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Orphan the workerpool resource instead of deleting it
        """
        return pulumi.get(self, "orphan_on_delete")

    @orphan_on_delete.setter
    def orphan_on_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "orphan_on_delete", value)

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The worker pool region
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerWorkerPoolTaintArgs']]]]:
        """
        WorkerPool Taints
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerWorkerPoolTaintArgs']]]]):
        pulumi.set(self, "taints", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ContainerWorkerPoolTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ContainerWorkerPoolTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _ContainerWorkerPoolState:
    def __init__(__self__, *,
                 autoscale_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 container_worker_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 disk_encryption: Optional[pulumi.Input[_builtins.bool]] = None,
                 entitlement: Optional[pulumi.Input[_builtins.str]] = None,
                 hardware: Optional[pulumi.Input[_builtins.str]] = None,
                 import_on_create: Optional[pulumi.Input[_builtins.bool]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 machine_type: Optional[pulumi.Input[_builtins.str]] = None,
                 operating_system: Optional[pulumi.Input[_builtins.str]] = None,
                 orphan_on_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_controller_url: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 size_per_zone: Optional[pulumi.Input[_builtins.float]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerWorkerPoolTaintArgs']]]] = None,
                 timeouts: Optional[pulumi.Input['ContainerWorkerPoolTimeoutsArgs']] = None,
                 worker_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 worker_pool_name: Optional[pulumi.Input[_builtins.str]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerWorkerPoolZoneArgs']]]] = None):
        """
        Input properties used for looking up and filtering ContainerWorkerPool resources.
        :param pulumi.Input[_builtins.bool] autoscale_enabled: Autoscaling is enabled on the workerpool
        :param pulumi.Input[_builtins.str] cluster: Cluster name
        :param pulumi.Input[_builtins.bool] disk_encryption: worker node disk encrypted if set to true
        :param pulumi.Input[_builtins.str] entitlement: Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        :param pulumi.Input[_builtins.str] hardware: Hardware type
        :param pulumi.Input[_builtins.bool] import_on_create: Import an existing workerpool from the cluster instead of creating a new
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: list of labels to worker pool
        :param pulumi.Input[_builtins.str] machine_type: worker nodes machine type
        :param pulumi.Input[_builtins.str] operating_system: The operating system of the workers in the worker pool.
        :param pulumi.Input[_builtins.bool] orphan_on_delete: Orphan the workerpool resource instead of deleting it
        :param pulumi.Input[_builtins.str] region: The worker pool region
        :param pulumi.Input[_builtins.str] resource_controller_url: The URL of the IBM Cloud dashboard that can be used to explore and view details about this cluster
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.float] size_per_zone: Number of nodes per zone
        :param pulumi.Input[_builtins.str] state: worker pool state
        :param pulumi.Input[Sequence[pulumi.Input['ContainerWorkerPoolTaintArgs']]] taints: WorkerPool Taints
        :param pulumi.Input[_builtins.str] worker_pool_name: worker pool name
        """
        if autoscale_enabled is not None:
            pulumi.set(__self__, "autoscale_enabled", autoscale_enabled)
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if container_worker_pool_id is not None:
            pulumi.set(__self__, "container_worker_pool_id", container_worker_pool_id)
        if disk_encryption is not None:
            pulumi.set(__self__, "disk_encryption", disk_encryption)
        if entitlement is not None:
            pulumi.set(__self__, "entitlement", entitlement)
        if hardware is not None:
            pulumi.set(__self__, "hardware", hardware)
        if import_on_create is not None:
            pulumi.set(__self__, "import_on_create", import_on_create)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if machine_type is not None:
            pulumi.set(__self__, "machine_type", machine_type)
        if operating_system is not None:
            pulumi.set(__self__, "operating_system", operating_system)
        if orphan_on_delete is not None:
            pulumi.set(__self__, "orphan_on_delete", orphan_on_delete)
        if region is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""region is deprecated: Deprecated""")
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_controller_url is not None:
            pulumi.set(__self__, "resource_controller_url", resource_controller_url)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if size_per_zone is not None:
            pulumi.set(__self__, "size_per_zone", size_per_zone)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if worker_pool_id is not None:
            pulumi.set(__self__, "worker_pool_id", worker_pool_id)
        if worker_pool_name is not None:
            pulumi.set(__self__, "worker_pool_name", worker_pool_name)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @_builtins.property
    @pulumi.getter(name="autoscaleEnabled")
    def autoscale_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Autoscaling is enabled on the workerpool
        """
        return pulumi.get(self, "autoscale_enabled")

    @autoscale_enabled.setter
    def autoscale_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "autoscale_enabled", value)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cluster name
        """
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster", value)

    @_builtins.property
    @pulumi.getter(name="containerWorkerPoolId")
    def container_worker_pool_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_worker_pool_id")

    @container_worker_pool_id.setter
    def container_worker_pool_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_worker_pool_id", value)

    @_builtins.property
    @pulumi.getter(name="diskEncryption")
    def disk_encryption(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        worker node disk encrypted if set to true
        """
        return pulumi.get(self, "disk_encryption")

    @disk_encryption.setter
    def disk_encryption(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disk_encryption", value)

    @_builtins.property
    @pulumi.getter
    def entitlement(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        """
        return pulumi.get(self, "entitlement")

    @entitlement.setter
    def entitlement(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entitlement", value)

    @_builtins.property
    @pulumi.getter
    def hardware(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Hardware type
        """
        return pulumi.get(self, "hardware")

    @hardware.setter
    def hardware(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hardware", value)

    @_builtins.property
    @pulumi.getter(name="importOnCreate")
    def import_on_create(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Import an existing workerpool from the cluster instead of creating a new
        """
        return pulumi.get(self, "import_on_create")

    @import_on_create.setter
    def import_on_create(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "import_on_create", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        list of labels to worker pool
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        worker nodes machine type
        """
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "machine_type", value)

    @_builtins.property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The operating system of the workers in the worker pool.
        """
        return pulumi.get(self, "operating_system")

    @operating_system.setter
    def operating_system(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "operating_system", value)

    @_builtins.property
    @pulumi.getter(name="orphanOnDelete")
    def orphan_on_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Orphan the workerpool resource instead of deleting it
        """
        return pulumi.get(self, "orphan_on_delete")

    @orphan_on_delete.setter
    def orphan_on_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "orphan_on_delete", value)

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The worker pool region
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL of the IBM Cloud dashboard that can be used to explore and view details about this cluster
        """
        return pulumi.get(self, "resource_controller_url")

    @resource_controller_url.setter
    def resource_controller_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_controller_url", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter(name="sizePerZone")
    def size_per_zone(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Number of nodes per zone
        """
        return pulumi.get(self, "size_per_zone")

    @size_per_zone.setter
    def size_per_zone(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "size_per_zone", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        worker pool state
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)

    @_builtins.property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerWorkerPoolTaintArgs']]]]:
        """
        WorkerPool Taints
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerWorkerPoolTaintArgs']]]]):
        pulumi.set(self, "taints", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ContainerWorkerPoolTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ContainerWorkerPoolTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "worker_pool_id")

    @worker_pool_id.setter
    def worker_pool_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "worker_pool_id", value)

    @_builtins.property
    @pulumi.getter(name="workerPoolName")
    def worker_pool_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        worker pool name
        """
        return pulumi.get(self, "worker_pool_name")

    @worker_pool_name.setter
    def worker_pool_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "worker_pool_name", value)

    @_builtins.property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerWorkerPoolZoneArgs']]]]:
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerWorkerPoolZoneArgs']]]]):
        pulumi.set(self, "zones", value)


@pulumi.type_token("ibm:index/containerWorkerPool:ContainerWorkerPool")
class ContainerWorkerPool(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 container_worker_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 disk_encryption: Optional[pulumi.Input[_builtins.bool]] = None,
                 entitlement: Optional[pulumi.Input[_builtins.str]] = None,
                 hardware: Optional[pulumi.Input[_builtins.str]] = None,
                 import_on_create: Optional[pulumi.Input[_builtins.bool]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 machine_type: Optional[pulumi.Input[_builtins.str]] = None,
                 operating_system: Optional[pulumi.Input[_builtins.str]] = None,
                 orphan_on_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 size_per_zone: Optional[pulumi.Input[_builtins.float]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerWorkerPoolTaintArgs', 'ContainerWorkerPoolTaintArgsDict']]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['ContainerWorkerPoolTimeoutsArgs', 'ContainerWorkerPoolTimeoutsArgsDict']]] = None,
                 worker_pool_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a ContainerWorkerPool resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster: Cluster name
        :param pulumi.Input[_builtins.bool] disk_encryption: worker node disk encrypted if set to true
        :param pulumi.Input[_builtins.str] entitlement: Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        :param pulumi.Input[_builtins.str] hardware: Hardware type
        :param pulumi.Input[_builtins.bool] import_on_create: Import an existing workerpool from the cluster instead of creating a new
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: list of labels to worker pool
        :param pulumi.Input[_builtins.str] machine_type: worker nodes machine type
        :param pulumi.Input[_builtins.str] operating_system: The operating system of the workers in the worker pool.
        :param pulumi.Input[_builtins.bool] orphan_on_delete: Orphan the workerpool resource instead of deleting it
        :param pulumi.Input[_builtins.str] region: The worker pool region
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.float] size_per_zone: Number of nodes per zone
        :param pulumi.Input[Sequence[pulumi.Input[Union['ContainerWorkerPoolTaintArgs', 'ContainerWorkerPoolTaintArgsDict']]]] taints: WorkerPool Taints
        :param pulumi.Input[_builtins.str] worker_pool_name: worker pool name
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ContainerWorkerPoolArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ContainerWorkerPool resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ContainerWorkerPoolArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ContainerWorkerPoolArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 container_worker_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 disk_encryption: Optional[pulumi.Input[_builtins.bool]] = None,
                 entitlement: Optional[pulumi.Input[_builtins.str]] = None,
                 hardware: Optional[pulumi.Input[_builtins.str]] = None,
                 import_on_create: Optional[pulumi.Input[_builtins.bool]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 machine_type: Optional[pulumi.Input[_builtins.str]] = None,
                 operating_system: Optional[pulumi.Input[_builtins.str]] = None,
                 orphan_on_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 size_per_zone: Optional[pulumi.Input[_builtins.float]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerWorkerPoolTaintArgs', 'ContainerWorkerPoolTaintArgsDict']]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['ContainerWorkerPoolTimeoutsArgs', 'ContainerWorkerPoolTimeoutsArgsDict']]] = None,
                 worker_pool_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ContainerWorkerPoolArgs.__new__(ContainerWorkerPoolArgs)

            if cluster is None and not opts.urn:
                raise TypeError("Missing required property 'cluster'")
            __props__.__dict__["cluster"] = cluster
            __props__.__dict__["container_worker_pool_id"] = container_worker_pool_id
            __props__.__dict__["disk_encryption"] = disk_encryption
            __props__.__dict__["entitlement"] = entitlement
            __props__.__dict__["hardware"] = hardware
            __props__.__dict__["import_on_create"] = import_on_create
            __props__.__dict__["labels"] = labels
            if machine_type is None and not opts.urn:
                raise TypeError("Missing required property 'machine_type'")
            __props__.__dict__["machine_type"] = machine_type
            __props__.__dict__["operating_system"] = operating_system
            __props__.__dict__["orphan_on_delete"] = orphan_on_delete
            __props__.__dict__["region"] = region
            __props__.__dict__["resource_group_id"] = resource_group_id
            if size_per_zone is None and not opts.urn:
                raise TypeError("Missing required property 'size_per_zone'")
            __props__.__dict__["size_per_zone"] = size_per_zone
            __props__.__dict__["taints"] = taints
            __props__.__dict__["timeouts"] = timeouts
            if worker_pool_name is None and not opts.urn:
                raise TypeError("Missing required property 'worker_pool_name'")
            __props__.__dict__["worker_pool_name"] = worker_pool_name
            __props__.__dict__["autoscale_enabled"] = None
            __props__.__dict__["resource_controller_url"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["worker_pool_id"] = None
            __props__.__dict__["zones"] = None
        super(ContainerWorkerPool, __self__).__init__(
            'ibm:index/containerWorkerPool:ContainerWorkerPool',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            autoscale_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            cluster: Optional[pulumi.Input[_builtins.str]] = None,
            container_worker_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
            disk_encryption: Optional[pulumi.Input[_builtins.bool]] = None,
            entitlement: Optional[pulumi.Input[_builtins.str]] = None,
            hardware: Optional[pulumi.Input[_builtins.str]] = None,
            import_on_create: Optional[pulumi.Input[_builtins.bool]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            machine_type: Optional[pulumi.Input[_builtins.str]] = None,
            operating_system: Optional[pulumi.Input[_builtins.str]] = None,
            orphan_on_delete: Optional[pulumi.Input[_builtins.bool]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            resource_controller_url: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            size_per_zone: Optional[pulumi.Input[_builtins.float]] = None,
            state: Optional[pulumi.Input[_builtins.str]] = None,
            taints: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerWorkerPoolTaintArgs', 'ContainerWorkerPoolTaintArgsDict']]]]] = None,
            timeouts: Optional[pulumi.Input[Union['ContainerWorkerPoolTimeoutsArgs', 'ContainerWorkerPoolTimeoutsArgsDict']]] = None,
            worker_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
            worker_pool_name: Optional[pulumi.Input[_builtins.str]] = None,
            zones: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerWorkerPoolZoneArgs', 'ContainerWorkerPoolZoneArgsDict']]]]] = None) -> 'ContainerWorkerPool':
        """
        Get an existing ContainerWorkerPool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] autoscale_enabled: Autoscaling is enabled on the workerpool
        :param pulumi.Input[_builtins.str] cluster: Cluster name
        :param pulumi.Input[_builtins.bool] disk_encryption: worker node disk encrypted if set to true
        :param pulumi.Input[_builtins.str] entitlement: Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        :param pulumi.Input[_builtins.str] hardware: Hardware type
        :param pulumi.Input[_builtins.bool] import_on_create: Import an existing workerpool from the cluster instead of creating a new
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: list of labels to worker pool
        :param pulumi.Input[_builtins.str] machine_type: worker nodes machine type
        :param pulumi.Input[_builtins.str] operating_system: The operating system of the workers in the worker pool.
        :param pulumi.Input[_builtins.bool] orphan_on_delete: Orphan the workerpool resource instead of deleting it
        :param pulumi.Input[_builtins.str] region: The worker pool region
        :param pulumi.Input[_builtins.str] resource_controller_url: The URL of the IBM Cloud dashboard that can be used to explore and view details about this cluster
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.float] size_per_zone: Number of nodes per zone
        :param pulumi.Input[_builtins.str] state: worker pool state
        :param pulumi.Input[Sequence[pulumi.Input[Union['ContainerWorkerPoolTaintArgs', 'ContainerWorkerPoolTaintArgsDict']]]] taints: WorkerPool Taints
        :param pulumi.Input[_builtins.str] worker_pool_name: worker pool name
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ContainerWorkerPoolState.__new__(_ContainerWorkerPoolState)

        __props__.__dict__["autoscale_enabled"] = autoscale_enabled
        __props__.__dict__["cluster"] = cluster
        __props__.__dict__["container_worker_pool_id"] = container_worker_pool_id
        __props__.__dict__["disk_encryption"] = disk_encryption
        __props__.__dict__["entitlement"] = entitlement
        __props__.__dict__["hardware"] = hardware
        __props__.__dict__["import_on_create"] = import_on_create
        __props__.__dict__["labels"] = labels
        __props__.__dict__["machine_type"] = machine_type
        __props__.__dict__["operating_system"] = operating_system
        __props__.__dict__["orphan_on_delete"] = orphan_on_delete
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_controller_url"] = resource_controller_url
        __props__.__dict__["resource_group_id"] = resource_group_id
        __props__.__dict__["size_per_zone"] = size_per_zone
        __props__.__dict__["state"] = state
        __props__.__dict__["taints"] = taints
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["worker_pool_id"] = worker_pool_id
        __props__.__dict__["worker_pool_name"] = worker_pool_name
        __props__.__dict__["zones"] = zones
        return ContainerWorkerPool(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="autoscaleEnabled")
    def autoscale_enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        Autoscaling is enabled on the workerpool
        """
        return pulumi.get(self, "autoscale_enabled")

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> pulumi.Output[_builtins.str]:
        """
        Cluster name
        """
        return pulumi.get(self, "cluster")

    @_builtins.property
    @pulumi.getter(name="containerWorkerPoolId")
    def container_worker_pool_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "container_worker_pool_id")

    @_builtins.property
    @pulumi.getter(name="diskEncryption")
    def disk_encryption(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        worker node disk encrypted if set to true
        """
        return pulumi.get(self, "disk_encryption")

    @_builtins.property
    @pulumi.getter
    def entitlement(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        """
        return pulumi.get(self, "entitlement")

    @_builtins.property
    @pulumi.getter
    def hardware(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Hardware type
        """
        return pulumi.get(self, "hardware")

    @_builtins.property
    @pulumi.getter(name="importOnCreate")
    def import_on_create(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Import an existing workerpool from the cluster instead of creating a new
        """
        return pulumi.get(self, "import_on_create")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        list of labels to worker pool
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> pulumi.Output[_builtins.str]:
        """
        worker nodes machine type
        """
        return pulumi.get(self, "machine_type")

    @_builtins.property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> pulumi.Output[_builtins.str]:
        """
        The operating system of the workers in the worker pool.
        """
        return pulumi.get(self, "operating_system")

    @_builtins.property
    @pulumi.getter(name="orphanOnDelete")
    def orphan_on_delete(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Orphan the workerpool resource instead of deleting it
        """
        return pulumi.get(self, "orphan_on_delete")

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The worker pool region
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> pulumi.Output[_builtins.str]:
        """
        The URL of the IBM Cloud dashboard that can be used to explore and view details about this cluster
        """
        return pulumi.get(self, "resource_controller_url")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter(name="sizePerZone")
    def size_per_zone(self) -> pulumi.Output[_builtins.float]:
        """
        Number of nodes per zone
        """
        return pulumi.get(self, "size_per_zone")

    @_builtins.property
    @pulumi.getter
    def state(self) -> pulumi.Output[_builtins.str]:
        """
        worker pool state
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def taints(self) -> pulumi.Output[Optional[Sequence['outputs.ContainerWorkerPoolTaint']]]:
        """
        WorkerPool Taints
        """
        return pulumi.get(self, "taints")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.ContainerWorkerPoolTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "worker_pool_id")

    @_builtins.property
    @pulumi.getter(name="workerPoolName")
    def worker_pool_name(self) -> pulumi.Output[_builtins.str]:
        """
        worker pool name
        """
        return pulumi.get(self, "worker_pool_name")

    @_builtins.property
    @pulumi.getter
    def zones(self) -> pulumi.Output[Sequence['outputs.ContainerWorkerPoolZone']]:
        return pulumi.get(self, "zones")

