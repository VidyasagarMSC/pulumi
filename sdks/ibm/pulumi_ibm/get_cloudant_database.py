# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCloudantDatabaseResult',
    'AwaitableGetCloudantDatabaseResult',
    'get_cloudant_database',
    'get_cloudant_database_output',
]

@pulumi.output_type
class GetCloudantDatabaseResult:
    """
    A collection of values returned by getCloudantDatabase.
    """
    def __init__(__self__, clusters=None, committed_update_seq=None, compact_running=None, compacted_seq=None, db=None, disk_format_version=None, doc_count=None, doc_del_count=None, engine=None, id=None, instance_crn=None, props=None, sizes=None, update_seq=None, uuid=None):
        if clusters and not isinstance(clusters, list):
            raise TypeError("Expected argument 'clusters' to be a list")
        pulumi.set(__self__, "clusters", clusters)
        if committed_update_seq and not isinstance(committed_update_seq, str):
            raise TypeError("Expected argument 'committed_update_seq' to be a str")
        pulumi.set(__self__, "committed_update_seq", committed_update_seq)
        if compact_running and not isinstance(compact_running, bool):
            raise TypeError("Expected argument 'compact_running' to be a bool")
        pulumi.set(__self__, "compact_running", compact_running)
        if compacted_seq and not isinstance(compacted_seq, str):
            raise TypeError("Expected argument 'compacted_seq' to be a str")
        pulumi.set(__self__, "compacted_seq", compacted_seq)
        if db and not isinstance(db, str):
            raise TypeError("Expected argument 'db' to be a str")
        pulumi.set(__self__, "db", db)
        if disk_format_version and not isinstance(disk_format_version, float):
            raise TypeError("Expected argument 'disk_format_version' to be a float")
        pulumi.set(__self__, "disk_format_version", disk_format_version)
        if doc_count and not isinstance(doc_count, float):
            raise TypeError("Expected argument 'doc_count' to be a float")
        pulumi.set(__self__, "doc_count", doc_count)
        if doc_del_count and not isinstance(doc_del_count, float):
            raise TypeError("Expected argument 'doc_del_count' to be a float")
        pulumi.set(__self__, "doc_del_count", doc_del_count)
        if engine and not isinstance(engine, str):
            raise TypeError("Expected argument 'engine' to be a str")
        pulumi.set(__self__, "engine", engine)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_crn and not isinstance(instance_crn, str):
            raise TypeError("Expected argument 'instance_crn' to be a str")
        pulumi.set(__self__, "instance_crn", instance_crn)
        if props and not isinstance(props, list):
            raise TypeError("Expected argument 'props' to be a list")
        pulumi.set(__self__, "props", props)
        if sizes and not isinstance(sizes, list):
            raise TypeError("Expected argument 'sizes' to be a list")
        pulumi.set(__self__, "sizes", sizes)
        if update_seq and not isinstance(update_seq, str):
            raise TypeError("Expected argument 'update_seq' to be a str")
        pulumi.set(__self__, "update_seq", update_seq)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)

    @_builtins.property
    @pulumi.getter
    def clusters(self) -> Sequence['outputs.GetCloudantDatabaseClusterResult']:
        return pulumi.get(self, "clusters")

    @_builtins.property
    @pulumi.getter(name="committedUpdateSeq")
    def committed_update_seq(self) -> _builtins.str:
        return pulumi.get(self, "committed_update_seq")

    @_builtins.property
    @pulumi.getter(name="compactRunning")
    def compact_running(self) -> _builtins.bool:
        return pulumi.get(self, "compact_running")

    @_builtins.property
    @pulumi.getter(name="compactedSeq")
    def compacted_seq(self) -> _builtins.str:
        return pulumi.get(self, "compacted_seq")

    @_builtins.property
    @pulumi.getter
    def db(self) -> _builtins.str:
        return pulumi.get(self, "db")

    @_builtins.property
    @pulumi.getter(name="diskFormatVersion")
    def disk_format_version(self) -> _builtins.float:
        return pulumi.get(self, "disk_format_version")

    @_builtins.property
    @pulumi.getter(name="docCount")
    def doc_count(self) -> _builtins.float:
        return pulumi.get(self, "doc_count")

    @_builtins.property
    @pulumi.getter(name="docDelCount")
    def doc_del_count(self) -> _builtins.float:
        return pulumi.get(self, "doc_del_count")

    @_builtins.property
    @pulumi.getter
    def engine(self) -> _builtins.str:
        return pulumi.get(self, "engine")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceCrn")
    def instance_crn(self) -> _builtins.str:
        return pulumi.get(self, "instance_crn")

    @_builtins.property
    @pulumi.getter
    def props(self) -> Sequence['outputs.GetCloudantDatabasePropResult']:
        return pulumi.get(self, "props")

    @_builtins.property
    @pulumi.getter
    def sizes(self) -> Sequence['outputs.GetCloudantDatabaseSizeResult']:
        return pulumi.get(self, "sizes")

    @_builtins.property
    @pulumi.getter(name="updateSeq")
    def update_seq(self) -> _builtins.str:
        return pulumi.get(self, "update_seq")

    @_builtins.property
    @pulumi.getter
    def uuid(self) -> _builtins.str:
        return pulumi.get(self, "uuid")


class AwaitableGetCloudantDatabaseResult(GetCloudantDatabaseResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCloudantDatabaseResult(
            clusters=self.clusters,
            committed_update_seq=self.committed_update_seq,
            compact_running=self.compact_running,
            compacted_seq=self.compacted_seq,
            db=self.db,
            disk_format_version=self.disk_format_version,
            doc_count=self.doc_count,
            doc_del_count=self.doc_del_count,
            engine=self.engine,
            id=self.id,
            instance_crn=self.instance_crn,
            props=self.props,
            sizes=self.sizes,
            update_seq=self.update_seq,
            uuid=self.uuid)


def get_cloudant_database(db: Optional[_builtins.str] = None,
                          id: Optional[_builtins.str] = None,
                          instance_crn: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCloudantDatabaseResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['db'] = db
    __args__['id'] = id
    __args__['instanceCrn'] = instance_crn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCloudantDatabase:getCloudantDatabase', __args__, opts=opts, typ=GetCloudantDatabaseResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCloudantDatabaseResult(
        clusters=pulumi.get(__ret__, 'clusters'),
        committed_update_seq=pulumi.get(__ret__, 'committed_update_seq'),
        compact_running=pulumi.get(__ret__, 'compact_running'),
        compacted_seq=pulumi.get(__ret__, 'compacted_seq'),
        db=pulumi.get(__ret__, 'db'),
        disk_format_version=pulumi.get(__ret__, 'disk_format_version'),
        doc_count=pulumi.get(__ret__, 'doc_count'),
        doc_del_count=pulumi.get(__ret__, 'doc_del_count'),
        engine=pulumi.get(__ret__, 'engine'),
        id=pulumi.get(__ret__, 'id'),
        instance_crn=pulumi.get(__ret__, 'instance_crn'),
        props=pulumi.get(__ret__, 'props'),
        sizes=pulumi.get(__ret__, 'sizes'),
        update_seq=pulumi.get(__ret__, 'update_seq'),
        uuid=pulumi.get(__ret__, 'uuid'))
def get_cloudant_database_output(db: Optional[pulumi.Input[_builtins.str]] = None,
                                 id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 instance_crn: Optional[pulumi.Input[_builtins.str]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCloudantDatabaseResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['db'] = db
    __args__['id'] = id
    __args__['instanceCrn'] = instance_crn
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCloudantDatabase:getCloudantDatabase', __args__, opts=opts, typ=GetCloudantDatabaseResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCloudantDatabaseResult(
        clusters=pulumi.get(__response__, 'clusters'),
        committed_update_seq=pulumi.get(__response__, 'committed_update_seq'),
        compact_running=pulumi.get(__response__, 'compact_running'),
        compacted_seq=pulumi.get(__response__, 'compacted_seq'),
        db=pulumi.get(__response__, 'db'),
        disk_format_version=pulumi.get(__response__, 'disk_format_version'),
        doc_count=pulumi.get(__response__, 'doc_count'),
        doc_del_count=pulumi.get(__response__, 'doc_del_count'),
        engine=pulumi.get(__response__, 'engine'),
        id=pulumi.get(__response__, 'id'),
        instance_crn=pulumi.get(__response__, 'instance_crn'),
        props=pulumi.get(__response__, 'props'),
        sizes=pulumi.get(__response__, 'sizes'),
        update_seq=pulumi.get(__response__, 'update_seq'),
        uuid=pulumi.get(__response__, 'uuid')))
