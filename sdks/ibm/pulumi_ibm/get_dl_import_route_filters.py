# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetDlImportRouteFiltersResult',
    'AwaitableGetDlImportRouteFiltersResult',
    'get_dl_import_route_filters',
    'get_dl_import_route_filters_output',
]

@pulumi.output_type
class GetDlImportRouteFiltersResult:
    """
    A collection of values returned by getDlImportRouteFilters.
    """
    def __init__(__self__, gateway=None, id=None, import_route_filters=None):
        if gateway and not isinstance(gateway, str):
            raise TypeError("Expected argument 'gateway' to be a str")
        pulumi.set(__self__, "gateway", gateway)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if import_route_filters and not isinstance(import_route_filters, list):
            raise TypeError("Expected argument 'import_route_filters' to be a list")
        pulumi.set(__self__, "import_route_filters", import_route_filters)

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> _builtins.str:
        return pulumi.get(self, "gateway")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="importRouteFilters")
    def import_route_filters(self) -> Sequence['outputs.GetDlImportRouteFiltersImportRouteFilterResult']:
        return pulumi.get(self, "import_route_filters")


class AwaitableGetDlImportRouteFiltersResult(GetDlImportRouteFiltersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDlImportRouteFiltersResult(
            gateway=self.gateway,
            id=self.id,
            import_route_filters=self.import_route_filters)


def get_dl_import_route_filters(gateway: Optional[_builtins.str] = None,
                                id: Optional[_builtins.str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDlImportRouteFiltersResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['gateway'] = gateway
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getDlImportRouteFilters:getDlImportRouteFilters', __args__, opts=opts, typ=GetDlImportRouteFiltersResult, package_ref=_utilities.get_package()).value

    return AwaitableGetDlImportRouteFiltersResult(
        gateway=pulumi.get(__ret__, 'gateway'),
        id=pulumi.get(__ret__, 'id'),
        import_route_filters=pulumi.get(__ret__, 'import_route_filters'))
def get_dl_import_route_filters_output(gateway: Optional[pulumi.Input[_builtins.str]] = None,
                                       id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDlImportRouteFiltersResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['gateway'] = gateway
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getDlImportRouteFilters:getDlImportRouteFilters', __args__, opts=opts, typ=GetDlImportRouteFiltersResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetDlImportRouteFiltersResult(
        gateway=pulumi.get(__response__, 'gateway'),
        id=pulumi.get(__response__, 'id'),
        import_route_filters=pulumi.get(__response__, 'import_route_filters')))
