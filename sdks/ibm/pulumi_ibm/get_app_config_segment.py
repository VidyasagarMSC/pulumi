# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetAppConfigSegmentResult',
    'AwaitableGetAppConfigSegmentResult',
    'get_app_config_segment',
    'get_app_config_segment_output',
]

@pulumi.output_type
class GetAppConfigSegmentResult:
    """
    A collection of values returned by getAppConfigSegment.
    """
    def __init__(__self__, created_time=None, description=None, features=None, guid=None, href=None, id=None, includes=None, name=None, properties=None, rules=None, segment_id=None, tags=None, updated_time=None):
        if created_time and not isinstance(created_time, str):
            raise TypeError("Expected argument 'created_time' to be a str")
        pulumi.set(__self__, "created_time", created_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if features and not isinstance(features, list):
            raise TypeError("Expected argument 'features' to be a list")
        pulumi.set(__self__, "features", features)
        if guid and not isinstance(guid, str):
            raise TypeError("Expected argument 'guid' to be a str")
        pulumi.set(__self__, "guid", guid)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if includes and not isinstance(includes, list):
            raise TypeError("Expected argument 'includes' to be a list")
        pulumi.set(__self__, "includes", includes)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if properties and not isinstance(properties, list):
            raise TypeError("Expected argument 'properties' to be a list")
        pulumi.set(__self__, "properties", properties)
        if rules and not isinstance(rules, list):
            raise TypeError("Expected argument 'rules' to be a list")
        pulumi.set(__self__, "rules", rules)
        if segment_id and not isinstance(segment_id, str):
            raise TypeError("Expected argument 'segment_id' to be a str")
        pulumi.set(__self__, "segment_id", segment_id)
        if tags and not isinstance(tags, str):
            raise TypeError("Expected argument 'tags' to be a str")
        pulumi.set(__self__, "tags", tags)
        if updated_time and not isinstance(updated_time, str):
            raise TypeError("Expected argument 'updated_time' to be a str")
        pulumi.set(__self__, "updated_time", updated_time)

    @_builtins.property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> _builtins.str:
        return pulumi.get(self, "created_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def features(self) -> Sequence['outputs.GetAppConfigSegmentFeatureResult']:
        return pulumi.get(self, "features")

    @_builtins.property
    @pulumi.getter
    def guid(self) -> _builtins.str:
        return pulumi.get(self, "guid")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def includes(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "includes")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetAppConfigSegmentPropertyResult']:
        return pulumi.get(self, "properties")

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetAppConfigSegmentRuleResult']:
        return pulumi.get(self, "rules")

    @_builtins.property
    @pulumi.getter(name="segmentId")
    def segment_id(self) -> _builtins.str:
        return pulumi.get(self, "segment_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> _builtins.str:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> _builtins.str:
        return pulumi.get(self, "updated_time")


class AwaitableGetAppConfigSegmentResult(GetAppConfigSegmentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppConfigSegmentResult(
            created_time=self.created_time,
            description=self.description,
            features=self.features,
            guid=self.guid,
            href=self.href,
            id=self.id,
            includes=self.includes,
            name=self.name,
            properties=self.properties,
            rules=self.rules,
            segment_id=self.segment_id,
            tags=self.tags,
            updated_time=self.updated_time)


def get_app_config_segment(guid: Optional[_builtins.str] = None,
                           id: Optional[_builtins.str] = None,
                           includes: Optional[Sequence[_builtins.str]] = None,
                           segment_id: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppConfigSegmentResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['guid'] = guid
    __args__['id'] = id
    __args__['includes'] = includes
    __args__['segmentId'] = segment_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getAppConfigSegment:getAppConfigSegment', __args__, opts=opts, typ=GetAppConfigSegmentResult, package_ref=_utilities.get_package()).value

    return AwaitableGetAppConfigSegmentResult(
        created_time=pulumi.get(__ret__, 'created_time'),
        description=pulumi.get(__ret__, 'description'),
        features=pulumi.get(__ret__, 'features'),
        guid=pulumi.get(__ret__, 'guid'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        includes=pulumi.get(__ret__, 'includes'),
        name=pulumi.get(__ret__, 'name'),
        properties=pulumi.get(__ret__, 'properties'),
        rules=pulumi.get(__ret__, 'rules'),
        segment_id=pulumi.get(__ret__, 'segment_id'),
        tags=pulumi.get(__ret__, 'tags'),
        updated_time=pulumi.get(__ret__, 'updated_time'))
def get_app_config_segment_output(guid: Optional[pulumi.Input[_builtins.str]] = None,
                                  id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  includes: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                  segment_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppConfigSegmentResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['guid'] = guid
    __args__['id'] = id
    __args__['includes'] = includes
    __args__['segmentId'] = segment_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getAppConfigSegment:getAppConfigSegment', __args__, opts=opts, typ=GetAppConfigSegmentResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetAppConfigSegmentResult(
        created_time=pulumi.get(__response__, 'created_time'),
        description=pulumi.get(__response__, 'description'),
        features=pulumi.get(__response__, 'features'),
        guid=pulumi.get(__response__, 'guid'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        includes=pulumi.get(__response__, 'includes'),
        name=pulumi.get(__response__, 'name'),
        properties=pulumi.get(__response__, 'properties'),
        rules=pulumi.get(__response__, 'rules'),
        segment_id=pulumi.get(__response__, 'segment_id'),
        tags=pulumi.get(__response__, 'tags'),
        updated_time=pulumi.get(__response__, 'updated_time')))
