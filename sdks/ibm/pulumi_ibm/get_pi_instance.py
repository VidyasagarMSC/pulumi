# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetPiInstanceResult',
    'AwaitableGetPiInstanceResult',
    'get_pi_instance',
    'get_pi_instance_output',
]

@pulumi.output_type
class GetPiInstanceResult:
    """
    A collection of values returned by getPiInstance.
    """
    def __init__(__self__, crn=None, dedicated_host_id=None, deployment_type=None, fault=None, health_status=None, ibmi_css=None, ibmi_pha=None, ibmi_rds=None, ibmi_rds_users=None, id=None, license_repository_capacity=None, max_virtual_cores=None, maxmem=None, maxproc=None, memory=None, min_virtual_cores=None, minmem=None, minproc=None, networks=None, pi_cloud_instance_id=None, pi_instance_name=None, pin_policy=None, placement_group_id=None, processors=None, proctype=None, server_name=None, shared_processor_pool=None, shared_processor_pool_id=None, status=None, storage_connection=None, storage_pool=None, storage_pool_affinity=None, storage_type=None, user_tags=None, virtual_cores_assigned=None, virtual_serial_numbers=None, volumes=None):
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if dedicated_host_id and not isinstance(dedicated_host_id, str):
            raise TypeError("Expected argument 'dedicated_host_id' to be a str")
        pulumi.set(__self__, "dedicated_host_id", dedicated_host_id)
        if deployment_type and not isinstance(deployment_type, str):
            raise TypeError("Expected argument 'deployment_type' to be a str")
        pulumi.set(__self__, "deployment_type", deployment_type)
        if fault and not isinstance(fault, dict):
            raise TypeError("Expected argument 'fault' to be a dict")
        pulumi.set(__self__, "fault", fault)
        if health_status and not isinstance(health_status, str):
            raise TypeError("Expected argument 'health_status' to be a str")
        pulumi.set(__self__, "health_status", health_status)
        if ibmi_css and not isinstance(ibmi_css, bool):
            raise TypeError("Expected argument 'ibmi_css' to be a bool")
        pulumi.set(__self__, "ibmi_css", ibmi_css)
        if ibmi_pha and not isinstance(ibmi_pha, bool):
            raise TypeError("Expected argument 'ibmi_pha' to be a bool")
        pulumi.set(__self__, "ibmi_pha", ibmi_pha)
        if ibmi_rds and not isinstance(ibmi_rds, bool):
            raise TypeError("Expected argument 'ibmi_rds' to be a bool")
        pulumi.set(__self__, "ibmi_rds", ibmi_rds)
        if ibmi_rds_users and not isinstance(ibmi_rds_users, float):
            raise TypeError("Expected argument 'ibmi_rds_users' to be a float")
        pulumi.set(__self__, "ibmi_rds_users", ibmi_rds_users)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if license_repository_capacity and not isinstance(license_repository_capacity, float):
            raise TypeError("Expected argument 'license_repository_capacity' to be a float")
        pulumi.set(__self__, "license_repository_capacity", license_repository_capacity)
        if max_virtual_cores and not isinstance(max_virtual_cores, float):
            raise TypeError("Expected argument 'max_virtual_cores' to be a float")
        pulumi.set(__self__, "max_virtual_cores", max_virtual_cores)
        if maxmem and not isinstance(maxmem, float):
            raise TypeError("Expected argument 'maxmem' to be a float")
        pulumi.set(__self__, "maxmem", maxmem)
        if maxproc and not isinstance(maxproc, float):
            raise TypeError("Expected argument 'maxproc' to be a float")
        pulumi.set(__self__, "maxproc", maxproc)
        if memory and not isinstance(memory, float):
            raise TypeError("Expected argument 'memory' to be a float")
        pulumi.set(__self__, "memory", memory)
        if min_virtual_cores and not isinstance(min_virtual_cores, float):
            raise TypeError("Expected argument 'min_virtual_cores' to be a float")
        pulumi.set(__self__, "min_virtual_cores", min_virtual_cores)
        if minmem and not isinstance(minmem, float):
            raise TypeError("Expected argument 'minmem' to be a float")
        pulumi.set(__self__, "minmem", minmem)
        if minproc and not isinstance(minproc, float):
            raise TypeError("Expected argument 'minproc' to be a float")
        pulumi.set(__self__, "minproc", minproc)
        if networks and not isinstance(networks, list):
            raise TypeError("Expected argument 'networks' to be a list")
        pulumi.set(__self__, "networks", networks)
        if pi_cloud_instance_id and not isinstance(pi_cloud_instance_id, str):
            raise TypeError("Expected argument 'pi_cloud_instance_id' to be a str")
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_instance_name and not isinstance(pi_instance_name, str):
            raise TypeError("Expected argument 'pi_instance_name' to be a str")
        pulumi.set(__self__, "pi_instance_name", pi_instance_name)
        if pin_policy and not isinstance(pin_policy, str):
            raise TypeError("Expected argument 'pin_policy' to be a str")
        pulumi.set(__self__, "pin_policy", pin_policy)
        if placement_group_id and not isinstance(placement_group_id, str):
            raise TypeError("Expected argument 'placement_group_id' to be a str")
        pulumi.set(__self__, "placement_group_id", placement_group_id)
        if processors and not isinstance(processors, float):
            raise TypeError("Expected argument 'processors' to be a float")
        pulumi.set(__self__, "processors", processors)
        if proctype and not isinstance(proctype, str):
            raise TypeError("Expected argument 'proctype' to be a str")
        pulumi.set(__self__, "proctype", proctype)
        if server_name and not isinstance(server_name, str):
            raise TypeError("Expected argument 'server_name' to be a str")
        pulumi.set(__self__, "server_name", server_name)
        if shared_processor_pool and not isinstance(shared_processor_pool, str):
            raise TypeError("Expected argument 'shared_processor_pool' to be a str")
        pulumi.set(__self__, "shared_processor_pool", shared_processor_pool)
        if shared_processor_pool_id and not isinstance(shared_processor_pool_id, str):
            raise TypeError("Expected argument 'shared_processor_pool_id' to be a str")
        pulumi.set(__self__, "shared_processor_pool_id", shared_processor_pool_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if storage_connection and not isinstance(storage_connection, str):
            raise TypeError("Expected argument 'storage_connection' to be a str")
        pulumi.set(__self__, "storage_connection", storage_connection)
        if storage_pool and not isinstance(storage_pool, str):
            raise TypeError("Expected argument 'storage_pool' to be a str")
        pulumi.set(__self__, "storage_pool", storage_pool)
        if storage_pool_affinity and not isinstance(storage_pool_affinity, bool):
            raise TypeError("Expected argument 'storage_pool_affinity' to be a bool")
        pulumi.set(__self__, "storage_pool_affinity", storage_pool_affinity)
        if storage_type and not isinstance(storage_type, str):
            raise TypeError("Expected argument 'storage_type' to be a str")
        pulumi.set(__self__, "storage_type", storage_type)
        if user_tags and not isinstance(user_tags, list):
            raise TypeError("Expected argument 'user_tags' to be a list")
        pulumi.set(__self__, "user_tags", user_tags)
        if virtual_cores_assigned and not isinstance(virtual_cores_assigned, float):
            raise TypeError("Expected argument 'virtual_cores_assigned' to be a float")
        pulumi.set(__self__, "virtual_cores_assigned", virtual_cores_assigned)
        if virtual_serial_numbers and not isinstance(virtual_serial_numbers, list):
            raise TypeError("Expected argument 'virtual_serial_numbers' to be a list")
        pulumi.set(__self__, "virtual_serial_numbers", virtual_serial_numbers)
        if volumes and not isinstance(volumes, list):
            raise TypeError("Expected argument 'volumes' to be a list")
        pulumi.set(__self__, "volumes", volumes)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="dedicatedHostId")
    def dedicated_host_id(self) -> _builtins.str:
        return pulumi.get(self, "dedicated_host_id")

    @_builtins.property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> _builtins.str:
        return pulumi.get(self, "deployment_type")

    @_builtins.property
    @pulumi.getter
    def fault(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "fault")

    @_builtins.property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> _builtins.str:
        return pulumi.get(self, "health_status")

    @_builtins.property
    @pulumi.getter(name="ibmiCss")
    def ibmi_css(self) -> _builtins.bool:
        return pulumi.get(self, "ibmi_css")

    @_builtins.property
    @pulumi.getter(name="ibmiPha")
    def ibmi_pha(self) -> _builtins.bool:
        return pulumi.get(self, "ibmi_pha")

    @_builtins.property
    @pulumi.getter(name="ibmiRds")
    def ibmi_rds(self) -> _builtins.bool:
        return pulumi.get(self, "ibmi_rds")

    @_builtins.property
    @pulumi.getter(name="ibmiRdsUsers")
    def ibmi_rds_users(self) -> _builtins.float:
        return pulumi.get(self, "ibmi_rds_users")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="licenseRepositoryCapacity")
    def license_repository_capacity(self) -> _builtins.float:
        return pulumi.get(self, "license_repository_capacity")

    @_builtins.property
    @pulumi.getter(name="maxVirtualCores")
    def max_virtual_cores(self) -> _builtins.float:
        return pulumi.get(self, "max_virtual_cores")

    @_builtins.property
    @pulumi.getter
    def maxmem(self) -> _builtins.float:
        return pulumi.get(self, "maxmem")

    @_builtins.property
    @pulumi.getter
    def maxproc(self) -> _builtins.float:
        return pulumi.get(self, "maxproc")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.float:
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter(name="minVirtualCores")
    def min_virtual_cores(self) -> _builtins.float:
        return pulumi.get(self, "min_virtual_cores")

    @_builtins.property
    @pulumi.getter
    def minmem(self) -> _builtins.float:
        return pulumi.get(self, "minmem")

    @_builtins.property
    @pulumi.getter
    def minproc(self) -> _builtins.float:
        return pulumi.get(self, "minproc")

    @_builtins.property
    @pulumi.getter
    def networks(self) -> Sequence['outputs.GetPiInstanceNetworkResult']:
        return pulumi.get(self, "networks")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piInstanceName")
    def pi_instance_name(self) -> _builtins.str:
        return pulumi.get(self, "pi_instance_name")

    @_builtins.property
    @pulumi.getter(name="pinPolicy")
    def pin_policy(self) -> _builtins.str:
        return pulumi.get(self, "pin_policy")

    @_builtins.property
    @pulumi.getter(name="placementGroupId")
    def placement_group_id(self) -> _builtins.str:
        return pulumi.get(self, "placement_group_id")

    @_builtins.property
    @pulumi.getter
    def processors(self) -> _builtins.float:
        return pulumi.get(self, "processors")

    @_builtins.property
    @pulumi.getter
    def proctype(self) -> _builtins.str:
        return pulumi.get(self, "proctype")

    @_builtins.property
    @pulumi.getter(name="serverName")
    def server_name(self) -> _builtins.str:
        return pulumi.get(self, "server_name")

    @_builtins.property
    @pulumi.getter(name="sharedProcessorPool")
    def shared_processor_pool(self) -> _builtins.str:
        return pulumi.get(self, "shared_processor_pool")

    @_builtins.property
    @pulumi.getter(name="sharedProcessorPoolId")
    def shared_processor_pool_id(self) -> _builtins.str:
        return pulumi.get(self, "shared_processor_pool_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="storageConnection")
    def storage_connection(self) -> _builtins.str:
        return pulumi.get(self, "storage_connection")

    @_builtins.property
    @pulumi.getter(name="storagePool")
    def storage_pool(self) -> _builtins.str:
        return pulumi.get(self, "storage_pool")

    @_builtins.property
    @pulumi.getter(name="storagePoolAffinity")
    def storage_pool_affinity(self) -> _builtins.bool:
        return pulumi.get(self, "storage_pool_affinity")

    @_builtins.property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> _builtins.str:
        return pulumi.get(self, "storage_type")

    @_builtins.property
    @pulumi.getter(name="userTags")
    def user_tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "user_tags")

    @_builtins.property
    @pulumi.getter(name="virtualCoresAssigned")
    def virtual_cores_assigned(self) -> _builtins.float:
        return pulumi.get(self, "virtual_cores_assigned")

    @_builtins.property
    @pulumi.getter(name="virtualSerialNumbers")
    def virtual_serial_numbers(self) -> Sequence['outputs.GetPiInstanceVirtualSerialNumberResult']:
        return pulumi.get(self, "virtual_serial_numbers")

    @_builtins.property
    @pulumi.getter
    def volumes(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "volumes")


class AwaitableGetPiInstanceResult(GetPiInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPiInstanceResult(
            crn=self.crn,
            dedicated_host_id=self.dedicated_host_id,
            deployment_type=self.deployment_type,
            fault=self.fault,
            health_status=self.health_status,
            ibmi_css=self.ibmi_css,
            ibmi_pha=self.ibmi_pha,
            ibmi_rds=self.ibmi_rds,
            ibmi_rds_users=self.ibmi_rds_users,
            id=self.id,
            license_repository_capacity=self.license_repository_capacity,
            max_virtual_cores=self.max_virtual_cores,
            maxmem=self.maxmem,
            maxproc=self.maxproc,
            memory=self.memory,
            min_virtual_cores=self.min_virtual_cores,
            minmem=self.minmem,
            minproc=self.minproc,
            networks=self.networks,
            pi_cloud_instance_id=self.pi_cloud_instance_id,
            pi_instance_name=self.pi_instance_name,
            pin_policy=self.pin_policy,
            placement_group_id=self.placement_group_id,
            processors=self.processors,
            proctype=self.proctype,
            server_name=self.server_name,
            shared_processor_pool=self.shared_processor_pool,
            shared_processor_pool_id=self.shared_processor_pool_id,
            status=self.status,
            storage_connection=self.storage_connection,
            storage_pool=self.storage_pool,
            storage_pool_affinity=self.storage_pool_affinity,
            storage_type=self.storage_type,
            user_tags=self.user_tags,
            virtual_cores_assigned=self.virtual_cores_assigned,
            virtual_serial_numbers=self.virtual_serial_numbers,
            volumes=self.volumes)


def get_pi_instance(id: Optional[_builtins.str] = None,
                    pi_cloud_instance_id: Optional[_builtins.str] = None,
                    pi_instance_name: Optional[_builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPiInstanceResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piInstanceName'] = pi_instance_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getPiInstance:getPiInstance', __args__, opts=opts, typ=GetPiInstanceResult, package_ref=_utilities.get_package()).value

    return AwaitableGetPiInstanceResult(
        crn=pulumi.get(__ret__, 'crn'),
        dedicated_host_id=pulumi.get(__ret__, 'dedicated_host_id'),
        deployment_type=pulumi.get(__ret__, 'deployment_type'),
        fault=pulumi.get(__ret__, 'fault'),
        health_status=pulumi.get(__ret__, 'health_status'),
        ibmi_css=pulumi.get(__ret__, 'ibmi_css'),
        ibmi_pha=pulumi.get(__ret__, 'ibmi_pha'),
        ibmi_rds=pulumi.get(__ret__, 'ibmi_rds'),
        ibmi_rds_users=pulumi.get(__ret__, 'ibmi_rds_users'),
        id=pulumi.get(__ret__, 'id'),
        license_repository_capacity=pulumi.get(__ret__, 'license_repository_capacity'),
        max_virtual_cores=pulumi.get(__ret__, 'max_virtual_cores'),
        maxmem=pulumi.get(__ret__, 'maxmem'),
        maxproc=pulumi.get(__ret__, 'maxproc'),
        memory=pulumi.get(__ret__, 'memory'),
        min_virtual_cores=pulumi.get(__ret__, 'min_virtual_cores'),
        minmem=pulumi.get(__ret__, 'minmem'),
        minproc=pulumi.get(__ret__, 'minproc'),
        networks=pulumi.get(__ret__, 'networks'),
        pi_cloud_instance_id=pulumi.get(__ret__, 'pi_cloud_instance_id'),
        pi_instance_name=pulumi.get(__ret__, 'pi_instance_name'),
        pin_policy=pulumi.get(__ret__, 'pin_policy'),
        placement_group_id=pulumi.get(__ret__, 'placement_group_id'),
        processors=pulumi.get(__ret__, 'processors'),
        proctype=pulumi.get(__ret__, 'proctype'),
        server_name=pulumi.get(__ret__, 'server_name'),
        shared_processor_pool=pulumi.get(__ret__, 'shared_processor_pool'),
        shared_processor_pool_id=pulumi.get(__ret__, 'shared_processor_pool_id'),
        status=pulumi.get(__ret__, 'status'),
        storage_connection=pulumi.get(__ret__, 'storage_connection'),
        storage_pool=pulumi.get(__ret__, 'storage_pool'),
        storage_pool_affinity=pulumi.get(__ret__, 'storage_pool_affinity'),
        storage_type=pulumi.get(__ret__, 'storage_type'),
        user_tags=pulumi.get(__ret__, 'user_tags'),
        virtual_cores_assigned=pulumi.get(__ret__, 'virtual_cores_assigned'),
        virtual_serial_numbers=pulumi.get(__ret__, 'virtual_serial_numbers'),
        volumes=pulumi.get(__ret__, 'volumes'))
def get_pi_instance_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                           pi_instance_name: Optional[pulumi.Input[_builtins.str]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPiInstanceResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piInstanceName'] = pi_instance_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getPiInstance:getPiInstance', __args__, opts=opts, typ=GetPiInstanceResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetPiInstanceResult(
        crn=pulumi.get(__response__, 'crn'),
        dedicated_host_id=pulumi.get(__response__, 'dedicated_host_id'),
        deployment_type=pulumi.get(__response__, 'deployment_type'),
        fault=pulumi.get(__response__, 'fault'),
        health_status=pulumi.get(__response__, 'health_status'),
        ibmi_css=pulumi.get(__response__, 'ibmi_css'),
        ibmi_pha=pulumi.get(__response__, 'ibmi_pha'),
        ibmi_rds=pulumi.get(__response__, 'ibmi_rds'),
        ibmi_rds_users=pulumi.get(__response__, 'ibmi_rds_users'),
        id=pulumi.get(__response__, 'id'),
        license_repository_capacity=pulumi.get(__response__, 'license_repository_capacity'),
        max_virtual_cores=pulumi.get(__response__, 'max_virtual_cores'),
        maxmem=pulumi.get(__response__, 'maxmem'),
        maxproc=pulumi.get(__response__, 'maxproc'),
        memory=pulumi.get(__response__, 'memory'),
        min_virtual_cores=pulumi.get(__response__, 'min_virtual_cores'),
        minmem=pulumi.get(__response__, 'minmem'),
        minproc=pulumi.get(__response__, 'minproc'),
        networks=pulumi.get(__response__, 'networks'),
        pi_cloud_instance_id=pulumi.get(__response__, 'pi_cloud_instance_id'),
        pi_instance_name=pulumi.get(__response__, 'pi_instance_name'),
        pin_policy=pulumi.get(__response__, 'pin_policy'),
        placement_group_id=pulumi.get(__response__, 'placement_group_id'),
        processors=pulumi.get(__response__, 'processors'),
        proctype=pulumi.get(__response__, 'proctype'),
        server_name=pulumi.get(__response__, 'server_name'),
        shared_processor_pool=pulumi.get(__response__, 'shared_processor_pool'),
        shared_processor_pool_id=pulumi.get(__response__, 'shared_processor_pool_id'),
        status=pulumi.get(__response__, 'status'),
        storage_connection=pulumi.get(__response__, 'storage_connection'),
        storage_pool=pulumi.get(__response__, 'storage_pool'),
        storage_pool_affinity=pulumi.get(__response__, 'storage_pool_affinity'),
        storage_type=pulumi.get(__response__, 'storage_type'),
        user_tags=pulumi.get(__response__, 'user_tags'),
        virtual_cores_assigned=pulumi.get(__response__, 'virtual_cores_assigned'),
        virtual_serial_numbers=pulumi.get(__response__, 'virtual_serial_numbers'),
        volumes=pulumi.get(__response__, 'volumes')))
