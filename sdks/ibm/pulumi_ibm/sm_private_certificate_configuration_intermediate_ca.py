# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SmPrivateCertificateConfigurationIntermediateCaArgs', 'SmPrivateCertificateConfigurationIntermediateCa']

@pulumi.input_type
class SmPrivateCertificateConfigurationIntermediateCaArgs:
    def __init__(__self__, *,
                 common_name: pulumi.Input[_builtins.str],
                 instance_id: pulumi.Input[_builtins.str],
                 max_ttl: pulumi.Input[_builtins.str],
                 signing_method: pulumi.Input[_builtins.str],
                 alt_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 countries: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 crl_disable: Optional[pulumi.Input[_builtins.bool]] = None,
                 crl_distribution_points_encoded: Optional[pulumi.Input[_builtins.bool]] = None,
                 crl_expiry: Optional[pulumi.Input[_builtins.str]] = None,
                 crypto_key: Optional[pulumi.Input['SmPrivateCertificateConfigurationIntermediateCaCryptoKeyArgs']] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 exclude_cn_from_sans: Optional[pulumi.Input[_builtins.bool]] = None,
                 format: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_sans: Optional[pulumi.Input[_builtins.str]] = None,
                 issuer: Optional[pulumi.Input[_builtins.str]] = None,
                 issuing_certificates_urls_encoded: Optional[pulumi.Input[_builtins.bool]] = None,
                 key_bits: Optional[pulumi.Input[_builtins.float]] = None,
                 key_type: Optional[pulumi.Input[_builtins.str]] = None,
                 localities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 max_path_length: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organizations: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 other_sans: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 ous: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 permitted_dns_domains: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 postal_codes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 private_key_format: Optional[pulumi.Input[_builtins.str]] = None,
                 provinces: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sm_private_certificate_configuration_intermediate_ca_id: Optional[pulumi.Input[_builtins.str]] = None,
                 street_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 ttl: Optional[pulumi.Input[_builtins.str]] = None,
                 uri_sans: Optional[pulumi.Input[_builtins.str]] = None,
                 use_csr_values: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a SmPrivateCertificateConfigurationIntermediateCa resource.
        :param pulumi.Input[_builtins.str] common_name: The Common Name (AKA CN) represents the server name that is protected by the SSL certificate.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] max_ttl: The maximum time-to-live (TTL) for certificates that are created by this CA.The value can be supplied as a string
               representation of a duration in hours, for example '8760h'. In the API response, this value is returned in seconds
               (integer).Minimum value is one hour (`1h`). Maximum value is 100 years (`876000h`).
        :param pulumi.Input[_builtins.str] signing_method: The signing method to use with this certificate authority to generate private certificates.You can choose between
               internal or externally signed options. For more information, see the
               [docs](https://cloud.ibm.com/docs/secrets-manager?topic=secrets-manager-intermediate-certificate-authorities).
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] alt_names: With the Subject Alternative Name field, you can specify additional host names to be protected by a single SSL
               certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] countries: The Country (C) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[_builtins.bool] crl_disable: Disables or enables certificate revocation list (CRL) building.If CRL building is disabled, a signed but zero-length CRL
               is returned when downloading the CRL. If CRL building is enabled, it will rebuild the CRL.
        :param pulumi.Input[_builtins.bool] crl_distribution_points_encoded: Determines whether to encode the certificate revocation list (CRL) distribution points in the certificates that are
               issued by this certificate authority.
        :param pulumi.Input[_builtins.str] crl_expiry: The time until the certificate revocation list (CRL) expires.The value can be supplied as a string representation of a
               duration in hours, such as `48h`. The default is 72 hours. In the API response, this value is returned in seconds
               (integer).**Note:** The CRL is rotated automatically before it expires.
        :param pulumi.Input['SmPrivateCertificateConfigurationIntermediateCaCryptoKeyArgs'] crypto_key: The data that is associated with a cryptographic key.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.bool] exclude_cn_from_sans: Controls whether the common name is excluded from Subject Alternative Names (SANs).If the common name set to `true`, it
               is not included in DNS or Email SANs if they apply. This field can be useful if the common name is a human-readable
               identifier, instead of a hostname or an email address.
        :param pulumi.Input[_builtins.str] format: The format of the returned data.
        :param pulumi.Input[_builtins.str] ip_sans: The IP Subject Alternative Names to define for the CA certificate, in a comma-delimited list.
        :param pulumi.Input[_builtins.str] issuer: The distinguished name that identifies the entity that signed and issued the certificate.
        :param pulumi.Input[_builtins.bool] issuing_certificates_urls_encoded: Determines whether to encode the URL of the issuing certificate in the certificates that are issued by this certificate
               authority.
        :param pulumi.Input[_builtins.float] key_bits: The number of bits to use to generate the private key.Allowable values for RSA keys are: `2048` and `4096`. Allowable
               values for EC keys are: `224`, `256`, `384`, and `521`. The default for RSA keys is `2048`. The default for EC keys is
               `256`.
        :param pulumi.Input[_builtins.str] key_type: The type of private key to generate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] localities: The Locality (L) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[_builtins.float] max_path_length: The maximum path length to encode in the generated certificate. `-1` means no limit.
        :param pulumi.Input[_builtins.str] name: A human-readable unique name to assign to your configuration.To protect your privacy, do not use personal data, such as
               your name or location, as an name for your secret.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] organizations: The Organization (O) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] other_sans: The custom Object Identifier (OID) or UTF8-string Subject Alternative Names to define for the CA certificate.The
               alternative names must match the values that are specified in the `allowed_other_sans` field in the associated
               certificate template. The format is the same as OpenSSL: `<oid>:<type>:<value>` where the current valid type is `UTF8`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ous: The Organizational Unit (OU) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] permitted_dns_domains: The allowed DNS domains or subdomains for the certificates that are to be signed and issued by this CA certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] postal_codes: The postal code values to define in the subject field of the resulting certificate.
        :param pulumi.Input[_builtins.str] private_key_format: The format of the generated private key.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] provinces: The Province (ST) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[_builtins.str] region: The region of the Secrets Manager instance.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] street_addresses: The street address values to define in the subject field of the resulting certificate.
        :param pulumi.Input[_builtins.str] ttl: Specifies the requested Time To Live (after which the certificate will be expired). The value can be provided provided
               as a string duration with time suffix (e.g. '24h') or the number of seconds as string (e.g. '86400').
        :param pulumi.Input[_builtins.str] uri_sans: The URI Subject Alternative Names to define for the CA certificate, in a comma-delimited list.
        :param pulumi.Input[_builtins.bool] use_csr_values: Determines whether to use values from a certificate signing request (CSR) to complete a
               `private_cert_configuration_action_sign_csr` action.
        """
        pulumi.set(__self__, "common_name", common_name)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "max_ttl", max_ttl)
        pulumi.set(__self__, "signing_method", signing_method)
        if alt_names is not None:
            pulumi.set(__self__, "alt_names", alt_names)
        if countries is not None:
            pulumi.set(__self__, "countries", countries)
        if crl_disable is not None:
            pulumi.set(__self__, "crl_disable", crl_disable)
        if crl_distribution_points_encoded is not None:
            pulumi.set(__self__, "crl_distribution_points_encoded", crl_distribution_points_encoded)
        if crl_expiry is not None:
            pulumi.set(__self__, "crl_expiry", crl_expiry)
        if crypto_key is not None:
            pulumi.set(__self__, "crypto_key", crypto_key)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if exclude_cn_from_sans is not None:
            pulumi.set(__self__, "exclude_cn_from_sans", exclude_cn_from_sans)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if ip_sans is not None:
            pulumi.set(__self__, "ip_sans", ip_sans)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if issuing_certificates_urls_encoded is not None:
            pulumi.set(__self__, "issuing_certificates_urls_encoded", issuing_certificates_urls_encoded)
        if key_bits is not None:
            pulumi.set(__self__, "key_bits", key_bits)
        if key_type is not None:
            pulumi.set(__self__, "key_type", key_type)
        if localities is not None:
            pulumi.set(__self__, "localities", localities)
        if max_path_length is not None:
            pulumi.set(__self__, "max_path_length", max_path_length)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organizations is not None:
            pulumi.set(__self__, "organizations", organizations)
        if other_sans is not None:
            pulumi.set(__self__, "other_sans", other_sans)
        if ous is not None:
            pulumi.set(__self__, "ous", ous)
        if permitted_dns_domains is not None:
            pulumi.set(__self__, "permitted_dns_domains", permitted_dns_domains)
        if postal_codes is not None:
            pulumi.set(__self__, "postal_codes", postal_codes)
        if private_key_format is not None:
            pulumi.set(__self__, "private_key_format", private_key_format)
        if provinces is not None:
            pulumi.set(__self__, "provinces", provinces)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if sm_private_certificate_configuration_intermediate_ca_id is not None:
            pulumi.set(__self__, "sm_private_certificate_configuration_intermediate_ca_id", sm_private_certificate_configuration_intermediate_ca_id)
        if street_addresses is not None:
            pulumi.set(__self__, "street_addresses", street_addresses)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if uri_sans is not None:
            pulumi.set(__self__, "uri_sans", uri_sans)
        if use_csr_values is not None:
            pulumi.set(__self__, "use_csr_values", use_csr_values)

    @_builtins.property
    @pulumi.getter(name="commonName")
    def common_name(self) -> pulumi.Input[_builtins.str]:
        """
        The Common Name (AKA CN) represents the server name that is protected by the SSL certificate.
        """
        return pulumi.get(self, "common_name")

    @common_name.setter
    def common_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "common_name", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the Secrets Manager instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="maxTtl")
    def max_ttl(self) -> pulumi.Input[_builtins.str]:
        """
        The maximum time-to-live (TTL) for certificates that are created by this CA.The value can be supplied as a string
        representation of a duration in hours, for example '8760h'. In the API response, this value is returned in seconds
        (integer).Minimum value is one hour (`1h`). Maximum value is 100 years (`876000h`).
        """
        return pulumi.get(self, "max_ttl")

    @max_ttl.setter
    def max_ttl(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "max_ttl", value)

    @_builtins.property
    @pulumi.getter(name="signingMethod")
    def signing_method(self) -> pulumi.Input[_builtins.str]:
        """
        The signing method to use with this certificate authority to generate private certificates.You can choose between
        internal or externally signed options. For more information, see the
        [docs](https://cloud.ibm.com/docs/secrets-manager?topic=secrets-manager-intermediate-certificate-authorities).
        """
        return pulumi.get(self, "signing_method")

    @signing_method.setter
    def signing_method(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "signing_method", value)

    @_builtins.property
    @pulumi.getter(name="altNames")
    def alt_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        With the Subject Alternative Name field, you can specify additional host names to be protected by a single SSL
        certificate.
        """
        return pulumi.get(self, "alt_names")

    @alt_names.setter
    def alt_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "alt_names", value)

    @_builtins.property
    @pulumi.getter
    def countries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Country (C) values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "countries")

    @countries.setter
    def countries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "countries", value)

    @_builtins.property
    @pulumi.getter(name="crlDisable")
    def crl_disable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Disables or enables certificate revocation list (CRL) building.If CRL building is disabled, a signed but zero-length CRL
        is returned when downloading the CRL. If CRL building is enabled, it will rebuild the CRL.
        """
        return pulumi.get(self, "crl_disable")

    @crl_disable.setter
    def crl_disable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "crl_disable", value)

    @_builtins.property
    @pulumi.getter(name="crlDistributionPointsEncoded")
    def crl_distribution_points_encoded(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Determines whether to encode the certificate revocation list (CRL) distribution points in the certificates that are
        issued by this certificate authority.
        """
        return pulumi.get(self, "crl_distribution_points_encoded")

    @crl_distribution_points_encoded.setter
    def crl_distribution_points_encoded(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "crl_distribution_points_encoded", value)

    @_builtins.property
    @pulumi.getter(name="crlExpiry")
    def crl_expiry(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time until the certificate revocation list (CRL) expires.The value can be supplied as a string representation of a
        duration in hours, such as `48h`. The default is 72 hours. In the API response, this value is returned in seconds
        (integer).**Note:** The CRL is rotated automatically before it expires.
        """
        return pulumi.get(self, "crl_expiry")

    @crl_expiry.setter
    def crl_expiry(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crl_expiry", value)

    @_builtins.property
    @pulumi.getter(name="cryptoKey")
    def crypto_key(self) -> Optional[pulumi.Input['SmPrivateCertificateConfigurationIntermediateCaCryptoKeyArgs']]:
        """
        The data that is associated with a cryptographic key.
        """
        return pulumi.get(self, "crypto_key")

    @crypto_key.setter
    def crypto_key(self, value: Optional[pulumi.Input['SmPrivateCertificateConfigurationIntermediateCaCryptoKeyArgs']]):
        pulumi.set(self, "crypto_key", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter(name="excludeCnFromSans")
    def exclude_cn_from_sans(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Controls whether the common name is excluded from Subject Alternative Names (SANs).If the common name set to `true`, it
        is not included in DNS or Email SANs if they apply. This field can be useful if the common name is a human-readable
        identifier, instead of a hostname or an email address.
        """
        return pulumi.get(self, "exclude_cn_from_sans")

    @exclude_cn_from_sans.setter
    def exclude_cn_from_sans(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "exclude_cn_from_sans", value)

    @_builtins.property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The format of the returned data.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "format", value)

    @_builtins.property
    @pulumi.getter(name="ipSans")
    def ip_sans(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IP Subject Alternative Names to define for the CA certificate, in a comma-delimited list.
        """
        return pulumi.get(self, "ip_sans")

    @ip_sans.setter
    def ip_sans(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_sans", value)

    @_builtins.property
    @pulumi.getter
    def issuer(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The distinguished name that identifies the entity that signed and issued the certificate.
        """
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "issuer", value)

    @_builtins.property
    @pulumi.getter(name="issuingCertificatesUrlsEncoded")
    def issuing_certificates_urls_encoded(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Determines whether to encode the URL of the issuing certificate in the certificates that are issued by this certificate
        authority.
        """
        return pulumi.get(self, "issuing_certificates_urls_encoded")

    @issuing_certificates_urls_encoded.setter
    def issuing_certificates_urls_encoded(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "issuing_certificates_urls_encoded", value)

    @_builtins.property
    @pulumi.getter(name="keyBits")
    def key_bits(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The number of bits to use to generate the private key.Allowable values for RSA keys are: `2048` and `4096`. Allowable
        values for EC keys are: `224`, `256`, `384`, and `521`. The default for RSA keys is `2048`. The default for EC keys is
        `256`.
        """
        return pulumi.get(self, "key_bits")

    @key_bits.setter
    def key_bits(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "key_bits", value)

    @_builtins.property
    @pulumi.getter(name="keyType")
    def key_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of private key to generate.
        """
        return pulumi.get(self, "key_type")

    @key_type.setter
    def key_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_type", value)

    @_builtins.property
    @pulumi.getter
    def localities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Locality (L) values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "localities")

    @localities.setter
    def localities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "localities", value)

    @_builtins.property
    @pulumi.getter(name="maxPathLength")
    def max_path_length(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The maximum path length to encode in the generated certificate. `-1` means no limit.
        """
        return pulumi.get(self, "max_path_length")

    @max_path_length.setter
    def max_path_length(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "max_path_length", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A human-readable unique name to assign to your configuration.To protect your privacy, do not use personal data, such as
        your name or location, as an name for your secret.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def organizations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Organization (O) values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "organizations")

    @organizations.setter
    def organizations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "organizations", value)

    @_builtins.property
    @pulumi.getter(name="otherSans")
    def other_sans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The custom Object Identifier (OID) or UTF8-string Subject Alternative Names to define for the CA certificate.The
        alternative names must match the values that are specified in the `allowed_other_sans` field in the associated
        certificate template. The format is the same as OpenSSL: `<oid>:<type>:<value>` where the current valid type is `UTF8`.
        """
        return pulumi.get(self, "other_sans")

    @other_sans.setter
    def other_sans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "other_sans", value)

    @_builtins.property
    @pulumi.getter
    def ous(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Organizational Unit (OU) values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "ous")

    @ous.setter
    def ous(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "ous", value)

    @_builtins.property
    @pulumi.getter(name="permittedDnsDomains")
    def permitted_dns_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The allowed DNS domains or subdomains for the certificates that are to be signed and issued by this CA certificate.
        """
        return pulumi.get(self, "permitted_dns_domains")

    @permitted_dns_domains.setter
    def permitted_dns_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "permitted_dns_domains", value)

    @_builtins.property
    @pulumi.getter(name="postalCodes")
    def postal_codes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The postal code values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "postal_codes")

    @postal_codes.setter
    def postal_codes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "postal_codes", value)

    @_builtins.property
    @pulumi.getter(name="privateKeyFormat")
    def private_key_format(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The format of the generated private key.
        """
        return pulumi.get(self, "private_key_format")

    @private_key_format.setter
    def private_key_format(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_key_format", value)

    @_builtins.property
    @pulumi.getter
    def provinces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Province (ST) values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "provinces")

    @provinces.setter
    def provinces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "provinces", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the Secrets Manager instance.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="smPrivateCertificateConfigurationIntermediateCaId")
    def sm_private_certificate_configuration_intermediate_ca_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "sm_private_certificate_configuration_intermediate_ca_id")

    @sm_private_certificate_configuration_intermediate_ca_id.setter
    def sm_private_certificate_configuration_intermediate_ca_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sm_private_certificate_configuration_intermediate_ca_id", value)

    @_builtins.property
    @pulumi.getter(name="streetAddresses")
    def street_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The street address values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "street_addresses")

    @street_addresses.setter
    def street_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "street_addresses", value)

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the requested Time To Live (after which the certificate will be expired). The value can be provided provided
        as a string duration with time suffix (e.g. '24h') or the number of seconds as string (e.g. '86400').
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ttl", value)

    @_builtins.property
    @pulumi.getter(name="uriSans")
    def uri_sans(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URI Subject Alternative Names to define for the CA certificate, in a comma-delimited list.
        """
        return pulumi.get(self, "uri_sans")

    @uri_sans.setter
    def uri_sans(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "uri_sans", value)

    @_builtins.property
    @pulumi.getter(name="useCsrValues")
    def use_csr_values(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Determines whether to use values from a certificate signing request (CSR) to complete a
        `private_cert_configuration_action_sign_csr` action.
        """
        return pulumi.get(self, "use_csr_values")

    @use_csr_values.setter
    def use_csr_values(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "use_csr_values", value)


@pulumi.input_type
class _SmPrivateCertificateConfigurationIntermediateCaState:
    def __init__(__self__, *,
                 alt_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 common_name: Optional[pulumi.Input[_builtins.str]] = None,
                 config_type: Optional[pulumi.Input[_builtins.str]] = None,
                 countries: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 crl_disable: Optional[pulumi.Input[_builtins.bool]] = None,
                 crl_distribution_points_encoded: Optional[pulumi.Input[_builtins.bool]] = None,
                 crl_expiry: Optional[pulumi.Input[_builtins.str]] = None,
                 crl_expiry_seconds: Optional[pulumi.Input[_builtins.float]] = None,
                 crypto_key: Optional[pulumi.Input['SmPrivateCertificateConfigurationIntermediateCaCryptoKeyArgs']] = None,
                 datas: Optional[pulumi.Input[Sequence[pulumi.Input['SmPrivateCertificateConfigurationIntermediateCaDataArgs']]]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 exclude_cn_from_sans: Optional[pulumi.Input[_builtins.bool]] = None,
                 expiration_date: Optional[pulumi.Input[_builtins.str]] = None,
                 format: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_sans: Optional[pulumi.Input[_builtins.str]] = None,
                 issuer: Optional[pulumi.Input[_builtins.str]] = None,
                 issuing_certificates_urls_encoded: Optional[pulumi.Input[_builtins.bool]] = None,
                 key_bits: Optional[pulumi.Input[_builtins.float]] = None,
                 key_type: Optional[pulumi.Input[_builtins.str]] = None,
                 localities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 max_path_length: Optional[pulumi.Input[_builtins.float]] = None,
                 max_ttl: Optional[pulumi.Input[_builtins.str]] = None,
                 max_ttl_seconds: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organizations: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 other_sans: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 ous: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 permitted_dns_domains: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 postal_codes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 private_key_format: Optional[pulumi.Input[_builtins.str]] = None,
                 provinces: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_type: Optional[pulumi.Input[_builtins.str]] = None,
                 serial_number: Optional[pulumi.Input[_builtins.str]] = None,
                 signing_method: Optional[pulumi.Input[_builtins.str]] = None,
                 sm_private_certificate_configuration_intermediate_ca_id: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 street_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 ttl: Optional[pulumi.Input[_builtins.str]] = None,
                 uri_sans: Optional[pulumi.Input[_builtins.str]] = None,
                 use_csr_values: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        Input properties used for looking up and filtering SmPrivateCertificateConfigurationIntermediateCa resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] alt_names: With the Subject Alternative Name field, you can specify additional host names to be protected by a single SSL
               certificate.
        :param pulumi.Input[_builtins.str] common_name: The Common Name (AKA CN) represents the server name that is protected by the SSL certificate.
        :param pulumi.Input[_builtins.str] config_type: The configuration type.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] countries: The Country (C) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[_builtins.bool] crl_disable: Disables or enables certificate revocation list (CRL) building.If CRL building is disabled, a signed but zero-length CRL
               is returned when downloading the CRL. If CRL building is enabled, it will rebuild the CRL.
        :param pulumi.Input[_builtins.bool] crl_distribution_points_encoded: Determines whether to encode the certificate revocation list (CRL) distribution points in the certificates that are
               issued by this certificate authority.
        :param pulumi.Input[_builtins.str] crl_expiry: The time until the certificate revocation list (CRL) expires.The value can be supplied as a string representation of a
               duration in hours, such as `48h`. The default is 72 hours. In the API response, this value is returned in seconds
               (integer).**Note:** The CRL is rotated automatically before it expires.
        :param pulumi.Input[_builtins.float] crl_expiry_seconds: The time until the certificate revocation list (CRL) expires.The value can be supplied as a string representation of a
               duration in hours, such as `48h`. The default is 72 hours. In the API response, this value is returned in seconds
               (integer).**Note:** The CRL is rotated automatically before it expires.
        :param pulumi.Input['SmPrivateCertificateConfigurationIntermediateCaCryptoKeyArgs'] crypto_key: The data that is associated with a cryptographic key.
        :param pulumi.Input[Sequence[pulumi.Input['SmPrivateCertificateConfigurationIntermediateCaDataArgs']]] datas: The configuration data of your Private Certificate.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.bool] exclude_cn_from_sans: Controls whether the common name is excluded from Subject Alternative Names (SANs).If the common name set to `true`, it
               is not included in DNS or Email SANs if they apply. This field can be useful if the common name is a human-readable
               identifier, instead of a hostname or an email address.
        :param pulumi.Input[_builtins.str] expiration_date: The date a secret is expired. The date format follows RFC 3339.
        :param pulumi.Input[_builtins.str] format: The format of the returned data.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] ip_sans: The IP Subject Alternative Names to define for the CA certificate, in a comma-delimited list.
        :param pulumi.Input[_builtins.str] issuer: The distinguished name that identifies the entity that signed and issued the certificate.
        :param pulumi.Input[_builtins.bool] issuing_certificates_urls_encoded: Determines whether to encode the URL of the issuing certificate in the certificates that are issued by this certificate
               authority.
        :param pulumi.Input[_builtins.float] key_bits: The number of bits to use to generate the private key.Allowable values for RSA keys are: `2048` and `4096`. Allowable
               values for EC keys are: `224`, `256`, `384`, and `521`. The default for RSA keys is `2048`. The default for EC keys is
               `256`.
        :param pulumi.Input[_builtins.str] key_type: The type of private key to generate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] localities: The Locality (L) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[_builtins.float] max_path_length: The maximum path length to encode in the generated certificate. `-1` means no limit.
        :param pulumi.Input[_builtins.str] max_ttl: The maximum time-to-live (TTL) for certificates that are created by this CA.The value can be supplied as a string
               representation of a duration in hours, for example '8760h'. In the API response, this value is returned in seconds
               (integer).Minimum value is one hour (`1h`). Maximum value is 100 years (`876000h`).
        :param pulumi.Input[_builtins.float] max_ttl_seconds: The maximum time-to-live (TTL) for certificates that are created by this CA.The value can be supplied as a string
               representation of a duration in hours, for example '8760h'. In the API response, this value is returned in seconds
               (integer).Minimum value is one hour (`1h`). Maximum value is 100 years (`876000h`).
        :param pulumi.Input[_builtins.str] name: A human-readable unique name to assign to your configuration.To protect your privacy, do not use personal data, such as
               your name or location, as an name for your secret.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] organizations: The Organization (O) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] other_sans: The custom Object Identifier (OID) or UTF8-string Subject Alternative Names to define for the CA certificate.The
               alternative names must match the values that are specified in the `allowed_other_sans` field in the associated
               certificate template. The format is the same as OpenSSL: `<oid>:<type>:<value>` where the current valid type is `UTF8`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ous: The Organizational Unit (OU) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] permitted_dns_domains: The allowed DNS domains or subdomains for the certificates that are to be signed and issued by this CA certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] postal_codes: The postal code values to define in the subject field of the resulting certificate.
        :param pulumi.Input[_builtins.str] private_key_format: The format of the generated private key.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] provinces: The Province (ST) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[_builtins.str] region: The region of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] secret_type: The secret type. Supported types are arbitrary, certificates (imported, public, and private), IAM credentials,
               key-value, and user credentials.
        :param pulumi.Input[_builtins.str] serial_number: The unique serial number that was assigned to a certificate by the issuing certificate authority.
        :param pulumi.Input[_builtins.str] signing_method: The signing method to use with this certificate authority to generate private certificates.You can choose between
               internal or externally signed options. For more information, see the
               [docs](https://cloud.ibm.com/docs/secrets-manager?topic=secrets-manager-intermediate-certificate-authorities).
        :param pulumi.Input[_builtins.str] status: The status of the certificate authority. The status of a root certificate authority is either `configured` or `expired`.
               For intermediate certificate authorities, possible statuses include `signing_required`,`signed_certificate_required`,
               `certificate_template_required`, `configured`, `expired` or `revoked`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] street_addresses: The street address values to define in the subject field of the resulting certificate.
        :param pulumi.Input[_builtins.str] ttl: Specifies the requested Time To Live (after which the certificate will be expired). The value can be provided provided
               as a string duration with time suffix (e.g. '24h') or the number of seconds as string (e.g. '86400').
        :param pulumi.Input[_builtins.str] uri_sans: The URI Subject Alternative Names to define for the CA certificate, in a comma-delimited list.
        :param pulumi.Input[_builtins.bool] use_csr_values: Determines whether to use values from a certificate signing request (CSR) to complete a
               `private_cert_configuration_action_sign_csr` action.
        """
        if alt_names is not None:
            pulumi.set(__self__, "alt_names", alt_names)
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if config_type is not None:
            pulumi.set(__self__, "config_type", config_type)
        if countries is not None:
            pulumi.set(__self__, "countries", countries)
        if crl_disable is not None:
            pulumi.set(__self__, "crl_disable", crl_disable)
        if crl_distribution_points_encoded is not None:
            pulumi.set(__self__, "crl_distribution_points_encoded", crl_distribution_points_encoded)
        if crl_expiry is not None:
            pulumi.set(__self__, "crl_expiry", crl_expiry)
        if crl_expiry_seconds is not None:
            pulumi.set(__self__, "crl_expiry_seconds", crl_expiry_seconds)
        if crypto_key is not None:
            pulumi.set(__self__, "crypto_key", crypto_key)
        if datas is not None:
            pulumi.set(__self__, "datas", datas)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if exclude_cn_from_sans is not None:
            pulumi.set(__self__, "exclude_cn_from_sans", exclude_cn_from_sans)
        if expiration_date is not None:
            pulumi.set(__self__, "expiration_date", expiration_date)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if ip_sans is not None:
            pulumi.set(__self__, "ip_sans", ip_sans)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if issuing_certificates_urls_encoded is not None:
            pulumi.set(__self__, "issuing_certificates_urls_encoded", issuing_certificates_urls_encoded)
        if key_bits is not None:
            pulumi.set(__self__, "key_bits", key_bits)
        if key_type is not None:
            pulumi.set(__self__, "key_type", key_type)
        if localities is not None:
            pulumi.set(__self__, "localities", localities)
        if max_path_length is not None:
            pulumi.set(__self__, "max_path_length", max_path_length)
        if max_ttl is not None:
            pulumi.set(__self__, "max_ttl", max_ttl)
        if max_ttl_seconds is not None:
            pulumi.set(__self__, "max_ttl_seconds", max_ttl_seconds)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organizations is not None:
            pulumi.set(__self__, "organizations", organizations)
        if other_sans is not None:
            pulumi.set(__self__, "other_sans", other_sans)
        if ous is not None:
            pulumi.set(__self__, "ous", ous)
        if permitted_dns_domains is not None:
            pulumi.set(__self__, "permitted_dns_domains", permitted_dns_domains)
        if postal_codes is not None:
            pulumi.set(__self__, "postal_codes", postal_codes)
        if private_key_format is not None:
            pulumi.set(__self__, "private_key_format", private_key_format)
        if provinces is not None:
            pulumi.set(__self__, "provinces", provinces)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_type is not None:
            pulumi.set(__self__, "secret_type", secret_type)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if signing_method is not None:
            pulumi.set(__self__, "signing_method", signing_method)
        if sm_private_certificate_configuration_intermediate_ca_id is not None:
            pulumi.set(__self__, "sm_private_certificate_configuration_intermediate_ca_id", sm_private_certificate_configuration_intermediate_ca_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if street_addresses is not None:
            pulumi.set(__self__, "street_addresses", street_addresses)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if uri_sans is not None:
            pulumi.set(__self__, "uri_sans", uri_sans)
        if use_csr_values is not None:
            pulumi.set(__self__, "use_csr_values", use_csr_values)

    @_builtins.property
    @pulumi.getter(name="altNames")
    def alt_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        With the Subject Alternative Name field, you can specify additional host names to be protected by a single SSL
        certificate.
        """
        return pulumi.get(self, "alt_names")

    @alt_names.setter
    def alt_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "alt_names", value)

    @_builtins.property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Common Name (AKA CN) represents the server name that is protected by the SSL certificate.
        """
        return pulumi.get(self, "common_name")

    @common_name.setter
    def common_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "common_name", value)

    @_builtins.property
    @pulumi.getter(name="configType")
    def config_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The configuration type.
        """
        return pulumi.get(self, "config_type")

    @config_type.setter
    def config_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "config_type", value)

    @_builtins.property
    @pulumi.getter
    def countries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Country (C) values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "countries")

    @countries.setter
    def countries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "countries", value)

    @_builtins.property
    @pulumi.getter(name="crlDisable")
    def crl_disable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Disables or enables certificate revocation list (CRL) building.If CRL building is disabled, a signed but zero-length CRL
        is returned when downloading the CRL. If CRL building is enabled, it will rebuild the CRL.
        """
        return pulumi.get(self, "crl_disable")

    @crl_disable.setter
    def crl_disable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "crl_disable", value)

    @_builtins.property
    @pulumi.getter(name="crlDistributionPointsEncoded")
    def crl_distribution_points_encoded(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Determines whether to encode the certificate revocation list (CRL) distribution points in the certificates that are
        issued by this certificate authority.
        """
        return pulumi.get(self, "crl_distribution_points_encoded")

    @crl_distribution_points_encoded.setter
    def crl_distribution_points_encoded(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "crl_distribution_points_encoded", value)

    @_builtins.property
    @pulumi.getter(name="crlExpiry")
    def crl_expiry(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time until the certificate revocation list (CRL) expires.The value can be supplied as a string representation of a
        duration in hours, such as `48h`. The default is 72 hours. In the API response, this value is returned in seconds
        (integer).**Note:** The CRL is rotated automatically before it expires.
        """
        return pulumi.get(self, "crl_expiry")

    @crl_expiry.setter
    def crl_expiry(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crl_expiry", value)

    @_builtins.property
    @pulumi.getter(name="crlExpirySeconds")
    def crl_expiry_seconds(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The time until the certificate revocation list (CRL) expires.The value can be supplied as a string representation of a
        duration in hours, such as `48h`. The default is 72 hours. In the API response, this value is returned in seconds
        (integer).**Note:** The CRL is rotated automatically before it expires.
        """
        return pulumi.get(self, "crl_expiry_seconds")

    @crl_expiry_seconds.setter
    def crl_expiry_seconds(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "crl_expiry_seconds", value)

    @_builtins.property
    @pulumi.getter(name="cryptoKey")
    def crypto_key(self) -> Optional[pulumi.Input['SmPrivateCertificateConfigurationIntermediateCaCryptoKeyArgs']]:
        """
        The data that is associated with a cryptographic key.
        """
        return pulumi.get(self, "crypto_key")

    @crypto_key.setter
    def crypto_key(self, value: Optional[pulumi.Input['SmPrivateCertificateConfigurationIntermediateCaCryptoKeyArgs']]):
        pulumi.set(self, "crypto_key", value)

    @_builtins.property
    @pulumi.getter
    def datas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SmPrivateCertificateConfigurationIntermediateCaDataArgs']]]]:
        """
        The configuration data of your Private Certificate.
        """
        return pulumi.get(self, "datas")

    @datas.setter
    def datas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SmPrivateCertificateConfigurationIntermediateCaDataArgs']]]]):
        pulumi.set(self, "datas", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter(name="excludeCnFromSans")
    def exclude_cn_from_sans(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Controls whether the common name is excluded from Subject Alternative Names (SANs).If the common name set to `true`, it
        is not included in DNS or Email SANs if they apply. This field can be useful if the common name is a human-readable
        identifier, instead of a hostname or an email address.
        """
        return pulumi.get(self, "exclude_cn_from_sans")

    @exclude_cn_from_sans.setter
    def exclude_cn_from_sans(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "exclude_cn_from_sans", value)

    @_builtins.property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date a secret is expired. The date format follows RFC 3339.
        """
        return pulumi.get(self, "expiration_date")

    @expiration_date.setter
    def expiration_date(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expiration_date", value)

    @_builtins.property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The format of the returned data.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "format", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the Secrets Manager instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="ipSans")
    def ip_sans(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IP Subject Alternative Names to define for the CA certificate, in a comma-delimited list.
        """
        return pulumi.get(self, "ip_sans")

    @ip_sans.setter
    def ip_sans(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_sans", value)

    @_builtins.property
    @pulumi.getter
    def issuer(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The distinguished name that identifies the entity that signed and issued the certificate.
        """
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "issuer", value)

    @_builtins.property
    @pulumi.getter(name="issuingCertificatesUrlsEncoded")
    def issuing_certificates_urls_encoded(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Determines whether to encode the URL of the issuing certificate in the certificates that are issued by this certificate
        authority.
        """
        return pulumi.get(self, "issuing_certificates_urls_encoded")

    @issuing_certificates_urls_encoded.setter
    def issuing_certificates_urls_encoded(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "issuing_certificates_urls_encoded", value)

    @_builtins.property
    @pulumi.getter(name="keyBits")
    def key_bits(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The number of bits to use to generate the private key.Allowable values for RSA keys are: `2048` and `4096`. Allowable
        values for EC keys are: `224`, `256`, `384`, and `521`. The default for RSA keys is `2048`. The default for EC keys is
        `256`.
        """
        return pulumi.get(self, "key_bits")

    @key_bits.setter
    def key_bits(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "key_bits", value)

    @_builtins.property
    @pulumi.getter(name="keyType")
    def key_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of private key to generate.
        """
        return pulumi.get(self, "key_type")

    @key_type.setter
    def key_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_type", value)

    @_builtins.property
    @pulumi.getter
    def localities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Locality (L) values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "localities")

    @localities.setter
    def localities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "localities", value)

    @_builtins.property
    @pulumi.getter(name="maxPathLength")
    def max_path_length(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The maximum path length to encode in the generated certificate. `-1` means no limit.
        """
        return pulumi.get(self, "max_path_length")

    @max_path_length.setter
    def max_path_length(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "max_path_length", value)

    @_builtins.property
    @pulumi.getter(name="maxTtl")
    def max_ttl(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The maximum time-to-live (TTL) for certificates that are created by this CA.The value can be supplied as a string
        representation of a duration in hours, for example '8760h'. In the API response, this value is returned in seconds
        (integer).Minimum value is one hour (`1h`). Maximum value is 100 years (`876000h`).
        """
        return pulumi.get(self, "max_ttl")

    @max_ttl.setter
    def max_ttl(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "max_ttl", value)

    @_builtins.property
    @pulumi.getter(name="maxTtlSeconds")
    def max_ttl_seconds(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The maximum time-to-live (TTL) for certificates that are created by this CA.The value can be supplied as a string
        representation of a duration in hours, for example '8760h'. In the API response, this value is returned in seconds
        (integer).Minimum value is one hour (`1h`). Maximum value is 100 years (`876000h`).
        """
        return pulumi.get(self, "max_ttl_seconds")

    @max_ttl_seconds.setter
    def max_ttl_seconds(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "max_ttl_seconds", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A human-readable unique name to assign to your configuration.To protect your privacy, do not use personal data, such as
        your name or location, as an name for your secret.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def organizations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Organization (O) values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "organizations")

    @organizations.setter
    def organizations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "organizations", value)

    @_builtins.property
    @pulumi.getter(name="otherSans")
    def other_sans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The custom Object Identifier (OID) or UTF8-string Subject Alternative Names to define for the CA certificate.The
        alternative names must match the values that are specified in the `allowed_other_sans` field in the associated
        certificate template. The format is the same as OpenSSL: `<oid>:<type>:<value>` where the current valid type is `UTF8`.
        """
        return pulumi.get(self, "other_sans")

    @other_sans.setter
    def other_sans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "other_sans", value)

    @_builtins.property
    @pulumi.getter
    def ous(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Organizational Unit (OU) values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "ous")

    @ous.setter
    def ous(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "ous", value)

    @_builtins.property
    @pulumi.getter(name="permittedDnsDomains")
    def permitted_dns_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The allowed DNS domains or subdomains for the certificates that are to be signed and issued by this CA certificate.
        """
        return pulumi.get(self, "permitted_dns_domains")

    @permitted_dns_domains.setter
    def permitted_dns_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "permitted_dns_domains", value)

    @_builtins.property
    @pulumi.getter(name="postalCodes")
    def postal_codes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The postal code values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "postal_codes")

    @postal_codes.setter
    def postal_codes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "postal_codes", value)

    @_builtins.property
    @pulumi.getter(name="privateKeyFormat")
    def private_key_format(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The format of the generated private key.
        """
        return pulumi.get(self, "private_key_format")

    @private_key_format.setter
    def private_key_format(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_key_format", value)

    @_builtins.property
    @pulumi.getter
    def provinces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Province (ST) values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "provinces")

    @provinces.setter
    def provinces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "provinces", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the Secrets Manager instance.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The secret type. Supported types are arbitrary, certificates (imported, public, and private), IAM credentials,
        key-value, and user credentials.
        """
        return pulumi.get(self, "secret_type")

    @secret_type.setter
    def secret_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_type", value)

    @_builtins.property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique serial number that was assigned to a certificate by the issuing certificate authority.
        """
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "serial_number", value)

    @_builtins.property
    @pulumi.getter(name="signingMethod")
    def signing_method(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The signing method to use with this certificate authority to generate private certificates.You can choose between
        internal or externally signed options. For more information, see the
        [docs](https://cloud.ibm.com/docs/secrets-manager?topic=secrets-manager-intermediate-certificate-authorities).
        """
        return pulumi.get(self, "signing_method")

    @signing_method.setter
    def signing_method(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "signing_method", value)

    @_builtins.property
    @pulumi.getter(name="smPrivateCertificateConfigurationIntermediateCaId")
    def sm_private_certificate_configuration_intermediate_ca_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "sm_private_certificate_configuration_intermediate_ca_id")

    @sm_private_certificate_configuration_intermediate_ca_id.setter
    def sm_private_certificate_configuration_intermediate_ca_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sm_private_certificate_configuration_intermediate_ca_id", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the certificate authority. The status of a root certificate authority is either `configured` or `expired`.
        For intermediate certificate authorities, possible statuses include `signing_required`,`signed_certificate_required`,
        `certificate_template_required`, `configured`, `expired` or `revoked`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="streetAddresses")
    def street_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The street address values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "street_addresses")

    @street_addresses.setter
    def street_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "street_addresses", value)

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the requested Time To Live (after which the certificate will be expired). The value can be provided provided
        as a string duration with time suffix (e.g. '24h') or the number of seconds as string (e.g. '86400').
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ttl", value)

    @_builtins.property
    @pulumi.getter(name="uriSans")
    def uri_sans(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URI Subject Alternative Names to define for the CA certificate, in a comma-delimited list.
        """
        return pulumi.get(self, "uri_sans")

    @uri_sans.setter
    def uri_sans(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "uri_sans", value)

    @_builtins.property
    @pulumi.getter(name="useCsrValues")
    def use_csr_values(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Determines whether to use values from a certificate signing request (CSR) to complete a
        `private_cert_configuration_action_sign_csr` action.
        """
        return pulumi.get(self, "use_csr_values")

    @use_csr_values.setter
    def use_csr_values(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "use_csr_values", value)


@pulumi.type_token("ibm:index/smPrivateCertificateConfigurationIntermediateCa:SmPrivateCertificateConfigurationIntermediateCa")
class SmPrivateCertificateConfigurationIntermediateCa(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alt_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 common_name: Optional[pulumi.Input[_builtins.str]] = None,
                 countries: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 crl_disable: Optional[pulumi.Input[_builtins.bool]] = None,
                 crl_distribution_points_encoded: Optional[pulumi.Input[_builtins.bool]] = None,
                 crl_expiry: Optional[pulumi.Input[_builtins.str]] = None,
                 crypto_key: Optional[pulumi.Input[Union['SmPrivateCertificateConfigurationIntermediateCaCryptoKeyArgs', 'SmPrivateCertificateConfigurationIntermediateCaCryptoKeyArgsDict']]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 exclude_cn_from_sans: Optional[pulumi.Input[_builtins.bool]] = None,
                 format: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_sans: Optional[pulumi.Input[_builtins.str]] = None,
                 issuer: Optional[pulumi.Input[_builtins.str]] = None,
                 issuing_certificates_urls_encoded: Optional[pulumi.Input[_builtins.bool]] = None,
                 key_bits: Optional[pulumi.Input[_builtins.float]] = None,
                 key_type: Optional[pulumi.Input[_builtins.str]] = None,
                 localities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 max_path_length: Optional[pulumi.Input[_builtins.float]] = None,
                 max_ttl: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organizations: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 other_sans: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 ous: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 permitted_dns_domains: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 postal_codes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 private_key_format: Optional[pulumi.Input[_builtins.str]] = None,
                 provinces: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 signing_method: Optional[pulumi.Input[_builtins.str]] = None,
                 sm_private_certificate_configuration_intermediate_ca_id: Optional[pulumi.Input[_builtins.str]] = None,
                 street_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 ttl: Optional[pulumi.Input[_builtins.str]] = None,
                 uri_sans: Optional[pulumi.Input[_builtins.str]] = None,
                 use_csr_values: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        """
        Create a SmPrivateCertificateConfigurationIntermediateCa resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] alt_names: With the Subject Alternative Name field, you can specify additional host names to be protected by a single SSL
               certificate.
        :param pulumi.Input[_builtins.str] common_name: The Common Name (AKA CN) represents the server name that is protected by the SSL certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] countries: The Country (C) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[_builtins.bool] crl_disable: Disables or enables certificate revocation list (CRL) building.If CRL building is disabled, a signed but zero-length CRL
               is returned when downloading the CRL. If CRL building is enabled, it will rebuild the CRL.
        :param pulumi.Input[_builtins.bool] crl_distribution_points_encoded: Determines whether to encode the certificate revocation list (CRL) distribution points in the certificates that are
               issued by this certificate authority.
        :param pulumi.Input[_builtins.str] crl_expiry: The time until the certificate revocation list (CRL) expires.The value can be supplied as a string representation of a
               duration in hours, such as `48h`. The default is 72 hours. In the API response, this value is returned in seconds
               (integer).**Note:** The CRL is rotated automatically before it expires.
        :param pulumi.Input[Union['SmPrivateCertificateConfigurationIntermediateCaCryptoKeyArgs', 'SmPrivateCertificateConfigurationIntermediateCaCryptoKeyArgsDict']] crypto_key: The data that is associated with a cryptographic key.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.bool] exclude_cn_from_sans: Controls whether the common name is excluded from Subject Alternative Names (SANs).If the common name set to `true`, it
               is not included in DNS or Email SANs if they apply. This field can be useful if the common name is a human-readable
               identifier, instead of a hostname or an email address.
        :param pulumi.Input[_builtins.str] format: The format of the returned data.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] ip_sans: The IP Subject Alternative Names to define for the CA certificate, in a comma-delimited list.
        :param pulumi.Input[_builtins.str] issuer: The distinguished name that identifies the entity that signed and issued the certificate.
        :param pulumi.Input[_builtins.bool] issuing_certificates_urls_encoded: Determines whether to encode the URL of the issuing certificate in the certificates that are issued by this certificate
               authority.
        :param pulumi.Input[_builtins.float] key_bits: The number of bits to use to generate the private key.Allowable values for RSA keys are: `2048` and `4096`. Allowable
               values for EC keys are: `224`, `256`, `384`, and `521`. The default for RSA keys is `2048`. The default for EC keys is
               `256`.
        :param pulumi.Input[_builtins.str] key_type: The type of private key to generate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] localities: The Locality (L) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[_builtins.float] max_path_length: The maximum path length to encode in the generated certificate. `-1` means no limit.
        :param pulumi.Input[_builtins.str] max_ttl: The maximum time-to-live (TTL) for certificates that are created by this CA.The value can be supplied as a string
               representation of a duration in hours, for example '8760h'. In the API response, this value is returned in seconds
               (integer).Minimum value is one hour (`1h`). Maximum value is 100 years (`876000h`).
        :param pulumi.Input[_builtins.str] name: A human-readable unique name to assign to your configuration.To protect your privacy, do not use personal data, such as
               your name or location, as an name for your secret.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] organizations: The Organization (O) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] other_sans: The custom Object Identifier (OID) or UTF8-string Subject Alternative Names to define for the CA certificate.The
               alternative names must match the values that are specified in the `allowed_other_sans` field in the associated
               certificate template. The format is the same as OpenSSL: `<oid>:<type>:<value>` where the current valid type is `UTF8`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ous: The Organizational Unit (OU) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] permitted_dns_domains: The allowed DNS domains or subdomains for the certificates that are to be signed and issued by this CA certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] postal_codes: The postal code values to define in the subject field of the resulting certificate.
        :param pulumi.Input[_builtins.str] private_key_format: The format of the generated private key.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] provinces: The Province (ST) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[_builtins.str] region: The region of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] signing_method: The signing method to use with this certificate authority to generate private certificates.You can choose between
               internal or externally signed options. For more information, see the
               [docs](https://cloud.ibm.com/docs/secrets-manager?topic=secrets-manager-intermediate-certificate-authorities).
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] street_addresses: The street address values to define in the subject field of the resulting certificate.
        :param pulumi.Input[_builtins.str] ttl: Specifies the requested Time To Live (after which the certificate will be expired). The value can be provided provided
               as a string duration with time suffix (e.g. '24h') or the number of seconds as string (e.g. '86400').
        :param pulumi.Input[_builtins.str] uri_sans: The URI Subject Alternative Names to define for the CA certificate, in a comma-delimited list.
        :param pulumi.Input[_builtins.bool] use_csr_values: Determines whether to use values from a certificate signing request (CSR) to complete a
               `private_cert_configuration_action_sign_csr` action.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SmPrivateCertificateConfigurationIntermediateCaArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SmPrivateCertificateConfigurationIntermediateCa resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SmPrivateCertificateConfigurationIntermediateCaArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SmPrivateCertificateConfigurationIntermediateCaArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alt_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 common_name: Optional[pulumi.Input[_builtins.str]] = None,
                 countries: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 crl_disable: Optional[pulumi.Input[_builtins.bool]] = None,
                 crl_distribution_points_encoded: Optional[pulumi.Input[_builtins.bool]] = None,
                 crl_expiry: Optional[pulumi.Input[_builtins.str]] = None,
                 crypto_key: Optional[pulumi.Input[Union['SmPrivateCertificateConfigurationIntermediateCaCryptoKeyArgs', 'SmPrivateCertificateConfigurationIntermediateCaCryptoKeyArgsDict']]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 exclude_cn_from_sans: Optional[pulumi.Input[_builtins.bool]] = None,
                 format: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_sans: Optional[pulumi.Input[_builtins.str]] = None,
                 issuer: Optional[pulumi.Input[_builtins.str]] = None,
                 issuing_certificates_urls_encoded: Optional[pulumi.Input[_builtins.bool]] = None,
                 key_bits: Optional[pulumi.Input[_builtins.float]] = None,
                 key_type: Optional[pulumi.Input[_builtins.str]] = None,
                 localities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 max_path_length: Optional[pulumi.Input[_builtins.float]] = None,
                 max_ttl: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organizations: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 other_sans: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 ous: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 permitted_dns_domains: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 postal_codes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 private_key_format: Optional[pulumi.Input[_builtins.str]] = None,
                 provinces: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 signing_method: Optional[pulumi.Input[_builtins.str]] = None,
                 sm_private_certificate_configuration_intermediate_ca_id: Optional[pulumi.Input[_builtins.str]] = None,
                 street_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 ttl: Optional[pulumi.Input[_builtins.str]] = None,
                 uri_sans: Optional[pulumi.Input[_builtins.str]] = None,
                 use_csr_values: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SmPrivateCertificateConfigurationIntermediateCaArgs.__new__(SmPrivateCertificateConfigurationIntermediateCaArgs)

            __props__.__dict__["alt_names"] = alt_names
            if common_name is None and not opts.urn:
                raise TypeError("Missing required property 'common_name'")
            __props__.__dict__["common_name"] = common_name
            __props__.__dict__["countries"] = countries
            __props__.__dict__["crl_disable"] = crl_disable
            __props__.__dict__["crl_distribution_points_encoded"] = crl_distribution_points_encoded
            __props__.__dict__["crl_expiry"] = crl_expiry
            __props__.__dict__["crypto_key"] = crypto_key
            __props__.__dict__["endpoint_type"] = endpoint_type
            __props__.__dict__["exclude_cn_from_sans"] = exclude_cn_from_sans
            __props__.__dict__["format"] = format
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["ip_sans"] = ip_sans
            __props__.__dict__["issuer"] = issuer
            __props__.__dict__["issuing_certificates_urls_encoded"] = issuing_certificates_urls_encoded
            __props__.__dict__["key_bits"] = key_bits
            __props__.__dict__["key_type"] = key_type
            __props__.__dict__["localities"] = localities
            __props__.__dict__["max_path_length"] = max_path_length
            if max_ttl is None and not opts.urn:
                raise TypeError("Missing required property 'max_ttl'")
            __props__.__dict__["max_ttl"] = max_ttl
            __props__.__dict__["name"] = name
            __props__.__dict__["organizations"] = organizations
            __props__.__dict__["other_sans"] = other_sans
            __props__.__dict__["ous"] = ous
            __props__.__dict__["permitted_dns_domains"] = permitted_dns_domains
            __props__.__dict__["postal_codes"] = postal_codes
            __props__.__dict__["private_key_format"] = private_key_format
            __props__.__dict__["provinces"] = provinces
            __props__.__dict__["region"] = region
            if signing_method is None and not opts.urn:
                raise TypeError("Missing required property 'signing_method'")
            __props__.__dict__["signing_method"] = signing_method
            __props__.__dict__["sm_private_certificate_configuration_intermediate_ca_id"] = sm_private_certificate_configuration_intermediate_ca_id
            __props__.__dict__["street_addresses"] = street_addresses
            __props__.__dict__["ttl"] = ttl
            __props__.__dict__["uri_sans"] = uri_sans
            __props__.__dict__["use_csr_values"] = use_csr_values
            __props__.__dict__["config_type"] = None
            __props__.__dict__["crl_expiry_seconds"] = None
            __props__.__dict__["datas"] = None
            __props__.__dict__["expiration_date"] = None
            __props__.__dict__["max_ttl_seconds"] = None
            __props__.__dict__["secret_type"] = None
            __props__.__dict__["serial_number"] = None
            __props__.__dict__["status"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["datas"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(SmPrivateCertificateConfigurationIntermediateCa, __self__).__init__(
            'ibm:index/smPrivateCertificateConfigurationIntermediateCa:SmPrivateCertificateConfigurationIntermediateCa',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alt_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            common_name: Optional[pulumi.Input[_builtins.str]] = None,
            config_type: Optional[pulumi.Input[_builtins.str]] = None,
            countries: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            crl_disable: Optional[pulumi.Input[_builtins.bool]] = None,
            crl_distribution_points_encoded: Optional[pulumi.Input[_builtins.bool]] = None,
            crl_expiry: Optional[pulumi.Input[_builtins.str]] = None,
            crl_expiry_seconds: Optional[pulumi.Input[_builtins.float]] = None,
            crypto_key: Optional[pulumi.Input[Union['SmPrivateCertificateConfigurationIntermediateCaCryptoKeyArgs', 'SmPrivateCertificateConfigurationIntermediateCaCryptoKeyArgsDict']]] = None,
            datas: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SmPrivateCertificateConfigurationIntermediateCaDataArgs', 'SmPrivateCertificateConfigurationIntermediateCaDataArgsDict']]]]] = None,
            endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
            exclude_cn_from_sans: Optional[pulumi.Input[_builtins.bool]] = None,
            expiration_date: Optional[pulumi.Input[_builtins.str]] = None,
            format: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            ip_sans: Optional[pulumi.Input[_builtins.str]] = None,
            issuer: Optional[pulumi.Input[_builtins.str]] = None,
            issuing_certificates_urls_encoded: Optional[pulumi.Input[_builtins.bool]] = None,
            key_bits: Optional[pulumi.Input[_builtins.float]] = None,
            key_type: Optional[pulumi.Input[_builtins.str]] = None,
            localities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            max_path_length: Optional[pulumi.Input[_builtins.float]] = None,
            max_ttl: Optional[pulumi.Input[_builtins.str]] = None,
            max_ttl_seconds: Optional[pulumi.Input[_builtins.float]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            organizations: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            other_sans: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            ous: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            permitted_dns_domains: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            postal_codes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            private_key_format: Optional[pulumi.Input[_builtins.str]] = None,
            provinces: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            secret_type: Optional[pulumi.Input[_builtins.str]] = None,
            serial_number: Optional[pulumi.Input[_builtins.str]] = None,
            signing_method: Optional[pulumi.Input[_builtins.str]] = None,
            sm_private_certificate_configuration_intermediate_ca_id: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            street_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            ttl: Optional[pulumi.Input[_builtins.str]] = None,
            uri_sans: Optional[pulumi.Input[_builtins.str]] = None,
            use_csr_values: Optional[pulumi.Input[_builtins.bool]] = None) -> 'SmPrivateCertificateConfigurationIntermediateCa':
        """
        Get an existing SmPrivateCertificateConfigurationIntermediateCa resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] alt_names: With the Subject Alternative Name field, you can specify additional host names to be protected by a single SSL
               certificate.
        :param pulumi.Input[_builtins.str] common_name: The Common Name (AKA CN) represents the server name that is protected by the SSL certificate.
        :param pulumi.Input[_builtins.str] config_type: The configuration type.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] countries: The Country (C) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[_builtins.bool] crl_disable: Disables or enables certificate revocation list (CRL) building.If CRL building is disabled, a signed but zero-length CRL
               is returned when downloading the CRL. If CRL building is enabled, it will rebuild the CRL.
        :param pulumi.Input[_builtins.bool] crl_distribution_points_encoded: Determines whether to encode the certificate revocation list (CRL) distribution points in the certificates that are
               issued by this certificate authority.
        :param pulumi.Input[_builtins.str] crl_expiry: The time until the certificate revocation list (CRL) expires.The value can be supplied as a string representation of a
               duration in hours, such as `48h`. The default is 72 hours. In the API response, this value is returned in seconds
               (integer).**Note:** The CRL is rotated automatically before it expires.
        :param pulumi.Input[_builtins.float] crl_expiry_seconds: The time until the certificate revocation list (CRL) expires.The value can be supplied as a string representation of a
               duration in hours, such as `48h`. The default is 72 hours. In the API response, this value is returned in seconds
               (integer).**Note:** The CRL is rotated automatically before it expires.
        :param pulumi.Input[Union['SmPrivateCertificateConfigurationIntermediateCaCryptoKeyArgs', 'SmPrivateCertificateConfigurationIntermediateCaCryptoKeyArgsDict']] crypto_key: The data that is associated with a cryptographic key.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SmPrivateCertificateConfigurationIntermediateCaDataArgs', 'SmPrivateCertificateConfigurationIntermediateCaDataArgsDict']]]] datas: The configuration data of your Private Certificate.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.bool] exclude_cn_from_sans: Controls whether the common name is excluded from Subject Alternative Names (SANs).If the common name set to `true`, it
               is not included in DNS or Email SANs if they apply. This field can be useful if the common name is a human-readable
               identifier, instead of a hostname or an email address.
        :param pulumi.Input[_builtins.str] expiration_date: The date a secret is expired. The date format follows RFC 3339.
        :param pulumi.Input[_builtins.str] format: The format of the returned data.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] ip_sans: The IP Subject Alternative Names to define for the CA certificate, in a comma-delimited list.
        :param pulumi.Input[_builtins.str] issuer: The distinguished name that identifies the entity that signed and issued the certificate.
        :param pulumi.Input[_builtins.bool] issuing_certificates_urls_encoded: Determines whether to encode the URL of the issuing certificate in the certificates that are issued by this certificate
               authority.
        :param pulumi.Input[_builtins.float] key_bits: The number of bits to use to generate the private key.Allowable values for RSA keys are: `2048` and `4096`. Allowable
               values for EC keys are: `224`, `256`, `384`, and `521`. The default for RSA keys is `2048`. The default for EC keys is
               `256`.
        :param pulumi.Input[_builtins.str] key_type: The type of private key to generate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] localities: The Locality (L) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[_builtins.float] max_path_length: The maximum path length to encode in the generated certificate. `-1` means no limit.
        :param pulumi.Input[_builtins.str] max_ttl: The maximum time-to-live (TTL) for certificates that are created by this CA.The value can be supplied as a string
               representation of a duration in hours, for example '8760h'. In the API response, this value is returned in seconds
               (integer).Minimum value is one hour (`1h`). Maximum value is 100 years (`876000h`).
        :param pulumi.Input[_builtins.float] max_ttl_seconds: The maximum time-to-live (TTL) for certificates that are created by this CA.The value can be supplied as a string
               representation of a duration in hours, for example '8760h'. In the API response, this value is returned in seconds
               (integer).Minimum value is one hour (`1h`). Maximum value is 100 years (`876000h`).
        :param pulumi.Input[_builtins.str] name: A human-readable unique name to assign to your configuration.To protect your privacy, do not use personal data, such as
               your name or location, as an name for your secret.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] organizations: The Organization (O) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] other_sans: The custom Object Identifier (OID) or UTF8-string Subject Alternative Names to define for the CA certificate.The
               alternative names must match the values that are specified in the `allowed_other_sans` field in the associated
               certificate template. The format is the same as OpenSSL: `<oid>:<type>:<value>` where the current valid type is `UTF8`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ous: The Organizational Unit (OU) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] permitted_dns_domains: The allowed DNS domains or subdomains for the certificates that are to be signed and issued by this CA certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] postal_codes: The postal code values to define in the subject field of the resulting certificate.
        :param pulumi.Input[_builtins.str] private_key_format: The format of the generated private key.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] provinces: The Province (ST) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[_builtins.str] region: The region of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] secret_type: The secret type. Supported types are arbitrary, certificates (imported, public, and private), IAM credentials,
               key-value, and user credentials.
        :param pulumi.Input[_builtins.str] serial_number: The unique serial number that was assigned to a certificate by the issuing certificate authority.
        :param pulumi.Input[_builtins.str] signing_method: The signing method to use with this certificate authority to generate private certificates.You can choose between
               internal or externally signed options. For more information, see the
               [docs](https://cloud.ibm.com/docs/secrets-manager?topic=secrets-manager-intermediate-certificate-authorities).
        :param pulumi.Input[_builtins.str] status: The status of the certificate authority. The status of a root certificate authority is either `configured` or `expired`.
               For intermediate certificate authorities, possible statuses include `signing_required`,`signed_certificate_required`,
               `certificate_template_required`, `configured`, `expired` or `revoked`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] street_addresses: The street address values to define in the subject field of the resulting certificate.
        :param pulumi.Input[_builtins.str] ttl: Specifies the requested Time To Live (after which the certificate will be expired). The value can be provided provided
               as a string duration with time suffix (e.g. '24h') or the number of seconds as string (e.g. '86400').
        :param pulumi.Input[_builtins.str] uri_sans: The URI Subject Alternative Names to define for the CA certificate, in a comma-delimited list.
        :param pulumi.Input[_builtins.bool] use_csr_values: Determines whether to use values from a certificate signing request (CSR) to complete a
               `private_cert_configuration_action_sign_csr` action.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SmPrivateCertificateConfigurationIntermediateCaState.__new__(_SmPrivateCertificateConfigurationIntermediateCaState)

        __props__.__dict__["alt_names"] = alt_names
        __props__.__dict__["common_name"] = common_name
        __props__.__dict__["config_type"] = config_type
        __props__.__dict__["countries"] = countries
        __props__.__dict__["crl_disable"] = crl_disable
        __props__.__dict__["crl_distribution_points_encoded"] = crl_distribution_points_encoded
        __props__.__dict__["crl_expiry"] = crl_expiry
        __props__.__dict__["crl_expiry_seconds"] = crl_expiry_seconds
        __props__.__dict__["crypto_key"] = crypto_key
        __props__.__dict__["datas"] = datas
        __props__.__dict__["endpoint_type"] = endpoint_type
        __props__.__dict__["exclude_cn_from_sans"] = exclude_cn_from_sans
        __props__.__dict__["expiration_date"] = expiration_date
        __props__.__dict__["format"] = format
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["ip_sans"] = ip_sans
        __props__.__dict__["issuer"] = issuer
        __props__.__dict__["issuing_certificates_urls_encoded"] = issuing_certificates_urls_encoded
        __props__.__dict__["key_bits"] = key_bits
        __props__.__dict__["key_type"] = key_type
        __props__.__dict__["localities"] = localities
        __props__.__dict__["max_path_length"] = max_path_length
        __props__.__dict__["max_ttl"] = max_ttl
        __props__.__dict__["max_ttl_seconds"] = max_ttl_seconds
        __props__.__dict__["name"] = name
        __props__.__dict__["organizations"] = organizations
        __props__.__dict__["other_sans"] = other_sans
        __props__.__dict__["ous"] = ous
        __props__.__dict__["permitted_dns_domains"] = permitted_dns_domains
        __props__.__dict__["postal_codes"] = postal_codes
        __props__.__dict__["private_key_format"] = private_key_format
        __props__.__dict__["provinces"] = provinces
        __props__.__dict__["region"] = region
        __props__.__dict__["secret_type"] = secret_type
        __props__.__dict__["serial_number"] = serial_number
        __props__.__dict__["signing_method"] = signing_method
        __props__.__dict__["sm_private_certificate_configuration_intermediate_ca_id"] = sm_private_certificate_configuration_intermediate_ca_id
        __props__.__dict__["status"] = status
        __props__.__dict__["street_addresses"] = street_addresses
        __props__.__dict__["ttl"] = ttl
        __props__.__dict__["uri_sans"] = uri_sans
        __props__.__dict__["use_csr_values"] = use_csr_values
        return SmPrivateCertificateConfigurationIntermediateCa(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="altNames")
    def alt_names(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        With the Subject Alternative Name field, you can specify additional host names to be protected by a single SSL
        certificate.
        """
        return pulumi.get(self, "alt_names")

    @_builtins.property
    @pulumi.getter(name="commonName")
    def common_name(self) -> pulumi.Output[_builtins.str]:
        """
        The Common Name (AKA CN) represents the server name that is protected by the SSL certificate.
        """
        return pulumi.get(self, "common_name")

    @_builtins.property
    @pulumi.getter(name="configType")
    def config_type(self) -> pulumi.Output[_builtins.str]:
        """
        The configuration type.
        """
        return pulumi.get(self, "config_type")

    @_builtins.property
    @pulumi.getter
    def countries(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The Country (C) values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "countries")

    @_builtins.property
    @pulumi.getter(name="crlDisable")
    def crl_disable(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Disables or enables certificate revocation list (CRL) building.If CRL building is disabled, a signed but zero-length CRL
        is returned when downloading the CRL. If CRL building is enabled, it will rebuild the CRL.
        """
        return pulumi.get(self, "crl_disable")

    @_builtins.property
    @pulumi.getter(name="crlDistributionPointsEncoded")
    def crl_distribution_points_encoded(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Determines whether to encode the certificate revocation list (CRL) distribution points in the certificates that are
        issued by this certificate authority.
        """
        return pulumi.get(self, "crl_distribution_points_encoded")

    @_builtins.property
    @pulumi.getter(name="crlExpiry")
    def crl_expiry(self) -> pulumi.Output[_builtins.str]:
        """
        The time until the certificate revocation list (CRL) expires.The value can be supplied as a string representation of a
        duration in hours, such as `48h`. The default is 72 hours. In the API response, this value is returned in seconds
        (integer).**Note:** The CRL is rotated automatically before it expires.
        """
        return pulumi.get(self, "crl_expiry")

    @_builtins.property
    @pulumi.getter(name="crlExpirySeconds")
    def crl_expiry_seconds(self) -> pulumi.Output[_builtins.float]:
        """
        The time until the certificate revocation list (CRL) expires.The value can be supplied as a string representation of a
        duration in hours, such as `48h`. The default is 72 hours. In the API response, this value is returned in seconds
        (integer).**Note:** The CRL is rotated automatically before it expires.
        """
        return pulumi.get(self, "crl_expiry_seconds")

    @_builtins.property
    @pulumi.getter(name="cryptoKey")
    def crypto_key(self) -> pulumi.Output[Optional['outputs.SmPrivateCertificateConfigurationIntermediateCaCryptoKey']]:
        """
        The data that is associated with a cryptographic key.
        """
        return pulumi.get(self, "crypto_key")

    @_builtins.property
    @pulumi.getter
    def datas(self) -> pulumi.Output[Sequence['outputs.SmPrivateCertificateConfigurationIntermediateCaData']]:
        """
        The configuration data of your Private Certificate.
        """
        return pulumi.get(self, "datas")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter(name="excludeCnFromSans")
    def exclude_cn_from_sans(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Controls whether the common name is excluded from Subject Alternative Names (SANs).If the common name set to `true`, it
        is not included in DNS or Email SANs if they apply. This field can be useful if the common name is a human-readable
        identifier, instead of a hostname or an email address.
        """
        return pulumi.get(self, "exclude_cn_from_sans")

    @_builtins.property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> pulumi.Output[_builtins.str]:
        """
        The date a secret is expired. The date format follows RFC 3339.
        """
        return pulumi.get(self, "expiration_date")

    @_builtins.property
    @pulumi.getter
    def format(self) -> pulumi.Output[_builtins.str]:
        """
        The format of the returned data.
        """
        return pulumi.get(self, "format")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the Secrets Manager instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="ipSans")
    def ip_sans(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The IP Subject Alternative Names to define for the CA certificate, in a comma-delimited list.
        """
        return pulumi.get(self, "ip_sans")

    @_builtins.property
    @pulumi.getter
    def issuer(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The distinguished name that identifies the entity that signed and issued the certificate.
        """
        return pulumi.get(self, "issuer")

    @_builtins.property
    @pulumi.getter(name="issuingCertificatesUrlsEncoded")
    def issuing_certificates_urls_encoded(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Determines whether to encode the URL of the issuing certificate in the certificates that are issued by this certificate
        authority.
        """
        return pulumi.get(self, "issuing_certificates_urls_encoded")

    @_builtins.property
    @pulumi.getter(name="keyBits")
    def key_bits(self) -> pulumi.Output[_builtins.float]:
        """
        The number of bits to use to generate the private key.Allowable values for RSA keys are: `2048` and `4096`. Allowable
        values for EC keys are: `224`, `256`, `384`, and `521`. The default for RSA keys is `2048`. The default for EC keys is
        `256`.
        """
        return pulumi.get(self, "key_bits")

    @_builtins.property
    @pulumi.getter(name="keyType")
    def key_type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of private key to generate.
        """
        return pulumi.get(self, "key_type")

    @_builtins.property
    @pulumi.getter
    def localities(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The Locality (L) values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "localities")

    @_builtins.property
    @pulumi.getter(name="maxPathLength")
    def max_path_length(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        The maximum path length to encode in the generated certificate. `-1` means no limit.
        """
        return pulumi.get(self, "max_path_length")

    @_builtins.property
    @pulumi.getter(name="maxTtl")
    def max_ttl(self) -> pulumi.Output[_builtins.str]:
        """
        The maximum time-to-live (TTL) for certificates that are created by this CA.The value can be supplied as a string
        representation of a duration in hours, for example '8760h'. In the API response, this value is returned in seconds
        (integer).Minimum value is one hour (`1h`). Maximum value is 100 years (`876000h`).
        """
        return pulumi.get(self, "max_ttl")

    @_builtins.property
    @pulumi.getter(name="maxTtlSeconds")
    def max_ttl_seconds(self) -> pulumi.Output[_builtins.float]:
        """
        The maximum time-to-live (TTL) for certificates that are created by this CA.The value can be supplied as a string
        representation of a duration in hours, for example '8760h'. In the API response, this value is returned in seconds
        (integer).Minimum value is one hour (`1h`). Maximum value is 100 years (`876000h`).
        """
        return pulumi.get(self, "max_ttl_seconds")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        A human-readable unique name to assign to your configuration.To protect your privacy, do not use personal data, such as
        your name or location, as an name for your secret.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def organizations(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The Organization (O) values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "organizations")

    @_builtins.property
    @pulumi.getter(name="otherSans")
    def other_sans(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The custom Object Identifier (OID) or UTF8-string Subject Alternative Names to define for the CA certificate.The
        alternative names must match the values that are specified in the `allowed_other_sans` field in the associated
        certificate template. The format is the same as OpenSSL: `<oid>:<type>:<value>` where the current valid type is `UTF8`.
        """
        return pulumi.get(self, "other_sans")

    @_builtins.property
    @pulumi.getter
    def ous(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The Organizational Unit (OU) values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "ous")

    @_builtins.property
    @pulumi.getter(name="permittedDnsDomains")
    def permitted_dns_domains(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        The allowed DNS domains or subdomains for the certificates that are to be signed and issued by this CA certificate.
        """
        return pulumi.get(self, "permitted_dns_domains")

    @_builtins.property
    @pulumi.getter(name="postalCodes")
    def postal_codes(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The postal code values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "postal_codes")

    @_builtins.property
    @pulumi.getter(name="privateKeyFormat")
    def private_key_format(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The format of the generated private key.
        """
        return pulumi.get(self, "private_key_format")

    @_builtins.property
    @pulumi.getter
    def provinces(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The Province (ST) values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "provinces")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region of the Secrets Manager instance.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> pulumi.Output[_builtins.str]:
        """
        The secret type. Supported types are arbitrary, certificates (imported, public, and private), IAM credentials,
        key-value, and user credentials.
        """
        return pulumi.get(self, "secret_type")

    @_builtins.property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> pulumi.Output[_builtins.str]:
        """
        The unique serial number that was assigned to a certificate by the issuing certificate authority.
        """
        return pulumi.get(self, "serial_number")

    @_builtins.property
    @pulumi.getter(name="signingMethod")
    def signing_method(self) -> pulumi.Output[_builtins.str]:
        """
        The signing method to use with this certificate authority to generate private certificates.You can choose between
        internal or externally signed options. For more information, see the
        [docs](https://cloud.ibm.com/docs/secrets-manager?topic=secrets-manager-intermediate-certificate-authorities).
        """
        return pulumi.get(self, "signing_method")

    @_builtins.property
    @pulumi.getter(name="smPrivateCertificateConfigurationIntermediateCaId")
    def sm_private_certificate_configuration_intermediate_ca_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "sm_private_certificate_configuration_intermediate_ca_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the certificate authority. The status of a root certificate authority is either `configured` or `expired`.
        For intermediate certificate authorities, possible statuses include `signing_required`,`signed_certificate_required`,
        `certificate_template_required`, `configured`, `expired` or `revoked`.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="streetAddresses")
    def street_addresses(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The street address values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "street_addresses")

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the requested Time To Live (after which the certificate will be expired). The value can be provided provided
        as a string duration with time suffix (e.g. '24h') or the number of seconds as string (e.g. '86400').
        """
        return pulumi.get(self, "ttl")

    @_builtins.property
    @pulumi.getter(name="uriSans")
    def uri_sans(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The URI Subject Alternative Names to define for the CA certificate, in a comma-delimited list.
        """
        return pulumi.get(self, "uri_sans")

    @_builtins.property
    @pulumi.getter(name="useCsrValues")
    def use_csr_values(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Determines whether to use values from a certificate signing request (CSR) to complete a
        `private_cert_configuration_action_sign_csr` action.
        """
        return pulumi.get(self, "use_csr_values")

