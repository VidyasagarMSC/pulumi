# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetSccReportRuleResult',
    'AwaitableGetSccReportRuleResult',
    'get_scc_report_rule',
    'get_scc_report_rule_output',
]

@pulumi.output_type
class GetSccReportRuleResult:
    """
    A collection of values returned by getSccReportRule.
    """
    def __init__(__self__, account_id=None, created_by=None, created_on=None, description=None, id=None, instance_id=None, labels=None, report_id=None, rule_id=None, type=None, updated_by=None, updated_on=None, version=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if created_on and not isinstance(created_on, str):
            raise TypeError("Expected argument 'created_on' to be a str")
        pulumi.set(__self__, "created_on", created_on)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if labels and not isinstance(labels, list):
            raise TypeError("Expected argument 'labels' to be a list")
        pulumi.set(__self__, "labels", labels)
        if report_id and not isinstance(report_id, str):
            raise TypeError("Expected argument 'report_id' to be a str")
        pulumi.set(__self__, "report_id", report_id)
        if rule_id and not isinstance(rule_id, str):
            raise TypeError("Expected argument 'rule_id' to be a str")
        pulumi.set(__self__, "rule_id", rule_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if updated_by and not isinstance(updated_by, str):
            raise TypeError("Expected argument 'updated_by' to be a str")
        pulumi.set(__self__, "updated_by", updated_by)
        if updated_on and not isinstance(updated_on, str):
            raise TypeError("Expected argument 'updated_on' to be a str")
        pulumi.set(__self__, "updated_on", updated_on)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> _builtins.str:
        return pulumi.get(self, "created_on")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="reportId")
    def report_id(self) -> _builtins.str:
        return pulumi.get(self, "report_id")

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> _builtins.str:
        return pulumi.get(self, "rule_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> _builtins.str:
        return pulumi.get(self, "updated_by")

    @_builtins.property
    @pulumi.getter(name="updatedOn")
    def updated_on(self) -> _builtins.str:
        return pulumi.get(self, "updated_on")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        return pulumi.get(self, "version")


class AwaitableGetSccReportRuleResult(GetSccReportRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSccReportRuleResult(
            account_id=self.account_id,
            created_by=self.created_by,
            created_on=self.created_on,
            description=self.description,
            id=self.id,
            instance_id=self.instance_id,
            labels=self.labels,
            report_id=self.report_id,
            rule_id=self.rule_id,
            type=self.type,
            updated_by=self.updated_by,
            updated_on=self.updated_on,
            version=self.version)


def get_scc_report_rule(instance_id: Optional[_builtins.str] = None,
                        report_id: Optional[_builtins.str] = None,
                        rule_id: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSccReportRuleResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['reportId'] = report_id
    __args__['ruleId'] = rule_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSccReportRule:getSccReportRule', __args__, opts=opts, typ=GetSccReportRuleResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSccReportRuleResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        created_by=pulumi.get(__ret__, 'created_by'),
        created_on=pulumi.get(__ret__, 'created_on'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        labels=pulumi.get(__ret__, 'labels'),
        report_id=pulumi.get(__ret__, 'report_id'),
        rule_id=pulumi.get(__ret__, 'rule_id'),
        type=pulumi.get(__ret__, 'type'),
        updated_by=pulumi.get(__ret__, 'updated_by'),
        updated_on=pulumi.get(__ret__, 'updated_on'),
        version=pulumi.get(__ret__, 'version'))
def get_scc_report_rule_output(instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                               report_id: Optional[pulumi.Input[_builtins.str]] = None,
                               rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSccReportRuleResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['reportId'] = report_id
    __args__['ruleId'] = rule_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSccReportRule:getSccReportRule', __args__, opts=opts, typ=GetSccReportRuleResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSccReportRuleResult(
        account_id=pulumi.get(__response__, 'account_id'),
        created_by=pulumi.get(__response__, 'created_by'),
        created_on=pulumi.get(__response__, 'created_on'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        labels=pulumi.get(__response__, 'labels'),
        report_id=pulumi.get(__response__, 'report_id'),
        rule_id=pulumi.get(__response__, 'rule_id'),
        type=pulumi.get(__response__, 'type'),
        updated_by=pulumi.get(__response__, 'updated_by'),
        updated_on=pulumi.get(__response__, 'updated_on'),
        version=pulumi.get(__response__, 'version')))
