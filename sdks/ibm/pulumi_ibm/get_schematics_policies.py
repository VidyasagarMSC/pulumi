# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSchematicsPoliciesResult',
    'AwaitableGetSchematicsPoliciesResult',
    'get_schematics_policies',
    'get_schematics_policies_output',
]

@pulumi.output_type
class GetSchematicsPoliciesResult:
    """
    A collection of values returned by getSchematicsPolicies.
    """
    def __init__(__self__, id=None, limit=None, offset=None, policies=None, policy_kind=None, total_count=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if limit and not isinstance(limit, float):
            raise TypeError("Expected argument 'limit' to be a float")
        pulumi.set(__self__, "limit", limit)
        if offset and not isinstance(offset, float):
            raise TypeError("Expected argument 'offset' to be a float")
        pulumi.set(__self__, "offset", offset)
        if policies and not isinstance(policies, list):
            raise TypeError("Expected argument 'policies' to be a list")
        pulumi.set(__self__, "policies", policies)
        if policy_kind and not isinstance(policy_kind, str):
            raise TypeError("Expected argument 'policy_kind' to be a str")
        pulumi.set(__self__, "policy_kind", policy_kind)
        if total_count and not isinstance(total_count, float):
            raise TypeError("Expected argument 'total_count' to be a float")
        pulumi.set(__self__, "total_count", total_count)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.float:
        return pulumi.get(self, "limit")

    @_builtins.property
    @pulumi.getter
    def offset(self) -> _builtins.float:
        return pulumi.get(self, "offset")

    @_builtins.property
    @pulumi.getter
    def policies(self) -> Sequence['outputs.GetSchematicsPoliciesPolicyResult']:
        return pulumi.get(self, "policies")

    @_builtins.property
    @pulumi.getter(name="policyKind")
    def policy_kind(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "policy_kind")

    @_builtins.property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> _builtins.float:
        return pulumi.get(self, "total_count")


class AwaitableGetSchematicsPoliciesResult(GetSchematicsPoliciesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSchematicsPoliciesResult(
            id=self.id,
            limit=self.limit,
            offset=self.offset,
            policies=self.policies,
            policy_kind=self.policy_kind,
            total_count=self.total_count)


def get_schematics_policies(id: Optional[_builtins.str] = None,
                            policy_kind: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSchematicsPoliciesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['policyKind'] = policy_kind
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSchematicsPolicies:getSchematicsPolicies', __args__, opts=opts, typ=GetSchematicsPoliciesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSchematicsPoliciesResult(
        id=pulumi.get(__ret__, 'id'),
        limit=pulumi.get(__ret__, 'limit'),
        offset=pulumi.get(__ret__, 'offset'),
        policies=pulumi.get(__ret__, 'policies'),
        policy_kind=pulumi.get(__ret__, 'policy_kind'),
        total_count=pulumi.get(__ret__, 'total_count'))
def get_schematics_policies_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   policy_kind: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSchematicsPoliciesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['policyKind'] = policy_kind
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSchematicsPolicies:getSchematicsPolicies', __args__, opts=opts, typ=GetSchematicsPoliciesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSchematicsPoliciesResult(
        id=pulumi.get(__response__, 'id'),
        limit=pulumi.get(__response__, 'limit'),
        offset=pulumi.get(__response__, 'offset'),
        policies=pulumi.get(__response__, 'policies'),
        policy_kind=pulumi.get(__response__, 'policy_kind'),
        total_count=pulumi.get(__response__, 'total_count')))
