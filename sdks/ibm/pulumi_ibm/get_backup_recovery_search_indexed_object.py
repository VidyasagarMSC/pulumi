# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetBackupRecoverySearchIndexedObjectResult',
    'AwaitableGetBackupRecoverySearchIndexedObjectResult',
    'get_backup_recovery_search_indexed_object',
    'get_backup_recovery_search_indexed_object_output',
]

@pulumi.output_type
class GetBackupRecoverySearchIndexedObjectResult:
    """
    A collection of values returned by getBackupRecoverySearchIndexedObject.
    """
    def __init__(__self__, cassandra_objects=None, cassandra_params=None, couchbase_objects=None, couchbase_params=None, email_params=None, emails=None, exchange_objects=None, exchange_params=None, file_params=None, files=None, hbase_objects=None, hbase_params=None, hdfs_objects=None, hdfs_params=None, hive_objects=None, hive_params=None, id=None, include_tenants=None, might_have_snapshot_tag_ids=None, might_have_tag_ids=None, mongo_objects=None, mongodb_params=None, ms_group_items=None, ms_groups_params=None, ms_teams_params=None, must_have_snapshot_tag_ids=None, must_have_tag_ids=None, object_count=None, object_type=None, one_drive_items=None, one_drive_params=None, pagination_cookie=None, protection_group_ids=None, public_folder_items=None, public_folder_params=None, sfdc_params=None, sfdc_records=None, sharepoint_items=None, sharepoint_params=None, snapshot_tags=None, storage_domain_ids=None, tags=None, teams_items=None, tenant_id=None, uda_objects=None, uda_params=None, use_cached_data=None, x_ibm_tenant_id=None):
        if cassandra_objects and not isinstance(cassandra_objects, list):
            raise TypeError("Expected argument 'cassandra_objects' to be a list")
        pulumi.set(__self__, "cassandra_objects", cassandra_objects)
        if cassandra_params and not isinstance(cassandra_params, dict):
            raise TypeError("Expected argument 'cassandra_params' to be a dict")
        pulumi.set(__self__, "cassandra_params", cassandra_params)
        if couchbase_objects and not isinstance(couchbase_objects, list):
            raise TypeError("Expected argument 'couchbase_objects' to be a list")
        pulumi.set(__self__, "couchbase_objects", couchbase_objects)
        if couchbase_params and not isinstance(couchbase_params, dict):
            raise TypeError("Expected argument 'couchbase_params' to be a dict")
        pulumi.set(__self__, "couchbase_params", couchbase_params)
        if email_params and not isinstance(email_params, dict):
            raise TypeError("Expected argument 'email_params' to be a dict")
        pulumi.set(__self__, "email_params", email_params)
        if emails and not isinstance(emails, list):
            raise TypeError("Expected argument 'emails' to be a list")
        pulumi.set(__self__, "emails", emails)
        if exchange_objects and not isinstance(exchange_objects, list):
            raise TypeError("Expected argument 'exchange_objects' to be a list")
        pulumi.set(__self__, "exchange_objects", exchange_objects)
        if exchange_params and not isinstance(exchange_params, dict):
            raise TypeError("Expected argument 'exchange_params' to be a dict")
        pulumi.set(__self__, "exchange_params", exchange_params)
        if file_params and not isinstance(file_params, dict):
            raise TypeError("Expected argument 'file_params' to be a dict")
        pulumi.set(__self__, "file_params", file_params)
        if files and not isinstance(files, list):
            raise TypeError("Expected argument 'files' to be a list")
        pulumi.set(__self__, "files", files)
        if hbase_objects and not isinstance(hbase_objects, list):
            raise TypeError("Expected argument 'hbase_objects' to be a list")
        pulumi.set(__self__, "hbase_objects", hbase_objects)
        if hbase_params and not isinstance(hbase_params, dict):
            raise TypeError("Expected argument 'hbase_params' to be a dict")
        pulumi.set(__self__, "hbase_params", hbase_params)
        if hdfs_objects and not isinstance(hdfs_objects, list):
            raise TypeError("Expected argument 'hdfs_objects' to be a list")
        pulumi.set(__self__, "hdfs_objects", hdfs_objects)
        if hdfs_params and not isinstance(hdfs_params, dict):
            raise TypeError("Expected argument 'hdfs_params' to be a dict")
        pulumi.set(__self__, "hdfs_params", hdfs_params)
        if hive_objects and not isinstance(hive_objects, list):
            raise TypeError("Expected argument 'hive_objects' to be a list")
        pulumi.set(__self__, "hive_objects", hive_objects)
        if hive_params and not isinstance(hive_params, dict):
            raise TypeError("Expected argument 'hive_params' to be a dict")
        pulumi.set(__self__, "hive_params", hive_params)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if include_tenants and not isinstance(include_tenants, bool):
            raise TypeError("Expected argument 'include_tenants' to be a bool")
        pulumi.set(__self__, "include_tenants", include_tenants)
        if might_have_snapshot_tag_ids and not isinstance(might_have_snapshot_tag_ids, list):
            raise TypeError("Expected argument 'might_have_snapshot_tag_ids' to be a list")
        pulumi.set(__self__, "might_have_snapshot_tag_ids", might_have_snapshot_tag_ids)
        if might_have_tag_ids and not isinstance(might_have_tag_ids, list):
            raise TypeError("Expected argument 'might_have_tag_ids' to be a list")
        pulumi.set(__self__, "might_have_tag_ids", might_have_tag_ids)
        if mongo_objects and not isinstance(mongo_objects, list):
            raise TypeError("Expected argument 'mongo_objects' to be a list")
        pulumi.set(__self__, "mongo_objects", mongo_objects)
        if mongodb_params and not isinstance(mongodb_params, dict):
            raise TypeError("Expected argument 'mongodb_params' to be a dict")
        pulumi.set(__self__, "mongodb_params", mongodb_params)
        if ms_group_items and not isinstance(ms_group_items, list):
            raise TypeError("Expected argument 'ms_group_items' to be a list")
        pulumi.set(__self__, "ms_group_items", ms_group_items)
        if ms_groups_params and not isinstance(ms_groups_params, dict):
            raise TypeError("Expected argument 'ms_groups_params' to be a dict")
        pulumi.set(__self__, "ms_groups_params", ms_groups_params)
        if ms_teams_params and not isinstance(ms_teams_params, dict):
            raise TypeError("Expected argument 'ms_teams_params' to be a dict")
        pulumi.set(__self__, "ms_teams_params", ms_teams_params)
        if must_have_snapshot_tag_ids and not isinstance(must_have_snapshot_tag_ids, list):
            raise TypeError("Expected argument 'must_have_snapshot_tag_ids' to be a list")
        pulumi.set(__self__, "must_have_snapshot_tag_ids", must_have_snapshot_tag_ids)
        if must_have_tag_ids and not isinstance(must_have_tag_ids, list):
            raise TypeError("Expected argument 'must_have_tag_ids' to be a list")
        pulumi.set(__self__, "must_have_tag_ids", must_have_tag_ids)
        if object_count and not isinstance(object_count, float):
            raise TypeError("Expected argument 'object_count' to be a float")
        pulumi.set(__self__, "object_count", object_count)
        if object_type and not isinstance(object_type, str):
            raise TypeError("Expected argument 'object_type' to be a str")
        pulumi.set(__self__, "object_type", object_type)
        if one_drive_items and not isinstance(one_drive_items, list):
            raise TypeError("Expected argument 'one_drive_items' to be a list")
        pulumi.set(__self__, "one_drive_items", one_drive_items)
        if one_drive_params and not isinstance(one_drive_params, dict):
            raise TypeError("Expected argument 'one_drive_params' to be a dict")
        pulumi.set(__self__, "one_drive_params", one_drive_params)
        if pagination_cookie and not isinstance(pagination_cookie, str):
            raise TypeError("Expected argument 'pagination_cookie' to be a str")
        pulumi.set(__self__, "pagination_cookie", pagination_cookie)
        if protection_group_ids and not isinstance(protection_group_ids, list):
            raise TypeError("Expected argument 'protection_group_ids' to be a list")
        pulumi.set(__self__, "protection_group_ids", protection_group_ids)
        if public_folder_items and not isinstance(public_folder_items, list):
            raise TypeError("Expected argument 'public_folder_items' to be a list")
        pulumi.set(__self__, "public_folder_items", public_folder_items)
        if public_folder_params and not isinstance(public_folder_params, dict):
            raise TypeError("Expected argument 'public_folder_params' to be a dict")
        pulumi.set(__self__, "public_folder_params", public_folder_params)
        if sfdc_params and not isinstance(sfdc_params, dict):
            raise TypeError("Expected argument 'sfdc_params' to be a dict")
        pulumi.set(__self__, "sfdc_params", sfdc_params)
        if sfdc_records and not isinstance(sfdc_records, list):
            raise TypeError("Expected argument 'sfdc_records' to be a list")
        pulumi.set(__self__, "sfdc_records", sfdc_records)
        if sharepoint_items and not isinstance(sharepoint_items, list):
            raise TypeError("Expected argument 'sharepoint_items' to be a list")
        pulumi.set(__self__, "sharepoint_items", sharepoint_items)
        if sharepoint_params and not isinstance(sharepoint_params, dict):
            raise TypeError("Expected argument 'sharepoint_params' to be a dict")
        pulumi.set(__self__, "sharepoint_params", sharepoint_params)
        if snapshot_tags and not isinstance(snapshot_tags, list):
            raise TypeError("Expected argument 'snapshot_tags' to be a list")
        pulumi.set(__self__, "snapshot_tags", snapshot_tags)
        if storage_domain_ids and not isinstance(storage_domain_ids, list):
            raise TypeError("Expected argument 'storage_domain_ids' to be a list")
        pulumi.set(__self__, "storage_domain_ids", storage_domain_ids)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if teams_items and not isinstance(teams_items, list):
            raise TypeError("Expected argument 'teams_items' to be a list")
        pulumi.set(__self__, "teams_items", teams_items)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)
        if uda_objects and not isinstance(uda_objects, list):
            raise TypeError("Expected argument 'uda_objects' to be a list")
        pulumi.set(__self__, "uda_objects", uda_objects)
        if uda_params and not isinstance(uda_params, dict):
            raise TypeError("Expected argument 'uda_params' to be a dict")
        pulumi.set(__self__, "uda_params", uda_params)
        if use_cached_data and not isinstance(use_cached_data, bool):
            raise TypeError("Expected argument 'use_cached_data' to be a bool")
        pulumi.set(__self__, "use_cached_data", use_cached_data)
        if x_ibm_tenant_id and not isinstance(x_ibm_tenant_id, str):
            raise TypeError("Expected argument 'x_ibm_tenant_id' to be a str")
        pulumi.set(__self__, "x_ibm_tenant_id", x_ibm_tenant_id)

    @_builtins.property
    @pulumi.getter(name="cassandraObjects")
    def cassandra_objects(self) -> Sequence['outputs.GetBackupRecoverySearchIndexedObjectCassandraObjectResult']:
        return pulumi.get(self, "cassandra_objects")

    @_builtins.property
    @pulumi.getter(name="cassandraParams")
    def cassandra_params(self) -> Optional['outputs.GetBackupRecoverySearchIndexedObjectCassandraParamsResult']:
        return pulumi.get(self, "cassandra_params")

    @_builtins.property
    @pulumi.getter(name="couchbaseObjects")
    def couchbase_objects(self) -> Sequence['outputs.GetBackupRecoverySearchIndexedObjectCouchbaseObjectResult']:
        return pulumi.get(self, "couchbase_objects")

    @_builtins.property
    @pulumi.getter(name="couchbaseParams")
    def couchbase_params(self) -> Optional['outputs.GetBackupRecoverySearchIndexedObjectCouchbaseParamsResult']:
        return pulumi.get(self, "couchbase_params")

    @_builtins.property
    @pulumi.getter(name="emailParams")
    def email_params(self) -> Optional['outputs.GetBackupRecoverySearchIndexedObjectEmailParamsResult']:
        return pulumi.get(self, "email_params")

    @_builtins.property
    @pulumi.getter
    def emails(self) -> Sequence['outputs.GetBackupRecoverySearchIndexedObjectEmailResult']:
        return pulumi.get(self, "emails")

    @_builtins.property
    @pulumi.getter(name="exchangeObjects")
    def exchange_objects(self) -> Sequence['outputs.GetBackupRecoverySearchIndexedObjectExchangeObjectResult']:
        return pulumi.get(self, "exchange_objects")

    @_builtins.property
    @pulumi.getter(name="exchangeParams")
    def exchange_params(self) -> Optional['outputs.GetBackupRecoverySearchIndexedObjectExchangeParamsResult']:
        return pulumi.get(self, "exchange_params")

    @_builtins.property
    @pulumi.getter(name="fileParams")
    def file_params(self) -> Optional['outputs.GetBackupRecoverySearchIndexedObjectFileParamsResult']:
        return pulumi.get(self, "file_params")

    @_builtins.property
    @pulumi.getter
    def files(self) -> Sequence['outputs.GetBackupRecoverySearchIndexedObjectFileResult']:
        return pulumi.get(self, "files")

    @_builtins.property
    @pulumi.getter(name="hbaseObjects")
    def hbase_objects(self) -> Sequence['outputs.GetBackupRecoverySearchIndexedObjectHbaseObjectResult']:
        return pulumi.get(self, "hbase_objects")

    @_builtins.property
    @pulumi.getter(name="hbaseParams")
    def hbase_params(self) -> Optional['outputs.GetBackupRecoverySearchIndexedObjectHbaseParamsResult']:
        return pulumi.get(self, "hbase_params")

    @_builtins.property
    @pulumi.getter(name="hdfsObjects")
    def hdfs_objects(self) -> Sequence['outputs.GetBackupRecoverySearchIndexedObjectHdfsObjectResult']:
        return pulumi.get(self, "hdfs_objects")

    @_builtins.property
    @pulumi.getter(name="hdfsParams")
    def hdfs_params(self) -> Optional['outputs.GetBackupRecoverySearchIndexedObjectHdfsParamsResult']:
        return pulumi.get(self, "hdfs_params")

    @_builtins.property
    @pulumi.getter(name="hiveObjects")
    def hive_objects(self) -> Sequence['outputs.GetBackupRecoverySearchIndexedObjectHiveObjectResult']:
        return pulumi.get(self, "hive_objects")

    @_builtins.property
    @pulumi.getter(name="hiveParams")
    def hive_params(self) -> Optional['outputs.GetBackupRecoverySearchIndexedObjectHiveParamsResult']:
        return pulumi.get(self, "hive_params")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="includeTenants")
    def include_tenants(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "include_tenants")

    @_builtins.property
    @pulumi.getter(name="mightHaveSnapshotTagIds")
    def might_have_snapshot_tag_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "might_have_snapshot_tag_ids")

    @_builtins.property
    @pulumi.getter(name="mightHaveTagIds")
    def might_have_tag_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "might_have_tag_ids")

    @_builtins.property
    @pulumi.getter(name="mongoObjects")
    def mongo_objects(self) -> Sequence['outputs.GetBackupRecoverySearchIndexedObjectMongoObjectResult']:
        return pulumi.get(self, "mongo_objects")

    @_builtins.property
    @pulumi.getter(name="mongodbParams")
    def mongodb_params(self) -> Optional['outputs.GetBackupRecoverySearchIndexedObjectMongodbParamsResult']:
        return pulumi.get(self, "mongodb_params")

    @_builtins.property
    @pulumi.getter(name="msGroupItems")
    def ms_group_items(self) -> Sequence['outputs.GetBackupRecoverySearchIndexedObjectMsGroupItemResult']:
        return pulumi.get(self, "ms_group_items")

    @_builtins.property
    @pulumi.getter(name="msGroupsParams")
    def ms_groups_params(self) -> Optional['outputs.GetBackupRecoverySearchIndexedObjectMsGroupsParamsResult']:
        return pulumi.get(self, "ms_groups_params")

    @_builtins.property
    @pulumi.getter(name="msTeamsParams")
    def ms_teams_params(self) -> Optional['outputs.GetBackupRecoverySearchIndexedObjectMsTeamsParamsResult']:
        return pulumi.get(self, "ms_teams_params")

    @_builtins.property
    @pulumi.getter(name="mustHaveSnapshotTagIds")
    def must_have_snapshot_tag_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "must_have_snapshot_tag_ids")

    @_builtins.property
    @pulumi.getter(name="mustHaveTagIds")
    def must_have_tag_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "must_have_tag_ids")

    @_builtins.property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "object_count")

    @_builtins.property
    @pulumi.getter(name="objectType")
    def object_type(self) -> _builtins.str:
        return pulumi.get(self, "object_type")

    @_builtins.property
    @pulumi.getter(name="oneDriveItems")
    def one_drive_items(self) -> Sequence['outputs.GetBackupRecoverySearchIndexedObjectOneDriveItemResult']:
        return pulumi.get(self, "one_drive_items")

    @_builtins.property
    @pulumi.getter(name="oneDriveParams")
    def one_drive_params(self) -> Optional['outputs.GetBackupRecoverySearchIndexedObjectOneDriveParamsResult']:
        return pulumi.get(self, "one_drive_params")

    @_builtins.property
    @pulumi.getter(name="paginationCookie")
    def pagination_cookie(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "pagination_cookie")

    @_builtins.property
    @pulumi.getter(name="protectionGroupIds")
    def protection_group_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "protection_group_ids")

    @_builtins.property
    @pulumi.getter(name="publicFolderItems")
    def public_folder_items(self) -> Sequence['outputs.GetBackupRecoverySearchIndexedObjectPublicFolderItemResult']:
        return pulumi.get(self, "public_folder_items")

    @_builtins.property
    @pulumi.getter(name="publicFolderParams")
    def public_folder_params(self) -> Optional['outputs.GetBackupRecoverySearchIndexedObjectPublicFolderParamsResult']:
        return pulumi.get(self, "public_folder_params")

    @_builtins.property
    @pulumi.getter(name="sfdcParams")
    def sfdc_params(self) -> Optional['outputs.GetBackupRecoverySearchIndexedObjectSfdcParamsResult']:
        return pulumi.get(self, "sfdc_params")

    @_builtins.property
    @pulumi.getter(name="sfdcRecords")
    def sfdc_records(self) -> Sequence['outputs.GetBackupRecoverySearchIndexedObjectSfdcRecordResult']:
        return pulumi.get(self, "sfdc_records")

    @_builtins.property
    @pulumi.getter(name="sharepointItems")
    def sharepoint_items(self) -> Sequence['outputs.GetBackupRecoverySearchIndexedObjectSharepointItemResult']:
        return pulumi.get(self, "sharepoint_items")

    @_builtins.property
    @pulumi.getter(name="sharepointParams")
    def sharepoint_params(self) -> Optional['outputs.GetBackupRecoverySearchIndexedObjectSharepointParamsResult']:
        return pulumi.get(self, "sharepoint_params")

    @_builtins.property
    @pulumi.getter(name="snapshotTags")
    def snapshot_tags(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "snapshot_tags")

    @_builtins.property
    @pulumi.getter(name="storageDomainIds")
    def storage_domain_ids(self) -> Optional[Sequence[_builtins.float]]:
        return pulumi.get(self, "storage_domain_ids")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="teamsItems")
    def teams_items(self) -> Sequence['outputs.GetBackupRecoverySearchIndexedObjectTeamsItemResult']:
        return pulumi.get(self, "teams_items")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter(name="udaObjects")
    def uda_objects(self) -> Sequence['outputs.GetBackupRecoverySearchIndexedObjectUdaObjectResult']:
        return pulumi.get(self, "uda_objects")

    @_builtins.property
    @pulumi.getter(name="udaParams")
    def uda_params(self) -> Optional['outputs.GetBackupRecoverySearchIndexedObjectUdaParamsResult']:
        return pulumi.get(self, "uda_params")

    @_builtins.property
    @pulumi.getter(name="useCachedData")
    def use_cached_data(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "use_cached_data")

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> _builtins.str:
        return pulumi.get(self, "x_ibm_tenant_id")


class AwaitableGetBackupRecoverySearchIndexedObjectResult(GetBackupRecoverySearchIndexedObjectResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupRecoverySearchIndexedObjectResult(
            cassandra_objects=self.cassandra_objects,
            cassandra_params=self.cassandra_params,
            couchbase_objects=self.couchbase_objects,
            couchbase_params=self.couchbase_params,
            email_params=self.email_params,
            emails=self.emails,
            exchange_objects=self.exchange_objects,
            exchange_params=self.exchange_params,
            file_params=self.file_params,
            files=self.files,
            hbase_objects=self.hbase_objects,
            hbase_params=self.hbase_params,
            hdfs_objects=self.hdfs_objects,
            hdfs_params=self.hdfs_params,
            hive_objects=self.hive_objects,
            hive_params=self.hive_params,
            id=self.id,
            include_tenants=self.include_tenants,
            might_have_snapshot_tag_ids=self.might_have_snapshot_tag_ids,
            might_have_tag_ids=self.might_have_tag_ids,
            mongo_objects=self.mongo_objects,
            mongodb_params=self.mongodb_params,
            ms_group_items=self.ms_group_items,
            ms_groups_params=self.ms_groups_params,
            ms_teams_params=self.ms_teams_params,
            must_have_snapshot_tag_ids=self.must_have_snapshot_tag_ids,
            must_have_tag_ids=self.must_have_tag_ids,
            object_count=self.object_count,
            object_type=self.object_type,
            one_drive_items=self.one_drive_items,
            one_drive_params=self.one_drive_params,
            pagination_cookie=self.pagination_cookie,
            protection_group_ids=self.protection_group_ids,
            public_folder_items=self.public_folder_items,
            public_folder_params=self.public_folder_params,
            sfdc_params=self.sfdc_params,
            sfdc_records=self.sfdc_records,
            sharepoint_items=self.sharepoint_items,
            sharepoint_params=self.sharepoint_params,
            snapshot_tags=self.snapshot_tags,
            storage_domain_ids=self.storage_domain_ids,
            tags=self.tags,
            teams_items=self.teams_items,
            tenant_id=self.tenant_id,
            uda_objects=self.uda_objects,
            uda_params=self.uda_params,
            use_cached_data=self.use_cached_data,
            x_ibm_tenant_id=self.x_ibm_tenant_id)


def get_backup_recovery_search_indexed_object(cassandra_params: Optional[Union['GetBackupRecoverySearchIndexedObjectCassandraParamsArgs', 'GetBackupRecoverySearchIndexedObjectCassandraParamsArgsDict']] = None,
                                              couchbase_params: Optional[Union['GetBackupRecoverySearchIndexedObjectCouchbaseParamsArgs', 'GetBackupRecoverySearchIndexedObjectCouchbaseParamsArgsDict']] = None,
                                              email_params: Optional[Union['GetBackupRecoverySearchIndexedObjectEmailParamsArgs', 'GetBackupRecoverySearchIndexedObjectEmailParamsArgsDict']] = None,
                                              exchange_params: Optional[Union['GetBackupRecoverySearchIndexedObjectExchangeParamsArgs', 'GetBackupRecoverySearchIndexedObjectExchangeParamsArgsDict']] = None,
                                              file_params: Optional[Union['GetBackupRecoverySearchIndexedObjectFileParamsArgs', 'GetBackupRecoverySearchIndexedObjectFileParamsArgsDict']] = None,
                                              hbase_params: Optional[Union['GetBackupRecoverySearchIndexedObjectHbaseParamsArgs', 'GetBackupRecoverySearchIndexedObjectHbaseParamsArgsDict']] = None,
                                              hdfs_params: Optional[Union['GetBackupRecoverySearchIndexedObjectHdfsParamsArgs', 'GetBackupRecoverySearchIndexedObjectHdfsParamsArgsDict']] = None,
                                              hive_params: Optional[Union['GetBackupRecoverySearchIndexedObjectHiveParamsArgs', 'GetBackupRecoverySearchIndexedObjectHiveParamsArgsDict']] = None,
                                              id: Optional[_builtins.str] = None,
                                              include_tenants: Optional[_builtins.bool] = None,
                                              might_have_snapshot_tag_ids: Optional[Sequence[_builtins.str]] = None,
                                              might_have_tag_ids: Optional[Sequence[_builtins.str]] = None,
                                              mongodb_params: Optional[Union['GetBackupRecoverySearchIndexedObjectMongodbParamsArgs', 'GetBackupRecoverySearchIndexedObjectMongodbParamsArgsDict']] = None,
                                              ms_groups_params: Optional[Union['GetBackupRecoverySearchIndexedObjectMsGroupsParamsArgs', 'GetBackupRecoverySearchIndexedObjectMsGroupsParamsArgsDict']] = None,
                                              ms_teams_params: Optional[Union['GetBackupRecoverySearchIndexedObjectMsTeamsParamsArgs', 'GetBackupRecoverySearchIndexedObjectMsTeamsParamsArgsDict']] = None,
                                              must_have_snapshot_tag_ids: Optional[Sequence[_builtins.str]] = None,
                                              must_have_tag_ids: Optional[Sequence[_builtins.str]] = None,
                                              object_count: Optional[_builtins.float] = None,
                                              object_type: Optional[_builtins.str] = None,
                                              one_drive_params: Optional[Union['GetBackupRecoverySearchIndexedObjectOneDriveParamsArgs', 'GetBackupRecoverySearchIndexedObjectOneDriveParamsArgsDict']] = None,
                                              pagination_cookie: Optional[_builtins.str] = None,
                                              protection_group_ids: Optional[Sequence[_builtins.str]] = None,
                                              public_folder_params: Optional[Union['GetBackupRecoverySearchIndexedObjectPublicFolderParamsArgs', 'GetBackupRecoverySearchIndexedObjectPublicFolderParamsArgsDict']] = None,
                                              sfdc_params: Optional[Union['GetBackupRecoverySearchIndexedObjectSfdcParamsArgs', 'GetBackupRecoverySearchIndexedObjectSfdcParamsArgsDict']] = None,
                                              sharepoint_params: Optional[Union['GetBackupRecoverySearchIndexedObjectSharepointParamsArgs', 'GetBackupRecoverySearchIndexedObjectSharepointParamsArgsDict']] = None,
                                              snapshot_tags: Optional[Sequence[_builtins.str]] = None,
                                              storage_domain_ids: Optional[Sequence[_builtins.float]] = None,
                                              tags: Optional[Sequence[_builtins.str]] = None,
                                              tenant_id: Optional[_builtins.str] = None,
                                              uda_params: Optional[Union['GetBackupRecoverySearchIndexedObjectUdaParamsArgs', 'GetBackupRecoverySearchIndexedObjectUdaParamsArgsDict']] = None,
                                              use_cached_data: Optional[_builtins.bool] = None,
                                              x_ibm_tenant_id: Optional[_builtins.str] = None,
                                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupRecoverySearchIndexedObjectResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cassandraParams'] = cassandra_params
    __args__['couchbaseParams'] = couchbase_params
    __args__['emailParams'] = email_params
    __args__['exchangeParams'] = exchange_params
    __args__['fileParams'] = file_params
    __args__['hbaseParams'] = hbase_params
    __args__['hdfsParams'] = hdfs_params
    __args__['hiveParams'] = hive_params
    __args__['id'] = id
    __args__['includeTenants'] = include_tenants
    __args__['mightHaveSnapshotTagIds'] = might_have_snapshot_tag_ids
    __args__['mightHaveTagIds'] = might_have_tag_ids
    __args__['mongodbParams'] = mongodb_params
    __args__['msGroupsParams'] = ms_groups_params
    __args__['msTeamsParams'] = ms_teams_params
    __args__['mustHaveSnapshotTagIds'] = must_have_snapshot_tag_ids
    __args__['mustHaveTagIds'] = must_have_tag_ids
    __args__['objectCount'] = object_count
    __args__['objectType'] = object_type
    __args__['oneDriveParams'] = one_drive_params
    __args__['paginationCookie'] = pagination_cookie
    __args__['protectionGroupIds'] = protection_group_ids
    __args__['publicFolderParams'] = public_folder_params
    __args__['sfdcParams'] = sfdc_params
    __args__['sharepointParams'] = sharepoint_params
    __args__['snapshotTags'] = snapshot_tags
    __args__['storageDomainIds'] = storage_domain_ids
    __args__['tags'] = tags
    __args__['tenantId'] = tenant_id
    __args__['udaParams'] = uda_params
    __args__['useCachedData'] = use_cached_data
    __args__['xIbmTenantId'] = x_ibm_tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getBackupRecoverySearchIndexedObject:getBackupRecoverySearchIndexedObject', __args__, opts=opts, typ=GetBackupRecoverySearchIndexedObjectResult, package_ref=_utilities.get_package()).value

    return AwaitableGetBackupRecoverySearchIndexedObjectResult(
        cassandra_objects=pulumi.get(__ret__, 'cassandra_objects'),
        cassandra_params=pulumi.get(__ret__, 'cassandra_params'),
        couchbase_objects=pulumi.get(__ret__, 'couchbase_objects'),
        couchbase_params=pulumi.get(__ret__, 'couchbase_params'),
        email_params=pulumi.get(__ret__, 'email_params'),
        emails=pulumi.get(__ret__, 'emails'),
        exchange_objects=pulumi.get(__ret__, 'exchange_objects'),
        exchange_params=pulumi.get(__ret__, 'exchange_params'),
        file_params=pulumi.get(__ret__, 'file_params'),
        files=pulumi.get(__ret__, 'files'),
        hbase_objects=pulumi.get(__ret__, 'hbase_objects'),
        hbase_params=pulumi.get(__ret__, 'hbase_params'),
        hdfs_objects=pulumi.get(__ret__, 'hdfs_objects'),
        hdfs_params=pulumi.get(__ret__, 'hdfs_params'),
        hive_objects=pulumi.get(__ret__, 'hive_objects'),
        hive_params=pulumi.get(__ret__, 'hive_params'),
        id=pulumi.get(__ret__, 'id'),
        include_tenants=pulumi.get(__ret__, 'include_tenants'),
        might_have_snapshot_tag_ids=pulumi.get(__ret__, 'might_have_snapshot_tag_ids'),
        might_have_tag_ids=pulumi.get(__ret__, 'might_have_tag_ids'),
        mongo_objects=pulumi.get(__ret__, 'mongo_objects'),
        mongodb_params=pulumi.get(__ret__, 'mongodb_params'),
        ms_group_items=pulumi.get(__ret__, 'ms_group_items'),
        ms_groups_params=pulumi.get(__ret__, 'ms_groups_params'),
        ms_teams_params=pulumi.get(__ret__, 'ms_teams_params'),
        must_have_snapshot_tag_ids=pulumi.get(__ret__, 'must_have_snapshot_tag_ids'),
        must_have_tag_ids=pulumi.get(__ret__, 'must_have_tag_ids'),
        object_count=pulumi.get(__ret__, 'object_count'),
        object_type=pulumi.get(__ret__, 'object_type'),
        one_drive_items=pulumi.get(__ret__, 'one_drive_items'),
        one_drive_params=pulumi.get(__ret__, 'one_drive_params'),
        pagination_cookie=pulumi.get(__ret__, 'pagination_cookie'),
        protection_group_ids=pulumi.get(__ret__, 'protection_group_ids'),
        public_folder_items=pulumi.get(__ret__, 'public_folder_items'),
        public_folder_params=pulumi.get(__ret__, 'public_folder_params'),
        sfdc_params=pulumi.get(__ret__, 'sfdc_params'),
        sfdc_records=pulumi.get(__ret__, 'sfdc_records'),
        sharepoint_items=pulumi.get(__ret__, 'sharepoint_items'),
        sharepoint_params=pulumi.get(__ret__, 'sharepoint_params'),
        snapshot_tags=pulumi.get(__ret__, 'snapshot_tags'),
        storage_domain_ids=pulumi.get(__ret__, 'storage_domain_ids'),
        tags=pulumi.get(__ret__, 'tags'),
        teams_items=pulumi.get(__ret__, 'teams_items'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'),
        uda_objects=pulumi.get(__ret__, 'uda_objects'),
        uda_params=pulumi.get(__ret__, 'uda_params'),
        use_cached_data=pulumi.get(__ret__, 'use_cached_data'),
        x_ibm_tenant_id=pulumi.get(__ret__, 'x_ibm_tenant_id'))
def get_backup_recovery_search_indexed_object_output(cassandra_params: Optional[pulumi.Input[Optional[Union['GetBackupRecoverySearchIndexedObjectCassandraParamsArgs', 'GetBackupRecoverySearchIndexedObjectCassandraParamsArgsDict']]]] = None,
                                                     couchbase_params: Optional[pulumi.Input[Optional[Union['GetBackupRecoverySearchIndexedObjectCouchbaseParamsArgs', 'GetBackupRecoverySearchIndexedObjectCouchbaseParamsArgsDict']]]] = None,
                                                     email_params: Optional[pulumi.Input[Optional[Union['GetBackupRecoverySearchIndexedObjectEmailParamsArgs', 'GetBackupRecoverySearchIndexedObjectEmailParamsArgsDict']]]] = None,
                                                     exchange_params: Optional[pulumi.Input[Optional[Union['GetBackupRecoverySearchIndexedObjectExchangeParamsArgs', 'GetBackupRecoverySearchIndexedObjectExchangeParamsArgsDict']]]] = None,
                                                     file_params: Optional[pulumi.Input[Optional[Union['GetBackupRecoverySearchIndexedObjectFileParamsArgs', 'GetBackupRecoverySearchIndexedObjectFileParamsArgsDict']]]] = None,
                                                     hbase_params: Optional[pulumi.Input[Optional[Union['GetBackupRecoverySearchIndexedObjectHbaseParamsArgs', 'GetBackupRecoverySearchIndexedObjectHbaseParamsArgsDict']]]] = None,
                                                     hdfs_params: Optional[pulumi.Input[Optional[Union['GetBackupRecoverySearchIndexedObjectHdfsParamsArgs', 'GetBackupRecoverySearchIndexedObjectHdfsParamsArgsDict']]]] = None,
                                                     hive_params: Optional[pulumi.Input[Optional[Union['GetBackupRecoverySearchIndexedObjectHiveParamsArgs', 'GetBackupRecoverySearchIndexedObjectHiveParamsArgsDict']]]] = None,
                                                     id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                     include_tenants: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                                     might_have_snapshot_tag_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                     might_have_tag_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                     mongodb_params: Optional[pulumi.Input[Optional[Union['GetBackupRecoverySearchIndexedObjectMongodbParamsArgs', 'GetBackupRecoverySearchIndexedObjectMongodbParamsArgsDict']]]] = None,
                                                     ms_groups_params: Optional[pulumi.Input[Optional[Union['GetBackupRecoverySearchIndexedObjectMsGroupsParamsArgs', 'GetBackupRecoverySearchIndexedObjectMsGroupsParamsArgsDict']]]] = None,
                                                     ms_teams_params: Optional[pulumi.Input[Optional[Union['GetBackupRecoverySearchIndexedObjectMsTeamsParamsArgs', 'GetBackupRecoverySearchIndexedObjectMsTeamsParamsArgsDict']]]] = None,
                                                     must_have_snapshot_tag_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                     must_have_tag_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                     object_count: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                                                     object_type: Optional[pulumi.Input[_builtins.str]] = None,
                                                     one_drive_params: Optional[pulumi.Input[Optional[Union['GetBackupRecoverySearchIndexedObjectOneDriveParamsArgs', 'GetBackupRecoverySearchIndexedObjectOneDriveParamsArgsDict']]]] = None,
                                                     pagination_cookie: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                     protection_group_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                     public_folder_params: Optional[pulumi.Input[Optional[Union['GetBackupRecoverySearchIndexedObjectPublicFolderParamsArgs', 'GetBackupRecoverySearchIndexedObjectPublicFolderParamsArgsDict']]]] = None,
                                                     sfdc_params: Optional[pulumi.Input[Optional[Union['GetBackupRecoverySearchIndexedObjectSfdcParamsArgs', 'GetBackupRecoverySearchIndexedObjectSfdcParamsArgsDict']]]] = None,
                                                     sharepoint_params: Optional[pulumi.Input[Optional[Union['GetBackupRecoverySearchIndexedObjectSharepointParamsArgs', 'GetBackupRecoverySearchIndexedObjectSharepointParamsArgsDict']]]] = None,
                                                     snapshot_tags: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                     storage_domain_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.float]]]] = None,
                                                     tags: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                     tenant_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                     uda_params: Optional[pulumi.Input[Optional[Union['GetBackupRecoverySearchIndexedObjectUdaParamsArgs', 'GetBackupRecoverySearchIndexedObjectUdaParamsArgsDict']]]] = None,
                                                     use_cached_data: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                                     x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBackupRecoverySearchIndexedObjectResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cassandraParams'] = cassandra_params
    __args__['couchbaseParams'] = couchbase_params
    __args__['emailParams'] = email_params
    __args__['exchangeParams'] = exchange_params
    __args__['fileParams'] = file_params
    __args__['hbaseParams'] = hbase_params
    __args__['hdfsParams'] = hdfs_params
    __args__['hiveParams'] = hive_params
    __args__['id'] = id
    __args__['includeTenants'] = include_tenants
    __args__['mightHaveSnapshotTagIds'] = might_have_snapshot_tag_ids
    __args__['mightHaveTagIds'] = might_have_tag_ids
    __args__['mongodbParams'] = mongodb_params
    __args__['msGroupsParams'] = ms_groups_params
    __args__['msTeamsParams'] = ms_teams_params
    __args__['mustHaveSnapshotTagIds'] = must_have_snapshot_tag_ids
    __args__['mustHaveTagIds'] = must_have_tag_ids
    __args__['objectCount'] = object_count
    __args__['objectType'] = object_type
    __args__['oneDriveParams'] = one_drive_params
    __args__['paginationCookie'] = pagination_cookie
    __args__['protectionGroupIds'] = protection_group_ids
    __args__['publicFolderParams'] = public_folder_params
    __args__['sfdcParams'] = sfdc_params
    __args__['sharepointParams'] = sharepoint_params
    __args__['snapshotTags'] = snapshot_tags
    __args__['storageDomainIds'] = storage_domain_ids
    __args__['tags'] = tags
    __args__['tenantId'] = tenant_id
    __args__['udaParams'] = uda_params
    __args__['useCachedData'] = use_cached_data
    __args__['xIbmTenantId'] = x_ibm_tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getBackupRecoverySearchIndexedObject:getBackupRecoverySearchIndexedObject', __args__, opts=opts, typ=GetBackupRecoverySearchIndexedObjectResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetBackupRecoverySearchIndexedObjectResult(
        cassandra_objects=pulumi.get(__response__, 'cassandra_objects'),
        cassandra_params=pulumi.get(__response__, 'cassandra_params'),
        couchbase_objects=pulumi.get(__response__, 'couchbase_objects'),
        couchbase_params=pulumi.get(__response__, 'couchbase_params'),
        email_params=pulumi.get(__response__, 'email_params'),
        emails=pulumi.get(__response__, 'emails'),
        exchange_objects=pulumi.get(__response__, 'exchange_objects'),
        exchange_params=pulumi.get(__response__, 'exchange_params'),
        file_params=pulumi.get(__response__, 'file_params'),
        files=pulumi.get(__response__, 'files'),
        hbase_objects=pulumi.get(__response__, 'hbase_objects'),
        hbase_params=pulumi.get(__response__, 'hbase_params'),
        hdfs_objects=pulumi.get(__response__, 'hdfs_objects'),
        hdfs_params=pulumi.get(__response__, 'hdfs_params'),
        hive_objects=pulumi.get(__response__, 'hive_objects'),
        hive_params=pulumi.get(__response__, 'hive_params'),
        id=pulumi.get(__response__, 'id'),
        include_tenants=pulumi.get(__response__, 'include_tenants'),
        might_have_snapshot_tag_ids=pulumi.get(__response__, 'might_have_snapshot_tag_ids'),
        might_have_tag_ids=pulumi.get(__response__, 'might_have_tag_ids'),
        mongo_objects=pulumi.get(__response__, 'mongo_objects'),
        mongodb_params=pulumi.get(__response__, 'mongodb_params'),
        ms_group_items=pulumi.get(__response__, 'ms_group_items'),
        ms_groups_params=pulumi.get(__response__, 'ms_groups_params'),
        ms_teams_params=pulumi.get(__response__, 'ms_teams_params'),
        must_have_snapshot_tag_ids=pulumi.get(__response__, 'must_have_snapshot_tag_ids'),
        must_have_tag_ids=pulumi.get(__response__, 'must_have_tag_ids'),
        object_count=pulumi.get(__response__, 'object_count'),
        object_type=pulumi.get(__response__, 'object_type'),
        one_drive_items=pulumi.get(__response__, 'one_drive_items'),
        one_drive_params=pulumi.get(__response__, 'one_drive_params'),
        pagination_cookie=pulumi.get(__response__, 'pagination_cookie'),
        protection_group_ids=pulumi.get(__response__, 'protection_group_ids'),
        public_folder_items=pulumi.get(__response__, 'public_folder_items'),
        public_folder_params=pulumi.get(__response__, 'public_folder_params'),
        sfdc_params=pulumi.get(__response__, 'sfdc_params'),
        sfdc_records=pulumi.get(__response__, 'sfdc_records'),
        sharepoint_items=pulumi.get(__response__, 'sharepoint_items'),
        sharepoint_params=pulumi.get(__response__, 'sharepoint_params'),
        snapshot_tags=pulumi.get(__response__, 'snapshot_tags'),
        storage_domain_ids=pulumi.get(__response__, 'storage_domain_ids'),
        tags=pulumi.get(__response__, 'tags'),
        teams_items=pulumi.get(__response__, 'teams_items'),
        tenant_id=pulumi.get(__response__, 'tenant_id'),
        uda_objects=pulumi.get(__response__, 'uda_objects'),
        uda_params=pulumi.get(__response__, 'uda_params'),
        use_cached_data=pulumi.get(__response__, 'use_cached_data'),
        x_ibm_tenant_id=pulumi.get(__response__, 'x_ibm_tenant_id')))
