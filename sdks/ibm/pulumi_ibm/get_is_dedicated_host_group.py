# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsDedicatedHostGroupResult',
    'AwaitableGetIsDedicatedHostGroupResult',
    'get_is_dedicated_host_group',
    'get_is_dedicated_host_group_output',
]

@pulumi.output_type
class GetIsDedicatedHostGroupResult:
    """
    A collection of values returned by getIsDedicatedHostGroup.
    """
    def __init__(__self__, class_=None, created_at=None, crn=None, dedicated_hosts=None, family=None, href=None, id=None, name=None, resource_group=None, resource_type=None, supported_instance_profiles=None, zone=None):
        if class_ and not isinstance(class_, str):
            raise TypeError("Expected argument 'class_' to be a str")
        pulumi.set(__self__, "class_", class_)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if dedicated_hosts and not isinstance(dedicated_hosts, list):
            raise TypeError("Expected argument 'dedicated_hosts' to be a list")
        pulumi.set(__self__, "dedicated_hosts", dedicated_hosts)
        if family and not isinstance(family, str):
            raise TypeError("Expected argument 'family' to be a str")
        pulumi.set(__self__, "family", family)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resource_group and not isinstance(resource_group, str):
            raise TypeError("Expected argument 'resource_group' to be a str")
        pulumi.set(__self__, "resource_group", resource_group)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if supported_instance_profiles and not isinstance(supported_instance_profiles, list):
            raise TypeError("Expected argument 'supported_instance_profiles' to be a list")
        pulumi.set(__self__, "supported_instance_profiles", supported_instance_profiles)
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter(name="class")
    def class_(self) -> _builtins.str:
        return pulumi.get(self, "class_")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="dedicatedHosts")
    def dedicated_hosts(self) -> Sequence['outputs.GetIsDedicatedHostGroupDedicatedHostResult']:
        return pulumi.get(self, "dedicated_hosts")

    @_builtins.property
    @pulumi.getter
    def family(self) -> _builtins.str:
        return pulumi.get(self, "family")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> _builtins.str:
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="supportedInstanceProfiles")
    def supported_instance_profiles(self) -> Sequence['outputs.GetIsDedicatedHostGroupSupportedInstanceProfileResult']:
        return pulumi.get(self, "supported_instance_profiles")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> _builtins.str:
        return pulumi.get(self, "zone")


class AwaitableGetIsDedicatedHostGroupResult(GetIsDedicatedHostGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsDedicatedHostGroupResult(
            class_=self.class_,
            created_at=self.created_at,
            crn=self.crn,
            dedicated_hosts=self.dedicated_hosts,
            family=self.family,
            href=self.href,
            id=self.id,
            name=self.name,
            resource_group=self.resource_group,
            resource_type=self.resource_type,
            supported_instance_profiles=self.supported_instance_profiles,
            zone=self.zone)


def get_is_dedicated_host_group(id: Optional[_builtins.str] = None,
                                name: Optional[_builtins.str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsDedicatedHostGroupResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsDedicatedHostGroup:getIsDedicatedHostGroup', __args__, opts=opts, typ=GetIsDedicatedHostGroupResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsDedicatedHostGroupResult(
        class_=pulumi.get(__ret__, 'class_'),
        created_at=pulumi.get(__ret__, 'created_at'),
        crn=pulumi.get(__ret__, 'crn'),
        dedicated_hosts=pulumi.get(__ret__, 'dedicated_hosts'),
        family=pulumi.get(__ret__, 'family'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        resource_group=pulumi.get(__ret__, 'resource_group'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        supported_instance_profiles=pulumi.get(__ret__, 'supported_instance_profiles'),
        zone=pulumi.get(__ret__, 'zone'))
def get_is_dedicated_host_group_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       name: Optional[pulumi.Input[_builtins.str]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsDedicatedHostGroupResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsDedicatedHostGroup:getIsDedicatedHostGroup', __args__, opts=opts, typ=GetIsDedicatedHostGroupResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsDedicatedHostGroupResult(
        class_=pulumi.get(__response__, 'class_'),
        created_at=pulumi.get(__response__, 'created_at'),
        crn=pulumi.get(__response__, 'crn'),
        dedicated_hosts=pulumi.get(__response__, 'dedicated_hosts'),
        family=pulumi.get(__response__, 'family'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        resource_group=pulumi.get(__response__, 'resource_group'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        supported_instance_profiles=pulumi.get(__response__, 'supported_instance_profiles'),
        zone=pulumi.get(__response__, 'zone')))
