# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ComputeVmInstanceArgs', 'ComputeVmInstance']

@pulumi.input_type
class ComputeVmInstanceArgs:
    def __init__(__self__, *,
                 block_storage_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 bulk_vms: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeVmInstanceBulkVmArgs']]]] = None,
                 compute_vm_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cores: Optional[pulumi.Input[_builtins.float]] = None,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 datacenter_choices: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]]] = None,
                 dedicated_acct_host_only: Optional[pulumi.Input[_builtins.bool]] = None,
                 dedicated_host_id: Optional[pulumi.Input[_builtins.float]] = None,
                 dedicated_host_name: Optional[pulumi.Input[_builtins.str]] = None,
                 disks: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 domain: Optional[pulumi.Input[_builtins.str]] = None,
                 evault: Optional[pulumi.Input[_builtins.float]] = None,
                 file_storage_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 flavor_key_name: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 hourly_billing: Optional[pulumi.Input[_builtins.bool]] = None,
                 image_id: Optional[pulumi.Input[_builtins.float]] = None,
                 ipv6_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv6_static_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 local_disk: Optional[pulumi.Input[_builtins.bool]] = None,
                 memory: Optional[pulumi.Input[_builtins.float]] = None,
                 network_speed: Optional[pulumi.Input[_builtins.float]] = None,
                 notes: Optional[pulumi.Input[_builtins.str]] = None,
                 os_reference_code: Optional[pulumi.Input[_builtins.str]] = None,
                 placement_group_id: Optional[pulumi.Input[_builtins.float]] = None,
                 placement_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 post_install_script_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 private_network_only: Optional[pulumi.Input[_builtins.bool]] = None,
                 private_security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 private_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 private_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
                 public_bandwidth_limited: Optional[pulumi.Input[_builtins.float]] = None,
                 public_bandwidth_unlimited: Optional[pulumi.Input[_builtins.bool]] = None,
                 public_security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 public_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 public_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
                 quote_id: Optional[pulumi.Input[_builtins.float]] = None,
                 reserved_capacity_id: Optional[pulumi.Input[_builtins.float]] = None,
                 reserved_capacity_name: Optional[pulumi.Input[_builtins.str]] = None,
                 reserved_instance_primary_disk: Optional[pulumi.Input[_builtins.float]] = None,
                 secondary_ip_count: Optional[pulumi.Input[_builtins.float]] = None,
                 ssh_key_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['ComputeVmInstanceTimeoutsArgs']] = None,
                 transient: Optional[pulumi.Input[_builtins.bool]] = None,
                 user_metadata: Optional[pulumi.Input[_builtins.str]] = None,
                 wait_time_minutes: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a ComputeVmInstance resource.
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]] datacenter_choices: The user provided datacenter options
        :param pulumi.Input[_builtins.str] flavor_key_name: Flavor key name used to provision vm.
        :param pulumi.Input[_builtins.float] placement_group_id: The placement group id
        :param pulumi.Input[_builtins.str] placement_group_name: The placement group name
        :param pulumi.Input[_builtins.float] quote_id: Quote ID for Quote based provisioning
        :param pulumi.Input[_builtins.float] reserved_capacity_id: The reserved group id
        :param pulumi.Input[_builtins.str] reserved_capacity_name: The reserved group id
        :param pulumi.Input[_builtins.float] reserved_instance_primary_disk: The primary disk of reserved instance
        """
        if block_storage_ids is not None:
            pulumi.set(__self__, "block_storage_ids", block_storage_ids)
        if bulk_vms is not None:
            pulumi.set(__self__, "bulk_vms", bulk_vms)
        if compute_vm_instance_id is not None:
            pulumi.set(__self__, "compute_vm_instance_id", compute_vm_instance_id)
        if cores is not None:
            pulumi.set(__self__, "cores", cores)
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if datacenter_choices is not None:
            pulumi.set(__self__, "datacenter_choices", datacenter_choices)
        if dedicated_acct_host_only is not None:
            pulumi.set(__self__, "dedicated_acct_host_only", dedicated_acct_host_only)
        if dedicated_host_id is not None:
            pulumi.set(__self__, "dedicated_host_id", dedicated_host_id)
        if dedicated_host_name is not None:
            pulumi.set(__self__, "dedicated_host_name", dedicated_host_name)
        if disks is not None:
            pulumi.set(__self__, "disks", disks)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if evault is not None:
            pulumi.set(__self__, "evault", evault)
        if file_storage_ids is not None:
            pulumi.set(__self__, "file_storage_ids", file_storage_ids)
        if flavor_key_name is not None:
            pulumi.set(__self__, "flavor_key_name", flavor_key_name)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if hourly_billing is not None:
            pulumi.set(__self__, "hourly_billing", hourly_billing)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if ipv6_enabled is not None:
            pulumi.set(__self__, "ipv6_enabled", ipv6_enabled)
        if ipv6_static_enabled is not None:
            pulumi.set(__self__, "ipv6_static_enabled", ipv6_static_enabled)
        if local_disk is not None:
            pulumi.set(__self__, "local_disk", local_disk)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if network_speed is not None:
            pulumi.set(__self__, "network_speed", network_speed)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if os_reference_code is not None:
            pulumi.set(__self__, "os_reference_code", os_reference_code)
        if placement_group_id is not None:
            pulumi.set(__self__, "placement_group_id", placement_group_id)
        if placement_group_name is not None:
            pulumi.set(__self__, "placement_group_name", placement_group_name)
        if post_install_script_uri is not None:
            pulumi.set(__self__, "post_install_script_uri", post_install_script_uri)
        if private_network_only is not None:
            pulumi.set(__self__, "private_network_only", private_network_only)
        if private_security_group_ids is not None:
            pulumi.set(__self__, "private_security_group_ids", private_security_group_ids)
        if private_subnet is not None:
            pulumi.set(__self__, "private_subnet", private_subnet)
        if private_vlan_id is not None:
            pulumi.set(__self__, "private_vlan_id", private_vlan_id)
        if public_bandwidth_limited is not None:
            pulumi.set(__self__, "public_bandwidth_limited", public_bandwidth_limited)
        if public_bandwidth_unlimited is not None:
            pulumi.set(__self__, "public_bandwidth_unlimited", public_bandwidth_unlimited)
        if public_security_group_ids is not None:
            pulumi.set(__self__, "public_security_group_ids", public_security_group_ids)
        if public_subnet is not None:
            pulumi.set(__self__, "public_subnet", public_subnet)
        if public_vlan_id is not None:
            pulumi.set(__self__, "public_vlan_id", public_vlan_id)
        if quote_id is not None:
            pulumi.set(__self__, "quote_id", quote_id)
        if reserved_capacity_id is not None:
            pulumi.set(__self__, "reserved_capacity_id", reserved_capacity_id)
        if reserved_capacity_name is not None:
            pulumi.set(__self__, "reserved_capacity_name", reserved_capacity_name)
        if reserved_instance_primary_disk is not None:
            pulumi.set(__self__, "reserved_instance_primary_disk", reserved_instance_primary_disk)
        if secondary_ip_count is not None:
            pulumi.set(__self__, "secondary_ip_count", secondary_ip_count)
        if ssh_key_ids is not None:
            pulumi.set(__self__, "ssh_key_ids", ssh_key_ids)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if transient is not None:
            pulumi.set(__self__, "transient", transient)
        if user_metadata is not None:
            pulumi.set(__self__, "user_metadata", user_metadata)
        if wait_time_minutes is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""wait_time_minutes is deprecated: Deprecated""")
        if wait_time_minutes is not None:
            pulumi.set(__self__, "wait_time_minutes", wait_time_minutes)

    @_builtins.property
    @pulumi.getter(name="blockStorageIds")
    def block_storage_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        return pulumi.get(self, "block_storage_ids")

    @block_storage_ids.setter
    def block_storage_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "block_storage_ids", value)

    @_builtins.property
    @pulumi.getter(name="bulkVms")
    def bulk_vms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComputeVmInstanceBulkVmArgs']]]]:
        return pulumi.get(self, "bulk_vms")

    @bulk_vms.setter
    def bulk_vms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeVmInstanceBulkVmArgs']]]]):
        pulumi.set(self, "bulk_vms", value)

    @_builtins.property
    @pulumi.getter(name="computeVmInstanceId")
    def compute_vm_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compute_vm_instance_id")

    @compute_vm_instance_id.setter
    def compute_vm_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_vm_instance_id", value)

    @_builtins.property
    @pulumi.getter
    def cores(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "cores")

    @cores.setter
    def cores(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "cores", value)

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "datacenter")

    @datacenter.setter
    def datacenter(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "datacenter", value)

    @_builtins.property
    @pulumi.getter(name="datacenterChoices")
    def datacenter_choices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]]]:
        """
        The user provided datacenter options
        """
        return pulumi.get(self, "datacenter_choices")

    @datacenter_choices.setter
    def datacenter_choices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]]]):
        pulumi.set(self, "datacenter_choices", value)

    @_builtins.property
    @pulumi.getter(name="dedicatedAcctHostOnly")
    def dedicated_acct_host_only(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "dedicated_acct_host_only")

    @dedicated_acct_host_only.setter
    def dedicated_acct_host_only(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "dedicated_acct_host_only", value)

    @_builtins.property
    @pulumi.getter(name="dedicatedHostId")
    def dedicated_host_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "dedicated_host_id")

    @dedicated_host_id.setter
    def dedicated_host_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "dedicated_host_id", value)

    @_builtins.property
    @pulumi.getter(name="dedicatedHostName")
    def dedicated_host_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dedicated_host_name")

    @dedicated_host_name.setter
    def dedicated_host_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dedicated_host_name", value)

    @_builtins.property
    @pulumi.getter
    def disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        return pulumi.get(self, "disks")

    @disks.setter
    def disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "disks", value)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain", value)

    @_builtins.property
    @pulumi.getter
    def evault(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "evault")

    @evault.setter
    def evault(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "evault", value)

    @_builtins.property
    @pulumi.getter(name="fileStorageIds")
    def file_storage_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        return pulumi.get(self, "file_storage_ids")

    @file_storage_ids.setter
    def file_storage_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "file_storage_ids", value)

    @_builtins.property
    @pulumi.getter(name="flavorKeyName")
    def flavor_key_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Flavor key name used to provision vm.
        """
        return pulumi.get(self, "flavor_key_name")

    @flavor_key_name.setter
    def flavor_key_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "flavor_key_name", value)

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hostname", value)

    @_builtins.property
    @pulumi.getter(name="hourlyBilling")
    def hourly_billing(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "hourly_billing")

    @hourly_billing.setter
    def hourly_billing(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "hourly_billing", value)

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "image_id", value)

    @_builtins.property
    @pulumi.getter(name="ipv6Enabled")
    def ipv6_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "ipv6_enabled")

    @ipv6_enabled.setter
    def ipv6_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ipv6_enabled", value)

    @_builtins.property
    @pulumi.getter(name="ipv6StaticEnabled")
    def ipv6_static_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "ipv6_static_enabled")

    @ipv6_static_enabled.setter
    def ipv6_static_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ipv6_static_enabled", value)

    @_builtins.property
    @pulumi.getter(name="localDisk")
    def local_disk(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "local_disk")

    @local_disk.setter
    def local_disk(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "local_disk", value)

    @_builtins.property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "memory", value)

    @_builtins.property
    @pulumi.getter(name="networkSpeed")
    def network_speed(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "network_speed")

    @network_speed.setter
    def network_speed(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "network_speed", value)

    @_builtins.property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "notes", value)

    @_builtins.property
    @pulumi.getter(name="osReferenceCode")
    def os_reference_code(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "os_reference_code")

    @os_reference_code.setter
    def os_reference_code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "os_reference_code", value)

    @_builtins.property
    @pulumi.getter(name="placementGroupId")
    def placement_group_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The placement group id
        """
        return pulumi.get(self, "placement_group_id")

    @placement_group_id.setter
    def placement_group_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "placement_group_id", value)

    @_builtins.property
    @pulumi.getter(name="placementGroupName")
    def placement_group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The placement group name
        """
        return pulumi.get(self, "placement_group_name")

    @placement_group_name.setter
    def placement_group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "placement_group_name", value)

    @_builtins.property
    @pulumi.getter(name="postInstallScriptUri")
    def post_install_script_uri(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "post_install_script_uri")

    @post_install_script_uri.setter
    def post_install_script_uri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "post_install_script_uri", value)

    @_builtins.property
    @pulumi.getter(name="privateNetworkOnly")
    def private_network_only(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "private_network_only")

    @private_network_only.setter
    def private_network_only(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "private_network_only", value)

    @_builtins.property
    @pulumi.getter(name="privateSecurityGroupIds")
    def private_security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        return pulumi.get(self, "private_security_group_ids")

    @private_security_group_ids.setter
    def private_security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "private_security_group_ids", value)

    @_builtins.property
    @pulumi.getter(name="privateSubnet")
    def private_subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "private_subnet")

    @private_subnet.setter
    def private_subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_subnet", value)

    @_builtins.property
    @pulumi.getter(name="privateVlanId")
    def private_vlan_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "private_vlan_id")

    @private_vlan_id.setter
    def private_vlan_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "private_vlan_id", value)

    @_builtins.property
    @pulumi.getter(name="publicBandwidthLimited")
    def public_bandwidth_limited(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "public_bandwidth_limited")

    @public_bandwidth_limited.setter
    def public_bandwidth_limited(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "public_bandwidth_limited", value)

    @_builtins.property
    @pulumi.getter(name="publicBandwidthUnlimited")
    def public_bandwidth_unlimited(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "public_bandwidth_unlimited")

    @public_bandwidth_unlimited.setter
    def public_bandwidth_unlimited(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "public_bandwidth_unlimited", value)

    @_builtins.property
    @pulumi.getter(name="publicSecurityGroupIds")
    def public_security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        return pulumi.get(self, "public_security_group_ids")

    @public_security_group_ids.setter
    def public_security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "public_security_group_ids", value)

    @_builtins.property
    @pulumi.getter(name="publicSubnet")
    def public_subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "public_subnet")

    @public_subnet.setter
    def public_subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_subnet", value)

    @_builtins.property
    @pulumi.getter(name="publicVlanId")
    def public_vlan_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "public_vlan_id")

    @public_vlan_id.setter
    def public_vlan_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "public_vlan_id", value)

    @_builtins.property
    @pulumi.getter(name="quoteId")
    def quote_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Quote ID for Quote based provisioning
        """
        return pulumi.get(self, "quote_id")

    @quote_id.setter
    def quote_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "quote_id", value)

    @_builtins.property
    @pulumi.getter(name="reservedCapacityId")
    def reserved_capacity_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The reserved group id
        """
        return pulumi.get(self, "reserved_capacity_id")

    @reserved_capacity_id.setter
    def reserved_capacity_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "reserved_capacity_id", value)

    @_builtins.property
    @pulumi.getter(name="reservedCapacityName")
    def reserved_capacity_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The reserved group id
        """
        return pulumi.get(self, "reserved_capacity_name")

    @reserved_capacity_name.setter
    def reserved_capacity_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "reserved_capacity_name", value)

    @_builtins.property
    @pulumi.getter(name="reservedInstancePrimaryDisk")
    def reserved_instance_primary_disk(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The primary disk of reserved instance
        """
        return pulumi.get(self, "reserved_instance_primary_disk")

    @reserved_instance_primary_disk.setter
    def reserved_instance_primary_disk(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "reserved_instance_primary_disk", value)

    @_builtins.property
    @pulumi.getter(name="secondaryIpCount")
    def secondary_ip_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "secondary_ip_count")

    @secondary_ip_count.setter
    def secondary_ip_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "secondary_ip_count", value)

    @_builtins.property
    @pulumi.getter(name="sshKeyIds")
    def ssh_key_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        return pulumi.get(self, "ssh_key_ids")

    @ssh_key_ids.setter
    def ssh_key_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "ssh_key_ids", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ComputeVmInstanceTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ComputeVmInstanceTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def transient(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "transient")

    @transient.setter
    def transient(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "transient", value)

    @_builtins.property
    @pulumi.getter(name="userMetadata")
    def user_metadata(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "user_metadata")

    @user_metadata.setter
    def user_metadata(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_metadata", value)

    @_builtins.property
    @pulumi.getter(name="waitTimeMinutes")
    @_utilities.deprecated("""Deprecated""")
    def wait_time_minutes(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "wait_time_minutes")

    @wait_time_minutes.setter
    def wait_time_minutes(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "wait_time_minutes", value)


@pulumi.input_type
class _ComputeVmInstanceState:
    def __init__(__self__, *,
                 block_storage_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 bulk_vms: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeVmInstanceBulkVmArgs']]]] = None,
                 compute_vm_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cores: Optional[pulumi.Input[_builtins.float]] = None,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 datacenter_choices: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]]] = None,
                 dedicated_acct_host_only: Optional[pulumi.Input[_builtins.bool]] = None,
                 dedicated_host_id: Optional[pulumi.Input[_builtins.float]] = None,
                 dedicated_host_name: Optional[pulumi.Input[_builtins.str]] = None,
                 disks: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 domain: Optional[pulumi.Input[_builtins.str]] = None,
                 evault: Optional[pulumi.Input[_builtins.float]] = None,
                 file_storage_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 flavor_key_name: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 hourly_billing: Optional[pulumi.Input[_builtins.bool]] = None,
                 image_id: Optional[pulumi.Input[_builtins.float]] = None,
                 ip_address_id: Optional[pulumi.Input[_builtins.float]] = None,
                 ip_address_id_private: Optional[pulumi.Input[_builtins.float]] = None,
                 ipv4_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_address_private: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_address: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv6_address_id: Optional[pulumi.Input[_builtins.float]] = None,
                 ipv6_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv6_static_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 local_disk: Optional[pulumi.Input[_builtins.bool]] = None,
                 memory: Optional[pulumi.Input[_builtins.float]] = None,
                 network_speed: Optional[pulumi.Input[_builtins.float]] = None,
                 notes: Optional[pulumi.Input[_builtins.str]] = None,
                 os_reference_code: Optional[pulumi.Input[_builtins.str]] = None,
                 placement_group_id: Optional[pulumi.Input[_builtins.float]] = None,
                 placement_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 post_install_script_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 private_interface_id: Optional[pulumi.Input[_builtins.float]] = None,
                 private_network_only: Optional[pulumi.Input[_builtins.bool]] = None,
                 private_security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 private_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 private_subnet_id: Optional[pulumi.Input[_builtins.float]] = None,
                 private_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
                 public_bandwidth_limited: Optional[pulumi.Input[_builtins.float]] = None,
                 public_bandwidth_unlimited: Optional[pulumi.Input[_builtins.bool]] = None,
                 public_interface_id: Optional[pulumi.Input[_builtins.float]] = None,
                 public_ipv6_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 public_ipv6_subnet_id: Optional[pulumi.Input[_builtins.float]] = None,
                 public_security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 public_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 public_subnet_id: Optional[pulumi.Input[_builtins.float]] = None,
                 public_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
                 quote_id: Optional[pulumi.Input[_builtins.float]] = None,
                 reserved_capacity_id: Optional[pulumi.Input[_builtins.float]] = None,
                 reserved_capacity_name: Optional[pulumi.Input[_builtins.str]] = None,
                 reserved_instance_primary_disk: Optional[pulumi.Input[_builtins.float]] = None,
                 resource_controller_url: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_status: Optional[pulumi.Input[_builtins.str]] = None,
                 secondary_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 secondary_ip_count: Optional[pulumi.Input[_builtins.float]] = None,
                 ssh_key_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['ComputeVmInstanceTimeoutsArgs']] = None,
                 transient: Optional[pulumi.Input[_builtins.bool]] = None,
                 user_metadata: Optional[pulumi.Input[_builtins.str]] = None,
                 wait_time_minutes: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering ComputeVmInstance resources.
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]] datacenter_choices: The user provided datacenter options
        :param pulumi.Input[_builtins.str] flavor_key_name: Flavor key name used to provision vm.
        :param pulumi.Input[_builtins.float] placement_group_id: The placement group id
        :param pulumi.Input[_builtins.str] placement_group_name: The placement group name
        :param pulumi.Input[_builtins.float] quote_id: Quote ID for Quote based provisioning
        :param pulumi.Input[_builtins.float] reserved_capacity_id: The reserved group id
        :param pulumi.Input[_builtins.str] reserved_capacity_name: The reserved group id
        :param pulumi.Input[_builtins.float] reserved_instance_primary_disk: The primary disk of reserved instance
        :param pulumi.Input[_builtins.str] resource_controller_url: The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        :param pulumi.Input[_builtins.str] resource_name: The name of the resource
        :param pulumi.Input[_builtins.str] resource_status: The status of the resource
        """
        if block_storage_ids is not None:
            pulumi.set(__self__, "block_storage_ids", block_storage_ids)
        if bulk_vms is not None:
            pulumi.set(__self__, "bulk_vms", bulk_vms)
        if compute_vm_instance_id is not None:
            pulumi.set(__self__, "compute_vm_instance_id", compute_vm_instance_id)
        if cores is not None:
            pulumi.set(__self__, "cores", cores)
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if datacenter_choices is not None:
            pulumi.set(__self__, "datacenter_choices", datacenter_choices)
        if dedicated_acct_host_only is not None:
            pulumi.set(__self__, "dedicated_acct_host_only", dedicated_acct_host_only)
        if dedicated_host_id is not None:
            pulumi.set(__self__, "dedicated_host_id", dedicated_host_id)
        if dedicated_host_name is not None:
            pulumi.set(__self__, "dedicated_host_name", dedicated_host_name)
        if disks is not None:
            pulumi.set(__self__, "disks", disks)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if evault is not None:
            pulumi.set(__self__, "evault", evault)
        if file_storage_ids is not None:
            pulumi.set(__self__, "file_storage_ids", file_storage_ids)
        if flavor_key_name is not None:
            pulumi.set(__self__, "flavor_key_name", flavor_key_name)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if hourly_billing is not None:
            pulumi.set(__self__, "hourly_billing", hourly_billing)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if ip_address_id is not None:
            pulumi.set(__self__, "ip_address_id", ip_address_id)
        if ip_address_id_private is not None:
            pulumi.set(__self__, "ip_address_id_private", ip_address_id_private)
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv4_address_private is not None:
            pulumi.set(__self__, "ipv4_address_private", ipv4_address_private)
        if ipv6_address is not None:
            pulumi.set(__self__, "ipv6_address", ipv6_address)
        if ipv6_address_id is not None:
            pulumi.set(__self__, "ipv6_address_id", ipv6_address_id)
        if ipv6_enabled is not None:
            pulumi.set(__self__, "ipv6_enabled", ipv6_enabled)
        if ipv6_static_enabled is not None:
            pulumi.set(__self__, "ipv6_static_enabled", ipv6_static_enabled)
        if local_disk is not None:
            pulumi.set(__self__, "local_disk", local_disk)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if network_speed is not None:
            pulumi.set(__self__, "network_speed", network_speed)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if os_reference_code is not None:
            pulumi.set(__self__, "os_reference_code", os_reference_code)
        if placement_group_id is not None:
            pulumi.set(__self__, "placement_group_id", placement_group_id)
        if placement_group_name is not None:
            pulumi.set(__self__, "placement_group_name", placement_group_name)
        if post_install_script_uri is not None:
            pulumi.set(__self__, "post_install_script_uri", post_install_script_uri)
        if private_interface_id is not None:
            pulumi.set(__self__, "private_interface_id", private_interface_id)
        if private_network_only is not None:
            pulumi.set(__self__, "private_network_only", private_network_only)
        if private_security_group_ids is not None:
            pulumi.set(__self__, "private_security_group_ids", private_security_group_ids)
        if private_subnet is not None:
            pulumi.set(__self__, "private_subnet", private_subnet)
        if private_subnet_id is not None:
            pulumi.set(__self__, "private_subnet_id", private_subnet_id)
        if private_vlan_id is not None:
            pulumi.set(__self__, "private_vlan_id", private_vlan_id)
        if public_bandwidth_limited is not None:
            pulumi.set(__self__, "public_bandwidth_limited", public_bandwidth_limited)
        if public_bandwidth_unlimited is not None:
            pulumi.set(__self__, "public_bandwidth_unlimited", public_bandwidth_unlimited)
        if public_interface_id is not None:
            pulumi.set(__self__, "public_interface_id", public_interface_id)
        if public_ipv6_subnet is not None:
            pulumi.set(__self__, "public_ipv6_subnet", public_ipv6_subnet)
        if public_ipv6_subnet_id is not None:
            pulumi.set(__self__, "public_ipv6_subnet_id", public_ipv6_subnet_id)
        if public_security_group_ids is not None:
            pulumi.set(__self__, "public_security_group_ids", public_security_group_ids)
        if public_subnet is not None:
            pulumi.set(__self__, "public_subnet", public_subnet)
        if public_subnet_id is not None:
            pulumi.set(__self__, "public_subnet_id", public_subnet_id)
        if public_vlan_id is not None:
            pulumi.set(__self__, "public_vlan_id", public_vlan_id)
        if quote_id is not None:
            pulumi.set(__self__, "quote_id", quote_id)
        if reserved_capacity_id is not None:
            pulumi.set(__self__, "reserved_capacity_id", reserved_capacity_id)
        if reserved_capacity_name is not None:
            pulumi.set(__self__, "reserved_capacity_name", reserved_capacity_name)
        if reserved_instance_primary_disk is not None:
            pulumi.set(__self__, "reserved_instance_primary_disk", reserved_instance_primary_disk)
        if resource_controller_url is not None:
            pulumi.set(__self__, "resource_controller_url", resource_controller_url)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_status is not None:
            pulumi.set(__self__, "resource_status", resource_status)
        if secondary_ip_addresses is not None:
            pulumi.set(__self__, "secondary_ip_addresses", secondary_ip_addresses)
        if secondary_ip_count is not None:
            pulumi.set(__self__, "secondary_ip_count", secondary_ip_count)
        if ssh_key_ids is not None:
            pulumi.set(__self__, "ssh_key_ids", ssh_key_ids)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if transient is not None:
            pulumi.set(__self__, "transient", transient)
        if user_metadata is not None:
            pulumi.set(__self__, "user_metadata", user_metadata)
        if wait_time_minutes is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""wait_time_minutes is deprecated: Deprecated""")
        if wait_time_minutes is not None:
            pulumi.set(__self__, "wait_time_minutes", wait_time_minutes)

    @_builtins.property
    @pulumi.getter(name="blockStorageIds")
    def block_storage_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        return pulumi.get(self, "block_storage_ids")

    @block_storage_ids.setter
    def block_storage_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "block_storage_ids", value)

    @_builtins.property
    @pulumi.getter(name="bulkVms")
    def bulk_vms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComputeVmInstanceBulkVmArgs']]]]:
        return pulumi.get(self, "bulk_vms")

    @bulk_vms.setter
    def bulk_vms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeVmInstanceBulkVmArgs']]]]):
        pulumi.set(self, "bulk_vms", value)

    @_builtins.property
    @pulumi.getter(name="computeVmInstanceId")
    def compute_vm_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compute_vm_instance_id")

    @compute_vm_instance_id.setter
    def compute_vm_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_vm_instance_id", value)

    @_builtins.property
    @pulumi.getter
    def cores(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "cores")

    @cores.setter
    def cores(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "cores", value)

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "datacenter")

    @datacenter.setter
    def datacenter(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "datacenter", value)

    @_builtins.property
    @pulumi.getter(name="datacenterChoices")
    def datacenter_choices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]]]:
        """
        The user provided datacenter options
        """
        return pulumi.get(self, "datacenter_choices")

    @datacenter_choices.setter
    def datacenter_choices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]]]):
        pulumi.set(self, "datacenter_choices", value)

    @_builtins.property
    @pulumi.getter(name="dedicatedAcctHostOnly")
    def dedicated_acct_host_only(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "dedicated_acct_host_only")

    @dedicated_acct_host_only.setter
    def dedicated_acct_host_only(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "dedicated_acct_host_only", value)

    @_builtins.property
    @pulumi.getter(name="dedicatedHostId")
    def dedicated_host_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "dedicated_host_id")

    @dedicated_host_id.setter
    def dedicated_host_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "dedicated_host_id", value)

    @_builtins.property
    @pulumi.getter(name="dedicatedHostName")
    def dedicated_host_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dedicated_host_name")

    @dedicated_host_name.setter
    def dedicated_host_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dedicated_host_name", value)

    @_builtins.property
    @pulumi.getter
    def disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        return pulumi.get(self, "disks")

    @disks.setter
    def disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "disks", value)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain", value)

    @_builtins.property
    @pulumi.getter
    def evault(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "evault")

    @evault.setter
    def evault(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "evault", value)

    @_builtins.property
    @pulumi.getter(name="fileStorageIds")
    def file_storage_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        return pulumi.get(self, "file_storage_ids")

    @file_storage_ids.setter
    def file_storage_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "file_storage_ids", value)

    @_builtins.property
    @pulumi.getter(name="flavorKeyName")
    def flavor_key_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Flavor key name used to provision vm.
        """
        return pulumi.get(self, "flavor_key_name")

    @flavor_key_name.setter
    def flavor_key_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "flavor_key_name", value)

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hostname", value)

    @_builtins.property
    @pulumi.getter(name="hourlyBilling")
    def hourly_billing(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "hourly_billing")

    @hourly_billing.setter
    def hourly_billing(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "hourly_billing", value)

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "image_id", value)

    @_builtins.property
    @pulumi.getter(name="ipAddressId")
    def ip_address_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "ip_address_id")

    @ip_address_id.setter
    def ip_address_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ip_address_id", value)

    @_builtins.property
    @pulumi.getter(name="ipAddressIdPrivate")
    def ip_address_id_private(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "ip_address_id_private")

    @ip_address_id_private.setter
    def ip_address_id_private(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ip_address_id_private", value)

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ipv4_address")

    @ipv4_address.setter
    def ipv4_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_address", value)

    @_builtins.property
    @pulumi.getter(name="ipv4AddressPrivate")
    def ipv4_address_private(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ipv4_address_private")

    @ipv4_address_private.setter
    def ipv4_address_private(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_address_private", value)

    @_builtins.property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ipv6_address")

    @ipv6_address.setter
    def ipv6_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv6_address", value)

    @_builtins.property
    @pulumi.getter(name="ipv6AddressId")
    def ipv6_address_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "ipv6_address_id")

    @ipv6_address_id.setter
    def ipv6_address_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ipv6_address_id", value)

    @_builtins.property
    @pulumi.getter(name="ipv6Enabled")
    def ipv6_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "ipv6_enabled")

    @ipv6_enabled.setter
    def ipv6_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ipv6_enabled", value)

    @_builtins.property
    @pulumi.getter(name="ipv6StaticEnabled")
    def ipv6_static_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "ipv6_static_enabled")

    @ipv6_static_enabled.setter
    def ipv6_static_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ipv6_static_enabled", value)

    @_builtins.property
    @pulumi.getter(name="localDisk")
    def local_disk(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "local_disk")

    @local_disk.setter
    def local_disk(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "local_disk", value)

    @_builtins.property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "memory", value)

    @_builtins.property
    @pulumi.getter(name="networkSpeed")
    def network_speed(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "network_speed")

    @network_speed.setter
    def network_speed(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "network_speed", value)

    @_builtins.property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "notes", value)

    @_builtins.property
    @pulumi.getter(name="osReferenceCode")
    def os_reference_code(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "os_reference_code")

    @os_reference_code.setter
    def os_reference_code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "os_reference_code", value)

    @_builtins.property
    @pulumi.getter(name="placementGroupId")
    def placement_group_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The placement group id
        """
        return pulumi.get(self, "placement_group_id")

    @placement_group_id.setter
    def placement_group_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "placement_group_id", value)

    @_builtins.property
    @pulumi.getter(name="placementGroupName")
    def placement_group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The placement group name
        """
        return pulumi.get(self, "placement_group_name")

    @placement_group_name.setter
    def placement_group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "placement_group_name", value)

    @_builtins.property
    @pulumi.getter(name="postInstallScriptUri")
    def post_install_script_uri(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "post_install_script_uri")

    @post_install_script_uri.setter
    def post_install_script_uri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "post_install_script_uri", value)

    @_builtins.property
    @pulumi.getter(name="privateInterfaceId")
    def private_interface_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "private_interface_id")

    @private_interface_id.setter
    def private_interface_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "private_interface_id", value)

    @_builtins.property
    @pulumi.getter(name="privateNetworkOnly")
    def private_network_only(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "private_network_only")

    @private_network_only.setter
    def private_network_only(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "private_network_only", value)

    @_builtins.property
    @pulumi.getter(name="privateSecurityGroupIds")
    def private_security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        return pulumi.get(self, "private_security_group_ids")

    @private_security_group_ids.setter
    def private_security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "private_security_group_ids", value)

    @_builtins.property
    @pulumi.getter(name="privateSubnet")
    def private_subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "private_subnet")

    @private_subnet.setter
    def private_subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_subnet", value)

    @_builtins.property
    @pulumi.getter(name="privateSubnetId")
    def private_subnet_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "private_subnet_id")

    @private_subnet_id.setter
    def private_subnet_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "private_subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="privateVlanId")
    def private_vlan_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "private_vlan_id")

    @private_vlan_id.setter
    def private_vlan_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "private_vlan_id", value)

    @_builtins.property
    @pulumi.getter(name="publicBandwidthLimited")
    def public_bandwidth_limited(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "public_bandwidth_limited")

    @public_bandwidth_limited.setter
    def public_bandwidth_limited(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "public_bandwidth_limited", value)

    @_builtins.property
    @pulumi.getter(name="publicBandwidthUnlimited")
    def public_bandwidth_unlimited(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "public_bandwidth_unlimited")

    @public_bandwidth_unlimited.setter
    def public_bandwidth_unlimited(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "public_bandwidth_unlimited", value)

    @_builtins.property
    @pulumi.getter(name="publicInterfaceId")
    def public_interface_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "public_interface_id")

    @public_interface_id.setter
    def public_interface_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "public_interface_id", value)

    @_builtins.property
    @pulumi.getter(name="publicIpv6Subnet")
    def public_ipv6_subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "public_ipv6_subnet")

    @public_ipv6_subnet.setter
    def public_ipv6_subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_ipv6_subnet", value)

    @_builtins.property
    @pulumi.getter(name="publicIpv6SubnetId")
    def public_ipv6_subnet_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "public_ipv6_subnet_id")

    @public_ipv6_subnet_id.setter
    def public_ipv6_subnet_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "public_ipv6_subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="publicSecurityGroupIds")
    def public_security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        return pulumi.get(self, "public_security_group_ids")

    @public_security_group_ids.setter
    def public_security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "public_security_group_ids", value)

    @_builtins.property
    @pulumi.getter(name="publicSubnet")
    def public_subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "public_subnet")

    @public_subnet.setter
    def public_subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_subnet", value)

    @_builtins.property
    @pulumi.getter(name="publicSubnetId")
    def public_subnet_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "public_subnet_id")

    @public_subnet_id.setter
    def public_subnet_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "public_subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="publicVlanId")
    def public_vlan_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "public_vlan_id")

    @public_vlan_id.setter
    def public_vlan_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "public_vlan_id", value)

    @_builtins.property
    @pulumi.getter(name="quoteId")
    def quote_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Quote ID for Quote based provisioning
        """
        return pulumi.get(self, "quote_id")

    @quote_id.setter
    def quote_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "quote_id", value)

    @_builtins.property
    @pulumi.getter(name="reservedCapacityId")
    def reserved_capacity_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The reserved group id
        """
        return pulumi.get(self, "reserved_capacity_id")

    @reserved_capacity_id.setter
    def reserved_capacity_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "reserved_capacity_id", value)

    @_builtins.property
    @pulumi.getter(name="reservedCapacityName")
    def reserved_capacity_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The reserved group id
        """
        return pulumi.get(self, "reserved_capacity_name")

    @reserved_capacity_name.setter
    def reserved_capacity_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "reserved_capacity_name", value)

    @_builtins.property
    @pulumi.getter(name="reservedInstancePrimaryDisk")
    def reserved_instance_primary_disk(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The primary disk of reserved instance
        """
        return pulumi.get(self, "reserved_instance_primary_disk")

    @reserved_instance_primary_disk.setter
    def reserved_instance_primary_disk(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "reserved_instance_primary_disk", value)

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        """
        return pulumi.get(self, "resource_controller_url")

    @resource_controller_url.setter
    def resource_controller_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_controller_url", value)

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_name", value)

    @_builtins.property
    @pulumi.getter(name="resourceStatus")
    def resource_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the resource
        """
        return pulumi.get(self, "resource_status")

    @resource_status.setter
    def resource_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_status", value)

    @_builtins.property
    @pulumi.getter(name="secondaryIpAddresses")
    def secondary_ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "secondary_ip_addresses")

    @secondary_ip_addresses.setter
    def secondary_ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "secondary_ip_addresses", value)

    @_builtins.property
    @pulumi.getter(name="secondaryIpCount")
    def secondary_ip_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "secondary_ip_count")

    @secondary_ip_count.setter
    def secondary_ip_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "secondary_ip_count", value)

    @_builtins.property
    @pulumi.getter(name="sshKeyIds")
    def ssh_key_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        return pulumi.get(self, "ssh_key_ids")

    @ssh_key_ids.setter
    def ssh_key_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "ssh_key_ids", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ComputeVmInstanceTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ComputeVmInstanceTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def transient(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "transient")

    @transient.setter
    def transient(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "transient", value)

    @_builtins.property
    @pulumi.getter(name="userMetadata")
    def user_metadata(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "user_metadata")

    @user_metadata.setter
    def user_metadata(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_metadata", value)

    @_builtins.property
    @pulumi.getter(name="waitTimeMinutes")
    @_utilities.deprecated("""Deprecated""")
    def wait_time_minutes(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "wait_time_minutes")

    @wait_time_minutes.setter
    def wait_time_minutes(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "wait_time_minutes", value)


@pulumi.type_token("ibm:index/computeVmInstance:ComputeVmInstance")
class ComputeVmInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 block_storage_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 bulk_vms: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComputeVmInstanceBulkVmArgs', 'ComputeVmInstanceBulkVmArgsDict']]]]] = None,
                 compute_vm_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cores: Optional[pulumi.Input[_builtins.float]] = None,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 datacenter_choices: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]]] = None,
                 dedicated_acct_host_only: Optional[pulumi.Input[_builtins.bool]] = None,
                 dedicated_host_id: Optional[pulumi.Input[_builtins.float]] = None,
                 dedicated_host_name: Optional[pulumi.Input[_builtins.str]] = None,
                 disks: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 domain: Optional[pulumi.Input[_builtins.str]] = None,
                 evault: Optional[pulumi.Input[_builtins.float]] = None,
                 file_storage_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 flavor_key_name: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 hourly_billing: Optional[pulumi.Input[_builtins.bool]] = None,
                 image_id: Optional[pulumi.Input[_builtins.float]] = None,
                 ipv6_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv6_static_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 local_disk: Optional[pulumi.Input[_builtins.bool]] = None,
                 memory: Optional[pulumi.Input[_builtins.float]] = None,
                 network_speed: Optional[pulumi.Input[_builtins.float]] = None,
                 notes: Optional[pulumi.Input[_builtins.str]] = None,
                 os_reference_code: Optional[pulumi.Input[_builtins.str]] = None,
                 placement_group_id: Optional[pulumi.Input[_builtins.float]] = None,
                 placement_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 post_install_script_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 private_network_only: Optional[pulumi.Input[_builtins.bool]] = None,
                 private_security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 private_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 private_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
                 public_bandwidth_limited: Optional[pulumi.Input[_builtins.float]] = None,
                 public_bandwidth_unlimited: Optional[pulumi.Input[_builtins.bool]] = None,
                 public_security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 public_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 public_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
                 quote_id: Optional[pulumi.Input[_builtins.float]] = None,
                 reserved_capacity_id: Optional[pulumi.Input[_builtins.float]] = None,
                 reserved_capacity_name: Optional[pulumi.Input[_builtins.str]] = None,
                 reserved_instance_primary_disk: Optional[pulumi.Input[_builtins.float]] = None,
                 secondary_ip_count: Optional[pulumi.Input[_builtins.float]] = None,
                 ssh_key_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['ComputeVmInstanceTimeoutsArgs', 'ComputeVmInstanceTimeoutsArgsDict']]] = None,
                 transient: Optional[pulumi.Input[_builtins.bool]] = None,
                 user_metadata: Optional[pulumi.Input[_builtins.str]] = None,
                 wait_time_minutes: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a ComputeVmInstance resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]] datacenter_choices: The user provided datacenter options
        :param pulumi.Input[_builtins.str] flavor_key_name: Flavor key name used to provision vm.
        :param pulumi.Input[_builtins.float] placement_group_id: The placement group id
        :param pulumi.Input[_builtins.str] placement_group_name: The placement group name
        :param pulumi.Input[_builtins.float] quote_id: Quote ID for Quote based provisioning
        :param pulumi.Input[_builtins.float] reserved_capacity_id: The reserved group id
        :param pulumi.Input[_builtins.str] reserved_capacity_name: The reserved group id
        :param pulumi.Input[_builtins.float] reserved_instance_primary_disk: The primary disk of reserved instance
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ComputeVmInstanceArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ComputeVmInstance resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ComputeVmInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ComputeVmInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 block_storage_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 bulk_vms: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComputeVmInstanceBulkVmArgs', 'ComputeVmInstanceBulkVmArgsDict']]]]] = None,
                 compute_vm_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cores: Optional[pulumi.Input[_builtins.float]] = None,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 datacenter_choices: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]]] = None,
                 dedicated_acct_host_only: Optional[pulumi.Input[_builtins.bool]] = None,
                 dedicated_host_id: Optional[pulumi.Input[_builtins.float]] = None,
                 dedicated_host_name: Optional[pulumi.Input[_builtins.str]] = None,
                 disks: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 domain: Optional[pulumi.Input[_builtins.str]] = None,
                 evault: Optional[pulumi.Input[_builtins.float]] = None,
                 file_storage_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 flavor_key_name: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 hourly_billing: Optional[pulumi.Input[_builtins.bool]] = None,
                 image_id: Optional[pulumi.Input[_builtins.float]] = None,
                 ipv6_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 ipv6_static_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 local_disk: Optional[pulumi.Input[_builtins.bool]] = None,
                 memory: Optional[pulumi.Input[_builtins.float]] = None,
                 network_speed: Optional[pulumi.Input[_builtins.float]] = None,
                 notes: Optional[pulumi.Input[_builtins.str]] = None,
                 os_reference_code: Optional[pulumi.Input[_builtins.str]] = None,
                 placement_group_id: Optional[pulumi.Input[_builtins.float]] = None,
                 placement_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 post_install_script_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 private_network_only: Optional[pulumi.Input[_builtins.bool]] = None,
                 private_security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 private_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 private_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
                 public_bandwidth_limited: Optional[pulumi.Input[_builtins.float]] = None,
                 public_bandwidth_unlimited: Optional[pulumi.Input[_builtins.bool]] = None,
                 public_security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 public_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 public_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
                 quote_id: Optional[pulumi.Input[_builtins.float]] = None,
                 reserved_capacity_id: Optional[pulumi.Input[_builtins.float]] = None,
                 reserved_capacity_name: Optional[pulumi.Input[_builtins.str]] = None,
                 reserved_instance_primary_disk: Optional[pulumi.Input[_builtins.float]] = None,
                 secondary_ip_count: Optional[pulumi.Input[_builtins.float]] = None,
                 ssh_key_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['ComputeVmInstanceTimeoutsArgs', 'ComputeVmInstanceTimeoutsArgsDict']]] = None,
                 transient: Optional[pulumi.Input[_builtins.bool]] = None,
                 user_metadata: Optional[pulumi.Input[_builtins.str]] = None,
                 wait_time_minutes: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ComputeVmInstanceArgs.__new__(ComputeVmInstanceArgs)

            __props__.__dict__["block_storage_ids"] = block_storage_ids
            __props__.__dict__["bulk_vms"] = bulk_vms
            __props__.__dict__["compute_vm_instance_id"] = compute_vm_instance_id
            __props__.__dict__["cores"] = cores
            __props__.__dict__["datacenter"] = datacenter
            __props__.__dict__["datacenter_choices"] = datacenter_choices
            __props__.__dict__["dedicated_acct_host_only"] = dedicated_acct_host_only
            __props__.__dict__["dedicated_host_id"] = dedicated_host_id
            __props__.__dict__["dedicated_host_name"] = dedicated_host_name
            __props__.__dict__["disks"] = disks
            __props__.__dict__["domain"] = domain
            __props__.__dict__["evault"] = evault
            __props__.__dict__["file_storage_ids"] = file_storage_ids
            __props__.__dict__["flavor_key_name"] = flavor_key_name
            __props__.__dict__["hostname"] = hostname
            __props__.__dict__["hourly_billing"] = hourly_billing
            __props__.__dict__["image_id"] = image_id
            __props__.__dict__["ipv6_enabled"] = ipv6_enabled
            __props__.__dict__["ipv6_static_enabled"] = ipv6_static_enabled
            __props__.__dict__["local_disk"] = local_disk
            __props__.__dict__["memory"] = memory
            __props__.__dict__["network_speed"] = network_speed
            __props__.__dict__["notes"] = notes
            __props__.__dict__["os_reference_code"] = os_reference_code
            __props__.__dict__["placement_group_id"] = placement_group_id
            __props__.__dict__["placement_group_name"] = placement_group_name
            __props__.__dict__["post_install_script_uri"] = post_install_script_uri
            __props__.__dict__["private_network_only"] = private_network_only
            __props__.__dict__["private_security_group_ids"] = private_security_group_ids
            __props__.__dict__["private_subnet"] = private_subnet
            __props__.__dict__["private_vlan_id"] = private_vlan_id
            __props__.__dict__["public_bandwidth_limited"] = public_bandwidth_limited
            __props__.__dict__["public_bandwidth_unlimited"] = public_bandwidth_unlimited
            __props__.__dict__["public_security_group_ids"] = public_security_group_ids
            __props__.__dict__["public_subnet"] = public_subnet
            __props__.__dict__["public_vlan_id"] = public_vlan_id
            __props__.__dict__["quote_id"] = quote_id
            __props__.__dict__["reserved_capacity_id"] = reserved_capacity_id
            __props__.__dict__["reserved_capacity_name"] = reserved_capacity_name
            __props__.__dict__["reserved_instance_primary_disk"] = reserved_instance_primary_disk
            __props__.__dict__["secondary_ip_count"] = secondary_ip_count
            __props__.__dict__["ssh_key_ids"] = ssh_key_ids
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["transient"] = transient
            __props__.__dict__["user_metadata"] = user_metadata
            __props__.__dict__["wait_time_minutes"] = wait_time_minutes
            __props__.__dict__["ip_address_id"] = None
            __props__.__dict__["ip_address_id_private"] = None
            __props__.__dict__["ipv4_address"] = None
            __props__.__dict__["ipv4_address_private"] = None
            __props__.__dict__["ipv6_address"] = None
            __props__.__dict__["ipv6_address_id"] = None
            __props__.__dict__["private_interface_id"] = None
            __props__.__dict__["private_subnet_id"] = None
            __props__.__dict__["public_interface_id"] = None
            __props__.__dict__["public_ipv6_subnet"] = None
            __props__.__dict__["public_ipv6_subnet_id"] = None
            __props__.__dict__["public_subnet_id"] = None
            __props__.__dict__["resource_controller_url"] = None
            __props__.__dict__["resource_name"] = None
            __props__.__dict__["resource_status"] = None
            __props__.__dict__["secondary_ip_addresses"] = None
        super(ComputeVmInstance, __self__).__init__(
            'ibm:index/computeVmInstance:ComputeVmInstance',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            block_storage_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
            bulk_vms: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComputeVmInstanceBulkVmArgs', 'ComputeVmInstanceBulkVmArgsDict']]]]] = None,
            compute_vm_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            cores: Optional[pulumi.Input[_builtins.float]] = None,
            datacenter: Optional[pulumi.Input[_builtins.str]] = None,
            datacenter_choices: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]]] = None,
            dedicated_acct_host_only: Optional[pulumi.Input[_builtins.bool]] = None,
            dedicated_host_id: Optional[pulumi.Input[_builtins.float]] = None,
            dedicated_host_name: Optional[pulumi.Input[_builtins.str]] = None,
            disks: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
            domain: Optional[pulumi.Input[_builtins.str]] = None,
            evault: Optional[pulumi.Input[_builtins.float]] = None,
            file_storage_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
            flavor_key_name: Optional[pulumi.Input[_builtins.str]] = None,
            hostname: Optional[pulumi.Input[_builtins.str]] = None,
            hourly_billing: Optional[pulumi.Input[_builtins.bool]] = None,
            image_id: Optional[pulumi.Input[_builtins.float]] = None,
            ip_address_id: Optional[pulumi.Input[_builtins.float]] = None,
            ip_address_id_private: Optional[pulumi.Input[_builtins.float]] = None,
            ipv4_address: Optional[pulumi.Input[_builtins.str]] = None,
            ipv4_address_private: Optional[pulumi.Input[_builtins.str]] = None,
            ipv6_address: Optional[pulumi.Input[_builtins.str]] = None,
            ipv6_address_id: Optional[pulumi.Input[_builtins.float]] = None,
            ipv6_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            ipv6_static_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            local_disk: Optional[pulumi.Input[_builtins.bool]] = None,
            memory: Optional[pulumi.Input[_builtins.float]] = None,
            network_speed: Optional[pulumi.Input[_builtins.float]] = None,
            notes: Optional[pulumi.Input[_builtins.str]] = None,
            os_reference_code: Optional[pulumi.Input[_builtins.str]] = None,
            placement_group_id: Optional[pulumi.Input[_builtins.float]] = None,
            placement_group_name: Optional[pulumi.Input[_builtins.str]] = None,
            post_install_script_uri: Optional[pulumi.Input[_builtins.str]] = None,
            private_interface_id: Optional[pulumi.Input[_builtins.float]] = None,
            private_network_only: Optional[pulumi.Input[_builtins.bool]] = None,
            private_security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
            private_subnet: Optional[pulumi.Input[_builtins.str]] = None,
            private_subnet_id: Optional[pulumi.Input[_builtins.float]] = None,
            private_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
            public_bandwidth_limited: Optional[pulumi.Input[_builtins.float]] = None,
            public_bandwidth_unlimited: Optional[pulumi.Input[_builtins.bool]] = None,
            public_interface_id: Optional[pulumi.Input[_builtins.float]] = None,
            public_ipv6_subnet: Optional[pulumi.Input[_builtins.str]] = None,
            public_ipv6_subnet_id: Optional[pulumi.Input[_builtins.float]] = None,
            public_security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
            public_subnet: Optional[pulumi.Input[_builtins.str]] = None,
            public_subnet_id: Optional[pulumi.Input[_builtins.float]] = None,
            public_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
            quote_id: Optional[pulumi.Input[_builtins.float]] = None,
            reserved_capacity_id: Optional[pulumi.Input[_builtins.float]] = None,
            reserved_capacity_name: Optional[pulumi.Input[_builtins.str]] = None,
            reserved_instance_primary_disk: Optional[pulumi.Input[_builtins.float]] = None,
            resource_controller_url: Optional[pulumi.Input[_builtins.str]] = None,
            resource_name_: Optional[pulumi.Input[_builtins.str]] = None,
            resource_status: Optional[pulumi.Input[_builtins.str]] = None,
            secondary_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            secondary_ip_count: Optional[pulumi.Input[_builtins.float]] = None,
            ssh_key_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            timeouts: Optional[pulumi.Input[Union['ComputeVmInstanceTimeoutsArgs', 'ComputeVmInstanceTimeoutsArgsDict']]] = None,
            transient: Optional[pulumi.Input[_builtins.bool]] = None,
            user_metadata: Optional[pulumi.Input[_builtins.str]] = None,
            wait_time_minutes: Optional[pulumi.Input[_builtins.float]] = None) -> 'ComputeVmInstance':
        """
        Get an existing ComputeVmInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]] datacenter_choices: The user provided datacenter options
        :param pulumi.Input[_builtins.str] flavor_key_name: Flavor key name used to provision vm.
        :param pulumi.Input[_builtins.float] placement_group_id: The placement group id
        :param pulumi.Input[_builtins.str] placement_group_name: The placement group name
        :param pulumi.Input[_builtins.float] quote_id: Quote ID for Quote based provisioning
        :param pulumi.Input[_builtins.float] reserved_capacity_id: The reserved group id
        :param pulumi.Input[_builtins.str] reserved_capacity_name: The reserved group id
        :param pulumi.Input[_builtins.float] reserved_instance_primary_disk: The primary disk of reserved instance
        :param pulumi.Input[_builtins.str] resource_controller_url: The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        :param pulumi.Input[_builtins.str] resource_name_: The name of the resource
        :param pulumi.Input[_builtins.str] resource_status: The status of the resource
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ComputeVmInstanceState.__new__(_ComputeVmInstanceState)

        __props__.__dict__["block_storage_ids"] = block_storage_ids
        __props__.__dict__["bulk_vms"] = bulk_vms
        __props__.__dict__["compute_vm_instance_id"] = compute_vm_instance_id
        __props__.__dict__["cores"] = cores
        __props__.__dict__["datacenter"] = datacenter
        __props__.__dict__["datacenter_choices"] = datacenter_choices
        __props__.__dict__["dedicated_acct_host_only"] = dedicated_acct_host_only
        __props__.__dict__["dedicated_host_id"] = dedicated_host_id
        __props__.__dict__["dedicated_host_name"] = dedicated_host_name
        __props__.__dict__["disks"] = disks
        __props__.__dict__["domain"] = domain
        __props__.__dict__["evault"] = evault
        __props__.__dict__["file_storage_ids"] = file_storage_ids
        __props__.__dict__["flavor_key_name"] = flavor_key_name
        __props__.__dict__["hostname"] = hostname
        __props__.__dict__["hourly_billing"] = hourly_billing
        __props__.__dict__["image_id"] = image_id
        __props__.__dict__["ip_address_id"] = ip_address_id
        __props__.__dict__["ip_address_id_private"] = ip_address_id_private
        __props__.__dict__["ipv4_address"] = ipv4_address
        __props__.__dict__["ipv4_address_private"] = ipv4_address_private
        __props__.__dict__["ipv6_address"] = ipv6_address
        __props__.__dict__["ipv6_address_id"] = ipv6_address_id
        __props__.__dict__["ipv6_enabled"] = ipv6_enabled
        __props__.__dict__["ipv6_static_enabled"] = ipv6_static_enabled
        __props__.__dict__["local_disk"] = local_disk
        __props__.__dict__["memory"] = memory
        __props__.__dict__["network_speed"] = network_speed
        __props__.__dict__["notes"] = notes
        __props__.__dict__["os_reference_code"] = os_reference_code
        __props__.__dict__["placement_group_id"] = placement_group_id
        __props__.__dict__["placement_group_name"] = placement_group_name
        __props__.__dict__["post_install_script_uri"] = post_install_script_uri
        __props__.__dict__["private_interface_id"] = private_interface_id
        __props__.__dict__["private_network_only"] = private_network_only
        __props__.__dict__["private_security_group_ids"] = private_security_group_ids
        __props__.__dict__["private_subnet"] = private_subnet
        __props__.__dict__["private_subnet_id"] = private_subnet_id
        __props__.__dict__["private_vlan_id"] = private_vlan_id
        __props__.__dict__["public_bandwidth_limited"] = public_bandwidth_limited
        __props__.__dict__["public_bandwidth_unlimited"] = public_bandwidth_unlimited
        __props__.__dict__["public_interface_id"] = public_interface_id
        __props__.__dict__["public_ipv6_subnet"] = public_ipv6_subnet
        __props__.__dict__["public_ipv6_subnet_id"] = public_ipv6_subnet_id
        __props__.__dict__["public_security_group_ids"] = public_security_group_ids
        __props__.__dict__["public_subnet"] = public_subnet
        __props__.__dict__["public_subnet_id"] = public_subnet_id
        __props__.__dict__["public_vlan_id"] = public_vlan_id
        __props__.__dict__["quote_id"] = quote_id
        __props__.__dict__["reserved_capacity_id"] = reserved_capacity_id
        __props__.__dict__["reserved_capacity_name"] = reserved_capacity_name
        __props__.__dict__["reserved_instance_primary_disk"] = reserved_instance_primary_disk
        __props__.__dict__["resource_controller_url"] = resource_controller_url
        __props__.__dict__["resource_name"] = resource_name_
        __props__.__dict__["resource_status"] = resource_status
        __props__.__dict__["secondary_ip_addresses"] = secondary_ip_addresses
        __props__.__dict__["secondary_ip_count"] = secondary_ip_count
        __props__.__dict__["ssh_key_ids"] = ssh_key_ids
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["transient"] = transient
        __props__.__dict__["user_metadata"] = user_metadata
        __props__.__dict__["wait_time_minutes"] = wait_time_minutes
        return ComputeVmInstance(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="blockStorageIds")
    def block_storage_ids(self) -> pulumi.Output[Sequence[_builtins.float]]:
        return pulumi.get(self, "block_storage_ids")

    @_builtins.property
    @pulumi.getter(name="bulkVms")
    def bulk_vms(self) -> pulumi.Output[Optional[Sequence['outputs.ComputeVmInstanceBulkVm']]]:
        return pulumi.get(self, "bulk_vms")

    @_builtins.property
    @pulumi.getter(name="computeVmInstanceId")
    def compute_vm_instance_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "compute_vm_instance_id")

    @_builtins.property
    @pulumi.getter
    def cores(self) -> pulumi.Output[_builtins.float]:
        return pulumi.get(self, "cores")

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "datacenter")

    @_builtins.property
    @pulumi.getter(name="datacenterChoices")
    def datacenter_choices(self) -> pulumi.Output[Optional[Sequence[Mapping[str, _builtins.str]]]]:
        """
        The user provided datacenter options
        """
        return pulumi.get(self, "datacenter_choices")

    @_builtins.property
    @pulumi.getter(name="dedicatedAcctHostOnly")
    def dedicated_acct_host_only(self) -> pulumi.Output[Optional[_builtins.bool]]:
        return pulumi.get(self, "dedicated_acct_host_only")

    @_builtins.property
    @pulumi.getter(name="dedicatedHostId")
    def dedicated_host_id(self) -> pulumi.Output[Optional[_builtins.float]]:
        return pulumi.get(self, "dedicated_host_id")

    @_builtins.property
    @pulumi.getter(name="dedicatedHostName")
    def dedicated_host_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "dedicated_host_name")

    @_builtins.property
    @pulumi.getter
    def disks(self) -> pulumi.Output[Sequence[_builtins.float]]:
        return pulumi.get(self, "disks")

    @_builtins.property
    @pulumi.getter
    def domain(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "domain")

    @_builtins.property
    @pulumi.getter
    def evault(self) -> pulumi.Output[Optional[_builtins.float]]:
        return pulumi.get(self, "evault")

    @_builtins.property
    @pulumi.getter(name="fileStorageIds")
    def file_storage_ids(self) -> pulumi.Output[Sequence[_builtins.float]]:
        return pulumi.get(self, "file_storage_ids")

    @_builtins.property
    @pulumi.getter(name="flavorKeyName")
    def flavor_key_name(self) -> pulumi.Output[_builtins.str]:
        """
        Flavor key name used to provision vm.
        """
        return pulumi.get(self, "flavor_key_name")

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter(name="hourlyBilling")
    def hourly_billing(self) -> pulumi.Output[Optional[_builtins.bool]]:
        return pulumi.get(self, "hourly_billing")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Output[Optional[_builtins.float]]:
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="ipAddressId")
    def ip_address_id(self) -> pulumi.Output[_builtins.float]:
        return pulumi.get(self, "ip_address_id")

    @_builtins.property
    @pulumi.getter(name="ipAddressIdPrivate")
    def ip_address_id_private(self) -> pulumi.Output[_builtins.float]:
        return pulumi.get(self, "ip_address_id_private")

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "ipv4_address")

    @_builtins.property
    @pulumi.getter(name="ipv4AddressPrivate")
    def ipv4_address_private(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "ipv4_address_private")

    @_builtins.property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "ipv6_address")

    @_builtins.property
    @pulumi.getter(name="ipv6AddressId")
    def ipv6_address_id(self) -> pulumi.Output[_builtins.float]:
        return pulumi.get(self, "ipv6_address_id")

    @_builtins.property
    @pulumi.getter(name="ipv6Enabled")
    def ipv6_enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        return pulumi.get(self, "ipv6_enabled")

    @_builtins.property
    @pulumi.getter(name="ipv6StaticEnabled")
    def ipv6_static_enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        return pulumi.get(self, "ipv6_static_enabled")

    @_builtins.property
    @pulumi.getter(name="localDisk")
    def local_disk(self) -> pulumi.Output[Optional[_builtins.bool]]:
        return pulumi.get(self, "local_disk")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> pulumi.Output[_builtins.float]:
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter(name="networkSpeed")
    def network_speed(self) -> pulumi.Output[Optional[_builtins.float]]:
        return pulumi.get(self, "network_speed")

    @_builtins.property
    @pulumi.getter
    def notes(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "notes")

    @_builtins.property
    @pulumi.getter(name="osReferenceCode")
    def os_reference_code(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "os_reference_code")

    @_builtins.property
    @pulumi.getter(name="placementGroupId")
    def placement_group_id(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        The placement group id
        """
        return pulumi.get(self, "placement_group_id")

    @_builtins.property
    @pulumi.getter(name="placementGroupName")
    def placement_group_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The placement group name
        """
        return pulumi.get(self, "placement_group_name")

    @_builtins.property
    @pulumi.getter(name="postInstallScriptUri")
    def post_install_script_uri(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "post_install_script_uri")

    @_builtins.property
    @pulumi.getter(name="privateInterfaceId")
    def private_interface_id(self) -> pulumi.Output[_builtins.float]:
        return pulumi.get(self, "private_interface_id")

    @_builtins.property
    @pulumi.getter(name="privateNetworkOnly")
    def private_network_only(self) -> pulumi.Output[Optional[_builtins.bool]]:
        return pulumi.get(self, "private_network_only")

    @_builtins.property
    @pulumi.getter(name="privateSecurityGroupIds")
    def private_security_group_ids(self) -> pulumi.Output[Sequence[_builtins.float]]:
        return pulumi.get(self, "private_security_group_ids")

    @_builtins.property
    @pulumi.getter(name="privateSubnet")
    def private_subnet(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "private_subnet")

    @_builtins.property
    @pulumi.getter(name="privateSubnetId")
    def private_subnet_id(self) -> pulumi.Output[_builtins.float]:
        return pulumi.get(self, "private_subnet_id")

    @_builtins.property
    @pulumi.getter(name="privateVlanId")
    def private_vlan_id(self) -> pulumi.Output[_builtins.float]:
        return pulumi.get(self, "private_vlan_id")

    @_builtins.property
    @pulumi.getter(name="publicBandwidthLimited")
    def public_bandwidth_limited(self) -> pulumi.Output[_builtins.float]:
        return pulumi.get(self, "public_bandwidth_limited")

    @_builtins.property
    @pulumi.getter(name="publicBandwidthUnlimited")
    def public_bandwidth_unlimited(self) -> pulumi.Output[Optional[_builtins.bool]]:
        return pulumi.get(self, "public_bandwidth_unlimited")

    @_builtins.property
    @pulumi.getter(name="publicInterfaceId")
    def public_interface_id(self) -> pulumi.Output[_builtins.float]:
        return pulumi.get(self, "public_interface_id")

    @_builtins.property
    @pulumi.getter(name="publicIpv6Subnet")
    def public_ipv6_subnet(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "public_ipv6_subnet")

    @_builtins.property
    @pulumi.getter(name="publicIpv6SubnetId")
    def public_ipv6_subnet_id(self) -> pulumi.Output[_builtins.float]:
        return pulumi.get(self, "public_ipv6_subnet_id")

    @_builtins.property
    @pulumi.getter(name="publicSecurityGroupIds")
    def public_security_group_ids(self) -> pulumi.Output[Sequence[_builtins.float]]:
        return pulumi.get(self, "public_security_group_ids")

    @_builtins.property
    @pulumi.getter(name="publicSubnet")
    def public_subnet(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "public_subnet")

    @_builtins.property
    @pulumi.getter(name="publicSubnetId")
    def public_subnet_id(self) -> pulumi.Output[_builtins.float]:
        return pulumi.get(self, "public_subnet_id")

    @_builtins.property
    @pulumi.getter(name="publicVlanId")
    def public_vlan_id(self) -> pulumi.Output[_builtins.float]:
        return pulumi.get(self, "public_vlan_id")

    @_builtins.property
    @pulumi.getter(name="quoteId")
    def quote_id(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Quote ID for Quote based provisioning
        """
        return pulumi.get(self, "quote_id")

    @_builtins.property
    @pulumi.getter(name="reservedCapacityId")
    def reserved_capacity_id(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        The reserved group id
        """
        return pulumi.get(self, "reserved_capacity_id")

    @_builtins.property
    @pulumi.getter(name="reservedCapacityName")
    def reserved_capacity_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The reserved group id
        """
        return pulumi.get(self, "reserved_capacity_name")

    @_builtins.property
    @pulumi.getter(name="reservedInstancePrimaryDisk")
    def reserved_instance_primary_disk(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        The primary disk of reserved instance
        """
        return pulumi.get(self, "reserved_instance_primary_disk")

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> pulumi.Output[_builtins.str]:
        """
        The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        """
        return pulumi.get(self, "resource_controller_url")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceStatus")
    def resource_status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the resource
        """
        return pulumi.get(self, "resource_status")

    @_builtins.property
    @pulumi.getter(name="secondaryIpAddresses")
    def secondary_ip_addresses(self) -> pulumi.Output[Sequence[_builtins.str]]:
        return pulumi.get(self, "secondary_ip_addresses")

    @_builtins.property
    @pulumi.getter(name="secondaryIpCount")
    def secondary_ip_count(self) -> pulumi.Output[Optional[_builtins.float]]:
        return pulumi.get(self, "secondary_ip_count")

    @_builtins.property
    @pulumi.getter(name="sshKeyIds")
    def ssh_key_ids(self) -> pulumi.Output[Optional[Sequence[_builtins.float]]]:
        return pulumi.get(self, "ssh_key_ids")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.ComputeVmInstanceTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def transient(self) -> pulumi.Output[Optional[_builtins.bool]]:
        return pulumi.get(self, "transient")

    @_builtins.property
    @pulumi.getter(name="userMetadata")
    def user_metadata(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "user_metadata")

    @_builtins.property
    @pulumi.getter(name="waitTimeMinutes")
    @_utilities.deprecated("""Deprecated""")
    def wait_time_minutes(self) -> pulumi.Output[Optional[_builtins.float]]:
        return pulumi.get(self, "wait_time_minutes")

