# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['FunctionNamespaceArgs', 'FunctionNamespace']

@pulumi.input_type
class FunctionNamespaceArgs:
    def __init__(__self__, *,
                 resource_group_id: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 function_namespace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a FunctionNamespace resource.
        :param pulumi.Input[_builtins.str] resource_group_id: Resource Group ID.
        :param pulumi.Input[_builtins.str] description: Namespace Description.
        :param pulumi.Input[_builtins.str] name: Name of namespace.
        """
        pulumi.set(__self__, "resource_group_id", resource_group_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if function_namespace_id is not None:
            pulumi.set(__self__, "function_namespace_id", function_namespace_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        Resource Group ID.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Namespace Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="functionNamespaceId")
    def function_namespace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "function_namespace_id")

    @function_namespace_id.setter
    def function_namespace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "function_namespace_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of namespace.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _FunctionNamespaceState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 function_namespace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering FunctionNamespace resources.
        :param pulumi.Input[_builtins.str] description: Namespace Description.
        :param pulumi.Input[_builtins.str] location: Namespace Location.
        :param pulumi.Input[_builtins.str] name: Name of namespace.
        :param pulumi.Input[_builtins.str] resource_group_id: Resource Group ID.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if function_namespace_id is not None:
            pulumi.set(__self__, "function_namespace_id", function_namespace_id)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Namespace Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="functionNamespaceId")
    def function_namespace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "function_namespace_id")

    @function_namespace_id.setter
    def function_namespace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "function_namespace_id", value)

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Namespace Location.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of namespace.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource Group ID.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)


@pulumi.type_token("ibm:index/functionNamespace:FunctionNamespace")
class FunctionNamespace(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 function_namespace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a FunctionNamespace resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Namespace Description.
        :param pulumi.Input[_builtins.str] name: Name of namespace.
        :param pulumi.Input[_builtins.str] resource_group_id: Resource Group ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FunctionNamespaceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a FunctionNamespace resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param FunctionNamespaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FunctionNamespaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 function_namespace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FunctionNamespaceArgs.__new__(FunctionNamespaceArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["function_namespace_id"] = function_namespace_id
            __props__.__dict__["name"] = name
            if resource_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_id'")
            __props__.__dict__["resource_group_id"] = resource_group_id
            __props__.__dict__["location"] = None
        super(FunctionNamespace, __self__).__init__(
            'ibm:index/functionNamespace:FunctionNamespace',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            function_namespace_id: Optional[pulumi.Input[_builtins.str]] = None,
            location: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'FunctionNamespace':
        """
        Get an existing FunctionNamespace resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Namespace Description.
        :param pulumi.Input[_builtins.str] location: Namespace Location.
        :param pulumi.Input[_builtins.str] name: Name of namespace.
        :param pulumi.Input[_builtins.str] resource_group_id: Resource Group ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FunctionNamespaceState.__new__(_FunctionNamespaceState)

        __props__.__dict__["description"] = description
        __props__.__dict__["function_namespace_id"] = function_namespace_id
        __props__.__dict__["location"] = location
        __props__.__dict__["name"] = name
        __props__.__dict__["resource_group_id"] = resource_group_id
        return FunctionNamespace(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Namespace Description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="functionNamespaceId")
    def function_namespace_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "function_namespace_id")

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Output[_builtins.str]:
        """
        Namespace Location.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of namespace.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        Resource Group ID.
        """
        return pulumi.get(self, "resource_group_id")

