# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCisCustomListsResult',
    'AwaitableGetCisCustomListsResult',
    'get_cis_custom_lists',
    'get_cis_custom_lists_output',
]

@pulumi.output_type
class GetCisCustomListsResult:
    """
    A collection of values returned by getCisCustomLists.
    """
    def __init__(__self__, cis_id=None, id=None, list_id=None, lists=None):
        if cis_id and not isinstance(cis_id, str):
            raise TypeError("Expected argument 'cis_id' to be a str")
        pulumi.set(__self__, "cis_id", cis_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if list_id and not isinstance(list_id, str):
            raise TypeError("Expected argument 'list_id' to be a str")
        pulumi.set(__self__, "list_id", list_id)
        if lists and not isinstance(lists, list):
            raise TypeError("Expected argument 'lists' to be a list")
        pulumi.set(__self__, "lists", lists)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> _builtins.str:
        return pulumi.get(self, "cis_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="listId")
    def list_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "list_id")

    @_builtins.property
    @pulumi.getter
    def lists(self) -> Sequence['outputs.GetCisCustomListsListResult']:
        return pulumi.get(self, "lists")


class AwaitableGetCisCustomListsResult(GetCisCustomListsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCisCustomListsResult(
            cis_id=self.cis_id,
            id=self.id,
            list_id=self.list_id,
            lists=self.lists)


def get_cis_custom_lists(cis_id: Optional[_builtins.str] = None,
                         id: Optional[_builtins.str] = None,
                         list_id: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCisCustomListsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cisId'] = cis_id
    __args__['id'] = id
    __args__['listId'] = list_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCisCustomLists:getCisCustomLists', __args__, opts=opts, typ=GetCisCustomListsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCisCustomListsResult(
        cis_id=pulumi.get(__ret__, 'cis_id'),
        id=pulumi.get(__ret__, 'id'),
        list_id=pulumi.get(__ret__, 'list_id'),
        lists=pulumi.get(__ret__, 'lists'))
def get_cis_custom_lists_output(cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                                id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                list_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCisCustomListsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cisId'] = cis_id
    __args__['id'] = id
    __args__['listId'] = list_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCisCustomLists:getCisCustomLists', __args__, opts=opts, typ=GetCisCustomListsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCisCustomListsResult(
        cis_id=pulumi.get(__response__, 'cis_id'),
        id=pulumi.get(__response__, 'id'),
        list_id=pulumi.get(__response__, 'list_id'),
        lists=pulumi.get(__response__, 'lists')))
