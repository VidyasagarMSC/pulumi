# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetPiKeyResult',
    'AwaitableGetPiKeyResult',
    'get_pi_key',
    'get_pi_key_output',
]

@pulumi.output_type
class GetPiKeyResult:
    """
    A collection of values returned by getPiKey.
    """
    def __init__(__self__, creation_date=None, description=None, id=None, name=None, pi_cloud_instance_id=None, pi_key_name=None, primary_workspace=None, ssh_key=None, ssh_key_id=None, visibility=None):
        if creation_date and not isinstance(creation_date, str):
            raise TypeError("Expected argument 'creation_date' to be a str")
        pulumi.set(__self__, "creation_date", creation_date)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if pi_cloud_instance_id and not isinstance(pi_cloud_instance_id, str):
            raise TypeError("Expected argument 'pi_cloud_instance_id' to be a str")
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_key_name and not isinstance(pi_key_name, str):
            raise TypeError("Expected argument 'pi_key_name' to be a str")
        pulumi.set(__self__, "pi_key_name", pi_key_name)
        if primary_workspace and not isinstance(primary_workspace, bool):
            raise TypeError("Expected argument 'primary_workspace' to be a bool")
        pulumi.set(__self__, "primary_workspace", primary_workspace)
        if ssh_key and not isinstance(ssh_key, str):
            raise TypeError("Expected argument 'ssh_key' to be a str")
        pulumi.set(__self__, "ssh_key", ssh_key)
        if ssh_key_id and not isinstance(ssh_key_id, str):
            raise TypeError("Expected argument 'ssh_key_id' to be a str")
        pulumi.set(__self__, "ssh_key_id", ssh_key_id)
        if visibility and not isinstance(visibility, str):
            raise TypeError("Expected argument 'visibility' to be a str")
        pulumi.set(__self__, "visibility", visibility)

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> _builtins.str:
        return pulumi.get(self, "creation_date")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piKeyName")
    def pi_key_name(self) -> _builtins.str:
        return pulumi.get(self, "pi_key_name")

    @_builtins.property
    @pulumi.getter(name="primaryWorkspace")
    def primary_workspace(self) -> _builtins.bool:
        return pulumi.get(self, "primary_workspace")

    @_builtins.property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> _builtins.str:
        return pulumi.get(self, "ssh_key")

    @_builtins.property
    @pulumi.getter(name="sshKeyId")
    def ssh_key_id(self) -> _builtins.str:
        return pulumi.get(self, "ssh_key_id")

    @_builtins.property
    @pulumi.getter
    def visibility(self) -> _builtins.str:
        return pulumi.get(self, "visibility")


class AwaitableGetPiKeyResult(GetPiKeyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPiKeyResult(
            creation_date=self.creation_date,
            description=self.description,
            id=self.id,
            name=self.name,
            pi_cloud_instance_id=self.pi_cloud_instance_id,
            pi_key_name=self.pi_key_name,
            primary_workspace=self.primary_workspace,
            ssh_key=self.ssh_key,
            ssh_key_id=self.ssh_key_id,
            visibility=self.visibility)


def get_pi_key(id: Optional[_builtins.str] = None,
               pi_cloud_instance_id: Optional[_builtins.str] = None,
               pi_key_name: Optional[_builtins.str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPiKeyResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piKeyName'] = pi_key_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getPiKey:getPiKey', __args__, opts=opts, typ=GetPiKeyResult, package_ref=_utilities.get_package()).value

    return AwaitableGetPiKeyResult(
        creation_date=pulumi.get(__ret__, 'creation_date'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        pi_cloud_instance_id=pulumi.get(__ret__, 'pi_cloud_instance_id'),
        pi_key_name=pulumi.get(__ret__, 'pi_key_name'),
        primary_workspace=pulumi.get(__ret__, 'primary_workspace'),
        ssh_key=pulumi.get(__ret__, 'ssh_key'),
        ssh_key_id=pulumi.get(__ret__, 'ssh_key_id'),
        visibility=pulumi.get(__ret__, 'visibility'))
def get_pi_key_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                      pi_key_name: Optional[pulumi.Input[_builtins.str]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPiKeyResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piKeyName'] = pi_key_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getPiKey:getPiKey', __args__, opts=opts, typ=GetPiKeyResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetPiKeyResult(
        creation_date=pulumi.get(__response__, 'creation_date'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        pi_cloud_instance_id=pulumi.get(__response__, 'pi_cloud_instance_id'),
        pi_key_name=pulumi.get(__response__, 'pi_key_name'),
        primary_workspace=pulumi.get(__response__, 'primary_workspace'),
        ssh_key=pulumi.get(__response__, 'ssh_key'),
        ssh_key_id=pulumi.get(__response__, 'ssh_key_id'),
        visibility=pulumi.get(__response__, 'visibility')))
