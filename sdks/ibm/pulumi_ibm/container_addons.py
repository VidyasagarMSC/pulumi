# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ContainerAddonsArgs', 'ContainerAddons']

@pulumi.input_type
class ContainerAddonsArgs:
    def __init__(__self__, *,
                 addons: pulumi.Input[Sequence[pulumi.Input['ContainerAddonsAddonArgs']]],
                 cluster: pulumi.Input[_builtins.str],
                 container_addons_id: Optional[pulumi.Input[_builtins.str]] = None,
                 manage_all_addons: Optional[pulumi.Input[_builtins.bool]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['ContainerAddonsTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a ContainerAddons resource.
        :param pulumi.Input[_builtins.str] cluster: Cluster Name or ID
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        """
        pulumi.set(__self__, "addons", addons)
        pulumi.set(__self__, "cluster", cluster)
        if container_addons_id is not None:
            pulumi.set(__self__, "container_addons_id", container_addons_id)
        if manage_all_addons is not None:
            pulumi.set(__self__, "manage_all_addons", manage_all_addons)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def addons(self) -> pulumi.Input[Sequence[pulumi.Input['ContainerAddonsAddonArgs']]]:
        return pulumi.get(self, "addons")

    @addons.setter
    def addons(self, value: pulumi.Input[Sequence[pulumi.Input['ContainerAddonsAddonArgs']]]):
        pulumi.set(self, "addons", value)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> pulumi.Input[_builtins.str]:
        """
        Cluster Name or ID
        """
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster", value)

    @_builtins.property
    @pulumi.getter(name="containerAddonsId")
    def container_addons_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_addons_id")

    @container_addons_id.setter
    def container_addons_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_addons_id", value)

    @_builtins.property
    @pulumi.getter(name="manageAllAddons")
    def manage_all_addons(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "manage_all_addons")

    @manage_all_addons.setter
    def manage_all_addons(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "manage_all_addons", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ContainerAddonsTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ContainerAddonsTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _ContainerAddonsState:
    def __init__(__self__, *,
                 addons: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerAddonsAddonArgs']]]] = None,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 container_addons_id: Optional[pulumi.Input[_builtins.str]] = None,
                 manage_all_addons: Optional[pulumi.Input[_builtins.bool]] = None,
                 managed_addons: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['ContainerAddonsTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering ContainerAddons resources.
        :param pulumi.Input[_builtins.str] cluster: Cluster Name or ID
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] managed_addons: Used to keep track of the add-on names
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        """
        if addons is not None:
            pulumi.set(__self__, "addons", addons)
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if container_addons_id is not None:
            pulumi.set(__self__, "container_addons_id", container_addons_id)
        if manage_all_addons is not None:
            pulumi.set(__self__, "manage_all_addons", manage_all_addons)
        if managed_addons is not None:
            pulumi.set(__self__, "managed_addons", managed_addons)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def addons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerAddonsAddonArgs']]]]:
        return pulumi.get(self, "addons")

    @addons.setter
    def addons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerAddonsAddonArgs']]]]):
        pulumi.set(self, "addons", value)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cluster Name or ID
        """
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster", value)

    @_builtins.property
    @pulumi.getter(name="containerAddonsId")
    def container_addons_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_addons_id")

    @container_addons_id.setter
    def container_addons_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_addons_id", value)

    @_builtins.property
    @pulumi.getter(name="manageAllAddons")
    def manage_all_addons(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "manage_all_addons")

    @manage_all_addons.setter
    def manage_all_addons(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "manage_all_addons", value)

    @_builtins.property
    @pulumi.getter(name="managedAddons")
    def managed_addons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Used to keep track of the add-on names
        """
        return pulumi.get(self, "managed_addons")

    @managed_addons.setter
    def managed_addons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "managed_addons", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ContainerAddonsTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ContainerAddonsTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/containerAddons:ContainerAddons")
class ContainerAddons(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerAddonsAddonArgs', 'ContainerAddonsAddonArgsDict']]]]] = None,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 container_addons_id: Optional[pulumi.Input[_builtins.str]] = None,
                 manage_all_addons: Optional[pulumi.Input[_builtins.bool]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['ContainerAddonsTimeoutsArgs', 'ContainerAddonsTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a ContainerAddons resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster: Cluster Name or ID
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ContainerAddonsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ContainerAddons resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ContainerAddonsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ContainerAddonsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerAddonsAddonArgs', 'ContainerAddonsAddonArgsDict']]]]] = None,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 container_addons_id: Optional[pulumi.Input[_builtins.str]] = None,
                 manage_all_addons: Optional[pulumi.Input[_builtins.bool]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['ContainerAddonsTimeoutsArgs', 'ContainerAddonsTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ContainerAddonsArgs.__new__(ContainerAddonsArgs)

            if addons is None and not opts.urn:
                raise TypeError("Missing required property 'addons'")
            __props__.__dict__["addons"] = addons
            if cluster is None and not opts.urn:
                raise TypeError("Missing required property 'cluster'")
            __props__.__dict__["cluster"] = cluster
            __props__.__dict__["container_addons_id"] = container_addons_id
            __props__.__dict__["manage_all_addons"] = manage_all_addons
            __props__.__dict__["resource_group_id"] = resource_group_id
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["managed_addons"] = None
        super(ContainerAddons, __self__).__init__(
            'ibm:index/containerAddons:ContainerAddons',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            addons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerAddonsAddonArgs', 'ContainerAddonsAddonArgsDict']]]]] = None,
            cluster: Optional[pulumi.Input[_builtins.str]] = None,
            container_addons_id: Optional[pulumi.Input[_builtins.str]] = None,
            manage_all_addons: Optional[pulumi.Input[_builtins.bool]] = None,
            managed_addons: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['ContainerAddonsTimeoutsArgs', 'ContainerAddonsTimeoutsArgsDict']]] = None) -> 'ContainerAddons':
        """
        Get an existing ContainerAddons resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster: Cluster Name or ID
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] managed_addons: Used to keep track of the add-on names
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ContainerAddonsState.__new__(_ContainerAddonsState)

        __props__.__dict__["addons"] = addons
        __props__.__dict__["cluster"] = cluster
        __props__.__dict__["container_addons_id"] = container_addons_id
        __props__.__dict__["manage_all_addons"] = manage_all_addons
        __props__.__dict__["managed_addons"] = managed_addons
        __props__.__dict__["resource_group_id"] = resource_group_id
        __props__.__dict__["timeouts"] = timeouts
        return ContainerAddons(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def addons(self) -> pulumi.Output[Sequence['outputs.ContainerAddonsAddon']]:
        return pulumi.get(self, "addons")

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> pulumi.Output[_builtins.str]:
        """
        Cluster Name or ID
        """
        return pulumi.get(self, "cluster")

    @_builtins.property
    @pulumi.getter(name="containerAddonsId")
    def container_addons_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "container_addons_id")

    @_builtins.property
    @pulumi.getter(name="manageAllAddons")
    def manage_all_addons(self) -> pulumi.Output[Optional[_builtins.bool]]:
        return pulumi.get(self, "manage_all_addons")

    @_builtins.property
    @pulumi.getter(name="managedAddons")
    def managed_addons(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Used to keep track of the add-on names
        """
        return pulumi.get(self, "managed_addons")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.ContainerAddonsTimeouts']]:
        return pulumi.get(self, "timeouts")

