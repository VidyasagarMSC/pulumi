# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSccInstanceSettingsResult',
    'AwaitableGetSccInstanceSettingsResult',
    'get_scc_instance_settings',
    'get_scc_instance_settings_output',
]

@pulumi.output_type
class GetSccInstanceSettingsResult:
    """
    A collection of values returned by getSccInstanceSettings.
    """
    def __init__(__self__, event_notifications=None, id=None, instance_id=None, object_storages=None):
        if event_notifications and not isinstance(event_notifications, list):
            raise TypeError("Expected argument 'event_notifications' to be a list")
        pulumi.set(__self__, "event_notifications", event_notifications)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if object_storages and not isinstance(object_storages, list):
            raise TypeError("Expected argument 'object_storages' to be a list")
        pulumi.set(__self__, "object_storages", object_storages)

    @_builtins.property
    @pulumi.getter(name="eventNotifications")
    def event_notifications(self) -> Sequence['outputs.GetSccInstanceSettingsEventNotificationResult']:
        return pulumi.get(self, "event_notifications")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="objectStorages")
    def object_storages(self) -> Sequence['outputs.GetSccInstanceSettingsObjectStorageResult']:
        return pulumi.get(self, "object_storages")


class AwaitableGetSccInstanceSettingsResult(GetSccInstanceSettingsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSccInstanceSettingsResult(
            event_notifications=self.event_notifications,
            id=self.id,
            instance_id=self.instance_id,
            object_storages=self.object_storages)


def get_scc_instance_settings(id: Optional[_builtins.str] = None,
                              instance_id: Optional[_builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSccInstanceSettingsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSccInstanceSettings:getSccInstanceSettings', __args__, opts=opts, typ=GetSccInstanceSettingsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSccInstanceSettingsResult(
        event_notifications=pulumi.get(__ret__, 'event_notifications'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        object_storages=pulumi.get(__ret__, 'object_storages'))
def get_scc_instance_settings_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSccInstanceSettingsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSccInstanceSettings:getSccInstanceSettings', __args__, opts=opts, typ=GetSccInstanceSettingsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSccInstanceSettingsResult(
        event_notifications=pulumi.get(__response__, 'event_notifications'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        object_storages=pulumi.get(__response__, 'object_storages')))
