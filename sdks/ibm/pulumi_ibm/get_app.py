# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetAppResult',
    'AwaitableGetAppResult',
    'get_app',
    'get_app_output',
]

@pulumi.output_type
class GetAppResult:
    """
    A collection of values returned by getApp.
    """
    def __init__(__self__, buildpack=None, disk_quota=None, environment_json=None, health_check_http_endpoint=None, health_check_timeout=None, health_check_type=None, id=None, instances=None, memory=None, name=None, package_state=None, route_guids=None, service_instance_guids=None, space_guid=None, state=None):
        if buildpack and not isinstance(buildpack, str):
            raise TypeError("Expected argument 'buildpack' to be a str")
        pulumi.set(__self__, "buildpack", buildpack)
        if disk_quota and not isinstance(disk_quota, float):
            raise TypeError("Expected argument 'disk_quota' to be a float")
        pulumi.set(__self__, "disk_quota", disk_quota)
        if environment_json and not isinstance(environment_json, dict):
            raise TypeError("Expected argument 'environment_json' to be a dict")
        pulumi.set(__self__, "environment_json", environment_json)
        if health_check_http_endpoint and not isinstance(health_check_http_endpoint, str):
            raise TypeError("Expected argument 'health_check_http_endpoint' to be a str")
        pulumi.set(__self__, "health_check_http_endpoint", health_check_http_endpoint)
        if health_check_timeout and not isinstance(health_check_timeout, float):
            raise TypeError("Expected argument 'health_check_timeout' to be a float")
        pulumi.set(__self__, "health_check_timeout", health_check_timeout)
        if health_check_type and not isinstance(health_check_type, str):
            raise TypeError("Expected argument 'health_check_type' to be a str")
        pulumi.set(__self__, "health_check_type", health_check_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instances and not isinstance(instances, float):
            raise TypeError("Expected argument 'instances' to be a float")
        pulumi.set(__self__, "instances", instances)
        if memory and not isinstance(memory, float):
            raise TypeError("Expected argument 'memory' to be a float")
        pulumi.set(__self__, "memory", memory)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if package_state and not isinstance(package_state, str):
            raise TypeError("Expected argument 'package_state' to be a str")
        pulumi.set(__self__, "package_state", package_state)
        if route_guids and not isinstance(route_guids, list):
            raise TypeError("Expected argument 'route_guids' to be a list")
        pulumi.set(__self__, "route_guids", route_guids)
        if service_instance_guids and not isinstance(service_instance_guids, list):
            raise TypeError("Expected argument 'service_instance_guids' to be a list")
        pulumi.set(__self__, "service_instance_guids", service_instance_guids)
        if space_guid and not isinstance(space_guid, str):
            raise TypeError("Expected argument 'space_guid' to be a str")
        pulumi.set(__self__, "space_guid", space_guid)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter
    def buildpack(self) -> _builtins.str:
        return pulumi.get(self, "buildpack")

    @_builtins.property
    @pulumi.getter(name="diskQuota")
    def disk_quota(self) -> _builtins.float:
        return pulumi.get(self, "disk_quota")

    @_builtins.property
    @pulumi.getter(name="environmentJson")
    def environment_json(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "environment_json")

    @_builtins.property
    @pulumi.getter(name="healthCheckHttpEndpoint")
    def health_check_http_endpoint(self) -> _builtins.str:
        return pulumi.get(self, "health_check_http_endpoint")

    @_builtins.property
    @pulumi.getter(name="healthCheckTimeout")
    def health_check_timeout(self) -> _builtins.float:
        return pulumi.get(self, "health_check_timeout")

    @_builtins.property
    @pulumi.getter(name="healthCheckType")
    def health_check_type(self) -> _builtins.str:
        return pulumi.get(self, "health_check_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def instances(self) -> _builtins.float:
        return pulumi.get(self, "instances")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.float:
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="packageState")
    def package_state(self) -> _builtins.str:
        return pulumi.get(self, "package_state")

    @_builtins.property
    @pulumi.getter(name="routeGuids")
    def route_guids(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "route_guids")

    @_builtins.property
    @pulumi.getter(name="serviceInstanceGuids")
    def service_instance_guids(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "service_instance_guids")

    @_builtins.property
    @pulumi.getter(name="spaceGuid")
    def space_guid(self) -> _builtins.str:
        return pulumi.get(self, "space_guid")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        return pulumi.get(self, "state")


class AwaitableGetAppResult(GetAppResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppResult(
            buildpack=self.buildpack,
            disk_quota=self.disk_quota,
            environment_json=self.environment_json,
            health_check_http_endpoint=self.health_check_http_endpoint,
            health_check_timeout=self.health_check_timeout,
            health_check_type=self.health_check_type,
            id=self.id,
            instances=self.instances,
            memory=self.memory,
            name=self.name,
            package_state=self.package_state,
            route_guids=self.route_guids,
            service_instance_guids=self.service_instance_guids,
            space_guid=self.space_guid,
            state=self.state)


def get_app(id: Optional[_builtins.str] = None,
            name: Optional[_builtins.str] = None,
            space_guid: Optional[_builtins.str] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['spaceGuid'] = space_guid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getApp:getApp', __args__, opts=opts, typ=GetAppResult, package_ref=_utilities.get_package()).value

    return AwaitableGetAppResult(
        buildpack=pulumi.get(__ret__, 'buildpack'),
        disk_quota=pulumi.get(__ret__, 'disk_quota'),
        environment_json=pulumi.get(__ret__, 'environment_json'),
        health_check_http_endpoint=pulumi.get(__ret__, 'health_check_http_endpoint'),
        health_check_timeout=pulumi.get(__ret__, 'health_check_timeout'),
        health_check_type=pulumi.get(__ret__, 'health_check_type'),
        id=pulumi.get(__ret__, 'id'),
        instances=pulumi.get(__ret__, 'instances'),
        memory=pulumi.get(__ret__, 'memory'),
        name=pulumi.get(__ret__, 'name'),
        package_state=pulumi.get(__ret__, 'package_state'),
        route_guids=pulumi.get(__ret__, 'route_guids'),
        service_instance_guids=pulumi.get(__ret__, 'service_instance_guids'),
        space_guid=pulumi.get(__ret__, 'space_guid'),
        state=pulumi.get(__ret__, 'state'))
def get_app_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                   name: Optional[pulumi.Input[_builtins.str]] = None,
                   space_guid: Optional[pulumi.Input[_builtins.str]] = None,
                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['spaceGuid'] = space_guid
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getApp:getApp', __args__, opts=opts, typ=GetAppResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetAppResult(
        buildpack=pulumi.get(__response__, 'buildpack'),
        disk_quota=pulumi.get(__response__, 'disk_quota'),
        environment_json=pulumi.get(__response__, 'environment_json'),
        health_check_http_endpoint=pulumi.get(__response__, 'health_check_http_endpoint'),
        health_check_timeout=pulumi.get(__response__, 'health_check_timeout'),
        health_check_type=pulumi.get(__response__, 'health_check_type'),
        id=pulumi.get(__response__, 'id'),
        instances=pulumi.get(__response__, 'instances'),
        memory=pulumi.get(__response__, 'memory'),
        name=pulumi.get(__response__, 'name'),
        package_state=pulumi.get(__response__, 'package_state'),
        route_guids=pulumi.get(__response__, 'route_guids'),
        service_instance_guids=pulumi.get(__response__, 'service_instance_guids'),
        space_guid=pulumi.get(__response__, 'space_guid'),
        state=pulumi.get(__response__, 'state')))
