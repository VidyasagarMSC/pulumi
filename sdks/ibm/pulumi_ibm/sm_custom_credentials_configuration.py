# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SmCustomCredentialsConfigurationArgs', 'SmCustomCredentialsConfiguration']

@pulumi.input_type
class SmCustomCredentialsConfigurationArgs:
    def __init__(__self__, *,
                 code_engine: pulumi.Input['SmCustomCredentialsConfigurationCodeEngineArgs'],
                 instance_id: pulumi.Input[_builtins.str],
                 api_key_ref: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sm_custom_credentials_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 task_timeout: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a SmCustomCredentialsConfiguration resource.
        :param pulumi.Input['SmCustomCredentialsConfigurationCodeEngineArgs'] code_engine: The parameters required to configure Code Engine.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] api_key_ref: The ID of the IAM credentials secret that is used for setting up the custom credentials secret configuration.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.str] name: A human-readable unique name to assign to your configuration.To protect your privacy, do not use personal data, such as
               your name or location, as an name for your secret.
        :param pulumi.Input[_builtins.str] region: The region of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] task_timeout: Specifies the maximum allowed time for a Code Engine task to be completed. After this time elapses, the task state will
               changed to failed.
        """
        pulumi.set(__self__, "code_engine", code_engine)
        pulumi.set(__self__, "instance_id", instance_id)
        if api_key_ref is not None:
            pulumi.set(__self__, "api_key_ref", api_key_ref)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if sm_custom_credentials_configuration_id is not None:
            pulumi.set(__self__, "sm_custom_credentials_configuration_id", sm_custom_credentials_configuration_id)
        if task_timeout is not None:
            pulumi.set(__self__, "task_timeout", task_timeout)

    @_builtins.property
    @pulumi.getter(name="codeEngine")
    def code_engine(self) -> pulumi.Input['SmCustomCredentialsConfigurationCodeEngineArgs']:
        """
        The parameters required to configure Code Engine.
        """
        return pulumi.get(self, "code_engine")

    @code_engine.setter
    def code_engine(self, value: pulumi.Input['SmCustomCredentialsConfigurationCodeEngineArgs']):
        pulumi.set(self, "code_engine", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the Secrets Manager instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="apiKeyRef")
    def api_key_ref(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the IAM credentials secret that is used for setting up the custom credentials secret configuration.
        """
        return pulumi.get(self, "api_key_ref")

    @api_key_ref.setter
    def api_key_ref(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "api_key_ref", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A human-readable unique name to assign to your configuration.To protect your privacy, do not use personal data, such as
        your name or location, as an name for your secret.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the Secrets Manager instance.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="smCustomCredentialsConfigurationId")
    def sm_custom_credentials_configuration_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "sm_custom_credentials_configuration_id")

    @sm_custom_credentials_configuration_id.setter
    def sm_custom_credentials_configuration_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sm_custom_credentials_configuration_id", value)

    @_builtins.property
    @pulumi.getter(name="taskTimeout")
    def task_timeout(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the maximum allowed time for a Code Engine task to be completed. After this time elapses, the task state will
        changed to failed.
        """
        return pulumi.get(self, "task_timeout")

    @task_timeout.setter
    def task_timeout(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "task_timeout", value)


@pulumi.input_type
class _SmCustomCredentialsConfigurationState:
    def __init__(__self__, *,
                 api_key_ref: Optional[pulumi.Input[_builtins.str]] = None,
                 code_engine: Optional[pulumi.Input['SmCustomCredentialsConfigurationCodeEngineArgs']] = None,
                 code_engine_key_ref: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 schemas: Optional[pulumi.Input[Sequence[pulumi.Input['SmCustomCredentialsConfigurationSchemaArgs']]]] = None,
                 sm_custom_credentials_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 task_timeout: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SmCustomCredentialsConfiguration resources.
        :param pulumi.Input[_builtins.str] api_key_ref: The ID of the IAM credentials secret that is used for setting up the custom credentials secret configuration.
        :param pulumi.Input['SmCustomCredentialsConfigurationCodeEngineArgs'] code_engine: The parameters required to configure Code Engine.
        :param pulumi.Input[_builtins.str] code_engine_key_ref: The IAM API key used by the credentials system to access this Secrets Manager instance.
        :param pulumi.Input[_builtins.str] created_at: The date when the configuration was created. The date format follows RFC 3339.
        :param pulumi.Input[_builtins.str] created_by: The unique identifier that is associated with the entity that created the configuration.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] name: A human-readable unique name to assign to your configuration.To protect your privacy, do not use personal data, such as
               your name or location, as an name for your secret.
        :param pulumi.Input[_builtins.str] region: The region of the Secrets Manager instance.
        :param pulumi.Input[Sequence[pulumi.Input['SmCustomCredentialsConfigurationSchemaArgs']]] schemas: The schema that defines the format of the input and output parameters (the credentials) of the Code Engine job.
        :param pulumi.Input[_builtins.str] task_timeout: Specifies the maximum allowed time for a Code Engine task to be completed. After this time elapses, the task state will
               changed to failed.
        :param pulumi.Input[_builtins.str] updated_at: The date when the configuration was recently modified. The date format follows RFC 3339.
        """
        if api_key_ref is not None:
            pulumi.set(__self__, "api_key_ref", api_key_ref)
        if code_engine is not None:
            pulumi.set(__self__, "code_engine", code_engine)
        if code_engine_key_ref is not None:
            pulumi.set(__self__, "code_engine_key_ref", code_engine_key_ref)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if sm_custom_credentials_configuration_id is not None:
            pulumi.set(__self__, "sm_custom_credentials_configuration_id", sm_custom_credentials_configuration_id)
        if task_timeout is not None:
            pulumi.set(__self__, "task_timeout", task_timeout)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="apiKeyRef")
    def api_key_ref(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the IAM credentials secret that is used for setting up the custom credentials secret configuration.
        """
        return pulumi.get(self, "api_key_ref")

    @api_key_ref.setter
    def api_key_ref(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "api_key_ref", value)

    @_builtins.property
    @pulumi.getter(name="codeEngine")
    def code_engine(self) -> Optional[pulumi.Input['SmCustomCredentialsConfigurationCodeEngineArgs']]:
        """
        The parameters required to configure Code Engine.
        """
        return pulumi.get(self, "code_engine")

    @code_engine.setter
    def code_engine(self, value: Optional[pulumi.Input['SmCustomCredentialsConfigurationCodeEngineArgs']]):
        pulumi.set(self, "code_engine", value)

    @_builtins.property
    @pulumi.getter(name="codeEngineKeyRef")
    def code_engine_key_ref(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IAM API key used by the credentials system to access this Secrets Manager instance.
        """
        return pulumi.get(self, "code_engine_key_ref")

    @code_engine_key_ref.setter
    def code_engine_key_ref(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "code_engine_key_ref", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date when the configuration was created. The date format follows RFC 3339.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier that is associated with the entity that created the configuration.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the Secrets Manager instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A human-readable unique name to assign to your configuration.To protect your privacy, do not use personal data, such as
        your name or location, as an name for your secret.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the Secrets Manager instance.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def schemas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SmCustomCredentialsConfigurationSchemaArgs']]]]:
        """
        The schema that defines the format of the input and output parameters (the credentials) of the Code Engine job.
        """
        return pulumi.get(self, "schemas")

    @schemas.setter
    def schemas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SmCustomCredentialsConfigurationSchemaArgs']]]]):
        pulumi.set(self, "schemas", value)

    @_builtins.property
    @pulumi.getter(name="smCustomCredentialsConfigurationId")
    def sm_custom_credentials_configuration_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "sm_custom_credentials_configuration_id")

    @sm_custom_credentials_configuration_id.setter
    def sm_custom_credentials_configuration_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sm_custom_credentials_configuration_id", value)

    @_builtins.property
    @pulumi.getter(name="taskTimeout")
    def task_timeout(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the maximum allowed time for a Code Engine task to be completed. After this time elapses, the task state will
        changed to failed.
        """
        return pulumi.get(self, "task_timeout")

    @task_timeout.setter
    def task_timeout(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "task_timeout", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date when the configuration was recently modified. The date format follows RFC 3339.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("ibm:index/smCustomCredentialsConfiguration:SmCustomCredentialsConfiguration")
class SmCustomCredentialsConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_key_ref: Optional[pulumi.Input[_builtins.str]] = None,
                 code_engine: Optional[pulumi.Input[Union['SmCustomCredentialsConfigurationCodeEngineArgs', 'SmCustomCredentialsConfigurationCodeEngineArgsDict']]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sm_custom_credentials_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 task_timeout: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a SmCustomCredentialsConfiguration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] api_key_ref: The ID of the IAM credentials secret that is used for setting up the custom credentials secret configuration.
        :param pulumi.Input[Union['SmCustomCredentialsConfigurationCodeEngineArgs', 'SmCustomCredentialsConfigurationCodeEngineArgsDict']] code_engine: The parameters required to configure Code Engine.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] name: A human-readable unique name to assign to your configuration.To protect your privacy, do not use personal data, such as
               your name or location, as an name for your secret.
        :param pulumi.Input[_builtins.str] region: The region of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] task_timeout: Specifies the maximum allowed time for a Code Engine task to be completed. After this time elapses, the task state will
               changed to failed.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SmCustomCredentialsConfigurationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SmCustomCredentialsConfiguration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SmCustomCredentialsConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SmCustomCredentialsConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_key_ref: Optional[pulumi.Input[_builtins.str]] = None,
                 code_engine: Optional[pulumi.Input[Union['SmCustomCredentialsConfigurationCodeEngineArgs', 'SmCustomCredentialsConfigurationCodeEngineArgsDict']]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sm_custom_credentials_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 task_timeout: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SmCustomCredentialsConfigurationArgs.__new__(SmCustomCredentialsConfigurationArgs)

            __props__.__dict__["api_key_ref"] = api_key_ref
            if code_engine is None and not opts.urn:
                raise TypeError("Missing required property 'code_engine'")
            __props__.__dict__["code_engine"] = code_engine
            __props__.__dict__["endpoint_type"] = endpoint_type
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["sm_custom_credentials_configuration_id"] = sm_custom_credentials_configuration_id
            __props__.__dict__["task_timeout"] = task_timeout
            __props__.__dict__["code_engine_key_ref"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["schemas"] = None
            __props__.__dict__["updated_at"] = None
        super(SmCustomCredentialsConfiguration, __self__).__init__(
            'ibm:index/smCustomCredentialsConfiguration:SmCustomCredentialsConfiguration',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            api_key_ref: Optional[pulumi.Input[_builtins.str]] = None,
            code_engine: Optional[pulumi.Input[Union['SmCustomCredentialsConfigurationCodeEngineArgs', 'SmCustomCredentialsConfigurationCodeEngineArgsDict']]] = None,
            code_engine_key_ref: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            created_by: Optional[pulumi.Input[_builtins.str]] = None,
            endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            schemas: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SmCustomCredentialsConfigurationSchemaArgs', 'SmCustomCredentialsConfigurationSchemaArgsDict']]]]] = None,
            sm_custom_credentials_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
            task_timeout: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'SmCustomCredentialsConfiguration':
        """
        Get an existing SmCustomCredentialsConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] api_key_ref: The ID of the IAM credentials secret that is used for setting up the custom credentials secret configuration.
        :param pulumi.Input[Union['SmCustomCredentialsConfigurationCodeEngineArgs', 'SmCustomCredentialsConfigurationCodeEngineArgsDict']] code_engine: The parameters required to configure Code Engine.
        :param pulumi.Input[_builtins.str] code_engine_key_ref: The IAM API key used by the credentials system to access this Secrets Manager instance.
        :param pulumi.Input[_builtins.str] created_at: The date when the configuration was created. The date format follows RFC 3339.
        :param pulumi.Input[_builtins.str] created_by: The unique identifier that is associated with the entity that created the configuration.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] name: A human-readable unique name to assign to your configuration.To protect your privacy, do not use personal data, such as
               your name or location, as an name for your secret.
        :param pulumi.Input[_builtins.str] region: The region of the Secrets Manager instance.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SmCustomCredentialsConfigurationSchemaArgs', 'SmCustomCredentialsConfigurationSchemaArgsDict']]]] schemas: The schema that defines the format of the input and output parameters (the credentials) of the Code Engine job.
        :param pulumi.Input[_builtins.str] task_timeout: Specifies the maximum allowed time for a Code Engine task to be completed. After this time elapses, the task state will
               changed to failed.
        :param pulumi.Input[_builtins.str] updated_at: The date when the configuration was recently modified. The date format follows RFC 3339.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SmCustomCredentialsConfigurationState.__new__(_SmCustomCredentialsConfigurationState)

        __props__.__dict__["api_key_ref"] = api_key_ref
        __props__.__dict__["code_engine"] = code_engine
        __props__.__dict__["code_engine_key_ref"] = code_engine_key_ref
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["endpoint_type"] = endpoint_type
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["schemas"] = schemas
        __props__.__dict__["sm_custom_credentials_configuration_id"] = sm_custom_credentials_configuration_id
        __props__.__dict__["task_timeout"] = task_timeout
        __props__.__dict__["updated_at"] = updated_at
        return SmCustomCredentialsConfiguration(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="apiKeyRef")
    def api_key_ref(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The ID of the IAM credentials secret that is used for setting up the custom credentials secret configuration.
        """
        return pulumi.get(self, "api_key_ref")

    @_builtins.property
    @pulumi.getter(name="codeEngine")
    def code_engine(self) -> pulumi.Output['outputs.SmCustomCredentialsConfigurationCodeEngine']:
        """
        The parameters required to configure Code Engine.
        """
        return pulumi.get(self, "code_engine")

    @_builtins.property
    @pulumi.getter(name="codeEngineKeyRef")
    def code_engine_key_ref(self) -> pulumi.Output[_builtins.str]:
        """
        The IAM API key used by the credentials system to access this Secrets Manager instance.
        """
        return pulumi.get(self, "code_engine_key_ref")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date when the configuration was created. The date format follows RFC 3339.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier that is associated with the entity that created the configuration.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the Secrets Manager instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        A human-readable unique name to assign to your configuration.To protect your privacy, do not use personal data, such as
        your name or location, as an name for your secret.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region of the Secrets Manager instance.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def schemas(self) -> pulumi.Output[Sequence['outputs.SmCustomCredentialsConfigurationSchema']]:
        """
        The schema that defines the format of the input and output parameters (the credentials) of the Code Engine job.
        """
        return pulumi.get(self, "schemas")

    @_builtins.property
    @pulumi.getter(name="smCustomCredentialsConfigurationId")
    def sm_custom_credentials_configuration_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "sm_custom_credentials_configuration_id")

    @_builtins.property
    @pulumi.getter(name="taskTimeout")
    def task_timeout(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the maximum allowed time for a Code Engine task to be completed. After this time elapses, the task state will
        changed to failed.
        """
        return pulumi.get(self, "task_timeout")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date when the configuration was recently modified. The date format follows RFC 3339.
        """
        return pulumi.get(self, "updated_at")

