# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsClusterNetworkArgs', 'IsClusterNetwork']

@pulumi.input_type
class IsClusterNetworkArgs:
    def __init__(__self__, *,
                 profile: pulumi.Input[_builtins.str],
                 vpc: pulumi.Input['IsClusterNetworkVpcArgs'],
                 zone: pulumi.Input[_builtins.str],
                 is_cluster_network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_prefixes: Optional[pulumi.Input['IsClusterNetworkSubnetPrefixesArgs']] = None):
        """
        The set of arguments for constructing a IsClusterNetwork resource.
        :param pulumi.Input[_builtins.str] profile: The globally unique name for this cluster network profile.
        :param pulumi.Input['IsClusterNetworkVpcArgs'] vpc: The VPC this cluster network resides in.
        :param pulumi.Input[_builtins.str] zone: The globally unique name for the zone this cluster network resides in.
        :param pulumi.Input[_builtins.str] name: The name for this cluster network. The name must not be used by another cluster network in the region.
        :param pulumi.Input[_builtins.str] resource_group: The unique identifier for this resource group for this cluster network.
        :param pulumi.Input['IsClusterNetworkSubnetPrefixesArgs'] subnet_prefixes: The IP address ranges available for subnets for this cluster network.
        """
        pulumi.set(__self__, "profile", profile)
        pulumi.set(__self__, "vpc", vpc)
        pulumi.set(__self__, "zone", zone)
        if is_cluster_network_id is not None:
            pulumi.set(__self__, "is_cluster_network_id", is_cluster_network_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if subnet_prefixes is not None:
            pulumi.set(__self__, "subnet_prefixes", subnet_prefixes)

    @_builtins.property
    @pulumi.getter
    def profile(self) -> pulumi.Input[_builtins.str]:
        """
        The globally unique name for this cluster network profile.
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "profile", value)

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> pulumi.Input['IsClusterNetworkVpcArgs']:
        """
        The VPC this cluster network resides in.
        """
        return pulumi.get(self, "vpc")

    @vpc.setter
    def vpc(self, value: pulumi.Input['IsClusterNetworkVpcArgs']):
        pulumi.set(self, "vpc", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> pulumi.Input[_builtins.str]:
        """
        The globally unique name for the zone this cluster network resides in.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "zone", value)

    @_builtins.property
    @pulumi.getter(name="isClusterNetworkId")
    def is_cluster_network_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_cluster_network_id")

    @is_cluster_network_id.setter
    def is_cluster_network_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_cluster_network_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name for this cluster network. The name must not be used by another cluster network in the region.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier for this resource group for this cluster network.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="subnetPrefixes")
    def subnet_prefixes(self) -> Optional[pulumi.Input['IsClusterNetworkSubnetPrefixesArgs']]:
        """
        The IP address ranges available for subnets for this cluster network.
        """
        return pulumi.get(self, "subnet_prefixes")

    @subnet_prefixes.setter
    def subnet_prefixes(self, value: Optional[pulumi.Input['IsClusterNetworkSubnetPrefixesArgs']]):
        pulumi.set(self, "subnet_prefixes", value)


@pulumi.input_type
class _IsClusterNetworkState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 etag: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 is_cluster_network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lifecycle_reasons: Optional[pulumi.Input[Sequence[pulumi.Input['IsClusterNetworkLifecycleReasonArgs']]]] = None,
                 lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_prefixes: Optional[pulumi.Input['IsClusterNetworkSubnetPrefixesArgs']] = None,
                 vpc: Optional[pulumi.Input['IsClusterNetworkVpcArgs']] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsClusterNetwork resources.
        :param pulumi.Input[_builtins.str] created_at: The date and time that the cluster network was created.
        :param pulumi.Input[_builtins.str] crn: The CRN for this cluster network.
        :param pulumi.Input[_builtins.str] href: The URL for this cluster network.
        :param pulumi.Input[Sequence[pulumi.Input['IsClusterNetworkLifecycleReasonArgs']]] lifecycle_reasons: The reasons for the current `lifecycle_state` (if any).
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of the cluster network.
        :param pulumi.Input[_builtins.str] name: The name for this cluster network. The name must not be used by another cluster network in the region.
        :param pulumi.Input[_builtins.str] profile: The globally unique name for this cluster network profile.
        :param pulumi.Input[_builtins.str] resource_group: The unique identifier for this resource group for this cluster network.
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input['IsClusterNetworkSubnetPrefixesArgs'] subnet_prefixes: The IP address ranges available for subnets for this cluster network.
        :param pulumi.Input['IsClusterNetworkVpcArgs'] vpc: The VPC this cluster network resides in.
        :param pulumi.Input[_builtins.str] zone: The globally unique name for the zone this cluster network resides in.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if is_cluster_network_id is not None:
            pulumi.set(__self__, "is_cluster_network_id", is_cluster_network_id)
        if lifecycle_reasons is not None:
            pulumi.set(__self__, "lifecycle_reasons", lifecycle_reasons)
        if lifecycle_state is not None:
            pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if subnet_prefixes is not None:
            pulumi.set(__self__, "subnet_prefixes", subnet_prefixes)
        if vpc is not None:
            pulumi.set(__self__, "vpc", vpc)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time that the cluster network was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN for this cluster network.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "etag", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL for this cluster network.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="isClusterNetworkId")
    def is_cluster_network_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_cluster_network_id")

    @is_cluster_network_id.setter
    def is_cluster_network_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_cluster_network_id", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleReasons")
    def lifecycle_reasons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsClusterNetworkLifecycleReasonArgs']]]]:
        """
        The reasons for the current `lifecycle_state` (if any).
        """
        return pulumi.get(self, "lifecycle_reasons")

    @lifecycle_reasons.setter
    def lifecycle_reasons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsClusterNetworkLifecycleReasonArgs']]]]):
        pulumi.set(self, "lifecycle_reasons", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The lifecycle state of the cluster network.
        """
        return pulumi.get(self, "lifecycle_state")

    @lifecycle_state.setter
    def lifecycle_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lifecycle_state", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name for this cluster network. The name must not be used by another cluster network in the region.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The globally unique name for this cluster network profile.
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "profile", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier for this resource group for this cluster network.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter(name="subnetPrefixes")
    def subnet_prefixes(self) -> Optional[pulumi.Input['IsClusterNetworkSubnetPrefixesArgs']]:
        """
        The IP address ranges available for subnets for this cluster network.
        """
        return pulumi.get(self, "subnet_prefixes")

    @subnet_prefixes.setter
    def subnet_prefixes(self, value: Optional[pulumi.Input['IsClusterNetworkSubnetPrefixesArgs']]):
        pulumi.set(self, "subnet_prefixes", value)

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> Optional[pulumi.Input['IsClusterNetworkVpcArgs']]:
        """
        The VPC this cluster network resides in.
        """
        return pulumi.get(self, "vpc")

    @vpc.setter
    def vpc(self, value: Optional[pulumi.Input['IsClusterNetworkVpcArgs']]):
        pulumi.set(self, "vpc", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The globally unique name for the zone this cluster network resides in.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zone", value)


@pulumi.type_token("ibm:index/isClusterNetwork:IsClusterNetwork")
class IsClusterNetwork(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 is_cluster_network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_prefixes: Optional[pulumi.Input[Union['IsClusterNetworkSubnetPrefixesArgs', 'IsClusterNetworkSubnetPrefixesArgsDict']]] = None,
                 vpc: Optional[pulumi.Input[Union['IsClusterNetworkVpcArgs', 'IsClusterNetworkVpcArgsDict']]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IsClusterNetwork resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: The name for this cluster network. The name must not be used by another cluster network in the region.
        :param pulumi.Input[_builtins.str] profile: The globally unique name for this cluster network profile.
        :param pulumi.Input[_builtins.str] resource_group: The unique identifier for this resource group for this cluster network.
        :param pulumi.Input[Union['IsClusterNetworkSubnetPrefixesArgs', 'IsClusterNetworkSubnetPrefixesArgsDict']] subnet_prefixes: The IP address ranges available for subnets for this cluster network.
        :param pulumi.Input[Union['IsClusterNetworkVpcArgs', 'IsClusterNetworkVpcArgsDict']] vpc: The VPC this cluster network resides in.
        :param pulumi.Input[_builtins.str] zone: The globally unique name for the zone this cluster network resides in.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsClusterNetworkArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsClusterNetwork resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsClusterNetworkArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsClusterNetworkArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 is_cluster_network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_prefixes: Optional[pulumi.Input[Union['IsClusterNetworkSubnetPrefixesArgs', 'IsClusterNetworkSubnetPrefixesArgsDict']]] = None,
                 vpc: Optional[pulumi.Input[Union['IsClusterNetworkVpcArgs', 'IsClusterNetworkVpcArgsDict']]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsClusterNetworkArgs.__new__(IsClusterNetworkArgs)

            __props__.__dict__["is_cluster_network_id"] = is_cluster_network_id
            __props__.__dict__["name"] = name
            if profile is None and not opts.urn:
                raise TypeError("Missing required property 'profile'")
            __props__.__dict__["profile"] = profile
            __props__.__dict__["resource_group"] = resource_group
            __props__.__dict__["subnet_prefixes"] = subnet_prefixes
            if vpc is None and not opts.urn:
                raise TypeError("Missing required property 'vpc'")
            __props__.__dict__["vpc"] = vpc
            if zone is None and not opts.urn:
                raise TypeError("Missing required property 'zone'")
            __props__.__dict__["zone"] = zone
            __props__.__dict__["created_at"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["etag"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["lifecycle_reasons"] = None
            __props__.__dict__["lifecycle_state"] = None
            __props__.__dict__["resource_type"] = None
        super(IsClusterNetwork, __self__).__init__(
            'ibm:index/isClusterNetwork:IsClusterNetwork',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            etag: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            is_cluster_network_id: Optional[pulumi.Input[_builtins.str]] = None,
            lifecycle_reasons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsClusterNetworkLifecycleReasonArgs', 'IsClusterNetworkLifecycleReasonArgsDict']]]]] = None,
            lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            profile: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group: Optional[pulumi.Input[_builtins.str]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            subnet_prefixes: Optional[pulumi.Input[Union['IsClusterNetworkSubnetPrefixesArgs', 'IsClusterNetworkSubnetPrefixesArgsDict']]] = None,
            vpc: Optional[pulumi.Input[Union['IsClusterNetworkVpcArgs', 'IsClusterNetworkVpcArgsDict']]] = None,
            zone: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsClusterNetwork':
        """
        Get an existing IsClusterNetwork resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: The date and time that the cluster network was created.
        :param pulumi.Input[_builtins.str] crn: The CRN for this cluster network.
        :param pulumi.Input[_builtins.str] href: The URL for this cluster network.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsClusterNetworkLifecycleReasonArgs', 'IsClusterNetworkLifecycleReasonArgsDict']]]] lifecycle_reasons: The reasons for the current `lifecycle_state` (if any).
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of the cluster network.
        :param pulumi.Input[_builtins.str] name: The name for this cluster network. The name must not be used by another cluster network in the region.
        :param pulumi.Input[_builtins.str] profile: The globally unique name for this cluster network profile.
        :param pulumi.Input[_builtins.str] resource_group: The unique identifier for this resource group for this cluster network.
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input[Union['IsClusterNetworkSubnetPrefixesArgs', 'IsClusterNetworkSubnetPrefixesArgsDict']] subnet_prefixes: The IP address ranges available for subnets for this cluster network.
        :param pulumi.Input[Union['IsClusterNetworkVpcArgs', 'IsClusterNetworkVpcArgsDict']] vpc: The VPC this cluster network resides in.
        :param pulumi.Input[_builtins.str] zone: The globally unique name for the zone this cluster network resides in.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsClusterNetworkState.__new__(_IsClusterNetworkState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["crn"] = crn
        __props__.__dict__["etag"] = etag
        __props__.__dict__["href"] = href
        __props__.__dict__["is_cluster_network_id"] = is_cluster_network_id
        __props__.__dict__["lifecycle_reasons"] = lifecycle_reasons
        __props__.__dict__["lifecycle_state"] = lifecycle_state
        __props__.__dict__["name"] = name
        __props__.__dict__["profile"] = profile
        __props__.__dict__["resource_group"] = resource_group
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["subnet_prefixes"] = subnet_prefixes
        __props__.__dict__["vpc"] = vpc
        __props__.__dict__["zone"] = zone
        return IsClusterNetwork(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time that the cluster network was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The CRN for this cluster network.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def etag(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "etag")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        The URL for this cluster network.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="isClusterNetworkId")
    def is_cluster_network_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_cluster_network_id")

    @_builtins.property
    @pulumi.getter(name="lifecycleReasons")
    def lifecycle_reasons(self) -> pulumi.Output[Sequence['outputs.IsClusterNetworkLifecycleReason']]:
        """
        The reasons for the current `lifecycle_state` (if any).
        """
        return pulumi.get(self, "lifecycle_reasons")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> pulumi.Output[_builtins.str]:
        """
        The lifecycle state of the cluster network.
        """
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name for this cluster network. The name must not be used by another cluster network in the region.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def profile(self) -> pulumi.Output[_builtins.str]:
        """
        The globally unique name for this cluster network profile.
        """
        return pulumi.get(self, "profile")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier for this resource group for this cluster network.
        """
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="subnetPrefixes")
    def subnet_prefixes(self) -> pulumi.Output[Optional['outputs.IsClusterNetworkSubnetPrefixes']]:
        """
        The IP address ranges available for subnets for this cluster network.
        """
        return pulumi.get(self, "subnet_prefixes")

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> pulumi.Output['outputs.IsClusterNetworkVpc']:
        """
        The VPC this cluster network resides in.
        """
        return pulumi.get(self, "vpc")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> pulumi.Output[_builtins.str]:
        """
        The globally unique name for the zone this cluster network resides in.
        """
        return pulumi.get(self, "zone")

