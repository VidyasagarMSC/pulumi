# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetPiVolumeOnboardingResult',
    'AwaitableGetPiVolumeOnboardingResult',
    'get_pi_volume_onboarding',
    'get_pi_volume_onboarding_output',
]

@pulumi.output_type
class GetPiVolumeOnboardingResult:
    """
    A collection of values returned by getPiVolumeOnboarding.
    """
    def __init__(__self__, create_time=None, description=None, id=None, input_volumes=None, pi_cloud_instance_id=None, pi_volume_onboarding_id=None, progress=None, results_onboarded_volumes=None, results_volume_onboarding_failures=None, status=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if input_volumes and not isinstance(input_volumes, list):
            raise TypeError("Expected argument 'input_volumes' to be a list")
        pulumi.set(__self__, "input_volumes", input_volumes)
        if pi_cloud_instance_id and not isinstance(pi_cloud_instance_id, str):
            raise TypeError("Expected argument 'pi_cloud_instance_id' to be a str")
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_volume_onboarding_id and not isinstance(pi_volume_onboarding_id, str):
            raise TypeError("Expected argument 'pi_volume_onboarding_id' to be a str")
        pulumi.set(__self__, "pi_volume_onboarding_id", pi_volume_onboarding_id)
        if progress and not isinstance(progress, float):
            raise TypeError("Expected argument 'progress' to be a float")
        pulumi.set(__self__, "progress", progress)
        if results_onboarded_volumes and not isinstance(results_onboarded_volumes, list):
            raise TypeError("Expected argument 'results_onboarded_volumes' to be a list")
        pulumi.set(__self__, "results_onboarded_volumes", results_onboarded_volumes)
        if results_volume_onboarding_failures and not isinstance(results_volume_onboarding_failures, list):
            raise TypeError("Expected argument 'results_volume_onboarding_failures' to be a list")
        pulumi.set(__self__, "results_volume_onboarding_failures", results_volume_onboarding_failures)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="inputVolumes")
    def input_volumes(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "input_volumes")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piVolumeOnboardingId")
    def pi_volume_onboarding_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_volume_onboarding_id")

    @_builtins.property
    @pulumi.getter
    def progress(self) -> _builtins.float:
        return pulumi.get(self, "progress")

    @_builtins.property
    @pulumi.getter(name="resultsOnboardedVolumes")
    def results_onboarded_volumes(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "results_onboarded_volumes")

    @_builtins.property
    @pulumi.getter(name="resultsVolumeOnboardingFailures")
    def results_volume_onboarding_failures(self) -> Sequence['outputs.GetPiVolumeOnboardingResultsVolumeOnboardingFailureResult']:
        return pulumi.get(self, "results_volume_onboarding_failures")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")


class AwaitableGetPiVolumeOnboardingResult(GetPiVolumeOnboardingResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPiVolumeOnboardingResult(
            create_time=self.create_time,
            description=self.description,
            id=self.id,
            input_volumes=self.input_volumes,
            pi_cloud_instance_id=self.pi_cloud_instance_id,
            pi_volume_onboarding_id=self.pi_volume_onboarding_id,
            progress=self.progress,
            results_onboarded_volumes=self.results_onboarded_volumes,
            results_volume_onboarding_failures=self.results_volume_onboarding_failures,
            status=self.status)


def get_pi_volume_onboarding(id: Optional[_builtins.str] = None,
                             pi_cloud_instance_id: Optional[_builtins.str] = None,
                             pi_volume_onboarding_id: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPiVolumeOnboardingResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piVolumeOnboardingId'] = pi_volume_onboarding_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getPiVolumeOnboarding:getPiVolumeOnboarding', __args__, opts=opts, typ=GetPiVolumeOnboardingResult, package_ref=_utilities.get_package()).value

    return AwaitableGetPiVolumeOnboardingResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        input_volumes=pulumi.get(__ret__, 'input_volumes'),
        pi_cloud_instance_id=pulumi.get(__ret__, 'pi_cloud_instance_id'),
        pi_volume_onboarding_id=pulumi.get(__ret__, 'pi_volume_onboarding_id'),
        progress=pulumi.get(__ret__, 'progress'),
        results_onboarded_volumes=pulumi.get(__ret__, 'results_onboarded_volumes'),
        results_volume_onboarding_failures=pulumi.get(__ret__, 'results_volume_onboarding_failures'),
        status=pulumi.get(__ret__, 'status'))
def get_pi_volume_onboarding_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                    pi_volume_onboarding_id: Optional[pulumi.Input[_builtins.str]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPiVolumeOnboardingResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piVolumeOnboardingId'] = pi_volume_onboarding_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getPiVolumeOnboarding:getPiVolumeOnboarding', __args__, opts=opts, typ=GetPiVolumeOnboardingResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetPiVolumeOnboardingResult(
        create_time=pulumi.get(__response__, 'create_time'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        input_volumes=pulumi.get(__response__, 'input_volumes'),
        pi_cloud_instance_id=pulumi.get(__response__, 'pi_cloud_instance_id'),
        pi_volume_onboarding_id=pulumi.get(__response__, 'pi_volume_onboarding_id'),
        progress=pulumi.get(__response__, 'progress'),
        results_onboarded_volumes=pulumi.get(__response__, 'results_onboarded_volumes'),
        results_volume_onboarding_failures=pulumi.get(__response__, 'results_volume_onboarding_failures'),
        status=pulumi.get(__response__, 'status')))
