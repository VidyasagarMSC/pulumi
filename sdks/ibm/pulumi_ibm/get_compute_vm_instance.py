# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetComputeVmInstanceResult',
    'AwaitableGetComputeVmInstanceResult',
    'get_compute_vm_instance',
    'get_compute_vm_instance_output',
]

@pulumi.output_type
class GetComputeVmInstanceResult:
    """
    A collection of values returned by getComputeVmInstance.
    """
    def __init__(__self__, cores=None, datacenter=None, domain=None, hostname=None, id=None, ip_address_id=None, ip_address_id_private=None, ipv4_address=None, ipv4_address_private=None, ipv6_address=None, ipv6_address_id=None, last_known_power_state=None, most_recent=None, power_state=None, private_interface_id=None, private_subnet_id=None, public_interface_id=None, public_ipv6_subnet=None, public_ipv6_subnet_id=None, public_subnet_id=None, secondary_ip_addresses=None, secondary_ip_count=None, status=None):
        if cores and not isinstance(cores, float):
            raise TypeError("Expected argument 'cores' to be a float")
        pulumi.set(__self__, "cores", cores)
        if datacenter and not isinstance(datacenter, str):
            raise TypeError("Expected argument 'datacenter' to be a str")
        pulumi.set(__self__, "datacenter", datacenter)
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if hostname and not isinstance(hostname, str):
            raise TypeError("Expected argument 'hostname' to be a str")
        pulumi.set(__self__, "hostname", hostname)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_address_id and not isinstance(ip_address_id, float):
            raise TypeError("Expected argument 'ip_address_id' to be a float")
        pulumi.set(__self__, "ip_address_id", ip_address_id)
        if ip_address_id_private and not isinstance(ip_address_id_private, float):
            raise TypeError("Expected argument 'ip_address_id_private' to be a float")
        pulumi.set(__self__, "ip_address_id_private", ip_address_id_private)
        if ipv4_address and not isinstance(ipv4_address, str):
            raise TypeError("Expected argument 'ipv4_address' to be a str")
        pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv4_address_private and not isinstance(ipv4_address_private, str):
            raise TypeError("Expected argument 'ipv4_address_private' to be a str")
        pulumi.set(__self__, "ipv4_address_private", ipv4_address_private)
        if ipv6_address and not isinstance(ipv6_address, str):
            raise TypeError("Expected argument 'ipv6_address' to be a str")
        pulumi.set(__self__, "ipv6_address", ipv6_address)
        if ipv6_address_id and not isinstance(ipv6_address_id, float):
            raise TypeError("Expected argument 'ipv6_address_id' to be a float")
        pulumi.set(__self__, "ipv6_address_id", ipv6_address_id)
        if last_known_power_state and not isinstance(last_known_power_state, str):
            raise TypeError("Expected argument 'last_known_power_state' to be a str")
        pulumi.set(__self__, "last_known_power_state", last_known_power_state)
        if most_recent and not isinstance(most_recent, bool):
            raise TypeError("Expected argument 'most_recent' to be a bool")
        pulumi.set(__self__, "most_recent", most_recent)
        if power_state and not isinstance(power_state, str):
            raise TypeError("Expected argument 'power_state' to be a str")
        pulumi.set(__self__, "power_state", power_state)
        if private_interface_id and not isinstance(private_interface_id, float):
            raise TypeError("Expected argument 'private_interface_id' to be a float")
        pulumi.set(__self__, "private_interface_id", private_interface_id)
        if private_subnet_id and not isinstance(private_subnet_id, float):
            raise TypeError("Expected argument 'private_subnet_id' to be a float")
        pulumi.set(__self__, "private_subnet_id", private_subnet_id)
        if public_interface_id and not isinstance(public_interface_id, float):
            raise TypeError("Expected argument 'public_interface_id' to be a float")
        pulumi.set(__self__, "public_interface_id", public_interface_id)
        if public_ipv6_subnet and not isinstance(public_ipv6_subnet, str):
            raise TypeError("Expected argument 'public_ipv6_subnet' to be a str")
        pulumi.set(__self__, "public_ipv6_subnet", public_ipv6_subnet)
        if public_ipv6_subnet_id and not isinstance(public_ipv6_subnet_id, str):
            raise TypeError("Expected argument 'public_ipv6_subnet_id' to be a str")
        pulumi.set(__self__, "public_ipv6_subnet_id", public_ipv6_subnet_id)
        if public_subnet_id and not isinstance(public_subnet_id, float):
            raise TypeError("Expected argument 'public_subnet_id' to be a float")
        pulumi.set(__self__, "public_subnet_id", public_subnet_id)
        if secondary_ip_addresses and not isinstance(secondary_ip_addresses, list):
            raise TypeError("Expected argument 'secondary_ip_addresses' to be a list")
        pulumi.set(__self__, "secondary_ip_addresses", secondary_ip_addresses)
        if secondary_ip_count and not isinstance(secondary_ip_count, float):
            raise TypeError("Expected argument 'secondary_ip_count' to be a float")
        pulumi.set(__self__, "secondary_ip_count", secondary_ip_count)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def cores(self) -> _builtins.float:
        return pulumi.get(self, "cores")

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> _builtins.str:
        return pulumi.get(self, "datacenter")

    @_builtins.property
    @pulumi.getter
    def domain(self) -> _builtins.str:
        return pulumi.get(self, "domain")

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> _builtins.str:
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipAddressId")
    def ip_address_id(self) -> _builtins.float:
        return pulumi.get(self, "ip_address_id")

    @_builtins.property
    @pulumi.getter(name="ipAddressIdPrivate")
    def ip_address_id_private(self) -> _builtins.float:
        return pulumi.get(self, "ip_address_id_private")

    @_builtins.property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> _builtins.str:
        return pulumi.get(self, "ipv4_address")

    @_builtins.property
    @pulumi.getter(name="ipv4AddressPrivate")
    def ipv4_address_private(self) -> _builtins.str:
        return pulumi.get(self, "ipv4_address_private")

    @_builtins.property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> _builtins.str:
        return pulumi.get(self, "ipv6_address")

    @_builtins.property
    @pulumi.getter(name="ipv6AddressId")
    def ipv6_address_id(self) -> _builtins.float:
        return pulumi.get(self, "ipv6_address_id")

    @_builtins.property
    @pulumi.getter(name="lastKnownPowerState")
    def last_known_power_state(self) -> _builtins.str:
        return pulumi.get(self, "last_known_power_state")

    @_builtins.property
    @pulumi.getter(name="mostRecent")
    def most_recent(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "most_recent")

    @_builtins.property
    @pulumi.getter(name="powerState")
    def power_state(self) -> _builtins.str:
        return pulumi.get(self, "power_state")

    @_builtins.property
    @pulumi.getter(name="privateInterfaceId")
    def private_interface_id(self) -> _builtins.float:
        return pulumi.get(self, "private_interface_id")

    @_builtins.property
    @pulumi.getter(name="privateSubnetId")
    def private_subnet_id(self) -> _builtins.float:
        return pulumi.get(self, "private_subnet_id")

    @_builtins.property
    @pulumi.getter(name="publicInterfaceId")
    def public_interface_id(self) -> _builtins.float:
        return pulumi.get(self, "public_interface_id")

    @_builtins.property
    @pulumi.getter(name="publicIpv6Subnet")
    def public_ipv6_subnet(self) -> _builtins.str:
        return pulumi.get(self, "public_ipv6_subnet")

    @_builtins.property
    @pulumi.getter(name="publicIpv6SubnetId")
    def public_ipv6_subnet_id(self) -> _builtins.str:
        return pulumi.get(self, "public_ipv6_subnet_id")

    @_builtins.property
    @pulumi.getter(name="publicSubnetId")
    def public_subnet_id(self) -> _builtins.float:
        return pulumi.get(self, "public_subnet_id")

    @_builtins.property
    @pulumi.getter(name="secondaryIpAddresses")
    def secondary_ip_addresses(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "secondary_ip_addresses")

    @_builtins.property
    @pulumi.getter(name="secondaryIpCount")
    def secondary_ip_count(self) -> _builtins.float:
        return pulumi.get(self, "secondary_ip_count")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")


class AwaitableGetComputeVmInstanceResult(GetComputeVmInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetComputeVmInstanceResult(
            cores=self.cores,
            datacenter=self.datacenter,
            domain=self.domain,
            hostname=self.hostname,
            id=self.id,
            ip_address_id=self.ip_address_id,
            ip_address_id_private=self.ip_address_id_private,
            ipv4_address=self.ipv4_address,
            ipv4_address_private=self.ipv4_address_private,
            ipv6_address=self.ipv6_address,
            ipv6_address_id=self.ipv6_address_id,
            last_known_power_state=self.last_known_power_state,
            most_recent=self.most_recent,
            power_state=self.power_state,
            private_interface_id=self.private_interface_id,
            private_subnet_id=self.private_subnet_id,
            public_interface_id=self.public_interface_id,
            public_ipv6_subnet=self.public_ipv6_subnet,
            public_ipv6_subnet_id=self.public_ipv6_subnet_id,
            public_subnet_id=self.public_subnet_id,
            secondary_ip_addresses=self.secondary_ip_addresses,
            secondary_ip_count=self.secondary_ip_count,
            status=self.status)


def get_compute_vm_instance(domain: Optional[_builtins.str] = None,
                            hostname: Optional[_builtins.str] = None,
                            id: Optional[_builtins.str] = None,
                            most_recent: Optional[_builtins.bool] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetComputeVmInstanceResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['domain'] = domain
    __args__['hostname'] = hostname
    __args__['id'] = id
    __args__['mostRecent'] = most_recent
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getComputeVmInstance:getComputeVmInstance', __args__, opts=opts, typ=GetComputeVmInstanceResult, package_ref=_utilities.get_package()).value

    return AwaitableGetComputeVmInstanceResult(
        cores=pulumi.get(__ret__, 'cores'),
        datacenter=pulumi.get(__ret__, 'datacenter'),
        domain=pulumi.get(__ret__, 'domain'),
        hostname=pulumi.get(__ret__, 'hostname'),
        id=pulumi.get(__ret__, 'id'),
        ip_address_id=pulumi.get(__ret__, 'ip_address_id'),
        ip_address_id_private=pulumi.get(__ret__, 'ip_address_id_private'),
        ipv4_address=pulumi.get(__ret__, 'ipv4_address'),
        ipv4_address_private=pulumi.get(__ret__, 'ipv4_address_private'),
        ipv6_address=pulumi.get(__ret__, 'ipv6_address'),
        ipv6_address_id=pulumi.get(__ret__, 'ipv6_address_id'),
        last_known_power_state=pulumi.get(__ret__, 'last_known_power_state'),
        most_recent=pulumi.get(__ret__, 'most_recent'),
        power_state=pulumi.get(__ret__, 'power_state'),
        private_interface_id=pulumi.get(__ret__, 'private_interface_id'),
        private_subnet_id=pulumi.get(__ret__, 'private_subnet_id'),
        public_interface_id=pulumi.get(__ret__, 'public_interface_id'),
        public_ipv6_subnet=pulumi.get(__ret__, 'public_ipv6_subnet'),
        public_ipv6_subnet_id=pulumi.get(__ret__, 'public_ipv6_subnet_id'),
        public_subnet_id=pulumi.get(__ret__, 'public_subnet_id'),
        secondary_ip_addresses=pulumi.get(__ret__, 'secondary_ip_addresses'),
        secondary_ip_count=pulumi.get(__ret__, 'secondary_ip_count'),
        status=pulumi.get(__ret__, 'status'))
def get_compute_vm_instance_output(domain: Optional[pulumi.Input[_builtins.str]] = None,
                                   hostname: Optional[pulumi.Input[_builtins.str]] = None,
                                   id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   most_recent: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetComputeVmInstanceResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['domain'] = domain
    __args__['hostname'] = hostname
    __args__['id'] = id
    __args__['mostRecent'] = most_recent
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getComputeVmInstance:getComputeVmInstance', __args__, opts=opts, typ=GetComputeVmInstanceResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetComputeVmInstanceResult(
        cores=pulumi.get(__response__, 'cores'),
        datacenter=pulumi.get(__response__, 'datacenter'),
        domain=pulumi.get(__response__, 'domain'),
        hostname=pulumi.get(__response__, 'hostname'),
        id=pulumi.get(__response__, 'id'),
        ip_address_id=pulumi.get(__response__, 'ip_address_id'),
        ip_address_id_private=pulumi.get(__response__, 'ip_address_id_private'),
        ipv4_address=pulumi.get(__response__, 'ipv4_address'),
        ipv4_address_private=pulumi.get(__response__, 'ipv4_address_private'),
        ipv6_address=pulumi.get(__response__, 'ipv6_address'),
        ipv6_address_id=pulumi.get(__response__, 'ipv6_address_id'),
        last_known_power_state=pulumi.get(__response__, 'last_known_power_state'),
        most_recent=pulumi.get(__response__, 'most_recent'),
        power_state=pulumi.get(__response__, 'power_state'),
        private_interface_id=pulumi.get(__response__, 'private_interface_id'),
        private_subnet_id=pulumi.get(__response__, 'private_subnet_id'),
        public_interface_id=pulumi.get(__response__, 'public_interface_id'),
        public_ipv6_subnet=pulumi.get(__response__, 'public_ipv6_subnet'),
        public_ipv6_subnet_id=pulumi.get(__response__, 'public_ipv6_subnet_id'),
        public_subnet_id=pulumi.get(__response__, 'public_subnet_id'),
        secondary_ip_addresses=pulumi.get(__response__, 'secondary_ip_addresses'),
        secondary_ip_count=pulumi.get(__response__, 'secondary_ip_count'),
        status=pulumi.get(__response__, 'status')))
