# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PiImageArgs', 'PiImage']

@pulumi.input_type
class PiImageArgs:
    def __init__(__self__, *,
                 pi_cloud_instance_id: pulumi.Input[_builtins.str],
                 ibm_pi_image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_affinity_instance: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_affinity_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_affinity_volume: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_anti_affinity_instances: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_anti_affinity_volumes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_image_access_key: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_bucket_access: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_bucket_file_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_bucket_region: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_import_details: Optional[pulumi.Input['PiImagePiImageImportDetailsArgs']] = None,
                 pi_image_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_secret_key: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_storage_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_storage_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['PiImageTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a PiImage resource.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_affinity_instance: PVM Instance (ID or Name) to base storage affinity policy against; required if requesting storage affinity and
               pi_affinity_volume is not provided
        :param pulumi.Input[_builtins.str] pi_affinity_policy: Affinity policy for image; ignored if pi_image_storage_pool provided; for policy affinity requires one of
               pi_affinity_instance or pi_affinity_volume to be specified; for policy anti-affinity requires one of
               pi_anti_affinity_instances or pi_anti_affinity_volumes to be specified
        :param pulumi.Input[_builtins.str] pi_affinity_volume: Volume (ID or Name) to base storage affinity policy against; required if requesting affinity and pi_affinity_instance is
               not provided
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_anti_affinity_instances: List of pvmInstances to base storage anti-affinity policy against; required if requesting anti-affinity and
               pi_anti_affinity_volumes is not provided
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_anti_affinity_volumes: List of volumes to base storage anti-affinity policy against; required if requesting anti-affinity and
               pi_anti_affinity_instances is not provided
        :param pulumi.Input[_builtins.str] pi_image_access_key: Cloud Object Storage access key; required for buckets with private access
        :param pulumi.Input[_builtins.str] pi_image_bucket_access: Indicates if the bucket has public or private access
        :param pulumi.Input[_builtins.str] pi_image_bucket_file_name: Cloud Object Storage image filename
        :param pulumi.Input[_builtins.str] pi_image_bucket_name: Cloud Object Storage bucket name; bucket-name[/optional/folder]
        :param pulumi.Input[_builtins.str] pi_image_bucket_region: Cloud Object Storage region
        :param pulumi.Input[_builtins.str] pi_image_id: Instance image id
        :param pulumi.Input[_builtins.str] pi_image_name: Image name
        :param pulumi.Input[_builtins.str] pi_image_secret_key: Cloud Object Storage secret key; required for buckets with private access
        :param pulumi.Input[_builtins.str] pi_image_storage_pool: Storage pool where the image will be loaded, if provided then pi_affinity_policy will be ignored
        :param pulumi.Input[_builtins.str] pi_image_storage_type: Type of storage; If not specified, default is tier3
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: The user tags attached to this resource.
        """
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if ibm_pi_image_id is not None:
            pulumi.set(__self__, "ibm_pi_image_id", ibm_pi_image_id)
        if pi_affinity_instance is not None:
            pulumi.set(__self__, "pi_affinity_instance", pi_affinity_instance)
        if pi_affinity_policy is not None:
            pulumi.set(__self__, "pi_affinity_policy", pi_affinity_policy)
        if pi_affinity_volume is not None:
            pulumi.set(__self__, "pi_affinity_volume", pi_affinity_volume)
        if pi_anti_affinity_instances is not None:
            pulumi.set(__self__, "pi_anti_affinity_instances", pi_anti_affinity_instances)
        if pi_anti_affinity_volumes is not None:
            pulumi.set(__self__, "pi_anti_affinity_volumes", pi_anti_affinity_volumes)
        if pi_image_access_key is not None:
            pulumi.set(__self__, "pi_image_access_key", pi_image_access_key)
        if pi_image_bucket_access is not None:
            pulumi.set(__self__, "pi_image_bucket_access", pi_image_bucket_access)
        if pi_image_bucket_file_name is not None:
            pulumi.set(__self__, "pi_image_bucket_file_name", pi_image_bucket_file_name)
        if pi_image_bucket_name is not None:
            pulumi.set(__self__, "pi_image_bucket_name", pi_image_bucket_name)
        if pi_image_bucket_region is not None:
            pulumi.set(__self__, "pi_image_bucket_region", pi_image_bucket_region)
        if pi_image_id is not None:
            pulumi.set(__self__, "pi_image_id", pi_image_id)
        if pi_image_import_details is not None:
            pulumi.set(__self__, "pi_image_import_details", pi_image_import_details)
        if pi_image_name is not None:
            pulumi.set(__self__, "pi_image_name", pi_image_name)
        if pi_image_secret_key is not None:
            pulumi.set(__self__, "pi_image_secret_key", pi_image_secret_key)
        if pi_image_storage_pool is not None:
            pulumi.set(__self__, "pi_image_storage_pool", pi_image_storage_pool)
        if pi_image_storage_type is not None:
            pulumi.set(__self__, "pi_image_storage_type", pi_image_storage_type)
        if pi_user_tags is not None:
            pulumi.set(__self__, "pi_user_tags", pi_user_tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="ibmPiImageId")
    def ibm_pi_image_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ibm_pi_image_id")

    @ibm_pi_image_id.setter
    def ibm_pi_image_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ibm_pi_image_id", value)

    @_builtins.property
    @pulumi.getter(name="piAffinityInstance")
    def pi_affinity_instance(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        PVM Instance (ID or Name) to base storage affinity policy against; required if requesting storage affinity and
        pi_affinity_volume is not provided
        """
        return pulumi.get(self, "pi_affinity_instance")

    @pi_affinity_instance.setter
    def pi_affinity_instance(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_affinity_instance", value)

    @_builtins.property
    @pulumi.getter(name="piAffinityPolicy")
    def pi_affinity_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Affinity policy for image; ignored if pi_image_storage_pool provided; for policy affinity requires one of
        pi_affinity_instance or pi_affinity_volume to be specified; for policy anti-affinity requires one of
        pi_anti_affinity_instances or pi_anti_affinity_volumes to be specified
        """
        return pulumi.get(self, "pi_affinity_policy")

    @pi_affinity_policy.setter
    def pi_affinity_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_affinity_policy", value)

    @_builtins.property
    @pulumi.getter(name="piAffinityVolume")
    def pi_affinity_volume(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Volume (ID or Name) to base storage affinity policy against; required if requesting affinity and pi_affinity_instance is
        not provided
        """
        return pulumi.get(self, "pi_affinity_volume")

    @pi_affinity_volume.setter
    def pi_affinity_volume(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_affinity_volume", value)

    @_builtins.property
    @pulumi.getter(name="piAntiAffinityInstances")
    def pi_anti_affinity_instances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of pvmInstances to base storage anti-affinity policy against; required if requesting anti-affinity and
        pi_anti_affinity_volumes is not provided
        """
        return pulumi.get(self, "pi_anti_affinity_instances")

    @pi_anti_affinity_instances.setter
    def pi_anti_affinity_instances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_anti_affinity_instances", value)

    @_builtins.property
    @pulumi.getter(name="piAntiAffinityVolumes")
    def pi_anti_affinity_volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of volumes to base storage anti-affinity policy against; required if requesting anti-affinity and
        pi_anti_affinity_instances is not provided
        """
        return pulumi.get(self, "pi_anti_affinity_volumes")

    @pi_anti_affinity_volumes.setter
    def pi_anti_affinity_volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_anti_affinity_volumes", value)

    @_builtins.property
    @pulumi.getter(name="piImageAccessKey")
    def pi_image_access_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cloud Object Storage access key; required for buckets with private access
        """
        return pulumi.get(self, "pi_image_access_key")

    @pi_image_access_key.setter
    def pi_image_access_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_image_access_key", value)

    @_builtins.property
    @pulumi.getter(name="piImageBucketAccess")
    def pi_image_bucket_access(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates if the bucket has public or private access
        """
        return pulumi.get(self, "pi_image_bucket_access")

    @pi_image_bucket_access.setter
    def pi_image_bucket_access(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_image_bucket_access", value)

    @_builtins.property
    @pulumi.getter(name="piImageBucketFileName")
    def pi_image_bucket_file_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cloud Object Storage image filename
        """
        return pulumi.get(self, "pi_image_bucket_file_name")

    @pi_image_bucket_file_name.setter
    def pi_image_bucket_file_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_image_bucket_file_name", value)

    @_builtins.property
    @pulumi.getter(name="piImageBucketName")
    def pi_image_bucket_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cloud Object Storage bucket name; bucket-name[/optional/folder]
        """
        return pulumi.get(self, "pi_image_bucket_name")

    @pi_image_bucket_name.setter
    def pi_image_bucket_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_image_bucket_name", value)

    @_builtins.property
    @pulumi.getter(name="piImageBucketRegion")
    def pi_image_bucket_region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cloud Object Storage region
        """
        return pulumi.get(self, "pi_image_bucket_region")

    @pi_image_bucket_region.setter
    def pi_image_bucket_region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_image_bucket_region", value)

    @_builtins.property
    @pulumi.getter(name="piImageId")
    def pi_image_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Instance image id
        """
        return pulumi.get(self, "pi_image_id")

    @pi_image_id.setter
    def pi_image_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_image_id", value)

    @_builtins.property
    @pulumi.getter(name="piImageImportDetails")
    def pi_image_import_details(self) -> Optional[pulumi.Input['PiImagePiImageImportDetailsArgs']]:
        return pulumi.get(self, "pi_image_import_details")

    @pi_image_import_details.setter
    def pi_image_import_details(self, value: Optional[pulumi.Input['PiImagePiImageImportDetailsArgs']]):
        pulumi.set(self, "pi_image_import_details", value)

    @_builtins.property
    @pulumi.getter(name="piImageName")
    def pi_image_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Image name
        """
        return pulumi.get(self, "pi_image_name")

    @pi_image_name.setter
    def pi_image_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_image_name", value)

    @_builtins.property
    @pulumi.getter(name="piImageSecretKey")
    def pi_image_secret_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cloud Object Storage secret key; required for buckets with private access
        """
        return pulumi.get(self, "pi_image_secret_key")

    @pi_image_secret_key.setter
    def pi_image_secret_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_image_secret_key", value)

    @_builtins.property
    @pulumi.getter(name="piImageStoragePool")
    def pi_image_storage_pool(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Storage pool where the image will be loaded, if provided then pi_affinity_policy will be ignored
        """
        return pulumi.get(self, "pi_image_storage_pool")

    @pi_image_storage_pool.setter
    def pi_image_storage_pool(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_image_storage_pool", value)

    @_builtins.property
    @pulumi.getter(name="piImageStorageType")
    def pi_image_storage_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of storage; If not specified, default is tier3
        """
        return pulumi.get(self, "pi_image_storage_type")

    @pi_image_storage_type.setter
    def pi_image_storage_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_image_storage_type", value)

    @_builtins.property
    @pulumi.getter(name="piUserTags")
    def pi_user_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The user tags attached to this resource.
        """
        return pulumi.get(self, "pi_user_tags")

    @pi_user_tags.setter
    def pi_user_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_user_tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiImageTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiImageTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _PiImageState:
    def __init__(__self__, *,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 ibm_pi_image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_affinity_instance: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_affinity_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_affinity_volume: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_anti_affinity_instances: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_anti_affinity_volumes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_access_key: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_bucket_access: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_bucket_file_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_bucket_region: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_import_details: Optional[pulumi.Input['PiImagePiImageImportDetailsArgs']] = None,
                 pi_image_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_secret_key: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_storage_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_storage_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['PiImageTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering PiImage resources.
        :param pulumi.Input[_builtins.str] crn: The CRN of this resource.
        :param pulumi.Input[_builtins.str] image_id: Image ID
        :param pulumi.Input[_builtins.str] pi_affinity_instance: PVM Instance (ID or Name) to base storage affinity policy against; required if requesting storage affinity and
               pi_affinity_volume is not provided
        :param pulumi.Input[_builtins.str] pi_affinity_policy: Affinity policy for image; ignored if pi_image_storage_pool provided; for policy affinity requires one of
               pi_affinity_instance or pi_affinity_volume to be specified; for policy anti-affinity requires one of
               pi_anti_affinity_instances or pi_anti_affinity_volumes to be specified
        :param pulumi.Input[_builtins.str] pi_affinity_volume: Volume (ID or Name) to base storage affinity policy against; required if requesting affinity and pi_affinity_instance is
               not provided
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_anti_affinity_instances: List of pvmInstances to base storage anti-affinity policy against; required if requesting anti-affinity and
               pi_anti_affinity_volumes is not provided
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_anti_affinity_volumes: List of volumes to base storage anti-affinity policy against; required if requesting anti-affinity and
               pi_anti_affinity_instances is not provided
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_image_access_key: Cloud Object Storage access key; required for buckets with private access
        :param pulumi.Input[_builtins.str] pi_image_bucket_access: Indicates if the bucket has public or private access
        :param pulumi.Input[_builtins.str] pi_image_bucket_file_name: Cloud Object Storage image filename
        :param pulumi.Input[_builtins.str] pi_image_bucket_name: Cloud Object Storage bucket name; bucket-name[/optional/folder]
        :param pulumi.Input[_builtins.str] pi_image_bucket_region: Cloud Object Storage region
        :param pulumi.Input[_builtins.str] pi_image_id: Instance image id
        :param pulumi.Input[_builtins.str] pi_image_name: Image name
        :param pulumi.Input[_builtins.str] pi_image_secret_key: Cloud Object Storage secret key; required for buckets with private access
        :param pulumi.Input[_builtins.str] pi_image_storage_pool: Storage pool where the image will be loaded, if provided then pi_affinity_policy will be ignored
        :param pulumi.Input[_builtins.str] pi_image_storage_type: Type of storage; If not specified, default is tier3
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: The user tags attached to this resource.
        """
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if ibm_pi_image_id is not None:
            pulumi.set(__self__, "ibm_pi_image_id", ibm_pi_image_id)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if pi_affinity_instance is not None:
            pulumi.set(__self__, "pi_affinity_instance", pi_affinity_instance)
        if pi_affinity_policy is not None:
            pulumi.set(__self__, "pi_affinity_policy", pi_affinity_policy)
        if pi_affinity_volume is not None:
            pulumi.set(__self__, "pi_affinity_volume", pi_affinity_volume)
        if pi_anti_affinity_instances is not None:
            pulumi.set(__self__, "pi_anti_affinity_instances", pi_anti_affinity_instances)
        if pi_anti_affinity_volumes is not None:
            pulumi.set(__self__, "pi_anti_affinity_volumes", pi_anti_affinity_volumes)
        if pi_cloud_instance_id is not None:
            pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_image_access_key is not None:
            pulumi.set(__self__, "pi_image_access_key", pi_image_access_key)
        if pi_image_bucket_access is not None:
            pulumi.set(__self__, "pi_image_bucket_access", pi_image_bucket_access)
        if pi_image_bucket_file_name is not None:
            pulumi.set(__self__, "pi_image_bucket_file_name", pi_image_bucket_file_name)
        if pi_image_bucket_name is not None:
            pulumi.set(__self__, "pi_image_bucket_name", pi_image_bucket_name)
        if pi_image_bucket_region is not None:
            pulumi.set(__self__, "pi_image_bucket_region", pi_image_bucket_region)
        if pi_image_id is not None:
            pulumi.set(__self__, "pi_image_id", pi_image_id)
        if pi_image_import_details is not None:
            pulumi.set(__self__, "pi_image_import_details", pi_image_import_details)
        if pi_image_name is not None:
            pulumi.set(__self__, "pi_image_name", pi_image_name)
        if pi_image_secret_key is not None:
            pulumi.set(__self__, "pi_image_secret_key", pi_image_secret_key)
        if pi_image_storage_pool is not None:
            pulumi.set(__self__, "pi_image_storage_pool", pi_image_storage_pool)
        if pi_image_storage_type is not None:
            pulumi.set(__self__, "pi_image_storage_type", pi_image_storage_type)
        if pi_user_tags is not None:
            pulumi.set(__self__, "pi_user_tags", pi_user_tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN of this resource.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="ibmPiImageId")
    def ibm_pi_image_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ibm_pi_image_id")

    @ibm_pi_image_id.setter
    def ibm_pi_image_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ibm_pi_image_id", value)

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Image ID
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_id", value)

    @_builtins.property
    @pulumi.getter(name="piAffinityInstance")
    def pi_affinity_instance(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        PVM Instance (ID or Name) to base storage affinity policy against; required if requesting storage affinity and
        pi_affinity_volume is not provided
        """
        return pulumi.get(self, "pi_affinity_instance")

    @pi_affinity_instance.setter
    def pi_affinity_instance(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_affinity_instance", value)

    @_builtins.property
    @pulumi.getter(name="piAffinityPolicy")
    def pi_affinity_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Affinity policy for image; ignored if pi_image_storage_pool provided; for policy affinity requires one of
        pi_affinity_instance or pi_affinity_volume to be specified; for policy anti-affinity requires one of
        pi_anti_affinity_instances or pi_anti_affinity_volumes to be specified
        """
        return pulumi.get(self, "pi_affinity_policy")

    @pi_affinity_policy.setter
    def pi_affinity_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_affinity_policy", value)

    @_builtins.property
    @pulumi.getter(name="piAffinityVolume")
    def pi_affinity_volume(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Volume (ID or Name) to base storage affinity policy against; required if requesting affinity and pi_affinity_instance is
        not provided
        """
        return pulumi.get(self, "pi_affinity_volume")

    @pi_affinity_volume.setter
    def pi_affinity_volume(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_affinity_volume", value)

    @_builtins.property
    @pulumi.getter(name="piAntiAffinityInstances")
    def pi_anti_affinity_instances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of pvmInstances to base storage anti-affinity policy against; required if requesting anti-affinity and
        pi_anti_affinity_volumes is not provided
        """
        return pulumi.get(self, "pi_anti_affinity_instances")

    @pi_anti_affinity_instances.setter
    def pi_anti_affinity_instances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_anti_affinity_instances", value)

    @_builtins.property
    @pulumi.getter(name="piAntiAffinityVolumes")
    def pi_anti_affinity_volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of volumes to base storage anti-affinity policy against; required if requesting anti-affinity and
        pi_anti_affinity_instances is not provided
        """
        return pulumi.get(self, "pi_anti_affinity_volumes")

    @pi_anti_affinity_volumes.setter
    def pi_anti_affinity_volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_anti_affinity_volumes", value)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piImageAccessKey")
    def pi_image_access_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cloud Object Storage access key; required for buckets with private access
        """
        return pulumi.get(self, "pi_image_access_key")

    @pi_image_access_key.setter
    def pi_image_access_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_image_access_key", value)

    @_builtins.property
    @pulumi.getter(name="piImageBucketAccess")
    def pi_image_bucket_access(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates if the bucket has public or private access
        """
        return pulumi.get(self, "pi_image_bucket_access")

    @pi_image_bucket_access.setter
    def pi_image_bucket_access(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_image_bucket_access", value)

    @_builtins.property
    @pulumi.getter(name="piImageBucketFileName")
    def pi_image_bucket_file_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cloud Object Storage image filename
        """
        return pulumi.get(self, "pi_image_bucket_file_name")

    @pi_image_bucket_file_name.setter
    def pi_image_bucket_file_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_image_bucket_file_name", value)

    @_builtins.property
    @pulumi.getter(name="piImageBucketName")
    def pi_image_bucket_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cloud Object Storage bucket name; bucket-name[/optional/folder]
        """
        return pulumi.get(self, "pi_image_bucket_name")

    @pi_image_bucket_name.setter
    def pi_image_bucket_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_image_bucket_name", value)

    @_builtins.property
    @pulumi.getter(name="piImageBucketRegion")
    def pi_image_bucket_region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cloud Object Storage region
        """
        return pulumi.get(self, "pi_image_bucket_region")

    @pi_image_bucket_region.setter
    def pi_image_bucket_region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_image_bucket_region", value)

    @_builtins.property
    @pulumi.getter(name="piImageId")
    def pi_image_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Instance image id
        """
        return pulumi.get(self, "pi_image_id")

    @pi_image_id.setter
    def pi_image_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_image_id", value)

    @_builtins.property
    @pulumi.getter(name="piImageImportDetails")
    def pi_image_import_details(self) -> Optional[pulumi.Input['PiImagePiImageImportDetailsArgs']]:
        return pulumi.get(self, "pi_image_import_details")

    @pi_image_import_details.setter
    def pi_image_import_details(self, value: Optional[pulumi.Input['PiImagePiImageImportDetailsArgs']]):
        pulumi.set(self, "pi_image_import_details", value)

    @_builtins.property
    @pulumi.getter(name="piImageName")
    def pi_image_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Image name
        """
        return pulumi.get(self, "pi_image_name")

    @pi_image_name.setter
    def pi_image_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_image_name", value)

    @_builtins.property
    @pulumi.getter(name="piImageSecretKey")
    def pi_image_secret_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cloud Object Storage secret key; required for buckets with private access
        """
        return pulumi.get(self, "pi_image_secret_key")

    @pi_image_secret_key.setter
    def pi_image_secret_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_image_secret_key", value)

    @_builtins.property
    @pulumi.getter(name="piImageStoragePool")
    def pi_image_storage_pool(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Storage pool where the image will be loaded, if provided then pi_affinity_policy will be ignored
        """
        return pulumi.get(self, "pi_image_storage_pool")

    @pi_image_storage_pool.setter
    def pi_image_storage_pool(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_image_storage_pool", value)

    @_builtins.property
    @pulumi.getter(name="piImageStorageType")
    def pi_image_storage_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of storage; If not specified, default is tier3
        """
        return pulumi.get(self, "pi_image_storage_type")

    @pi_image_storage_type.setter
    def pi_image_storage_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_image_storage_type", value)

    @_builtins.property
    @pulumi.getter(name="piUserTags")
    def pi_user_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The user tags attached to this resource.
        """
        return pulumi.get(self, "pi_user_tags")

    @pi_user_tags.setter
    def pi_user_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_user_tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiImageTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiImageTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/piImage:PiImage")
class PiImage(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ibm_pi_image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_affinity_instance: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_affinity_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_affinity_volume: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_anti_affinity_instances: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_anti_affinity_volumes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_access_key: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_bucket_access: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_bucket_file_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_bucket_region: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_import_details: Optional[pulumi.Input[Union['PiImagePiImageImportDetailsArgs', 'PiImagePiImageImportDetailsArgsDict']]] = None,
                 pi_image_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_secret_key: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_storage_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_storage_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiImageTimeoutsArgs', 'PiImageTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a PiImage resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] pi_affinity_instance: PVM Instance (ID or Name) to base storage affinity policy against; required if requesting storage affinity and
               pi_affinity_volume is not provided
        :param pulumi.Input[_builtins.str] pi_affinity_policy: Affinity policy for image; ignored if pi_image_storage_pool provided; for policy affinity requires one of
               pi_affinity_instance or pi_affinity_volume to be specified; for policy anti-affinity requires one of
               pi_anti_affinity_instances or pi_anti_affinity_volumes to be specified
        :param pulumi.Input[_builtins.str] pi_affinity_volume: Volume (ID or Name) to base storage affinity policy against; required if requesting affinity and pi_affinity_instance is
               not provided
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_anti_affinity_instances: List of pvmInstances to base storage anti-affinity policy against; required if requesting anti-affinity and
               pi_anti_affinity_volumes is not provided
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_anti_affinity_volumes: List of volumes to base storage anti-affinity policy against; required if requesting anti-affinity and
               pi_anti_affinity_instances is not provided
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_image_access_key: Cloud Object Storage access key; required for buckets with private access
        :param pulumi.Input[_builtins.str] pi_image_bucket_access: Indicates if the bucket has public or private access
        :param pulumi.Input[_builtins.str] pi_image_bucket_file_name: Cloud Object Storage image filename
        :param pulumi.Input[_builtins.str] pi_image_bucket_name: Cloud Object Storage bucket name; bucket-name[/optional/folder]
        :param pulumi.Input[_builtins.str] pi_image_bucket_region: Cloud Object Storage region
        :param pulumi.Input[_builtins.str] pi_image_id: Instance image id
        :param pulumi.Input[_builtins.str] pi_image_name: Image name
        :param pulumi.Input[_builtins.str] pi_image_secret_key: Cloud Object Storage secret key; required for buckets with private access
        :param pulumi.Input[_builtins.str] pi_image_storage_pool: Storage pool where the image will be loaded, if provided then pi_affinity_policy will be ignored
        :param pulumi.Input[_builtins.str] pi_image_storage_type: Type of storage; If not specified, default is tier3
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: The user tags attached to this resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PiImageArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PiImage resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PiImageArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PiImageArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ibm_pi_image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_affinity_instance: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_affinity_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_affinity_volume: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_anti_affinity_instances: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_anti_affinity_volumes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_access_key: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_bucket_access: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_bucket_file_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_bucket_region: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_import_details: Optional[pulumi.Input[Union['PiImagePiImageImportDetailsArgs', 'PiImagePiImageImportDetailsArgsDict']]] = None,
                 pi_image_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_secret_key: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_storage_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_image_storage_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiImageTimeoutsArgs', 'PiImageTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PiImageArgs.__new__(PiImageArgs)

            __props__.__dict__["ibm_pi_image_id"] = ibm_pi_image_id
            __props__.__dict__["pi_affinity_instance"] = pi_affinity_instance
            __props__.__dict__["pi_affinity_policy"] = pi_affinity_policy
            __props__.__dict__["pi_affinity_volume"] = pi_affinity_volume
            __props__.__dict__["pi_anti_affinity_instances"] = pi_anti_affinity_instances
            __props__.__dict__["pi_anti_affinity_volumes"] = pi_anti_affinity_volumes
            if pi_cloud_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'pi_cloud_instance_id'")
            __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
            __props__.__dict__["pi_image_access_key"] = None if pi_image_access_key is None else pulumi.Output.secret(pi_image_access_key)
            __props__.__dict__["pi_image_bucket_access"] = pi_image_bucket_access
            __props__.__dict__["pi_image_bucket_file_name"] = pi_image_bucket_file_name
            __props__.__dict__["pi_image_bucket_name"] = pi_image_bucket_name
            __props__.__dict__["pi_image_bucket_region"] = pi_image_bucket_region
            __props__.__dict__["pi_image_id"] = pi_image_id
            __props__.__dict__["pi_image_import_details"] = pi_image_import_details
            __props__.__dict__["pi_image_name"] = pi_image_name
            __props__.__dict__["pi_image_secret_key"] = None if pi_image_secret_key is None else pulumi.Output.secret(pi_image_secret_key)
            __props__.__dict__["pi_image_storage_pool"] = pi_image_storage_pool
            __props__.__dict__["pi_image_storage_type"] = pi_image_storage_type
            __props__.__dict__["pi_user_tags"] = pi_user_tags
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["crn"] = None
            __props__.__dict__["image_id"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["piImageAccessKey", "piImageSecretKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(PiImage, __self__).__init__(
            'ibm:index/piImage:PiImage',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            ibm_pi_image_id: Optional[pulumi.Input[_builtins.str]] = None,
            image_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_affinity_instance: Optional[pulumi.Input[_builtins.str]] = None,
            pi_affinity_policy: Optional[pulumi.Input[_builtins.str]] = None,
            pi_affinity_volume: Optional[pulumi.Input[_builtins.str]] = None,
            pi_anti_affinity_instances: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            pi_anti_affinity_volumes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_image_access_key: Optional[pulumi.Input[_builtins.str]] = None,
            pi_image_bucket_access: Optional[pulumi.Input[_builtins.str]] = None,
            pi_image_bucket_file_name: Optional[pulumi.Input[_builtins.str]] = None,
            pi_image_bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
            pi_image_bucket_region: Optional[pulumi.Input[_builtins.str]] = None,
            pi_image_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_image_import_details: Optional[pulumi.Input[Union['PiImagePiImageImportDetailsArgs', 'PiImagePiImageImportDetailsArgsDict']]] = None,
            pi_image_name: Optional[pulumi.Input[_builtins.str]] = None,
            pi_image_secret_key: Optional[pulumi.Input[_builtins.str]] = None,
            pi_image_storage_pool: Optional[pulumi.Input[_builtins.str]] = None,
            pi_image_storage_type: Optional[pulumi.Input[_builtins.str]] = None,
            pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            timeouts: Optional[pulumi.Input[Union['PiImageTimeoutsArgs', 'PiImageTimeoutsArgsDict']]] = None) -> 'PiImage':
        """
        Get an existing PiImage resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] crn: The CRN of this resource.
        :param pulumi.Input[_builtins.str] image_id: Image ID
        :param pulumi.Input[_builtins.str] pi_affinity_instance: PVM Instance (ID or Name) to base storage affinity policy against; required if requesting storage affinity and
               pi_affinity_volume is not provided
        :param pulumi.Input[_builtins.str] pi_affinity_policy: Affinity policy for image; ignored if pi_image_storage_pool provided; for policy affinity requires one of
               pi_affinity_instance or pi_affinity_volume to be specified; for policy anti-affinity requires one of
               pi_anti_affinity_instances or pi_anti_affinity_volumes to be specified
        :param pulumi.Input[_builtins.str] pi_affinity_volume: Volume (ID or Name) to base storage affinity policy against; required if requesting affinity and pi_affinity_instance is
               not provided
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_anti_affinity_instances: List of pvmInstances to base storage anti-affinity policy against; required if requesting anti-affinity and
               pi_anti_affinity_volumes is not provided
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_anti_affinity_volumes: List of volumes to base storage anti-affinity policy against; required if requesting anti-affinity and
               pi_anti_affinity_instances is not provided
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_image_access_key: Cloud Object Storage access key; required for buckets with private access
        :param pulumi.Input[_builtins.str] pi_image_bucket_access: Indicates if the bucket has public or private access
        :param pulumi.Input[_builtins.str] pi_image_bucket_file_name: Cloud Object Storage image filename
        :param pulumi.Input[_builtins.str] pi_image_bucket_name: Cloud Object Storage bucket name; bucket-name[/optional/folder]
        :param pulumi.Input[_builtins.str] pi_image_bucket_region: Cloud Object Storage region
        :param pulumi.Input[_builtins.str] pi_image_id: Instance image id
        :param pulumi.Input[_builtins.str] pi_image_name: Image name
        :param pulumi.Input[_builtins.str] pi_image_secret_key: Cloud Object Storage secret key; required for buckets with private access
        :param pulumi.Input[_builtins.str] pi_image_storage_pool: Storage pool where the image will be loaded, if provided then pi_affinity_policy will be ignored
        :param pulumi.Input[_builtins.str] pi_image_storage_type: Type of storage; If not specified, default is tier3
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: The user tags attached to this resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PiImageState.__new__(_PiImageState)

        __props__.__dict__["crn"] = crn
        __props__.__dict__["ibm_pi_image_id"] = ibm_pi_image_id
        __props__.__dict__["image_id"] = image_id
        __props__.__dict__["pi_affinity_instance"] = pi_affinity_instance
        __props__.__dict__["pi_affinity_policy"] = pi_affinity_policy
        __props__.__dict__["pi_affinity_volume"] = pi_affinity_volume
        __props__.__dict__["pi_anti_affinity_instances"] = pi_anti_affinity_instances
        __props__.__dict__["pi_anti_affinity_volumes"] = pi_anti_affinity_volumes
        __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
        __props__.__dict__["pi_image_access_key"] = pi_image_access_key
        __props__.__dict__["pi_image_bucket_access"] = pi_image_bucket_access
        __props__.__dict__["pi_image_bucket_file_name"] = pi_image_bucket_file_name
        __props__.__dict__["pi_image_bucket_name"] = pi_image_bucket_name
        __props__.__dict__["pi_image_bucket_region"] = pi_image_bucket_region
        __props__.__dict__["pi_image_id"] = pi_image_id
        __props__.__dict__["pi_image_import_details"] = pi_image_import_details
        __props__.__dict__["pi_image_name"] = pi_image_name
        __props__.__dict__["pi_image_secret_key"] = pi_image_secret_key
        __props__.__dict__["pi_image_storage_pool"] = pi_image_storage_pool
        __props__.__dict__["pi_image_storage_type"] = pi_image_storage_type
        __props__.__dict__["pi_user_tags"] = pi_user_tags
        __props__.__dict__["timeouts"] = timeouts
        return PiImage(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The CRN of this resource.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="ibmPiImageId")
    def ibm_pi_image_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "ibm_pi_image_id")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Output[_builtins.str]:
        """
        Image ID
        """
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="piAffinityInstance")
    def pi_affinity_instance(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        PVM Instance (ID or Name) to base storage affinity policy against; required if requesting storage affinity and
        pi_affinity_volume is not provided
        """
        return pulumi.get(self, "pi_affinity_instance")

    @_builtins.property
    @pulumi.getter(name="piAffinityPolicy")
    def pi_affinity_policy(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Affinity policy for image; ignored if pi_image_storage_pool provided; for policy affinity requires one of
        pi_affinity_instance or pi_affinity_volume to be specified; for policy anti-affinity requires one of
        pi_anti_affinity_instances or pi_anti_affinity_volumes to be specified
        """
        return pulumi.get(self, "pi_affinity_policy")

    @_builtins.property
    @pulumi.getter(name="piAffinityVolume")
    def pi_affinity_volume(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Volume (ID or Name) to base storage affinity policy against; required if requesting affinity and pi_affinity_instance is
        not provided
        """
        return pulumi.get(self, "pi_affinity_volume")

    @_builtins.property
    @pulumi.getter(name="piAntiAffinityInstances")
    def pi_anti_affinity_instances(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of pvmInstances to base storage anti-affinity policy against; required if requesting anti-affinity and
        pi_anti_affinity_volumes is not provided
        """
        return pulumi.get(self, "pi_anti_affinity_instances")

    @_builtins.property
    @pulumi.getter(name="piAntiAffinityVolumes")
    def pi_anti_affinity_volumes(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of volumes to base storage anti-affinity policy against; required if requesting anti-affinity and
        pi_anti_affinity_instances is not provided
        """
        return pulumi.get(self, "pi_anti_affinity_volumes")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piImageAccessKey")
    def pi_image_access_key(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Cloud Object Storage access key; required for buckets with private access
        """
        return pulumi.get(self, "pi_image_access_key")

    @_builtins.property
    @pulumi.getter(name="piImageBucketAccess")
    def pi_image_bucket_access(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Indicates if the bucket has public or private access
        """
        return pulumi.get(self, "pi_image_bucket_access")

    @_builtins.property
    @pulumi.getter(name="piImageBucketFileName")
    def pi_image_bucket_file_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Cloud Object Storage image filename
        """
        return pulumi.get(self, "pi_image_bucket_file_name")

    @_builtins.property
    @pulumi.getter(name="piImageBucketName")
    def pi_image_bucket_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Cloud Object Storage bucket name; bucket-name[/optional/folder]
        """
        return pulumi.get(self, "pi_image_bucket_name")

    @_builtins.property
    @pulumi.getter(name="piImageBucketRegion")
    def pi_image_bucket_region(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Cloud Object Storage region
        """
        return pulumi.get(self, "pi_image_bucket_region")

    @_builtins.property
    @pulumi.getter(name="piImageId")
    def pi_image_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Instance image id
        """
        return pulumi.get(self, "pi_image_id")

    @_builtins.property
    @pulumi.getter(name="piImageImportDetails")
    def pi_image_import_details(self) -> pulumi.Output[Optional['outputs.PiImagePiImageImportDetails']]:
        return pulumi.get(self, "pi_image_import_details")

    @_builtins.property
    @pulumi.getter(name="piImageName")
    def pi_image_name(self) -> pulumi.Output[_builtins.str]:
        """
        Image name
        """
        return pulumi.get(self, "pi_image_name")

    @_builtins.property
    @pulumi.getter(name="piImageSecretKey")
    def pi_image_secret_key(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Cloud Object Storage secret key; required for buckets with private access
        """
        return pulumi.get(self, "pi_image_secret_key")

    @_builtins.property
    @pulumi.getter(name="piImageStoragePool")
    def pi_image_storage_pool(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Storage pool where the image will be loaded, if provided then pi_affinity_policy will be ignored
        """
        return pulumi.get(self, "pi_image_storage_pool")

    @_builtins.property
    @pulumi.getter(name="piImageStorageType")
    def pi_image_storage_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Type of storage; If not specified, default is tier3
        """
        return pulumi.get(self, "pi_image_storage_type")

    @_builtins.property
    @pulumi.getter(name="piUserTags")
    def pi_user_tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The user tags attached to this resource.
        """
        return pulumi.get(self, "pi_user_tags")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.PiImageTimeouts']]:
        return pulumi.get(self, "timeouts")

