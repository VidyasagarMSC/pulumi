# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PiHostGroupArgs', 'PiHostGroup']

@pulumi.input_type
class PiHostGroupArgs:
    def __init__(__self__, *,
                 pi_cloud_instance_id: pulumi.Input[_builtins.str],
                 pi_hosts: pulumi.Input[Sequence[pulumi.Input['PiHostGroupPiHostArgs']]],
                 pi_name: pulumi.Input[_builtins.str],
                 pi_host_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_remove: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_secondaries: Optional[pulumi.Input[Sequence[pulumi.Input['PiHostGroupPiSecondaryArgs']]]] = None,
                 timeouts: Optional[pulumi.Input['PiHostGroupTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a PiHostGroup resource.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[Sequence[pulumi.Input['PiHostGroupPiHostArgs']]] pi_hosts: List of hosts to add to the group.
        :param pulumi.Input[_builtins.str] pi_name: Name of the host group to create.
        :param pulumi.Input[_builtins.str] pi_remove: A workspace ID to stop sharing the host group with.
        :param pulumi.Input[Sequence[pulumi.Input['PiHostGroupPiSecondaryArgs']]] pi_secondaries: List of workspaces to share the host group with.
        """
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        pulumi.set(__self__, "pi_hosts", pi_hosts)
        pulumi.set(__self__, "pi_name", pi_name)
        if pi_host_group_id is not None:
            pulumi.set(__self__, "pi_host_group_id", pi_host_group_id)
        if pi_remove is not None:
            pulumi.set(__self__, "pi_remove", pi_remove)
        if pi_secondaries is not None:
            pulumi.set(__self__, "pi_secondaries", pi_secondaries)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piHosts")
    def pi_hosts(self) -> pulumi.Input[Sequence[pulumi.Input['PiHostGroupPiHostArgs']]]:
        """
        List of hosts to add to the group.
        """
        return pulumi.get(self, "pi_hosts")

    @pi_hosts.setter
    def pi_hosts(self, value: pulumi.Input[Sequence[pulumi.Input['PiHostGroupPiHostArgs']]]):
        pulumi.set(self, "pi_hosts", value)

    @_builtins.property
    @pulumi.getter(name="piName")
    def pi_name(self) -> pulumi.Input[_builtins.str]:
        """
        Name of the host group to create.
        """
        return pulumi.get(self, "pi_name")

    @pi_name.setter
    def pi_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_name", value)

    @_builtins.property
    @pulumi.getter(name="piHostGroupId")
    def pi_host_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_host_group_id")

    @pi_host_group_id.setter
    def pi_host_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_host_group_id", value)

    @_builtins.property
    @pulumi.getter(name="piRemove")
    def pi_remove(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A workspace ID to stop sharing the host group with.
        """
        return pulumi.get(self, "pi_remove")

    @pi_remove.setter
    def pi_remove(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_remove", value)

    @_builtins.property
    @pulumi.getter(name="piSecondaries")
    def pi_secondaries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PiHostGroupPiSecondaryArgs']]]]:
        """
        List of workspaces to share the host group with.
        """
        return pulumi.get(self, "pi_secondaries")

    @pi_secondaries.setter
    def pi_secondaries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PiHostGroupPiSecondaryArgs']]]]):
        pulumi.set(self, "pi_secondaries", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiHostGroupTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiHostGroupTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _PiHostGroupState:
    def __init__(__self__, *,
                 creation_date: Optional[pulumi.Input[_builtins.str]] = None,
                 host_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_host_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_hosts: Optional[pulumi.Input[Sequence[pulumi.Input['PiHostGroupPiHostArgs']]]] = None,
                 pi_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_remove: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_secondaries: Optional[pulumi.Input[Sequence[pulumi.Input['PiHostGroupPiSecondaryArgs']]]] = None,
                 primary: Optional[pulumi.Input[_builtins.str]] = None,
                 secondaries: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['PiHostGroupTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering PiHostGroup resources.
        :param pulumi.Input[_builtins.str] creation_date: Date/Time of host group creation.
        :param pulumi.Input[_builtins.str] host_group_id: Host group ID.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] hosts: List of hosts.
        :param pulumi.Input[_builtins.str] name: Name of the host group.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[Sequence[pulumi.Input['PiHostGroupPiHostArgs']]] pi_hosts: List of hosts to add to the group.
        :param pulumi.Input[_builtins.str] pi_name: Name of the host group to create.
        :param pulumi.Input[_builtins.str] pi_remove: A workspace ID to stop sharing the host group with.
        :param pulumi.Input[Sequence[pulumi.Input['PiHostGroupPiSecondaryArgs']]] pi_secondaries: List of workspaces to share the host group with.
        :param pulumi.Input[_builtins.str] primary: ID of the workspace owning the host group.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] secondaries: IDs of workspaces the host group has been shared with.
        """
        if creation_date is not None:
            pulumi.set(__self__, "creation_date", creation_date)
        if host_group_id is not None:
            pulumi.set(__self__, "host_group_id", host_group_id)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pi_cloud_instance_id is not None:
            pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_host_group_id is not None:
            pulumi.set(__self__, "pi_host_group_id", pi_host_group_id)
        if pi_hosts is not None:
            pulumi.set(__self__, "pi_hosts", pi_hosts)
        if pi_name is not None:
            pulumi.set(__self__, "pi_name", pi_name)
        if pi_remove is not None:
            pulumi.set(__self__, "pi_remove", pi_remove)
        if pi_secondaries is not None:
            pulumi.set(__self__, "pi_secondaries", pi_secondaries)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if secondaries is not None:
            pulumi.set(__self__, "secondaries", secondaries)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Date/Time of host group creation.
        """
        return pulumi.get(self, "creation_date")

    @creation_date.setter
    def creation_date(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "creation_date", value)

    @_builtins.property
    @pulumi.getter(name="hostGroupId")
    def host_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Host group ID.
        """
        return pulumi.get(self, "host_group_id")

    @host_group_id.setter
    def host_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_group_id", value)

    @_builtins.property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of hosts.
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "hosts", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the host group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piHostGroupId")
    def pi_host_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_host_group_id")

    @pi_host_group_id.setter
    def pi_host_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_host_group_id", value)

    @_builtins.property
    @pulumi.getter(name="piHosts")
    def pi_hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PiHostGroupPiHostArgs']]]]:
        """
        List of hosts to add to the group.
        """
        return pulumi.get(self, "pi_hosts")

    @pi_hosts.setter
    def pi_hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PiHostGroupPiHostArgs']]]]):
        pulumi.set(self, "pi_hosts", value)

    @_builtins.property
    @pulumi.getter(name="piName")
    def pi_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the host group to create.
        """
        return pulumi.get(self, "pi_name")

    @pi_name.setter
    def pi_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_name", value)

    @_builtins.property
    @pulumi.getter(name="piRemove")
    def pi_remove(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A workspace ID to stop sharing the host group with.
        """
        return pulumi.get(self, "pi_remove")

    @pi_remove.setter
    def pi_remove(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_remove", value)

    @_builtins.property
    @pulumi.getter(name="piSecondaries")
    def pi_secondaries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PiHostGroupPiSecondaryArgs']]]]:
        """
        List of workspaces to share the host group with.
        """
        return pulumi.get(self, "pi_secondaries")

    @pi_secondaries.setter
    def pi_secondaries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PiHostGroupPiSecondaryArgs']]]]):
        pulumi.set(self, "pi_secondaries", value)

    @_builtins.property
    @pulumi.getter
    def primary(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the workspace owning the host group.
        """
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "primary", value)

    @_builtins.property
    @pulumi.getter
    def secondaries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        IDs of workspaces the host group has been shared with.
        """
        return pulumi.get(self, "secondaries")

    @secondaries.setter
    def secondaries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "secondaries", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiHostGroupTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiHostGroupTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/piHostGroup:PiHostGroup")
class PiHostGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_host_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PiHostGroupPiHostArgs', 'PiHostGroupPiHostArgsDict']]]]] = None,
                 pi_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_remove: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_secondaries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PiHostGroupPiSecondaryArgs', 'PiHostGroupPiSecondaryArgsDict']]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiHostGroupTimeoutsArgs', 'PiHostGroupTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a PiHostGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PiHostGroupPiHostArgs', 'PiHostGroupPiHostArgsDict']]]] pi_hosts: List of hosts to add to the group.
        :param pulumi.Input[_builtins.str] pi_name: Name of the host group to create.
        :param pulumi.Input[_builtins.str] pi_remove: A workspace ID to stop sharing the host group with.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PiHostGroupPiSecondaryArgs', 'PiHostGroupPiSecondaryArgsDict']]]] pi_secondaries: List of workspaces to share the host group with.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PiHostGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PiHostGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PiHostGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PiHostGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_host_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PiHostGroupPiHostArgs', 'PiHostGroupPiHostArgsDict']]]]] = None,
                 pi_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_remove: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_secondaries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PiHostGroupPiSecondaryArgs', 'PiHostGroupPiSecondaryArgsDict']]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiHostGroupTimeoutsArgs', 'PiHostGroupTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PiHostGroupArgs.__new__(PiHostGroupArgs)

            if pi_cloud_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'pi_cloud_instance_id'")
            __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
            __props__.__dict__["pi_host_group_id"] = pi_host_group_id
            if pi_hosts is None and not opts.urn:
                raise TypeError("Missing required property 'pi_hosts'")
            __props__.__dict__["pi_hosts"] = pi_hosts
            if pi_name is None and not opts.urn:
                raise TypeError("Missing required property 'pi_name'")
            __props__.__dict__["pi_name"] = pi_name
            __props__.__dict__["pi_remove"] = pi_remove
            __props__.__dict__["pi_secondaries"] = pi_secondaries
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["creation_date"] = None
            __props__.__dict__["host_group_id"] = None
            __props__.__dict__["hosts"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["primary"] = None
            __props__.__dict__["secondaries"] = None
        super(PiHostGroup, __self__).__init__(
            'ibm:index/piHostGroup:PiHostGroup',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            creation_date: Optional[pulumi.Input[_builtins.str]] = None,
            host_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            hosts: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_host_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PiHostGroupPiHostArgs', 'PiHostGroupPiHostArgsDict']]]]] = None,
            pi_name: Optional[pulumi.Input[_builtins.str]] = None,
            pi_remove: Optional[pulumi.Input[_builtins.str]] = None,
            pi_secondaries: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PiHostGroupPiSecondaryArgs', 'PiHostGroupPiSecondaryArgsDict']]]]] = None,
            primary: Optional[pulumi.Input[_builtins.str]] = None,
            secondaries: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            timeouts: Optional[pulumi.Input[Union['PiHostGroupTimeoutsArgs', 'PiHostGroupTimeoutsArgsDict']]] = None) -> 'PiHostGroup':
        """
        Get an existing PiHostGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] creation_date: Date/Time of host group creation.
        :param pulumi.Input[_builtins.str] host_group_id: Host group ID.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] hosts: List of hosts.
        :param pulumi.Input[_builtins.str] name: Name of the host group.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PiHostGroupPiHostArgs', 'PiHostGroupPiHostArgsDict']]]] pi_hosts: List of hosts to add to the group.
        :param pulumi.Input[_builtins.str] pi_name: Name of the host group to create.
        :param pulumi.Input[_builtins.str] pi_remove: A workspace ID to stop sharing the host group with.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PiHostGroupPiSecondaryArgs', 'PiHostGroupPiSecondaryArgsDict']]]] pi_secondaries: List of workspaces to share the host group with.
        :param pulumi.Input[_builtins.str] primary: ID of the workspace owning the host group.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] secondaries: IDs of workspaces the host group has been shared with.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PiHostGroupState.__new__(_PiHostGroupState)

        __props__.__dict__["creation_date"] = creation_date
        __props__.__dict__["host_group_id"] = host_group_id
        __props__.__dict__["hosts"] = hosts
        __props__.__dict__["name"] = name
        __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
        __props__.__dict__["pi_host_group_id"] = pi_host_group_id
        __props__.__dict__["pi_hosts"] = pi_hosts
        __props__.__dict__["pi_name"] = pi_name
        __props__.__dict__["pi_remove"] = pi_remove
        __props__.__dict__["pi_secondaries"] = pi_secondaries
        __props__.__dict__["primary"] = primary
        __props__.__dict__["secondaries"] = secondaries
        __props__.__dict__["timeouts"] = timeouts
        return PiHostGroup(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> pulumi.Output[_builtins.str]:
        """
        Date/Time of host group creation.
        """
        return pulumi.get(self, "creation_date")

    @_builtins.property
    @pulumi.getter(name="hostGroupId")
    def host_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        Host group ID.
        """
        return pulumi.get(self, "host_group_id")

    @_builtins.property
    @pulumi.getter
    def hosts(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of hosts.
        """
        return pulumi.get(self, "hosts")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the host group.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piHostGroupId")
    def pi_host_group_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "pi_host_group_id")

    @_builtins.property
    @pulumi.getter(name="piHosts")
    def pi_hosts(self) -> pulumi.Output[Sequence['outputs.PiHostGroupPiHost']]:
        """
        List of hosts to add to the group.
        """
        return pulumi.get(self, "pi_hosts")

    @_builtins.property
    @pulumi.getter(name="piName")
    def pi_name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the host group to create.
        """
        return pulumi.get(self, "pi_name")

    @_builtins.property
    @pulumi.getter(name="piRemove")
    def pi_remove(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        A workspace ID to stop sharing the host group with.
        """
        return pulumi.get(self, "pi_remove")

    @_builtins.property
    @pulumi.getter(name="piSecondaries")
    def pi_secondaries(self) -> pulumi.Output[Optional[Sequence['outputs.PiHostGroupPiSecondary']]]:
        """
        List of workspaces to share the host group with.
        """
        return pulumi.get(self, "pi_secondaries")

    @_builtins.property
    @pulumi.getter
    def primary(self) -> pulumi.Output[_builtins.str]:
        """
        ID of the workspace owning the host group.
        """
        return pulumi.get(self, "primary")

    @_builtins.property
    @pulumi.getter
    def secondaries(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        IDs of workspaces the host group has been shared with.
        """
        return pulumi.get(self, "secondaries")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.PiHostGroupTimeouts']]:
        return pulumi.get(self, "timeouts")

