# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetConfigAggregatorResourceCollectionStatusResult',
    'AwaitableGetConfigAggregatorResourceCollectionStatusResult',
    'get_config_aggregator_resource_collection_status',
    'get_config_aggregator_resource_collection_status_output',
]

@pulumi.output_type
class GetConfigAggregatorResourceCollectionStatusResult:
    """
    A collection of values returned by getConfigAggregatorResourceCollectionStatus.
    """
    def __init__(__self__, id=None, instance_id=None, last_config_refresh_time=None, region=None, status=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if last_config_refresh_time and not isinstance(last_config_refresh_time, str):
            raise TypeError("Expected argument 'last_config_refresh_time' to be a str")
        pulumi.set(__self__, "last_config_refresh_time", last_config_refresh_time)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="lastConfigRefreshTime")
    def last_config_refresh_time(self) -> _builtins.str:
        return pulumi.get(self, "last_config_refresh_time")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")


class AwaitableGetConfigAggregatorResourceCollectionStatusResult(GetConfigAggregatorResourceCollectionStatusResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConfigAggregatorResourceCollectionStatusResult(
            id=self.id,
            instance_id=self.instance_id,
            last_config_refresh_time=self.last_config_refresh_time,
            region=self.region,
            status=self.status)


def get_config_aggregator_resource_collection_status(id: Optional[_builtins.str] = None,
                                                     instance_id: Optional[_builtins.str] = None,
                                                     region: Optional[_builtins.str] = None,
                                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConfigAggregatorResourceCollectionStatusResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getConfigAggregatorResourceCollectionStatus:getConfigAggregatorResourceCollectionStatus', __args__, opts=opts, typ=GetConfigAggregatorResourceCollectionStatusResult, package_ref=_utilities.get_package()).value

    return AwaitableGetConfigAggregatorResourceCollectionStatusResult(
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        last_config_refresh_time=pulumi.get(__ret__, 'last_config_refresh_time'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'))
def get_config_aggregator_resource_collection_status_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                            region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetConfigAggregatorResourceCollectionStatusResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getConfigAggregatorResourceCollectionStatus:getConfigAggregatorResourceCollectionStatus', __args__, opts=opts, typ=GetConfigAggregatorResourceCollectionStatusResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetConfigAggregatorResourceCollectionStatusResult(
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        last_config_refresh_time=pulumi.get(__response__, 'last_config_refresh_time'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status')))
