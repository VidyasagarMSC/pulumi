# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetDatabasePointInTimeRecoveryResult',
    'AwaitableGetDatabasePointInTimeRecoveryResult',
    'get_database_point_in_time_recovery',
    'get_database_point_in_time_recovery_output',
]

@pulumi.output_type
class GetDatabasePointInTimeRecoveryResult:
    """
    A collection of values returned by getDatabasePointInTimeRecovery.
    """
    def __init__(__self__, deployment_id=None, earliest_point_in_time_recovery_time=None, id=None):
        if deployment_id and not isinstance(deployment_id, str):
            raise TypeError("Expected argument 'deployment_id' to be a str")
        pulumi.set(__self__, "deployment_id", deployment_id)
        if earliest_point_in_time_recovery_time and not isinstance(earliest_point_in_time_recovery_time, str):
            raise TypeError("Expected argument 'earliest_point_in_time_recovery_time' to be a str")
        pulumi.set(__self__, "earliest_point_in_time_recovery_time", earliest_point_in_time_recovery_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> _builtins.str:
        return pulumi.get(self, "deployment_id")

    @_builtins.property
    @pulumi.getter(name="earliestPointInTimeRecoveryTime")
    def earliest_point_in_time_recovery_time(self) -> _builtins.str:
        return pulumi.get(self, "earliest_point_in_time_recovery_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")


class AwaitableGetDatabasePointInTimeRecoveryResult(GetDatabasePointInTimeRecoveryResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDatabasePointInTimeRecoveryResult(
            deployment_id=self.deployment_id,
            earliest_point_in_time_recovery_time=self.earliest_point_in_time_recovery_time,
            id=self.id)


def get_database_point_in_time_recovery(deployment_id: Optional[_builtins.str] = None,
                                        id: Optional[_builtins.str] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDatabasePointInTimeRecoveryResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['deploymentId'] = deployment_id
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getDatabasePointInTimeRecovery:getDatabasePointInTimeRecovery', __args__, opts=opts, typ=GetDatabasePointInTimeRecoveryResult, package_ref=_utilities.get_package()).value

    return AwaitableGetDatabasePointInTimeRecoveryResult(
        deployment_id=pulumi.get(__ret__, 'deployment_id'),
        earliest_point_in_time_recovery_time=pulumi.get(__ret__, 'earliest_point_in_time_recovery_time'),
        id=pulumi.get(__ret__, 'id'))
def get_database_point_in_time_recovery_output(deployment_id: Optional[pulumi.Input[_builtins.str]] = None,
                                               id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDatabasePointInTimeRecoveryResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['deploymentId'] = deployment_id
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getDatabasePointInTimeRecovery:getDatabasePointInTimeRecovery', __args__, opts=opts, typ=GetDatabasePointInTimeRecoveryResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetDatabasePointInTimeRecoveryResult(
        deployment_id=pulumi.get(__response__, 'deployment_id'),
        earliest_point_in_time_recovery_time=pulumi.get(__response__, 'earliest_point_in_time_recovery_time'),
        id=pulumi.get(__response__, 'id')))
