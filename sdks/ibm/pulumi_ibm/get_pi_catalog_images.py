# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetPiCatalogImagesResult',
    'AwaitableGetPiCatalogImagesResult',
    'get_pi_catalog_images',
    'get_pi_catalog_images_output',
]

@pulumi.output_type
class GetPiCatalogImagesResult:
    """
    A collection of values returned by getPiCatalogImages.
    """
    def __init__(__self__, id=None, images=None, pi_cloud_instance_id=None, sap=None, vtl=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if images and not isinstance(images, list):
            raise TypeError("Expected argument 'images' to be a list")
        pulumi.set(__self__, "images", images)
        if pi_cloud_instance_id and not isinstance(pi_cloud_instance_id, str):
            raise TypeError("Expected argument 'pi_cloud_instance_id' to be a str")
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if sap and not isinstance(sap, bool):
            raise TypeError("Expected argument 'sap' to be a bool")
        pulumi.set(__self__, "sap", sap)
        if vtl and not isinstance(vtl, bool):
            raise TypeError("Expected argument 'vtl' to be a bool")
        pulumi.set(__self__, "vtl", vtl)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def images(self) -> Sequence['outputs.GetPiCatalogImagesImageResult']:
        return pulumi.get(self, "images")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter
    def sap(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "sap")

    @_builtins.property
    @pulumi.getter
    def vtl(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "vtl")


class AwaitableGetPiCatalogImagesResult(GetPiCatalogImagesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPiCatalogImagesResult(
            id=self.id,
            images=self.images,
            pi_cloud_instance_id=self.pi_cloud_instance_id,
            sap=self.sap,
            vtl=self.vtl)


def get_pi_catalog_images(id: Optional[_builtins.str] = None,
                          pi_cloud_instance_id: Optional[_builtins.str] = None,
                          sap: Optional[_builtins.bool] = None,
                          vtl: Optional[_builtins.bool] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPiCatalogImagesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['sap'] = sap
    __args__['vtl'] = vtl
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getPiCatalogImages:getPiCatalogImages', __args__, opts=opts, typ=GetPiCatalogImagesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetPiCatalogImagesResult(
        id=pulumi.get(__ret__, 'id'),
        images=pulumi.get(__ret__, 'images'),
        pi_cloud_instance_id=pulumi.get(__ret__, 'pi_cloud_instance_id'),
        sap=pulumi.get(__ret__, 'sap'),
        vtl=pulumi.get(__ret__, 'vtl'))
def get_pi_catalog_images_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                 sap: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                 vtl: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPiCatalogImagesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['sap'] = sap
    __args__['vtl'] = vtl
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getPiCatalogImages:getPiCatalogImages', __args__, opts=opts, typ=GetPiCatalogImagesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetPiCatalogImagesResult(
        id=pulumi.get(__response__, 'id'),
        images=pulumi.get(__response__, 'images'),
        pi_cloud_instance_id=pulumi.get(__response__, 'pi_cloud_instance_id'),
        sap=pulumi.get(__response__, 'sap'),
        vtl=pulumi.get(__response__, 'vtl')))
