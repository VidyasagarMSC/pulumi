# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsBareMetalServerProfileResult',
    'AwaitableGetIsBareMetalServerProfileResult',
    'get_is_bare_metal_server_profile',
    'get_is_bare_metal_server_profile_output',
]

@pulumi.output_type
class GetIsBareMetalServerProfileResult:
    """
    A collection of values returned by getIsBareMetalServerProfile.
    """
    def __init__(__self__, bandwidths=None, console_types=None, cpu_architectures=None, cpu_core_counts=None, cpu_socket_counts=None, disks=None, family=None, href=None, id=None, memories=None, name=None, network_attachment_counts=None, network_interface_counts=None, os_architectures=None, reservation_terms=None, resource_type=None, supported_trusted_platform_module_modes=None, virtual_network_interfaces_supporteds=None):
        if bandwidths and not isinstance(bandwidths, list):
            raise TypeError("Expected argument 'bandwidths' to be a list")
        pulumi.set(__self__, "bandwidths", bandwidths)
        if console_types and not isinstance(console_types, list):
            raise TypeError("Expected argument 'console_types' to be a list")
        pulumi.set(__self__, "console_types", console_types)
        if cpu_architectures and not isinstance(cpu_architectures, list):
            raise TypeError("Expected argument 'cpu_architectures' to be a list")
        pulumi.set(__self__, "cpu_architectures", cpu_architectures)
        if cpu_core_counts and not isinstance(cpu_core_counts, list):
            raise TypeError("Expected argument 'cpu_core_counts' to be a list")
        pulumi.set(__self__, "cpu_core_counts", cpu_core_counts)
        if cpu_socket_counts and not isinstance(cpu_socket_counts, list):
            raise TypeError("Expected argument 'cpu_socket_counts' to be a list")
        pulumi.set(__self__, "cpu_socket_counts", cpu_socket_counts)
        if disks and not isinstance(disks, list):
            raise TypeError("Expected argument 'disks' to be a list")
        pulumi.set(__self__, "disks", disks)
        if family and not isinstance(family, str):
            raise TypeError("Expected argument 'family' to be a str")
        pulumi.set(__self__, "family", family)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if memories and not isinstance(memories, list):
            raise TypeError("Expected argument 'memories' to be a list")
        pulumi.set(__self__, "memories", memories)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_attachment_counts and not isinstance(network_attachment_counts, list):
            raise TypeError("Expected argument 'network_attachment_counts' to be a list")
        pulumi.set(__self__, "network_attachment_counts", network_attachment_counts)
        if network_interface_counts and not isinstance(network_interface_counts, list):
            raise TypeError("Expected argument 'network_interface_counts' to be a list")
        pulumi.set(__self__, "network_interface_counts", network_interface_counts)
        if os_architectures and not isinstance(os_architectures, list):
            raise TypeError("Expected argument 'os_architectures' to be a list")
        pulumi.set(__self__, "os_architectures", os_architectures)
        if reservation_terms and not isinstance(reservation_terms, list):
            raise TypeError("Expected argument 'reservation_terms' to be a list")
        pulumi.set(__self__, "reservation_terms", reservation_terms)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if supported_trusted_platform_module_modes and not isinstance(supported_trusted_platform_module_modes, list):
            raise TypeError("Expected argument 'supported_trusted_platform_module_modes' to be a list")
        pulumi.set(__self__, "supported_trusted_platform_module_modes", supported_trusted_platform_module_modes)
        if virtual_network_interfaces_supporteds and not isinstance(virtual_network_interfaces_supporteds, list):
            raise TypeError("Expected argument 'virtual_network_interfaces_supporteds' to be a list")
        pulumi.set(__self__, "virtual_network_interfaces_supporteds", virtual_network_interfaces_supporteds)

    @_builtins.property
    @pulumi.getter
    def bandwidths(self) -> Sequence['outputs.GetIsBareMetalServerProfileBandwidthResult']:
        return pulumi.get(self, "bandwidths")

    @_builtins.property
    @pulumi.getter(name="consoleTypes")
    def console_types(self) -> Sequence['outputs.GetIsBareMetalServerProfileConsoleTypeResult']:
        return pulumi.get(self, "console_types")

    @_builtins.property
    @pulumi.getter(name="cpuArchitectures")
    def cpu_architectures(self) -> Sequence['outputs.GetIsBareMetalServerProfileCpuArchitectureResult']:
        return pulumi.get(self, "cpu_architectures")

    @_builtins.property
    @pulumi.getter(name="cpuCoreCounts")
    def cpu_core_counts(self) -> Sequence['outputs.GetIsBareMetalServerProfileCpuCoreCountResult']:
        return pulumi.get(self, "cpu_core_counts")

    @_builtins.property
    @pulumi.getter(name="cpuSocketCounts")
    def cpu_socket_counts(self) -> Sequence['outputs.GetIsBareMetalServerProfileCpuSocketCountResult']:
        return pulumi.get(self, "cpu_socket_counts")

    @_builtins.property
    @pulumi.getter
    def disks(self) -> Sequence['outputs.GetIsBareMetalServerProfileDiskResult']:
        return pulumi.get(self, "disks")

    @_builtins.property
    @pulumi.getter
    def family(self) -> _builtins.str:
        return pulumi.get(self, "family")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def memories(self) -> Sequence['outputs.GetIsBareMetalServerProfileMemoryResult']:
        return pulumi.get(self, "memories")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkAttachmentCounts")
    def network_attachment_counts(self) -> Sequence['outputs.GetIsBareMetalServerProfileNetworkAttachmentCountResult']:
        return pulumi.get(self, "network_attachment_counts")

    @_builtins.property
    @pulumi.getter(name="networkInterfaceCounts")
    def network_interface_counts(self) -> Sequence['outputs.GetIsBareMetalServerProfileNetworkInterfaceCountResult']:
        return pulumi.get(self, "network_interface_counts")

    @_builtins.property
    @pulumi.getter(name="osArchitectures")
    def os_architectures(self) -> Sequence['outputs.GetIsBareMetalServerProfileOsArchitectureResult']:
        return pulumi.get(self, "os_architectures")

    @_builtins.property
    @pulumi.getter(name="reservationTerms")
    def reservation_terms(self) -> Sequence['outputs.GetIsBareMetalServerProfileReservationTermResult']:
        return pulumi.get(self, "reservation_terms")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="supportedTrustedPlatformModuleModes")
    def supported_trusted_platform_module_modes(self) -> Sequence['outputs.GetIsBareMetalServerProfileSupportedTrustedPlatformModuleModeResult']:
        return pulumi.get(self, "supported_trusted_platform_module_modes")

    @_builtins.property
    @pulumi.getter(name="virtualNetworkInterfacesSupporteds")
    def virtual_network_interfaces_supporteds(self) -> Sequence['outputs.GetIsBareMetalServerProfileVirtualNetworkInterfacesSupportedResult']:
        return pulumi.get(self, "virtual_network_interfaces_supporteds")


class AwaitableGetIsBareMetalServerProfileResult(GetIsBareMetalServerProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsBareMetalServerProfileResult(
            bandwidths=self.bandwidths,
            console_types=self.console_types,
            cpu_architectures=self.cpu_architectures,
            cpu_core_counts=self.cpu_core_counts,
            cpu_socket_counts=self.cpu_socket_counts,
            disks=self.disks,
            family=self.family,
            href=self.href,
            id=self.id,
            memories=self.memories,
            name=self.name,
            network_attachment_counts=self.network_attachment_counts,
            network_interface_counts=self.network_interface_counts,
            os_architectures=self.os_architectures,
            reservation_terms=self.reservation_terms,
            resource_type=self.resource_type,
            supported_trusted_platform_module_modes=self.supported_trusted_platform_module_modes,
            virtual_network_interfaces_supporteds=self.virtual_network_interfaces_supporteds)


def get_is_bare_metal_server_profile(id: Optional[_builtins.str] = None,
                                     name: Optional[_builtins.str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsBareMetalServerProfileResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsBareMetalServerProfile:getIsBareMetalServerProfile', __args__, opts=opts, typ=GetIsBareMetalServerProfileResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsBareMetalServerProfileResult(
        bandwidths=pulumi.get(__ret__, 'bandwidths'),
        console_types=pulumi.get(__ret__, 'console_types'),
        cpu_architectures=pulumi.get(__ret__, 'cpu_architectures'),
        cpu_core_counts=pulumi.get(__ret__, 'cpu_core_counts'),
        cpu_socket_counts=pulumi.get(__ret__, 'cpu_socket_counts'),
        disks=pulumi.get(__ret__, 'disks'),
        family=pulumi.get(__ret__, 'family'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        memories=pulumi.get(__ret__, 'memories'),
        name=pulumi.get(__ret__, 'name'),
        network_attachment_counts=pulumi.get(__ret__, 'network_attachment_counts'),
        network_interface_counts=pulumi.get(__ret__, 'network_interface_counts'),
        os_architectures=pulumi.get(__ret__, 'os_architectures'),
        reservation_terms=pulumi.get(__ret__, 'reservation_terms'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        supported_trusted_platform_module_modes=pulumi.get(__ret__, 'supported_trusted_platform_module_modes'),
        virtual_network_interfaces_supporteds=pulumi.get(__ret__, 'virtual_network_interfaces_supporteds'))
def get_is_bare_metal_server_profile_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            name: Optional[pulumi.Input[_builtins.str]] = None,
                                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsBareMetalServerProfileResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsBareMetalServerProfile:getIsBareMetalServerProfile', __args__, opts=opts, typ=GetIsBareMetalServerProfileResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsBareMetalServerProfileResult(
        bandwidths=pulumi.get(__response__, 'bandwidths'),
        console_types=pulumi.get(__response__, 'console_types'),
        cpu_architectures=pulumi.get(__response__, 'cpu_architectures'),
        cpu_core_counts=pulumi.get(__response__, 'cpu_core_counts'),
        cpu_socket_counts=pulumi.get(__response__, 'cpu_socket_counts'),
        disks=pulumi.get(__response__, 'disks'),
        family=pulumi.get(__response__, 'family'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        memories=pulumi.get(__response__, 'memories'),
        name=pulumi.get(__response__, 'name'),
        network_attachment_counts=pulumi.get(__response__, 'network_attachment_counts'),
        network_interface_counts=pulumi.get(__response__, 'network_interface_counts'),
        os_architectures=pulumi.get(__response__, 'os_architectures'),
        reservation_terms=pulumi.get(__response__, 'reservation_terms'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        supported_trusted_platform_module_modes=pulumi.get(__response__, 'supported_trusted_platform_module_modes'),
        virtual_network_interfaces_supporteds=pulumi.get(__response__, 'virtual_network_interfaces_supporteds')))
