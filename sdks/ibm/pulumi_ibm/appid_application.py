# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['AppidApplicationArgs', 'AppidApplication']

@pulumi.input_type
class AppidApplicationArgs:
    def __init__(__self__, *,
                 tenant_id: pulumi.Input[_builtins.str],
                 appid_application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AppidApplication resource.
        :param pulumi.Input[_builtins.str] tenant_id: The service `tenantId`
        :param pulumi.Input[_builtins.str] name: The application name to be registered. Application name cannot exceed 50 characters.
        :param pulumi.Input[_builtins.str] type: The type of application to be registered. Allowed types are `regularwebapp` and `singlepageapp`, default is
               `regularwebapp`.
        """
        pulumi.set(__self__, "tenant_id", tenant_id)
        if appid_application_id is not None:
            pulumi.set(__self__, "appid_application_id", appid_application_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[_builtins.str]:
        """
        The service `tenantId`
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "tenant_id", value)

    @_builtins.property
    @pulumi.getter(name="appidApplicationId")
    def appid_application_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "appid_application_id")

    @appid_application_id.setter
    def appid_application_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "appid_application_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The application name to be registered. Application name cannot exceed 50 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of application to be registered. Allowed types are `regularwebapp` and `singlepageapp`, default is
        `regularwebapp`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _AppidApplicationState:
    def __init__(__self__, *,
                 appid_application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 client_id: Optional[pulumi.Input[_builtins.str]] = None,
                 discovery_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 oauth_server_url: Optional[pulumi.Input[_builtins.str]] = None,
                 profiles_url: Optional[pulumi.Input[_builtins.str]] = None,
                 secret: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AppidApplication resources.
        :param pulumi.Input[_builtins.str] client_id: The `client_id` is a public identifier for applications
        :param pulumi.Input[_builtins.str] discovery_endpoint: This URL returns OAuth Authorization Server Metadata
        :param pulumi.Input[_builtins.str] name: The application name to be registered. Application name cannot exceed 50 characters.
        :param pulumi.Input[_builtins.str] oauth_server_url: Base URL for common OAuth endpoints, like `/authorization`, `/token` and `/publickeys`
        :param pulumi.Input[_builtins.str] secret: The `secret` is a secret known only to the application and the authorization server
        :param pulumi.Input[_builtins.str] tenant_id: The service `tenantId`
        :param pulumi.Input[_builtins.str] type: The type of application to be registered. Allowed types are `regularwebapp` and `singlepageapp`, default is
               `regularwebapp`.
        """
        if appid_application_id is not None:
            pulumi.set(__self__, "appid_application_id", appid_application_id)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if discovery_endpoint is not None:
            pulumi.set(__self__, "discovery_endpoint", discovery_endpoint)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oauth_server_url is not None:
            pulumi.set(__self__, "oauth_server_url", oauth_server_url)
        if profiles_url is not None:
            pulumi.set(__self__, "profiles_url", profiles_url)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="appidApplicationId")
    def appid_application_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "appid_application_id")

    @appid_application_id.setter
    def appid_application_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "appid_application_id", value)

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The `client_id` is a public identifier for applications
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "client_id", value)

    @_builtins.property
    @pulumi.getter(name="discoveryEndpoint")
    def discovery_endpoint(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        This URL returns OAuth Authorization Server Metadata
        """
        return pulumi.get(self, "discovery_endpoint")

    @discovery_endpoint.setter
    def discovery_endpoint(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "discovery_endpoint", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The application name to be registered. Application name cannot exceed 50 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="oauthServerUrl")
    def oauth_server_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Base URL for common OAuth endpoints, like `/authorization`, `/token` and `/publickeys`
        """
        return pulumi.get(self, "oauth_server_url")

    @oauth_server_url.setter
    def oauth_server_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "oauth_server_url", value)

    @_builtins.property
    @pulumi.getter(name="profilesUrl")
    def profiles_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "profiles_url")

    @profiles_url.setter
    def profiles_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "profiles_url", value)

    @_builtins.property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The `secret` is a secret known only to the application and the authorization server
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The service `tenantId`
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tenant_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of application to be registered. Allowed types are `regularwebapp` and `singlepageapp`, default is
        `regularwebapp`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("ibm:index/appidApplication:AppidApplication")
class AppidApplication(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 appid_application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a AppidApplication resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: The application name to be registered. Application name cannot exceed 50 characters.
        :param pulumi.Input[_builtins.str] tenant_id: The service `tenantId`
        :param pulumi.Input[_builtins.str] type: The type of application to be registered. Allowed types are `regularwebapp` and `singlepageapp`, default is
               `regularwebapp`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppidApplicationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AppidApplication resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AppidApplicationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppidApplicationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 appid_application_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppidApplicationArgs.__new__(AppidApplicationArgs)

            __props__.__dict__["appid_application_id"] = appid_application_id
            __props__.__dict__["name"] = name
            if tenant_id is None and not opts.urn:
                raise TypeError("Missing required property 'tenant_id'")
            __props__.__dict__["tenant_id"] = tenant_id
            __props__.__dict__["type"] = type
            __props__.__dict__["client_id"] = None
            __props__.__dict__["discovery_endpoint"] = None
            __props__.__dict__["oauth_server_url"] = None
            __props__.__dict__["profiles_url"] = None
            __props__.__dict__["secret"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["secret"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(AppidApplication, __self__).__init__(
            'ibm:index/appidApplication:AppidApplication',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            appid_application_id: Optional[pulumi.Input[_builtins.str]] = None,
            client_id: Optional[pulumi.Input[_builtins.str]] = None,
            discovery_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            oauth_server_url: Optional[pulumi.Input[_builtins.str]] = None,
            profiles_url: Optional[pulumi.Input[_builtins.str]] = None,
            secret: Optional[pulumi.Input[_builtins.str]] = None,
            tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None) -> 'AppidApplication':
        """
        Get an existing AppidApplication resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] client_id: The `client_id` is a public identifier for applications
        :param pulumi.Input[_builtins.str] discovery_endpoint: This URL returns OAuth Authorization Server Metadata
        :param pulumi.Input[_builtins.str] name: The application name to be registered. Application name cannot exceed 50 characters.
        :param pulumi.Input[_builtins.str] oauth_server_url: Base URL for common OAuth endpoints, like `/authorization`, `/token` and `/publickeys`
        :param pulumi.Input[_builtins.str] secret: The `secret` is a secret known only to the application and the authorization server
        :param pulumi.Input[_builtins.str] tenant_id: The service `tenantId`
        :param pulumi.Input[_builtins.str] type: The type of application to be registered. Allowed types are `regularwebapp` and `singlepageapp`, default is
               `regularwebapp`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppidApplicationState.__new__(_AppidApplicationState)

        __props__.__dict__["appid_application_id"] = appid_application_id
        __props__.__dict__["client_id"] = client_id
        __props__.__dict__["discovery_endpoint"] = discovery_endpoint
        __props__.__dict__["name"] = name
        __props__.__dict__["oauth_server_url"] = oauth_server_url
        __props__.__dict__["profiles_url"] = profiles_url
        __props__.__dict__["secret"] = secret
        __props__.__dict__["tenant_id"] = tenant_id
        __props__.__dict__["type"] = type
        return AppidApplication(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="appidApplicationId")
    def appid_application_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "appid_application_id")

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Output[_builtins.str]:
        """
        The `client_id` is a public identifier for applications
        """
        return pulumi.get(self, "client_id")

    @_builtins.property
    @pulumi.getter(name="discoveryEndpoint")
    def discovery_endpoint(self) -> pulumi.Output[_builtins.str]:
        """
        This URL returns OAuth Authorization Server Metadata
        """
        return pulumi.get(self, "discovery_endpoint")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The application name to be registered. Application name cannot exceed 50 characters.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="oauthServerUrl")
    def oauth_server_url(self) -> pulumi.Output[_builtins.str]:
        """
        Base URL for common OAuth endpoints, like `/authorization`, `/token` and `/publickeys`
        """
        return pulumi.get(self, "oauth_server_url")

    @_builtins.property
    @pulumi.getter(name="profilesUrl")
    def profiles_url(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "profiles_url")

    @_builtins.property
    @pulumi.getter
    def secret(self) -> pulumi.Output[_builtins.str]:
        """
        The `secret` is a secret known only to the application and the authorization server
        """
        return pulumi.get(self, "secret")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Output[_builtins.str]:
        """
        The service `tenantId`
        """
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The type of application to be registered. Allowed types are `regularwebapp` and `singlepageapp`, default is
        `regularwebapp`.
        """
        return pulumi.get(self, "type")

