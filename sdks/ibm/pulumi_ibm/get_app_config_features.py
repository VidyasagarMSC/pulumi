# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetAppConfigFeaturesResult',
    'AwaitableGetAppConfigFeaturesResult',
    'get_app_config_features',
    'get_app_config_features_output',
]

@pulumi.output_type
class GetAppConfigFeaturesResult:
    """
    A collection of values returned by getAppConfigFeatures.
    """
    def __init__(__self__, collections=None, environment_id=None, expand=None, features=None, firsts=None, guid=None, id=None, includes=None, lasts=None, limit=None, nexts=None, offset=None, previouses=None, segments=None, sort=None, tags=None, total_count=None):
        if collections and not isinstance(collections, list):
            raise TypeError("Expected argument 'collections' to be a list")
        pulumi.set(__self__, "collections", collections)
        if environment_id and not isinstance(environment_id, str):
            raise TypeError("Expected argument 'environment_id' to be a str")
        pulumi.set(__self__, "environment_id", environment_id)
        if expand and not isinstance(expand, bool):
            raise TypeError("Expected argument 'expand' to be a bool")
        pulumi.set(__self__, "expand", expand)
        if features and not isinstance(features, list):
            raise TypeError("Expected argument 'features' to be a list")
        pulumi.set(__self__, "features", features)
        if firsts and not isinstance(firsts, list):
            raise TypeError("Expected argument 'firsts' to be a list")
        pulumi.set(__self__, "firsts", firsts)
        if guid and not isinstance(guid, str):
            raise TypeError("Expected argument 'guid' to be a str")
        pulumi.set(__self__, "guid", guid)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if includes and not isinstance(includes, list):
            raise TypeError("Expected argument 'includes' to be a list")
        pulumi.set(__self__, "includes", includes)
        if lasts and not isinstance(lasts, list):
            raise TypeError("Expected argument 'lasts' to be a list")
        pulumi.set(__self__, "lasts", lasts)
        if limit and not isinstance(limit, float):
            raise TypeError("Expected argument 'limit' to be a float")
        pulumi.set(__self__, "limit", limit)
        if nexts and not isinstance(nexts, list):
            raise TypeError("Expected argument 'nexts' to be a list")
        pulumi.set(__self__, "nexts", nexts)
        if offset and not isinstance(offset, float):
            raise TypeError("Expected argument 'offset' to be a float")
        pulumi.set(__self__, "offset", offset)
        if previouses and not isinstance(previouses, list):
            raise TypeError("Expected argument 'previouses' to be a list")
        pulumi.set(__self__, "previouses", previouses)
        if segments and not isinstance(segments, list):
            raise TypeError("Expected argument 'segments' to be a list")
        pulumi.set(__self__, "segments", segments)
        if sort and not isinstance(sort, str):
            raise TypeError("Expected argument 'sort' to be a str")
        pulumi.set(__self__, "sort", sort)
        if tags and not isinstance(tags, str):
            raise TypeError("Expected argument 'tags' to be a str")
        pulumi.set(__self__, "tags", tags)
        if total_count and not isinstance(total_count, float):
            raise TypeError("Expected argument 'total_count' to be a float")
        pulumi.set(__self__, "total_count", total_count)

    @_builtins.property
    @pulumi.getter
    def collections(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "collections")

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> _builtins.str:
        return pulumi.get(self, "environment_id")

    @_builtins.property
    @pulumi.getter
    def expand(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "expand")

    @_builtins.property
    @pulumi.getter
    def features(self) -> Sequence['outputs.GetAppConfigFeaturesFeatureResult']:
        return pulumi.get(self, "features")

    @_builtins.property
    @pulumi.getter
    def firsts(self) -> Sequence['outputs.GetAppConfigFeaturesFirstResult']:
        return pulumi.get(self, "firsts")

    @_builtins.property
    @pulumi.getter
    def guid(self) -> _builtins.str:
        return pulumi.get(self, "guid")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def includes(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "includes")

    @_builtins.property
    @pulumi.getter
    def lasts(self) -> Sequence['outputs.GetAppConfigFeaturesLastResult']:
        return pulumi.get(self, "lasts")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "limit")

    @_builtins.property
    @pulumi.getter
    def nexts(self) -> Sequence['outputs.GetAppConfigFeaturesNextResult']:
        return pulumi.get(self, "nexts")

    @_builtins.property
    @pulumi.getter
    def offset(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "offset")

    @_builtins.property
    @pulumi.getter
    def previouses(self) -> Sequence['outputs.GetAppConfigFeaturesPreviouseResult']:
        return pulumi.get(self, "previouses")

    @_builtins.property
    @pulumi.getter
    def segments(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "segments")

    @_builtins.property
    @pulumi.getter
    def sort(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> _builtins.float:
        return pulumi.get(self, "total_count")


class AwaitableGetAppConfigFeaturesResult(GetAppConfigFeaturesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppConfigFeaturesResult(
            collections=self.collections,
            environment_id=self.environment_id,
            expand=self.expand,
            features=self.features,
            firsts=self.firsts,
            guid=self.guid,
            id=self.id,
            includes=self.includes,
            lasts=self.lasts,
            limit=self.limit,
            nexts=self.nexts,
            offset=self.offset,
            previouses=self.previouses,
            segments=self.segments,
            sort=self.sort,
            tags=self.tags,
            total_count=self.total_count)


def get_app_config_features(collections: Optional[Sequence[_builtins.str]] = None,
                            environment_id: Optional[_builtins.str] = None,
                            expand: Optional[_builtins.bool] = None,
                            guid: Optional[_builtins.str] = None,
                            id: Optional[_builtins.str] = None,
                            includes: Optional[Sequence[_builtins.str]] = None,
                            limit: Optional[_builtins.float] = None,
                            offset: Optional[_builtins.float] = None,
                            segments: Optional[Sequence[_builtins.str]] = None,
                            sort: Optional[_builtins.str] = None,
                            tags: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppConfigFeaturesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['collections'] = collections
    __args__['environmentId'] = environment_id
    __args__['expand'] = expand
    __args__['guid'] = guid
    __args__['id'] = id
    __args__['includes'] = includes
    __args__['limit'] = limit
    __args__['offset'] = offset
    __args__['segments'] = segments
    __args__['sort'] = sort
    __args__['tags'] = tags
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getAppConfigFeatures:getAppConfigFeatures', __args__, opts=opts, typ=GetAppConfigFeaturesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetAppConfigFeaturesResult(
        collections=pulumi.get(__ret__, 'collections'),
        environment_id=pulumi.get(__ret__, 'environment_id'),
        expand=pulumi.get(__ret__, 'expand'),
        features=pulumi.get(__ret__, 'features'),
        firsts=pulumi.get(__ret__, 'firsts'),
        guid=pulumi.get(__ret__, 'guid'),
        id=pulumi.get(__ret__, 'id'),
        includes=pulumi.get(__ret__, 'includes'),
        lasts=pulumi.get(__ret__, 'lasts'),
        limit=pulumi.get(__ret__, 'limit'),
        nexts=pulumi.get(__ret__, 'nexts'),
        offset=pulumi.get(__ret__, 'offset'),
        previouses=pulumi.get(__ret__, 'previouses'),
        segments=pulumi.get(__ret__, 'segments'),
        sort=pulumi.get(__ret__, 'sort'),
        tags=pulumi.get(__ret__, 'tags'),
        total_count=pulumi.get(__ret__, 'total_count'))
def get_app_config_features_output(collections: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                   environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   expand: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                   guid: Optional[pulumi.Input[_builtins.str]] = None,
                                   id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   includes: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                   limit: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                                   offset: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                                   segments: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                   sort: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   tags: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppConfigFeaturesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['collections'] = collections
    __args__['environmentId'] = environment_id
    __args__['expand'] = expand
    __args__['guid'] = guid
    __args__['id'] = id
    __args__['includes'] = includes
    __args__['limit'] = limit
    __args__['offset'] = offset
    __args__['segments'] = segments
    __args__['sort'] = sort
    __args__['tags'] = tags
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getAppConfigFeatures:getAppConfigFeatures', __args__, opts=opts, typ=GetAppConfigFeaturesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetAppConfigFeaturesResult(
        collections=pulumi.get(__response__, 'collections'),
        environment_id=pulumi.get(__response__, 'environment_id'),
        expand=pulumi.get(__response__, 'expand'),
        features=pulumi.get(__response__, 'features'),
        firsts=pulumi.get(__response__, 'firsts'),
        guid=pulumi.get(__response__, 'guid'),
        id=pulumi.get(__response__, 'id'),
        includes=pulumi.get(__response__, 'includes'),
        lasts=pulumi.get(__response__, 'lasts'),
        limit=pulumi.get(__response__, 'limit'),
        nexts=pulumi.get(__response__, 'nexts'),
        offset=pulumi.get(__response__, 'offset'),
        previouses=pulumi.get(__response__, 'previouses'),
        segments=pulumi.get(__response__, 'segments'),
        sort=pulumi.get(__response__, 'sort'),
        tags=pulumi.get(__response__, 'tags'),
        total_count=pulumi.get(__response__, 'total_count')))
