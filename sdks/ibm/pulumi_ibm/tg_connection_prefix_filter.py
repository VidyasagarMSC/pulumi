# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TgConnectionPrefixFilterArgs', 'TgConnectionPrefixFilter']

@pulumi.input_type
class TgConnectionPrefixFilterArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[_builtins.str],
                 connection_id: pulumi.Input[_builtins.str],
                 gateway: pulumi.Input[_builtins.str],
                 prefix: pulumi.Input[_builtins.str],
                 before: Optional[pulumi.Input[_builtins.str]] = None,
                 ge: Optional[pulumi.Input[_builtins.float]] = None,
                 le: Optional[pulumi.Input[_builtins.float]] = None,
                 tg_connection_prefix_filter_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['TgConnectionPrefixFilterTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a TgConnectionPrefixFilter resource.
        :param pulumi.Input[_builtins.str] action: Whether to permit or deny the prefix filter
        :param pulumi.Input[_builtins.str] connection_id: The Transit Gateway Connection identifier
        :param pulumi.Input[_builtins.str] gateway: The Transit Gateway identifier
        :param pulumi.Input[_builtins.str] prefix: IP Prefix
        :param pulumi.Input[_builtins.str] before: Identifier of prefix filter that handles ordering
        :param pulumi.Input[_builtins.float] ge: IP Prefix GE
        :param pulumi.Input[_builtins.float] le: IP Prefix LE
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "prefix", prefix)
        if before is not None:
            pulumi.set(__self__, "before", before)
        if ge is not None:
            pulumi.set(__self__, "ge", ge)
        if le is not None:
            pulumi.set(__self__, "le", le)
        if tg_connection_prefix_filter_id is not None:
            pulumi.set(__self__, "tg_connection_prefix_filter_id", tg_connection_prefix_filter_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Input[_builtins.str]:
        """
        Whether to permit or deny the prefix filter
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> pulumi.Input[_builtins.str]:
        """
        The Transit Gateway Connection identifier
        """
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "connection_id", value)

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> pulumi.Input[_builtins.str]:
        """
        The Transit Gateway identifier
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "gateway", value)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> pulumi.Input[_builtins.str]:
        """
        IP Prefix
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "prefix", value)

    @_builtins.property
    @pulumi.getter
    def before(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Identifier of prefix filter that handles ordering
        """
        return pulumi.get(self, "before")

    @before.setter
    def before(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "before", value)

    @_builtins.property
    @pulumi.getter
    def ge(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        IP Prefix GE
        """
        return pulumi.get(self, "ge")

    @ge.setter
    def ge(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ge", value)

    @_builtins.property
    @pulumi.getter
    def le(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        IP Prefix LE
        """
        return pulumi.get(self, "le")

    @le.setter
    def le(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "le", value)

    @_builtins.property
    @pulumi.getter(name="tgConnectionPrefixFilterId")
    def tg_connection_prefix_filter_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tg_connection_prefix_filter_id")

    @tg_connection_prefix_filter_id.setter
    def tg_connection_prefix_filter_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tg_connection_prefix_filter_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['TgConnectionPrefixFilterTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['TgConnectionPrefixFilterTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _TgConnectionPrefixFilterState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 before: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 filter_id: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 ge: Optional[pulumi.Input[_builtins.float]] = None,
                 le: Optional[pulumi.Input[_builtins.float]] = None,
                 prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 tg_connection_prefix_filter_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['TgConnectionPrefixFilterTimeoutsArgs']] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering TgConnectionPrefixFilter resources.
        :param pulumi.Input[_builtins.str] action: Whether to permit or deny the prefix filter
        :param pulumi.Input[_builtins.str] before: Identifier of prefix filter that handles ordering
        :param pulumi.Input[_builtins.str] connection_id: The Transit Gateway Connection identifier
        :param pulumi.Input[_builtins.str] created_at: The date and time that this prefix filter was created
        :param pulumi.Input[_builtins.str] filter_id: The Transit Gateway Connection Prefix Filter identifier
        :param pulumi.Input[_builtins.str] gateway: The Transit Gateway identifier
        :param pulumi.Input[_builtins.float] ge: IP Prefix GE
        :param pulumi.Input[_builtins.float] le: IP Prefix LE
        :param pulumi.Input[_builtins.str] prefix: IP Prefix
        :param pulumi.Input[_builtins.str] updated_at: The date and time that this prefix filter was last updated
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if before is not None:
            pulumi.set(__self__, "before", before)
        if connection_id is not None:
            pulumi.set(__self__, "connection_id", connection_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if filter_id is not None:
            pulumi.set(__self__, "filter_id", filter_id)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ge is not None:
            pulumi.set(__self__, "ge", ge)
        if le is not None:
            pulumi.set(__self__, "le", le)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if tg_connection_prefix_filter_id is not None:
            pulumi.set(__self__, "tg_connection_prefix_filter_id", tg_connection_prefix_filter_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Whether to permit or deny the prefix filter
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter
    def before(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Identifier of prefix filter that handles ordering
        """
        return pulumi.get(self, "before")

    @before.setter
    def before(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "before", value)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Transit Gateway Connection identifier
        """
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connection_id", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time that this prefix filter was created
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Transit Gateway Connection Prefix Filter identifier
        """
        return pulumi.get(self, "filter_id")

    @filter_id.setter
    def filter_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "filter_id", value)

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Transit Gateway identifier
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gateway", value)

    @_builtins.property
    @pulumi.getter
    def ge(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        IP Prefix GE
        """
        return pulumi.get(self, "ge")

    @ge.setter
    def ge(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ge", value)

    @_builtins.property
    @pulumi.getter
    def le(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        IP Prefix LE
        """
        return pulumi.get(self, "le")

    @le.setter
    def le(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "le", value)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP Prefix
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix", value)

    @_builtins.property
    @pulumi.getter(name="tgConnectionPrefixFilterId")
    def tg_connection_prefix_filter_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tg_connection_prefix_filter_id")

    @tg_connection_prefix_filter_id.setter
    def tg_connection_prefix_filter_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tg_connection_prefix_filter_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['TgConnectionPrefixFilterTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['TgConnectionPrefixFilterTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time that this prefix filter was last updated
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("ibm:index/tgConnectionPrefixFilter:TgConnectionPrefixFilter")
class TgConnectionPrefixFilter(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 before: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 ge: Optional[pulumi.Input[_builtins.float]] = None,
                 le: Optional[pulumi.Input[_builtins.float]] = None,
                 prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 tg_connection_prefix_filter_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['TgConnectionPrefixFilterTimeoutsArgs', 'TgConnectionPrefixFilterTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a TgConnectionPrefixFilter resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Whether to permit or deny the prefix filter
        :param pulumi.Input[_builtins.str] before: Identifier of prefix filter that handles ordering
        :param pulumi.Input[_builtins.str] connection_id: The Transit Gateway Connection identifier
        :param pulumi.Input[_builtins.str] gateway: The Transit Gateway identifier
        :param pulumi.Input[_builtins.float] ge: IP Prefix GE
        :param pulumi.Input[_builtins.float] le: IP Prefix LE
        :param pulumi.Input[_builtins.str] prefix: IP Prefix
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TgConnectionPrefixFilterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a TgConnectionPrefixFilter resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param TgConnectionPrefixFilterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TgConnectionPrefixFilterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 before: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 ge: Optional[pulumi.Input[_builtins.float]] = None,
                 le: Optional[pulumi.Input[_builtins.float]] = None,
                 prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 tg_connection_prefix_filter_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['TgConnectionPrefixFilterTimeoutsArgs', 'TgConnectionPrefixFilterTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TgConnectionPrefixFilterArgs.__new__(TgConnectionPrefixFilterArgs)

            if action is None and not opts.urn:
                raise TypeError("Missing required property 'action'")
            __props__.__dict__["action"] = action
            __props__.__dict__["before"] = before
            if connection_id is None and not opts.urn:
                raise TypeError("Missing required property 'connection_id'")
            __props__.__dict__["connection_id"] = connection_id
            if gateway is None and not opts.urn:
                raise TypeError("Missing required property 'gateway'")
            __props__.__dict__["gateway"] = gateway
            __props__.__dict__["ge"] = ge
            __props__.__dict__["le"] = le
            if prefix is None and not opts.urn:
                raise TypeError("Missing required property 'prefix'")
            __props__.__dict__["prefix"] = prefix
            __props__.__dict__["tg_connection_prefix_filter_id"] = tg_connection_prefix_filter_id
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["created_at"] = None
            __props__.__dict__["filter_id"] = None
            __props__.__dict__["updated_at"] = None
        super(TgConnectionPrefixFilter, __self__).__init__(
            'ibm:index/tgConnectionPrefixFilter:TgConnectionPrefixFilter',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[_builtins.str]] = None,
            before: Optional[pulumi.Input[_builtins.str]] = None,
            connection_id: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            filter_id: Optional[pulumi.Input[_builtins.str]] = None,
            gateway: Optional[pulumi.Input[_builtins.str]] = None,
            ge: Optional[pulumi.Input[_builtins.float]] = None,
            le: Optional[pulumi.Input[_builtins.float]] = None,
            prefix: Optional[pulumi.Input[_builtins.str]] = None,
            tg_connection_prefix_filter_id: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['TgConnectionPrefixFilterTimeoutsArgs', 'TgConnectionPrefixFilterTimeoutsArgsDict']]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'TgConnectionPrefixFilter':
        """
        Get an existing TgConnectionPrefixFilter resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Whether to permit or deny the prefix filter
        :param pulumi.Input[_builtins.str] before: Identifier of prefix filter that handles ordering
        :param pulumi.Input[_builtins.str] connection_id: The Transit Gateway Connection identifier
        :param pulumi.Input[_builtins.str] created_at: The date and time that this prefix filter was created
        :param pulumi.Input[_builtins.str] filter_id: The Transit Gateway Connection Prefix Filter identifier
        :param pulumi.Input[_builtins.str] gateway: The Transit Gateway identifier
        :param pulumi.Input[_builtins.float] ge: IP Prefix GE
        :param pulumi.Input[_builtins.float] le: IP Prefix LE
        :param pulumi.Input[_builtins.str] prefix: IP Prefix
        :param pulumi.Input[_builtins.str] updated_at: The date and time that this prefix filter was last updated
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TgConnectionPrefixFilterState.__new__(_TgConnectionPrefixFilterState)

        __props__.__dict__["action"] = action
        __props__.__dict__["before"] = before
        __props__.__dict__["connection_id"] = connection_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["filter_id"] = filter_id
        __props__.__dict__["gateway"] = gateway
        __props__.__dict__["ge"] = ge
        __props__.__dict__["le"] = le
        __props__.__dict__["prefix"] = prefix
        __props__.__dict__["tg_connection_prefix_filter_id"] = tg_connection_prefix_filter_id
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["updated_at"] = updated_at
        return TgConnectionPrefixFilter(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Output[_builtins.str]:
        """
        Whether to permit or deny the prefix filter
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter
    def before(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Identifier of prefix filter that handles ordering
        """
        return pulumi.get(self, "before")

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> pulumi.Output[_builtins.str]:
        """
        The Transit Gateway Connection identifier
        """
        return pulumi.get(self, "connection_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time that this prefix filter was created
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> pulumi.Output[_builtins.str]:
        """
        The Transit Gateway Connection Prefix Filter identifier
        """
        return pulumi.get(self, "filter_id")

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> pulumi.Output[_builtins.str]:
        """
        The Transit Gateway identifier
        """
        return pulumi.get(self, "gateway")

    @_builtins.property
    @pulumi.getter
    def ge(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        IP Prefix GE
        """
        return pulumi.get(self, "ge")

    @_builtins.property
    @pulumi.getter
    def le(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        IP Prefix LE
        """
        return pulumi.get(self, "le")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> pulumi.Output[_builtins.str]:
        """
        IP Prefix
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="tgConnectionPrefixFilterId")
    def tg_connection_prefix_filter_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "tg_connection_prefix_filter_id")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.TgConnectionPrefixFilterTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time that this prefix filter was last updated
        """
        return pulumi.get(self, "updated_at")

