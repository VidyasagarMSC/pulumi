# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetIamAuthTokenResult',
    'AwaitableGetIamAuthTokenResult',
    'get_iam_auth_token',
    'get_iam_auth_token_output',
]

@pulumi.output_type
class GetIamAuthTokenResult:
    """
    A collection of values returned by getIamAuthToken.
    """
    def __init__(__self__, iam_access_token=None, iam_refresh_token=None, id=None, uaa_access_token=None, uaa_refresh_token=None):
        if iam_access_token and not isinstance(iam_access_token, str):
            raise TypeError("Expected argument 'iam_access_token' to be a str")
        pulumi.set(__self__, "iam_access_token", iam_access_token)
        if iam_refresh_token and not isinstance(iam_refresh_token, str):
            raise TypeError("Expected argument 'iam_refresh_token' to be a str")
        pulumi.set(__self__, "iam_refresh_token", iam_refresh_token)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if uaa_access_token and not isinstance(uaa_access_token, str):
            raise TypeError("Expected argument 'uaa_access_token' to be a str")
        pulumi.set(__self__, "uaa_access_token", uaa_access_token)
        if uaa_refresh_token and not isinstance(uaa_refresh_token, str):
            raise TypeError("Expected argument 'uaa_refresh_token' to be a str")
        pulumi.set(__self__, "uaa_refresh_token", uaa_refresh_token)

    @_builtins.property
    @pulumi.getter(name="iamAccessToken")
    def iam_access_token(self) -> _builtins.str:
        return pulumi.get(self, "iam_access_token")

    @_builtins.property
    @pulumi.getter(name="iamRefreshToken")
    def iam_refresh_token(self) -> _builtins.str:
        return pulumi.get(self, "iam_refresh_token")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="uaaAccessToken")
    def uaa_access_token(self) -> _builtins.str:
        return pulumi.get(self, "uaa_access_token")

    @_builtins.property
    @pulumi.getter(name="uaaRefreshToken")
    def uaa_refresh_token(self) -> _builtins.str:
        return pulumi.get(self, "uaa_refresh_token")


class AwaitableGetIamAuthTokenResult(GetIamAuthTokenResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamAuthTokenResult(
            iam_access_token=self.iam_access_token,
            iam_refresh_token=self.iam_refresh_token,
            id=self.id,
            uaa_access_token=self.uaa_access_token,
            uaa_refresh_token=self.uaa_refresh_token)


def get_iam_auth_token(id: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamAuthTokenResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIamAuthToken:getIamAuthToken', __args__, opts=opts, typ=GetIamAuthTokenResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIamAuthTokenResult(
        iam_access_token=pulumi.get(__ret__, 'iam_access_token'),
        iam_refresh_token=pulumi.get(__ret__, 'iam_refresh_token'),
        id=pulumi.get(__ret__, 'id'),
        uaa_access_token=pulumi.get(__ret__, 'uaa_access_token'),
        uaa_refresh_token=pulumi.get(__ret__, 'uaa_refresh_token'))
def get_iam_auth_token_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamAuthTokenResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIamAuthToken:getIamAuthToken', __args__, opts=opts, typ=GetIamAuthTokenResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIamAuthTokenResult(
        iam_access_token=pulumi.get(__response__, 'iam_access_token'),
        iam_refresh_token=pulumi.get(__response__, 'iam_refresh_token'),
        id=pulumi.get(__response__, 'id'),
        uaa_access_token=pulumi.get(__response__, 'uaa_access_token'),
        uaa_refresh_token=pulumi.get(__response__, 'uaa_refresh_token')))
