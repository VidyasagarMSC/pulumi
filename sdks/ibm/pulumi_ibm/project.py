# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ProjectArgs', 'Project']

@pulumi.input_type
class ProjectArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input['ProjectDefinitionArgs'],
                 location: pulumi.Input[_builtins.str],
                 resource_group: pulumi.Input[_builtins.str],
                 project_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Project resource.
        :param pulumi.Input['ProjectDefinitionArgs'] definition: The definition of the project.
        :param pulumi.Input[_builtins.str] location: The IBM Cloud location where a resource is deployed.
        :param pulumi.Input[_builtins.str] resource_group: The resource group name where the project's data and tools are created.
        """
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_group", resource_group)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)

    @_builtins.property
    @pulumi.getter
    def definition(self) -> pulumi.Input['ProjectDefinitionArgs']:
        """
        The definition of the project.
        """
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input['ProjectDefinitionArgs']):
        pulumi.set(self, "definition", value)

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Input[_builtins.str]:
        """
        The IBM Cloud location where a resource is deployed.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[_builtins.str]:
        """
        The resource group name where the project's data and tools are created.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)


@pulumi.input_type
class _ProjectState:
    def __init__(__self__, *,
                 configs: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConfigArgs']]]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 cumulative_needs_attention_view_error: Optional[pulumi.Input[_builtins.bool]] = None,
                 cumulative_needs_attention_views: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectCumulativeNeedsAttentionViewArgs']]]] = None,
                 definition: Optional[pulumi.Input['ProjectDefinitionArgs']] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectEnvironmentArgs']]]] = None,
                 event_notifications_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Project resources.
        :param pulumi.Input[Sequence[pulumi.Input['ProjectConfigArgs']]] configs: The project configurations. These configurations are only included in the response of creating a project if a
               configuration array is specified in the request payload.
        :param pulumi.Input[_builtins.str] created_at: A date and time value in the format YYYY-MM-DDTHH:mm:ssZ or YYYY-MM-DDTHH:mm:ss.sssZ to match the date and time format
               as specified by RFC 3339.
        :param pulumi.Input[_builtins.str] crn: An IBM Cloud resource name that uniquely identifies a resource.
        :param pulumi.Input[_builtins.bool] cumulative_needs_attention_view_error: A value of `true` indicates that the fetch of the needs attention items failed. This property only exists if there was
               an error when you retrieved the cumulative needs attention view.
        :param pulumi.Input[Sequence[pulumi.Input['ProjectCumulativeNeedsAttentionViewArgs']]] cumulative_needs_attention_views: The cumulative list of needs attention items for a project. If the view is successfully retrieved, an empty or nonempty
               array is returned.
        :param pulumi.Input['ProjectDefinitionArgs'] definition: The definition of the project.
        :param pulumi.Input[Sequence[pulumi.Input['ProjectEnvironmentArgs']]] environments: The project environment. These environments are only included in the response if project environments were created on
               the project.
        :param pulumi.Input[_builtins.str] event_notifications_crn: The CRN of the Event Notifications instance if one is connected to this project.
        :param pulumi.Input[_builtins.str] href: A URL.
        :param pulumi.Input[_builtins.str] location: The IBM Cloud location where a resource is deployed.
        :param pulumi.Input[_builtins.str] resource_group: The resource group name where the project's data and tools are created.
        :param pulumi.Input[_builtins.str] resource_group_id: The resource group ID where the project's data and tools are created.
        :param pulumi.Input[_builtins.str] state: The project status value.
        """
        if configs is not None:
            pulumi.set(__self__, "configs", configs)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if cumulative_needs_attention_view_error is not None:
            pulumi.set(__self__, "cumulative_needs_attention_view_error", cumulative_needs_attention_view_error)
        if cumulative_needs_attention_views is not None:
            pulumi.set(__self__, "cumulative_needs_attention_views", cumulative_needs_attention_views)
        if definition is not None:
            pulumi.set(__self__, "definition", definition)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if event_notifications_crn is not None:
            pulumi.set(__self__, "event_notifications_crn", event_notifications_crn)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter
    def configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConfigArgs']]]]:
        """
        The project configurations. These configurations are only included in the response of creating a project if a
        configuration array is specified in the request payload.
        """
        return pulumi.get(self, "configs")

    @configs.setter
    def configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectConfigArgs']]]]):
        pulumi.set(self, "configs", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A date and time value in the format YYYY-MM-DDTHH:mm:ssZ or YYYY-MM-DDTHH:mm:ss.sssZ to match the date and time format
        as specified by RFC 3339.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        An IBM Cloud resource name that uniquely identifies a resource.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="cumulativeNeedsAttentionViewError")
    def cumulative_needs_attention_view_error(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        A value of `true` indicates that the fetch of the needs attention items failed. This property only exists if there was
        an error when you retrieved the cumulative needs attention view.
        """
        return pulumi.get(self, "cumulative_needs_attention_view_error")

    @cumulative_needs_attention_view_error.setter
    def cumulative_needs_attention_view_error(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "cumulative_needs_attention_view_error", value)

    @_builtins.property
    @pulumi.getter(name="cumulativeNeedsAttentionViews")
    def cumulative_needs_attention_views(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectCumulativeNeedsAttentionViewArgs']]]]:
        """
        The cumulative list of needs attention items for a project. If the view is successfully retrieved, an empty or nonempty
        array is returned.
        """
        return pulumi.get(self, "cumulative_needs_attention_views")

    @cumulative_needs_attention_views.setter
    def cumulative_needs_attention_views(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectCumulativeNeedsAttentionViewArgs']]]]):
        pulumi.set(self, "cumulative_needs_attention_views", value)

    @_builtins.property
    @pulumi.getter
    def definition(self) -> Optional[pulumi.Input['ProjectDefinitionArgs']]:
        """
        The definition of the project.
        """
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: Optional[pulumi.Input['ProjectDefinitionArgs']]):
        pulumi.set(self, "definition", value)

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectEnvironmentArgs']]]]:
        """
        The project environment. These environments are only included in the response if project environments were created on
        the project.
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectEnvironmentArgs']]]]):
        pulumi.set(self, "environments", value)

    @_builtins.property
    @pulumi.getter(name="eventNotificationsCrn")
    def event_notifications_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN of the Event Notifications instance if one is connected to this project.
        """
        return pulumi.get(self, "event_notifications_crn")

    @event_notifications_crn.setter
    def event_notifications_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "event_notifications_crn", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A URL.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IBM Cloud location where a resource is deployed.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource group name where the project's data and tools are created.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource group ID where the project's data and tools are created.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The project status value.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)


@pulumi.type_token("ibm:index/project:Project")
class Project(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 definition: Optional[pulumi.Input[Union['ProjectDefinitionArgs', 'ProjectDefinitionArgsDict']]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a Project resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['ProjectDefinitionArgs', 'ProjectDefinitionArgsDict']] definition: The definition of the project.
        :param pulumi.Input[_builtins.str] location: The IBM Cloud location where a resource is deployed.
        :param pulumi.Input[_builtins.str] resource_group: The resource group name where the project's data and tools are created.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProjectArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Project resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ProjectArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProjectArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 definition: Optional[pulumi.Input[Union['ProjectDefinitionArgs', 'ProjectDefinitionArgsDict']]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProjectArgs.__new__(ProjectArgs)

            if definition is None and not opts.urn:
                raise TypeError("Missing required property 'definition'")
            __props__.__dict__["definition"] = definition
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["project_id"] = project_id
            if resource_group is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group'")
            __props__.__dict__["resource_group"] = resource_group
            __props__.__dict__["configs"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["cumulative_needs_attention_view_error"] = None
            __props__.__dict__["cumulative_needs_attention_views"] = None
            __props__.__dict__["environments"] = None
            __props__.__dict__["event_notifications_crn"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["resource_group_id"] = None
            __props__.__dict__["state"] = None
        super(Project, __self__).__init__(
            'ibm:index/project:Project',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProjectConfigArgs', 'ProjectConfigArgsDict']]]]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            cumulative_needs_attention_view_error: Optional[pulumi.Input[_builtins.bool]] = None,
            cumulative_needs_attention_views: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProjectCumulativeNeedsAttentionViewArgs', 'ProjectCumulativeNeedsAttentionViewArgsDict']]]]] = None,
            definition: Optional[pulumi.Input[Union['ProjectDefinitionArgs', 'ProjectDefinitionArgsDict']]] = None,
            environments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ProjectEnvironmentArgs', 'ProjectEnvironmentArgsDict']]]]] = None,
            event_notifications_crn: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            location: Optional[pulumi.Input[_builtins.str]] = None,
            project_id: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            state: Optional[pulumi.Input[_builtins.str]] = None) -> 'Project':
        """
        Get an existing Project resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ProjectConfigArgs', 'ProjectConfigArgsDict']]]] configs: The project configurations. These configurations are only included in the response of creating a project if a
               configuration array is specified in the request payload.
        :param pulumi.Input[_builtins.str] created_at: A date and time value in the format YYYY-MM-DDTHH:mm:ssZ or YYYY-MM-DDTHH:mm:ss.sssZ to match the date and time format
               as specified by RFC 3339.
        :param pulumi.Input[_builtins.str] crn: An IBM Cloud resource name that uniquely identifies a resource.
        :param pulumi.Input[_builtins.bool] cumulative_needs_attention_view_error: A value of `true` indicates that the fetch of the needs attention items failed. This property only exists if there was
               an error when you retrieved the cumulative needs attention view.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ProjectCumulativeNeedsAttentionViewArgs', 'ProjectCumulativeNeedsAttentionViewArgsDict']]]] cumulative_needs_attention_views: The cumulative list of needs attention items for a project. If the view is successfully retrieved, an empty or nonempty
               array is returned.
        :param pulumi.Input[Union['ProjectDefinitionArgs', 'ProjectDefinitionArgsDict']] definition: The definition of the project.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ProjectEnvironmentArgs', 'ProjectEnvironmentArgsDict']]]] environments: The project environment. These environments are only included in the response if project environments were created on
               the project.
        :param pulumi.Input[_builtins.str] event_notifications_crn: The CRN of the Event Notifications instance if one is connected to this project.
        :param pulumi.Input[_builtins.str] href: A URL.
        :param pulumi.Input[_builtins.str] location: The IBM Cloud location where a resource is deployed.
        :param pulumi.Input[_builtins.str] resource_group: The resource group name where the project's data and tools are created.
        :param pulumi.Input[_builtins.str] resource_group_id: The resource group ID where the project's data and tools are created.
        :param pulumi.Input[_builtins.str] state: The project status value.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProjectState.__new__(_ProjectState)

        __props__.__dict__["configs"] = configs
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["crn"] = crn
        __props__.__dict__["cumulative_needs_attention_view_error"] = cumulative_needs_attention_view_error
        __props__.__dict__["cumulative_needs_attention_views"] = cumulative_needs_attention_views
        __props__.__dict__["definition"] = definition
        __props__.__dict__["environments"] = environments
        __props__.__dict__["event_notifications_crn"] = event_notifications_crn
        __props__.__dict__["href"] = href
        __props__.__dict__["location"] = location
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["resource_group"] = resource_group
        __props__.__dict__["resource_group_id"] = resource_group_id
        __props__.__dict__["state"] = state
        return Project(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def configs(self) -> pulumi.Output[Sequence['outputs.ProjectConfig']]:
        """
        The project configurations. These configurations are only included in the response of creating a project if a
        configuration array is specified in the request payload.
        """
        return pulumi.get(self, "configs")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        A date and time value in the format YYYY-MM-DDTHH:mm:ssZ or YYYY-MM-DDTHH:mm:ss.sssZ to match the date and time format
        as specified by RFC 3339.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        An IBM Cloud resource name that uniquely identifies a resource.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="cumulativeNeedsAttentionViewError")
    def cumulative_needs_attention_view_error(self) -> pulumi.Output[_builtins.bool]:
        """
        A value of `true` indicates that the fetch of the needs attention items failed. This property only exists if there was
        an error when you retrieved the cumulative needs attention view.
        """
        return pulumi.get(self, "cumulative_needs_attention_view_error")

    @_builtins.property
    @pulumi.getter(name="cumulativeNeedsAttentionViews")
    def cumulative_needs_attention_views(self) -> pulumi.Output[Sequence['outputs.ProjectCumulativeNeedsAttentionView']]:
        """
        The cumulative list of needs attention items for a project. If the view is successfully retrieved, an empty or nonempty
        array is returned.
        """
        return pulumi.get(self, "cumulative_needs_attention_views")

    @_builtins.property
    @pulumi.getter
    def definition(self) -> pulumi.Output['outputs.ProjectDefinition']:
        """
        The definition of the project.
        """
        return pulumi.get(self, "definition")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> pulumi.Output[Sequence['outputs.ProjectEnvironment']]:
        """
        The project environment. These environments are only included in the response if project environments were created on
        the project.
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="eventNotificationsCrn")
    def event_notifications_crn(self) -> pulumi.Output[_builtins.str]:
        """
        The CRN of the Event Notifications instance if one is connected to this project.
        """
        return pulumi.get(self, "event_notifications_crn")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        A URL.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Output[_builtins.str]:
        """
        The IBM Cloud location where a resource is deployed.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Output[_builtins.str]:
        """
        The resource group name where the project's data and tools are created.
        """
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        The resource group ID where the project's data and tools are created.
        """
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> pulumi.Output[_builtins.str]:
        """
        The project status value.
        """
        return pulumi.get(self, "state")

