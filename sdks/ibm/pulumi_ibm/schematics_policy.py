# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SchematicsPolicyArgs', 'SchematicsPolicy']

@pulumi.input_type
class SchematicsPolicyArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 kind: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameter: Optional[pulumi.Input['SchematicsPolicyParameterArgs']] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 schematics_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 scoped_resources: Optional[pulumi.Input[Sequence[pulumi.Input['SchematicsPolicyScopedResourceArgs']]]] = None,
                 state: Optional[pulumi.Input['SchematicsPolicyStateArgs']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 target: Optional[pulumi.Input['SchematicsPolicyTargetArgs']] = None):
        """
        The set of arguments for constructing a SchematicsPolicy resource.
        :param pulumi.Input[_builtins.str] description: The description of Schematics customization policy.
        :param pulumi.Input[_builtins.str] kind: Policy kind or categories for managing and deriving policy decision * `agent_assignment_policy` Agent assignment policy
               for job execution.
        :param pulumi.Input[_builtins.str] location: List of locations supported by IBM Cloud Schematics service. While creating your workspace or action, choose the right
               region, since it cannot be changed. Note, this does not limit the location of the IBM Cloud resources, provisioned using
               Schematics.
        :param pulumi.Input[_builtins.str] name: Name of Schematics customization policy.
        :param pulumi.Input['SchematicsPolicyParameterArgs'] parameter: The parameter to tune the Schematics policy.
        :param pulumi.Input[_builtins.str] resource_group: The resource group name for the policy. By default, Policy will be created in `default` Resource Group.
        :param pulumi.Input[Sequence[pulumi.Input['SchematicsPolicyScopedResourceArgs']]] scoped_resources: List of scoped Schematics resources targeted by the policy.
        :param pulumi.Input['SchematicsPolicyStateArgs'] state: User defined status of the Schematics object.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags for the Schematics customization policy.
        :param pulumi.Input['SchematicsPolicyTargetArgs'] target: The objects for the Schematics policy.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameter is not None:
            pulumi.set(__self__, "parameter", parameter)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if schematics_policy_id is not None:
            pulumi.set(__self__, "schematics_policy_id", schematics_policy_id)
        if scoped_resources is not None:
            pulumi.set(__self__, "scoped_resources", scoped_resources)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of Schematics customization policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Policy kind or categories for managing and deriving policy decision * `agent_assignment_policy` Agent assignment policy
        for job execution.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kind", value)

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        List of locations supported by IBM Cloud Schematics service. While creating your workspace or action, choose the right
        region, since it cannot be changed. Note, this does not limit the location of the IBM Cloud resources, provisioned using
        Schematics.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of Schematics customization policy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def parameter(self) -> Optional[pulumi.Input['SchematicsPolicyParameterArgs']]:
        """
        The parameter to tune the Schematics policy.
        """
        return pulumi.get(self, "parameter")

    @parameter.setter
    def parameter(self, value: Optional[pulumi.Input['SchematicsPolicyParameterArgs']]):
        pulumi.set(self, "parameter", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource group name for the policy. By default, Policy will be created in `default` Resource Group.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="schematicsPolicyId")
    def schematics_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "schematics_policy_id")

    @schematics_policy_id.setter
    def schematics_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "schematics_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="scopedResources")
    def scoped_resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SchematicsPolicyScopedResourceArgs']]]]:
        """
        List of scoped Schematics resources targeted by the policy.
        """
        return pulumi.get(self, "scoped_resources")

    @scoped_resources.setter
    def scoped_resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SchematicsPolicyScopedResourceArgs']]]]):
        pulumi.set(self, "scoped_resources", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input['SchematicsPolicyStateArgs']]:
        """
        User defined status of the Schematics object.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input['SchematicsPolicyStateArgs']]):
        pulumi.set(self, "state", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Tags for the Schematics customization policy.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input['SchematicsPolicyTargetArgs']]:
        """
        The objects for the Schematics policy.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input['SchematicsPolicyTargetArgs']]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class _SchematicsPolicyState:
    def __init__(__self__, *,
                 account: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 kind: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameter: Optional[pulumi.Input['SchematicsPolicyParameterArgs']] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 schematics_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 scoped_resources: Optional[pulumi.Input[Sequence[pulumi.Input['SchematicsPolicyScopedResourceArgs']]]] = None,
                 state: Optional[pulumi.Input['SchematicsPolicyStateArgs']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 target: Optional[pulumi.Input['SchematicsPolicyTargetArgs']] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SchematicsPolicy resources.
        :param pulumi.Input[_builtins.str] account: The Account id.
        :param pulumi.Input[_builtins.str] created_at: The policy creation time.
        :param pulumi.Input[_builtins.str] created_by: The user who created the policy.
        :param pulumi.Input[_builtins.str] crn: The policy CRN.
        :param pulumi.Input[_builtins.str] description: The description of Schematics customization policy.
        :param pulumi.Input[_builtins.str] kind: Policy kind or categories for managing and deriving policy decision * `agent_assignment_policy` Agent assignment policy
               for job execution.
        :param pulumi.Input[_builtins.str] location: List of locations supported by IBM Cloud Schematics service. While creating your workspace or action, choose the right
               region, since it cannot be changed. Note, this does not limit the location of the IBM Cloud resources, provisioned using
               Schematics.
        :param pulumi.Input[_builtins.str] name: Name of Schematics customization policy.
        :param pulumi.Input['SchematicsPolicyParameterArgs'] parameter: The parameter to tune the Schematics policy.
        :param pulumi.Input[_builtins.str] resource_group: The resource group name for the policy. By default, Policy will be created in `default` Resource Group.
        :param pulumi.Input[Sequence[pulumi.Input['SchematicsPolicyScopedResourceArgs']]] scoped_resources: List of scoped Schematics resources targeted by the policy.
        :param pulumi.Input['SchematicsPolicyStateArgs'] state: User defined status of the Schematics object.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags for the Schematics customization policy.
        :param pulumi.Input['SchematicsPolicyTargetArgs'] target: The objects for the Schematics policy.
        :param pulumi.Input[_builtins.str] updated_at: The policy updation time.
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameter is not None:
            pulumi.set(__self__, "parameter", parameter)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if schematics_policy_id is not None:
            pulumi.set(__self__, "schematics_policy_id", schematics_policy_id)
        if scoped_resources is not None:
            pulumi.set(__self__, "scoped_resources", scoped_resources)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def account(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Account id.
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The policy creation time.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user who created the policy.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The policy CRN.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of Schematics customization policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Policy kind or categories for managing and deriving policy decision * `agent_assignment_policy` Agent assignment policy
        for job execution.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kind", value)

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        List of locations supported by IBM Cloud Schematics service. While creating your workspace or action, choose the right
        region, since it cannot be changed. Note, this does not limit the location of the IBM Cloud resources, provisioned using
        Schematics.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of Schematics customization policy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def parameter(self) -> Optional[pulumi.Input['SchematicsPolicyParameterArgs']]:
        """
        The parameter to tune the Schematics policy.
        """
        return pulumi.get(self, "parameter")

    @parameter.setter
    def parameter(self, value: Optional[pulumi.Input['SchematicsPolicyParameterArgs']]):
        pulumi.set(self, "parameter", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource group name for the policy. By default, Policy will be created in `default` Resource Group.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="schematicsPolicyId")
    def schematics_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "schematics_policy_id")

    @schematics_policy_id.setter
    def schematics_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "schematics_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="scopedResources")
    def scoped_resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SchematicsPolicyScopedResourceArgs']]]]:
        """
        List of scoped Schematics resources targeted by the policy.
        """
        return pulumi.get(self, "scoped_resources")

    @scoped_resources.setter
    def scoped_resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SchematicsPolicyScopedResourceArgs']]]]):
        pulumi.set(self, "scoped_resources", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input['SchematicsPolicyStateArgs']]:
        """
        User defined status of the Schematics object.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input['SchematicsPolicyStateArgs']]):
        pulumi.set(self, "state", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Tags for the Schematics customization policy.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input['SchematicsPolicyTargetArgs']]:
        """
        The objects for the Schematics policy.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input['SchematicsPolicyTargetArgs']]):
        pulumi.set(self, "target", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The policy updation time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("ibm:index/schematicsPolicy:SchematicsPolicy")
class SchematicsPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 kind: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameter: Optional[pulumi.Input[Union['SchematicsPolicyParameterArgs', 'SchematicsPolicyParameterArgsDict']]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 schematics_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 scoped_resources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SchematicsPolicyScopedResourceArgs', 'SchematicsPolicyScopedResourceArgsDict']]]]] = None,
                 state: Optional[pulumi.Input[Union['SchematicsPolicyStateArgs', 'SchematicsPolicyStateArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 target: Optional[pulumi.Input[Union['SchematicsPolicyTargetArgs', 'SchematicsPolicyTargetArgsDict']]] = None,
                 __props__=None):
        """
        Create a SchematicsPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: The description of Schematics customization policy.
        :param pulumi.Input[_builtins.str] kind: Policy kind or categories for managing and deriving policy decision * `agent_assignment_policy` Agent assignment policy
               for job execution.
        :param pulumi.Input[_builtins.str] location: List of locations supported by IBM Cloud Schematics service. While creating your workspace or action, choose the right
               region, since it cannot be changed. Note, this does not limit the location of the IBM Cloud resources, provisioned using
               Schematics.
        :param pulumi.Input[_builtins.str] name: Name of Schematics customization policy.
        :param pulumi.Input[Union['SchematicsPolicyParameterArgs', 'SchematicsPolicyParameterArgsDict']] parameter: The parameter to tune the Schematics policy.
        :param pulumi.Input[_builtins.str] resource_group: The resource group name for the policy. By default, Policy will be created in `default` Resource Group.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SchematicsPolicyScopedResourceArgs', 'SchematicsPolicyScopedResourceArgsDict']]]] scoped_resources: List of scoped Schematics resources targeted by the policy.
        :param pulumi.Input[Union['SchematicsPolicyStateArgs', 'SchematicsPolicyStateArgsDict']] state: User defined status of the Schematics object.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags for the Schematics customization policy.
        :param pulumi.Input[Union['SchematicsPolicyTargetArgs', 'SchematicsPolicyTargetArgsDict']] target: The objects for the Schematics policy.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SchematicsPolicyArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SchematicsPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SchematicsPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SchematicsPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 kind: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameter: Optional[pulumi.Input[Union['SchematicsPolicyParameterArgs', 'SchematicsPolicyParameterArgsDict']]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 schematics_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 scoped_resources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SchematicsPolicyScopedResourceArgs', 'SchematicsPolicyScopedResourceArgsDict']]]]] = None,
                 state: Optional[pulumi.Input[Union['SchematicsPolicyStateArgs', 'SchematicsPolicyStateArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 target: Optional[pulumi.Input[Union['SchematicsPolicyTargetArgs', 'SchematicsPolicyTargetArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SchematicsPolicyArgs.__new__(SchematicsPolicyArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["kind"] = kind
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            __props__.__dict__["parameter"] = parameter
            __props__.__dict__["resource_group"] = resource_group
            __props__.__dict__["schematics_policy_id"] = schematics_policy_id
            __props__.__dict__["scoped_resources"] = scoped_resources
            __props__.__dict__["state"] = state
            __props__.__dict__["tags"] = tags
            __props__.__dict__["target"] = target
            __props__.__dict__["account"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["updated_at"] = None
        super(SchematicsPolicy, __self__).__init__(
            'ibm:index/schematicsPolicy:SchematicsPolicy',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            created_by: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            kind: Optional[pulumi.Input[_builtins.str]] = None,
            location: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            parameter: Optional[pulumi.Input[Union['SchematicsPolicyParameterArgs', 'SchematicsPolicyParameterArgsDict']]] = None,
            resource_group: Optional[pulumi.Input[_builtins.str]] = None,
            schematics_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            scoped_resources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SchematicsPolicyScopedResourceArgs', 'SchematicsPolicyScopedResourceArgsDict']]]]] = None,
            state: Optional[pulumi.Input[Union['SchematicsPolicyStateArgs', 'SchematicsPolicyStateArgsDict']]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            target: Optional[pulumi.Input[Union['SchematicsPolicyTargetArgs', 'SchematicsPolicyTargetArgsDict']]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'SchematicsPolicy':
        """
        Get an existing SchematicsPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] account: The Account id.
        :param pulumi.Input[_builtins.str] created_at: The policy creation time.
        :param pulumi.Input[_builtins.str] created_by: The user who created the policy.
        :param pulumi.Input[_builtins.str] crn: The policy CRN.
        :param pulumi.Input[_builtins.str] description: The description of Schematics customization policy.
        :param pulumi.Input[_builtins.str] kind: Policy kind or categories for managing and deriving policy decision * `agent_assignment_policy` Agent assignment policy
               for job execution.
        :param pulumi.Input[_builtins.str] location: List of locations supported by IBM Cloud Schematics service. While creating your workspace or action, choose the right
               region, since it cannot be changed. Note, this does not limit the location of the IBM Cloud resources, provisioned using
               Schematics.
        :param pulumi.Input[_builtins.str] name: Name of Schematics customization policy.
        :param pulumi.Input[Union['SchematicsPolicyParameterArgs', 'SchematicsPolicyParameterArgsDict']] parameter: The parameter to tune the Schematics policy.
        :param pulumi.Input[_builtins.str] resource_group: The resource group name for the policy. By default, Policy will be created in `default` Resource Group.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SchematicsPolicyScopedResourceArgs', 'SchematicsPolicyScopedResourceArgsDict']]]] scoped_resources: List of scoped Schematics resources targeted by the policy.
        :param pulumi.Input[Union['SchematicsPolicyStateArgs', 'SchematicsPolicyStateArgsDict']] state: User defined status of the Schematics object.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags for the Schematics customization policy.
        :param pulumi.Input[Union['SchematicsPolicyTargetArgs', 'SchematicsPolicyTargetArgsDict']] target: The objects for the Schematics policy.
        :param pulumi.Input[_builtins.str] updated_at: The policy updation time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SchematicsPolicyState.__new__(_SchematicsPolicyState)

        __props__.__dict__["account"] = account
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["crn"] = crn
        __props__.__dict__["description"] = description
        __props__.__dict__["kind"] = kind
        __props__.__dict__["location"] = location
        __props__.__dict__["name"] = name
        __props__.__dict__["parameter"] = parameter
        __props__.__dict__["resource_group"] = resource_group
        __props__.__dict__["schematics_policy_id"] = schematics_policy_id
        __props__.__dict__["scoped_resources"] = scoped_resources
        __props__.__dict__["state"] = state
        __props__.__dict__["tags"] = tags
        __props__.__dict__["target"] = target
        __props__.__dict__["updated_at"] = updated_at
        return SchematicsPolicy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def account(self) -> pulumi.Output[_builtins.str]:
        """
        The Account id.
        """
        return pulumi.get(self, "account")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The policy creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[_builtins.str]:
        """
        The user who created the policy.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The policy CRN.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The description of Schematics customization policy.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def kind(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Policy kind or categories for managing and deriving policy decision * `agent_assignment_policy` Agent assignment policy
        for job execution.
        """
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Output[_builtins.str]:
        """
        List of locations supported by IBM Cloud Schematics service. While creating your workspace or action, choose the right
        region, since it cannot be changed. Note, this does not limit the location of the IBM Cloud resources, provisioned using
        Schematics.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of Schematics customization policy.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def parameter(self) -> pulumi.Output[Optional['outputs.SchematicsPolicyParameter']]:
        """
        The parameter to tune the Schematics policy.
        """
        return pulumi.get(self, "parameter")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Output[_builtins.str]:
        """
        The resource group name for the policy. By default, Policy will be created in `default` Resource Group.
        """
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="schematicsPolicyId")
    def schematics_policy_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "schematics_policy_id")

    @_builtins.property
    @pulumi.getter(name="scopedResources")
    def scoped_resources(self) -> pulumi.Output[Optional[Sequence['outputs.SchematicsPolicyScopedResource']]]:
        """
        List of scoped Schematics resources targeted by the policy.
        """
        return pulumi.get(self, "scoped_resources")

    @_builtins.property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional['outputs.SchematicsPolicyState']]:
        """
        User defined status of the Schematics object.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Tags for the Schematics customization policy.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def target(self) -> pulumi.Output[Optional['outputs.SchematicsPolicyTarget']]:
        """
        The objects for the Schematics policy.
        """
        return pulumi.get(self, "target")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The policy updation time.
        """
        return pulumi.get(self, "updated_at")

