# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSccReportEvaluationsResult',
    'AwaitableGetSccReportEvaluationsResult',
    'get_scc_report_evaluations',
    'get_scc_report_evaluations_output',
]

@pulumi.output_type
class GetSccReportEvaluationsResult:
    """
    A collection of values returned by getSccReportEvaluations.
    """
    def __init__(__self__, assessment_id=None, component_id=None, evaluations=None, firsts=None, home_account_id=None, id=None, instance_id=None, report_id=None, status=None, target_id=None, target_name=None):
        if assessment_id and not isinstance(assessment_id, str):
            raise TypeError("Expected argument 'assessment_id' to be a str")
        pulumi.set(__self__, "assessment_id", assessment_id)
        if component_id and not isinstance(component_id, str):
            raise TypeError("Expected argument 'component_id' to be a str")
        pulumi.set(__self__, "component_id", component_id)
        if evaluations and not isinstance(evaluations, list):
            raise TypeError("Expected argument 'evaluations' to be a list")
        pulumi.set(__self__, "evaluations", evaluations)
        if firsts and not isinstance(firsts, list):
            raise TypeError("Expected argument 'firsts' to be a list")
        pulumi.set(__self__, "firsts", firsts)
        if home_account_id and not isinstance(home_account_id, str):
            raise TypeError("Expected argument 'home_account_id' to be a str")
        pulumi.set(__self__, "home_account_id", home_account_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if report_id and not isinstance(report_id, str):
            raise TypeError("Expected argument 'report_id' to be a str")
        pulumi.set(__self__, "report_id", report_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if target_id and not isinstance(target_id, str):
            raise TypeError("Expected argument 'target_id' to be a str")
        pulumi.set(__self__, "target_id", target_id)
        if target_name and not isinstance(target_name, str):
            raise TypeError("Expected argument 'target_name' to be a str")
        pulumi.set(__self__, "target_name", target_name)

    @_builtins.property
    @pulumi.getter(name="assessmentId")
    def assessment_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "assessment_id")

    @_builtins.property
    @pulumi.getter(name="componentId")
    def component_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "component_id")

    @_builtins.property
    @pulumi.getter
    def evaluations(self) -> Sequence['outputs.GetSccReportEvaluationsEvaluationResult']:
        return pulumi.get(self, "evaluations")

    @_builtins.property
    @pulumi.getter
    def firsts(self) -> Sequence['outputs.GetSccReportEvaluationsFirstResult']:
        return pulumi.get(self, "firsts")

    @_builtins.property
    @pulumi.getter(name="homeAccountId")
    def home_account_id(self) -> _builtins.str:
        return pulumi.get(self, "home_account_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="reportId")
    def report_id(self) -> _builtins.str:
        return pulumi.get(self, "report_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="targetName")
    def target_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "target_name")


class AwaitableGetSccReportEvaluationsResult(GetSccReportEvaluationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSccReportEvaluationsResult(
            assessment_id=self.assessment_id,
            component_id=self.component_id,
            evaluations=self.evaluations,
            firsts=self.firsts,
            home_account_id=self.home_account_id,
            id=self.id,
            instance_id=self.instance_id,
            report_id=self.report_id,
            status=self.status,
            target_id=self.target_id,
            target_name=self.target_name)


def get_scc_report_evaluations(assessment_id: Optional[_builtins.str] = None,
                               component_id: Optional[_builtins.str] = None,
                               id: Optional[_builtins.str] = None,
                               instance_id: Optional[_builtins.str] = None,
                               report_id: Optional[_builtins.str] = None,
                               status: Optional[_builtins.str] = None,
                               target_id: Optional[_builtins.str] = None,
                               target_name: Optional[_builtins.str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSccReportEvaluationsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['assessmentId'] = assessment_id
    __args__['componentId'] = component_id
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['reportId'] = report_id
    __args__['status'] = status
    __args__['targetId'] = target_id
    __args__['targetName'] = target_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSccReportEvaluations:getSccReportEvaluations', __args__, opts=opts, typ=GetSccReportEvaluationsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSccReportEvaluationsResult(
        assessment_id=pulumi.get(__ret__, 'assessment_id'),
        component_id=pulumi.get(__ret__, 'component_id'),
        evaluations=pulumi.get(__ret__, 'evaluations'),
        firsts=pulumi.get(__ret__, 'firsts'),
        home_account_id=pulumi.get(__ret__, 'home_account_id'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        report_id=pulumi.get(__ret__, 'report_id'),
        status=pulumi.get(__ret__, 'status'),
        target_id=pulumi.get(__ret__, 'target_id'),
        target_name=pulumi.get(__ret__, 'target_name'))
def get_scc_report_evaluations_output(assessment_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      component_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                      report_id: Optional[pulumi.Input[_builtins.str]] = None,
                                      status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      target_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      target_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSccReportEvaluationsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['assessmentId'] = assessment_id
    __args__['componentId'] = component_id
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['reportId'] = report_id
    __args__['status'] = status
    __args__['targetId'] = target_id
    __args__['targetName'] = target_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSccReportEvaluations:getSccReportEvaluations', __args__, opts=opts, typ=GetSccReportEvaluationsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSccReportEvaluationsResult(
        assessment_id=pulumi.get(__response__, 'assessment_id'),
        component_id=pulumi.get(__response__, 'component_id'),
        evaluations=pulumi.get(__response__, 'evaluations'),
        firsts=pulumi.get(__response__, 'firsts'),
        home_account_id=pulumi.get(__response__, 'home_account_id'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        report_id=pulumi.get(__response__, 'report_id'),
        status=pulumi.get(__response__, 'status'),
        target_id=pulumi.get(__response__, 'target_id'),
        target_name=pulumi.get(__response__, 'target_name')))
