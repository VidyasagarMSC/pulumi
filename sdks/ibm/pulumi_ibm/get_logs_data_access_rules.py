# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetLogsDataAccessRulesResult',
    'AwaitableGetLogsDataAccessRulesResult',
    'get_logs_data_access_rules',
    'get_logs_data_access_rules_output',
]

@pulumi.output_type
class GetLogsDataAccessRulesResult:
    """
    A collection of values returned by getLogsDataAccessRules.
    """
    def __init__(__self__, data_access_rules=None, endpoint_type=None, id=None, instance_id=None, logs_data_access_rules_ids=None, region=None):
        if data_access_rules and not isinstance(data_access_rules, list):
            raise TypeError("Expected argument 'data_access_rules' to be a list")
        pulumi.set(__self__, "data_access_rules", data_access_rules)
        if endpoint_type and not isinstance(endpoint_type, str):
            raise TypeError("Expected argument 'endpoint_type' to be a str")
        pulumi.set(__self__, "endpoint_type", endpoint_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if logs_data_access_rules_ids and not isinstance(logs_data_access_rules_ids, list):
            raise TypeError("Expected argument 'logs_data_access_rules_ids' to be a list")
        pulumi.set(__self__, "logs_data_access_rules_ids", logs_data_access_rules_ids)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="dataAccessRules")
    def data_access_rules(self) -> Sequence['outputs.GetLogsDataAccessRulesDataAccessRuleResult']:
        return pulumi.get(self, "data_access_rules")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="logsDataAccessRulesIds")
    def logs_data_access_rules_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "logs_data_access_rules_ids")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetLogsDataAccessRulesResult(GetLogsDataAccessRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLogsDataAccessRulesResult(
            data_access_rules=self.data_access_rules,
            endpoint_type=self.endpoint_type,
            id=self.id,
            instance_id=self.instance_id,
            logs_data_access_rules_ids=self.logs_data_access_rules_ids,
            region=self.region)


def get_logs_data_access_rules(endpoint_type: Optional[_builtins.str] = None,
                               id: Optional[_builtins.str] = None,
                               instance_id: Optional[_builtins.str] = None,
                               logs_data_access_rules_ids: Optional[Sequence[_builtins.str]] = None,
                               region: Optional[_builtins.str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLogsDataAccessRulesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['logsDataAccessRulesIds'] = logs_data_access_rules_ids
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getLogsDataAccessRules:getLogsDataAccessRules', __args__, opts=opts, typ=GetLogsDataAccessRulesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetLogsDataAccessRulesResult(
        data_access_rules=pulumi.get(__ret__, 'data_access_rules'),
        endpoint_type=pulumi.get(__ret__, 'endpoint_type'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        logs_data_access_rules_ids=pulumi.get(__ret__, 'logs_data_access_rules_ids'),
        region=pulumi.get(__ret__, 'region'))
def get_logs_data_access_rules_output(endpoint_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                      logs_data_access_rules_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                      region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetLogsDataAccessRulesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['logsDataAccessRulesIds'] = logs_data_access_rules_ids
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getLogsDataAccessRules:getLogsDataAccessRules', __args__, opts=opts, typ=GetLogsDataAccessRulesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetLogsDataAccessRulesResult(
        data_access_rules=pulumi.get(__response__, 'data_access_rules'),
        endpoint_type=pulumi.get(__response__, 'endpoint_type'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        logs_data_access_rules_ids=pulumi.get(__response__, 'logs_data_access_rules_ids'),
        region=pulumi.get(__response__, 'region')))
