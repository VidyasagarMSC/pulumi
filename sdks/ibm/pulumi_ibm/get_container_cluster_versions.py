# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetContainerClusterVersionsResult',
    'AwaitableGetContainerClusterVersionsResult',
    'get_container_cluster_versions',
    'get_container_cluster_versions_output',
]

@pulumi.output_type
class GetContainerClusterVersionsResult:
    """
    A collection of values returned by getContainerClusterVersions.
    """
    def __init__(__self__, account_guid=None, default_kube_version=None, default_openshift_version=None, id=None, org_guid=None, region=None, resource_group_id=None, space_guid=None, valid_kube_versions=None, valid_openshift_versions=None):
        if account_guid and not isinstance(account_guid, str):
            raise TypeError("Expected argument 'account_guid' to be a str")
        pulumi.set(__self__, "account_guid", account_guid)
        if default_kube_version and not isinstance(default_kube_version, str):
            raise TypeError("Expected argument 'default_kube_version' to be a str")
        pulumi.set(__self__, "default_kube_version", default_kube_version)
        if default_openshift_version and not isinstance(default_openshift_version, str):
            raise TypeError("Expected argument 'default_openshift_version' to be a str")
        pulumi.set(__self__, "default_openshift_version", default_openshift_version)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if org_guid and not isinstance(org_guid, str):
            raise TypeError("Expected argument 'org_guid' to be a str")
        pulumi.set(__self__, "org_guid", org_guid)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_group_id and not isinstance(resource_group_id, str):
            raise TypeError("Expected argument 'resource_group_id' to be a str")
        pulumi.set(__self__, "resource_group_id", resource_group_id)
        if space_guid and not isinstance(space_guid, str):
            raise TypeError("Expected argument 'space_guid' to be a str")
        pulumi.set(__self__, "space_guid", space_guid)
        if valid_kube_versions and not isinstance(valid_kube_versions, list):
            raise TypeError("Expected argument 'valid_kube_versions' to be a list")
        pulumi.set(__self__, "valid_kube_versions", valid_kube_versions)
        if valid_openshift_versions and not isinstance(valid_openshift_versions, list):
            raise TypeError("Expected argument 'valid_openshift_versions' to be a list")
        pulumi.set(__self__, "valid_openshift_versions", valid_openshift_versions)

    @_builtins.property
    @pulumi.getter(name="accountGuid")
    @_utilities.deprecated("""Deprecated""")
    def account_guid(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "account_guid")

    @_builtins.property
    @pulumi.getter(name="defaultKubeVersion")
    def default_kube_version(self) -> _builtins.str:
        return pulumi.get(self, "default_kube_version")

    @_builtins.property
    @pulumi.getter(name="defaultOpenshiftVersion")
    def default_openshift_version(self) -> _builtins.str:
        return pulumi.get(self, "default_openshift_version")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="orgGuid")
    @_utilities.deprecated("""Deprecated""")
    def org_guid(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "org_guid")

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def region(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter(name="spaceGuid")
    @_utilities.deprecated("""Deprecated""")
    def space_guid(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "space_guid")

    @_builtins.property
    @pulumi.getter(name="validKubeVersions")
    def valid_kube_versions(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "valid_kube_versions")

    @_builtins.property
    @pulumi.getter(name="validOpenshiftVersions")
    def valid_openshift_versions(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "valid_openshift_versions")


class AwaitableGetContainerClusterVersionsResult(GetContainerClusterVersionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetContainerClusterVersionsResult(
            account_guid=self.account_guid,
            default_kube_version=self.default_kube_version,
            default_openshift_version=self.default_openshift_version,
            id=self.id,
            org_guid=self.org_guid,
            region=self.region,
            resource_group_id=self.resource_group_id,
            space_guid=self.space_guid,
            valid_kube_versions=self.valid_kube_versions,
            valid_openshift_versions=self.valid_openshift_versions)


def get_container_cluster_versions(account_guid: Optional[_builtins.str] = None,
                                   id: Optional[_builtins.str] = None,
                                   org_guid: Optional[_builtins.str] = None,
                                   region: Optional[_builtins.str] = None,
                                   resource_group_id: Optional[_builtins.str] = None,
                                   space_guid: Optional[_builtins.str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetContainerClusterVersionsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountGuid'] = account_guid
    __args__['id'] = id
    __args__['orgGuid'] = org_guid
    __args__['region'] = region
    __args__['resourceGroupId'] = resource_group_id
    __args__['spaceGuid'] = space_guid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getContainerClusterVersions:getContainerClusterVersions', __args__, opts=opts, typ=GetContainerClusterVersionsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetContainerClusterVersionsResult(
        account_guid=pulumi.get(__ret__, 'account_guid'),
        default_kube_version=pulumi.get(__ret__, 'default_kube_version'),
        default_openshift_version=pulumi.get(__ret__, 'default_openshift_version'),
        id=pulumi.get(__ret__, 'id'),
        org_guid=pulumi.get(__ret__, 'org_guid'),
        region=pulumi.get(__ret__, 'region'),
        resource_group_id=pulumi.get(__ret__, 'resource_group_id'),
        space_guid=pulumi.get(__ret__, 'space_guid'),
        valid_kube_versions=pulumi.get(__ret__, 'valid_kube_versions'),
        valid_openshift_versions=pulumi.get(__ret__, 'valid_openshift_versions'))
def get_container_cluster_versions_output(account_guid: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          org_guid: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          resource_group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          space_guid: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetContainerClusterVersionsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountGuid'] = account_guid
    __args__['id'] = id
    __args__['orgGuid'] = org_guid
    __args__['region'] = region
    __args__['resourceGroupId'] = resource_group_id
    __args__['spaceGuid'] = space_guid
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getContainerClusterVersions:getContainerClusterVersions', __args__, opts=opts, typ=GetContainerClusterVersionsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetContainerClusterVersionsResult(
        account_guid=pulumi.get(__response__, 'account_guid'),
        default_kube_version=pulumi.get(__response__, 'default_kube_version'),
        default_openshift_version=pulumi.get(__response__, 'default_openshift_version'),
        id=pulumi.get(__response__, 'id'),
        org_guid=pulumi.get(__response__, 'org_guid'),
        region=pulumi.get(__response__, 'region'),
        resource_group_id=pulumi.get(__response__, 'resource_group_id'),
        space_guid=pulumi.get(__response__, 'space_guid'),
        valid_kube_versions=pulumi.get(__response__, 'valid_kube_versions'),
        valid_openshift_versions=pulumi.get(__response__, 'valid_openshift_versions')))
