# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CdTektonPipelineDefinitionInitArgs', 'CdTektonPipelineDefinition']

@pulumi.input_type
class CdTektonPipelineDefinitionInitArgs:
    def __init__(__self__, *,
                 pipeline_id: pulumi.Input[_builtins.str],
                 source: pulumi.Input['CdTektonPipelineDefinitionSourceArgs'],
                 cd_tekton_pipeline_definition_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CdTektonPipelineDefinition resource.
        :param pulumi.Input[_builtins.str] pipeline_id: The Tekton pipeline ID.
        :param pulumi.Input['CdTektonPipelineDefinitionSourceArgs'] source: Source repository containing the Tekton pipeline definition.
        """
        pulumi.set(__self__, "pipeline_id", pipeline_id)
        pulumi.set(__self__, "source", source)
        if cd_tekton_pipeline_definition_id is not None:
            pulumi.set(__self__, "cd_tekton_pipeline_definition_id", cd_tekton_pipeline_definition_id)

    @_builtins.property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> pulumi.Input[_builtins.str]:
        """
        The Tekton pipeline ID.
        """
        return pulumi.get(self, "pipeline_id")

    @pipeline_id.setter
    def pipeline_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pipeline_id", value)

    @_builtins.property
    @pulumi.getter
    def source(self) -> pulumi.Input['CdTektonPipelineDefinitionSourceArgs']:
        """
        Source repository containing the Tekton pipeline definition.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input['CdTektonPipelineDefinitionSourceArgs']):
        pulumi.set(self, "source", value)

    @_builtins.property
    @pulumi.getter(name="cdTektonPipelineDefinitionId")
    def cd_tekton_pipeline_definition_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cd_tekton_pipeline_definition_id")

    @cd_tekton_pipeline_definition_id.setter
    def cd_tekton_pipeline_definition_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cd_tekton_pipeline_definition_id", value)


@pulumi.input_type
class _CdTektonPipelineDefinitionState:
    def __init__(__self__, *,
                 cd_tekton_pipeline_definition_id: Optional[pulumi.Input[_builtins.str]] = None,
                 definition_id: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source: Optional[pulumi.Input['CdTektonPipelineDefinitionSourceArgs']] = None):
        """
        Input properties used for looking up and filtering CdTektonPipelineDefinition resources.
        :param pulumi.Input[_builtins.str] definition_id: The aggregated definition ID.
        :param pulumi.Input[_builtins.str] href: API URL for interacting with the definition.
        :param pulumi.Input[_builtins.str] pipeline_id: The Tekton pipeline ID.
        :param pulumi.Input['CdTektonPipelineDefinitionSourceArgs'] source: Source repository containing the Tekton pipeline definition.
        """
        if cd_tekton_pipeline_definition_id is not None:
            pulumi.set(__self__, "cd_tekton_pipeline_definition_id", cd_tekton_pipeline_definition_id)
        if definition_id is not None:
            pulumi.set(__self__, "definition_id", definition_id)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if pipeline_id is not None:
            pulumi.set(__self__, "pipeline_id", pipeline_id)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @_builtins.property
    @pulumi.getter(name="cdTektonPipelineDefinitionId")
    def cd_tekton_pipeline_definition_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cd_tekton_pipeline_definition_id")

    @cd_tekton_pipeline_definition_id.setter
    def cd_tekton_pipeline_definition_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cd_tekton_pipeline_definition_id", value)

    @_builtins.property
    @pulumi.getter(name="definitionId")
    def definition_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The aggregated definition ID.
        """
        return pulumi.get(self, "definition_id")

    @definition_id.setter
    def definition_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "definition_id", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        API URL for interacting with the definition.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Tekton pipeline ID.
        """
        return pulumi.get(self, "pipeline_id")

    @pipeline_id.setter
    def pipeline_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pipeline_id", value)

    @_builtins.property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input['CdTektonPipelineDefinitionSourceArgs']]:
        """
        Source repository containing the Tekton pipeline definition.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input['CdTektonPipelineDefinitionSourceArgs']]):
        pulumi.set(self, "source", value)


@pulumi.type_token("ibm:index/cdTektonPipelineDefinition:CdTektonPipelineDefinition")
class CdTektonPipelineDefinition(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cd_tekton_pipeline_definition_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source: Optional[pulumi.Input[Union['CdTektonPipelineDefinitionSourceArgs', 'CdTektonPipelineDefinitionSourceArgsDict']]] = None,
                 __props__=None):
        """
        Create a CdTektonPipelineDefinition resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] pipeline_id: The Tekton pipeline ID.
        :param pulumi.Input[Union['CdTektonPipelineDefinitionSourceArgs', 'CdTektonPipelineDefinitionSourceArgsDict']] source: Source repository containing the Tekton pipeline definition.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CdTektonPipelineDefinitionInitArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CdTektonPipelineDefinition resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CdTektonPipelineDefinitionInitArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CdTektonPipelineDefinitionInitArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cd_tekton_pipeline_definition_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source: Optional[pulumi.Input[Union['CdTektonPipelineDefinitionSourceArgs', 'CdTektonPipelineDefinitionSourceArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CdTektonPipelineDefinitionInitArgs.__new__(CdTektonPipelineDefinitionInitArgs)

            __props__.__dict__["cd_tekton_pipeline_definition_id"] = cd_tekton_pipeline_definition_id
            if pipeline_id is None and not opts.urn:
                raise TypeError("Missing required property 'pipeline_id'")
            __props__.__dict__["pipeline_id"] = pipeline_id
            if source is None and not opts.urn:
                raise TypeError("Missing required property 'source'")
            __props__.__dict__["source"] = source
            __props__.__dict__["definition_id"] = None
            __props__.__dict__["href"] = None
        super(CdTektonPipelineDefinition, __self__).__init__(
            'ibm:index/cdTektonPipelineDefinition:CdTektonPipelineDefinition',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cd_tekton_pipeline_definition_id: Optional[pulumi.Input[_builtins.str]] = None,
            definition_id: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
            source: Optional[pulumi.Input[Union['CdTektonPipelineDefinitionSourceArgs', 'CdTektonPipelineDefinitionSourceArgsDict']]] = None) -> 'CdTektonPipelineDefinition':
        """
        Get an existing CdTektonPipelineDefinition resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] definition_id: The aggregated definition ID.
        :param pulumi.Input[_builtins.str] href: API URL for interacting with the definition.
        :param pulumi.Input[_builtins.str] pipeline_id: The Tekton pipeline ID.
        :param pulumi.Input[Union['CdTektonPipelineDefinitionSourceArgs', 'CdTektonPipelineDefinitionSourceArgsDict']] source: Source repository containing the Tekton pipeline definition.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CdTektonPipelineDefinitionState.__new__(_CdTektonPipelineDefinitionState)

        __props__.__dict__["cd_tekton_pipeline_definition_id"] = cd_tekton_pipeline_definition_id
        __props__.__dict__["definition_id"] = definition_id
        __props__.__dict__["href"] = href
        __props__.__dict__["pipeline_id"] = pipeline_id
        __props__.__dict__["source"] = source
        return CdTektonPipelineDefinition(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="cdTektonPipelineDefinitionId")
    def cd_tekton_pipeline_definition_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cd_tekton_pipeline_definition_id")

    @_builtins.property
    @pulumi.getter(name="definitionId")
    def definition_id(self) -> pulumi.Output[_builtins.str]:
        """
        The aggregated definition ID.
        """
        return pulumi.get(self, "definition_id")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        API URL for interacting with the definition.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> pulumi.Output[_builtins.str]:
        """
        The Tekton pipeline ID.
        """
        return pulumi.get(self, "pipeline_id")

    @_builtins.property
    @pulumi.getter
    def source(self) -> pulumi.Output['outputs.CdTektonPipelineDefinitionSource']:
        """
        Source repository containing the Tekton pipeline definition.
        """
        return pulumi.get(self, "source")

