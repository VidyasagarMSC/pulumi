# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetContainerVpcClusterWorkerResult',
    'AwaitableGetContainerVpcClusterWorkerResult',
    'get_container_vpc_cluster_worker',
    'get_container_vpc_cluster_worker_output',
]

@pulumi.output_type
class GetContainerVpcClusterWorkerResult:
    """
    A collection of values returned by getContainerVpcClusterWorker.
    """
    def __init__(__self__, cluster_name_id=None, flavor=None, host_pool_id=None, id=None, kube_version=None, network_interfaces=None, pool_id=None, pool_name=None, resource_controller_url=None, resource_group_id=None, state=None, worker_id=None):
        if cluster_name_id and not isinstance(cluster_name_id, str):
            raise TypeError("Expected argument 'cluster_name_id' to be a str")
        pulumi.set(__self__, "cluster_name_id", cluster_name_id)
        if flavor and not isinstance(flavor, str):
            raise TypeError("Expected argument 'flavor' to be a str")
        pulumi.set(__self__, "flavor", flavor)
        if host_pool_id and not isinstance(host_pool_id, str):
            raise TypeError("Expected argument 'host_pool_id' to be a str")
        pulumi.set(__self__, "host_pool_id", host_pool_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if kube_version and not isinstance(kube_version, str):
            raise TypeError("Expected argument 'kube_version' to be a str")
        pulumi.set(__self__, "kube_version", kube_version)
        if network_interfaces and not isinstance(network_interfaces, list):
            raise TypeError("Expected argument 'network_interfaces' to be a list")
        pulumi.set(__self__, "network_interfaces", network_interfaces)
        if pool_id and not isinstance(pool_id, str):
            raise TypeError("Expected argument 'pool_id' to be a str")
        pulumi.set(__self__, "pool_id", pool_id)
        if pool_name and not isinstance(pool_name, str):
            raise TypeError("Expected argument 'pool_name' to be a str")
        pulumi.set(__self__, "pool_name", pool_name)
        if resource_controller_url and not isinstance(resource_controller_url, str):
            raise TypeError("Expected argument 'resource_controller_url' to be a str")
        pulumi.set(__self__, "resource_controller_url", resource_controller_url)
        if resource_group_id and not isinstance(resource_group_id, str):
            raise TypeError("Expected argument 'resource_group_id' to be a str")
        pulumi.set(__self__, "resource_group_id", resource_group_id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if worker_id and not isinstance(worker_id, str):
            raise TypeError("Expected argument 'worker_id' to be a str")
        pulumi.set(__self__, "worker_id", worker_id)

    @_builtins.property
    @pulumi.getter(name="clusterNameId")
    def cluster_name_id(self) -> _builtins.str:
        return pulumi.get(self, "cluster_name_id")

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> _builtins.str:
        return pulumi.get(self, "flavor")

    @_builtins.property
    @pulumi.getter(name="hostPoolId")
    def host_pool_id(self) -> _builtins.str:
        return pulumi.get(self, "host_pool_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="kubeVersion")
    def kube_version(self) -> _builtins.str:
        return pulumi.get(self, "kube_version")

    @_builtins.property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Sequence['outputs.GetContainerVpcClusterWorkerNetworkInterfaceResult']:
        return pulumi.get(self, "network_interfaces")

    @_builtins.property
    @pulumi.getter(name="poolId")
    def pool_id(self) -> _builtins.str:
        return pulumi.get(self, "pool_id")

    @_builtins.property
    @pulumi.getter(name="poolName")
    def pool_name(self) -> _builtins.str:
        return pulumi.get(self, "pool_name")

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> _builtins.str:
        return pulumi.get(self, "resource_controller_url")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="workerId")
    def worker_id(self) -> _builtins.str:
        return pulumi.get(self, "worker_id")


class AwaitableGetContainerVpcClusterWorkerResult(GetContainerVpcClusterWorkerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetContainerVpcClusterWorkerResult(
            cluster_name_id=self.cluster_name_id,
            flavor=self.flavor,
            host_pool_id=self.host_pool_id,
            id=self.id,
            kube_version=self.kube_version,
            network_interfaces=self.network_interfaces,
            pool_id=self.pool_id,
            pool_name=self.pool_name,
            resource_controller_url=self.resource_controller_url,
            resource_group_id=self.resource_group_id,
            state=self.state,
            worker_id=self.worker_id)


def get_container_vpc_cluster_worker(cluster_name_id: Optional[_builtins.str] = None,
                                     id: Optional[_builtins.str] = None,
                                     resource_group_id: Optional[_builtins.str] = None,
                                     worker_id: Optional[_builtins.str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetContainerVpcClusterWorkerResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clusterNameId'] = cluster_name_id
    __args__['id'] = id
    __args__['resourceGroupId'] = resource_group_id
    __args__['workerId'] = worker_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getContainerVpcClusterWorker:getContainerVpcClusterWorker', __args__, opts=opts, typ=GetContainerVpcClusterWorkerResult, package_ref=_utilities.get_package()).value

    return AwaitableGetContainerVpcClusterWorkerResult(
        cluster_name_id=pulumi.get(__ret__, 'cluster_name_id'),
        flavor=pulumi.get(__ret__, 'flavor'),
        host_pool_id=pulumi.get(__ret__, 'host_pool_id'),
        id=pulumi.get(__ret__, 'id'),
        kube_version=pulumi.get(__ret__, 'kube_version'),
        network_interfaces=pulumi.get(__ret__, 'network_interfaces'),
        pool_id=pulumi.get(__ret__, 'pool_id'),
        pool_name=pulumi.get(__ret__, 'pool_name'),
        resource_controller_url=pulumi.get(__ret__, 'resource_controller_url'),
        resource_group_id=pulumi.get(__ret__, 'resource_group_id'),
        state=pulumi.get(__ret__, 'state'),
        worker_id=pulumi.get(__ret__, 'worker_id'))
def get_container_vpc_cluster_worker_output(cluster_name_id: Optional[pulumi.Input[_builtins.str]] = None,
                                            id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            resource_group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            worker_id: Optional[pulumi.Input[_builtins.str]] = None,
                                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetContainerVpcClusterWorkerResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clusterNameId'] = cluster_name_id
    __args__['id'] = id
    __args__['resourceGroupId'] = resource_group_id
    __args__['workerId'] = worker_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getContainerVpcClusterWorker:getContainerVpcClusterWorker', __args__, opts=opts, typ=GetContainerVpcClusterWorkerResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetContainerVpcClusterWorkerResult(
        cluster_name_id=pulumi.get(__response__, 'cluster_name_id'),
        flavor=pulumi.get(__response__, 'flavor'),
        host_pool_id=pulumi.get(__response__, 'host_pool_id'),
        id=pulumi.get(__response__, 'id'),
        kube_version=pulumi.get(__response__, 'kube_version'),
        network_interfaces=pulumi.get(__response__, 'network_interfaces'),
        pool_id=pulumi.get(__response__, 'pool_id'),
        pool_name=pulumi.get(__response__, 'pool_name'),
        resource_controller_url=pulumi.get(__response__, 'resource_controller_url'),
        resource_group_id=pulumi.get(__response__, 'resource_group_id'),
        state=pulumi.get(__response__, 'state'),
        worker_id=pulumi.get(__response__, 'worker_id')))
