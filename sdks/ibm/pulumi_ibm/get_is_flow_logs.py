# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsFlowLogsResult',
    'AwaitableGetIsFlowLogsResult',
    'get_is_flow_logs',
    'get_is_flow_logs_output',
]

@pulumi.output_type
class GetIsFlowLogsResult:
    """
    A collection of values returned by getIsFlowLogs.
    """
    def __init__(__self__, flow_log_collectors=None, id=None, name=None, resource_group=None, target=None, target_resource_type=None, vpc=None, vpc_crn=None, vpc_name=None):
        if flow_log_collectors and not isinstance(flow_log_collectors, list):
            raise TypeError("Expected argument 'flow_log_collectors' to be a list")
        pulumi.set(__self__, "flow_log_collectors", flow_log_collectors)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resource_group and not isinstance(resource_group, str):
            raise TypeError("Expected argument 'resource_group' to be a str")
        pulumi.set(__self__, "resource_group", resource_group)
        if target and not isinstance(target, str):
            raise TypeError("Expected argument 'target' to be a str")
        pulumi.set(__self__, "target", target)
        if target_resource_type and not isinstance(target_resource_type, str):
            raise TypeError("Expected argument 'target_resource_type' to be a str")
        pulumi.set(__self__, "target_resource_type", target_resource_type)
        if vpc and not isinstance(vpc, str):
            raise TypeError("Expected argument 'vpc' to be a str")
        pulumi.set(__self__, "vpc", vpc)
        if vpc_crn and not isinstance(vpc_crn, str):
            raise TypeError("Expected argument 'vpc_crn' to be a str")
        pulumi.set(__self__, "vpc_crn", vpc_crn)
        if vpc_name and not isinstance(vpc_name, str):
            raise TypeError("Expected argument 'vpc_name' to be a str")
        pulumi.set(__self__, "vpc_name", vpc_name)

    @_builtins.property
    @pulumi.getter(name="flowLogCollectors")
    def flow_log_collectors(self) -> Sequence['outputs.GetIsFlowLogsFlowLogCollectorResult']:
        return pulumi.get(self, "flow_log_collectors")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter
    def target(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "target")

    @_builtins.property
    @pulumi.getter(name="targetResourceType")
    def target_resource_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "target_resource_type")

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vpc")

    @_builtins.property
    @pulumi.getter(name="vpcCrn")
    def vpc_crn(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vpc_crn")

    @_builtins.property
    @pulumi.getter(name="vpcName")
    def vpc_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vpc_name")


class AwaitableGetIsFlowLogsResult(GetIsFlowLogsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsFlowLogsResult(
            flow_log_collectors=self.flow_log_collectors,
            id=self.id,
            name=self.name,
            resource_group=self.resource_group,
            target=self.target,
            target_resource_type=self.target_resource_type,
            vpc=self.vpc,
            vpc_crn=self.vpc_crn,
            vpc_name=self.vpc_name)


def get_is_flow_logs(id: Optional[_builtins.str] = None,
                     name: Optional[_builtins.str] = None,
                     resource_group: Optional[_builtins.str] = None,
                     target: Optional[_builtins.str] = None,
                     target_resource_type: Optional[_builtins.str] = None,
                     vpc: Optional[_builtins.str] = None,
                     vpc_crn: Optional[_builtins.str] = None,
                     vpc_name: Optional[_builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsFlowLogsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['resourceGroup'] = resource_group
    __args__['target'] = target
    __args__['targetResourceType'] = target_resource_type
    __args__['vpc'] = vpc
    __args__['vpcCrn'] = vpc_crn
    __args__['vpcName'] = vpc_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsFlowLogs:getIsFlowLogs', __args__, opts=opts, typ=GetIsFlowLogsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsFlowLogsResult(
        flow_log_collectors=pulumi.get(__ret__, 'flow_log_collectors'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        resource_group=pulumi.get(__ret__, 'resource_group'),
        target=pulumi.get(__ret__, 'target'),
        target_resource_type=pulumi.get(__ret__, 'target_resource_type'),
        vpc=pulumi.get(__ret__, 'vpc'),
        vpc_crn=pulumi.get(__ret__, 'vpc_crn'),
        vpc_name=pulumi.get(__ret__, 'vpc_name'))
def get_is_flow_logs_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            resource_group: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            target: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            target_resource_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            vpc: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            vpc_crn: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            vpc_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsFlowLogsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['resourceGroup'] = resource_group
    __args__['target'] = target
    __args__['targetResourceType'] = target_resource_type
    __args__['vpc'] = vpc
    __args__['vpcCrn'] = vpc_crn
    __args__['vpcName'] = vpc_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsFlowLogs:getIsFlowLogs', __args__, opts=opts, typ=GetIsFlowLogsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsFlowLogsResult(
        flow_log_collectors=pulumi.get(__response__, 'flow_log_collectors'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        resource_group=pulumi.get(__response__, 'resource_group'),
        target=pulumi.get(__response__, 'target'),
        target_resource_type=pulumi.get(__response__, 'target_resource_type'),
        vpc=pulumi.get(__response__, 'vpc'),
        vpc_crn=pulumi.get(__response__, 'vpc_crn'),
        vpc_name=pulumi.get(__response__, 'vpc_name')))
