# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCbrRuleResult',
    'AwaitableGetCbrRuleResult',
    'get_cbr_rule',
    'get_cbr_rule_output',
]

@pulumi.output_type
class GetCbrRuleResult:
    """
    A collection of values returned by getCbrRule.
    """
    def __init__(__self__, contexts=None, created_at=None, created_by_id=None, crn=None, description=None, enforcement_mode=None, href=None, id=None, last_modified_at=None, last_modified_by_id=None, operations=None, resources=None, rule_id=None):
        if contexts and not isinstance(contexts, list):
            raise TypeError("Expected argument 'contexts' to be a list")
        pulumi.set(__self__, "contexts", contexts)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if created_by_id and not isinstance(created_by_id, str):
            raise TypeError("Expected argument 'created_by_id' to be a str")
        pulumi.set(__self__, "created_by_id", created_by_id)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if enforcement_mode and not isinstance(enforcement_mode, str):
            raise TypeError("Expected argument 'enforcement_mode' to be a str")
        pulumi.set(__self__, "enforcement_mode", enforcement_mode)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_modified_at and not isinstance(last_modified_at, str):
            raise TypeError("Expected argument 'last_modified_at' to be a str")
        pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by_id and not isinstance(last_modified_by_id, str):
            raise TypeError("Expected argument 'last_modified_by_id' to be a str")
        pulumi.set(__self__, "last_modified_by_id", last_modified_by_id)
        if operations and not isinstance(operations, list):
            raise TypeError("Expected argument 'operations' to be a list")
        pulumi.set(__self__, "operations", operations)
        if resources and not isinstance(resources, list):
            raise TypeError("Expected argument 'resources' to be a list")
        pulumi.set(__self__, "resources", resources)
        if rule_id and not isinstance(rule_id, str):
            raise TypeError("Expected argument 'rule_id' to be a str")
        pulumi.set(__self__, "rule_id", rule_id)

    @_builtins.property
    @pulumi.getter
    def contexts(self) -> Sequence['outputs.GetCbrRuleContextResult']:
        return pulumi.get(self, "contexts")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdById")
    def created_by_id(self) -> _builtins.str:
        return pulumi.get(self, "created_by_id")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enforcementMode")
    def enforcement_mode(self) -> _builtins.str:
        return pulumi.get(self, "enforcement_mode")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> _builtins.str:
        return pulumi.get(self, "last_modified_at")

    @_builtins.property
    @pulumi.getter(name="lastModifiedById")
    def last_modified_by_id(self) -> _builtins.str:
        return pulumi.get(self, "last_modified_by_id")

    @_builtins.property
    @pulumi.getter
    def operations(self) -> Sequence['outputs.GetCbrRuleOperationResult']:
        return pulumi.get(self, "operations")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetCbrRuleResourceResult']:
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> _builtins.str:
        return pulumi.get(self, "rule_id")


class AwaitableGetCbrRuleResult(GetCbrRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCbrRuleResult(
            contexts=self.contexts,
            created_at=self.created_at,
            created_by_id=self.created_by_id,
            crn=self.crn,
            description=self.description,
            enforcement_mode=self.enforcement_mode,
            href=self.href,
            id=self.id,
            last_modified_at=self.last_modified_at,
            last_modified_by_id=self.last_modified_by_id,
            operations=self.operations,
            resources=self.resources,
            rule_id=self.rule_id)


def get_cbr_rule(id: Optional[_builtins.str] = None,
                 rule_id: Optional[_builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCbrRuleResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['ruleId'] = rule_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCbrRule:getCbrRule', __args__, opts=opts, typ=GetCbrRuleResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCbrRuleResult(
        contexts=pulumi.get(__ret__, 'contexts'),
        created_at=pulumi.get(__ret__, 'created_at'),
        created_by_id=pulumi.get(__ret__, 'created_by_id'),
        crn=pulumi.get(__ret__, 'crn'),
        description=pulumi.get(__ret__, 'description'),
        enforcement_mode=pulumi.get(__ret__, 'enforcement_mode'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        last_modified_at=pulumi.get(__ret__, 'last_modified_at'),
        last_modified_by_id=pulumi.get(__ret__, 'last_modified_by_id'),
        operations=pulumi.get(__ret__, 'operations'),
        resources=pulumi.get(__ret__, 'resources'),
        rule_id=pulumi.get(__ret__, 'rule_id'))
def get_cbr_rule_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCbrRuleResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['ruleId'] = rule_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCbrRule:getCbrRule', __args__, opts=opts, typ=GetCbrRuleResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCbrRuleResult(
        contexts=pulumi.get(__response__, 'contexts'),
        created_at=pulumi.get(__response__, 'created_at'),
        created_by_id=pulumi.get(__response__, 'created_by_id'),
        crn=pulumi.get(__response__, 'crn'),
        description=pulumi.get(__response__, 'description'),
        enforcement_mode=pulumi.get(__response__, 'enforcement_mode'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        last_modified_at=pulumi.get(__response__, 'last_modified_at'),
        last_modified_by_id=pulumi.get(__response__, 'last_modified_by_id'),
        operations=pulumi.get(__response__, 'operations'),
        resources=pulumi.get(__response__, 'resources'),
        rule_id=pulumi.get(__response__, 'rule_id')))
