# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetPiVolumeGroupDetailsResult',
    'AwaitableGetPiVolumeGroupDetailsResult',
    'get_pi_volume_group_details',
    'get_pi_volume_group_details_output',
]

@pulumi.output_type
class GetPiVolumeGroupDetailsResult:
    """
    A collection of values returned by getPiVolumeGroupDetails.
    """
    def __init__(__self__, auxiliary=None, consistency_group_name=None, id=None, pi_cloud_instance_id=None, pi_volume_group_id=None, replication_sites=None, replication_status=None, status=None, status_description_errors=None, storage_pool=None, volume_group_name=None, volume_ids=None):
        if auxiliary and not isinstance(auxiliary, bool):
            raise TypeError("Expected argument 'auxiliary' to be a bool")
        pulumi.set(__self__, "auxiliary", auxiliary)
        if consistency_group_name and not isinstance(consistency_group_name, str):
            raise TypeError("Expected argument 'consistency_group_name' to be a str")
        pulumi.set(__self__, "consistency_group_name", consistency_group_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if pi_cloud_instance_id and not isinstance(pi_cloud_instance_id, str):
            raise TypeError("Expected argument 'pi_cloud_instance_id' to be a str")
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_volume_group_id and not isinstance(pi_volume_group_id, str):
            raise TypeError("Expected argument 'pi_volume_group_id' to be a str")
        pulumi.set(__self__, "pi_volume_group_id", pi_volume_group_id)
        if replication_sites and not isinstance(replication_sites, list):
            raise TypeError("Expected argument 'replication_sites' to be a list")
        pulumi.set(__self__, "replication_sites", replication_sites)
        if replication_status and not isinstance(replication_status, str):
            raise TypeError("Expected argument 'replication_status' to be a str")
        pulumi.set(__self__, "replication_status", replication_status)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if status_description_errors and not isinstance(status_description_errors, list):
            raise TypeError("Expected argument 'status_description_errors' to be a list")
        pulumi.set(__self__, "status_description_errors", status_description_errors)
        if storage_pool and not isinstance(storage_pool, str):
            raise TypeError("Expected argument 'storage_pool' to be a str")
        pulumi.set(__self__, "storage_pool", storage_pool)
        if volume_group_name and not isinstance(volume_group_name, str):
            raise TypeError("Expected argument 'volume_group_name' to be a str")
        pulumi.set(__self__, "volume_group_name", volume_group_name)
        if volume_ids and not isinstance(volume_ids, list):
            raise TypeError("Expected argument 'volume_ids' to be a list")
        pulumi.set(__self__, "volume_ids", volume_ids)

    @_builtins.property
    @pulumi.getter
    def auxiliary(self) -> _builtins.bool:
        return pulumi.get(self, "auxiliary")

    @_builtins.property
    @pulumi.getter(name="consistencyGroupName")
    def consistency_group_name(self) -> _builtins.str:
        return pulumi.get(self, "consistency_group_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piVolumeGroupId")
    def pi_volume_group_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_volume_group_id")

    @_builtins.property
    @pulumi.getter(name="replicationSites")
    def replication_sites(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "replication_sites")

    @_builtins.property
    @pulumi.getter(name="replicationStatus")
    def replication_status(self) -> _builtins.str:
        return pulumi.get(self, "replication_status")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusDescriptionErrors")
    def status_description_errors(self) -> Sequence['outputs.GetPiVolumeGroupDetailsStatusDescriptionErrorResult']:
        return pulumi.get(self, "status_description_errors")

    @_builtins.property
    @pulumi.getter(name="storagePool")
    def storage_pool(self) -> _builtins.str:
        return pulumi.get(self, "storage_pool")

    @_builtins.property
    @pulumi.getter(name="volumeGroupName")
    def volume_group_name(self) -> _builtins.str:
        return pulumi.get(self, "volume_group_name")

    @_builtins.property
    @pulumi.getter(name="volumeIds")
    def volume_ids(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "volume_ids")


class AwaitableGetPiVolumeGroupDetailsResult(GetPiVolumeGroupDetailsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPiVolumeGroupDetailsResult(
            auxiliary=self.auxiliary,
            consistency_group_name=self.consistency_group_name,
            id=self.id,
            pi_cloud_instance_id=self.pi_cloud_instance_id,
            pi_volume_group_id=self.pi_volume_group_id,
            replication_sites=self.replication_sites,
            replication_status=self.replication_status,
            status=self.status,
            status_description_errors=self.status_description_errors,
            storage_pool=self.storage_pool,
            volume_group_name=self.volume_group_name,
            volume_ids=self.volume_ids)


def get_pi_volume_group_details(id: Optional[_builtins.str] = None,
                                pi_cloud_instance_id: Optional[_builtins.str] = None,
                                pi_volume_group_id: Optional[_builtins.str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPiVolumeGroupDetailsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piVolumeGroupId'] = pi_volume_group_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getPiVolumeGroupDetails:getPiVolumeGroupDetails', __args__, opts=opts, typ=GetPiVolumeGroupDetailsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetPiVolumeGroupDetailsResult(
        auxiliary=pulumi.get(__ret__, 'auxiliary'),
        consistency_group_name=pulumi.get(__ret__, 'consistency_group_name'),
        id=pulumi.get(__ret__, 'id'),
        pi_cloud_instance_id=pulumi.get(__ret__, 'pi_cloud_instance_id'),
        pi_volume_group_id=pulumi.get(__ret__, 'pi_volume_group_id'),
        replication_sites=pulumi.get(__ret__, 'replication_sites'),
        replication_status=pulumi.get(__ret__, 'replication_status'),
        status=pulumi.get(__ret__, 'status'),
        status_description_errors=pulumi.get(__ret__, 'status_description_errors'),
        storage_pool=pulumi.get(__ret__, 'storage_pool'),
        volume_group_name=pulumi.get(__ret__, 'volume_group_name'),
        volume_ids=pulumi.get(__ret__, 'volume_ids'))
def get_pi_volume_group_details_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                       pi_volume_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPiVolumeGroupDetailsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piVolumeGroupId'] = pi_volume_group_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getPiVolumeGroupDetails:getPiVolumeGroupDetails', __args__, opts=opts, typ=GetPiVolumeGroupDetailsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetPiVolumeGroupDetailsResult(
        auxiliary=pulumi.get(__response__, 'auxiliary'),
        consistency_group_name=pulumi.get(__response__, 'consistency_group_name'),
        id=pulumi.get(__response__, 'id'),
        pi_cloud_instance_id=pulumi.get(__response__, 'pi_cloud_instance_id'),
        pi_volume_group_id=pulumi.get(__response__, 'pi_volume_group_id'),
        replication_sites=pulumi.get(__response__, 'replication_sites'),
        replication_status=pulumi.get(__response__, 'replication_status'),
        status=pulumi.get(__response__, 'status'),
        status_description_errors=pulumi.get(__response__, 'status_description_errors'),
        storage_pool=pulumi.get(__response__, 'storage_pool'),
        volume_group_name=pulumi.get(__response__, 'volume_group_name'),
        volume_ids=pulumi.get(__response__, 'volume_ids')))
