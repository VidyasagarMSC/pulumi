# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsLbPoolMembersResult',
    'AwaitableGetIsLbPoolMembersResult',
    'get_is_lb_pool_members',
    'get_is_lb_pool_members_output',
]

@pulumi.output_type
class GetIsLbPoolMembersResult:
    """
    A collection of values returned by getIsLbPoolMembers.
    """
    def __init__(__self__, id=None, lb=None, members=None, pool=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lb and not isinstance(lb, str):
            raise TypeError("Expected argument 'lb' to be a str")
        pulumi.set(__self__, "lb", lb)
        if members and not isinstance(members, list):
            raise TypeError("Expected argument 'members' to be a list")
        pulumi.set(__self__, "members", members)
        if pool and not isinstance(pool, str):
            raise TypeError("Expected argument 'pool' to be a str")
        pulumi.set(__self__, "pool", pool)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def lb(self) -> _builtins.str:
        return pulumi.get(self, "lb")

    @_builtins.property
    @pulumi.getter
    def members(self) -> Sequence['outputs.GetIsLbPoolMembersMemberResult']:
        return pulumi.get(self, "members")

    @_builtins.property
    @pulumi.getter
    def pool(self) -> _builtins.str:
        return pulumi.get(self, "pool")


class AwaitableGetIsLbPoolMembersResult(GetIsLbPoolMembersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsLbPoolMembersResult(
            id=self.id,
            lb=self.lb,
            members=self.members,
            pool=self.pool)


def get_is_lb_pool_members(id: Optional[_builtins.str] = None,
                           lb: Optional[_builtins.str] = None,
                           pool: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsLbPoolMembersResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['lb'] = lb
    __args__['pool'] = pool
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsLbPoolMembers:getIsLbPoolMembers', __args__, opts=opts, typ=GetIsLbPoolMembersResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsLbPoolMembersResult(
        id=pulumi.get(__ret__, 'id'),
        lb=pulumi.get(__ret__, 'lb'),
        members=pulumi.get(__ret__, 'members'),
        pool=pulumi.get(__ret__, 'pool'))
def get_is_lb_pool_members_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  lb: Optional[pulumi.Input[_builtins.str]] = None,
                                  pool: Optional[pulumi.Input[_builtins.str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsLbPoolMembersResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['lb'] = lb
    __args__['pool'] = pool
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsLbPoolMembers:getIsLbPoolMembers', __args__, opts=opts, typ=GetIsLbPoolMembersResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsLbPoolMembersResult(
        id=pulumi.get(__response__, 'id'),
        lb=pulumi.get(__response__, 'lb'),
        members=pulumi.get(__response__, 'members'),
        pool=pulumi.get(__response__, 'pool')))
