# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['CisOriginCertificateOrderArgs', 'CisOriginCertificateOrder']

@pulumi.input_type
class CisOriginCertificateOrderArgs:
    def __init__(__self__, *,
                 cis_id: pulumi.Input[_builtins.str],
                 csr: pulumi.Input[_builtins.str],
                 domain_id: pulumi.Input[_builtins.str],
                 hostnames: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 request_type: pulumi.Input[_builtins.str],
                 requested_validity: pulumi.Input[_builtins.float],
                 cis_origin_certificate_order_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CisOriginCertificateOrder resource.
        :param pulumi.Input[_builtins.str] cis_id: CIS object ID or CRN
        :param pulumi.Input[_builtins.str] csr: CSR
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] hostnames: Hosts for which certificates need to be ordered
        :param pulumi.Input[_builtins.str] request_type: Certificate type
        :param pulumi.Input[_builtins.float] requested_validity: Calidity days
        """
        pulumi.set(__self__, "cis_id", cis_id)
        pulumi.set(__self__, "csr", csr)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "hostnames", hostnames)
        pulumi.set(__self__, "request_type", request_type)
        pulumi.set(__self__, "requested_validity", requested_validity)
        if cis_origin_certificate_order_id is not None:
            pulumi.set(__self__, "cis_origin_certificate_order_id", cis_origin_certificate_order_id)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Input[_builtins.str]:
        """
        CIS object ID or CRN
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter
    def csr(self) -> pulumi.Input[_builtins.str]:
        """
        CSR
        """
        return pulumi.get(self, "csr")

    @csr.setter
    def csr(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "csr", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Input[_builtins.str]:
        """
        Associated CIS domain
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter
    def hostnames(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Hosts for which certificates need to be ordered
        """
        return pulumi.get(self, "hostnames")

    @hostnames.setter
    def hostnames(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "hostnames", value)

    @_builtins.property
    @pulumi.getter(name="requestType")
    def request_type(self) -> pulumi.Input[_builtins.str]:
        """
        Certificate type
        """
        return pulumi.get(self, "request_type")

    @request_type.setter
    def request_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "request_type", value)

    @_builtins.property
    @pulumi.getter(name="requestedValidity")
    def requested_validity(self) -> pulumi.Input[_builtins.float]:
        """
        Calidity days
        """
        return pulumi.get(self, "requested_validity")

    @requested_validity.setter
    def requested_validity(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "requested_validity", value)

    @_builtins.property
    @pulumi.getter(name="cisOriginCertificateOrderId")
    def cis_origin_certificate_order_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_origin_certificate_order_id")

    @cis_origin_certificate_order_id.setter
    def cis_origin_certificate_order_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_origin_certificate_order_id", value)


@pulumi.input_type
class _CisOriginCertificateOrderState:
    def __init__(__self__, *,
                 certificate: Optional[pulumi.Input[_builtins.str]] = None,
                 certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_origin_certificate_order_id: Optional[pulumi.Input[_builtins.str]] = None,
                 csr: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 expires_on: Optional[pulumi.Input[_builtins.str]] = None,
                 hostnames: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 private_key: Optional[pulumi.Input[_builtins.str]] = None,
                 request_type: Optional[pulumi.Input[_builtins.str]] = None,
                 requested_validity: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering CisOriginCertificateOrder resources.
        :param pulumi.Input[_builtins.str] certificate: Certificate
        :param pulumi.Input[_builtins.str] certificate_id: Certificate ID
        :param pulumi.Input[_builtins.str] cis_id: CIS object ID or CRN
        :param pulumi.Input[_builtins.str] csr: CSR
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.str] expires_on: Expiration date of the certificate
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] hostnames: Hosts for which certificates need to be ordered
        :param pulumi.Input[_builtins.str] private_key: Certificate private key
        :param pulumi.Input[_builtins.str] request_type: Certificate type
        :param pulumi.Input[_builtins.float] requested_validity: Calidity days
        """
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if cis_id is not None:
            pulumi.set(__self__, "cis_id", cis_id)
        if cis_origin_certificate_order_id is not None:
            pulumi.set(__self__, "cis_origin_certificate_order_id", cis_origin_certificate_order_id)
        if csr is not None:
            pulumi.set(__self__, "csr", csr)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if expires_on is not None:
            pulumi.set(__self__, "expires_on", expires_on)
        if hostnames is not None:
            pulumi.set(__self__, "hostnames", hostnames)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if request_type is not None:
            pulumi.set(__self__, "request_type", request_type)
        if requested_validity is not None:
            pulumi.set(__self__, "requested_validity", requested_validity)

    @_builtins.property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Certificate
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate", value)

    @_builtins.property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Certificate ID
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate_id", value)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CIS object ID or CRN
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter(name="cisOriginCertificateOrderId")
    def cis_origin_certificate_order_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_origin_certificate_order_id")

    @cis_origin_certificate_order_id.setter
    def cis_origin_certificate_order_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_origin_certificate_order_id", value)

    @_builtins.property
    @pulumi.getter
    def csr(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CSR
        """
        return pulumi.get(self, "csr")

    @csr.setter
    def csr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "csr", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Associated CIS domain
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Expiration date of the certificate
        """
        return pulumi.get(self, "expires_on")

    @expires_on.setter
    def expires_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expires_on", value)

    @_builtins.property
    @pulumi.getter
    def hostnames(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Hosts for which certificates need to be ordered
        """
        return pulumi.get(self, "hostnames")

    @hostnames.setter
    def hostnames(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "hostnames", value)

    @_builtins.property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Certificate private key
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_key", value)

    @_builtins.property
    @pulumi.getter(name="requestType")
    def request_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Certificate type
        """
        return pulumi.get(self, "request_type")

    @request_type.setter
    def request_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "request_type", value)

    @_builtins.property
    @pulumi.getter(name="requestedValidity")
    def requested_validity(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Calidity days
        """
        return pulumi.get(self, "requested_validity")

    @requested_validity.setter
    def requested_validity(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "requested_validity", value)


@pulumi.type_token("ibm:index/cisOriginCertificateOrder:CisOriginCertificateOrder")
class CisOriginCertificateOrder(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_origin_certificate_order_id: Optional[pulumi.Input[_builtins.str]] = None,
                 csr: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 hostnames: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 request_type: Optional[pulumi.Input[_builtins.str]] = None,
                 requested_validity: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a CisOriginCertificateOrder resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cis_id: CIS object ID or CRN
        :param pulumi.Input[_builtins.str] csr: CSR
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] hostnames: Hosts for which certificates need to be ordered
        :param pulumi.Input[_builtins.str] request_type: Certificate type
        :param pulumi.Input[_builtins.float] requested_validity: Calidity days
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CisOriginCertificateOrderArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CisOriginCertificateOrder resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CisOriginCertificateOrderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CisOriginCertificateOrderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_origin_certificate_order_id: Optional[pulumi.Input[_builtins.str]] = None,
                 csr: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 hostnames: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 request_type: Optional[pulumi.Input[_builtins.str]] = None,
                 requested_validity: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CisOriginCertificateOrderArgs.__new__(CisOriginCertificateOrderArgs)

            if cis_id is None and not opts.urn:
                raise TypeError("Missing required property 'cis_id'")
            __props__.__dict__["cis_id"] = cis_id
            __props__.__dict__["cis_origin_certificate_order_id"] = cis_origin_certificate_order_id
            if csr is None and not opts.urn:
                raise TypeError("Missing required property 'csr'")
            __props__.__dict__["csr"] = csr
            if domain_id is None and not opts.urn:
                raise TypeError("Missing required property 'domain_id'")
            __props__.__dict__["domain_id"] = domain_id
            if hostnames is None and not opts.urn:
                raise TypeError("Missing required property 'hostnames'")
            __props__.__dict__["hostnames"] = hostnames
            if request_type is None and not opts.urn:
                raise TypeError("Missing required property 'request_type'")
            __props__.__dict__["request_type"] = request_type
            if requested_validity is None and not opts.urn:
                raise TypeError("Missing required property 'requested_validity'")
            __props__.__dict__["requested_validity"] = requested_validity
            __props__.__dict__["certificate"] = None
            __props__.__dict__["certificate_id"] = None
            __props__.__dict__["expires_on"] = None
            __props__.__dict__["private_key"] = None
        super(CisOriginCertificateOrder, __self__).__init__(
            'ibm:index/cisOriginCertificateOrder:CisOriginCertificateOrder',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            certificate: Optional[pulumi.Input[_builtins.str]] = None,
            certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
            cis_id: Optional[pulumi.Input[_builtins.str]] = None,
            cis_origin_certificate_order_id: Optional[pulumi.Input[_builtins.str]] = None,
            csr: Optional[pulumi.Input[_builtins.str]] = None,
            domain_id: Optional[pulumi.Input[_builtins.str]] = None,
            expires_on: Optional[pulumi.Input[_builtins.str]] = None,
            hostnames: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            private_key: Optional[pulumi.Input[_builtins.str]] = None,
            request_type: Optional[pulumi.Input[_builtins.str]] = None,
            requested_validity: Optional[pulumi.Input[_builtins.float]] = None) -> 'CisOriginCertificateOrder':
        """
        Get an existing CisOriginCertificateOrder resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] certificate: Certificate
        :param pulumi.Input[_builtins.str] certificate_id: Certificate ID
        :param pulumi.Input[_builtins.str] cis_id: CIS object ID or CRN
        :param pulumi.Input[_builtins.str] csr: CSR
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.str] expires_on: Expiration date of the certificate
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] hostnames: Hosts for which certificates need to be ordered
        :param pulumi.Input[_builtins.str] private_key: Certificate private key
        :param pulumi.Input[_builtins.str] request_type: Certificate type
        :param pulumi.Input[_builtins.float] requested_validity: Calidity days
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CisOriginCertificateOrderState.__new__(_CisOriginCertificateOrderState)

        __props__.__dict__["certificate"] = certificate
        __props__.__dict__["certificate_id"] = certificate_id
        __props__.__dict__["cis_id"] = cis_id
        __props__.__dict__["cis_origin_certificate_order_id"] = cis_origin_certificate_order_id
        __props__.__dict__["csr"] = csr
        __props__.__dict__["domain_id"] = domain_id
        __props__.__dict__["expires_on"] = expires_on
        __props__.__dict__["hostnames"] = hostnames
        __props__.__dict__["private_key"] = private_key
        __props__.__dict__["request_type"] = request_type
        __props__.__dict__["requested_validity"] = requested_validity
        return CisOriginCertificateOrder(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def certificate(self) -> pulumi.Output[_builtins.str]:
        """
        Certificate
        """
        return pulumi.get(self, "certificate")

    @_builtins.property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> pulumi.Output[_builtins.str]:
        """
        Certificate ID
        """
        return pulumi.get(self, "certificate_id")

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Output[_builtins.str]:
        """
        CIS object ID or CRN
        """
        return pulumi.get(self, "cis_id")

    @_builtins.property
    @pulumi.getter(name="cisOriginCertificateOrderId")
    def cis_origin_certificate_order_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cis_origin_certificate_order_id")

    @_builtins.property
    @pulumi.getter
    def csr(self) -> pulumi.Output[_builtins.str]:
        """
        CSR
        """
        return pulumi.get(self, "csr")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Output[_builtins.str]:
        """
        Associated CIS domain
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> pulumi.Output[_builtins.str]:
        """
        Expiration date of the certificate
        """
        return pulumi.get(self, "expires_on")

    @_builtins.property
    @pulumi.getter
    def hostnames(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Hosts for which certificates need to be ordered
        """
        return pulumi.get(self, "hostnames")

    @_builtins.property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Output[_builtins.str]:
        """
        Certificate private key
        """
        return pulumi.get(self, "private_key")

    @_builtins.property
    @pulumi.getter(name="requestType")
    def request_type(self) -> pulumi.Output[_builtins.str]:
        """
        Certificate type
        """
        return pulumi.get(self, "request_type")

    @_builtins.property
    @pulumi.getter(name="requestedValidity")
    def requested_validity(self) -> pulumi.Output[_builtins.float]:
        """
        Calidity days
        """
        return pulumi.get(self, "requested_validity")

