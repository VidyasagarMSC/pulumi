# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['LbVpxArgs', 'LbVpx']

@pulumi.input_type
class LbVpxArgs:
    def __init__(__self__, *,
                 datacenter: pulumi.Input[_builtins.str],
                 ip_count: pulumi.Input[_builtins.float],
                 plan: pulumi.Input[_builtins.str],
                 speed: pulumi.Input[_builtins.float],
                 version: pulumi.Input[_builtins.str],
                 lb_vpx_id: Optional[pulumi.Input[_builtins.str]] = None,
                 private_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 private_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
                 public_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 public_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a LbVpx resource.
        :param pulumi.Input[_builtins.str] datacenter: Datacenter name
        :param pulumi.Input[_builtins.float] ip_count: IP address count
        :param pulumi.Input[_builtins.str] plan: Plan info
        :param pulumi.Input[_builtins.float] speed: Speed value
        :param pulumi.Input[_builtins.str] version: version info
        :param pulumi.Input[_builtins.str] private_subnet: Private subnet
        :param pulumi.Input[_builtins.float] private_vlan_id: Private VLAN id
        :param pulumi.Input[_builtins.str] public_subnet: Public subnet
        :param pulumi.Input[_builtins.float] public_vlan_id: Piblic VLAN id
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of the tags
        """
        pulumi.set(__self__, "datacenter", datacenter)
        pulumi.set(__self__, "ip_count", ip_count)
        pulumi.set(__self__, "plan", plan)
        pulumi.set(__self__, "speed", speed)
        pulumi.set(__self__, "version", version)
        if lb_vpx_id is not None:
            pulumi.set(__self__, "lb_vpx_id", lb_vpx_id)
        if private_subnet is not None:
            pulumi.set(__self__, "private_subnet", private_subnet)
        if private_vlan_id is not None:
            pulumi.set(__self__, "private_vlan_id", private_vlan_id)
        if public_subnet is not None:
            pulumi.set(__self__, "public_subnet", public_subnet)
        if public_vlan_id is not None:
            pulumi.set(__self__, "public_vlan_id", public_vlan_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> pulumi.Input[_builtins.str]:
        """
        Datacenter name
        """
        return pulumi.get(self, "datacenter")

    @datacenter.setter
    def datacenter(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "datacenter", value)

    @_builtins.property
    @pulumi.getter(name="ipCount")
    def ip_count(self) -> pulumi.Input[_builtins.float]:
        """
        IP address count
        """
        return pulumi.get(self, "ip_count")

    @ip_count.setter
    def ip_count(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "ip_count", value)

    @_builtins.property
    @pulumi.getter
    def plan(self) -> pulumi.Input[_builtins.str]:
        """
        Plan info
        """
        return pulumi.get(self, "plan")

    @plan.setter
    def plan(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "plan", value)

    @_builtins.property
    @pulumi.getter
    def speed(self) -> pulumi.Input[_builtins.float]:
        """
        Speed value
        """
        return pulumi.get(self, "speed")

    @speed.setter
    def speed(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "speed", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Input[_builtins.str]:
        """
        version info
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter(name="lbVpxId")
    def lb_vpx_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "lb_vpx_id")

    @lb_vpx_id.setter
    def lb_vpx_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lb_vpx_id", value)

    @_builtins.property
    @pulumi.getter(name="privateSubnet")
    def private_subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Private subnet
        """
        return pulumi.get(self, "private_subnet")

    @private_subnet.setter
    def private_subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_subnet", value)

    @_builtins.property
    @pulumi.getter(name="privateVlanId")
    def private_vlan_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Private VLAN id
        """
        return pulumi.get(self, "private_vlan_id")

    @private_vlan_id.setter
    def private_vlan_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "private_vlan_id", value)

    @_builtins.property
    @pulumi.getter(name="publicSubnet")
    def public_subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Public subnet
        """
        return pulumi.get(self, "public_subnet")

    @public_subnet.setter
    def public_subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_subnet", value)

    @_builtins.property
    @pulumi.getter(name="publicVlanId")
    def public_vlan_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Piblic VLAN id
        """
        return pulumi.get(self, "public_vlan_id")

    @public_vlan_id.setter
    def public_vlan_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "public_vlan_id", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of the tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _LbVpxState:
    def __init__(__self__, *,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_count: Optional[pulumi.Input[_builtins.float]] = None,
                 lb_vpx_id: Optional[pulumi.Input[_builtins.str]] = None,
                 management_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 plan: Optional[pulumi.Input[_builtins.str]] = None,
                 private_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 private_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
                 public_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 public_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
                 speed: Optional[pulumi.Input[_builtins.float]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 vip_pools: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering LbVpx resources.
        :param pulumi.Input[_builtins.str] datacenter: Datacenter name
        :param pulumi.Input[_builtins.float] ip_count: IP address count
        :param pulumi.Input[_builtins.str] management_ip_address: management IP address
        :param pulumi.Input[_builtins.str] name: Name
        :param pulumi.Input[_builtins.str] plan: Plan info
        :param pulumi.Input[_builtins.str] private_subnet: Private subnet
        :param pulumi.Input[_builtins.float] private_vlan_id: Private VLAN id
        :param pulumi.Input[_builtins.str] public_subnet: Public subnet
        :param pulumi.Input[_builtins.float] public_vlan_id: Piblic VLAN id
        :param pulumi.Input[_builtins.float] speed: Speed value
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of the tags
        :param pulumi.Input[_builtins.str] type: Type of the VPX
        :param pulumi.Input[_builtins.str] version: version info
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] vip_pools: List of VIP ids
        """
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if ip_count is not None:
            pulumi.set(__self__, "ip_count", ip_count)
        if lb_vpx_id is not None:
            pulumi.set(__self__, "lb_vpx_id", lb_vpx_id)
        if management_ip_address is not None:
            pulumi.set(__self__, "management_ip_address", management_ip_address)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if plan is not None:
            pulumi.set(__self__, "plan", plan)
        if private_subnet is not None:
            pulumi.set(__self__, "private_subnet", private_subnet)
        if private_vlan_id is not None:
            pulumi.set(__self__, "private_vlan_id", private_vlan_id)
        if public_subnet is not None:
            pulumi.set(__self__, "public_subnet", public_subnet)
        if public_vlan_id is not None:
            pulumi.set(__self__, "public_vlan_id", public_vlan_id)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if vip_pools is not None:
            pulumi.set(__self__, "vip_pools", vip_pools)

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Datacenter name
        """
        return pulumi.get(self, "datacenter")

    @datacenter.setter
    def datacenter(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "datacenter", value)

    @_builtins.property
    @pulumi.getter(name="ipCount")
    def ip_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        IP address count
        """
        return pulumi.get(self, "ip_count")

    @ip_count.setter
    def ip_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ip_count", value)

    @_builtins.property
    @pulumi.getter(name="lbVpxId")
    def lb_vpx_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "lb_vpx_id")

    @lb_vpx_id.setter
    def lb_vpx_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lb_vpx_id", value)

    @_builtins.property
    @pulumi.getter(name="managementIpAddress")
    def management_ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        management IP address
        """
        return pulumi.get(self, "management_ip_address")

    @management_ip_address.setter
    def management_ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "management_ip_address", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def plan(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Plan info
        """
        return pulumi.get(self, "plan")

    @plan.setter
    def plan(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "plan", value)

    @_builtins.property
    @pulumi.getter(name="privateSubnet")
    def private_subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Private subnet
        """
        return pulumi.get(self, "private_subnet")

    @private_subnet.setter
    def private_subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_subnet", value)

    @_builtins.property
    @pulumi.getter(name="privateVlanId")
    def private_vlan_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Private VLAN id
        """
        return pulumi.get(self, "private_vlan_id")

    @private_vlan_id.setter
    def private_vlan_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "private_vlan_id", value)

    @_builtins.property
    @pulumi.getter(name="publicSubnet")
    def public_subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Public subnet
        """
        return pulumi.get(self, "public_subnet")

    @public_subnet.setter
    def public_subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_subnet", value)

    @_builtins.property
    @pulumi.getter(name="publicVlanId")
    def public_vlan_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Piblic VLAN id
        """
        return pulumi.get(self, "public_vlan_id")

    @public_vlan_id.setter
    def public_vlan_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "public_vlan_id", value)

    @_builtins.property
    @pulumi.getter
    def speed(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Speed value
        """
        return pulumi.get(self, "speed")

    @speed.setter
    def speed(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "speed", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of the tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of the VPX
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        version info
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter(name="vipPools")
    def vip_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of VIP ids
        """
        return pulumi.get(self, "vip_pools")

    @vip_pools.setter
    def vip_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "vip_pools", value)


@pulumi.type_token("ibm:index/lbVpx:LbVpx")
class LbVpx(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_count: Optional[pulumi.Input[_builtins.float]] = None,
                 lb_vpx_id: Optional[pulumi.Input[_builtins.str]] = None,
                 plan: Optional[pulumi.Input[_builtins.str]] = None,
                 private_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 private_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
                 public_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 public_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
                 speed: Optional[pulumi.Input[_builtins.float]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a LbVpx resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] datacenter: Datacenter name
        :param pulumi.Input[_builtins.float] ip_count: IP address count
        :param pulumi.Input[_builtins.str] plan: Plan info
        :param pulumi.Input[_builtins.str] private_subnet: Private subnet
        :param pulumi.Input[_builtins.float] private_vlan_id: Private VLAN id
        :param pulumi.Input[_builtins.str] public_subnet: Public subnet
        :param pulumi.Input[_builtins.float] public_vlan_id: Piblic VLAN id
        :param pulumi.Input[_builtins.float] speed: Speed value
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of the tags
        :param pulumi.Input[_builtins.str] version: version info
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LbVpxArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a LbVpx resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LbVpxArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LbVpxArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_count: Optional[pulumi.Input[_builtins.float]] = None,
                 lb_vpx_id: Optional[pulumi.Input[_builtins.str]] = None,
                 plan: Optional[pulumi.Input[_builtins.str]] = None,
                 private_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 private_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
                 public_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 public_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
                 speed: Optional[pulumi.Input[_builtins.float]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LbVpxArgs.__new__(LbVpxArgs)

            if datacenter is None and not opts.urn:
                raise TypeError("Missing required property 'datacenter'")
            __props__.__dict__["datacenter"] = datacenter
            if ip_count is None and not opts.urn:
                raise TypeError("Missing required property 'ip_count'")
            __props__.__dict__["ip_count"] = ip_count
            __props__.__dict__["lb_vpx_id"] = lb_vpx_id
            if plan is None and not opts.urn:
                raise TypeError("Missing required property 'plan'")
            __props__.__dict__["plan"] = plan
            __props__.__dict__["private_subnet"] = private_subnet
            __props__.__dict__["private_vlan_id"] = private_vlan_id
            __props__.__dict__["public_subnet"] = public_subnet
            __props__.__dict__["public_vlan_id"] = public_vlan_id
            if speed is None and not opts.urn:
                raise TypeError("Missing required property 'speed'")
            __props__.__dict__["speed"] = speed
            __props__.__dict__["tags"] = tags
            if version is None and not opts.urn:
                raise TypeError("Missing required property 'version'")
            __props__.__dict__["version"] = version
            __props__.__dict__["management_ip_address"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["type"] = None
            __props__.__dict__["vip_pools"] = None
        super(LbVpx, __self__).__init__(
            'ibm:index/lbVpx:LbVpx',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            datacenter: Optional[pulumi.Input[_builtins.str]] = None,
            ip_count: Optional[pulumi.Input[_builtins.float]] = None,
            lb_vpx_id: Optional[pulumi.Input[_builtins.str]] = None,
            management_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            plan: Optional[pulumi.Input[_builtins.str]] = None,
            private_subnet: Optional[pulumi.Input[_builtins.str]] = None,
            private_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
            public_subnet: Optional[pulumi.Input[_builtins.str]] = None,
            public_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
            speed: Optional[pulumi.Input[_builtins.float]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None,
            vip_pools: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'LbVpx':
        """
        Get an existing LbVpx resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] datacenter: Datacenter name
        :param pulumi.Input[_builtins.float] ip_count: IP address count
        :param pulumi.Input[_builtins.str] management_ip_address: management IP address
        :param pulumi.Input[_builtins.str] name: Name
        :param pulumi.Input[_builtins.str] plan: Plan info
        :param pulumi.Input[_builtins.str] private_subnet: Private subnet
        :param pulumi.Input[_builtins.float] private_vlan_id: Private VLAN id
        :param pulumi.Input[_builtins.str] public_subnet: Public subnet
        :param pulumi.Input[_builtins.float] public_vlan_id: Piblic VLAN id
        :param pulumi.Input[_builtins.float] speed: Speed value
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of the tags
        :param pulumi.Input[_builtins.str] type: Type of the VPX
        :param pulumi.Input[_builtins.str] version: version info
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] vip_pools: List of VIP ids
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LbVpxState.__new__(_LbVpxState)

        __props__.__dict__["datacenter"] = datacenter
        __props__.__dict__["ip_count"] = ip_count
        __props__.__dict__["lb_vpx_id"] = lb_vpx_id
        __props__.__dict__["management_ip_address"] = management_ip_address
        __props__.__dict__["name"] = name
        __props__.__dict__["plan"] = plan
        __props__.__dict__["private_subnet"] = private_subnet
        __props__.__dict__["private_vlan_id"] = private_vlan_id
        __props__.__dict__["public_subnet"] = public_subnet
        __props__.__dict__["public_vlan_id"] = public_vlan_id
        __props__.__dict__["speed"] = speed
        __props__.__dict__["tags"] = tags
        __props__.__dict__["type"] = type
        __props__.__dict__["version"] = version
        __props__.__dict__["vip_pools"] = vip_pools
        return LbVpx(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> pulumi.Output[_builtins.str]:
        """
        Datacenter name
        """
        return pulumi.get(self, "datacenter")

    @_builtins.property
    @pulumi.getter(name="ipCount")
    def ip_count(self) -> pulumi.Output[_builtins.float]:
        """
        IP address count
        """
        return pulumi.get(self, "ip_count")

    @_builtins.property
    @pulumi.getter(name="lbVpxId")
    def lb_vpx_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "lb_vpx_id")

    @_builtins.property
    @pulumi.getter(name="managementIpAddress")
    def management_ip_address(self) -> pulumi.Output[_builtins.str]:
        """
        management IP address
        """
        return pulumi.get(self, "management_ip_address")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def plan(self) -> pulumi.Output[_builtins.str]:
        """
        Plan info
        """
        return pulumi.get(self, "plan")

    @_builtins.property
    @pulumi.getter(name="privateSubnet")
    def private_subnet(self) -> pulumi.Output[_builtins.str]:
        """
        Private subnet
        """
        return pulumi.get(self, "private_subnet")

    @_builtins.property
    @pulumi.getter(name="privateVlanId")
    def private_vlan_id(self) -> pulumi.Output[_builtins.float]:
        """
        Private VLAN id
        """
        return pulumi.get(self, "private_vlan_id")

    @_builtins.property
    @pulumi.getter(name="publicSubnet")
    def public_subnet(self) -> pulumi.Output[_builtins.str]:
        """
        Public subnet
        """
        return pulumi.get(self, "public_subnet")

    @_builtins.property
    @pulumi.getter(name="publicVlanId")
    def public_vlan_id(self) -> pulumi.Output[_builtins.float]:
        """
        Piblic VLAN id
        """
        return pulumi.get(self, "public_vlan_id")

    @_builtins.property
    @pulumi.getter
    def speed(self) -> pulumi.Output[_builtins.float]:
        """
        Speed value
        """
        return pulumi.get(self, "speed")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of the tags
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Type of the VPX
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.str]:
        """
        version info
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="vipPools")
    def vip_pools(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of VIP ids
        """
        return pulumi.get(self, "vip_pools")

