# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['IsShareReplicaOperationsArgs', 'IsShareReplicaOperations']

@pulumi.input_type
class IsShareReplicaOperationsArgs:
    def __init__(__self__, *,
                 share_replica: pulumi.Input[_builtins.str],
                 fallback_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 is_share_replica_operations_id: Optional[pulumi.Input[_builtins.str]] = None,
                 split_share: Optional[pulumi.Input[_builtins.bool]] = None,
                 timeout: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a IsShareReplicaOperations resource.
        :param pulumi.Input[_builtins.str] share_replica: The file share identifier.
        :param pulumi.Input[_builtins.str] fallback_policy: The action to take if the failover request is accepted but cannot be performed or times out
        :param pulumi.Input[_builtins.bool] split_share: If set to true the replication relationship between source share and replica will be removed.
        :param pulumi.Input[_builtins.float] timeout: The failover timeout in seconds
        """
        pulumi.set(__self__, "share_replica", share_replica)
        if fallback_policy is not None:
            pulumi.set(__self__, "fallback_policy", fallback_policy)
        if is_share_replica_operations_id is not None:
            pulumi.set(__self__, "is_share_replica_operations_id", is_share_replica_operations_id)
        if split_share is not None:
            pulumi.set(__self__, "split_share", split_share)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @_builtins.property
    @pulumi.getter(name="shareReplica")
    def share_replica(self) -> pulumi.Input[_builtins.str]:
        """
        The file share identifier.
        """
        return pulumi.get(self, "share_replica")

    @share_replica.setter
    def share_replica(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "share_replica", value)

    @_builtins.property
    @pulumi.getter(name="fallbackPolicy")
    def fallback_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The action to take if the failover request is accepted but cannot be performed or times out
        """
        return pulumi.get(self, "fallback_policy")

    @fallback_policy.setter
    def fallback_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fallback_policy", value)

    @_builtins.property
    @pulumi.getter(name="isShareReplicaOperationsId")
    def is_share_replica_operations_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_share_replica_operations_id")

    @is_share_replica_operations_id.setter
    def is_share_replica_operations_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_share_replica_operations_id", value)

    @_builtins.property
    @pulumi.getter(name="splitShare")
    def split_share(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true the replication relationship between source share and replica will be removed.
        """
        return pulumi.get(self, "split_share")

    @split_share.setter
    def split_share(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "split_share", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The failover timeout in seconds
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class _IsShareReplicaOperationsState:
    def __init__(__self__, *,
                 fallback_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 is_share_replica_operations_id: Optional[pulumi.Input[_builtins.str]] = None,
                 share_replica: Optional[pulumi.Input[_builtins.str]] = None,
                 split_share: Optional[pulumi.Input[_builtins.bool]] = None,
                 timeout: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering IsShareReplicaOperations resources.
        :param pulumi.Input[_builtins.str] fallback_policy: The action to take if the failover request is accepted but cannot be performed or times out
        :param pulumi.Input[_builtins.str] share_replica: The file share identifier.
        :param pulumi.Input[_builtins.bool] split_share: If set to true the replication relationship between source share and replica will be removed.
        :param pulumi.Input[_builtins.float] timeout: The failover timeout in seconds
        """
        if fallback_policy is not None:
            pulumi.set(__self__, "fallback_policy", fallback_policy)
        if is_share_replica_operations_id is not None:
            pulumi.set(__self__, "is_share_replica_operations_id", is_share_replica_operations_id)
        if share_replica is not None:
            pulumi.set(__self__, "share_replica", share_replica)
        if split_share is not None:
            pulumi.set(__self__, "split_share", split_share)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @_builtins.property
    @pulumi.getter(name="fallbackPolicy")
    def fallback_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The action to take if the failover request is accepted but cannot be performed or times out
        """
        return pulumi.get(self, "fallback_policy")

    @fallback_policy.setter
    def fallback_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fallback_policy", value)

    @_builtins.property
    @pulumi.getter(name="isShareReplicaOperationsId")
    def is_share_replica_operations_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_share_replica_operations_id")

    @is_share_replica_operations_id.setter
    def is_share_replica_operations_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_share_replica_operations_id", value)

    @_builtins.property
    @pulumi.getter(name="shareReplica")
    def share_replica(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The file share identifier.
        """
        return pulumi.get(self, "share_replica")

    @share_replica.setter
    def share_replica(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "share_replica", value)

    @_builtins.property
    @pulumi.getter(name="splitShare")
    def split_share(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true the replication relationship between source share and replica will be removed.
        """
        return pulumi.get(self, "split_share")

    @split_share.setter
    def split_share(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "split_share", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The failover timeout in seconds
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "timeout", value)


@pulumi.type_token("ibm:index/isShareReplicaOperations:IsShareReplicaOperations")
class IsShareReplicaOperations(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 fallback_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 is_share_replica_operations_id: Optional[pulumi.Input[_builtins.str]] = None,
                 share_replica: Optional[pulumi.Input[_builtins.str]] = None,
                 split_share: Optional[pulumi.Input[_builtins.bool]] = None,
                 timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a IsShareReplicaOperations resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] fallback_policy: The action to take if the failover request is accepted but cannot be performed or times out
        :param pulumi.Input[_builtins.str] share_replica: The file share identifier.
        :param pulumi.Input[_builtins.bool] split_share: If set to true the replication relationship between source share and replica will be removed.
        :param pulumi.Input[_builtins.float] timeout: The failover timeout in seconds
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsShareReplicaOperationsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsShareReplicaOperations resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsShareReplicaOperationsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsShareReplicaOperationsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 fallback_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 is_share_replica_operations_id: Optional[pulumi.Input[_builtins.str]] = None,
                 share_replica: Optional[pulumi.Input[_builtins.str]] = None,
                 split_share: Optional[pulumi.Input[_builtins.bool]] = None,
                 timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsShareReplicaOperationsArgs.__new__(IsShareReplicaOperationsArgs)

            __props__.__dict__["fallback_policy"] = fallback_policy
            __props__.__dict__["is_share_replica_operations_id"] = is_share_replica_operations_id
            if share_replica is None and not opts.urn:
                raise TypeError("Missing required property 'share_replica'")
            __props__.__dict__["share_replica"] = share_replica
            __props__.__dict__["split_share"] = split_share
            __props__.__dict__["timeout"] = timeout
        super(IsShareReplicaOperations, __self__).__init__(
            'ibm:index/isShareReplicaOperations:IsShareReplicaOperations',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            fallback_policy: Optional[pulumi.Input[_builtins.str]] = None,
            is_share_replica_operations_id: Optional[pulumi.Input[_builtins.str]] = None,
            share_replica: Optional[pulumi.Input[_builtins.str]] = None,
            split_share: Optional[pulumi.Input[_builtins.bool]] = None,
            timeout: Optional[pulumi.Input[_builtins.float]] = None) -> 'IsShareReplicaOperations':
        """
        Get an existing IsShareReplicaOperations resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] fallback_policy: The action to take if the failover request is accepted but cannot be performed or times out
        :param pulumi.Input[_builtins.str] share_replica: The file share identifier.
        :param pulumi.Input[_builtins.bool] split_share: If set to true the replication relationship between source share and replica will be removed.
        :param pulumi.Input[_builtins.float] timeout: The failover timeout in seconds
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsShareReplicaOperationsState.__new__(_IsShareReplicaOperationsState)

        __props__.__dict__["fallback_policy"] = fallback_policy
        __props__.__dict__["is_share_replica_operations_id"] = is_share_replica_operations_id
        __props__.__dict__["share_replica"] = share_replica
        __props__.__dict__["split_share"] = split_share
        __props__.__dict__["timeout"] = timeout
        return IsShareReplicaOperations(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="fallbackPolicy")
    def fallback_policy(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The action to take if the failover request is accepted but cannot be performed or times out
        """
        return pulumi.get(self, "fallback_policy")

    @_builtins.property
    @pulumi.getter(name="isShareReplicaOperationsId")
    def is_share_replica_operations_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_share_replica_operations_id")

    @_builtins.property
    @pulumi.getter(name="shareReplica")
    def share_replica(self) -> pulumi.Output[_builtins.str]:
        """
        The file share identifier.
        """
        return pulumi.get(self, "share_replica")

    @_builtins.property
    @pulumi.getter(name="splitShare")
    def split_share(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        If set to true the replication relationship between source share and replica will be removed.
        """
        return pulumi.get(self, "split_share")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        The failover timeout in seconds
        """
        return pulumi.get(self, "timeout")

