# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetDlGatewayMacsecCakResult',
    'AwaitableGetDlGatewayMacsecCakResult',
    'get_dl_gateway_macsec_cak',
    'get_dl_gateway_macsec_cak_output',
]

@pulumi.output_type
class GetDlGatewayMacsecCakResult:
    """
    A collection of values returned by getDlGatewayMacsecCak.
    """
    def __init__(__self__, active_deltas=None, cak_id=None, created_at=None, gateway=None, id=None, keys=None, name=None, session=None, status=None, updated_at=None):
        if active_deltas and not isinstance(active_deltas, list):
            raise TypeError("Expected argument 'active_deltas' to be a list")
        pulumi.set(__self__, "active_deltas", active_deltas)
        if cak_id and not isinstance(cak_id, str):
            raise TypeError("Expected argument 'cak_id' to be a str")
        pulumi.set(__self__, "cak_id", cak_id)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if gateway and not isinstance(gateway, str):
            raise TypeError("Expected argument 'gateway' to be a str")
        pulumi.set(__self__, "gateway", gateway)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if keys and not isinstance(keys, list):
            raise TypeError("Expected argument 'keys' to be a list")
        pulumi.set(__self__, "keys", keys)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if session and not isinstance(session, str):
            raise TypeError("Expected argument 'session' to be a str")
        pulumi.set(__self__, "session", session)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="activeDeltas")
    def active_deltas(self) -> Optional[Sequence['outputs.GetDlGatewayMacsecCakActiveDeltaResult']]:
        return pulumi.get(self, "active_deltas")

    @_builtins.property
    @pulumi.getter(name="cakId")
    def cak_id(self) -> _builtins.str:
        return pulumi.get(self, "cak_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> _builtins.str:
        return pulumi.get(self, "gateway")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def keys(self) -> Sequence['outputs.GetDlGatewayMacsecCakKeyResult']:
        return pulumi.get(self, "keys")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def session(self) -> _builtins.str:
        return pulumi.get(self, "session")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")


class AwaitableGetDlGatewayMacsecCakResult(GetDlGatewayMacsecCakResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDlGatewayMacsecCakResult(
            active_deltas=self.active_deltas,
            cak_id=self.cak_id,
            created_at=self.created_at,
            gateway=self.gateway,
            id=self.id,
            keys=self.keys,
            name=self.name,
            session=self.session,
            status=self.status,
            updated_at=self.updated_at)


def get_dl_gateway_macsec_cak(active_deltas: Optional[Sequence[Union['GetDlGatewayMacsecCakActiveDeltaArgs', 'GetDlGatewayMacsecCakActiveDeltaArgsDict']]] = None,
                              cak_id: Optional[_builtins.str] = None,
                              gateway: Optional[_builtins.str] = None,
                              id: Optional[_builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDlGatewayMacsecCakResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['activeDeltas'] = active_deltas
    __args__['cakId'] = cak_id
    __args__['gateway'] = gateway
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getDlGatewayMacsecCak:getDlGatewayMacsecCak', __args__, opts=opts, typ=GetDlGatewayMacsecCakResult, package_ref=_utilities.get_package()).value

    return AwaitableGetDlGatewayMacsecCakResult(
        active_deltas=pulumi.get(__ret__, 'active_deltas'),
        cak_id=pulumi.get(__ret__, 'cak_id'),
        created_at=pulumi.get(__ret__, 'created_at'),
        gateway=pulumi.get(__ret__, 'gateway'),
        id=pulumi.get(__ret__, 'id'),
        keys=pulumi.get(__ret__, 'keys'),
        name=pulumi.get(__ret__, 'name'),
        session=pulumi.get(__ret__, 'session'),
        status=pulumi.get(__ret__, 'status'),
        updated_at=pulumi.get(__ret__, 'updated_at'))
def get_dl_gateway_macsec_cak_output(active_deltas: Optional[pulumi.Input[Optional[Sequence[Union['GetDlGatewayMacsecCakActiveDeltaArgs', 'GetDlGatewayMacsecCakActiveDeltaArgsDict']]]]] = None,
                                     cak_id: Optional[pulumi.Input[_builtins.str]] = None,
                                     gateway: Optional[pulumi.Input[_builtins.str]] = None,
                                     id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDlGatewayMacsecCakResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['activeDeltas'] = active_deltas
    __args__['cakId'] = cak_id
    __args__['gateway'] = gateway
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getDlGatewayMacsecCak:getDlGatewayMacsecCak', __args__, opts=opts, typ=GetDlGatewayMacsecCakResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetDlGatewayMacsecCakResult(
        active_deltas=pulumi.get(__response__, 'active_deltas'),
        cak_id=pulumi.get(__response__, 'cak_id'),
        created_at=pulumi.get(__response__, 'created_at'),
        gateway=pulumi.get(__response__, 'gateway'),
        id=pulumi.get(__response__, 'id'),
        keys=pulumi.get(__response__, 'keys'),
        name=pulumi.get(__response__, 'name'),
        session=pulumi.get(__response__, 'session'),
        status=pulumi.get(__response__, 'status'),
        updated_at=pulumi.get(__response__, 'updated_at')))
