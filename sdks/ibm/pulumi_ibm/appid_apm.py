# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AppidApmArgs', 'AppidApm']

@pulumi.input_type
class AppidApmArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[_builtins.bool],
                 lockout_policy: pulumi.Input['AppidApmLockoutPolicyArgs'],
                 min_password_change_interval: pulumi.Input['AppidApmMinPasswordChangeIntervalArgs'],
                 password_expiration: pulumi.Input['AppidApmPasswordExpirationArgs'],
                 password_reuse: pulumi.Input['AppidApmPasswordReuseArgs'],
                 tenant_id: pulumi.Input[_builtins.str],
                 appid_apm_id: Optional[pulumi.Input[_builtins.str]] = None,
                 prevent_password_with_username: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a AppidApm resource.
        :param pulumi.Input[_builtins.bool] enabled: `true` if APM is enabled
        :param pulumi.Input[_builtins.str] tenant_id: The AppID instance GUID
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "lockout_policy", lockout_policy)
        pulumi.set(__self__, "min_password_change_interval", min_password_change_interval)
        pulumi.set(__self__, "password_expiration", password_expiration)
        pulumi.set(__self__, "password_reuse", password_reuse)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if appid_apm_id is not None:
            pulumi.set(__self__, "appid_apm_id", appid_apm_id)
        if prevent_password_with_username is not None:
            pulumi.set(__self__, "prevent_password_with_username", prevent_password_with_username)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[_builtins.bool]:
        """
        `true` if APM is enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="lockoutPolicy")
    def lockout_policy(self) -> pulumi.Input['AppidApmLockoutPolicyArgs']:
        return pulumi.get(self, "lockout_policy")

    @lockout_policy.setter
    def lockout_policy(self, value: pulumi.Input['AppidApmLockoutPolicyArgs']):
        pulumi.set(self, "lockout_policy", value)

    @_builtins.property
    @pulumi.getter(name="minPasswordChangeInterval")
    def min_password_change_interval(self) -> pulumi.Input['AppidApmMinPasswordChangeIntervalArgs']:
        return pulumi.get(self, "min_password_change_interval")

    @min_password_change_interval.setter
    def min_password_change_interval(self, value: pulumi.Input['AppidApmMinPasswordChangeIntervalArgs']):
        pulumi.set(self, "min_password_change_interval", value)

    @_builtins.property
    @pulumi.getter(name="passwordExpiration")
    def password_expiration(self) -> pulumi.Input['AppidApmPasswordExpirationArgs']:
        return pulumi.get(self, "password_expiration")

    @password_expiration.setter
    def password_expiration(self, value: pulumi.Input['AppidApmPasswordExpirationArgs']):
        pulumi.set(self, "password_expiration", value)

    @_builtins.property
    @pulumi.getter(name="passwordReuse")
    def password_reuse(self) -> pulumi.Input['AppidApmPasswordReuseArgs']:
        return pulumi.get(self, "password_reuse")

    @password_reuse.setter
    def password_reuse(self, value: pulumi.Input['AppidApmPasswordReuseArgs']):
        pulumi.set(self, "password_reuse", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[_builtins.str]:
        """
        The AppID instance GUID
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "tenant_id", value)

    @_builtins.property
    @pulumi.getter(name="appidApmId")
    def appid_apm_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "appid_apm_id")

    @appid_apm_id.setter
    def appid_apm_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "appid_apm_id", value)

    @_builtins.property
    @pulumi.getter(name="preventPasswordWithUsername")
    def prevent_password_with_username(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "prevent_password_with_username")

    @prevent_password_with_username.setter
    def prevent_password_with_username(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "prevent_password_with_username", value)


@pulumi.input_type
class _AppidApmState:
    def __init__(__self__, *,
                 appid_apm_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 lockout_policy: Optional[pulumi.Input['AppidApmLockoutPolicyArgs']] = None,
                 min_password_change_interval: Optional[pulumi.Input['AppidApmMinPasswordChangeIntervalArgs']] = None,
                 password_expiration: Optional[pulumi.Input['AppidApmPasswordExpirationArgs']] = None,
                 password_reuse: Optional[pulumi.Input['AppidApmPasswordReuseArgs']] = None,
                 prevent_password_with_username: Optional[pulumi.Input[_builtins.bool]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AppidApm resources.
        :param pulumi.Input[_builtins.bool] enabled: `true` if APM is enabled
        :param pulumi.Input[_builtins.str] tenant_id: The AppID instance GUID
        """
        if appid_apm_id is not None:
            pulumi.set(__self__, "appid_apm_id", appid_apm_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if lockout_policy is not None:
            pulumi.set(__self__, "lockout_policy", lockout_policy)
        if min_password_change_interval is not None:
            pulumi.set(__self__, "min_password_change_interval", min_password_change_interval)
        if password_expiration is not None:
            pulumi.set(__self__, "password_expiration", password_expiration)
        if password_reuse is not None:
            pulumi.set(__self__, "password_reuse", password_reuse)
        if prevent_password_with_username is not None:
            pulumi.set(__self__, "prevent_password_with_username", prevent_password_with_username)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @_builtins.property
    @pulumi.getter(name="appidApmId")
    def appid_apm_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "appid_apm_id")

    @appid_apm_id.setter
    def appid_apm_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "appid_apm_id", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        `true` if APM is enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="lockoutPolicy")
    def lockout_policy(self) -> Optional[pulumi.Input['AppidApmLockoutPolicyArgs']]:
        return pulumi.get(self, "lockout_policy")

    @lockout_policy.setter
    def lockout_policy(self, value: Optional[pulumi.Input['AppidApmLockoutPolicyArgs']]):
        pulumi.set(self, "lockout_policy", value)

    @_builtins.property
    @pulumi.getter(name="minPasswordChangeInterval")
    def min_password_change_interval(self) -> Optional[pulumi.Input['AppidApmMinPasswordChangeIntervalArgs']]:
        return pulumi.get(self, "min_password_change_interval")

    @min_password_change_interval.setter
    def min_password_change_interval(self, value: Optional[pulumi.Input['AppidApmMinPasswordChangeIntervalArgs']]):
        pulumi.set(self, "min_password_change_interval", value)

    @_builtins.property
    @pulumi.getter(name="passwordExpiration")
    def password_expiration(self) -> Optional[pulumi.Input['AppidApmPasswordExpirationArgs']]:
        return pulumi.get(self, "password_expiration")

    @password_expiration.setter
    def password_expiration(self, value: Optional[pulumi.Input['AppidApmPasswordExpirationArgs']]):
        pulumi.set(self, "password_expiration", value)

    @_builtins.property
    @pulumi.getter(name="passwordReuse")
    def password_reuse(self) -> Optional[pulumi.Input['AppidApmPasswordReuseArgs']]:
        return pulumi.get(self, "password_reuse")

    @password_reuse.setter
    def password_reuse(self, value: Optional[pulumi.Input['AppidApmPasswordReuseArgs']]):
        pulumi.set(self, "password_reuse", value)

    @_builtins.property
    @pulumi.getter(name="preventPasswordWithUsername")
    def prevent_password_with_username(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "prevent_password_with_username")

    @prevent_password_with_username.setter
    def prevent_password_with_username(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "prevent_password_with_username", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The AppID instance GUID
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tenant_id", value)


@pulumi.type_token("ibm:index/appidApm:AppidApm")
class AppidApm(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 appid_apm_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 lockout_policy: Optional[pulumi.Input[Union['AppidApmLockoutPolicyArgs', 'AppidApmLockoutPolicyArgsDict']]] = None,
                 min_password_change_interval: Optional[pulumi.Input[Union['AppidApmMinPasswordChangeIntervalArgs', 'AppidApmMinPasswordChangeIntervalArgsDict']]] = None,
                 password_expiration: Optional[pulumi.Input[Union['AppidApmPasswordExpirationArgs', 'AppidApmPasswordExpirationArgsDict']]] = None,
                 password_reuse: Optional[pulumi.Input[Union['AppidApmPasswordReuseArgs', 'AppidApmPasswordReuseArgsDict']]] = None,
                 prevent_password_with_username: Optional[pulumi.Input[_builtins.bool]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a AppidApm resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] enabled: `true` if APM is enabled
        :param pulumi.Input[_builtins.str] tenant_id: The AppID instance GUID
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppidApmArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AppidApm resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AppidApmArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppidApmArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 appid_apm_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 lockout_policy: Optional[pulumi.Input[Union['AppidApmLockoutPolicyArgs', 'AppidApmLockoutPolicyArgsDict']]] = None,
                 min_password_change_interval: Optional[pulumi.Input[Union['AppidApmMinPasswordChangeIntervalArgs', 'AppidApmMinPasswordChangeIntervalArgsDict']]] = None,
                 password_expiration: Optional[pulumi.Input[Union['AppidApmPasswordExpirationArgs', 'AppidApmPasswordExpirationArgsDict']]] = None,
                 password_reuse: Optional[pulumi.Input[Union['AppidApmPasswordReuseArgs', 'AppidApmPasswordReuseArgsDict']]] = None,
                 prevent_password_with_username: Optional[pulumi.Input[_builtins.bool]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppidApmArgs.__new__(AppidApmArgs)

            __props__.__dict__["appid_apm_id"] = appid_apm_id
            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
            if lockout_policy is None and not opts.urn:
                raise TypeError("Missing required property 'lockout_policy'")
            __props__.__dict__["lockout_policy"] = lockout_policy
            if min_password_change_interval is None and not opts.urn:
                raise TypeError("Missing required property 'min_password_change_interval'")
            __props__.__dict__["min_password_change_interval"] = min_password_change_interval
            if password_expiration is None and not opts.urn:
                raise TypeError("Missing required property 'password_expiration'")
            __props__.__dict__["password_expiration"] = password_expiration
            if password_reuse is None and not opts.urn:
                raise TypeError("Missing required property 'password_reuse'")
            __props__.__dict__["password_reuse"] = password_reuse
            __props__.__dict__["prevent_password_with_username"] = prevent_password_with_username
            if tenant_id is None and not opts.urn:
                raise TypeError("Missing required property 'tenant_id'")
            __props__.__dict__["tenant_id"] = tenant_id
        super(AppidApm, __self__).__init__(
            'ibm:index/appidApm:AppidApm',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            appid_apm_id: Optional[pulumi.Input[_builtins.str]] = None,
            enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            lockout_policy: Optional[pulumi.Input[Union['AppidApmLockoutPolicyArgs', 'AppidApmLockoutPolicyArgsDict']]] = None,
            min_password_change_interval: Optional[pulumi.Input[Union['AppidApmMinPasswordChangeIntervalArgs', 'AppidApmMinPasswordChangeIntervalArgsDict']]] = None,
            password_expiration: Optional[pulumi.Input[Union['AppidApmPasswordExpirationArgs', 'AppidApmPasswordExpirationArgsDict']]] = None,
            password_reuse: Optional[pulumi.Input[Union['AppidApmPasswordReuseArgs', 'AppidApmPasswordReuseArgsDict']]] = None,
            prevent_password_with_username: Optional[pulumi.Input[_builtins.bool]] = None,
            tenant_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'AppidApm':
        """
        Get an existing AppidApm resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] enabled: `true` if APM is enabled
        :param pulumi.Input[_builtins.str] tenant_id: The AppID instance GUID
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppidApmState.__new__(_AppidApmState)

        __props__.__dict__["appid_apm_id"] = appid_apm_id
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["lockout_policy"] = lockout_policy
        __props__.__dict__["min_password_change_interval"] = min_password_change_interval
        __props__.__dict__["password_expiration"] = password_expiration
        __props__.__dict__["password_reuse"] = password_reuse
        __props__.__dict__["prevent_password_with_username"] = prevent_password_with_username
        __props__.__dict__["tenant_id"] = tenant_id
        return AppidApm(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="appidApmId")
    def appid_apm_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "appid_apm_id")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        `true` if APM is enabled
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="lockoutPolicy")
    def lockout_policy(self) -> pulumi.Output['outputs.AppidApmLockoutPolicy']:
        return pulumi.get(self, "lockout_policy")

    @_builtins.property
    @pulumi.getter(name="minPasswordChangeInterval")
    def min_password_change_interval(self) -> pulumi.Output['outputs.AppidApmMinPasswordChangeInterval']:
        return pulumi.get(self, "min_password_change_interval")

    @_builtins.property
    @pulumi.getter(name="passwordExpiration")
    def password_expiration(self) -> pulumi.Output['outputs.AppidApmPasswordExpiration']:
        return pulumi.get(self, "password_expiration")

    @_builtins.property
    @pulumi.getter(name="passwordReuse")
    def password_reuse(self) -> pulumi.Output['outputs.AppidApmPasswordReuse']:
        return pulumi.get(self, "password_reuse")

    @_builtins.property
    @pulumi.getter(name="preventPasswordWithUsername")
    def prevent_password_with_username(self) -> pulumi.Output[Optional[_builtins.bool]]:
        return pulumi.get(self, "prevent_password_with_username")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Output[_builtins.str]:
        """
        The AppID instance GUID
        """
        return pulumi.get(self, "tenant_id")

