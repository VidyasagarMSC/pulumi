# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsClusterNetworkInterfaceArgs', 'IsClusterNetworkInterface']

@pulumi.input_type
class IsClusterNetworkInterfaceArgs:
    def __init__(__self__, *,
                 cluster_network_id: pulumi.Input[_builtins.str],
                 is_cluster_network_interface_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_ip: Optional[pulumi.Input['IsClusterNetworkInterfacePrimaryIpArgs']] = None,
                 subnet: Optional[pulumi.Input['IsClusterNetworkInterfaceSubnetArgs']] = None):
        """
        The set of arguments for constructing a IsClusterNetworkInterface resource.
        :param pulumi.Input[_builtins.str] cluster_network_id: The cluster network identifier.
        :param pulumi.Input[_builtins.str] name: The name for this cluster network interface. The name is unique across all interfaces in the cluster network.
        :param pulumi.Input['IsClusterNetworkInterfacePrimaryIpArgs'] primary_ip: The cluster network subnet reserved IP for this cluster network interface.
        :param pulumi.Input['IsClusterNetworkInterfaceSubnetArgs'] subnet: The associated cluster network subnet. Required if `primary_ip` does not specify a clusternetwork subnet reserved IP
               identity.
        """
        pulumi.set(__self__, "cluster_network_id", cluster_network_id)
        if is_cluster_network_interface_id is not None:
            pulumi.set(__self__, "is_cluster_network_interface_id", is_cluster_network_interface_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if primary_ip is not None:
            pulumi.set(__self__, "primary_ip", primary_ip)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @_builtins.property
    @pulumi.getter(name="clusterNetworkId")
    def cluster_network_id(self) -> pulumi.Input[_builtins.str]:
        """
        The cluster network identifier.
        """
        return pulumi.get(self, "cluster_network_id")

    @cluster_network_id.setter
    def cluster_network_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_network_id", value)

    @_builtins.property
    @pulumi.getter(name="isClusterNetworkInterfaceId")
    def is_cluster_network_interface_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_cluster_network_interface_id")

    @is_cluster_network_interface_id.setter
    def is_cluster_network_interface_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_cluster_network_interface_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name for this cluster network interface. The name is unique across all interfaces in the cluster network.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="primaryIp")
    def primary_ip(self) -> Optional[pulumi.Input['IsClusterNetworkInterfacePrimaryIpArgs']]:
        """
        The cluster network subnet reserved IP for this cluster network interface.
        """
        return pulumi.get(self, "primary_ip")

    @primary_ip.setter
    def primary_ip(self, value: Optional[pulumi.Input['IsClusterNetworkInterfacePrimaryIpArgs']]):
        pulumi.set(self, "primary_ip", value)

    @_builtins.property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input['IsClusterNetworkInterfaceSubnetArgs']]:
        """
        The associated cluster network subnet. Required if `primary_ip` does not specify a clusternetwork subnet reserved IP
        identity.
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input['IsClusterNetworkInterfaceSubnetArgs']]):
        pulumi.set(self, "subnet", value)


@pulumi.input_type
class _IsClusterNetworkInterfaceState:
    def __init__(__self__, *,
                 allow_ip_spoofing: Optional[pulumi.Input[_builtins.bool]] = None,
                 auto_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 cluster_network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_network_interface_id: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_infrastructure_nat: Optional[pulumi.Input[_builtins.bool]] = None,
                 etag: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 is_cluster_network_interface_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lifecycle_reasons: Optional[pulumi.Input[Sequence[pulumi.Input['IsClusterNetworkInterfaceLifecycleReasonArgs']]]] = None,
                 lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_address: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_ip: Optional[pulumi.Input['IsClusterNetworkInterfacePrimaryIpArgs']] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet: Optional[pulumi.Input['IsClusterNetworkInterfaceSubnetArgs']] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input['IsClusterNetworkInterfaceTargetArgs']]]] = None,
                 vpcs: Optional[pulumi.Input[Sequence[pulumi.Input['IsClusterNetworkInterfaceVpcArgs']]]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input['IsClusterNetworkInterfaceZoneArgs']]]] = None):
        """
        Input properties used for looking up and filtering IsClusterNetworkInterface resources.
        :param pulumi.Input[_builtins.bool] allow_ip_spoofing: Indicates whether source IP spoofing is allowed on this cluster network interface. If `false`, source IP spoofing is
               prevented on this cluster network interface. If `true`, source IP spoofing is allowed on this cluster network interface.
        :param pulumi.Input[_builtins.bool] auto_delete: Indicates whether this cluster network interface will be automatically deleted when `target` is deleted.
        :param pulumi.Input[_builtins.str] cluster_network_id: The cluster network identifier.
        :param pulumi.Input[_builtins.str] cluster_network_interface_id: The unique identifier for this cluster network interface.
        :param pulumi.Input[_builtins.str] created_at: The date and time that the cluster network interface was created.
        :param pulumi.Input[_builtins.bool] enable_infrastructure_nat: If `true`:- The VPC infrastructure performs any needed NAT operations.- `floating_ips` must not have more than one
               floating IP.If `false`:- Packets are passed unchanged to/from the virtual network interface, allowing the workload to
               perform any needed NAT operations.
        :param pulumi.Input[_builtins.str] href: The URL for this cluster network interface.
        :param pulumi.Input[Sequence[pulumi.Input['IsClusterNetworkInterfaceLifecycleReasonArgs']]] lifecycle_reasons: The reasons for the current `lifecycle_state` (if any).
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of the cluster network interface.
        :param pulumi.Input[_builtins.str] mac_address: The MAC address of the cluster network interface. May be absent if`lifecycle_state` is `pending`.
        :param pulumi.Input[_builtins.str] name: The name for this cluster network interface. The name is unique across all interfaces in the cluster network.
        :param pulumi.Input['IsClusterNetworkInterfacePrimaryIpArgs'] primary_ip: The cluster network subnet reserved IP for this cluster network interface.
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input['IsClusterNetworkInterfaceSubnetArgs'] subnet: The associated cluster network subnet. Required if `primary_ip` does not specify a clusternetwork subnet reserved IP
               identity.
        :param pulumi.Input[Sequence[pulumi.Input['IsClusterNetworkInterfaceTargetArgs']]] targets: The target of this cluster network interface.If absent, this cluster network interface is not attached to a target.The
               resources supported by this property may[expand](https://cloud.ibm.com/apidocs/vpc#property-value-expansion) in the
               future.
        :param pulumi.Input[Sequence[pulumi.Input['IsClusterNetworkInterfaceVpcArgs']]] vpcs: The VPC this cluster network interface resides in.
        :param pulumi.Input[Sequence[pulumi.Input['IsClusterNetworkInterfaceZoneArgs']]] zones: The zone this cluster network interface resides in.
        """
        if allow_ip_spoofing is not None:
            pulumi.set(__self__, "allow_ip_spoofing", allow_ip_spoofing)
        if auto_delete is not None:
            pulumi.set(__self__, "auto_delete", auto_delete)
        if cluster_network_id is not None:
            pulumi.set(__self__, "cluster_network_id", cluster_network_id)
        if cluster_network_interface_id is not None:
            pulumi.set(__self__, "cluster_network_interface_id", cluster_network_interface_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if enable_infrastructure_nat is not None:
            pulumi.set(__self__, "enable_infrastructure_nat", enable_infrastructure_nat)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if is_cluster_network_interface_id is not None:
            pulumi.set(__self__, "is_cluster_network_interface_id", is_cluster_network_interface_id)
        if lifecycle_reasons is not None:
            pulumi.set(__self__, "lifecycle_reasons", lifecycle_reasons)
        if lifecycle_state is not None:
            pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if primary_ip is not None:
            pulumi.set(__self__, "primary_ip", primary_ip)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)
        if vpcs is not None:
            pulumi.set(__self__, "vpcs", vpcs)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @_builtins.property
    @pulumi.getter(name="allowIpSpoofing")
    def allow_ip_spoofing(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether source IP spoofing is allowed on this cluster network interface. If `false`, source IP spoofing is
        prevented on this cluster network interface. If `true`, source IP spoofing is allowed on this cluster network interface.
        """
        return pulumi.get(self, "allow_ip_spoofing")

    @allow_ip_spoofing.setter
    def allow_ip_spoofing(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_ip_spoofing", value)

    @_builtins.property
    @pulumi.getter(name="autoDelete")
    def auto_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether this cluster network interface will be automatically deleted when `target` is deleted.
        """
        return pulumi.get(self, "auto_delete")

    @auto_delete.setter
    def auto_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auto_delete", value)

    @_builtins.property
    @pulumi.getter(name="clusterNetworkId")
    def cluster_network_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cluster network identifier.
        """
        return pulumi.get(self, "cluster_network_id")

    @cluster_network_id.setter
    def cluster_network_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_network_id", value)

    @_builtins.property
    @pulumi.getter(name="clusterNetworkInterfaceId")
    def cluster_network_interface_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier for this cluster network interface.
        """
        return pulumi.get(self, "cluster_network_interface_id")

    @cluster_network_interface_id.setter
    def cluster_network_interface_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_network_interface_id", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time that the cluster network interface was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="enableInfrastructureNat")
    def enable_infrastructure_nat(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If `true`:- The VPC infrastructure performs any needed NAT operations.- `floating_ips` must not have more than one
        floating IP.If `false`:- Packets are passed unchanged to/from the virtual network interface, allowing the workload to
        perform any needed NAT operations.
        """
        return pulumi.get(self, "enable_infrastructure_nat")

    @enable_infrastructure_nat.setter
    def enable_infrastructure_nat(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_infrastructure_nat", value)

    @_builtins.property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "etag", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL for this cluster network interface.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="isClusterNetworkInterfaceId")
    def is_cluster_network_interface_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_cluster_network_interface_id")

    @is_cluster_network_interface_id.setter
    def is_cluster_network_interface_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_cluster_network_interface_id", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleReasons")
    def lifecycle_reasons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsClusterNetworkInterfaceLifecycleReasonArgs']]]]:
        """
        The reasons for the current `lifecycle_state` (if any).
        """
        return pulumi.get(self, "lifecycle_reasons")

    @lifecycle_reasons.setter
    def lifecycle_reasons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsClusterNetworkInterfaceLifecycleReasonArgs']]]]):
        pulumi.set(self, "lifecycle_reasons", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The lifecycle state of the cluster network interface.
        """
        return pulumi.get(self, "lifecycle_state")

    @lifecycle_state.setter
    def lifecycle_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lifecycle_state", value)

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The MAC address of the cluster network interface. May be absent if`lifecycle_state` is `pending`.
        """
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name for this cluster network interface. The name is unique across all interfaces in the cluster network.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="primaryIp")
    def primary_ip(self) -> Optional[pulumi.Input['IsClusterNetworkInterfacePrimaryIpArgs']]:
        """
        The cluster network subnet reserved IP for this cluster network interface.
        """
        return pulumi.get(self, "primary_ip")

    @primary_ip.setter
    def primary_ip(self, value: Optional[pulumi.Input['IsClusterNetworkInterfacePrimaryIpArgs']]):
        pulumi.set(self, "primary_ip", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input['IsClusterNetworkInterfaceSubnetArgs']]:
        """
        The associated cluster network subnet. Required if `primary_ip` does not specify a clusternetwork subnet reserved IP
        identity.
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input['IsClusterNetworkInterfaceSubnetArgs']]):
        pulumi.set(self, "subnet", value)

    @_builtins.property
    @pulumi.getter
    def targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsClusterNetworkInterfaceTargetArgs']]]]:
        """
        The target of this cluster network interface.If absent, this cluster network interface is not attached to a target.The
        resources supported by this property may[expand](https://cloud.ibm.com/apidocs/vpc#property-value-expansion) in the
        future.
        """
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsClusterNetworkInterfaceTargetArgs']]]]):
        pulumi.set(self, "targets", value)

    @_builtins.property
    @pulumi.getter
    def vpcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsClusterNetworkInterfaceVpcArgs']]]]:
        """
        The VPC this cluster network interface resides in.
        """
        return pulumi.get(self, "vpcs")

    @vpcs.setter
    def vpcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsClusterNetworkInterfaceVpcArgs']]]]):
        pulumi.set(self, "vpcs", value)

    @_builtins.property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsClusterNetworkInterfaceZoneArgs']]]]:
        """
        The zone this cluster network interface resides in.
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsClusterNetworkInterfaceZoneArgs']]]]):
        pulumi.set(self, "zones", value)


@pulumi.type_token("ibm:index/isClusterNetworkInterface:IsClusterNetworkInterface")
class IsClusterNetworkInterface(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_cluster_network_interface_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_ip: Optional[pulumi.Input[Union['IsClusterNetworkInterfacePrimaryIpArgs', 'IsClusterNetworkInterfacePrimaryIpArgsDict']]] = None,
                 subnet: Optional[pulumi.Input[Union['IsClusterNetworkInterfaceSubnetArgs', 'IsClusterNetworkInterfaceSubnetArgsDict']]] = None,
                 __props__=None):
        """
        Create a IsClusterNetworkInterface resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_network_id: The cluster network identifier.
        :param pulumi.Input[_builtins.str] name: The name for this cluster network interface. The name is unique across all interfaces in the cluster network.
        :param pulumi.Input[Union['IsClusterNetworkInterfacePrimaryIpArgs', 'IsClusterNetworkInterfacePrimaryIpArgsDict']] primary_ip: The cluster network subnet reserved IP for this cluster network interface.
        :param pulumi.Input[Union['IsClusterNetworkInterfaceSubnetArgs', 'IsClusterNetworkInterfaceSubnetArgsDict']] subnet: The associated cluster network subnet. Required if `primary_ip` does not specify a clusternetwork subnet reserved IP
               identity.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsClusterNetworkInterfaceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsClusterNetworkInterface resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsClusterNetworkInterfaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsClusterNetworkInterfaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_cluster_network_interface_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_ip: Optional[pulumi.Input[Union['IsClusterNetworkInterfacePrimaryIpArgs', 'IsClusterNetworkInterfacePrimaryIpArgsDict']]] = None,
                 subnet: Optional[pulumi.Input[Union['IsClusterNetworkInterfaceSubnetArgs', 'IsClusterNetworkInterfaceSubnetArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsClusterNetworkInterfaceArgs.__new__(IsClusterNetworkInterfaceArgs)

            if cluster_network_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_network_id'")
            __props__.__dict__["cluster_network_id"] = cluster_network_id
            __props__.__dict__["is_cluster_network_interface_id"] = is_cluster_network_interface_id
            __props__.__dict__["name"] = name
            __props__.__dict__["primary_ip"] = primary_ip
            __props__.__dict__["subnet"] = subnet
            __props__.__dict__["allow_ip_spoofing"] = None
            __props__.__dict__["auto_delete"] = None
            __props__.__dict__["cluster_network_interface_id"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["enable_infrastructure_nat"] = None
            __props__.__dict__["etag"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["lifecycle_reasons"] = None
            __props__.__dict__["lifecycle_state"] = None
            __props__.__dict__["mac_address"] = None
            __props__.__dict__["resource_type"] = None
            __props__.__dict__["targets"] = None
            __props__.__dict__["vpcs"] = None
            __props__.__dict__["zones"] = None
        super(IsClusterNetworkInterface, __self__).__init__(
            'ibm:index/isClusterNetworkInterface:IsClusterNetworkInterface',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_ip_spoofing: Optional[pulumi.Input[_builtins.bool]] = None,
            auto_delete: Optional[pulumi.Input[_builtins.bool]] = None,
            cluster_network_id: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_network_interface_id: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            enable_infrastructure_nat: Optional[pulumi.Input[_builtins.bool]] = None,
            etag: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            is_cluster_network_interface_id: Optional[pulumi.Input[_builtins.str]] = None,
            lifecycle_reasons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsClusterNetworkInterfaceLifecycleReasonArgs', 'IsClusterNetworkInterfaceLifecycleReasonArgsDict']]]]] = None,
            lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
            mac_address: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            primary_ip: Optional[pulumi.Input[Union['IsClusterNetworkInterfacePrimaryIpArgs', 'IsClusterNetworkInterfacePrimaryIpArgsDict']]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            subnet: Optional[pulumi.Input[Union['IsClusterNetworkInterfaceSubnetArgs', 'IsClusterNetworkInterfaceSubnetArgsDict']]] = None,
            targets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsClusterNetworkInterfaceTargetArgs', 'IsClusterNetworkInterfaceTargetArgsDict']]]]] = None,
            vpcs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsClusterNetworkInterfaceVpcArgs', 'IsClusterNetworkInterfaceVpcArgsDict']]]]] = None,
            zones: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsClusterNetworkInterfaceZoneArgs', 'IsClusterNetworkInterfaceZoneArgsDict']]]]] = None) -> 'IsClusterNetworkInterface':
        """
        Get an existing IsClusterNetworkInterface resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] allow_ip_spoofing: Indicates whether source IP spoofing is allowed on this cluster network interface. If `false`, source IP spoofing is
               prevented on this cluster network interface. If `true`, source IP spoofing is allowed on this cluster network interface.
        :param pulumi.Input[_builtins.bool] auto_delete: Indicates whether this cluster network interface will be automatically deleted when `target` is deleted.
        :param pulumi.Input[_builtins.str] cluster_network_id: The cluster network identifier.
        :param pulumi.Input[_builtins.str] cluster_network_interface_id: The unique identifier for this cluster network interface.
        :param pulumi.Input[_builtins.str] created_at: The date and time that the cluster network interface was created.
        :param pulumi.Input[_builtins.bool] enable_infrastructure_nat: If `true`:- The VPC infrastructure performs any needed NAT operations.- `floating_ips` must not have more than one
               floating IP.If `false`:- Packets are passed unchanged to/from the virtual network interface, allowing the workload to
               perform any needed NAT operations.
        :param pulumi.Input[_builtins.str] href: The URL for this cluster network interface.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsClusterNetworkInterfaceLifecycleReasonArgs', 'IsClusterNetworkInterfaceLifecycleReasonArgsDict']]]] lifecycle_reasons: The reasons for the current `lifecycle_state` (if any).
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of the cluster network interface.
        :param pulumi.Input[_builtins.str] mac_address: The MAC address of the cluster network interface. May be absent if`lifecycle_state` is `pending`.
        :param pulumi.Input[_builtins.str] name: The name for this cluster network interface. The name is unique across all interfaces in the cluster network.
        :param pulumi.Input[Union['IsClusterNetworkInterfacePrimaryIpArgs', 'IsClusterNetworkInterfacePrimaryIpArgsDict']] primary_ip: The cluster network subnet reserved IP for this cluster network interface.
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input[Union['IsClusterNetworkInterfaceSubnetArgs', 'IsClusterNetworkInterfaceSubnetArgsDict']] subnet: The associated cluster network subnet. Required if `primary_ip` does not specify a clusternetwork subnet reserved IP
               identity.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsClusterNetworkInterfaceTargetArgs', 'IsClusterNetworkInterfaceTargetArgsDict']]]] targets: The target of this cluster network interface.If absent, this cluster network interface is not attached to a target.The
               resources supported by this property may[expand](https://cloud.ibm.com/apidocs/vpc#property-value-expansion) in the
               future.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsClusterNetworkInterfaceVpcArgs', 'IsClusterNetworkInterfaceVpcArgsDict']]]] vpcs: The VPC this cluster network interface resides in.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsClusterNetworkInterfaceZoneArgs', 'IsClusterNetworkInterfaceZoneArgsDict']]]] zones: The zone this cluster network interface resides in.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsClusterNetworkInterfaceState.__new__(_IsClusterNetworkInterfaceState)

        __props__.__dict__["allow_ip_spoofing"] = allow_ip_spoofing
        __props__.__dict__["auto_delete"] = auto_delete
        __props__.__dict__["cluster_network_id"] = cluster_network_id
        __props__.__dict__["cluster_network_interface_id"] = cluster_network_interface_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["enable_infrastructure_nat"] = enable_infrastructure_nat
        __props__.__dict__["etag"] = etag
        __props__.__dict__["href"] = href
        __props__.__dict__["is_cluster_network_interface_id"] = is_cluster_network_interface_id
        __props__.__dict__["lifecycle_reasons"] = lifecycle_reasons
        __props__.__dict__["lifecycle_state"] = lifecycle_state
        __props__.__dict__["mac_address"] = mac_address
        __props__.__dict__["name"] = name
        __props__.__dict__["primary_ip"] = primary_ip
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["subnet"] = subnet
        __props__.__dict__["targets"] = targets
        __props__.__dict__["vpcs"] = vpcs
        __props__.__dict__["zones"] = zones
        return IsClusterNetworkInterface(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="allowIpSpoofing")
    def allow_ip_spoofing(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether source IP spoofing is allowed on this cluster network interface. If `false`, source IP spoofing is
        prevented on this cluster network interface. If `true`, source IP spoofing is allowed on this cluster network interface.
        """
        return pulumi.get(self, "allow_ip_spoofing")

    @_builtins.property
    @pulumi.getter(name="autoDelete")
    def auto_delete(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether this cluster network interface will be automatically deleted when `target` is deleted.
        """
        return pulumi.get(self, "auto_delete")

    @_builtins.property
    @pulumi.getter(name="clusterNetworkId")
    def cluster_network_id(self) -> pulumi.Output[_builtins.str]:
        """
        The cluster network identifier.
        """
        return pulumi.get(self, "cluster_network_id")

    @_builtins.property
    @pulumi.getter(name="clusterNetworkInterfaceId")
    def cluster_network_interface_id(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier for this cluster network interface.
        """
        return pulumi.get(self, "cluster_network_interface_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time that the cluster network interface was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="enableInfrastructureNat")
    def enable_infrastructure_nat(self) -> pulumi.Output[_builtins.bool]:
        """
        If `true`:- The VPC infrastructure performs any needed NAT operations.- `floating_ips` must not have more than one
        floating IP.If `false`:- Packets are passed unchanged to/from the virtual network interface, allowing the workload to
        perform any needed NAT operations.
        """
        return pulumi.get(self, "enable_infrastructure_nat")

    @_builtins.property
    @pulumi.getter
    def etag(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "etag")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        The URL for this cluster network interface.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="isClusterNetworkInterfaceId")
    def is_cluster_network_interface_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_cluster_network_interface_id")

    @_builtins.property
    @pulumi.getter(name="lifecycleReasons")
    def lifecycle_reasons(self) -> pulumi.Output[Sequence['outputs.IsClusterNetworkInterfaceLifecycleReason']]:
        """
        The reasons for the current `lifecycle_state` (if any).
        """
        return pulumi.get(self, "lifecycle_reasons")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> pulumi.Output[_builtins.str]:
        """
        The lifecycle state of the cluster network interface.
        """
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> pulumi.Output[_builtins.str]:
        """
        The MAC address of the cluster network interface. May be absent if`lifecycle_state` is `pending`.
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name for this cluster network interface. The name is unique across all interfaces in the cluster network.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="primaryIp")
    def primary_ip(self) -> pulumi.Output[Optional['outputs.IsClusterNetworkInterfacePrimaryIp']]:
        """
        The cluster network subnet reserved IP for this cluster network interface.
        """
        return pulumi.get(self, "primary_ip")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def subnet(self) -> pulumi.Output[Optional['outputs.IsClusterNetworkInterfaceSubnet']]:
        """
        The associated cluster network subnet. Required if `primary_ip` does not specify a clusternetwork subnet reserved IP
        identity.
        """
        return pulumi.get(self, "subnet")

    @_builtins.property
    @pulumi.getter
    def targets(self) -> pulumi.Output[Sequence['outputs.IsClusterNetworkInterfaceTarget']]:
        """
        The target of this cluster network interface.If absent, this cluster network interface is not attached to a target.The
        resources supported by this property may[expand](https://cloud.ibm.com/apidocs/vpc#property-value-expansion) in the
        future.
        """
        return pulumi.get(self, "targets")

    @_builtins.property
    @pulumi.getter
    def vpcs(self) -> pulumi.Output[Sequence['outputs.IsClusterNetworkInterfaceVpc']]:
        """
        The VPC this cluster network interface resides in.
        """
        return pulumi.get(self, "vpcs")

    @_builtins.property
    @pulumi.getter
    def zones(self) -> pulumi.Output[Sequence['outputs.IsClusterNetworkInterfaceZone']]:
        """
        The zone this cluster network interface resides in.
        """
        return pulumi.get(self, "zones")

