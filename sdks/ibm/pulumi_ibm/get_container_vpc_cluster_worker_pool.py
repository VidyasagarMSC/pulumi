# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetContainerVpcClusterWorkerPoolResult',
    'AwaitableGetContainerVpcClusterWorkerPoolResult',
    'get_container_vpc_cluster_worker_pool',
    'get_container_vpc_cluster_worker_pool_output',
]

@pulumi.output_type
class GetContainerVpcClusterWorkerPoolResult:
    """
    A collection of values returned by getContainerVpcClusterWorkerPool.
    """
    def __init__(__self__, autoscale_enabled=None, cluster=None, crk=None, flavor=None, host_pool_id=None, id=None, isolation=None, kms_account_id=None, kms_instance_id=None, labels=None, operating_system=None, resource_group_id=None, secondary_storages=None, vpc_id=None, worker_count=None, worker_pool_name=None, zones=None):
        if autoscale_enabled and not isinstance(autoscale_enabled, bool):
            raise TypeError("Expected argument 'autoscale_enabled' to be a bool")
        pulumi.set(__self__, "autoscale_enabled", autoscale_enabled)
        if cluster and not isinstance(cluster, str):
            raise TypeError("Expected argument 'cluster' to be a str")
        pulumi.set(__self__, "cluster", cluster)
        if crk and not isinstance(crk, str):
            raise TypeError("Expected argument 'crk' to be a str")
        pulumi.set(__self__, "crk", crk)
        if flavor and not isinstance(flavor, str):
            raise TypeError("Expected argument 'flavor' to be a str")
        pulumi.set(__self__, "flavor", flavor)
        if host_pool_id and not isinstance(host_pool_id, str):
            raise TypeError("Expected argument 'host_pool_id' to be a str")
        pulumi.set(__self__, "host_pool_id", host_pool_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if isolation and not isinstance(isolation, str):
            raise TypeError("Expected argument 'isolation' to be a str")
        pulumi.set(__self__, "isolation", isolation)
        if kms_account_id and not isinstance(kms_account_id, str):
            raise TypeError("Expected argument 'kms_account_id' to be a str")
        pulumi.set(__self__, "kms_account_id", kms_account_id)
        if kms_instance_id and not isinstance(kms_instance_id, str):
            raise TypeError("Expected argument 'kms_instance_id' to be a str")
        pulumi.set(__self__, "kms_instance_id", kms_instance_id)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if operating_system and not isinstance(operating_system, str):
            raise TypeError("Expected argument 'operating_system' to be a str")
        pulumi.set(__self__, "operating_system", operating_system)
        if resource_group_id and not isinstance(resource_group_id, str):
            raise TypeError("Expected argument 'resource_group_id' to be a str")
        pulumi.set(__self__, "resource_group_id", resource_group_id)
        if secondary_storages and not isinstance(secondary_storages, list):
            raise TypeError("Expected argument 'secondary_storages' to be a list")
        pulumi.set(__self__, "secondary_storages", secondary_storages)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)
        if worker_count and not isinstance(worker_count, float):
            raise TypeError("Expected argument 'worker_count' to be a float")
        pulumi.set(__self__, "worker_count", worker_count)
        if worker_pool_name and not isinstance(worker_pool_name, str):
            raise TypeError("Expected argument 'worker_pool_name' to be a str")
        pulumi.set(__self__, "worker_pool_name", worker_pool_name)
        if zones and not isinstance(zones, list):
            raise TypeError("Expected argument 'zones' to be a list")
        pulumi.set(__self__, "zones", zones)

    @_builtins.property
    @pulumi.getter(name="autoscaleEnabled")
    def autoscale_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "autoscale_enabled")

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> _builtins.str:
        return pulumi.get(self, "cluster")

    @_builtins.property
    @pulumi.getter
    def crk(self) -> _builtins.str:
        return pulumi.get(self, "crk")

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> _builtins.str:
        return pulumi.get(self, "flavor")

    @_builtins.property
    @pulumi.getter(name="hostPoolId")
    def host_pool_id(self) -> _builtins.str:
        return pulumi.get(self, "host_pool_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def isolation(self) -> _builtins.str:
        return pulumi.get(self, "isolation")

    @_builtins.property
    @pulumi.getter(name="kmsAccountId")
    def kms_account_id(self) -> _builtins.str:
        return pulumi.get(self, "kms_account_id")

    @_builtins.property
    @pulumi.getter(name="kmsInstanceId")
    def kms_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "kms_instance_id")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> _builtins.str:
        return pulumi.get(self, "operating_system")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> _builtins.str:
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter(name="secondaryStorages")
    def secondary_storages(self) -> Sequence['outputs.GetContainerVpcClusterWorkerPoolSecondaryStorageResult']:
        return pulumi.get(self, "secondary_storages")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        return pulumi.get(self, "vpc_id")

    @_builtins.property
    @pulumi.getter(name="workerCount")
    def worker_count(self) -> _builtins.float:
        return pulumi.get(self, "worker_count")

    @_builtins.property
    @pulumi.getter(name="workerPoolName")
    def worker_pool_name(self) -> _builtins.str:
        return pulumi.get(self, "worker_pool_name")

    @_builtins.property
    @pulumi.getter
    def zones(self) -> Sequence['outputs.GetContainerVpcClusterWorkerPoolZoneResult']:
        return pulumi.get(self, "zones")


class AwaitableGetContainerVpcClusterWorkerPoolResult(GetContainerVpcClusterWorkerPoolResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetContainerVpcClusterWorkerPoolResult(
            autoscale_enabled=self.autoscale_enabled,
            cluster=self.cluster,
            crk=self.crk,
            flavor=self.flavor,
            host_pool_id=self.host_pool_id,
            id=self.id,
            isolation=self.isolation,
            kms_account_id=self.kms_account_id,
            kms_instance_id=self.kms_instance_id,
            labels=self.labels,
            operating_system=self.operating_system,
            resource_group_id=self.resource_group_id,
            secondary_storages=self.secondary_storages,
            vpc_id=self.vpc_id,
            worker_count=self.worker_count,
            worker_pool_name=self.worker_pool_name,
            zones=self.zones)


def get_container_vpc_cluster_worker_pool(cluster: Optional[_builtins.str] = None,
                                          id: Optional[_builtins.str] = None,
                                          worker_pool_name: Optional[_builtins.str] = None,
                                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetContainerVpcClusterWorkerPoolResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cluster'] = cluster
    __args__['id'] = id
    __args__['workerPoolName'] = worker_pool_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getContainerVpcClusterWorkerPool:getContainerVpcClusterWorkerPool', __args__, opts=opts, typ=GetContainerVpcClusterWorkerPoolResult, package_ref=_utilities.get_package()).value

    return AwaitableGetContainerVpcClusterWorkerPoolResult(
        autoscale_enabled=pulumi.get(__ret__, 'autoscale_enabled'),
        cluster=pulumi.get(__ret__, 'cluster'),
        crk=pulumi.get(__ret__, 'crk'),
        flavor=pulumi.get(__ret__, 'flavor'),
        host_pool_id=pulumi.get(__ret__, 'host_pool_id'),
        id=pulumi.get(__ret__, 'id'),
        isolation=pulumi.get(__ret__, 'isolation'),
        kms_account_id=pulumi.get(__ret__, 'kms_account_id'),
        kms_instance_id=pulumi.get(__ret__, 'kms_instance_id'),
        labels=pulumi.get(__ret__, 'labels'),
        operating_system=pulumi.get(__ret__, 'operating_system'),
        resource_group_id=pulumi.get(__ret__, 'resource_group_id'),
        secondary_storages=pulumi.get(__ret__, 'secondary_storages'),
        vpc_id=pulumi.get(__ret__, 'vpc_id'),
        worker_count=pulumi.get(__ret__, 'worker_count'),
        worker_pool_name=pulumi.get(__ret__, 'worker_pool_name'),
        zones=pulumi.get(__ret__, 'zones'))
def get_container_vpc_cluster_worker_pool_output(cluster: Optional[pulumi.Input[_builtins.str]] = None,
                                                 id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                 worker_pool_name: Optional[pulumi.Input[_builtins.str]] = None,
                                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetContainerVpcClusterWorkerPoolResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cluster'] = cluster
    __args__['id'] = id
    __args__['workerPoolName'] = worker_pool_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getContainerVpcClusterWorkerPool:getContainerVpcClusterWorkerPool', __args__, opts=opts, typ=GetContainerVpcClusterWorkerPoolResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetContainerVpcClusterWorkerPoolResult(
        autoscale_enabled=pulumi.get(__response__, 'autoscale_enabled'),
        cluster=pulumi.get(__response__, 'cluster'),
        crk=pulumi.get(__response__, 'crk'),
        flavor=pulumi.get(__response__, 'flavor'),
        host_pool_id=pulumi.get(__response__, 'host_pool_id'),
        id=pulumi.get(__response__, 'id'),
        isolation=pulumi.get(__response__, 'isolation'),
        kms_account_id=pulumi.get(__response__, 'kms_account_id'),
        kms_instance_id=pulumi.get(__response__, 'kms_instance_id'),
        labels=pulumi.get(__response__, 'labels'),
        operating_system=pulumi.get(__response__, 'operating_system'),
        resource_group_id=pulumi.get(__response__, 'resource_group_id'),
        secondary_storages=pulumi.get(__response__, 'secondary_storages'),
        vpc_id=pulumi.get(__response__, 'vpc_id'),
        worker_count=pulumi.get(__response__, 'worker_count'),
        worker_pool_name=pulumi.get(__response__, 'worker_pool_name'),
        zones=pulumi.get(__response__, 'zones')))
