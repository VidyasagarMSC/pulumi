# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsInstanceActionArgs', 'IsInstanceAction']

@pulumi.input_type
class IsInstanceActionArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[_builtins.str],
                 instance: pulumi.Input[_builtins.str],
                 force_action: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_instance_action_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['IsInstanceActionTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a IsInstanceAction resource.
        :param pulumi.Input[_builtins.str] action: This restart/start/stops an instance.
        :param pulumi.Input[_builtins.str] instance: Instance identifier
        :param pulumi.Input[_builtins.bool] force_action: If set to true, the action will be forced immediately, and all queued actions deleted. Ignored for the start action.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "instance", instance)
        if force_action is not None:
            pulumi.set(__self__, "force_action", force_action)
        if is_instance_action_id is not None:
            pulumi.set(__self__, "is_instance_action_id", is_instance_action_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Input[_builtins.str]:
        """
        This restart/start/stops an instance.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter
    def instance(self) -> pulumi.Input[_builtins.str]:
        """
        Instance identifier
        """
        return pulumi.get(self, "instance")

    @instance.setter
    def instance(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance", value)

    @_builtins.property
    @pulumi.getter(name="forceAction")
    def force_action(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, the action will be forced immediately, and all queued actions deleted. Ignored for the start action.
        """
        return pulumi.get(self, "force_action")

    @force_action.setter
    def force_action(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "force_action", value)

    @_builtins.property
    @pulumi.getter(name="isInstanceActionId")
    def is_instance_action_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_instance_action_id")

    @is_instance_action_id.setter
    def is_instance_action_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_instance_action_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsInstanceActionTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsInstanceActionTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _IsInstanceActionState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 force_action: Optional[pulumi.Input[_builtins.bool]] = None,
                 instance: Optional[pulumi.Input[_builtins.str]] = None,
                 is_instance_action_id: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 status_reasons: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceActionStatusReasonArgs']]]] = None,
                 timeouts: Optional[pulumi.Input['IsInstanceActionTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering IsInstanceAction resources.
        :param pulumi.Input[_builtins.str] action: This restart/start/stops an instance.
        :param pulumi.Input[_builtins.bool] force_action: If set to true, the action will be forced immediately, and all queued actions deleted. Ignored for the start action.
        :param pulumi.Input[_builtins.str] instance: Instance identifier
        :param pulumi.Input[_builtins.str] status: Instance status
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if force_action is not None:
            pulumi.set(__self__, "force_action", force_action)
        if instance is not None:
            pulumi.set(__self__, "instance", instance)
        if is_instance_action_id is not None:
            pulumi.set(__self__, "is_instance_action_id", is_instance_action_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_reasons is not None:
            pulumi.set(__self__, "status_reasons", status_reasons)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        This restart/start/stops an instance.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="forceAction")
    def force_action(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, the action will be forced immediately, and all queued actions deleted. Ignored for the start action.
        """
        return pulumi.get(self, "force_action")

    @force_action.setter
    def force_action(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "force_action", value)

    @_builtins.property
    @pulumi.getter
    def instance(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Instance identifier
        """
        return pulumi.get(self, "instance")

    @instance.setter
    def instance(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance", value)

    @_builtins.property
    @pulumi.getter(name="isInstanceActionId")
    def is_instance_action_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_instance_action_id")

    @is_instance_action_id.setter
    def is_instance_action_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_instance_action_id", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Instance status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceActionStatusReasonArgs']]]]:
        return pulumi.get(self, "status_reasons")

    @status_reasons.setter
    def status_reasons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceActionStatusReasonArgs']]]]):
        pulumi.set(self, "status_reasons", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsInstanceActionTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsInstanceActionTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/isInstanceAction:IsInstanceAction")
class IsInstanceAction(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 force_action: Optional[pulumi.Input[_builtins.bool]] = None,
                 instance: Optional[pulumi.Input[_builtins.str]] = None,
                 is_instance_action_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsInstanceActionTimeoutsArgs', 'IsInstanceActionTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a IsInstanceAction resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: This restart/start/stops an instance.
        :param pulumi.Input[_builtins.bool] force_action: If set to true, the action will be forced immediately, and all queued actions deleted. Ignored for the start action.
        :param pulumi.Input[_builtins.str] instance: Instance identifier
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsInstanceActionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsInstanceAction resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsInstanceActionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsInstanceActionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 force_action: Optional[pulumi.Input[_builtins.bool]] = None,
                 instance: Optional[pulumi.Input[_builtins.str]] = None,
                 is_instance_action_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsInstanceActionTimeoutsArgs', 'IsInstanceActionTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsInstanceActionArgs.__new__(IsInstanceActionArgs)

            if action is None and not opts.urn:
                raise TypeError("Missing required property 'action'")
            __props__.__dict__["action"] = action
            __props__.__dict__["force_action"] = force_action
            if instance is None and not opts.urn:
                raise TypeError("Missing required property 'instance'")
            __props__.__dict__["instance"] = instance
            __props__.__dict__["is_instance_action_id"] = is_instance_action_id
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["status"] = None
            __props__.__dict__["status_reasons"] = None
        super(IsInstanceAction, __self__).__init__(
            'ibm:index/isInstanceAction:IsInstanceAction',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[_builtins.str]] = None,
            force_action: Optional[pulumi.Input[_builtins.bool]] = None,
            instance: Optional[pulumi.Input[_builtins.str]] = None,
            is_instance_action_id: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            status_reasons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceActionStatusReasonArgs', 'IsInstanceActionStatusReasonArgsDict']]]]] = None,
            timeouts: Optional[pulumi.Input[Union['IsInstanceActionTimeoutsArgs', 'IsInstanceActionTimeoutsArgsDict']]] = None) -> 'IsInstanceAction':
        """
        Get an existing IsInstanceAction resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: This restart/start/stops an instance.
        :param pulumi.Input[_builtins.bool] force_action: If set to true, the action will be forced immediately, and all queued actions deleted. Ignored for the start action.
        :param pulumi.Input[_builtins.str] instance: Instance identifier
        :param pulumi.Input[_builtins.str] status: Instance status
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsInstanceActionState.__new__(_IsInstanceActionState)

        __props__.__dict__["action"] = action
        __props__.__dict__["force_action"] = force_action
        __props__.__dict__["instance"] = instance
        __props__.__dict__["is_instance_action_id"] = is_instance_action_id
        __props__.__dict__["status"] = status
        __props__.__dict__["status_reasons"] = status_reasons
        __props__.__dict__["timeouts"] = timeouts
        return IsInstanceAction(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Output[_builtins.str]:
        """
        This restart/start/stops an instance.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="forceAction")
    def force_action(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        If set to true, the action will be forced immediately, and all queued actions deleted. Ignored for the start action.
        """
        return pulumi.get(self, "force_action")

    @_builtins.property
    @pulumi.getter
    def instance(self) -> pulumi.Output[_builtins.str]:
        """
        Instance identifier
        """
        return pulumi.get(self, "instance")

    @_builtins.property
    @pulumi.getter(name="isInstanceActionId")
    def is_instance_action_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_instance_action_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Instance status
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> pulumi.Output[Sequence['outputs.IsInstanceActionStatusReason']]:
        return pulumi.get(self, "status_reasons")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IsInstanceActionTimeouts']]:
        return pulumi.get(self, "timeouts")

