# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BackupRecoveryAgentUpgradeTaskArgs', 'BackupRecoveryAgentUpgradeTask']

@pulumi.input_type
class BackupRecoveryAgentUpgradeTaskArgs:
    def __init__(__self__, *,
                 x_ibm_tenant_id: pulumi.Input[_builtins.str],
                 agent_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 backup_recovery_agent_upgrade_task_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 retry_task_id: Optional[pulumi.Input[_builtins.float]] = None,
                 schedule_end_time_usecs: Optional[pulumi.Input[_builtins.float]] = None,
                 schedule_time_usecs: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a BackupRecoveryAgentUpgradeTask resource.
        :param pulumi.Input[_builtins.str] x_ibm_tenant_id: Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
               be specified.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] agent_ids: Specifies the agents upgraded in the task.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the task.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the task.
        :param pulumi.Input[_builtins.float] retry_task_id: Specifies ID of a task which is to be retried.
        :param pulumi.Input[_builtins.float] schedule_end_time_usecs: Specifies the time before which the upgrade task should start execution as a Unix epoch Timestamp (in microseconds). If
               this is not specified the task will start anytime after scheduleTimeUsecs.
        :param pulumi.Input[_builtins.float] schedule_time_usecs: Specifies the time when the task should start execution as a Unix epoch Timestamp (in microseconds). If no schedule is
               specified, the task will start immediately.
        """
        pulumi.set(__self__, "x_ibm_tenant_id", x_ibm_tenant_id)
        if agent_ids is not None:
            pulumi.set(__self__, "agent_ids", agent_ids)
        if backup_recovery_agent_upgrade_task_id is not None:
            pulumi.set(__self__, "backup_recovery_agent_upgrade_task_id", backup_recovery_agent_upgrade_task_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if retry_task_id is not None:
            pulumi.set(__self__, "retry_task_id", retry_task_id)
        if schedule_end_time_usecs is not None:
            pulumi.set(__self__, "schedule_end_time_usecs", schedule_end_time_usecs)
        if schedule_time_usecs is not None:
            pulumi.set(__self__, "schedule_time_usecs", schedule_time_usecs)

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
        be specified.
        """
        return pulumi.get(self, "x_ibm_tenant_id")

    @x_ibm_tenant_id.setter
    def x_ibm_tenant_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "x_ibm_tenant_id", value)

    @_builtins.property
    @pulumi.getter(name="agentIds")
    def agent_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        """
        Specifies the agents upgraded in the task.
        """
        return pulumi.get(self, "agent_ids")

    @agent_ids.setter
    def agent_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "agent_ids", value)

    @_builtins.property
    @pulumi.getter(name="backupRecoveryAgentUpgradeTaskId")
    def backup_recovery_agent_upgrade_task_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "backup_recovery_agent_upgrade_task_id")

    @backup_recovery_agent_upgrade_task_id.setter
    def backup_recovery_agent_upgrade_task_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_recovery_agent_upgrade_task_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the task.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the task.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="retryTaskId")
    def retry_task_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies ID of a task which is to be retried.
        """
        return pulumi.get(self, "retry_task_id")

    @retry_task_id.setter
    def retry_task_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "retry_task_id", value)

    @_builtins.property
    @pulumi.getter(name="scheduleEndTimeUsecs")
    def schedule_end_time_usecs(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the time before which the upgrade task should start execution as a Unix epoch Timestamp (in microseconds). If
        this is not specified the task will start anytime after scheduleTimeUsecs.
        """
        return pulumi.get(self, "schedule_end_time_usecs")

    @schedule_end_time_usecs.setter
    def schedule_end_time_usecs(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "schedule_end_time_usecs", value)

    @_builtins.property
    @pulumi.getter(name="scheduleTimeUsecs")
    def schedule_time_usecs(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the time when the task should start execution as a Unix epoch Timestamp (in microseconds). If no schedule is
        specified, the task will start immediately.
        """
        return pulumi.get(self, "schedule_time_usecs")

    @schedule_time_usecs.setter
    def schedule_time_usecs(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "schedule_time_usecs", value)


@pulumi.input_type
class _BackupRecoveryAgentUpgradeTaskState:
    def __init__(__self__, *,
                 agent_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 agents: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryAgentUpgradeTaskAgentArgs']]]] = None,
                 backup_recovery_agent_upgrade_task_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_version: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 end_time_usecs: Optional[pulumi.Input[_builtins.float]] = None,
                 errors: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryAgentUpgradeTaskErrorArgs']]]] = None,
                 is_retryable: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 retried_task_id: Optional[pulumi.Input[_builtins.float]] = None,
                 retry_task_id: Optional[pulumi.Input[_builtins.float]] = None,
                 schedule_end_time_usecs: Optional[pulumi.Input[_builtins.float]] = None,
                 schedule_time_usecs: Optional[pulumi.Input[_builtins.float]] = None,
                 start_time_usecs: Optional[pulumi.Input[_builtins.float]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering BackupRecoveryAgentUpgradeTask resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] agent_ids: Specifies the agents upgraded in the task.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoveryAgentUpgradeTaskAgentArgs']]] agents: Specifies the upgrade information for each agent.
        :param pulumi.Input[_builtins.str] cluster_version: Specifies the version to which agents are upgraded.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the task.
        :param pulumi.Input[_builtins.float] end_time_usecs: Specifies the time when the upgrade task completed execution as a Unix epoch Timestamp (in microseconds).
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoveryAgentUpgradeTaskErrorArgs']]] errors: Object that holds the error object.
        :param pulumi.Input[_builtins.bool] is_retryable: Specifies if a task can be retried.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the task.
        :param pulumi.Input[_builtins.float] retried_task_id: Specifies ID of a task which was retried if type is 'Retry'.
        :param pulumi.Input[_builtins.float] retry_task_id: Specifies ID of a task which is to be retried.
        :param pulumi.Input[_builtins.float] schedule_end_time_usecs: Specifies the time before which the upgrade task should start execution as a Unix epoch Timestamp (in microseconds). If
               this is not specified the task will start anytime after scheduleTimeUsecs.
        :param pulumi.Input[_builtins.float] schedule_time_usecs: Specifies the time when the task should start execution as a Unix epoch Timestamp (in microseconds). If no schedule is
               specified, the task will start immediately.
        :param pulumi.Input[_builtins.float] start_time_usecs: Specifies the time, as a Unix epoch timestamp in microseconds, when the task started execution.
        :param pulumi.Input[_builtins.str] status: Specifies the status of the task.<br> 'Scheduled' indicates that the upgrade task is yet to start.<br> 'Running'
               indicates that the upgrade task has started execution.<br> 'Succeeded' indicates that the upgrade task completed without
               an error.<br> 'Failed' indicates that upgrade has failed for all agents. 'PartiallyFailed' indicates that upgrade has
               failed for some agents.
        :param pulumi.Input[_builtins.str] type: Specifes the type of task.<br> 'Auto' indicates an auto agent upgrade task which is started after a cluster upgrade.<br>
               'Manual' indicates a schedule based agent upgrade task.<br> 'Retry' indicates an agent upgrade task which was retried.
        :param pulumi.Input[_builtins.str] x_ibm_tenant_id: Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
               be specified.
        """
        if agent_ids is not None:
            pulumi.set(__self__, "agent_ids", agent_ids)
        if agents is not None:
            pulumi.set(__self__, "agents", agents)
        if backup_recovery_agent_upgrade_task_id is not None:
            pulumi.set(__self__, "backup_recovery_agent_upgrade_task_id", backup_recovery_agent_upgrade_task_id)
        if cluster_version is not None:
            pulumi.set(__self__, "cluster_version", cluster_version)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if end_time_usecs is not None:
            pulumi.set(__self__, "end_time_usecs", end_time_usecs)
        if errors is not None:
            pulumi.set(__self__, "errors", errors)
        if is_retryable is not None:
            pulumi.set(__self__, "is_retryable", is_retryable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if retried_task_id is not None:
            pulumi.set(__self__, "retried_task_id", retried_task_id)
        if retry_task_id is not None:
            pulumi.set(__self__, "retry_task_id", retry_task_id)
        if schedule_end_time_usecs is not None:
            pulumi.set(__self__, "schedule_end_time_usecs", schedule_end_time_usecs)
        if schedule_time_usecs is not None:
            pulumi.set(__self__, "schedule_time_usecs", schedule_time_usecs)
        if start_time_usecs is not None:
            pulumi.set(__self__, "start_time_usecs", start_time_usecs)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if x_ibm_tenant_id is not None:
            pulumi.set(__self__, "x_ibm_tenant_id", x_ibm_tenant_id)

    @_builtins.property
    @pulumi.getter(name="agentIds")
    def agent_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        """
        Specifies the agents upgraded in the task.
        """
        return pulumi.get(self, "agent_ids")

    @agent_ids.setter
    def agent_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "agent_ids", value)

    @_builtins.property
    @pulumi.getter
    def agents(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryAgentUpgradeTaskAgentArgs']]]]:
        """
        Specifies the upgrade information for each agent.
        """
        return pulumi.get(self, "agents")

    @agents.setter
    def agents(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryAgentUpgradeTaskAgentArgs']]]]):
        pulumi.set(self, "agents", value)

    @_builtins.property
    @pulumi.getter(name="backupRecoveryAgentUpgradeTaskId")
    def backup_recovery_agent_upgrade_task_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "backup_recovery_agent_upgrade_task_id")

    @backup_recovery_agent_upgrade_task_id.setter
    def backup_recovery_agent_upgrade_task_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_recovery_agent_upgrade_task_id", value)

    @_builtins.property
    @pulumi.getter(name="clusterVersion")
    def cluster_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the version to which agents are upgraded.
        """
        return pulumi.get(self, "cluster_version")

    @cluster_version.setter
    def cluster_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_version", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the task.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="endTimeUsecs")
    def end_time_usecs(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the time when the upgrade task completed execution as a Unix epoch Timestamp (in microseconds).
        """
        return pulumi.get(self, "end_time_usecs")

    @end_time_usecs.setter
    def end_time_usecs(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "end_time_usecs", value)

    @_builtins.property
    @pulumi.getter
    def errors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryAgentUpgradeTaskErrorArgs']]]]:
        """
        Object that holds the error object.
        """
        return pulumi.get(self, "errors")

    @errors.setter
    def errors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryAgentUpgradeTaskErrorArgs']]]]):
        pulumi.set(self, "errors", value)

    @_builtins.property
    @pulumi.getter(name="isRetryable")
    def is_retryable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies if a task can be retried.
        """
        return pulumi.get(self, "is_retryable")

    @is_retryable.setter
    def is_retryable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_retryable", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the task.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="retriedTaskId")
    def retried_task_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies ID of a task which was retried if type is 'Retry'.
        """
        return pulumi.get(self, "retried_task_id")

    @retried_task_id.setter
    def retried_task_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "retried_task_id", value)

    @_builtins.property
    @pulumi.getter(name="retryTaskId")
    def retry_task_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies ID of a task which is to be retried.
        """
        return pulumi.get(self, "retry_task_id")

    @retry_task_id.setter
    def retry_task_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "retry_task_id", value)

    @_builtins.property
    @pulumi.getter(name="scheduleEndTimeUsecs")
    def schedule_end_time_usecs(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the time before which the upgrade task should start execution as a Unix epoch Timestamp (in microseconds). If
        this is not specified the task will start anytime after scheduleTimeUsecs.
        """
        return pulumi.get(self, "schedule_end_time_usecs")

    @schedule_end_time_usecs.setter
    def schedule_end_time_usecs(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "schedule_end_time_usecs", value)

    @_builtins.property
    @pulumi.getter(name="scheduleTimeUsecs")
    def schedule_time_usecs(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the time when the task should start execution as a Unix epoch Timestamp (in microseconds). If no schedule is
        specified, the task will start immediately.
        """
        return pulumi.get(self, "schedule_time_usecs")

    @schedule_time_usecs.setter
    def schedule_time_usecs(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "schedule_time_usecs", value)

    @_builtins.property
    @pulumi.getter(name="startTimeUsecs")
    def start_time_usecs(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the time, as a Unix epoch timestamp in microseconds, when the task started execution.
        """
        return pulumi.get(self, "start_time_usecs")

    @start_time_usecs.setter
    def start_time_usecs(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "start_time_usecs", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the status of the task.<br> 'Scheduled' indicates that the upgrade task is yet to start.<br> 'Running'
        indicates that the upgrade task has started execution.<br> 'Succeeded' indicates that the upgrade task completed without
        an error.<br> 'Failed' indicates that upgrade has failed for all agents. 'PartiallyFailed' indicates that upgrade has
        failed for some agents.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifes the type of task.<br> 'Auto' indicates an auto agent upgrade task which is started after a cluster upgrade.<br>
        'Manual' indicates a schedule based agent upgrade task.<br> 'Retry' indicates an agent upgrade task which was retried.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
        be specified.
        """
        return pulumi.get(self, "x_ibm_tenant_id")

    @x_ibm_tenant_id.setter
    def x_ibm_tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "x_ibm_tenant_id", value)


@pulumi.type_token("ibm:index/backupRecoveryAgentUpgradeTask:BackupRecoveryAgentUpgradeTask")
class BackupRecoveryAgentUpgradeTask(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agent_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 backup_recovery_agent_upgrade_task_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 retry_task_id: Optional[pulumi.Input[_builtins.float]] = None,
                 schedule_end_time_usecs: Optional[pulumi.Input[_builtins.float]] = None,
                 schedule_time_usecs: Optional[pulumi.Input[_builtins.float]] = None,
                 x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a BackupRecoveryAgentUpgradeTask resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] agent_ids: Specifies the agents upgraded in the task.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the task.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the task.
        :param pulumi.Input[_builtins.float] retry_task_id: Specifies ID of a task which is to be retried.
        :param pulumi.Input[_builtins.float] schedule_end_time_usecs: Specifies the time before which the upgrade task should start execution as a Unix epoch Timestamp (in microseconds). If
               this is not specified the task will start anytime after scheduleTimeUsecs.
        :param pulumi.Input[_builtins.float] schedule_time_usecs: Specifies the time when the task should start execution as a Unix epoch Timestamp (in microseconds). If no schedule is
               specified, the task will start immediately.
        :param pulumi.Input[_builtins.str] x_ibm_tenant_id: Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
               be specified.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BackupRecoveryAgentUpgradeTaskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a BackupRecoveryAgentUpgradeTask resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param BackupRecoveryAgentUpgradeTaskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BackupRecoveryAgentUpgradeTaskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agent_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 backup_recovery_agent_upgrade_task_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 retry_task_id: Optional[pulumi.Input[_builtins.float]] = None,
                 schedule_end_time_usecs: Optional[pulumi.Input[_builtins.float]] = None,
                 schedule_time_usecs: Optional[pulumi.Input[_builtins.float]] = None,
                 x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BackupRecoveryAgentUpgradeTaskArgs.__new__(BackupRecoveryAgentUpgradeTaskArgs)

            __props__.__dict__["agent_ids"] = agent_ids
            __props__.__dict__["backup_recovery_agent_upgrade_task_id"] = backup_recovery_agent_upgrade_task_id
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["retry_task_id"] = retry_task_id
            __props__.__dict__["schedule_end_time_usecs"] = schedule_end_time_usecs
            __props__.__dict__["schedule_time_usecs"] = schedule_time_usecs
            if x_ibm_tenant_id is None and not opts.urn:
                raise TypeError("Missing required property 'x_ibm_tenant_id'")
            __props__.__dict__["x_ibm_tenant_id"] = x_ibm_tenant_id
            __props__.__dict__["agents"] = None
            __props__.__dict__["cluster_version"] = None
            __props__.__dict__["end_time_usecs"] = None
            __props__.__dict__["errors"] = None
            __props__.__dict__["is_retryable"] = None
            __props__.__dict__["retried_task_id"] = None
            __props__.__dict__["start_time_usecs"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["type"] = None
        super(BackupRecoveryAgentUpgradeTask, __self__).__init__(
            'ibm:index/backupRecoveryAgentUpgradeTask:BackupRecoveryAgentUpgradeTask',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            agent_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
            agents: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryAgentUpgradeTaskAgentArgs', 'BackupRecoveryAgentUpgradeTaskAgentArgsDict']]]]] = None,
            backup_recovery_agent_upgrade_task_id: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_version: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            end_time_usecs: Optional[pulumi.Input[_builtins.float]] = None,
            errors: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryAgentUpgradeTaskErrorArgs', 'BackupRecoveryAgentUpgradeTaskErrorArgsDict']]]]] = None,
            is_retryable: Optional[pulumi.Input[_builtins.bool]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            retried_task_id: Optional[pulumi.Input[_builtins.float]] = None,
            retry_task_id: Optional[pulumi.Input[_builtins.float]] = None,
            schedule_end_time_usecs: Optional[pulumi.Input[_builtins.float]] = None,
            schedule_time_usecs: Optional[pulumi.Input[_builtins.float]] = None,
            start_time_usecs: Optional[pulumi.Input[_builtins.float]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'BackupRecoveryAgentUpgradeTask':
        """
        Get an existing BackupRecoveryAgentUpgradeTask resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] agent_ids: Specifies the agents upgraded in the task.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryAgentUpgradeTaskAgentArgs', 'BackupRecoveryAgentUpgradeTaskAgentArgsDict']]]] agents: Specifies the upgrade information for each agent.
        :param pulumi.Input[_builtins.str] cluster_version: Specifies the version to which agents are upgraded.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the task.
        :param pulumi.Input[_builtins.float] end_time_usecs: Specifies the time when the upgrade task completed execution as a Unix epoch Timestamp (in microseconds).
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryAgentUpgradeTaskErrorArgs', 'BackupRecoveryAgentUpgradeTaskErrorArgsDict']]]] errors: Object that holds the error object.
        :param pulumi.Input[_builtins.bool] is_retryable: Specifies if a task can be retried.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the task.
        :param pulumi.Input[_builtins.float] retried_task_id: Specifies ID of a task which was retried if type is 'Retry'.
        :param pulumi.Input[_builtins.float] retry_task_id: Specifies ID of a task which is to be retried.
        :param pulumi.Input[_builtins.float] schedule_end_time_usecs: Specifies the time before which the upgrade task should start execution as a Unix epoch Timestamp (in microseconds). If
               this is not specified the task will start anytime after scheduleTimeUsecs.
        :param pulumi.Input[_builtins.float] schedule_time_usecs: Specifies the time when the task should start execution as a Unix epoch Timestamp (in microseconds). If no schedule is
               specified, the task will start immediately.
        :param pulumi.Input[_builtins.float] start_time_usecs: Specifies the time, as a Unix epoch timestamp in microseconds, when the task started execution.
        :param pulumi.Input[_builtins.str] status: Specifies the status of the task.<br> 'Scheduled' indicates that the upgrade task is yet to start.<br> 'Running'
               indicates that the upgrade task has started execution.<br> 'Succeeded' indicates that the upgrade task completed without
               an error.<br> 'Failed' indicates that upgrade has failed for all agents. 'PartiallyFailed' indicates that upgrade has
               failed for some agents.
        :param pulumi.Input[_builtins.str] type: Specifes the type of task.<br> 'Auto' indicates an auto agent upgrade task which is started after a cluster upgrade.<br>
               'Manual' indicates a schedule based agent upgrade task.<br> 'Retry' indicates an agent upgrade task which was retried.
        :param pulumi.Input[_builtins.str] x_ibm_tenant_id: Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
               be specified.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BackupRecoveryAgentUpgradeTaskState.__new__(_BackupRecoveryAgentUpgradeTaskState)

        __props__.__dict__["agent_ids"] = agent_ids
        __props__.__dict__["agents"] = agents
        __props__.__dict__["backup_recovery_agent_upgrade_task_id"] = backup_recovery_agent_upgrade_task_id
        __props__.__dict__["cluster_version"] = cluster_version
        __props__.__dict__["description"] = description
        __props__.__dict__["end_time_usecs"] = end_time_usecs
        __props__.__dict__["errors"] = errors
        __props__.__dict__["is_retryable"] = is_retryable
        __props__.__dict__["name"] = name
        __props__.__dict__["retried_task_id"] = retried_task_id
        __props__.__dict__["retry_task_id"] = retry_task_id
        __props__.__dict__["schedule_end_time_usecs"] = schedule_end_time_usecs
        __props__.__dict__["schedule_time_usecs"] = schedule_time_usecs
        __props__.__dict__["start_time_usecs"] = start_time_usecs
        __props__.__dict__["status"] = status
        __props__.__dict__["type"] = type
        __props__.__dict__["x_ibm_tenant_id"] = x_ibm_tenant_id
        return BackupRecoveryAgentUpgradeTask(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="agentIds")
    def agent_ids(self) -> pulumi.Output[Optional[Sequence[_builtins.float]]]:
        """
        Specifies the agents upgraded in the task.
        """
        return pulumi.get(self, "agent_ids")

    @_builtins.property
    @pulumi.getter
    def agents(self) -> pulumi.Output[Sequence['outputs.BackupRecoveryAgentUpgradeTaskAgent']]:
        """
        Specifies the upgrade information for each agent.
        """
        return pulumi.get(self, "agents")

    @_builtins.property
    @pulumi.getter(name="backupRecoveryAgentUpgradeTaskId")
    def backup_recovery_agent_upgrade_task_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "backup_recovery_agent_upgrade_task_id")

    @_builtins.property
    @pulumi.getter(name="clusterVersion")
    def cluster_version(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the version to which agents are upgraded.
        """
        return pulumi.get(self, "cluster_version")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the description of the task.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="endTimeUsecs")
    def end_time_usecs(self) -> pulumi.Output[_builtins.float]:
        """
        Specifies the time when the upgrade task completed execution as a Unix epoch Timestamp (in microseconds).
        """
        return pulumi.get(self, "end_time_usecs")

    @_builtins.property
    @pulumi.getter
    def errors(self) -> pulumi.Output[Sequence['outputs.BackupRecoveryAgentUpgradeTaskError']]:
        """
        Object that holds the error object.
        """
        return pulumi.get(self, "errors")

    @_builtins.property
    @pulumi.getter(name="isRetryable")
    def is_retryable(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies if a task can be retried.
        """
        return pulumi.get(self, "is_retryable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the task.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="retriedTaskId")
    def retried_task_id(self) -> pulumi.Output[_builtins.float]:
        """
        Specifies ID of a task which was retried if type is 'Retry'.
        """
        return pulumi.get(self, "retried_task_id")

    @_builtins.property
    @pulumi.getter(name="retryTaskId")
    def retry_task_id(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Specifies ID of a task which is to be retried.
        """
        return pulumi.get(self, "retry_task_id")

    @_builtins.property
    @pulumi.getter(name="scheduleEndTimeUsecs")
    def schedule_end_time_usecs(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Specifies the time before which the upgrade task should start execution as a Unix epoch Timestamp (in microseconds). If
        this is not specified the task will start anytime after scheduleTimeUsecs.
        """
        return pulumi.get(self, "schedule_end_time_usecs")

    @_builtins.property
    @pulumi.getter(name="scheduleTimeUsecs")
    def schedule_time_usecs(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Specifies the time when the task should start execution as a Unix epoch Timestamp (in microseconds). If no schedule is
        specified, the task will start immediately.
        """
        return pulumi.get(self, "schedule_time_usecs")

    @_builtins.property
    @pulumi.getter(name="startTimeUsecs")
    def start_time_usecs(self) -> pulumi.Output[_builtins.float]:
        """
        Specifies the time, as a Unix epoch timestamp in microseconds, when the task started execution.
        """
        return pulumi.get(self, "start_time_usecs")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the status of the task.<br> 'Scheduled' indicates that the upgrade task is yet to start.<br> 'Running'
        indicates that the upgrade task has started execution.<br> 'Succeeded' indicates that the upgrade task completed without
        an error.<br> 'Failed' indicates that upgrade has failed for all agents. 'PartiallyFailed' indicates that upgrade has
        failed for some agents.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifes the type of task.<br> 'Auto' indicates an auto agent upgrade task which is started after a cluster upgrade.<br>
        'Manual' indicates a schedule based agent upgrade task.<br> 'Retry' indicates an agent upgrade task which was retried.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
        be specified.
        """
        return pulumi.get(self, "x_ibm_tenant_id")

