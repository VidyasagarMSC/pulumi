# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetAppidTokenConfigResult',
    'AwaitableGetAppidTokenConfigResult',
    'get_appid_token_config',
    'get_appid_token_config_output',
]

@pulumi.output_type
class GetAppidTokenConfigResult:
    """
    A collection of values returned by getAppidTokenConfig.
    """
    def __init__(__self__, access_token_claims=None, access_token_expires_in=None, anonymous_access_enabled=None, anonymous_token_expires_in=None, id=None, id_token_claims=None, refresh_token_enabled=None, refresh_token_expires_in=None, tenant_id=None):
        if access_token_claims and not isinstance(access_token_claims, list):
            raise TypeError("Expected argument 'access_token_claims' to be a list")
        pulumi.set(__self__, "access_token_claims", access_token_claims)
        if access_token_expires_in and not isinstance(access_token_expires_in, float):
            raise TypeError("Expected argument 'access_token_expires_in' to be a float")
        pulumi.set(__self__, "access_token_expires_in", access_token_expires_in)
        if anonymous_access_enabled and not isinstance(anonymous_access_enabled, bool):
            raise TypeError("Expected argument 'anonymous_access_enabled' to be a bool")
        pulumi.set(__self__, "anonymous_access_enabled", anonymous_access_enabled)
        if anonymous_token_expires_in and not isinstance(anonymous_token_expires_in, float):
            raise TypeError("Expected argument 'anonymous_token_expires_in' to be a float")
        pulumi.set(__self__, "anonymous_token_expires_in", anonymous_token_expires_in)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if id_token_claims and not isinstance(id_token_claims, list):
            raise TypeError("Expected argument 'id_token_claims' to be a list")
        pulumi.set(__self__, "id_token_claims", id_token_claims)
        if refresh_token_enabled and not isinstance(refresh_token_enabled, bool):
            raise TypeError("Expected argument 'refresh_token_enabled' to be a bool")
        pulumi.set(__self__, "refresh_token_enabled", refresh_token_enabled)
        if refresh_token_expires_in and not isinstance(refresh_token_expires_in, float):
            raise TypeError("Expected argument 'refresh_token_expires_in' to be a float")
        pulumi.set(__self__, "refresh_token_expires_in", refresh_token_expires_in)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)

    @_builtins.property
    @pulumi.getter(name="accessTokenClaims")
    def access_token_claims(self) -> Sequence['outputs.GetAppidTokenConfigAccessTokenClaimResult']:
        return pulumi.get(self, "access_token_claims")

    @_builtins.property
    @pulumi.getter(name="accessTokenExpiresIn")
    def access_token_expires_in(self) -> _builtins.float:
        return pulumi.get(self, "access_token_expires_in")

    @_builtins.property
    @pulumi.getter(name="anonymousAccessEnabled")
    def anonymous_access_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "anonymous_access_enabled")

    @_builtins.property
    @pulumi.getter(name="anonymousTokenExpiresIn")
    def anonymous_token_expires_in(self) -> _builtins.float:
        return pulumi.get(self, "anonymous_token_expires_in")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="idTokenClaims")
    def id_token_claims(self) -> Sequence['outputs.GetAppidTokenConfigIdTokenClaimResult']:
        return pulumi.get(self, "id_token_claims")

    @_builtins.property
    @pulumi.getter(name="refreshTokenEnabled")
    def refresh_token_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "refresh_token_enabled")

    @_builtins.property
    @pulumi.getter(name="refreshTokenExpiresIn")
    def refresh_token_expires_in(self) -> _builtins.float:
        return pulumi.get(self, "refresh_token_expires_in")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.str:
        return pulumi.get(self, "tenant_id")


class AwaitableGetAppidTokenConfigResult(GetAppidTokenConfigResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppidTokenConfigResult(
            access_token_claims=self.access_token_claims,
            access_token_expires_in=self.access_token_expires_in,
            anonymous_access_enabled=self.anonymous_access_enabled,
            anonymous_token_expires_in=self.anonymous_token_expires_in,
            id=self.id,
            id_token_claims=self.id_token_claims,
            refresh_token_enabled=self.refresh_token_enabled,
            refresh_token_expires_in=self.refresh_token_expires_in,
            tenant_id=self.tenant_id)


def get_appid_token_config(id: Optional[_builtins.str] = None,
                           tenant_id: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppidTokenConfigResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getAppidTokenConfig:getAppidTokenConfig', __args__, opts=opts, typ=GetAppidTokenConfigResult, package_ref=_utilities.get_package()).value

    return AwaitableGetAppidTokenConfigResult(
        access_token_claims=pulumi.get(__ret__, 'access_token_claims'),
        access_token_expires_in=pulumi.get(__ret__, 'access_token_expires_in'),
        anonymous_access_enabled=pulumi.get(__ret__, 'anonymous_access_enabled'),
        anonymous_token_expires_in=pulumi.get(__ret__, 'anonymous_token_expires_in'),
        id=pulumi.get(__ret__, 'id'),
        id_token_claims=pulumi.get(__ret__, 'id_token_claims'),
        refresh_token_enabled=pulumi.get(__ret__, 'refresh_token_enabled'),
        refresh_token_expires_in=pulumi.get(__ret__, 'refresh_token_expires_in'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'))
def get_appid_token_config_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppidTokenConfigResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getAppidTokenConfig:getAppidTokenConfig', __args__, opts=opts, typ=GetAppidTokenConfigResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetAppidTokenConfigResult(
        access_token_claims=pulumi.get(__response__, 'access_token_claims'),
        access_token_expires_in=pulumi.get(__response__, 'access_token_expires_in'),
        anonymous_access_enabled=pulumi.get(__response__, 'anonymous_access_enabled'),
        anonymous_token_expires_in=pulumi.get(__response__, 'anonymous_token_expires_in'),
        id=pulumi.get(__response__, 'id'),
        id_token_claims=pulumi.get(__response__, 'id_token_claims'),
        refresh_token_enabled=pulumi.get(__response__, 'refresh_token_enabled'),
        refresh_token_expires_in=pulumi.get(__response__, 'refresh_token_expires_in'),
        tenant_id=pulumi.get(__response__, 'tenant_id')))
