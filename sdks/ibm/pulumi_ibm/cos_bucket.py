# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CosBucketArgs', 'CosBucket']

@pulumi.input_type
class CosBucketArgs:
    def __init__(__self__, *,
                 bucket_name: pulumi.Input[_builtins.str],
                 resource_instance_id: pulumi.Input[_builtins.str],
                 abort_incomplete_multipart_upload_days: Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketAbortIncompleteMultipartUploadDayArgs']]]] = None,
                 activity_tracking: Optional[pulumi.Input['CosBucketActivityTrackingArgs']] = None,
                 allowed_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 archive_rule: Optional[pulumi.Input['CosBucketArchiveRuleArgs']] = None,
                 cos_bucket_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cross_region_location: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 expire_rules: Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketExpireRuleArgs']]]] = None,
                 force_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 hard_quota: Optional[pulumi.Input[_builtins.float]] = None,
                 key_protect: Optional[pulumi.Input[_builtins.str]] = None,
                 kms_key_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 metrics_monitoring: Optional[pulumi.Input['CosBucketMetricsMonitoringArgs']] = None,
                 noncurrent_version_expiration: Optional[pulumi.Input['CosBucketNoncurrentVersionExpirationArgs']] = None,
                 object_lock: Optional[pulumi.Input[_builtins.bool]] = None,
                 object_versioning: Optional[pulumi.Input['CosBucketObjectVersioningArgs']] = None,
                 region_location: Optional[pulumi.Input[_builtins.str]] = None,
                 retention_rule: Optional[pulumi.Input['CosBucketRetentionRuleArgs']] = None,
                 satellite_location_id: Optional[pulumi.Input[_builtins.str]] = None,
                 single_site_location: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_class: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['CosBucketTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a CosBucket resource.
        :param pulumi.Input[_builtins.str] bucket_name: COS Bucket name
        :param pulumi.Input[_builtins.str] resource_instance_id: resource instance ID
        :param pulumi.Input[Sequence[pulumi.Input['CosBucketAbortIncompleteMultipartUploadDayArgs']]] abort_incomplete_multipart_upload_days: Enable abort incomplete multipart upload to COS Bucket after a defined period of time
        :param pulumi.Input['CosBucketActivityTrackingArgs'] activity_tracking: Enables sending log data to IBM Cloud Activity Tracker to provide visibility into bucket management, object read and
               write events.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] allowed_ips: List of IPv4 or IPv6 addresses
        :param pulumi.Input['CosBucketArchiveRuleArgs'] archive_rule: Enable configuration archive_rule (glacier/accelerated) to COS Bucket after a defined period of time
        :param pulumi.Input[_builtins.str] cross_region_location: Cros region location info
        :param pulumi.Input[_builtins.str] endpoint_type: COS endpoint type: public, private, direct
        :param pulumi.Input[Sequence[pulumi.Input['CosBucketExpireRuleArgs']]] expire_rules: Enable configuration expire_rule to COS Bucket after a defined period of time
        :param pulumi.Input[_builtins.bool] force_delete: COS buckets need to be empty before they can be deleted. force_delete option empty the bucket and delete it.
        :param pulumi.Input[_builtins.float] hard_quota: sets a maximum amount of storage (in bytes) available for a bucket
        :param pulumi.Input[_builtins.str] key_protect: CRN of the key you want to use data at rest encryption
        :param pulumi.Input[_builtins.str] kms_key_crn: CRN of the key you want to use data at rest encryption
        :param pulumi.Input['CosBucketMetricsMonitoringArgs'] metrics_monitoring: Enables sending metrics to IBM Cloud Monitoring.All metrics are opt-in
        :param pulumi.Input['CosBucketNoncurrentVersionExpirationArgs'] noncurrent_version_expiration: Enable configuration expire_rule to COS Bucket after a defined period of time
        :param pulumi.Input[_builtins.bool] object_lock: Enable objectlock for the bucket. When enabled, buckets within the container vault can have Object Lock Configuration
               applied to the bucket.
        :param pulumi.Input['CosBucketObjectVersioningArgs'] object_versioning: Protect objects from accidental deletion or overwrites. Versioning allows you to keep multiple versions of an object
               protecting from unintentional data loss.
        :param pulumi.Input[_builtins.str] region_location: Region Location info.
        :param pulumi.Input['CosBucketRetentionRuleArgs'] retention_rule: A retention policy is enabled at the IBM Cloud Object Storage bucket level. Minimum, maximum and default retention
               period are defined by this policy and apply to all objects in the bucket.
        :param pulumi.Input[_builtins.str] satellite_location_id: Provide satellite location info.
        :param pulumi.Input[_builtins.str] single_site_location: single site location info
        :param pulumi.Input[_builtins.str] storage_class: Storage class info
        """
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "resource_instance_id", resource_instance_id)
        if abort_incomplete_multipart_upload_days is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""abort_incomplete_multipart_upload_days is deprecated: Deprecated""")
        if abort_incomplete_multipart_upload_days is not None:
            pulumi.set(__self__, "abort_incomplete_multipart_upload_days", abort_incomplete_multipart_upload_days)
        if activity_tracking is not None:
            pulumi.set(__self__, "activity_tracking", activity_tracking)
        if allowed_ips is not None:
            pulumi.set(__self__, "allowed_ips", allowed_ips)
        if archive_rule is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""archive_rule is deprecated: Deprecated""")
        if archive_rule is not None:
            pulumi.set(__self__, "archive_rule", archive_rule)
        if cos_bucket_id is not None:
            pulumi.set(__self__, "cos_bucket_id", cos_bucket_id)
        if cross_region_location is not None:
            pulumi.set(__self__, "cross_region_location", cross_region_location)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if expire_rules is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""expire_rules is deprecated: Deprecated""")
        if expire_rules is not None:
            pulumi.set(__self__, "expire_rules", expire_rules)
        if force_delete is not None:
            pulumi.set(__self__, "force_delete", force_delete)
        if hard_quota is not None:
            pulumi.set(__self__, "hard_quota", hard_quota)
        if key_protect is not None:
            pulumi.set(__self__, "key_protect", key_protect)
        if kms_key_crn is not None:
            pulumi.set(__self__, "kms_key_crn", kms_key_crn)
        if metrics_monitoring is not None:
            pulumi.set(__self__, "metrics_monitoring", metrics_monitoring)
        if noncurrent_version_expiration is not None:
            pulumi.set(__self__, "noncurrent_version_expiration", noncurrent_version_expiration)
        if object_lock is not None:
            pulumi.set(__self__, "object_lock", object_lock)
        if object_versioning is not None:
            pulumi.set(__self__, "object_versioning", object_versioning)
        if region_location is not None:
            pulumi.set(__self__, "region_location", region_location)
        if retention_rule is not None:
            pulumi.set(__self__, "retention_rule", retention_rule)
        if satellite_location_id is not None:
            pulumi.set(__self__, "satellite_location_id", satellite_location_id)
        if single_site_location is not None:
            pulumi.set(__self__, "single_site_location", single_site_location)
        if storage_class is not None:
            pulumi.set(__self__, "storage_class", storage_class)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Input[_builtins.str]:
        """
        COS Bucket name
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "bucket_name", value)

    @_builtins.property
    @pulumi.getter(name="resourceInstanceId")
    def resource_instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        resource instance ID
        """
        return pulumi.get(self, "resource_instance_id")

    @resource_instance_id.setter
    def resource_instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="abortIncompleteMultipartUploadDays")
    @_utilities.deprecated("""Deprecated""")
    def abort_incomplete_multipart_upload_days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketAbortIncompleteMultipartUploadDayArgs']]]]:
        """
        Enable abort incomplete multipart upload to COS Bucket after a defined period of time
        """
        return pulumi.get(self, "abort_incomplete_multipart_upload_days")

    @abort_incomplete_multipart_upload_days.setter
    def abort_incomplete_multipart_upload_days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketAbortIncompleteMultipartUploadDayArgs']]]]):
        pulumi.set(self, "abort_incomplete_multipart_upload_days", value)

    @_builtins.property
    @pulumi.getter(name="activityTracking")
    def activity_tracking(self) -> Optional[pulumi.Input['CosBucketActivityTrackingArgs']]:
        """
        Enables sending log data to IBM Cloud Activity Tracker to provide visibility into bucket management, object read and
        write events.
        """
        return pulumi.get(self, "activity_tracking")

    @activity_tracking.setter
    def activity_tracking(self, value: Optional[pulumi.Input['CosBucketActivityTrackingArgs']]):
        pulumi.set(self, "activity_tracking", value)

    @_builtins.property
    @pulumi.getter(name="allowedIps")
    def allowed_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of IPv4 or IPv6 addresses
        """
        return pulumi.get(self, "allowed_ips")

    @allowed_ips.setter
    def allowed_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "allowed_ips", value)

    @_builtins.property
    @pulumi.getter(name="archiveRule")
    @_utilities.deprecated("""Deprecated""")
    def archive_rule(self) -> Optional[pulumi.Input['CosBucketArchiveRuleArgs']]:
        """
        Enable configuration archive_rule (glacier/accelerated) to COS Bucket after a defined period of time
        """
        return pulumi.get(self, "archive_rule")

    @archive_rule.setter
    def archive_rule(self, value: Optional[pulumi.Input['CosBucketArchiveRuleArgs']]):
        pulumi.set(self, "archive_rule", value)

    @_builtins.property
    @pulumi.getter(name="cosBucketId")
    def cos_bucket_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cos_bucket_id")

    @cos_bucket_id.setter
    def cos_bucket_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cos_bucket_id", value)

    @_builtins.property
    @pulumi.getter(name="crossRegionLocation")
    def cross_region_location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cros region location info
        """
        return pulumi.get(self, "cross_region_location")

    @cross_region_location.setter
    def cross_region_location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cross_region_location", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        COS endpoint type: public, private, direct
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter(name="expireRules")
    @_utilities.deprecated("""Deprecated""")
    def expire_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketExpireRuleArgs']]]]:
        """
        Enable configuration expire_rule to COS Bucket after a defined period of time
        """
        return pulumi.get(self, "expire_rules")

    @expire_rules.setter
    def expire_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketExpireRuleArgs']]]]):
        pulumi.set(self, "expire_rules", value)

    @_builtins.property
    @pulumi.getter(name="forceDelete")
    def force_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        COS buckets need to be empty before they can be deleted. force_delete option empty the bucket and delete it.
        """
        return pulumi.get(self, "force_delete")

    @force_delete.setter
    def force_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "force_delete", value)

    @_builtins.property
    @pulumi.getter(name="hardQuota")
    def hard_quota(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        sets a maximum amount of storage (in bytes) available for a bucket
        """
        return pulumi.get(self, "hard_quota")

    @hard_quota.setter
    def hard_quota(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "hard_quota", value)

    @_builtins.property
    @pulumi.getter(name="keyProtect")
    def key_protect(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CRN of the key you want to use data at rest encryption
        """
        return pulumi.get(self, "key_protect")

    @key_protect.setter
    def key_protect(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_protect", value)

    @_builtins.property
    @pulumi.getter(name="kmsKeyCrn")
    def kms_key_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CRN of the key you want to use data at rest encryption
        """
        return pulumi.get(self, "kms_key_crn")

    @kms_key_crn.setter
    def kms_key_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kms_key_crn", value)

    @_builtins.property
    @pulumi.getter(name="metricsMonitoring")
    def metrics_monitoring(self) -> Optional[pulumi.Input['CosBucketMetricsMonitoringArgs']]:
        """
        Enables sending metrics to IBM Cloud Monitoring.All metrics are opt-in
        """
        return pulumi.get(self, "metrics_monitoring")

    @metrics_monitoring.setter
    def metrics_monitoring(self, value: Optional[pulumi.Input['CosBucketMetricsMonitoringArgs']]):
        pulumi.set(self, "metrics_monitoring", value)

    @_builtins.property
    @pulumi.getter(name="noncurrentVersionExpiration")
    def noncurrent_version_expiration(self) -> Optional[pulumi.Input['CosBucketNoncurrentVersionExpirationArgs']]:
        """
        Enable configuration expire_rule to COS Bucket after a defined period of time
        """
        return pulumi.get(self, "noncurrent_version_expiration")

    @noncurrent_version_expiration.setter
    def noncurrent_version_expiration(self, value: Optional[pulumi.Input['CosBucketNoncurrentVersionExpirationArgs']]):
        pulumi.set(self, "noncurrent_version_expiration", value)

    @_builtins.property
    @pulumi.getter(name="objectLock")
    def object_lock(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable objectlock for the bucket. When enabled, buckets within the container vault can have Object Lock Configuration
        applied to the bucket.
        """
        return pulumi.get(self, "object_lock")

    @object_lock.setter
    def object_lock(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "object_lock", value)

    @_builtins.property
    @pulumi.getter(name="objectVersioning")
    def object_versioning(self) -> Optional[pulumi.Input['CosBucketObjectVersioningArgs']]:
        """
        Protect objects from accidental deletion or overwrites. Versioning allows you to keep multiple versions of an object
        protecting from unintentional data loss.
        """
        return pulumi.get(self, "object_versioning")

    @object_versioning.setter
    def object_versioning(self, value: Optional[pulumi.Input['CosBucketObjectVersioningArgs']]):
        pulumi.set(self, "object_versioning", value)

    @_builtins.property
    @pulumi.getter(name="regionLocation")
    def region_location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Region Location info.
        """
        return pulumi.get(self, "region_location")

    @region_location.setter
    def region_location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region_location", value)

    @_builtins.property
    @pulumi.getter(name="retentionRule")
    def retention_rule(self) -> Optional[pulumi.Input['CosBucketRetentionRuleArgs']]:
        """
        A retention policy is enabled at the IBM Cloud Object Storage bucket level. Minimum, maximum and default retention
        period are defined by this policy and apply to all objects in the bucket.
        """
        return pulumi.get(self, "retention_rule")

    @retention_rule.setter
    def retention_rule(self, value: Optional[pulumi.Input['CosBucketRetentionRuleArgs']]):
        pulumi.set(self, "retention_rule", value)

    @_builtins.property
    @pulumi.getter(name="satelliteLocationId")
    def satellite_location_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Provide satellite location info.
        """
        return pulumi.get(self, "satellite_location_id")

    @satellite_location_id.setter
    def satellite_location_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "satellite_location_id", value)

    @_builtins.property
    @pulumi.getter(name="singleSiteLocation")
    def single_site_location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        single site location info
        """
        return pulumi.get(self, "single_site_location")

    @single_site_location.setter
    def single_site_location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "single_site_location", value)

    @_builtins.property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Storage class info
        """
        return pulumi.get(self, "storage_class")

    @storage_class.setter
    def storage_class(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_class", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['CosBucketTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['CosBucketTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _CosBucketState:
    def __init__(__self__, *,
                 abort_incomplete_multipart_upload_days: Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketAbortIncompleteMultipartUploadDayArgs']]]] = None,
                 activity_tracking: Optional[pulumi.Input['CosBucketActivityTrackingArgs']] = None,
                 allowed_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 archive_rule: Optional[pulumi.Input['CosBucketArchiveRuleArgs']] = None,
                 bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cos_bucket_id: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 cross_region_location: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 expire_rules: Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketExpireRuleArgs']]]] = None,
                 force_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 hard_quota: Optional[pulumi.Input[_builtins.float]] = None,
                 key_protect: Optional[pulumi.Input[_builtins.str]] = None,
                 kms_key_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 metrics_monitoring: Optional[pulumi.Input['CosBucketMetricsMonitoringArgs']] = None,
                 noncurrent_version_expiration: Optional[pulumi.Input['CosBucketNoncurrentVersionExpirationArgs']] = None,
                 object_lock: Optional[pulumi.Input[_builtins.bool]] = None,
                 object_versioning: Optional[pulumi.Input['CosBucketObjectVersioningArgs']] = None,
                 region_location: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 retention_rule: Optional[pulumi.Input['CosBucketRetentionRuleArgs']] = None,
                 s3_endpoint_direct: Optional[pulumi.Input[_builtins.str]] = None,
                 s3_endpoint_private: Optional[pulumi.Input[_builtins.str]] = None,
                 s3_endpoint_public: Optional[pulumi.Input[_builtins.str]] = None,
                 satellite_location_id: Optional[pulumi.Input[_builtins.str]] = None,
                 single_site_location: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_class: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['CosBucketTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering CosBucket resources.
        :param pulumi.Input[Sequence[pulumi.Input['CosBucketAbortIncompleteMultipartUploadDayArgs']]] abort_incomplete_multipart_upload_days: Enable abort incomplete multipart upload to COS Bucket after a defined period of time
        :param pulumi.Input['CosBucketActivityTrackingArgs'] activity_tracking: Enables sending log data to IBM Cloud Activity Tracker to provide visibility into bucket management, object read and
               write events.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] allowed_ips: List of IPv4 or IPv6 addresses
        :param pulumi.Input['CosBucketArchiveRuleArgs'] archive_rule: Enable configuration archive_rule (glacier/accelerated) to COS Bucket after a defined period of time
        :param pulumi.Input[_builtins.str] bucket_name: COS Bucket name
        :param pulumi.Input[_builtins.str] crn: CRN of resource instance
        :param pulumi.Input[_builtins.str] cross_region_location: Cros region location info
        :param pulumi.Input[_builtins.str] endpoint_type: COS endpoint type: public, private, direct
        :param pulumi.Input[Sequence[pulumi.Input['CosBucketExpireRuleArgs']]] expire_rules: Enable configuration expire_rule to COS Bucket after a defined period of time
        :param pulumi.Input[_builtins.bool] force_delete: COS buckets need to be empty before they can be deleted. force_delete option empty the bucket and delete it.
        :param pulumi.Input[_builtins.float] hard_quota: sets a maximum amount of storage (in bytes) available for a bucket
        :param pulumi.Input[_builtins.str] key_protect: CRN of the key you want to use data at rest encryption
        :param pulumi.Input[_builtins.str] kms_key_crn: CRN of the key you want to use data at rest encryption
        :param pulumi.Input['CosBucketMetricsMonitoringArgs'] metrics_monitoring: Enables sending metrics to IBM Cloud Monitoring.All metrics are opt-in
        :param pulumi.Input['CosBucketNoncurrentVersionExpirationArgs'] noncurrent_version_expiration: Enable configuration expire_rule to COS Bucket after a defined period of time
        :param pulumi.Input[_builtins.bool] object_lock: Enable objectlock for the bucket. When enabled, buckets within the container vault can have Object Lock Configuration
               applied to the bucket.
        :param pulumi.Input['CosBucketObjectVersioningArgs'] object_versioning: Protect objects from accidental deletion or overwrites. Versioning allows you to keep multiple versions of an object
               protecting from unintentional data loss.
        :param pulumi.Input[_builtins.str] region_location: Region Location info.
        :param pulumi.Input[_builtins.str] resource_instance_id: resource instance ID
        :param pulumi.Input['CosBucketRetentionRuleArgs'] retention_rule: A retention policy is enabled at the IBM Cloud Object Storage bucket level. Minimum, maximum and default retention
               period are defined by this policy and apply to all objects in the bucket.
        :param pulumi.Input[_builtins.str] s3_endpoint_direct: Direct endpoint for the COS bucket
        :param pulumi.Input[_builtins.str] s3_endpoint_private: Private endpoint for the COS bucket
        :param pulumi.Input[_builtins.str] s3_endpoint_public: Public endpoint for the COS bucket
        :param pulumi.Input[_builtins.str] satellite_location_id: Provide satellite location info.
        :param pulumi.Input[_builtins.str] single_site_location: single site location info
        :param pulumi.Input[_builtins.str] storage_class: Storage class info
        """
        if abort_incomplete_multipart_upload_days is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""abort_incomplete_multipart_upload_days is deprecated: Deprecated""")
        if abort_incomplete_multipart_upload_days is not None:
            pulumi.set(__self__, "abort_incomplete_multipart_upload_days", abort_incomplete_multipart_upload_days)
        if activity_tracking is not None:
            pulumi.set(__self__, "activity_tracking", activity_tracking)
        if allowed_ips is not None:
            pulumi.set(__self__, "allowed_ips", allowed_ips)
        if archive_rule is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""archive_rule is deprecated: Deprecated""")
        if archive_rule is not None:
            pulumi.set(__self__, "archive_rule", archive_rule)
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if cos_bucket_id is not None:
            pulumi.set(__self__, "cos_bucket_id", cos_bucket_id)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if cross_region_location is not None:
            pulumi.set(__self__, "cross_region_location", cross_region_location)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if expire_rules is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""expire_rules is deprecated: Deprecated""")
        if expire_rules is not None:
            pulumi.set(__self__, "expire_rules", expire_rules)
        if force_delete is not None:
            pulumi.set(__self__, "force_delete", force_delete)
        if hard_quota is not None:
            pulumi.set(__self__, "hard_quota", hard_quota)
        if key_protect is not None:
            pulumi.set(__self__, "key_protect", key_protect)
        if kms_key_crn is not None:
            pulumi.set(__self__, "kms_key_crn", kms_key_crn)
        if metrics_monitoring is not None:
            pulumi.set(__self__, "metrics_monitoring", metrics_monitoring)
        if noncurrent_version_expiration is not None:
            pulumi.set(__self__, "noncurrent_version_expiration", noncurrent_version_expiration)
        if object_lock is not None:
            pulumi.set(__self__, "object_lock", object_lock)
        if object_versioning is not None:
            pulumi.set(__self__, "object_versioning", object_versioning)
        if region_location is not None:
            pulumi.set(__self__, "region_location", region_location)
        if resource_instance_id is not None:
            pulumi.set(__self__, "resource_instance_id", resource_instance_id)
        if retention_rule is not None:
            pulumi.set(__self__, "retention_rule", retention_rule)
        if s3_endpoint_direct is not None:
            pulumi.set(__self__, "s3_endpoint_direct", s3_endpoint_direct)
        if s3_endpoint_private is not None:
            pulumi.set(__self__, "s3_endpoint_private", s3_endpoint_private)
        if s3_endpoint_public is not None:
            pulumi.set(__self__, "s3_endpoint_public", s3_endpoint_public)
        if satellite_location_id is not None:
            pulumi.set(__self__, "satellite_location_id", satellite_location_id)
        if single_site_location is not None:
            pulumi.set(__self__, "single_site_location", single_site_location)
        if storage_class is not None:
            pulumi.set(__self__, "storage_class", storage_class)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="abortIncompleteMultipartUploadDays")
    @_utilities.deprecated("""Deprecated""")
    def abort_incomplete_multipart_upload_days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketAbortIncompleteMultipartUploadDayArgs']]]]:
        """
        Enable abort incomplete multipart upload to COS Bucket after a defined period of time
        """
        return pulumi.get(self, "abort_incomplete_multipart_upload_days")

    @abort_incomplete_multipart_upload_days.setter
    def abort_incomplete_multipart_upload_days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketAbortIncompleteMultipartUploadDayArgs']]]]):
        pulumi.set(self, "abort_incomplete_multipart_upload_days", value)

    @_builtins.property
    @pulumi.getter(name="activityTracking")
    def activity_tracking(self) -> Optional[pulumi.Input['CosBucketActivityTrackingArgs']]:
        """
        Enables sending log data to IBM Cloud Activity Tracker to provide visibility into bucket management, object read and
        write events.
        """
        return pulumi.get(self, "activity_tracking")

    @activity_tracking.setter
    def activity_tracking(self, value: Optional[pulumi.Input['CosBucketActivityTrackingArgs']]):
        pulumi.set(self, "activity_tracking", value)

    @_builtins.property
    @pulumi.getter(name="allowedIps")
    def allowed_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of IPv4 or IPv6 addresses
        """
        return pulumi.get(self, "allowed_ips")

    @allowed_ips.setter
    def allowed_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "allowed_ips", value)

    @_builtins.property
    @pulumi.getter(name="archiveRule")
    @_utilities.deprecated("""Deprecated""")
    def archive_rule(self) -> Optional[pulumi.Input['CosBucketArchiveRuleArgs']]:
        """
        Enable configuration archive_rule (glacier/accelerated) to COS Bucket after a defined period of time
        """
        return pulumi.get(self, "archive_rule")

    @archive_rule.setter
    def archive_rule(self, value: Optional[pulumi.Input['CosBucketArchiveRuleArgs']]):
        pulumi.set(self, "archive_rule", value)

    @_builtins.property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        COS Bucket name
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bucket_name", value)

    @_builtins.property
    @pulumi.getter(name="cosBucketId")
    def cos_bucket_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cos_bucket_id")

    @cos_bucket_id.setter
    def cos_bucket_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cos_bucket_id", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CRN of resource instance
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="crossRegionLocation")
    def cross_region_location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cros region location info
        """
        return pulumi.get(self, "cross_region_location")

    @cross_region_location.setter
    def cross_region_location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cross_region_location", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        COS endpoint type: public, private, direct
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter(name="expireRules")
    @_utilities.deprecated("""Deprecated""")
    def expire_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketExpireRuleArgs']]]]:
        """
        Enable configuration expire_rule to COS Bucket after a defined period of time
        """
        return pulumi.get(self, "expire_rules")

    @expire_rules.setter
    def expire_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CosBucketExpireRuleArgs']]]]):
        pulumi.set(self, "expire_rules", value)

    @_builtins.property
    @pulumi.getter(name="forceDelete")
    def force_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        COS buckets need to be empty before they can be deleted. force_delete option empty the bucket and delete it.
        """
        return pulumi.get(self, "force_delete")

    @force_delete.setter
    def force_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "force_delete", value)

    @_builtins.property
    @pulumi.getter(name="hardQuota")
    def hard_quota(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        sets a maximum amount of storage (in bytes) available for a bucket
        """
        return pulumi.get(self, "hard_quota")

    @hard_quota.setter
    def hard_quota(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "hard_quota", value)

    @_builtins.property
    @pulumi.getter(name="keyProtect")
    def key_protect(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CRN of the key you want to use data at rest encryption
        """
        return pulumi.get(self, "key_protect")

    @key_protect.setter
    def key_protect(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_protect", value)

    @_builtins.property
    @pulumi.getter(name="kmsKeyCrn")
    def kms_key_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CRN of the key you want to use data at rest encryption
        """
        return pulumi.get(self, "kms_key_crn")

    @kms_key_crn.setter
    def kms_key_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kms_key_crn", value)

    @_builtins.property
    @pulumi.getter(name="metricsMonitoring")
    def metrics_monitoring(self) -> Optional[pulumi.Input['CosBucketMetricsMonitoringArgs']]:
        """
        Enables sending metrics to IBM Cloud Monitoring.All metrics are opt-in
        """
        return pulumi.get(self, "metrics_monitoring")

    @metrics_monitoring.setter
    def metrics_monitoring(self, value: Optional[pulumi.Input['CosBucketMetricsMonitoringArgs']]):
        pulumi.set(self, "metrics_monitoring", value)

    @_builtins.property
    @pulumi.getter(name="noncurrentVersionExpiration")
    def noncurrent_version_expiration(self) -> Optional[pulumi.Input['CosBucketNoncurrentVersionExpirationArgs']]:
        """
        Enable configuration expire_rule to COS Bucket after a defined period of time
        """
        return pulumi.get(self, "noncurrent_version_expiration")

    @noncurrent_version_expiration.setter
    def noncurrent_version_expiration(self, value: Optional[pulumi.Input['CosBucketNoncurrentVersionExpirationArgs']]):
        pulumi.set(self, "noncurrent_version_expiration", value)

    @_builtins.property
    @pulumi.getter(name="objectLock")
    def object_lock(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable objectlock for the bucket. When enabled, buckets within the container vault can have Object Lock Configuration
        applied to the bucket.
        """
        return pulumi.get(self, "object_lock")

    @object_lock.setter
    def object_lock(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "object_lock", value)

    @_builtins.property
    @pulumi.getter(name="objectVersioning")
    def object_versioning(self) -> Optional[pulumi.Input['CosBucketObjectVersioningArgs']]:
        """
        Protect objects from accidental deletion or overwrites. Versioning allows you to keep multiple versions of an object
        protecting from unintentional data loss.
        """
        return pulumi.get(self, "object_versioning")

    @object_versioning.setter
    def object_versioning(self, value: Optional[pulumi.Input['CosBucketObjectVersioningArgs']]):
        pulumi.set(self, "object_versioning", value)

    @_builtins.property
    @pulumi.getter(name="regionLocation")
    def region_location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Region Location info.
        """
        return pulumi.get(self, "region_location")

    @region_location.setter
    def region_location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region_location", value)

    @_builtins.property
    @pulumi.getter(name="resourceInstanceId")
    def resource_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        resource instance ID
        """
        return pulumi.get(self, "resource_instance_id")

    @resource_instance_id.setter
    def resource_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="retentionRule")
    def retention_rule(self) -> Optional[pulumi.Input['CosBucketRetentionRuleArgs']]:
        """
        A retention policy is enabled at the IBM Cloud Object Storage bucket level. Minimum, maximum and default retention
        period are defined by this policy and apply to all objects in the bucket.
        """
        return pulumi.get(self, "retention_rule")

    @retention_rule.setter
    def retention_rule(self, value: Optional[pulumi.Input['CosBucketRetentionRuleArgs']]):
        pulumi.set(self, "retention_rule", value)

    @_builtins.property
    @pulumi.getter(name="s3EndpointDirect")
    def s3_endpoint_direct(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Direct endpoint for the COS bucket
        """
        return pulumi.get(self, "s3_endpoint_direct")

    @s3_endpoint_direct.setter
    def s3_endpoint_direct(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "s3_endpoint_direct", value)

    @_builtins.property
    @pulumi.getter(name="s3EndpointPrivate")
    def s3_endpoint_private(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Private endpoint for the COS bucket
        """
        return pulumi.get(self, "s3_endpoint_private")

    @s3_endpoint_private.setter
    def s3_endpoint_private(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "s3_endpoint_private", value)

    @_builtins.property
    @pulumi.getter(name="s3EndpointPublic")
    def s3_endpoint_public(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Public endpoint for the COS bucket
        """
        return pulumi.get(self, "s3_endpoint_public")

    @s3_endpoint_public.setter
    def s3_endpoint_public(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "s3_endpoint_public", value)

    @_builtins.property
    @pulumi.getter(name="satelliteLocationId")
    def satellite_location_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Provide satellite location info.
        """
        return pulumi.get(self, "satellite_location_id")

    @satellite_location_id.setter
    def satellite_location_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "satellite_location_id", value)

    @_builtins.property
    @pulumi.getter(name="singleSiteLocation")
    def single_site_location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        single site location info
        """
        return pulumi.get(self, "single_site_location")

    @single_site_location.setter
    def single_site_location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "single_site_location", value)

    @_builtins.property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Storage class info
        """
        return pulumi.get(self, "storage_class")

    @storage_class.setter
    def storage_class(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_class", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['CosBucketTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['CosBucketTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/cosBucket:CosBucket")
class CosBucket(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 abort_incomplete_multipart_upload_days: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CosBucketAbortIncompleteMultipartUploadDayArgs', 'CosBucketAbortIncompleteMultipartUploadDayArgsDict']]]]] = None,
                 activity_tracking: Optional[pulumi.Input[Union['CosBucketActivityTrackingArgs', 'CosBucketActivityTrackingArgsDict']]] = None,
                 allowed_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 archive_rule: Optional[pulumi.Input[Union['CosBucketArchiveRuleArgs', 'CosBucketArchiveRuleArgsDict']]] = None,
                 bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cos_bucket_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cross_region_location: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 expire_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CosBucketExpireRuleArgs', 'CosBucketExpireRuleArgsDict']]]]] = None,
                 force_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 hard_quota: Optional[pulumi.Input[_builtins.float]] = None,
                 key_protect: Optional[pulumi.Input[_builtins.str]] = None,
                 kms_key_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 metrics_monitoring: Optional[pulumi.Input[Union['CosBucketMetricsMonitoringArgs', 'CosBucketMetricsMonitoringArgsDict']]] = None,
                 noncurrent_version_expiration: Optional[pulumi.Input[Union['CosBucketNoncurrentVersionExpirationArgs', 'CosBucketNoncurrentVersionExpirationArgsDict']]] = None,
                 object_lock: Optional[pulumi.Input[_builtins.bool]] = None,
                 object_versioning: Optional[pulumi.Input[Union['CosBucketObjectVersioningArgs', 'CosBucketObjectVersioningArgsDict']]] = None,
                 region_location: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 retention_rule: Optional[pulumi.Input[Union['CosBucketRetentionRuleArgs', 'CosBucketRetentionRuleArgsDict']]] = None,
                 satellite_location_id: Optional[pulumi.Input[_builtins.str]] = None,
                 single_site_location: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_class: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['CosBucketTimeoutsArgs', 'CosBucketTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a CosBucket resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CosBucketAbortIncompleteMultipartUploadDayArgs', 'CosBucketAbortIncompleteMultipartUploadDayArgsDict']]]] abort_incomplete_multipart_upload_days: Enable abort incomplete multipart upload to COS Bucket after a defined period of time
        :param pulumi.Input[Union['CosBucketActivityTrackingArgs', 'CosBucketActivityTrackingArgsDict']] activity_tracking: Enables sending log data to IBM Cloud Activity Tracker to provide visibility into bucket management, object read and
               write events.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] allowed_ips: List of IPv4 or IPv6 addresses
        :param pulumi.Input[Union['CosBucketArchiveRuleArgs', 'CosBucketArchiveRuleArgsDict']] archive_rule: Enable configuration archive_rule (glacier/accelerated) to COS Bucket after a defined period of time
        :param pulumi.Input[_builtins.str] bucket_name: COS Bucket name
        :param pulumi.Input[_builtins.str] cross_region_location: Cros region location info
        :param pulumi.Input[_builtins.str] endpoint_type: COS endpoint type: public, private, direct
        :param pulumi.Input[Sequence[pulumi.Input[Union['CosBucketExpireRuleArgs', 'CosBucketExpireRuleArgsDict']]]] expire_rules: Enable configuration expire_rule to COS Bucket after a defined period of time
        :param pulumi.Input[_builtins.bool] force_delete: COS buckets need to be empty before they can be deleted. force_delete option empty the bucket and delete it.
        :param pulumi.Input[_builtins.float] hard_quota: sets a maximum amount of storage (in bytes) available for a bucket
        :param pulumi.Input[_builtins.str] key_protect: CRN of the key you want to use data at rest encryption
        :param pulumi.Input[_builtins.str] kms_key_crn: CRN of the key you want to use data at rest encryption
        :param pulumi.Input[Union['CosBucketMetricsMonitoringArgs', 'CosBucketMetricsMonitoringArgsDict']] metrics_monitoring: Enables sending metrics to IBM Cloud Monitoring.All metrics are opt-in
        :param pulumi.Input[Union['CosBucketNoncurrentVersionExpirationArgs', 'CosBucketNoncurrentVersionExpirationArgsDict']] noncurrent_version_expiration: Enable configuration expire_rule to COS Bucket after a defined period of time
        :param pulumi.Input[_builtins.bool] object_lock: Enable objectlock for the bucket. When enabled, buckets within the container vault can have Object Lock Configuration
               applied to the bucket.
        :param pulumi.Input[Union['CosBucketObjectVersioningArgs', 'CosBucketObjectVersioningArgsDict']] object_versioning: Protect objects from accidental deletion or overwrites. Versioning allows you to keep multiple versions of an object
               protecting from unintentional data loss.
        :param pulumi.Input[_builtins.str] region_location: Region Location info.
        :param pulumi.Input[_builtins.str] resource_instance_id: resource instance ID
        :param pulumi.Input[Union['CosBucketRetentionRuleArgs', 'CosBucketRetentionRuleArgsDict']] retention_rule: A retention policy is enabled at the IBM Cloud Object Storage bucket level. Minimum, maximum and default retention
               period are defined by this policy and apply to all objects in the bucket.
        :param pulumi.Input[_builtins.str] satellite_location_id: Provide satellite location info.
        :param pulumi.Input[_builtins.str] single_site_location: single site location info
        :param pulumi.Input[_builtins.str] storage_class: Storage class info
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CosBucketArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CosBucket resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CosBucketArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CosBucketArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 abort_incomplete_multipart_upload_days: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CosBucketAbortIncompleteMultipartUploadDayArgs', 'CosBucketAbortIncompleteMultipartUploadDayArgsDict']]]]] = None,
                 activity_tracking: Optional[pulumi.Input[Union['CosBucketActivityTrackingArgs', 'CosBucketActivityTrackingArgsDict']]] = None,
                 allowed_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 archive_rule: Optional[pulumi.Input[Union['CosBucketArchiveRuleArgs', 'CosBucketArchiveRuleArgsDict']]] = None,
                 bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cos_bucket_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cross_region_location: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 expire_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CosBucketExpireRuleArgs', 'CosBucketExpireRuleArgsDict']]]]] = None,
                 force_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 hard_quota: Optional[pulumi.Input[_builtins.float]] = None,
                 key_protect: Optional[pulumi.Input[_builtins.str]] = None,
                 kms_key_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 metrics_monitoring: Optional[pulumi.Input[Union['CosBucketMetricsMonitoringArgs', 'CosBucketMetricsMonitoringArgsDict']]] = None,
                 noncurrent_version_expiration: Optional[pulumi.Input[Union['CosBucketNoncurrentVersionExpirationArgs', 'CosBucketNoncurrentVersionExpirationArgsDict']]] = None,
                 object_lock: Optional[pulumi.Input[_builtins.bool]] = None,
                 object_versioning: Optional[pulumi.Input[Union['CosBucketObjectVersioningArgs', 'CosBucketObjectVersioningArgsDict']]] = None,
                 region_location: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 retention_rule: Optional[pulumi.Input[Union['CosBucketRetentionRuleArgs', 'CosBucketRetentionRuleArgsDict']]] = None,
                 satellite_location_id: Optional[pulumi.Input[_builtins.str]] = None,
                 single_site_location: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_class: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['CosBucketTimeoutsArgs', 'CosBucketTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CosBucketArgs.__new__(CosBucketArgs)

            __props__.__dict__["abort_incomplete_multipart_upload_days"] = abort_incomplete_multipart_upload_days
            __props__.__dict__["activity_tracking"] = activity_tracking
            __props__.__dict__["allowed_ips"] = allowed_ips
            __props__.__dict__["archive_rule"] = archive_rule
            if bucket_name is None and not opts.urn:
                raise TypeError("Missing required property 'bucket_name'")
            __props__.__dict__["bucket_name"] = bucket_name
            __props__.__dict__["cos_bucket_id"] = cos_bucket_id
            __props__.__dict__["cross_region_location"] = cross_region_location
            __props__.__dict__["endpoint_type"] = endpoint_type
            __props__.__dict__["expire_rules"] = expire_rules
            __props__.__dict__["force_delete"] = force_delete
            __props__.__dict__["hard_quota"] = hard_quota
            __props__.__dict__["key_protect"] = key_protect
            __props__.__dict__["kms_key_crn"] = kms_key_crn
            __props__.__dict__["metrics_monitoring"] = metrics_monitoring
            __props__.__dict__["noncurrent_version_expiration"] = noncurrent_version_expiration
            __props__.__dict__["object_lock"] = object_lock
            __props__.__dict__["object_versioning"] = object_versioning
            __props__.__dict__["region_location"] = region_location
            if resource_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'resource_instance_id'")
            __props__.__dict__["resource_instance_id"] = resource_instance_id
            __props__.__dict__["retention_rule"] = retention_rule
            __props__.__dict__["satellite_location_id"] = satellite_location_id
            __props__.__dict__["single_site_location"] = single_site_location
            __props__.__dict__["storage_class"] = storage_class
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["crn"] = None
            __props__.__dict__["s3_endpoint_direct"] = None
            __props__.__dict__["s3_endpoint_private"] = None
            __props__.__dict__["s3_endpoint_public"] = None
        super(CosBucket, __self__).__init__(
            'ibm:index/cosBucket:CosBucket',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            abort_incomplete_multipart_upload_days: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CosBucketAbortIncompleteMultipartUploadDayArgs', 'CosBucketAbortIncompleteMultipartUploadDayArgsDict']]]]] = None,
            activity_tracking: Optional[pulumi.Input[Union['CosBucketActivityTrackingArgs', 'CosBucketActivityTrackingArgsDict']]] = None,
            allowed_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            archive_rule: Optional[pulumi.Input[Union['CosBucketArchiveRuleArgs', 'CosBucketArchiveRuleArgsDict']]] = None,
            bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
            cos_bucket_id: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            cross_region_location: Optional[pulumi.Input[_builtins.str]] = None,
            endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
            expire_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CosBucketExpireRuleArgs', 'CosBucketExpireRuleArgsDict']]]]] = None,
            force_delete: Optional[pulumi.Input[_builtins.bool]] = None,
            hard_quota: Optional[pulumi.Input[_builtins.float]] = None,
            key_protect: Optional[pulumi.Input[_builtins.str]] = None,
            kms_key_crn: Optional[pulumi.Input[_builtins.str]] = None,
            metrics_monitoring: Optional[pulumi.Input[Union['CosBucketMetricsMonitoringArgs', 'CosBucketMetricsMonitoringArgsDict']]] = None,
            noncurrent_version_expiration: Optional[pulumi.Input[Union['CosBucketNoncurrentVersionExpirationArgs', 'CosBucketNoncurrentVersionExpirationArgsDict']]] = None,
            object_lock: Optional[pulumi.Input[_builtins.bool]] = None,
            object_versioning: Optional[pulumi.Input[Union['CosBucketObjectVersioningArgs', 'CosBucketObjectVersioningArgsDict']]] = None,
            region_location: Optional[pulumi.Input[_builtins.str]] = None,
            resource_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            retention_rule: Optional[pulumi.Input[Union['CosBucketRetentionRuleArgs', 'CosBucketRetentionRuleArgsDict']]] = None,
            s3_endpoint_direct: Optional[pulumi.Input[_builtins.str]] = None,
            s3_endpoint_private: Optional[pulumi.Input[_builtins.str]] = None,
            s3_endpoint_public: Optional[pulumi.Input[_builtins.str]] = None,
            satellite_location_id: Optional[pulumi.Input[_builtins.str]] = None,
            single_site_location: Optional[pulumi.Input[_builtins.str]] = None,
            storage_class: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['CosBucketTimeoutsArgs', 'CosBucketTimeoutsArgsDict']]] = None) -> 'CosBucket':
        """
        Get an existing CosBucket resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CosBucketAbortIncompleteMultipartUploadDayArgs', 'CosBucketAbortIncompleteMultipartUploadDayArgsDict']]]] abort_incomplete_multipart_upload_days: Enable abort incomplete multipart upload to COS Bucket after a defined period of time
        :param pulumi.Input[Union['CosBucketActivityTrackingArgs', 'CosBucketActivityTrackingArgsDict']] activity_tracking: Enables sending log data to IBM Cloud Activity Tracker to provide visibility into bucket management, object read and
               write events.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] allowed_ips: List of IPv4 or IPv6 addresses
        :param pulumi.Input[Union['CosBucketArchiveRuleArgs', 'CosBucketArchiveRuleArgsDict']] archive_rule: Enable configuration archive_rule (glacier/accelerated) to COS Bucket after a defined period of time
        :param pulumi.Input[_builtins.str] bucket_name: COS Bucket name
        :param pulumi.Input[_builtins.str] crn: CRN of resource instance
        :param pulumi.Input[_builtins.str] cross_region_location: Cros region location info
        :param pulumi.Input[_builtins.str] endpoint_type: COS endpoint type: public, private, direct
        :param pulumi.Input[Sequence[pulumi.Input[Union['CosBucketExpireRuleArgs', 'CosBucketExpireRuleArgsDict']]]] expire_rules: Enable configuration expire_rule to COS Bucket after a defined period of time
        :param pulumi.Input[_builtins.bool] force_delete: COS buckets need to be empty before they can be deleted. force_delete option empty the bucket and delete it.
        :param pulumi.Input[_builtins.float] hard_quota: sets a maximum amount of storage (in bytes) available for a bucket
        :param pulumi.Input[_builtins.str] key_protect: CRN of the key you want to use data at rest encryption
        :param pulumi.Input[_builtins.str] kms_key_crn: CRN of the key you want to use data at rest encryption
        :param pulumi.Input[Union['CosBucketMetricsMonitoringArgs', 'CosBucketMetricsMonitoringArgsDict']] metrics_monitoring: Enables sending metrics to IBM Cloud Monitoring.All metrics are opt-in
        :param pulumi.Input[Union['CosBucketNoncurrentVersionExpirationArgs', 'CosBucketNoncurrentVersionExpirationArgsDict']] noncurrent_version_expiration: Enable configuration expire_rule to COS Bucket after a defined period of time
        :param pulumi.Input[_builtins.bool] object_lock: Enable objectlock for the bucket. When enabled, buckets within the container vault can have Object Lock Configuration
               applied to the bucket.
        :param pulumi.Input[Union['CosBucketObjectVersioningArgs', 'CosBucketObjectVersioningArgsDict']] object_versioning: Protect objects from accidental deletion or overwrites. Versioning allows you to keep multiple versions of an object
               protecting from unintentional data loss.
        :param pulumi.Input[_builtins.str] region_location: Region Location info.
        :param pulumi.Input[_builtins.str] resource_instance_id: resource instance ID
        :param pulumi.Input[Union['CosBucketRetentionRuleArgs', 'CosBucketRetentionRuleArgsDict']] retention_rule: A retention policy is enabled at the IBM Cloud Object Storage bucket level. Minimum, maximum and default retention
               period are defined by this policy and apply to all objects in the bucket.
        :param pulumi.Input[_builtins.str] s3_endpoint_direct: Direct endpoint for the COS bucket
        :param pulumi.Input[_builtins.str] s3_endpoint_private: Private endpoint for the COS bucket
        :param pulumi.Input[_builtins.str] s3_endpoint_public: Public endpoint for the COS bucket
        :param pulumi.Input[_builtins.str] satellite_location_id: Provide satellite location info.
        :param pulumi.Input[_builtins.str] single_site_location: single site location info
        :param pulumi.Input[_builtins.str] storage_class: Storage class info
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CosBucketState.__new__(_CosBucketState)

        __props__.__dict__["abort_incomplete_multipart_upload_days"] = abort_incomplete_multipart_upload_days
        __props__.__dict__["activity_tracking"] = activity_tracking
        __props__.__dict__["allowed_ips"] = allowed_ips
        __props__.__dict__["archive_rule"] = archive_rule
        __props__.__dict__["bucket_name"] = bucket_name
        __props__.__dict__["cos_bucket_id"] = cos_bucket_id
        __props__.__dict__["crn"] = crn
        __props__.__dict__["cross_region_location"] = cross_region_location
        __props__.__dict__["endpoint_type"] = endpoint_type
        __props__.__dict__["expire_rules"] = expire_rules
        __props__.__dict__["force_delete"] = force_delete
        __props__.__dict__["hard_quota"] = hard_quota
        __props__.__dict__["key_protect"] = key_protect
        __props__.__dict__["kms_key_crn"] = kms_key_crn
        __props__.__dict__["metrics_monitoring"] = metrics_monitoring
        __props__.__dict__["noncurrent_version_expiration"] = noncurrent_version_expiration
        __props__.__dict__["object_lock"] = object_lock
        __props__.__dict__["object_versioning"] = object_versioning
        __props__.__dict__["region_location"] = region_location
        __props__.__dict__["resource_instance_id"] = resource_instance_id
        __props__.__dict__["retention_rule"] = retention_rule
        __props__.__dict__["s3_endpoint_direct"] = s3_endpoint_direct
        __props__.__dict__["s3_endpoint_private"] = s3_endpoint_private
        __props__.__dict__["s3_endpoint_public"] = s3_endpoint_public
        __props__.__dict__["satellite_location_id"] = satellite_location_id
        __props__.__dict__["single_site_location"] = single_site_location
        __props__.__dict__["storage_class"] = storage_class
        __props__.__dict__["timeouts"] = timeouts
        return CosBucket(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="abortIncompleteMultipartUploadDays")
    @_utilities.deprecated("""Deprecated""")
    def abort_incomplete_multipart_upload_days(self) -> pulumi.Output[Optional[Sequence['outputs.CosBucketAbortIncompleteMultipartUploadDay']]]:
        """
        Enable abort incomplete multipart upload to COS Bucket after a defined period of time
        """
        return pulumi.get(self, "abort_incomplete_multipart_upload_days")

    @_builtins.property
    @pulumi.getter(name="activityTracking")
    def activity_tracking(self) -> pulumi.Output[Optional['outputs.CosBucketActivityTracking']]:
        """
        Enables sending log data to IBM Cloud Activity Tracker to provide visibility into bucket management, object read and
        write events.
        """
        return pulumi.get(self, "activity_tracking")

    @_builtins.property
    @pulumi.getter(name="allowedIps")
    def allowed_ips(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of IPv4 or IPv6 addresses
        """
        return pulumi.get(self, "allowed_ips")

    @_builtins.property
    @pulumi.getter(name="archiveRule")
    @_utilities.deprecated("""Deprecated""")
    def archive_rule(self) -> pulumi.Output[Optional['outputs.CosBucketArchiveRule']]:
        """
        Enable configuration archive_rule (glacier/accelerated) to COS Bucket after a defined period of time
        """
        return pulumi.get(self, "archive_rule")

    @_builtins.property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Output[_builtins.str]:
        """
        COS Bucket name
        """
        return pulumi.get(self, "bucket_name")

    @_builtins.property
    @pulumi.getter(name="cosBucketId")
    def cos_bucket_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cos_bucket_id")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        CRN of resource instance
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="crossRegionLocation")
    def cross_region_location(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Cros region location info
        """
        return pulumi.get(self, "cross_region_location")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        COS endpoint type: public, private, direct
        """
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter(name="expireRules")
    @_utilities.deprecated("""Deprecated""")
    def expire_rules(self) -> pulumi.Output[Optional[Sequence['outputs.CosBucketExpireRule']]]:
        """
        Enable configuration expire_rule to COS Bucket after a defined period of time
        """
        return pulumi.get(self, "expire_rules")

    @_builtins.property
    @pulumi.getter(name="forceDelete")
    def force_delete(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        COS buckets need to be empty before they can be deleted. force_delete option empty the bucket and delete it.
        """
        return pulumi.get(self, "force_delete")

    @_builtins.property
    @pulumi.getter(name="hardQuota")
    def hard_quota(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        sets a maximum amount of storage (in bytes) available for a bucket
        """
        return pulumi.get(self, "hard_quota")

    @_builtins.property
    @pulumi.getter(name="keyProtect")
    def key_protect(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        CRN of the key you want to use data at rest encryption
        """
        return pulumi.get(self, "key_protect")

    @_builtins.property
    @pulumi.getter(name="kmsKeyCrn")
    def kms_key_crn(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        CRN of the key you want to use data at rest encryption
        """
        return pulumi.get(self, "kms_key_crn")

    @_builtins.property
    @pulumi.getter(name="metricsMonitoring")
    def metrics_monitoring(self) -> pulumi.Output[Optional['outputs.CosBucketMetricsMonitoring']]:
        """
        Enables sending metrics to IBM Cloud Monitoring.All metrics are opt-in
        """
        return pulumi.get(self, "metrics_monitoring")

    @_builtins.property
    @pulumi.getter(name="noncurrentVersionExpiration")
    def noncurrent_version_expiration(self) -> pulumi.Output[Optional['outputs.CosBucketNoncurrentVersionExpiration']]:
        """
        Enable configuration expire_rule to COS Bucket after a defined period of time
        """
        return pulumi.get(self, "noncurrent_version_expiration")

    @_builtins.property
    @pulumi.getter(name="objectLock")
    def object_lock(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Enable objectlock for the bucket. When enabled, buckets within the container vault can have Object Lock Configuration
        applied to the bucket.
        """
        return pulumi.get(self, "object_lock")

    @_builtins.property
    @pulumi.getter(name="objectVersioning")
    def object_versioning(self) -> pulumi.Output[Optional['outputs.CosBucketObjectVersioning']]:
        """
        Protect objects from accidental deletion or overwrites. Versioning allows you to keep multiple versions of an object
        protecting from unintentional data loss.
        """
        return pulumi.get(self, "object_versioning")

    @_builtins.property
    @pulumi.getter(name="regionLocation")
    def region_location(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Region Location info.
        """
        return pulumi.get(self, "region_location")

    @_builtins.property
    @pulumi.getter(name="resourceInstanceId")
    def resource_instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        resource instance ID
        """
        return pulumi.get(self, "resource_instance_id")

    @_builtins.property
    @pulumi.getter(name="retentionRule")
    def retention_rule(self) -> pulumi.Output[Optional['outputs.CosBucketRetentionRule']]:
        """
        A retention policy is enabled at the IBM Cloud Object Storage bucket level. Minimum, maximum and default retention
        period are defined by this policy and apply to all objects in the bucket.
        """
        return pulumi.get(self, "retention_rule")

    @_builtins.property
    @pulumi.getter(name="s3EndpointDirect")
    def s3_endpoint_direct(self) -> pulumi.Output[_builtins.str]:
        """
        Direct endpoint for the COS bucket
        """
        return pulumi.get(self, "s3_endpoint_direct")

    @_builtins.property
    @pulumi.getter(name="s3EndpointPrivate")
    def s3_endpoint_private(self) -> pulumi.Output[_builtins.str]:
        """
        Private endpoint for the COS bucket
        """
        return pulumi.get(self, "s3_endpoint_private")

    @_builtins.property
    @pulumi.getter(name="s3EndpointPublic")
    def s3_endpoint_public(self) -> pulumi.Output[_builtins.str]:
        """
        Public endpoint for the COS bucket
        """
        return pulumi.get(self, "s3_endpoint_public")

    @_builtins.property
    @pulumi.getter(name="satelliteLocationId")
    def satellite_location_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Provide satellite location info.
        """
        return pulumi.get(self, "satellite_location_id")

    @_builtins.property
    @pulumi.getter(name="singleSiteLocation")
    def single_site_location(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        single site location info
        """
        return pulumi.get(self, "single_site_location")

    @_builtins.property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> pulumi.Output[_builtins.str]:
        """
        Storage class info
        """
        return pulumi.get(self, "storage_class")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.CosBucketTimeouts']]:
        return pulumi.get(self, "timeouts")

