# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetAppConfigFeatureResult',
    'AwaitableGetAppConfigFeatureResult',
    'get_app_config_feature',
    'get_app_config_feature_output',
]

@pulumi.output_type
class GetAppConfigFeatureResult:
    """
    A collection of values returned by getAppConfigFeature.
    """
    def __init__(__self__, collections=None, created_time=None, description=None, disabled_value=None, enabled=None, enabled_value=None, environment_id=None, feature_id=None, format=None, guid=None, href=None, id=None, includes=None, name=None, rollout_percentage=None, segment_exists=None, segment_rules=None, tags=None, type=None, updated_time=None):
        if collections and not isinstance(collections, list):
            raise TypeError("Expected argument 'collections' to be a list")
        pulumi.set(__self__, "collections", collections)
        if created_time and not isinstance(created_time, str):
            raise TypeError("Expected argument 'created_time' to be a str")
        pulumi.set(__self__, "created_time", created_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if disabled_value and not isinstance(disabled_value, str):
            raise TypeError("Expected argument 'disabled_value' to be a str")
        pulumi.set(__self__, "disabled_value", disabled_value)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if enabled_value and not isinstance(enabled_value, str):
            raise TypeError("Expected argument 'enabled_value' to be a str")
        pulumi.set(__self__, "enabled_value", enabled_value)
        if environment_id and not isinstance(environment_id, str):
            raise TypeError("Expected argument 'environment_id' to be a str")
        pulumi.set(__self__, "environment_id", environment_id)
        if feature_id and not isinstance(feature_id, str):
            raise TypeError("Expected argument 'feature_id' to be a str")
        pulumi.set(__self__, "feature_id", feature_id)
        if format and not isinstance(format, str):
            raise TypeError("Expected argument 'format' to be a str")
        pulumi.set(__self__, "format", format)
        if guid and not isinstance(guid, str):
            raise TypeError("Expected argument 'guid' to be a str")
        pulumi.set(__self__, "guid", guid)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if includes and not isinstance(includes, str):
            raise TypeError("Expected argument 'includes' to be a str")
        pulumi.set(__self__, "includes", includes)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if rollout_percentage and not isinstance(rollout_percentage, float):
            raise TypeError("Expected argument 'rollout_percentage' to be a float")
        pulumi.set(__self__, "rollout_percentage", rollout_percentage)
        if segment_exists and not isinstance(segment_exists, bool):
            raise TypeError("Expected argument 'segment_exists' to be a bool")
        pulumi.set(__self__, "segment_exists", segment_exists)
        if segment_rules and not isinstance(segment_rules, list):
            raise TypeError("Expected argument 'segment_rules' to be a list")
        pulumi.set(__self__, "segment_rules", segment_rules)
        if tags and not isinstance(tags, str):
            raise TypeError("Expected argument 'tags' to be a str")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if updated_time and not isinstance(updated_time, str):
            raise TypeError("Expected argument 'updated_time' to be a str")
        pulumi.set(__self__, "updated_time", updated_time)

    @_builtins.property
    @pulumi.getter
    def collections(self) -> Sequence['outputs.GetAppConfigFeatureCollectionResult']:
        return pulumi.get(self, "collections")

    @_builtins.property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> _builtins.str:
        return pulumi.get(self, "created_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="disabledValue")
    def disabled_value(self) -> _builtins.str:
        return pulumi.get(self, "disabled_value")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="enabledValue")
    def enabled_value(self) -> _builtins.str:
        return pulumi.get(self, "enabled_value")

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> _builtins.str:
        return pulumi.get(self, "environment_id")

    @_builtins.property
    @pulumi.getter(name="featureId")
    def feature_id(self) -> _builtins.str:
        return pulumi.get(self, "feature_id")

    @_builtins.property
    @pulumi.getter
    def format(self) -> _builtins.str:
        return pulumi.get(self, "format")

    @_builtins.property
    @pulumi.getter
    def guid(self) -> _builtins.str:
        return pulumi.get(self, "guid")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def includes(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "includes")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="rolloutPercentage")
    def rollout_percentage(self) -> _builtins.float:
        return pulumi.get(self, "rollout_percentage")

    @_builtins.property
    @pulumi.getter(name="segmentExists")
    def segment_exists(self) -> _builtins.bool:
        return pulumi.get(self, "segment_exists")

    @_builtins.property
    @pulumi.getter(name="segmentRules")
    def segment_rules(self) -> Sequence['outputs.GetAppConfigFeatureSegmentRuleResult']:
        return pulumi.get(self, "segment_rules")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> _builtins.str:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> _builtins.str:
        return pulumi.get(self, "updated_time")


class AwaitableGetAppConfigFeatureResult(GetAppConfigFeatureResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppConfigFeatureResult(
            collections=self.collections,
            created_time=self.created_time,
            description=self.description,
            disabled_value=self.disabled_value,
            enabled=self.enabled,
            enabled_value=self.enabled_value,
            environment_id=self.environment_id,
            feature_id=self.feature_id,
            format=self.format,
            guid=self.guid,
            href=self.href,
            id=self.id,
            includes=self.includes,
            name=self.name,
            rollout_percentage=self.rollout_percentage,
            segment_exists=self.segment_exists,
            segment_rules=self.segment_rules,
            tags=self.tags,
            type=self.type,
            updated_time=self.updated_time)


def get_app_config_feature(environment_id: Optional[_builtins.str] = None,
                           feature_id: Optional[_builtins.str] = None,
                           guid: Optional[_builtins.str] = None,
                           id: Optional[_builtins.str] = None,
                           includes: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppConfigFeatureResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['environmentId'] = environment_id
    __args__['featureId'] = feature_id
    __args__['guid'] = guid
    __args__['id'] = id
    __args__['includes'] = includes
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getAppConfigFeature:getAppConfigFeature', __args__, opts=opts, typ=GetAppConfigFeatureResult, package_ref=_utilities.get_package()).value

    return AwaitableGetAppConfigFeatureResult(
        collections=pulumi.get(__ret__, 'collections'),
        created_time=pulumi.get(__ret__, 'created_time'),
        description=pulumi.get(__ret__, 'description'),
        disabled_value=pulumi.get(__ret__, 'disabled_value'),
        enabled=pulumi.get(__ret__, 'enabled'),
        enabled_value=pulumi.get(__ret__, 'enabled_value'),
        environment_id=pulumi.get(__ret__, 'environment_id'),
        feature_id=pulumi.get(__ret__, 'feature_id'),
        format=pulumi.get(__ret__, 'format'),
        guid=pulumi.get(__ret__, 'guid'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        includes=pulumi.get(__ret__, 'includes'),
        name=pulumi.get(__ret__, 'name'),
        rollout_percentage=pulumi.get(__ret__, 'rollout_percentage'),
        segment_exists=pulumi.get(__ret__, 'segment_exists'),
        segment_rules=pulumi.get(__ret__, 'segment_rules'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'),
        updated_time=pulumi.get(__ret__, 'updated_time'))
def get_app_config_feature_output(environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  feature_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  guid: Optional[pulumi.Input[_builtins.str]] = None,
                                  id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  includes: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppConfigFeatureResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['environmentId'] = environment_id
    __args__['featureId'] = feature_id
    __args__['guid'] = guid
    __args__['id'] = id
    __args__['includes'] = includes
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getAppConfigFeature:getAppConfigFeature', __args__, opts=opts, typ=GetAppConfigFeatureResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetAppConfigFeatureResult(
        collections=pulumi.get(__response__, 'collections'),
        created_time=pulumi.get(__response__, 'created_time'),
        description=pulumi.get(__response__, 'description'),
        disabled_value=pulumi.get(__response__, 'disabled_value'),
        enabled=pulumi.get(__response__, 'enabled'),
        enabled_value=pulumi.get(__response__, 'enabled_value'),
        environment_id=pulumi.get(__response__, 'environment_id'),
        feature_id=pulumi.get(__response__, 'feature_id'),
        format=pulumi.get(__response__, 'format'),
        guid=pulumi.get(__response__, 'guid'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        includes=pulumi.get(__response__, 'includes'),
        name=pulumi.get(__response__, 'name'),
        rollout_percentage=pulumi.get(__response__, 'rollout_percentage'),
        segment_exists=pulumi.get(__response__, 'segment_exists'),
        segment_rules=pulumi.get(__response__, 'segment_rules'),
        tags=pulumi.get(__response__, 'tags'),
        type=pulumi.get(__response__, 'type'),
        updated_time=pulumi.get(__response__, 'updated_time')))
