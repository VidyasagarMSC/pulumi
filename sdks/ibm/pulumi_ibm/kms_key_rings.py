# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['KmsKeyRingsArgs', 'KmsKeyRings']

@pulumi.input_type
class KmsKeyRingsArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 key_ring_id: pulumi.Input[_builtins.str],
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 force_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 kms_key_rings_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a KmsKeyRings resource.
        :param pulumi.Input[_builtins.str] instance_id: Key protect Instance GUID
        :param pulumi.Input[_builtins.str] key_ring_id: User defined unique ID for the key ring
        :param pulumi.Input[_builtins.str] endpoint_type: public or private
        :param pulumi.Input[_builtins.bool] force_delete: (Deprecated) set to true to force delete this key ring. This allows key ring deletion as long as all keys inside have
               key state equals to 5 (destroyed). Keys are moved to the default key ring.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "key_ring_id", key_ring_id)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if force_delete is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""force_delete is deprecated: Deprecated""")
        if force_delete is not None:
            pulumi.set(__self__, "force_delete", force_delete)
        if kms_key_rings_id is not None:
            pulumi.set(__self__, "kms_key_rings_id", kms_key_rings_id)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Key protect Instance GUID
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="keyRingId")
    def key_ring_id(self) -> pulumi.Input[_builtins.str]:
        """
        User defined unique ID for the key ring
        """
        return pulumi.get(self, "key_ring_id")

    @key_ring_id.setter
    def key_ring_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "key_ring_id", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        public or private
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter(name="forceDelete")
    @_utilities.deprecated("""Deprecated""")
    def force_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        (Deprecated) set to true to force delete this key ring. This allows key ring deletion as long as all keys inside have
        key state equals to 5 (destroyed). Keys are moved to the default key ring.
        """
        return pulumi.get(self, "force_delete")

    @force_delete.setter
    def force_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "force_delete", value)

    @_builtins.property
    @pulumi.getter(name="kmsKeyRingsId")
    def kms_key_rings_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "kms_key_rings_id")

    @kms_key_rings_id.setter
    def kms_key_rings_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kms_key_rings_id", value)


@pulumi.input_type
class _KmsKeyRingsState:
    def __init__(__self__, *,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 force_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 key_ring_id: Optional[pulumi.Input[_builtins.str]] = None,
                 kms_key_rings_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering KmsKeyRings resources.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private
        :param pulumi.Input[_builtins.bool] force_delete: (Deprecated) set to true to force delete this key ring. This allows key ring deletion as long as all keys inside have
               key state equals to 5 (destroyed). Keys are moved to the default key ring.
        :param pulumi.Input[_builtins.str] instance_id: Key protect Instance GUID
        :param pulumi.Input[_builtins.str] key_ring_id: User defined unique ID for the key ring
        """
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if force_delete is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""force_delete is deprecated: Deprecated""")
        if force_delete is not None:
            pulumi.set(__self__, "force_delete", force_delete)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if key_ring_id is not None:
            pulumi.set(__self__, "key_ring_id", key_ring_id)
        if kms_key_rings_id is not None:
            pulumi.set(__self__, "kms_key_rings_id", kms_key_rings_id)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        public or private
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter(name="forceDelete")
    @_utilities.deprecated("""Deprecated""")
    def force_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        (Deprecated) set to true to force delete this key ring. This allows key ring deletion as long as all keys inside have
        key state equals to 5 (destroyed). Keys are moved to the default key ring.
        """
        return pulumi.get(self, "force_delete")

    @force_delete.setter
    def force_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "force_delete", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Key protect Instance GUID
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="keyRingId")
    def key_ring_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        User defined unique ID for the key ring
        """
        return pulumi.get(self, "key_ring_id")

    @key_ring_id.setter
    def key_ring_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_ring_id", value)

    @_builtins.property
    @pulumi.getter(name="kmsKeyRingsId")
    def kms_key_rings_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "kms_key_rings_id")

    @kms_key_rings_id.setter
    def kms_key_rings_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kms_key_rings_id", value)


@pulumi.type_token("ibm:index/kmsKeyRings:KmsKeyRings")
class KmsKeyRings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 force_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 key_ring_id: Optional[pulumi.Input[_builtins.str]] = None,
                 kms_key_rings_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a KmsKeyRings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private
        :param pulumi.Input[_builtins.bool] force_delete: (Deprecated) set to true to force delete this key ring. This allows key ring deletion as long as all keys inside have
               key state equals to 5 (destroyed). Keys are moved to the default key ring.
        :param pulumi.Input[_builtins.str] instance_id: Key protect Instance GUID
        :param pulumi.Input[_builtins.str] key_ring_id: User defined unique ID for the key ring
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: KmsKeyRingsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a KmsKeyRings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param KmsKeyRingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KmsKeyRingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 force_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 key_ring_id: Optional[pulumi.Input[_builtins.str]] = None,
                 kms_key_rings_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KmsKeyRingsArgs.__new__(KmsKeyRingsArgs)

            __props__.__dict__["endpoint_type"] = endpoint_type
            __props__.__dict__["force_delete"] = force_delete
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if key_ring_id is None and not opts.urn:
                raise TypeError("Missing required property 'key_ring_id'")
            __props__.__dict__["key_ring_id"] = key_ring_id
            __props__.__dict__["kms_key_rings_id"] = kms_key_rings_id
        super(KmsKeyRings, __self__).__init__(
            'ibm:index/kmsKeyRings:KmsKeyRings',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
            force_delete: Optional[pulumi.Input[_builtins.bool]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            key_ring_id: Optional[pulumi.Input[_builtins.str]] = None,
            kms_key_rings_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'KmsKeyRings':
        """
        Get an existing KmsKeyRings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private
        :param pulumi.Input[_builtins.bool] force_delete: (Deprecated) set to true to force delete this key ring. This allows key ring deletion as long as all keys inside have
               key state equals to 5 (destroyed). Keys are moved to the default key ring.
        :param pulumi.Input[_builtins.str] instance_id: Key protect Instance GUID
        :param pulumi.Input[_builtins.str] key_ring_id: User defined unique ID for the key ring
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _KmsKeyRingsState.__new__(_KmsKeyRingsState)

        __props__.__dict__["endpoint_type"] = endpoint_type
        __props__.__dict__["force_delete"] = force_delete
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["key_ring_id"] = key_ring_id
        __props__.__dict__["kms_key_rings_id"] = kms_key_rings_id
        return KmsKeyRings(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> pulumi.Output[_builtins.str]:
        """
        public or private
        """
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter(name="forceDelete")
    @_utilities.deprecated("""Deprecated""")
    def force_delete(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        (Deprecated) set to true to force delete this key ring. This allows key ring deletion as long as all keys inside have
        key state equals to 5 (destroyed). Keys are moved to the default key ring.
        """
        return pulumi.get(self, "force_delete")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Key protect Instance GUID
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="keyRingId")
    def key_ring_id(self) -> pulumi.Output[_builtins.str]:
        """
        User defined unique ID for the key ring
        """
        return pulumi.get(self, "key_ring_id")

    @_builtins.property
    @pulumi.getter(name="kmsKeyRingsId")
    def kms_key_rings_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "kms_key_rings_id")

