# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CosBackupPolicyArgs', 'CosBackupPolicy']

@pulumi.input_type
class CosBackupPolicyArgs:
    def __init__(__self__, *,
                 backup_type: pulumi.Input[_builtins.str],
                 bucket_crn: pulumi.Input[_builtins.str],
                 initial_delete_after_days: pulumi.Input[_builtins.float],
                 policy_name: pulumi.Input[_builtins.str],
                 target_backup_vault_crn: pulumi.Input[_builtins.str],
                 cos_backup_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['CosBackupPolicyTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a CosBackupPolicy resource.
        :param pulumi.Input[_builtins.str] backup_type: The type of backup to support.
        :param pulumi.Input[_builtins.str] bucket_crn: Bucket Crn of the source bucket.
        :param pulumi.Input[_builtins.float] initial_delete_after_days: Number of days after which the objects inside backup vault should be deleted.
        :param pulumi.Input[_builtins.str] policy_name: Name of the backup policy to be applied on the source bucket.
        :param pulumi.Input[_builtins.str] target_backup_vault_crn: The CRN for a COS BackupVault.
        """
        pulumi.set(__self__, "backup_type", backup_type)
        pulumi.set(__self__, "bucket_crn", bucket_crn)
        pulumi.set(__self__, "initial_delete_after_days", initial_delete_after_days)
        pulumi.set(__self__, "policy_name", policy_name)
        pulumi.set(__self__, "target_backup_vault_crn", target_backup_vault_crn)
        if cos_backup_policy_id is not None:
            pulumi.set(__self__, "cos_backup_policy_id", cos_backup_policy_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="backupType")
    def backup_type(self) -> pulumi.Input[_builtins.str]:
        """
        The type of backup to support.
        """
        return pulumi.get(self, "backup_type")

    @backup_type.setter
    def backup_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "backup_type", value)

    @_builtins.property
    @pulumi.getter(name="bucketCrn")
    def bucket_crn(self) -> pulumi.Input[_builtins.str]:
        """
        Bucket Crn of the source bucket.
        """
        return pulumi.get(self, "bucket_crn")

    @bucket_crn.setter
    def bucket_crn(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "bucket_crn", value)

    @_builtins.property
    @pulumi.getter(name="initialDeleteAfterDays")
    def initial_delete_after_days(self) -> pulumi.Input[_builtins.float]:
        """
        Number of days after which the objects inside backup vault should be deleted.
        """
        return pulumi.get(self, "initial_delete_after_days")

    @initial_delete_after_days.setter
    def initial_delete_after_days(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "initial_delete_after_days", value)

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> pulumi.Input[_builtins.str]:
        """
        Name of the backup policy to be applied on the source bucket.
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "policy_name", value)

    @_builtins.property
    @pulumi.getter(name="targetBackupVaultCrn")
    def target_backup_vault_crn(self) -> pulumi.Input[_builtins.str]:
        """
        The CRN for a COS BackupVault.
        """
        return pulumi.get(self, "target_backup_vault_crn")

    @target_backup_vault_crn.setter
    def target_backup_vault_crn(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "target_backup_vault_crn", value)

    @_builtins.property
    @pulumi.getter(name="cosBackupPolicyId")
    def cos_backup_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cos_backup_policy_id")

    @cos_backup_policy_id.setter
    def cos_backup_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cos_backup_policy_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['CosBackupPolicyTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['CosBackupPolicyTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _CosBackupPolicyState:
    def __init__(__self__, *,
                 backup_type: Optional[pulumi.Input[_builtins.str]] = None,
                 bucket_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 cos_backup_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 initial_delete_after_days: Optional[pulumi.Input[_builtins.float]] = None,
                 policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_name: Optional[pulumi.Input[_builtins.str]] = None,
                 target_backup_vault_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['CosBackupPolicyTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering CosBackupPolicy resources.
        :param pulumi.Input[_builtins.str] backup_type: The type of backup to support.
        :param pulumi.Input[_builtins.str] bucket_crn: Bucket Crn of the source bucket.
        :param pulumi.Input[_builtins.float] initial_delete_after_days: Number of days after which the objects inside backup vault should be deleted.
        :param pulumi.Input[_builtins.str] policy_id: Id of the backup policy applied on the source bucket
        :param pulumi.Input[_builtins.str] policy_name: Name of the backup policy to be applied on the source bucket.
        :param pulumi.Input[_builtins.str] target_backup_vault_crn: The CRN for a COS BackupVault.
        """
        if backup_type is not None:
            pulumi.set(__self__, "backup_type", backup_type)
        if bucket_crn is not None:
            pulumi.set(__self__, "bucket_crn", bucket_crn)
        if cos_backup_policy_id is not None:
            pulumi.set(__self__, "cos_backup_policy_id", cos_backup_policy_id)
        if initial_delete_after_days is not None:
            pulumi.set(__self__, "initial_delete_after_days", initial_delete_after_days)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)
        if target_backup_vault_crn is not None:
            pulumi.set(__self__, "target_backup_vault_crn", target_backup_vault_crn)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="backupType")
    def backup_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of backup to support.
        """
        return pulumi.get(self, "backup_type")

    @backup_type.setter
    def backup_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_type", value)

    @_builtins.property
    @pulumi.getter(name="bucketCrn")
    def bucket_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Bucket Crn of the source bucket.
        """
        return pulumi.get(self, "bucket_crn")

    @bucket_crn.setter
    def bucket_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bucket_crn", value)

    @_builtins.property
    @pulumi.getter(name="cosBackupPolicyId")
    def cos_backup_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cos_backup_policy_id")

    @cos_backup_policy_id.setter
    def cos_backup_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cos_backup_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="initialDeleteAfterDays")
    def initial_delete_after_days(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Number of days after which the objects inside backup vault should be deleted.
        """
        return pulumi.get(self, "initial_delete_after_days")

    @initial_delete_after_days.setter
    def initial_delete_after_days(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "initial_delete_after_days", value)

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Id of the backup policy applied on the source bucket
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_id", value)

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the backup policy to be applied on the source bucket.
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_name", value)

    @_builtins.property
    @pulumi.getter(name="targetBackupVaultCrn")
    def target_backup_vault_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN for a COS BackupVault.
        """
        return pulumi.get(self, "target_backup_vault_crn")

    @target_backup_vault_crn.setter
    def target_backup_vault_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_backup_vault_crn", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['CosBackupPolicyTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['CosBackupPolicyTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/cosBackupPolicy:CosBackupPolicy")
class CosBackupPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_type: Optional[pulumi.Input[_builtins.str]] = None,
                 bucket_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 cos_backup_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 initial_delete_after_days: Optional[pulumi.Input[_builtins.float]] = None,
                 policy_name: Optional[pulumi.Input[_builtins.str]] = None,
                 target_backup_vault_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['CosBackupPolicyTimeoutsArgs', 'CosBackupPolicyTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a CosBackupPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] backup_type: The type of backup to support.
        :param pulumi.Input[_builtins.str] bucket_crn: Bucket Crn of the source bucket.
        :param pulumi.Input[_builtins.float] initial_delete_after_days: Number of days after which the objects inside backup vault should be deleted.
        :param pulumi.Input[_builtins.str] policy_name: Name of the backup policy to be applied on the source bucket.
        :param pulumi.Input[_builtins.str] target_backup_vault_crn: The CRN for a COS BackupVault.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CosBackupPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CosBackupPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CosBackupPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CosBackupPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_type: Optional[pulumi.Input[_builtins.str]] = None,
                 bucket_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 cos_backup_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 initial_delete_after_days: Optional[pulumi.Input[_builtins.float]] = None,
                 policy_name: Optional[pulumi.Input[_builtins.str]] = None,
                 target_backup_vault_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['CosBackupPolicyTimeoutsArgs', 'CosBackupPolicyTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CosBackupPolicyArgs.__new__(CosBackupPolicyArgs)

            if backup_type is None and not opts.urn:
                raise TypeError("Missing required property 'backup_type'")
            __props__.__dict__["backup_type"] = backup_type
            if bucket_crn is None and not opts.urn:
                raise TypeError("Missing required property 'bucket_crn'")
            __props__.__dict__["bucket_crn"] = bucket_crn
            __props__.__dict__["cos_backup_policy_id"] = cos_backup_policy_id
            if initial_delete_after_days is None and not opts.urn:
                raise TypeError("Missing required property 'initial_delete_after_days'")
            __props__.__dict__["initial_delete_after_days"] = initial_delete_after_days
            if policy_name is None and not opts.urn:
                raise TypeError("Missing required property 'policy_name'")
            __props__.__dict__["policy_name"] = policy_name
            if target_backup_vault_crn is None and not opts.urn:
                raise TypeError("Missing required property 'target_backup_vault_crn'")
            __props__.__dict__["target_backup_vault_crn"] = target_backup_vault_crn
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["policy_id"] = None
        super(CosBackupPolicy, __self__).__init__(
            'ibm:index/cosBackupPolicy:CosBackupPolicy',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            backup_type: Optional[pulumi.Input[_builtins.str]] = None,
            bucket_crn: Optional[pulumi.Input[_builtins.str]] = None,
            cos_backup_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            initial_delete_after_days: Optional[pulumi.Input[_builtins.float]] = None,
            policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            policy_name: Optional[pulumi.Input[_builtins.str]] = None,
            target_backup_vault_crn: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['CosBackupPolicyTimeoutsArgs', 'CosBackupPolicyTimeoutsArgsDict']]] = None) -> 'CosBackupPolicy':
        """
        Get an existing CosBackupPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] backup_type: The type of backup to support.
        :param pulumi.Input[_builtins.str] bucket_crn: Bucket Crn of the source bucket.
        :param pulumi.Input[_builtins.float] initial_delete_after_days: Number of days after which the objects inside backup vault should be deleted.
        :param pulumi.Input[_builtins.str] policy_id: Id of the backup policy applied on the source bucket
        :param pulumi.Input[_builtins.str] policy_name: Name of the backup policy to be applied on the source bucket.
        :param pulumi.Input[_builtins.str] target_backup_vault_crn: The CRN for a COS BackupVault.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CosBackupPolicyState.__new__(_CosBackupPolicyState)

        __props__.__dict__["backup_type"] = backup_type
        __props__.__dict__["bucket_crn"] = bucket_crn
        __props__.__dict__["cos_backup_policy_id"] = cos_backup_policy_id
        __props__.__dict__["initial_delete_after_days"] = initial_delete_after_days
        __props__.__dict__["policy_id"] = policy_id
        __props__.__dict__["policy_name"] = policy_name
        __props__.__dict__["target_backup_vault_crn"] = target_backup_vault_crn
        __props__.__dict__["timeouts"] = timeouts
        return CosBackupPolicy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="backupType")
    def backup_type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of backup to support.
        """
        return pulumi.get(self, "backup_type")

    @_builtins.property
    @pulumi.getter(name="bucketCrn")
    def bucket_crn(self) -> pulumi.Output[_builtins.str]:
        """
        Bucket Crn of the source bucket.
        """
        return pulumi.get(self, "bucket_crn")

    @_builtins.property
    @pulumi.getter(name="cosBackupPolicyId")
    def cos_backup_policy_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cos_backup_policy_id")

    @_builtins.property
    @pulumi.getter(name="initialDeleteAfterDays")
    def initial_delete_after_days(self) -> pulumi.Output[_builtins.float]:
        """
        Number of days after which the objects inside backup vault should be deleted.
        """
        return pulumi.get(self, "initial_delete_after_days")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Output[_builtins.str]:
        """
        Id of the backup policy applied on the source bucket
        """
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the backup policy to be applied on the source bucket.
        """
        return pulumi.get(self, "policy_name")

    @_builtins.property
    @pulumi.getter(name="targetBackupVaultCrn")
    def target_backup_vault_crn(self) -> pulumi.Output[_builtins.str]:
        """
        The CRN for a COS BackupVault.
        """
        return pulumi.get(self, "target_backup_vault_crn")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.CosBackupPolicyTimeouts']]:
        return pulumi.get(self, "timeouts")

