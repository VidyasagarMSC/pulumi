# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ComputeAutoscaleGroupArgs', 'ComputeAutoscaleGroup']

@pulumi.input_type
class ComputeAutoscaleGroupArgs:
    def __init__(__self__, *,
                 cooldown: pulumi.Input[_builtins.float],
                 maximum_member_count: pulumi.Input[_builtins.float],
                 minimum_member_count: pulumi.Input[_builtins.float],
                 regional_group: pulumi.Input[_builtins.str],
                 termination_policy: pulumi.Input[_builtins.str],
                 virtual_guest_member_templates: pulumi.Input[Sequence[pulumi.Input['ComputeAutoscaleGroupVirtualGuestMemberTemplateArgs']]],
                 compute_autoscale_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 health_check: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_vlan_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 virtual_server_id: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a ComputeAutoscaleGroup resource.
        :param pulumi.Input[_builtins.float] cooldown: Cooldown value
        :param pulumi.Input[_builtins.float] maximum_member_count: Maximum member count
        :param pulumi.Input[_builtins.float] minimum_member_count: Minimum member count
        :param pulumi.Input[_builtins.str] regional_group: regional group
        :param pulumi.Input[_builtins.str] termination_policy: Termination policy
        :param pulumi.Input[Sequence[pulumi.Input['ComputeAutoscaleGroupVirtualGuestMemberTemplateArgs']]] virtual_guest_member_templates: Virtual guest member template
        :param pulumi.Input[_builtins.str] name: Name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] network_vlan_ids: List of network VLAN ids
        :param pulumi.Input[_builtins.float] port: Port number
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        :param pulumi.Input[_builtins.float] virtual_server_id: virtual server ID
        """
        pulumi.set(__self__, "cooldown", cooldown)
        pulumi.set(__self__, "maximum_member_count", maximum_member_count)
        pulumi.set(__self__, "minimum_member_count", minimum_member_count)
        pulumi.set(__self__, "regional_group", regional_group)
        pulumi.set(__self__, "termination_policy", termination_policy)
        pulumi.set(__self__, "virtual_guest_member_templates", virtual_guest_member_templates)
        if compute_autoscale_group_id is not None:
            pulumi.set(__self__, "compute_autoscale_group_id", compute_autoscale_group_id)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_vlan_ids is not None:
            pulumi.set(__self__, "network_vlan_ids", network_vlan_ids)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if virtual_server_id is not None:
            pulumi.set(__self__, "virtual_server_id", virtual_server_id)

    @_builtins.property
    @pulumi.getter
    def cooldown(self) -> pulumi.Input[_builtins.float]:
        """
        Cooldown value
        """
        return pulumi.get(self, "cooldown")

    @cooldown.setter
    def cooldown(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "cooldown", value)

    @_builtins.property
    @pulumi.getter(name="maximumMemberCount")
    def maximum_member_count(self) -> pulumi.Input[_builtins.float]:
        """
        Maximum member count
        """
        return pulumi.get(self, "maximum_member_count")

    @maximum_member_count.setter
    def maximum_member_count(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "maximum_member_count", value)

    @_builtins.property
    @pulumi.getter(name="minimumMemberCount")
    def minimum_member_count(self) -> pulumi.Input[_builtins.float]:
        """
        Minimum member count
        """
        return pulumi.get(self, "minimum_member_count")

    @minimum_member_count.setter
    def minimum_member_count(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "minimum_member_count", value)

    @_builtins.property
    @pulumi.getter(name="regionalGroup")
    def regional_group(self) -> pulumi.Input[_builtins.str]:
        """
        regional group
        """
        return pulumi.get(self, "regional_group")

    @regional_group.setter
    def regional_group(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "regional_group", value)

    @_builtins.property
    @pulumi.getter(name="terminationPolicy")
    def termination_policy(self) -> pulumi.Input[_builtins.str]:
        """
        Termination policy
        """
        return pulumi.get(self, "termination_policy")

    @termination_policy.setter
    def termination_policy(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "termination_policy", value)

    @_builtins.property
    @pulumi.getter(name="virtualGuestMemberTemplates")
    def virtual_guest_member_templates(self) -> pulumi.Input[Sequence[pulumi.Input['ComputeAutoscaleGroupVirtualGuestMemberTemplateArgs']]]:
        """
        Virtual guest member template
        """
        return pulumi.get(self, "virtual_guest_member_templates")

    @virtual_guest_member_templates.setter
    def virtual_guest_member_templates(self, value: pulumi.Input[Sequence[pulumi.Input['ComputeAutoscaleGroupVirtualGuestMemberTemplateArgs']]]):
        pulumi.set(self, "virtual_guest_member_templates", value)

    @_builtins.property
    @pulumi.getter(name="computeAutoscaleGroupId")
    def compute_autoscale_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compute_autoscale_group_id")

    @compute_autoscale_group_id.setter
    def compute_autoscale_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_autoscale_group_id", value)

    @_builtins.property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "health_check", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="networkVlanIds")
    def network_vlan_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        """
        List of network VLAN ids
        """
        return pulumi.get(self, "network_vlan_ids")

    @network_vlan_ids.setter
    def network_vlan_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "network_vlan_ids", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Port number
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="virtualServerId")
    def virtual_server_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        virtual server ID
        """
        return pulumi.get(self, "virtual_server_id")

    @virtual_server_id.setter
    def virtual_server_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "virtual_server_id", value)


@pulumi.input_type
class _ComputeAutoscaleGroupState:
    def __init__(__self__, *,
                 compute_autoscale_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cooldown: Optional[pulumi.Input[_builtins.float]] = None,
                 health_check: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 maximum_member_count: Optional[pulumi.Input[_builtins.float]] = None,
                 minimum_member_count: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_vlan_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 regional_group: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 termination_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 virtual_guest_member_templates: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeAutoscaleGroupVirtualGuestMemberTemplateArgs']]]] = None,
                 virtual_server_id: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering ComputeAutoscaleGroup resources.
        :param pulumi.Input[_builtins.float] cooldown: Cooldown value
        :param pulumi.Input[_builtins.float] maximum_member_count: Maximum member count
        :param pulumi.Input[_builtins.float] minimum_member_count: Minimum member count
        :param pulumi.Input[_builtins.str] name: Name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] network_vlan_ids: List of network VLAN ids
        :param pulumi.Input[_builtins.float] port: Port number
        :param pulumi.Input[_builtins.str] regional_group: regional group
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        :param pulumi.Input[_builtins.str] termination_policy: Termination policy
        :param pulumi.Input[Sequence[pulumi.Input['ComputeAutoscaleGroupVirtualGuestMemberTemplateArgs']]] virtual_guest_member_templates: Virtual guest member template
        :param pulumi.Input[_builtins.float] virtual_server_id: virtual server ID
        """
        if compute_autoscale_group_id is not None:
            pulumi.set(__self__, "compute_autoscale_group_id", compute_autoscale_group_id)
        if cooldown is not None:
            pulumi.set(__self__, "cooldown", cooldown)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if maximum_member_count is not None:
            pulumi.set(__self__, "maximum_member_count", maximum_member_count)
        if minimum_member_count is not None:
            pulumi.set(__self__, "minimum_member_count", minimum_member_count)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_vlan_ids is not None:
            pulumi.set(__self__, "network_vlan_ids", network_vlan_ids)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if regional_group is not None:
            pulumi.set(__self__, "regional_group", regional_group)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if termination_policy is not None:
            pulumi.set(__self__, "termination_policy", termination_policy)
        if virtual_guest_member_templates is not None:
            pulumi.set(__self__, "virtual_guest_member_templates", virtual_guest_member_templates)
        if virtual_server_id is not None:
            pulumi.set(__self__, "virtual_server_id", virtual_server_id)

    @_builtins.property
    @pulumi.getter(name="computeAutoscaleGroupId")
    def compute_autoscale_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compute_autoscale_group_id")

    @compute_autoscale_group_id.setter
    def compute_autoscale_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_autoscale_group_id", value)

    @_builtins.property
    @pulumi.getter
    def cooldown(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Cooldown value
        """
        return pulumi.get(self, "cooldown")

    @cooldown.setter
    def cooldown(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "cooldown", value)

    @_builtins.property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "health_check", value)

    @_builtins.property
    @pulumi.getter(name="maximumMemberCount")
    def maximum_member_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Maximum member count
        """
        return pulumi.get(self, "maximum_member_count")

    @maximum_member_count.setter
    def maximum_member_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "maximum_member_count", value)

    @_builtins.property
    @pulumi.getter(name="minimumMemberCount")
    def minimum_member_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Minimum member count
        """
        return pulumi.get(self, "minimum_member_count")

    @minimum_member_count.setter
    def minimum_member_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "minimum_member_count", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="networkVlanIds")
    def network_vlan_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        """
        List of network VLAN ids
        """
        return pulumi.get(self, "network_vlan_ids")

    @network_vlan_ids.setter
    def network_vlan_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "network_vlan_ids", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Port number
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter(name="regionalGroup")
    def regional_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        regional group
        """
        return pulumi.get(self, "regional_group")

    @regional_group.setter
    def regional_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "regional_group", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="terminationPolicy")
    def termination_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Termination policy
        """
        return pulumi.get(self, "termination_policy")

    @termination_policy.setter
    def termination_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "termination_policy", value)

    @_builtins.property
    @pulumi.getter(name="virtualGuestMemberTemplates")
    def virtual_guest_member_templates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComputeAutoscaleGroupVirtualGuestMemberTemplateArgs']]]]:
        """
        Virtual guest member template
        """
        return pulumi.get(self, "virtual_guest_member_templates")

    @virtual_guest_member_templates.setter
    def virtual_guest_member_templates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComputeAutoscaleGroupVirtualGuestMemberTemplateArgs']]]]):
        pulumi.set(self, "virtual_guest_member_templates", value)

    @_builtins.property
    @pulumi.getter(name="virtualServerId")
    def virtual_server_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        virtual server ID
        """
        return pulumi.get(self, "virtual_server_id")

    @virtual_server_id.setter
    def virtual_server_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "virtual_server_id", value)


@pulumi.type_token("ibm:index/computeAutoscaleGroup:ComputeAutoscaleGroup")
class ComputeAutoscaleGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compute_autoscale_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cooldown: Optional[pulumi.Input[_builtins.float]] = None,
                 health_check: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 maximum_member_count: Optional[pulumi.Input[_builtins.float]] = None,
                 minimum_member_count: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_vlan_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 regional_group: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 termination_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 virtual_guest_member_templates: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComputeAutoscaleGroupVirtualGuestMemberTemplateArgs', 'ComputeAutoscaleGroupVirtualGuestMemberTemplateArgsDict']]]]] = None,
                 virtual_server_id: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a ComputeAutoscaleGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] cooldown: Cooldown value
        :param pulumi.Input[_builtins.float] maximum_member_count: Maximum member count
        :param pulumi.Input[_builtins.float] minimum_member_count: Minimum member count
        :param pulumi.Input[_builtins.str] name: Name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] network_vlan_ids: List of network VLAN ids
        :param pulumi.Input[_builtins.float] port: Port number
        :param pulumi.Input[_builtins.str] regional_group: regional group
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        :param pulumi.Input[_builtins.str] termination_policy: Termination policy
        :param pulumi.Input[Sequence[pulumi.Input[Union['ComputeAutoscaleGroupVirtualGuestMemberTemplateArgs', 'ComputeAutoscaleGroupVirtualGuestMemberTemplateArgsDict']]]] virtual_guest_member_templates: Virtual guest member template
        :param pulumi.Input[_builtins.float] virtual_server_id: virtual server ID
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ComputeAutoscaleGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ComputeAutoscaleGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ComputeAutoscaleGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ComputeAutoscaleGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compute_autoscale_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cooldown: Optional[pulumi.Input[_builtins.float]] = None,
                 health_check: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 maximum_member_count: Optional[pulumi.Input[_builtins.float]] = None,
                 minimum_member_count: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_vlan_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 regional_group: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 termination_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 virtual_guest_member_templates: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComputeAutoscaleGroupVirtualGuestMemberTemplateArgs', 'ComputeAutoscaleGroupVirtualGuestMemberTemplateArgsDict']]]]] = None,
                 virtual_server_id: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ComputeAutoscaleGroupArgs.__new__(ComputeAutoscaleGroupArgs)

            __props__.__dict__["compute_autoscale_group_id"] = compute_autoscale_group_id
            if cooldown is None and not opts.urn:
                raise TypeError("Missing required property 'cooldown'")
            __props__.__dict__["cooldown"] = cooldown
            __props__.__dict__["health_check"] = health_check
            if maximum_member_count is None and not opts.urn:
                raise TypeError("Missing required property 'maximum_member_count'")
            __props__.__dict__["maximum_member_count"] = maximum_member_count
            if minimum_member_count is None and not opts.urn:
                raise TypeError("Missing required property 'minimum_member_count'")
            __props__.__dict__["minimum_member_count"] = minimum_member_count
            __props__.__dict__["name"] = name
            __props__.__dict__["network_vlan_ids"] = network_vlan_ids
            __props__.__dict__["port"] = port
            if regional_group is None and not opts.urn:
                raise TypeError("Missing required property 'regional_group'")
            __props__.__dict__["regional_group"] = regional_group
            __props__.__dict__["tags"] = tags
            if termination_policy is None and not opts.urn:
                raise TypeError("Missing required property 'termination_policy'")
            __props__.__dict__["termination_policy"] = termination_policy
            if virtual_guest_member_templates is None and not opts.urn:
                raise TypeError("Missing required property 'virtual_guest_member_templates'")
            __props__.__dict__["virtual_guest_member_templates"] = virtual_guest_member_templates
            __props__.__dict__["virtual_server_id"] = virtual_server_id
        super(ComputeAutoscaleGroup, __self__).__init__(
            'ibm:index/computeAutoscaleGroup:ComputeAutoscaleGroup',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            compute_autoscale_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            cooldown: Optional[pulumi.Input[_builtins.float]] = None,
            health_check: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            maximum_member_count: Optional[pulumi.Input[_builtins.float]] = None,
            minimum_member_count: Optional[pulumi.Input[_builtins.float]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            network_vlan_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
            port: Optional[pulumi.Input[_builtins.float]] = None,
            regional_group: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            termination_policy: Optional[pulumi.Input[_builtins.str]] = None,
            virtual_guest_member_templates: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ComputeAutoscaleGroupVirtualGuestMemberTemplateArgs', 'ComputeAutoscaleGroupVirtualGuestMemberTemplateArgsDict']]]]] = None,
            virtual_server_id: Optional[pulumi.Input[_builtins.float]] = None) -> 'ComputeAutoscaleGroup':
        """
        Get an existing ComputeAutoscaleGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] cooldown: Cooldown value
        :param pulumi.Input[_builtins.float] maximum_member_count: Maximum member count
        :param pulumi.Input[_builtins.float] minimum_member_count: Minimum member count
        :param pulumi.Input[_builtins.str] name: Name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] network_vlan_ids: List of network VLAN ids
        :param pulumi.Input[_builtins.float] port: Port number
        :param pulumi.Input[_builtins.str] regional_group: regional group
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        :param pulumi.Input[_builtins.str] termination_policy: Termination policy
        :param pulumi.Input[Sequence[pulumi.Input[Union['ComputeAutoscaleGroupVirtualGuestMemberTemplateArgs', 'ComputeAutoscaleGroupVirtualGuestMemberTemplateArgsDict']]]] virtual_guest_member_templates: Virtual guest member template
        :param pulumi.Input[_builtins.float] virtual_server_id: virtual server ID
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ComputeAutoscaleGroupState.__new__(_ComputeAutoscaleGroupState)

        __props__.__dict__["compute_autoscale_group_id"] = compute_autoscale_group_id
        __props__.__dict__["cooldown"] = cooldown
        __props__.__dict__["health_check"] = health_check
        __props__.__dict__["maximum_member_count"] = maximum_member_count
        __props__.__dict__["minimum_member_count"] = minimum_member_count
        __props__.__dict__["name"] = name
        __props__.__dict__["network_vlan_ids"] = network_vlan_ids
        __props__.__dict__["port"] = port
        __props__.__dict__["regional_group"] = regional_group
        __props__.__dict__["tags"] = tags
        __props__.__dict__["termination_policy"] = termination_policy
        __props__.__dict__["virtual_guest_member_templates"] = virtual_guest_member_templates
        __props__.__dict__["virtual_server_id"] = virtual_server_id
        return ComputeAutoscaleGroup(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="computeAutoscaleGroupId")
    def compute_autoscale_group_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "compute_autoscale_group_id")

    @_builtins.property
    @pulumi.getter
    def cooldown(self) -> pulumi.Output[_builtins.float]:
        """
        Cooldown value
        """
        return pulumi.get(self, "cooldown")

    @_builtins.property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        return pulumi.get(self, "health_check")

    @_builtins.property
    @pulumi.getter(name="maximumMemberCount")
    def maximum_member_count(self) -> pulumi.Output[_builtins.float]:
        """
        Maximum member count
        """
        return pulumi.get(self, "maximum_member_count")

    @_builtins.property
    @pulumi.getter(name="minimumMemberCount")
    def minimum_member_count(self) -> pulumi.Output[_builtins.float]:
        """
        Minimum member count
        """
        return pulumi.get(self, "minimum_member_count")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkVlanIds")
    def network_vlan_ids(self) -> pulumi.Output[Optional[Sequence[_builtins.float]]]:
        """
        List of network VLAN ids
        """
        return pulumi.get(self, "network_vlan_ids")

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Port number
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="regionalGroup")
    def regional_group(self) -> pulumi.Output[_builtins.str]:
        """
        regional group
        """
        return pulumi.get(self, "regional_group")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="terminationPolicy")
    def termination_policy(self) -> pulumi.Output[_builtins.str]:
        """
        Termination policy
        """
        return pulumi.get(self, "termination_policy")

    @_builtins.property
    @pulumi.getter(name="virtualGuestMemberTemplates")
    def virtual_guest_member_templates(self) -> pulumi.Output[Sequence['outputs.ComputeAutoscaleGroupVirtualGuestMemberTemplate']]:
        """
        Virtual guest member template
        """
        return pulumi.get(self, "virtual_guest_member_templates")

    @_builtins.property
    @pulumi.getter(name="virtualServerId")
    def virtual_server_id(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        virtual server ID
        """
        return pulumi.get(self, "virtual_server_id")

