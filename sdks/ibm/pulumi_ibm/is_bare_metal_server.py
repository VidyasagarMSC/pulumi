# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsBareMetalServerArgs', 'IsBareMetalServer']

@pulumi.input_type
class IsBareMetalServerArgs:
    def __init__(__self__, *,
                 image: pulumi.Input[_builtins.str],
                 keys: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 profile: pulumi.Input[_builtins.str],
                 zone: pulumi.Input[_builtins.str],
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 bandwidth: Optional[pulumi.Input[_builtins.float]] = None,
                 delete_type: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_secure_boot: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_bare_metal_server_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_attachments: Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerNetworkAttachmentArgs']]]] = None,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerNetworkInterfaceArgs']]]] = None,
                 primary_network_attachment: Optional[pulumi.Input['IsBareMetalServerPrimaryNetworkAttachmentArgs']] = None,
                 primary_network_interface: Optional[pulumi.Input['IsBareMetalServerPrimaryNetworkInterfaceArgs']] = None,
                 reservation_affinities: Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerReservationAffinityArgs']]]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['IsBareMetalServerTimeoutsArgs']] = None,
                 trusted_platform_module: Optional[pulumi.Input['IsBareMetalServerTrustedPlatformModuleArgs']] = None,
                 user_data: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a IsBareMetalServer resource.
        :param pulumi.Input[_builtins.str] image: image id
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] keys: SSH key Ids for the bare metal server
        :param pulumi.Input[_builtins.str] profile: profile name
        :param pulumi.Input[_builtins.str] zone: Zone name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.str] action: This restart/start/stops a bare metal server.
        :param pulumi.Input[_builtins.float] bandwidth: The total bandwidth (in megabits per second)
        :param pulumi.Input[_builtins.str] delete_type: Enables stopping type of the bare metal server before deleting
        :param pulumi.Input[_builtins.bool] enable_secure_boot: Indicates whether secure boot is enabled. If enabled, the image must support secure boot or the server will fail to
               boot.
        :param pulumi.Input[_builtins.str] name: Bare metal server name
        :param pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerNetworkAttachmentArgs']]] network_attachments: The network attachments for this bare metal server, including the primary network attachment.
        :param pulumi.Input['IsBareMetalServerPrimaryNetworkAttachmentArgs'] primary_network_attachment: The primary network attachment.
        :param pulumi.Input['IsBareMetalServerPrimaryNetworkInterfaceArgs'] primary_network_interface: Primary Network interface info
        :param pulumi.Input[_builtins.str] resource_group: Resource group name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags for the Bare metal server
        :param pulumi.Input[_builtins.str] user_data: User data given for the bare metal server
        :param pulumi.Input[_builtins.str] vpc: The VPC the bare metal server is to be a part of
        """
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "keys", keys)
        pulumi.set(__self__, "profile", profile)
        pulumi.set(__self__, "zone", zone)
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if delete_type is not None:
            pulumi.set(__self__, "delete_type", delete_type)
        if enable_secure_boot is not None:
            pulumi.set(__self__, "enable_secure_boot", enable_secure_boot)
        if is_bare_metal_server_id is not None:
            pulumi.set(__self__, "is_bare_metal_server_id", is_bare_metal_server_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_attachments is not None:
            pulumi.set(__self__, "network_attachments", network_attachments)
        if network_interfaces is not None:
            pulumi.set(__self__, "network_interfaces", network_interfaces)
        if primary_network_attachment is not None:
            pulumi.set(__self__, "primary_network_attachment", primary_network_attachment)
        if primary_network_interface is not None:
            pulumi.set(__self__, "primary_network_interface", primary_network_interface)
        if reservation_affinities is not None:
            pulumi.set(__self__, "reservation_affinities", reservation_affinities)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if trusted_platform_module is not None:
            pulumi.set(__self__, "trusted_platform_module", trusted_platform_module)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)
        if vpc is not None:
            pulumi.set(__self__, "vpc", vpc)

    @_builtins.property
    @pulumi.getter
    def image(self) -> pulumi.Input[_builtins.str]:
        """
        image id
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "image", value)

    @_builtins.property
    @pulumi.getter
    def keys(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        SSH key Ids for the bare metal server
        """
        return pulumi.get(self, "keys")

    @keys.setter
    def keys(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "keys", value)

    @_builtins.property
    @pulumi.getter
    def profile(self) -> pulumi.Input[_builtins.str]:
        """
        profile name
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "profile", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> pulumi.Input[_builtins.str]:
        """
        Zone name
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "zone", value)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        This restart/start/stops a bare metal server.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The total bandwidth (in megabits per second)
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "bandwidth", value)

    @_builtins.property
    @pulumi.getter(name="deleteType")
    def delete_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Enables stopping type of the bare metal server before deleting
        """
        return pulumi.get(self, "delete_type")

    @delete_type.setter
    def delete_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "delete_type", value)

    @_builtins.property
    @pulumi.getter(name="enableSecureBoot")
    def enable_secure_boot(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether secure boot is enabled. If enabled, the image must support secure boot or the server will fail to
        boot.
        """
        return pulumi.get(self, "enable_secure_boot")

    @enable_secure_boot.setter
    def enable_secure_boot(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_secure_boot", value)

    @_builtins.property
    @pulumi.getter(name="isBareMetalServerId")
    def is_bare_metal_server_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_bare_metal_server_id")

    @is_bare_metal_server_id.setter
    def is_bare_metal_server_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_bare_metal_server_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Bare metal server name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="networkAttachments")
    def network_attachments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerNetworkAttachmentArgs']]]]:
        """
        The network attachments for this bare metal server, including the primary network attachment.
        """
        return pulumi.get(self, "network_attachments")

    @network_attachments.setter
    def network_attachments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerNetworkAttachmentArgs']]]]):
        pulumi.set(self, "network_attachments", value)

    @_builtins.property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerNetworkInterfaceArgs']]]]:
        return pulumi.get(self, "network_interfaces")

    @network_interfaces.setter
    def network_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerNetworkInterfaceArgs']]]]):
        pulumi.set(self, "network_interfaces", value)

    @_builtins.property
    @pulumi.getter(name="primaryNetworkAttachment")
    def primary_network_attachment(self) -> Optional[pulumi.Input['IsBareMetalServerPrimaryNetworkAttachmentArgs']]:
        """
        The primary network attachment.
        """
        return pulumi.get(self, "primary_network_attachment")

    @primary_network_attachment.setter
    def primary_network_attachment(self, value: Optional[pulumi.Input['IsBareMetalServerPrimaryNetworkAttachmentArgs']]):
        pulumi.set(self, "primary_network_attachment", value)

    @_builtins.property
    @pulumi.getter(name="primaryNetworkInterface")
    def primary_network_interface(self) -> Optional[pulumi.Input['IsBareMetalServerPrimaryNetworkInterfaceArgs']]:
        """
        Primary Network interface info
        """
        return pulumi.get(self, "primary_network_interface")

    @primary_network_interface.setter
    def primary_network_interface(self, value: Optional[pulumi.Input['IsBareMetalServerPrimaryNetworkInterfaceArgs']]):
        pulumi.set(self, "primary_network_interface", value)

    @_builtins.property
    @pulumi.getter(name="reservationAffinities")
    def reservation_affinities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerReservationAffinityArgs']]]]:
        return pulumi.get(self, "reservation_affinities")

    @reservation_affinities.setter
    def reservation_affinities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerReservationAffinityArgs']]]]):
        pulumi.set(self, "reservation_affinities", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource group name
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Tags for the Bare metal server
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsBareMetalServerTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsBareMetalServerTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="trustedPlatformModule")
    def trusted_platform_module(self) -> Optional[pulumi.Input['IsBareMetalServerTrustedPlatformModuleArgs']]:
        return pulumi.get(self, "trusted_platform_module")

    @trusted_platform_module.setter
    def trusted_platform_module(self, value: Optional[pulumi.Input['IsBareMetalServerTrustedPlatformModuleArgs']]):
        pulumi.set(self, "trusted_platform_module", value)

    @_builtins.property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        User data given for the bare metal server
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_data", value)

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The VPC the bare metal server is to be a part of
        """
        return pulumi.get(self, "vpc")

    @vpc.setter
    def vpc(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc", value)


@pulumi.input_type
class _IsBareMetalServerState:
    def __init__(__self__, *,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 bandwidth: Optional[pulumi.Input[_builtins.float]] = None,
                 boot_target: Optional[pulumi.Input[_builtins.str]] = None,
                 cpus: Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerCpusArgs']]]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_type: Optional[pulumi.Input[_builtins.str]] = None,
                 disks: Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerDiskArgs']]]] = None,
                 enable_secure_boot: Optional[pulumi.Input[_builtins.bool]] = None,
                 firmware_update_type_available: Optional[pulumi.Input[_builtins.str]] = None,
                 health_reasons: Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerHealthReasonArgs']]]] = None,
                 health_state: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 image: Optional[pulumi.Input[_builtins.str]] = None,
                 is_bare_metal_server_id: Optional[pulumi.Input[_builtins.str]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 memory: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_attachments: Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerNetworkAttachmentArgs']]]] = None,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerNetworkInterfaceArgs']]]] = None,
                 primary_network_attachment: Optional[pulumi.Input['IsBareMetalServerPrimaryNetworkAttachmentArgs']] = None,
                 primary_network_interface: Optional[pulumi.Input['IsBareMetalServerPrimaryNetworkInterfaceArgs']] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 reservation_affinities: Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerReservationAffinityArgs']]]] = None,
                 reservations: Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerReservationArgs']]]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 status_reasons: Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerStatusReasonArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['IsBareMetalServerTimeoutsArgs']] = None,
                 trusted_platform_module: Optional[pulumi.Input['IsBareMetalServerTrustedPlatformModuleArgs']] = None,
                 user_data: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc: Optional[pulumi.Input[_builtins.str]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsBareMetalServer resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.str] action: This restart/start/stops a bare metal server.
        :param pulumi.Input[_builtins.float] bandwidth: The total bandwidth (in megabits per second)
        :param pulumi.Input[_builtins.str] boot_target: The unique identifier for this bare metal server disk
        :param pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerCpusArgs']]] cpus: The bare metal server CPU configuration
        :param pulumi.Input[_builtins.str] crn: The CRN for this bare metal server
        :param pulumi.Input[_builtins.str] delete_type: Enables stopping type of the bare metal server before deleting
        :param pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerDiskArgs']]] disks: The disks for this bare metal server, including any disks that are associated with the boot_target.
        :param pulumi.Input[_builtins.bool] enable_secure_boot: Indicates whether secure boot is enabled. If enabled, the image must support secure boot or the server will fail to
               boot.
        :param pulumi.Input[_builtins.str] firmware_update_type_available: The type of firmware update available
        :param pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerHealthReasonArgs']]] health_reasons: The reasons for the current health_state (if any).
        :param pulumi.Input[_builtins.str] health_state: The health of this resource
        :param pulumi.Input[_builtins.str] href: The URL for this bare metal server
        :param pulumi.Input[_builtins.str] image: image id
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] keys: SSH key Ids for the bare metal server
        :param pulumi.Input[_builtins.float] memory: The amount of memory, truncated to whole gibibytes
        :param pulumi.Input[_builtins.str] name: Bare metal server name
        :param pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerNetworkAttachmentArgs']]] network_attachments: The network attachments for this bare metal server, including the primary network attachment.
        :param pulumi.Input['IsBareMetalServerPrimaryNetworkAttachmentArgs'] primary_network_attachment: The primary network attachment.
        :param pulumi.Input['IsBareMetalServerPrimaryNetworkInterfaceArgs'] primary_network_interface: Primary Network interface info
        :param pulumi.Input[_builtins.str] profile: profile name
        :param pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerReservationArgs']]] reservations: The reservation used by this bare metal server
        :param pulumi.Input[_builtins.str] resource_group: Resource group name
        :param pulumi.Input[_builtins.str] resource_type: Resource type name
        :param pulumi.Input[_builtins.str] status: Bare metal server status
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags for the Bare metal server
        :param pulumi.Input[_builtins.str] user_data: User data given for the bare metal server
        :param pulumi.Input[_builtins.str] vpc: The VPC the bare metal server is to be a part of
        :param pulumi.Input[_builtins.str] zone: Zone name
        """
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if boot_target is not None:
            pulumi.set(__self__, "boot_target", boot_target)
        if cpus is not None:
            pulumi.set(__self__, "cpus", cpus)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if delete_type is not None:
            pulumi.set(__self__, "delete_type", delete_type)
        if disks is not None:
            pulumi.set(__self__, "disks", disks)
        if enable_secure_boot is not None:
            pulumi.set(__self__, "enable_secure_boot", enable_secure_boot)
        if firmware_update_type_available is not None:
            pulumi.set(__self__, "firmware_update_type_available", firmware_update_type_available)
        if health_reasons is not None:
            pulumi.set(__self__, "health_reasons", health_reasons)
        if health_state is not None:
            pulumi.set(__self__, "health_state", health_state)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if is_bare_metal_server_id is not None:
            pulumi.set(__self__, "is_bare_metal_server_id", is_bare_metal_server_id)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_attachments is not None:
            pulumi.set(__self__, "network_attachments", network_attachments)
        if network_interfaces is not None:
            pulumi.set(__self__, "network_interfaces", network_interfaces)
        if primary_network_attachment is not None:
            pulumi.set(__self__, "primary_network_attachment", primary_network_attachment)
        if primary_network_interface is not None:
            pulumi.set(__self__, "primary_network_interface", primary_network_interface)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if reservation_affinities is not None:
            pulumi.set(__self__, "reservation_affinities", reservation_affinities)
        if reservations is not None:
            pulumi.set(__self__, "reservations", reservations)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_reasons is not None:
            pulumi.set(__self__, "status_reasons", status_reasons)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if trusted_platform_module is not None:
            pulumi.set(__self__, "trusted_platform_module", trusted_platform_module)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)
        if vpc is not None:
            pulumi.set(__self__, "vpc", vpc)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        This restart/start/stops a bare metal server.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The total bandwidth (in megabits per second)
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "bandwidth", value)

    @_builtins.property
    @pulumi.getter(name="bootTarget")
    def boot_target(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier for this bare metal server disk
        """
        return pulumi.get(self, "boot_target")

    @boot_target.setter
    def boot_target(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "boot_target", value)

    @_builtins.property
    @pulumi.getter
    def cpus(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerCpusArgs']]]]:
        """
        The bare metal server CPU configuration
        """
        return pulumi.get(self, "cpus")

    @cpus.setter
    def cpus(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerCpusArgs']]]]):
        pulumi.set(self, "cpus", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN for this bare metal server
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="deleteType")
    def delete_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Enables stopping type of the bare metal server before deleting
        """
        return pulumi.get(self, "delete_type")

    @delete_type.setter
    def delete_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "delete_type", value)

    @_builtins.property
    @pulumi.getter
    def disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerDiskArgs']]]]:
        """
        The disks for this bare metal server, including any disks that are associated with the boot_target.
        """
        return pulumi.get(self, "disks")

    @disks.setter
    def disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerDiskArgs']]]]):
        pulumi.set(self, "disks", value)

    @_builtins.property
    @pulumi.getter(name="enableSecureBoot")
    def enable_secure_boot(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether secure boot is enabled. If enabled, the image must support secure boot or the server will fail to
        boot.
        """
        return pulumi.get(self, "enable_secure_boot")

    @enable_secure_boot.setter
    def enable_secure_boot(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_secure_boot", value)

    @_builtins.property
    @pulumi.getter(name="firmwareUpdateTypeAvailable")
    def firmware_update_type_available(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of firmware update available
        """
        return pulumi.get(self, "firmware_update_type_available")

    @firmware_update_type_available.setter
    def firmware_update_type_available(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "firmware_update_type_available", value)

    @_builtins.property
    @pulumi.getter(name="healthReasons")
    def health_reasons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerHealthReasonArgs']]]]:
        """
        The reasons for the current health_state (if any).
        """
        return pulumi.get(self, "health_reasons")

    @health_reasons.setter
    def health_reasons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerHealthReasonArgs']]]]):
        pulumi.set(self, "health_reasons", value)

    @_builtins.property
    @pulumi.getter(name="healthState")
    def health_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The health of this resource
        """
        return pulumi.get(self, "health_state")

    @health_state.setter
    def health_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "health_state", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL for this bare metal server
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        image id
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image", value)

    @_builtins.property
    @pulumi.getter(name="isBareMetalServerId")
    def is_bare_metal_server_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_bare_metal_server_id")

    @is_bare_metal_server_id.setter
    def is_bare_metal_server_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_bare_metal_server_id", value)

    @_builtins.property
    @pulumi.getter
    def keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        SSH key Ids for the bare metal server
        """
        return pulumi.get(self, "keys")

    @keys.setter
    def keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "keys", value)

    @_builtins.property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The amount of memory, truncated to whole gibibytes
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "memory", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Bare metal server name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="networkAttachments")
    def network_attachments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerNetworkAttachmentArgs']]]]:
        """
        The network attachments for this bare metal server, including the primary network attachment.
        """
        return pulumi.get(self, "network_attachments")

    @network_attachments.setter
    def network_attachments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerNetworkAttachmentArgs']]]]):
        pulumi.set(self, "network_attachments", value)

    @_builtins.property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerNetworkInterfaceArgs']]]]:
        return pulumi.get(self, "network_interfaces")

    @network_interfaces.setter
    def network_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerNetworkInterfaceArgs']]]]):
        pulumi.set(self, "network_interfaces", value)

    @_builtins.property
    @pulumi.getter(name="primaryNetworkAttachment")
    def primary_network_attachment(self) -> Optional[pulumi.Input['IsBareMetalServerPrimaryNetworkAttachmentArgs']]:
        """
        The primary network attachment.
        """
        return pulumi.get(self, "primary_network_attachment")

    @primary_network_attachment.setter
    def primary_network_attachment(self, value: Optional[pulumi.Input['IsBareMetalServerPrimaryNetworkAttachmentArgs']]):
        pulumi.set(self, "primary_network_attachment", value)

    @_builtins.property
    @pulumi.getter(name="primaryNetworkInterface")
    def primary_network_interface(self) -> Optional[pulumi.Input['IsBareMetalServerPrimaryNetworkInterfaceArgs']]:
        """
        Primary Network interface info
        """
        return pulumi.get(self, "primary_network_interface")

    @primary_network_interface.setter
    def primary_network_interface(self, value: Optional[pulumi.Input['IsBareMetalServerPrimaryNetworkInterfaceArgs']]):
        pulumi.set(self, "primary_network_interface", value)

    @_builtins.property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        profile name
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "profile", value)

    @_builtins.property
    @pulumi.getter(name="reservationAffinities")
    def reservation_affinities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerReservationAffinityArgs']]]]:
        return pulumi.get(self, "reservation_affinities")

    @reservation_affinities.setter
    def reservation_affinities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerReservationAffinityArgs']]]]):
        pulumi.set(self, "reservation_affinities", value)

    @_builtins.property
    @pulumi.getter
    def reservations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerReservationArgs']]]]:
        """
        The reservation used by this bare metal server
        """
        return pulumi.get(self, "reservations")

    @reservations.setter
    def reservations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerReservationArgs']]]]):
        pulumi.set(self, "reservations", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource group name
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource type name
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Bare metal server status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerStatusReasonArgs']]]]:
        return pulumi.get(self, "status_reasons")

    @status_reasons.setter
    def status_reasons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsBareMetalServerStatusReasonArgs']]]]):
        pulumi.set(self, "status_reasons", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Tags for the Bare metal server
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsBareMetalServerTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsBareMetalServerTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="trustedPlatformModule")
    def trusted_platform_module(self) -> Optional[pulumi.Input['IsBareMetalServerTrustedPlatformModuleArgs']]:
        return pulumi.get(self, "trusted_platform_module")

    @trusted_platform_module.setter
    def trusted_platform_module(self, value: Optional[pulumi.Input['IsBareMetalServerTrustedPlatformModuleArgs']]):
        pulumi.set(self, "trusted_platform_module", value)

    @_builtins.property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        User data given for the bare metal server
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_data", value)

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The VPC the bare metal server is to be a part of
        """
        return pulumi.get(self, "vpc")

    @vpc.setter
    def vpc(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Zone name
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zone", value)


@pulumi.type_token("ibm:index/isBareMetalServer:IsBareMetalServer")
class IsBareMetalServer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 bandwidth: Optional[pulumi.Input[_builtins.float]] = None,
                 delete_type: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_secure_boot: Optional[pulumi.Input[_builtins.bool]] = None,
                 image: Optional[pulumi.Input[_builtins.str]] = None,
                 is_bare_metal_server_id: Optional[pulumi.Input[_builtins.str]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsBareMetalServerNetworkAttachmentArgs', 'IsBareMetalServerNetworkAttachmentArgsDict']]]]] = None,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsBareMetalServerNetworkInterfaceArgs', 'IsBareMetalServerNetworkInterfaceArgsDict']]]]] = None,
                 primary_network_attachment: Optional[pulumi.Input[Union['IsBareMetalServerPrimaryNetworkAttachmentArgs', 'IsBareMetalServerPrimaryNetworkAttachmentArgsDict']]] = None,
                 primary_network_interface: Optional[pulumi.Input[Union['IsBareMetalServerPrimaryNetworkInterfaceArgs', 'IsBareMetalServerPrimaryNetworkInterfaceArgsDict']]] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 reservation_affinities: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsBareMetalServerReservationAffinityArgs', 'IsBareMetalServerReservationAffinityArgsDict']]]]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsBareMetalServerTimeoutsArgs', 'IsBareMetalServerTimeoutsArgsDict']]] = None,
                 trusted_platform_module: Optional[pulumi.Input[Union['IsBareMetalServerTrustedPlatformModuleArgs', 'IsBareMetalServerTrustedPlatformModuleArgsDict']]] = None,
                 user_data: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc: Optional[pulumi.Input[_builtins.str]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IsBareMetalServer resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.str] action: This restart/start/stops a bare metal server.
        :param pulumi.Input[_builtins.float] bandwidth: The total bandwidth (in megabits per second)
        :param pulumi.Input[_builtins.str] delete_type: Enables stopping type of the bare metal server before deleting
        :param pulumi.Input[_builtins.bool] enable_secure_boot: Indicates whether secure boot is enabled. If enabled, the image must support secure boot or the server will fail to
               boot.
        :param pulumi.Input[_builtins.str] image: image id
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] keys: SSH key Ids for the bare metal server
        :param pulumi.Input[_builtins.str] name: Bare metal server name
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsBareMetalServerNetworkAttachmentArgs', 'IsBareMetalServerNetworkAttachmentArgsDict']]]] network_attachments: The network attachments for this bare metal server, including the primary network attachment.
        :param pulumi.Input[Union['IsBareMetalServerPrimaryNetworkAttachmentArgs', 'IsBareMetalServerPrimaryNetworkAttachmentArgsDict']] primary_network_attachment: The primary network attachment.
        :param pulumi.Input[Union['IsBareMetalServerPrimaryNetworkInterfaceArgs', 'IsBareMetalServerPrimaryNetworkInterfaceArgsDict']] primary_network_interface: Primary Network interface info
        :param pulumi.Input[_builtins.str] profile: profile name
        :param pulumi.Input[_builtins.str] resource_group: Resource group name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags for the Bare metal server
        :param pulumi.Input[_builtins.str] user_data: User data given for the bare metal server
        :param pulumi.Input[_builtins.str] vpc: The VPC the bare metal server is to be a part of
        :param pulumi.Input[_builtins.str] zone: Zone name
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsBareMetalServerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsBareMetalServer resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsBareMetalServerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsBareMetalServerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 bandwidth: Optional[pulumi.Input[_builtins.float]] = None,
                 delete_type: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_secure_boot: Optional[pulumi.Input[_builtins.bool]] = None,
                 image: Optional[pulumi.Input[_builtins.str]] = None,
                 is_bare_metal_server_id: Optional[pulumi.Input[_builtins.str]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsBareMetalServerNetworkAttachmentArgs', 'IsBareMetalServerNetworkAttachmentArgsDict']]]]] = None,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsBareMetalServerNetworkInterfaceArgs', 'IsBareMetalServerNetworkInterfaceArgsDict']]]]] = None,
                 primary_network_attachment: Optional[pulumi.Input[Union['IsBareMetalServerPrimaryNetworkAttachmentArgs', 'IsBareMetalServerPrimaryNetworkAttachmentArgsDict']]] = None,
                 primary_network_interface: Optional[pulumi.Input[Union['IsBareMetalServerPrimaryNetworkInterfaceArgs', 'IsBareMetalServerPrimaryNetworkInterfaceArgsDict']]] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 reservation_affinities: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsBareMetalServerReservationAffinityArgs', 'IsBareMetalServerReservationAffinityArgsDict']]]]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsBareMetalServerTimeoutsArgs', 'IsBareMetalServerTimeoutsArgsDict']]] = None,
                 trusted_platform_module: Optional[pulumi.Input[Union['IsBareMetalServerTrustedPlatformModuleArgs', 'IsBareMetalServerTrustedPlatformModuleArgsDict']]] = None,
                 user_data: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc: Optional[pulumi.Input[_builtins.str]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsBareMetalServerArgs.__new__(IsBareMetalServerArgs)

            __props__.__dict__["access_tags"] = access_tags
            __props__.__dict__["action"] = action
            __props__.__dict__["bandwidth"] = bandwidth
            __props__.__dict__["delete_type"] = delete_type
            __props__.__dict__["enable_secure_boot"] = enable_secure_boot
            if image is None and not opts.urn:
                raise TypeError("Missing required property 'image'")
            __props__.__dict__["image"] = image
            __props__.__dict__["is_bare_metal_server_id"] = is_bare_metal_server_id
            if keys is None and not opts.urn:
                raise TypeError("Missing required property 'keys'")
            __props__.__dict__["keys"] = keys
            __props__.__dict__["name"] = name
            __props__.__dict__["network_attachments"] = network_attachments
            __props__.__dict__["network_interfaces"] = network_interfaces
            __props__.__dict__["primary_network_attachment"] = primary_network_attachment
            __props__.__dict__["primary_network_interface"] = primary_network_interface
            if profile is None and not opts.urn:
                raise TypeError("Missing required property 'profile'")
            __props__.__dict__["profile"] = profile
            __props__.__dict__["reservation_affinities"] = reservation_affinities
            __props__.__dict__["resource_group"] = resource_group
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["trusted_platform_module"] = trusted_platform_module
            __props__.__dict__["user_data"] = user_data
            __props__.__dict__["vpc"] = vpc
            if zone is None and not opts.urn:
                raise TypeError("Missing required property 'zone'")
            __props__.__dict__["zone"] = zone
            __props__.__dict__["boot_target"] = None
            __props__.__dict__["cpus"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["disks"] = None
            __props__.__dict__["firmware_update_type_available"] = None
            __props__.__dict__["health_reasons"] = None
            __props__.__dict__["health_state"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["memory"] = None
            __props__.__dict__["reservations"] = None
            __props__.__dict__["resource_type"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["status_reasons"] = None
        super(IsBareMetalServer, __self__).__init__(
            'ibm:index/isBareMetalServer:IsBareMetalServer',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            action: Optional[pulumi.Input[_builtins.str]] = None,
            bandwidth: Optional[pulumi.Input[_builtins.float]] = None,
            boot_target: Optional[pulumi.Input[_builtins.str]] = None,
            cpus: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsBareMetalServerCpusArgs', 'IsBareMetalServerCpusArgsDict']]]]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            delete_type: Optional[pulumi.Input[_builtins.str]] = None,
            disks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsBareMetalServerDiskArgs', 'IsBareMetalServerDiskArgsDict']]]]] = None,
            enable_secure_boot: Optional[pulumi.Input[_builtins.bool]] = None,
            firmware_update_type_available: Optional[pulumi.Input[_builtins.str]] = None,
            health_reasons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsBareMetalServerHealthReasonArgs', 'IsBareMetalServerHealthReasonArgsDict']]]]] = None,
            health_state: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            image: Optional[pulumi.Input[_builtins.str]] = None,
            is_bare_metal_server_id: Optional[pulumi.Input[_builtins.str]] = None,
            keys: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            memory: Optional[pulumi.Input[_builtins.float]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            network_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsBareMetalServerNetworkAttachmentArgs', 'IsBareMetalServerNetworkAttachmentArgsDict']]]]] = None,
            network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsBareMetalServerNetworkInterfaceArgs', 'IsBareMetalServerNetworkInterfaceArgsDict']]]]] = None,
            primary_network_attachment: Optional[pulumi.Input[Union['IsBareMetalServerPrimaryNetworkAttachmentArgs', 'IsBareMetalServerPrimaryNetworkAttachmentArgsDict']]] = None,
            primary_network_interface: Optional[pulumi.Input[Union['IsBareMetalServerPrimaryNetworkInterfaceArgs', 'IsBareMetalServerPrimaryNetworkInterfaceArgsDict']]] = None,
            profile: Optional[pulumi.Input[_builtins.str]] = None,
            reservation_affinities: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsBareMetalServerReservationAffinityArgs', 'IsBareMetalServerReservationAffinityArgsDict']]]]] = None,
            reservations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsBareMetalServerReservationArgs', 'IsBareMetalServerReservationArgsDict']]]]] = None,
            resource_group: Optional[pulumi.Input[_builtins.str]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            status_reasons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsBareMetalServerStatusReasonArgs', 'IsBareMetalServerStatusReasonArgsDict']]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            timeouts: Optional[pulumi.Input[Union['IsBareMetalServerTimeoutsArgs', 'IsBareMetalServerTimeoutsArgsDict']]] = None,
            trusted_platform_module: Optional[pulumi.Input[Union['IsBareMetalServerTrustedPlatformModuleArgs', 'IsBareMetalServerTrustedPlatformModuleArgsDict']]] = None,
            user_data: Optional[pulumi.Input[_builtins.str]] = None,
            vpc: Optional[pulumi.Input[_builtins.str]] = None,
            zone: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsBareMetalServer':
        """
        Get an existing IsBareMetalServer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.str] action: This restart/start/stops a bare metal server.
        :param pulumi.Input[_builtins.float] bandwidth: The total bandwidth (in megabits per second)
        :param pulumi.Input[_builtins.str] boot_target: The unique identifier for this bare metal server disk
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsBareMetalServerCpusArgs', 'IsBareMetalServerCpusArgsDict']]]] cpus: The bare metal server CPU configuration
        :param pulumi.Input[_builtins.str] crn: The CRN for this bare metal server
        :param pulumi.Input[_builtins.str] delete_type: Enables stopping type of the bare metal server before deleting
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsBareMetalServerDiskArgs', 'IsBareMetalServerDiskArgsDict']]]] disks: The disks for this bare metal server, including any disks that are associated with the boot_target.
        :param pulumi.Input[_builtins.bool] enable_secure_boot: Indicates whether secure boot is enabled. If enabled, the image must support secure boot or the server will fail to
               boot.
        :param pulumi.Input[_builtins.str] firmware_update_type_available: The type of firmware update available
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsBareMetalServerHealthReasonArgs', 'IsBareMetalServerHealthReasonArgsDict']]]] health_reasons: The reasons for the current health_state (if any).
        :param pulumi.Input[_builtins.str] health_state: The health of this resource
        :param pulumi.Input[_builtins.str] href: The URL for this bare metal server
        :param pulumi.Input[_builtins.str] image: image id
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] keys: SSH key Ids for the bare metal server
        :param pulumi.Input[_builtins.float] memory: The amount of memory, truncated to whole gibibytes
        :param pulumi.Input[_builtins.str] name: Bare metal server name
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsBareMetalServerNetworkAttachmentArgs', 'IsBareMetalServerNetworkAttachmentArgsDict']]]] network_attachments: The network attachments for this bare metal server, including the primary network attachment.
        :param pulumi.Input[Union['IsBareMetalServerPrimaryNetworkAttachmentArgs', 'IsBareMetalServerPrimaryNetworkAttachmentArgsDict']] primary_network_attachment: The primary network attachment.
        :param pulumi.Input[Union['IsBareMetalServerPrimaryNetworkInterfaceArgs', 'IsBareMetalServerPrimaryNetworkInterfaceArgsDict']] primary_network_interface: Primary Network interface info
        :param pulumi.Input[_builtins.str] profile: profile name
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsBareMetalServerReservationArgs', 'IsBareMetalServerReservationArgsDict']]]] reservations: The reservation used by this bare metal server
        :param pulumi.Input[_builtins.str] resource_group: Resource group name
        :param pulumi.Input[_builtins.str] resource_type: Resource type name
        :param pulumi.Input[_builtins.str] status: Bare metal server status
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags for the Bare metal server
        :param pulumi.Input[_builtins.str] user_data: User data given for the bare metal server
        :param pulumi.Input[_builtins.str] vpc: The VPC the bare metal server is to be a part of
        :param pulumi.Input[_builtins.str] zone: Zone name
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsBareMetalServerState.__new__(_IsBareMetalServerState)

        __props__.__dict__["access_tags"] = access_tags
        __props__.__dict__["action"] = action
        __props__.__dict__["bandwidth"] = bandwidth
        __props__.__dict__["boot_target"] = boot_target
        __props__.__dict__["cpus"] = cpus
        __props__.__dict__["crn"] = crn
        __props__.__dict__["delete_type"] = delete_type
        __props__.__dict__["disks"] = disks
        __props__.__dict__["enable_secure_boot"] = enable_secure_boot
        __props__.__dict__["firmware_update_type_available"] = firmware_update_type_available
        __props__.__dict__["health_reasons"] = health_reasons
        __props__.__dict__["health_state"] = health_state
        __props__.__dict__["href"] = href
        __props__.__dict__["image"] = image
        __props__.__dict__["is_bare_metal_server_id"] = is_bare_metal_server_id
        __props__.__dict__["keys"] = keys
        __props__.__dict__["memory"] = memory
        __props__.__dict__["name"] = name
        __props__.__dict__["network_attachments"] = network_attachments
        __props__.__dict__["network_interfaces"] = network_interfaces
        __props__.__dict__["primary_network_attachment"] = primary_network_attachment
        __props__.__dict__["primary_network_interface"] = primary_network_interface
        __props__.__dict__["profile"] = profile
        __props__.__dict__["reservation_affinities"] = reservation_affinities
        __props__.__dict__["reservations"] = reservations
        __props__.__dict__["resource_group"] = resource_group
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["status"] = status
        __props__.__dict__["status_reasons"] = status_reasons
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["trusted_platform_module"] = trusted_platform_module
        __props__.__dict__["user_data"] = user_data
        __props__.__dict__["vpc"] = vpc
        __props__.__dict__["zone"] = zone
        return IsBareMetalServer(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        This restart/start/stops a bare metal server.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> pulumi.Output[_builtins.float]:
        """
        The total bandwidth (in megabits per second)
        """
        return pulumi.get(self, "bandwidth")

    @_builtins.property
    @pulumi.getter(name="bootTarget")
    def boot_target(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier for this bare metal server disk
        """
        return pulumi.get(self, "boot_target")

    @_builtins.property
    @pulumi.getter
    def cpus(self) -> pulumi.Output[Sequence['outputs.IsBareMetalServerCpus']]:
        """
        The bare metal server CPU configuration
        """
        return pulumi.get(self, "cpus")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The CRN for this bare metal server
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="deleteType")
    def delete_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Enables stopping type of the bare metal server before deleting
        """
        return pulumi.get(self, "delete_type")

    @_builtins.property
    @pulumi.getter
    def disks(self) -> pulumi.Output[Sequence['outputs.IsBareMetalServerDisk']]:
        """
        The disks for this bare metal server, including any disks that are associated with the boot_target.
        """
        return pulumi.get(self, "disks")

    @_builtins.property
    @pulumi.getter(name="enableSecureBoot")
    def enable_secure_boot(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether secure boot is enabled. If enabled, the image must support secure boot or the server will fail to
        boot.
        """
        return pulumi.get(self, "enable_secure_boot")

    @_builtins.property
    @pulumi.getter(name="firmwareUpdateTypeAvailable")
    def firmware_update_type_available(self) -> pulumi.Output[_builtins.str]:
        """
        The type of firmware update available
        """
        return pulumi.get(self, "firmware_update_type_available")

    @_builtins.property
    @pulumi.getter(name="healthReasons")
    def health_reasons(self) -> pulumi.Output[Sequence['outputs.IsBareMetalServerHealthReason']]:
        """
        The reasons for the current health_state (if any).
        """
        return pulumi.get(self, "health_reasons")

    @_builtins.property
    @pulumi.getter(name="healthState")
    def health_state(self) -> pulumi.Output[_builtins.str]:
        """
        The health of this resource
        """
        return pulumi.get(self, "health_state")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        The URL for this bare metal server
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def image(self) -> pulumi.Output[_builtins.str]:
        """
        image id
        """
        return pulumi.get(self, "image")

    @_builtins.property
    @pulumi.getter(name="isBareMetalServerId")
    def is_bare_metal_server_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_bare_metal_server_id")

    @_builtins.property
    @pulumi.getter
    def keys(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        SSH key Ids for the bare metal server
        """
        return pulumi.get(self, "keys")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> pulumi.Output[_builtins.float]:
        """
        The amount of memory, truncated to whole gibibytes
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Bare metal server name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkAttachments")
    def network_attachments(self) -> pulumi.Output[Optional[Sequence['outputs.IsBareMetalServerNetworkAttachment']]]:
        """
        The network attachments for this bare metal server, including the primary network attachment.
        """
        return pulumi.get(self, "network_attachments")

    @_builtins.property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> pulumi.Output[Optional[Sequence['outputs.IsBareMetalServerNetworkInterface']]]:
        return pulumi.get(self, "network_interfaces")

    @_builtins.property
    @pulumi.getter(name="primaryNetworkAttachment")
    def primary_network_attachment(self) -> pulumi.Output[Optional['outputs.IsBareMetalServerPrimaryNetworkAttachment']]:
        """
        The primary network attachment.
        """
        return pulumi.get(self, "primary_network_attachment")

    @_builtins.property
    @pulumi.getter(name="primaryNetworkInterface")
    def primary_network_interface(self) -> pulumi.Output[Optional['outputs.IsBareMetalServerPrimaryNetworkInterface']]:
        """
        Primary Network interface info
        """
        return pulumi.get(self, "primary_network_interface")

    @_builtins.property
    @pulumi.getter
    def profile(self) -> pulumi.Output[_builtins.str]:
        """
        profile name
        """
        return pulumi.get(self, "profile")

    @_builtins.property
    @pulumi.getter(name="reservationAffinities")
    def reservation_affinities(self) -> pulumi.Output[Optional[Sequence['outputs.IsBareMetalServerReservationAffinity']]]:
        return pulumi.get(self, "reservation_affinities")

    @_builtins.property
    @pulumi.getter
    def reservations(self) -> pulumi.Output[Sequence['outputs.IsBareMetalServerReservation']]:
        """
        The reservation used by this bare metal server
        """
        return pulumi.get(self, "reservations")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Output[_builtins.str]:
        """
        Resource group name
        """
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        Resource type name
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Bare metal server status
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> pulumi.Output[Sequence['outputs.IsBareMetalServerStatusReason']]:
        return pulumi.get(self, "status_reasons")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Tags for the Bare metal server
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IsBareMetalServerTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter(name="trustedPlatformModule")
    def trusted_platform_module(self) -> pulumi.Output[Optional['outputs.IsBareMetalServerTrustedPlatformModule']]:
        return pulumi.get(self, "trusted_platform_module")

    @_builtins.property
    @pulumi.getter(name="userData")
    def user_data(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        User data given for the bare metal server
        """
        return pulumi.get(self, "user_data")

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> pulumi.Output[_builtins.str]:
        """
        The VPC the bare metal server is to be a part of
        """
        return pulumi.get(self, "vpc")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> pulumi.Output[_builtins.str]:
        """
        Zone name
        """
        return pulumi.get(self, "zone")

