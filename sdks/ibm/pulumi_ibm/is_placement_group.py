# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsPlacementGroupArgs', 'IsPlacementGroup']

@pulumi.input_type
class IsPlacementGroupArgs:
    def __init__(__self__, *,
                 strategy: pulumi.Input[_builtins.str],
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 is_placement_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['IsPlacementGroupTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a IsPlacementGroup resource.
        :param pulumi.Input[_builtins.str] strategy: The strategy for this placement group- `host_spread`: place on different compute hosts- `power_spread`: place on compute
               hosts that use different power sourcesThe enumerated values for this property may expand in the future. When processing
               this property, check for and log unknown values. Optionally halt processing and surface the error, or bypass the
               placement group on which the unexpected strategy was encountered.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.str] name: The unique user-defined name for this placement group. If unspecified, the name will be a hyphenated list of
               randomly-selected words.
        :param pulumi.Input[_builtins.str] resource_group: The unique identifier of the resource group to use. If unspecified, the account's [default
               resourcegroup](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        """
        pulumi.set(__self__, "strategy", strategy)
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if is_placement_group_id is not None:
            pulumi.set(__self__, "is_placement_group_id", is_placement_group_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def strategy(self) -> pulumi.Input[_builtins.str]:
        """
        The strategy for this placement group- `host_spread`: place on different compute hosts- `power_spread`: place on compute
        hosts that use different power sourcesThe enumerated values for this property may expand in the future. When processing
        this property, check for and log unknown values. Optionally halt processing and surface the error, or bypass the
        placement group on which the unexpected strategy was encountered.
        """
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "strategy", value)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter(name="isPlacementGroupId")
    def is_placement_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_placement_group_id")

    @is_placement_group_id.setter
    def is_placement_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_placement_group_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique user-defined name for this placement group. If unspecified, the name will be a hyphenated list of
        randomly-selected words.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier of the resource group to use. If unspecified, the account's [default
        resourcegroup](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsPlacementGroupTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsPlacementGroupTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _IsPlacementGroupState:
    def __init__(__self__, *,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 is_placement_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 strategy: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['IsPlacementGroupTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering IsPlacementGroup resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.str] created_at: The date and time that the placement group was created.
        :param pulumi.Input[_builtins.str] crn: The CRN for this placement group.
        :param pulumi.Input[_builtins.str] href: The URL for this placement group.
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of the placement group.
        :param pulumi.Input[_builtins.str] name: The unique user-defined name for this placement group. If unspecified, the name will be a hyphenated list of
               randomly-selected words.
        :param pulumi.Input[_builtins.str] resource_group: The unique identifier of the resource group to use. If unspecified, the account's [default
               resourcegroup](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input[_builtins.str] strategy: The strategy for this placement group- `host_spread`: place on different compute hosts- `power_spread`: place on compute
               hosts that use different power sourcesThe enumerated values for this property may expand in the future. When processing
               this property, check for and log unknown values. Optionally halt processing and surface the error, or bypass the
               placement group on which the unexpected strategy was encountered.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        """
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if is_placement_group_id is not None:
            pulumi.set(__self__, "is_placement_group_id", is_placement_group_id)
        if lifecycle_state is not None:
            pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time that the placement group was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN for this placement group.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL for this placement group.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="isPlacementGroupId")
    def is_placement_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_placement_group_id")

    @is_placement_group_id.setter
    def is_placement_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_placement_group_id", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The lifecycle state of the placement group.
        """
        return pulumi.get(self, "lifecycle_state")

    @lifecycle_state.setter
    def lifecycle_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lifecycle_state", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique user-defined name for this placement group. If unspecified, the name will be a hyphenated list of
        randomly-selected words.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier of the resource group to use. If unspecified, the account's [default
        resourcegroup](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The strategy for this placement group- `host_spread`: place on different compute hosts- `power_spread`: place on compute
        hosts that use different power sourcesThe enumerated values for this property may expand in the future. When processing
        this property, check for and log unknown values. Optionally halt processing and surface the error, or bypass the
        placement group on which the unexpected strategy was encountered.
        """
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "strategy", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsPlacementGroupTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsPlacementGroupTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/isPlacementGroup:IsPlacementGroup")
class IsPlacementGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 is_placement_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 strategy: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsPlacementGroupTimeoutsArgs', 'IsPlacementGroupTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a IsPlacementGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.str] name: The unique user-defined name for this placement group. If unspecified, the name will be a hyphenated list of
               randomly-selected words.
        :param pulumi.Input[_builtins.str] resource_group: The unique identifier of the resource group to use. If unspecified, the account's [default
               resourcegroup](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
        :param pulumi.Input[_builtins.str] strategy: The strategy for this placement group- `host_spread`: place on different compute hosts- `power_spread`: place on compute
               hosts that use different power sourcesThe enumerated values for this property may expand in the future. When processing
               this property, check for and log unknown values. Optionally halt processing and surface the error, or bypass the
               placement group on which the unexpected strategy was encountered.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsPlacementGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsPlacementGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsPlacementGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsPlacementGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 is_placement_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 strategy: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsPlacementGroupTimeoutsArgs', 'IsPlacementGroupTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsPlacementGroupArgs.__new__(IsPlacementGroupArgs)

            __props__.__dict__["access_tags"] = access_tags
            __props__.__dict__["is_placement_group_id"] = is_placement_group_id
            __props__.__dict__["name"] = name
            __props__.__dict__["resource_group"] = resource_group
            if strategy is None and not opts.urn:
                raise TypeError("Missing required property 'strategy'")
            __props__.__dict__["strategy"] = strategy
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["created_at"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["lifecycle_state"] = None
            __props__.__dict__["resource_type"] = None
        super(IsPlacementGroup, __self__).__init__(
            'ibm:index/isPlacementGroup:IsPlacementGroup',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            is_placement_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group: Optional[pulumi.Input[_builtins.str]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            strategy: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            timeouts: Optional[pulumi.Input[Union['IsPlacementGroupTimeoutsArgs', 'IsPlacementGroupTimeoutsArgsDict']]] = None) -> 'IsPlacementGroup':
        """
        Get an existing IsPlacementGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.str] created_at: The date and time that the placement group was created.
        :param pulumi.Input[_builtins.str] crn: The CRN for this placement group.
        :param pulumi.Input[_builtins.str] href: The URL for this placement group.
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of the placement group.
        :param pulumi.Input[_builtins.str] name: The unique user-defined name for this placement group. If unspecified, the name will be a hyphenated list of
               randomly-selected words.
        :param pulumi.Input[_builtins.str] resource_group: The unique identifier of the resource group to use. If unspecified, the account's [default
               resourcegroup](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input[_builtins.str] strategy: The strategy for this placement group- `host_spread`: place on different compute hosts- `power_spread`: place on compute
               hosts that use different power sourcesThe enumerated values for this property may expand in the future. When processing
               this property, check for and log unknown values. Optionally halt processing and surface the error, or bypass the
               placement group on which the unexpected strategy was encountered.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsPlacementGroupState.__new__(_IsPlacementGroupState)

        __props__.__dict__["access_tags"] = access_tags
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["crn"] = crn
        __props__.__dict__["href"] = href
        __props__.__dict__["is_placement_group_id"] = is_placement_group_id
        __props__.__dict__["lifecycle_state"] = lifecycle_state
        __props__.__dict__["name"] = name
        __props__.__dict__["resource_group"] = resource_group
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["strategy"] = strategy
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timeouts"] = timeouts
        return IsPlacementGroup(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time that the placement group was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The CRN for this placement group.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        The URL for this placement group.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="isPlacementGroupId")
    def is_placement_group_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_placement_group_id")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> pulumi.Output[_builtins.str]:
        """
        The lifecycle state of the placement group.
        """
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The unique user-defined name for this placement group. If unspecified, the name will be a hyphenated list of
        randomly-selected words.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier of the resource group to use. If unspecified, the account's [default
        resourcegroup](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
        """
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def strategy(self) -> pulumi.Output[_builtins.str]:
        """
        The strategy for this placement group- `host_spread`: place on different compute hosts- `power_spread`: place on compute
        hosts that use different power sourcesThe enumerated values for this property may expand in the future. When processing
        this property, check for and log unknown values. Optionally halt processing and surface the error, or bypass the
        placement group on which the unexpected strategy was encountered.
        """
        return pulumi.get(self, "strategy")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IsPlacementGroupTimeouts']]:
        return pulumi.get(self, "timeouts")

