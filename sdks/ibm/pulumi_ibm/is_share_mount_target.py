# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsShareMountTargetInitArgs', 'IsShareMountTarget']

@pulumi.input_type
class IsShareMountTargetInitArgs:
    def __init__(__self__, *,
                 share: pulumi.Input[_builtins.str],
                 is_share_mount_target_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 transit_encryption: Optional[pulumi.Input[_builtins.str]] = None,
                 virtual_network_interface: Optional[pulumi.Input['IsShareMountTargetVirtualNetworkInterfaceArgs']] = None,
                 vpc: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a IsShareMountTarget resource.
        :param pulumi.Input[_builtins.str] share: The file share identifier.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this share target. Names must be unique within the share the share target resides in. If
               unspecified, the name will be a hyphenated list of randomly-selected words.
        :param pulumi.Input[_builtins.str] transit_encryption: The transit encryption mode.
        :param pulumi.Input['IsShareMountTargetVirtualNetworkInterfaceArgs'] virtual_network_interface: VNI for mount target.
        :param pulumi.Input[_builtins.str] vpc: The unique identifier of the VPC in which instances can mount the file share using this share target.This property will
               be removed in a future release.The `subnet` property should be used instead.
        """
        pulumi.set(__self__, "share", share)
        if is_share_mount_target_id is not None:
            pulumi.set(__self__, "is_share_mount_target_id", is_share_mount_target_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if transit_encryption is not None:
            pulumi.set(__self__, "transit_encryption", transit_encryption)
        if virtual_network_interface is not None:
            pulumi.set(__self__, "virtual_network_interface", virtual_network_interface)
        if vpc is not None:
            pulumi.set(__self__, "vpc", vpc)

    @_builtins.property
    @pulumi.getter
    def share(self) -> pulumi.Input[_builtins.str]:
        """
        The file share identifier.
        """
        return pulumi.get(self, "share")

    @share.setter
    def share(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "share", value)

    @_builtins.property
    @pulumi.getter(name="isShareMountTargetId")
    def is_share_mount_target_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_share_mount_target_id")

    @is_share_mount_target_id.setter
    def is_share_mount_target_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_share_mount_target_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user-defined name for this share target. Names must be unique within the share the share target resides in. If
        unspecified, the name will be a hyphenated list of randomly-selected words.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="transitEncryption")
    def transit_encryption(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The transit encryption mode.
        """
        return pulumi.get(self, "transit_encryption")

    @transit_encryption.setter
    def transit_encryption(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "transit_encryption", value)

    @_builtins.property
    @pulumi.getter(name="virtualNetworkInterface")
    def virtual_network_interface(self) -> Optional[pulumi.Input['IsShareMountTargetVirtualNetworkInterfaceArgs']]:
        """
        VNI for mount target.
        """
        return pulumi.get(self, "virtual_network_interface")

    @virtual_network_interface.setter
    def virtual_network_interface(self, value: Optional[pulumi.Input['IsShareMountTargetVirtualNetworkInterfaceArgs']]):
        pulumi.set(self, "virtual_network_interface", value)

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier of the VPC in which instances can mount the file share using this share target.This property will
        be removed in a future release.The `subnet` property should be used instead.
        """
        return pulumi.get(self, "vpc")

    @vpc.setter
    def vpc(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc", value)


@pulumi.input_type
class _IsShareMountTargetState:
    def __init__(__self__, *,
                 access_control_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 is_share_mount_target_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
                 mount_path: Optional[pulumi.Input[_builtins.str]] = None,
                 mount_target: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 share: Optional[pulumi.Input[_builtins.str]] = None,
                 transit_encryption: Optional[pulumi.Input[_builtins.str]] = None,
                 virtual_network_interface: Optional[pulumi.Input['IsShareMountTargetVirtualNetworkInterfaceArgs']] = None,
                 vpc: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsShareMountTarget resources.
        :param pulumi.Input[_builtins.str] access_control_mode: The access control mode for the share
        :param pulumi.Input[_builtins.str] created_at: The date and time that the share target was created.
        :param pulumi.Input[_builtins.str] href: The URL for this share target.
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of the mount target.
        :param pulumi.Input[_builtins.str] mount_path: The mount path for the share.The IP addresses used in the mount path are currently within the IBM services IP range, but
               are expected to change to be within one of the VPC's subnets in the future.
        :param pulumi.Input[_builtins.str] mount_target: The unique identifier of this target
        :param pulumi.Input[_builtins.str] name: The user-defined name for this share target. Names must be unique within the share the share target resides in. If
               unspecified, the name will be a hyphenated list of randomly-selected words.
        :param pulumi.Input[_builtins.str] resource_type: The type of resource referenced.
        :param pulumi.Input[_builtins.str] share: The file share identifier.
        :param pulumi.Input[_builtins.str] transit_encryption: The transit encryption mode.
        :param pulumi.Input['IsShareMountTargetVirtualNetworkInterfaceArgs'] virtual_network_interface: VNI for mount target.
        :param pulumi.Input[_builtins.str] vpc: The unique identifier of the VPC in which instances can mount the file share using this share target.This property will
               be removed in a future release.The `subnet` property should be used instead.
        """
        if access_control_mode is not None:
            pulumi.set(__self__, "access_control_mode", access_control_mode)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if is_share_mount_target_id is not None:
            pulumi.set(__self__, "is_share_mount_target_id", is_share_mount_target_id)
        if lifecycle_state is not None:
            pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if mount_path is not None:
            pulumi.set(__self__, "mount_path", mount_path)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if share is not None:
            pulumi.set(__self__, "share", share)
        if transit_encryption is not None:
            pulumi.set(__self__, "transit_encryption", transit_encryption)
        if virtual_network_interface is not None:
            pulumi.set(__self__, "virtual_network_interface", virtual_network_interface)
        if vpc is not None:
            pulumi.set(__self__, "vpc", vpc)

    @_builtins.property
    @pulumi.getter(name="accessControlMode")
    def access_control_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The access control mode for the share
        """
        return pulumi.get(self, "access_control_mode")

    @access_control_mode.setter
    def access_control_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_control_mode", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time that the share target was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL for this share target.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="isShareMountTargetId")
    def is_share_mount_target_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_share_mount_target_id")

    @is_share_mount_target_id.setter
    def is_share_mount_target_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_share_mount_target_id", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The lifecycle state of the mount target.
        """
        return pulumi.get(self, "lifecycle_state")

    @lifecycle_state.setter
    def lifecycle_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lifecycle_state", value)

    @_builtins.property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The mount path for the share.The IP addresses used in the mount path are currently within the IBM services IP range, but
        are expected to change to be within one of the VPC's subnets in the future.
        """
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mount_path", value)

    @_builtins.property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier of this target
        """
        return pulumi.get(self, "mount_target")

    @mount_target.setter
    def mount_target(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mount_target", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user-defined name for this share target. Names must be unique within the share the share target resides in. If
        unspecified, the name will be a hyphenated list of randomly-selected words.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of resource referenced.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter
    def share(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The file share identifier.
        """
        return pulumi.get(self, "share")

    @share.setter
    def share(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "share", value)

    @_builtins.property
    @pulumi.getter(name="transitEncryption")
    def transit_encryption(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The transit encryption mode.
        """
        return pulumi.get(self, "transit_encryption")

    @transit_encryption.setter
    def transit_encryption(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "transit_encryption", value)

    @_builtins.property
    @pulumi.getter(name="virtualNetworkInterface")
    def virtual_network_interface(self) -> Optional[pulumi.Input['IsShareMountTargetVirtualNetworkInterfaceArgs']]:
        """
        VNI for mount target.
        """
        return pulumi.get(self, "virtual_network_interface")

    @virtual_network_interface.setter
    def virtual_network_interface(self, value: Optional[pulumi.Input['IsShareMountTargetVirtualNetworkInterfaceArgs']]):
        pulumi.set(self, "virtual_network_interface", value)

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier of the VPC in which instances can mount the file share using this share target.This property will
        be removed in a future release.The `subnet` property should be used instead.
        """
        return pulumi.get(self, "vpc")

    @vpc.setter
    def vpc(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc", value)


@pulumi.type_token("ibm:index/isShareMountTarget:IsShareMountTarget")
class IsShareMountTarget(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 is_share_mount_target_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 share: Optional[pulumi.Input[_builtins.str]] = None,
                 transit_encryption: Optional[pulumi.Input[_builtins.str]] = None,
                 virtual_network_interface: Optional[pulumi.Input[Union['IsShareMountTargetVirtualNetworkInterfaceArgs', 'IsShareMountTargetVirtualNetworkInterfaceArgsDict']]] = None,
                 vpc: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IsShareMountTarget resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this share target. Names must be unique within the share the share target resides in. If
               unspecified, the name will be a hyphenated list of randomly-selected words.
        :param pulumi.Input[_builtins.str] share: The file share identifier.
        :param pulumi.Input[_builtins.str] transit_encryption: The transit encryption mode.
        :param pulumi.Input[Union['IsShareMountTargetVirtualNetworkInterfaceArgs', 'IsShareMountTargetVirtualNetworkInterfaceArgsDict']] virtual_network_interface: VNI for mount target.
        :param pulumi.Input[_builtins.str] vpc: The unique identifier of the VPC in which instances can mount the file share using this share target.This property will
               be removed in a future release.The `subnet` property should be used instead.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsShareMountTargetInitArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsShareMountTarget resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsShareMountTargetInitArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsShareMountTargetInitArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 is_share_mount_target_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 share: Optional[pulumi.Input[_builtins.str]] = None,
                 transit_encryption: Optional[pulumi.Input[_builtins.str]] = None,
                 virtual_network_interface: Optional[pulumi.Input[Union['IsShareMountTargetVirtualNetworkInterfaceArgs', 'IsShareMountTargetVirtualNetworkInterfaceArgsDict']]] = None,
                 vpc: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsShareMountTargetInitArgs.__new__(IsShareMountTargetInitArgs)

            __props__.__dict__["is_share_mount_target_id"] = is_share_mount_target_id
            __props__.__dict__["name"] = name
            if share is None and not opts.urn:
                raise TypeError("Missing required property 'share'")
            __props__.__dict__["share"] = share
            __props__.__dict__["transit_encryption"] = transit_encryption
            __props__.__dict__["virtual_network_interface"] = virtual_network_interface
            __props__.__dict__["vpc"] = vpc
            __props__.__dict__["access_control_mode"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["lifecycle_state"] = None
            __props__.__dict__["mount_path"] = None
            __props__.__dict__["mount_target"] = None
            __props__.__dict__["resource_type"] = None
        super(IsShareMountTarget, __self__).__init__(
            'ibm:index/isShareMountTarget:IsShareMountTarget',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_control_mode: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            is_share_mount_target_id: Optional[pulumi.Input[_builtins.str]] = None,
            lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
            mount_path: Optional[pulumi.Input[_builtins.str]] = None,
            mount_target: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            share: Optional[pulumi.Input[_builtins.str]] = None,
            transit_encryption: Optional[pulumi.Input[_builtins.str]] = None,
            virtual_network_interface: Optional[pulumi.Input[Union['IsShareMountTargetVirtualNetworkInterfaceArgs', 'IsShareMountTargetVirtualNetworkInterfaceArgsDict']]] = None,
            vpc: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsShareMountTarget':
        """
        Get an existing IsShareMountTarget resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] access_control_mode: The access control mode for the share
        :param pulumi.Input[_builtins.str] created_at: The date and time that the share target was created.
        :param pulumi.Input[_builtins.str] href: The URL for this share target.
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of the mount target.
        :param pulumi.Input[_builtins.str] mount_path: The mount path for the share.The IP addresses used in the mount path are currently within the IBM services IP range, but
               are expected to change to be within one of the VPC's subnets in the future.
        :param pulumi.Input[_builtins.str] mount_target: The unique identifier of this target
        :param pulumi.Input[_builtins.str] name: The user-defined name for this share target. Names must be unique within the share the share target resides in. If
               unspecified, the name will be a hyphenated list of randomly-selected words.
        :param pulumi.Input[_builtins.str] resource_type: The type of resource referenced.
        :param pulumi.Input[_builtins.str] share: The file share identifier.
        :param pulumi.Input[_builtins.str] transit_encryption: The transit encryption mode.
        :param pulumi.Input[Union['IsShareMountTargetVirtualNetworkInterfaceArgs', 'IsShareMountTargetVirtualNetworkInterfaceArgsDict']] virtual_network_interface: VNI for mount target.
        :param pulumi.Input[_builtins.str] vpc: The unique identifier of the VPC in which instances can mount the file share using this share target.This property will
               be removed in a future release.The `subnet` property should be used instead.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsShareMountTargetState.__new__(_IsShareMountTargetState)

        __props__.__dict__["access_control_mode"] = access_control_mode
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["href"] = href
        __props__.__dict__["is_share_mount_target_id"] = is_share_mount_target_id
        __props__.__dict__["lifecycle_state"] = lifecycle_state
        __props__.__dict__["mount_path"] = mount_path
        __props__.__dict__["mount_target"] = mount_target
        __props__.__dict__["name"] = name
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["share"] = share
        __props__.__dict__["transit_encryption"] = transit_encryption
        __props__.__dict__["virtual_network_interface"] = virtual_network_interface
        __props__.__dict__["vpc"] = vpc
        return IsShareMountTarget(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessControlMode")
    def access_control_mode(self) -> pulumi.Output[_builtins.str]:
        """
        The access control mode for the share
        """
        return pulumi.get(self, "access_control_mode")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time that the share target was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        The URL for this share target.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="isShareMountTargetId")
    def is_share_mount_target_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_share_mount_target_id")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> pulumi.Output[_builtins.str]:
        """
        The lifecycle state of the mount target.
        """
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> pulumi.Output[_builtins.str]:
        """
        The mount path for the share.The IP addresses used in the mount path are currently within the IBM services IP range, but
        are expected to change to be within one of the VPC's subnets in the future.
        """
        return pulumi.get(self, "mount_path")

    @_builtins.property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier of this target
        """
        return pulumi.get(self, "mount_target")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The user-defined name for this share target. Names must be unique within the share the share target resides in. If
        unspecified, the name will be a hyphenated list of randomly-selected words.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of resource referenced.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def share(self) -> pulumi.Output[_builtins.str]:
        """
        The file share identifier.
        """
        return pulumi.get(self, "share")

    @_builtins.property
    @pulumi.getter(name="transitEncryption")
    def transit_encryption(self) -> pulumi.Output[_builtins.str]:
        """
        The transit encryption mode.
        """
        return pulumi.get(self, "transit_encryption")

    @_builtins.property
    @pulumi.getter(name="virtualNetworkInterface")
    def virtual_network_interface(self) -> pulumi.Output[Optional['outputs.IsShareMountTargetVirtualNetworkInterface']]:
        """
        VNI for mount target.
        """
        return pulumi.get(self, "virtual_network_interface")

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier of the VPC in which instances can mount the file share using this share target.This property will
        be removed in a future release.The `subnet` property should be used instead.
        """
        return pulumi.get(self, "vpc")

