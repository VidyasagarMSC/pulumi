# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['IsVirtualNetworkInterfaceIpInitArgs', 'IsVirtualNetworkInterfaceIp']

@pulumi.input_type
class IsVirtualNetworkInterfaceIpInitArgs:
    def __init__(__self__, *,
                 reserved_ip: pulumi.Input[_builtins.str],
                 virtual_network_interface: pulumi.Input[_builtins.str],
                 is_virtual_network_interface_ip_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a IsVirtualNetworkInterfaceIp resource.
        :param pulumi.Input[_builtins.str] reserved_ip: The reserved ip identifier.
        :param pulumi.Input[_builtins.str] virtual_network_interface: The virtual network interface identifier.
        """
        pulumi.set(__self__, "reserved_ip", reserved_ip)
        pulumi.set(__self__, "virtual_network_interface", virtual_network_interface)
        if is_virtual_network_interface_ip_id is not None:
            pulumi.set(__self__, "is_virtual_network_interface_ip_id", is_virtual_network_interface_ip_id)

    @_builtins.property
    @pulumi.getter(name="reservedIp")
    def reserved_ip(self) -> pulumi.Input[_builtins.str]:
        """
        The reserved ip identifier.
        """
        return pulumi.get(self, "reserved_ip")

    @reserved_ip.setter
    def reserved_ip(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "reserved_ip", value)

    @_builtins.property
    @pulumi.getter(name="virtualNetworkInterface")
    def virtual_network_interface(self) -> pulumi.Input[_builtins.str]:
        """
        The virtual network interface identifier.
        """
        return pulumi.get(self, "virtual_network_interface")

    @virtual_network_interface.setter
    def virtual_network_interface(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "virtual_network_interface", value)

    @_builtins.property
    @pulumi.getter(name="isVirtualNetworkInterfaceIpId")
    def is_virtual_network_interface_ip_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_virtual_network_interface_ip_id")

    @is_virtual_network_interface_ip_id.setter
    def is_virtual_network_interface_ip_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_virtual_network_interface_ip_id", value)


@pulumi.input_type
class _IsVirtualNetworkInterfaceIpState:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 is_virtual_network_interface_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 reserved_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 virtual_network_interface: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsVirtualNetworkInterfaceIp resources.
        :param pulumi.Input[_builtins.str] address: The IP address.If the address has not yet been selected, the value will be `0.0.0.0`.This property may add support for
               IPv6 addresses in the future. When processing a value in this property, verify that the address is in an expected
               format. If it is not, log an error. Optionally halt processing and surface the error, or bypass the resource on which
               the unexpected IP address format was encountered.
        :param pulumi.Input[_builtins.str] href: The URL for this reserved IP.
        :param pulumi.Input[_builtins.str] name: The name for this reserved IP. The name is unique across all reserved IPs in a subnet.
        :param pulumi.Input[_builtins.str] reserved_ip: The reserved ip identifier.
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input[_builtins.str] virtual_network_interface: The virtual network interface identifier.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if is_virtual_network_interface_ip_id is not None:
            pulumi.set(__self__, "is_virtual_network_interface_ip_id", is_virtual_network_interface_ip_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if reserved_ip is not None:
            pulumi.set(__self__, "reserved_ip", reserved_ip)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if virtual_network_interface is not None:
            pulumi.set(__self__, "virtual_network_interface", virtual_network_interface)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IP address.If the address has not yet been selected, the value will be `0.0.0.0`.This property may add support for
        IPv6 addresses in the future. When processing a value in this property, verify that the address is in an expected
        format. If it is not, log an error. Optionally halt processing and surface the error, or bypass the resource on which
        the unexpected IP address format was encountered.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL for this reserved IP.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="isVirtualNetworkInterfaceIpId")
    def is_virtual_network_interface_ip_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_virtual_network_interface_ip_id")

    @is_virtual_network_interface_ip_id.setter
    def is_virtual_network_interface_ip_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_virtual_network_interface_ip_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name for this reserved IP. The name is unique across all reserved IPs in a subnet.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="reservedIp")
    def reserved_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The reserved ip identifier.
        """
        return pulumi.get(self, "reserved_ip")

    @reserved_ip.setter
    def reserved_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "reserved_ip", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter(name="virtualNetworkInterface")
    def virtual_network_interface(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The virtual network interface identifier.
        """
        return pulumi.get(self, "virtual_network_interface")

    @virtual_network_interface.setter
    def virtual_network_interface(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "virtual_network_interface", value)


@pulumi.type_token("ibm:index/isVirtualNetworkInterfaceIp:IsVirtualNetworkInterfaceIp")
class IsVirtualNetworkInterfaceIp(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 is_virtual_network_interface_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 reserved_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 virtual_network_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IsVirtualNetworkInterfaceIp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] reserved_ip: The reserved ip identifier.
        :param pulumi.Input[_builtins.str] virtual_network_interface: The virtual network interface identifier.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsVirtualNetworkInterfaceIpInitArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsVirtualNetworkInterfaceIp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsVirtualNetworkInterfaceIpInitArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsVirtualNetworkInterfaceIpInitArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 is_virtual_network_interface_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 reserved_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 virtual_network_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsVirtualNetworkInterfaceIpInitArgs.__new__(IsVirtualNetworkInterfaceIpInitArgs)

            __props__.__dict__["is_virtual_network_interface_ip_id"] = is_virtual_network_interface_ip_id
            if reserved_ip is None and not opts.urn:
                raise TypeError("Missing required property 'reserved_ip'")
            __props__.__dict__["reserved_ip"] = reserved_ip
            if virtual_network_interface is None and not opts.urn:
                raise TypeError("Missing required property 'virtual_network_interface'")
            __props__.__dict__["virtual_network_interface"] = virtual_network_interface
            __props__.__dict__["address"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["resource_type"] = None
        super(IsVirtualNetworkInterfaceIp, __self__).__init__(
            'ibm:index/isVirtualNetworkInterfaceIp:IsVirtualNetworkInterfaceIp',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            address: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            is_virtual_network_interface_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            reserved_ip: Optional[pulumi.Input[_builtins.str]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            virtual_network_interface: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsVirtualNetworkInterfaceIp':
        """
        Get an existing IsVirtualNetworkInterfaceIp resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] address: The IP address.If the address has not yet been selected, the value will be `0.0.0.0`.This property may add support for
               IPv6 addresses in the future. When processing a value in this property, verify that the address is in an expected
               format. If it is not, log an error. Optionally halt processing and surface the error, or bypass the resource on which
               the unexpected IP address format was encountered.
        :param pulumi.Input[_builtins.str] href: The URL for this reserved IP.
        :param pulumi.Input[_builtins.str] name: The name for this reserved IP. The name is unique across all reserved IPs in a subnet.
        :param pulumi.Input[_builtins.str] reserved_ip: The reserved ip identifier.
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input[_builtins.str] virtual_network_interface: The virtual network interface identifier.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsVirtualNetworkInterfaceIpState.__new__(_IsVirtualNetworkInterfaceIpState)

        __props__.__dict__["address"] = address
        __props__.__dict__["href"] = href
        __props__.__dict__["is_virtual_network_interface_ip_id"] = is_virtual_network_interface_ip_id
        __props__.__dict__["name"] = name
        __props__.__dict__["reserved_ip"] = reserved_ip
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["virtual_network_interface"] = virtual_network_interface
        return IsVirtualNetworkInterfaceIp(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def address(self) -> pulumi.Output[_builtins.str]:
        """
        The IP address.If the address has not yet been selected, the value will be `0.0.0.0`.This property may add support for
        IPv6 addresses in the future. When processing a value in this property, verify that the address is in an expected
        format. If it is not, log an error. Optionally halt processing and surface the error, or bypass the resource on which
        the unexpected IP address format was encountered.
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        The URL for this reserved IP.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="isVirtualNetworkInterfaceIpId")
    def is_virtual_network_interface_ip_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_virtual_network_interface_ip_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name for this reserved IP. The name is unique across all reserved IPs in a subnet.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="reservedIp")
    def reserved_ip(self) -> pulumi.Output[_builtins.str]:
        """
        The reserved ip identifier.
        """
        return pulumi.get(self, "reserved_ip")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="virtualNetworkInterface")
    def virtual_network_interface(self) -> pulumi.Output[_builtins.str]:
        """
        The virtual network interface identifier.
        """
        return pulumi.get(self, "virtual_network_interface")

