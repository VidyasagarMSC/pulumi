# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsLbResult',
    'AwaitableGetIsLbResult',
    'get_is_lb',
    'get_is_lb_output',
]

@pulumi.output_type
class GetIsLbResult:
    """
    A collection of values returned by getIsLb.
    """
    def __init__(__self__, access_mode=None, access_tags=None, attached_load_balancer_pool_members=None, availability=None, crn=None, dns=None, failsafe_policy_actions=None, hostname=None, id=None, instance_groups_supported=None, listeners=None, logging=None, name=None, operating_status=None, pools=None, private_ip=None, private_ips=None, profile=None, public_ips=None, resource_controller_url=None, resource_group=None, resource_group_name=None, resource_name=None, route_mode=None, security_group_supported=None, security_groups=None, source_ip_session_persistence_supported=None, status=None, subnets=None, tags=None, type=None, udp_supported=None):
        if access_mode and not isinstance(access_mode, str):
            raise TypeError("Expected argument 'access_mode' to be a str")
        pulumi.set(__self__, "access_mode", access_mode)
        if access_tags and not isinstance(access_tags, list):
            raise TypeError("Expected argument 'access_tags' to be a list")
        pulumi.set(__self__, "access_tags", access_tags)
        if attached_load_balancer_pool_members and not isinstance(attached_load_balancer_pool_members, list):
            raise TypeError("Expected argument 'attached_load_balancer_pool_members' to be a list")
        pulumi.set(__self__, "attached_load_balancer_pool_members", attached_load_balancer_pool_members)
        if availability and not isinstance(availability, str):
            raise TypeError("Expected argument 'availability' to be a str")
        pulumi.set(__self__, "availability", availability)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if dns and not isinstance(dns, list):
            raise TypeError("Expected argument 'dns' to be a list")
        pulumi.set(__self__, "dns", dns)
        if failsafe_policy_actions and not isinstance(failsafe_policy_actions, list):
            raise TypeError("Expected argument 'failsafe_policy_actions' to be a list")
        pulumi.set(__self__, "failsafe_policy_actions", failsafe_policy_actions)
        if hostname and not isinstance(hostname, str):
            raise TypeError("Expected argument 'hostname' to be a str")
        pulumi.set(__self__, "hostname", hostname)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_groups_supported and not isinstance(instance_groups_supported, bool):
            raise TypeError("Expected argument 'instance_groups_supported' to be a bool")
        pulumi.set(__self__, "instance_groups_supported", instance_groups_supported)
        if listeners and not isinstance(listeners, list):
            raise TypeError("Expected argument 'listeners' to be a list")
        pulumi.set(__self__, "listeners", listeners)
        if logging and not isinstance(logging, bool):
            raise TypeError("Expected argument 'logging' to be a bool")
        pulumi.set(__self__, "logging", logging)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if operating_status and not isinstance(operating_status, str):
            raise TypeError("Expected argument 'operating_status' to be a str")
        pulumi.set(__self__, "operating_status", operating_status)
        if pools and not isinstance(pools, list):
            raise TypeError("Expected argument 'pools' to be a list")
        pulumi.set(__self__, "pools", pools)
        if private_ip and not isinstance(private_ip, list):
            raise TypeError("Expected argument 'private_ip' to be a list")
        pulumi.set(__self__, "private_ip", private_ip)
        if private_ips and not isinstance(private_ips, list):
            raise TypeError("Expected argument 'private_ips' to be a list")
        pulumi.set(__self__, "private_ips", private_ips)
        if profile and not isinstance(profile, dict):
            raise TypeError("Expected argument 'profile' to be a dict")
        pulumi.set(__self__, "profile", profile)
        if public_ips and not isinstance(public_ips, list):
            raise TypeError("Expected argument 'public_ips' to be a list")
        pulumi.set(__self__, "public_ips", public_ips)
        if resource_controller_url and not isinstance(resource_controller_url, str):
            raise TypeError("Expected argument 'resource_controller_url' to be a str")
        pulumi.set(__self__, "resource_controller_url", resource_controller_url)
        if resource_group and not isinstance(resource_group, str):
            raise TypeError("Expected argument 'resource_group' to be a str")
        pulumi.set(__self__, "resource_group", resource_group)
        if resource_group_name and not isinstance(resource_group_name, str):
            raise TypeError("Expected argument 'resource_group_name' to be a str")
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if resource_name and not isinstance(resource_name, str):
            raise TypeError("Expected argument 'resource_name' to be a str")
        pulumi.set(__self__, "resource_name", resource_name)
        if route_mode and not isinstance(route_mode, bool):
            raise TypeError("Expected argument 'route_mode' to be a bool")
        pulumi.set(__self__, "route_mode", route_mode)
        if security_group_supported and not isinstance(security_group_supported, bool):
            raise TypeError("Expected argument 'security_group_supported' to be a bool")
        pulumi.set(__self__, "security_group_supported", security_group_supported)
        if security_groups and not isinstance(security_groups, list):
            raise TypeError("Expected argument 'security_groups' to be a list")
        pulumi.set(__self__, "security_groups", security_groups)
        if source_ip_session_persistence_supported and not isinstance(source_ip_session_persistence_supported, bool):
            raise TypeError("Expected argument 'source_ip_session_persistence_supported' to be a bool")
        pulumi.set(__self__, "source_ip_session_persistence_supported", source_ip_session_persistence_supported)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if subnets and not isinstance(subnets, list):
            raise TypeError("Expected argument 'subnets' to be a list")
        pulumi.set(__self__, "subnets", subnets)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if udp_supported and not isinstance(udp_supported, bool):
            raise TypeError("Expected argument 'udp_supported' to be a bool")
        pulumi.set(__self__, "udp_supported", udp_supported)

    @_builtins.property
    @pulumi.getter(name="accessMode")
    def access_mode(self) -> _builtins.str:
        return pulumi.get(self, "access_mode")

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter(name="attachedLoadBalancerPoolMembers")
    def attached_load_balancer_pool_members(self) -> Sequence['outputs.GetIsLbAttachedLoadBalancerPoolMemberResult']:
        return pulumi.get(self, "attached_load_balancer_pool_members")

    @_builtins.property
    @pulumi.getter
    def availability(self) -> _builtins.str:
        return pulumi.get(self, "availability")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def dns(self) -> Sequence['outputs.GetIsLbDnResult']:
        return pulumi.get(self, "dns")

    @_builtins.property
    @pulumi.getter(name="failsafePolicyActions")
    def failsafe_policy_actions(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "failsafe_policy_actions")

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> _builtins.str:
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceGroupsSupported")
    def instance_groups_supported(self) -> _builtins.bool:
        return pulumi.get(self, "instance_groups_supported")

    @_builtins.property
    @pulumi.getter
    def listeners(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "listeners")

    @_builtins.property
    @pulumi.getter
    def logging(self) -> _builtins.bool:
        return pulumi.get(self, "logging")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="operatingStatus")
    def operating_status(self) -> _builtins.str:
        return pulumi.get(self, "operating_status")

    @_builtins.property
    @pulumi.getter
    def pools(self) -> Sequence['outputs.GetIsLbPoolResult']:
        return pulumi.get(self, "pools")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Sequence['outputs.GetIsLbPrivateIpResult']:
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "private_ips")

    @_builtins.property
    @pulumi.getter
    def profile(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "profile")

    @_builtins.property
    @pulumi.getter(name="publicIps")
    def public_ips(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "public_ips")

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> _builtins.str:
        return pulumi.get(self, "resource_controller_url")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> _builtins.str:
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> _builtins.str:
        return pulumi.get(self, "resource_group_name")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="routeMode")
    def route_mode(self) -> _builtins.bool:
        return pulumi.get(self, "route_mode")

    @_builtins.property
    @pulumi.getter(name="securityGroupSupported")
    def security_group_supported(self) -> _builtins.bool:
        return pulumi.get(self, "security_group_supported")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter(name="sourceIpSessionPersistenceSupported")
    def source_ip_session_persistence_supported(self) -> _builtins.bool:
        return pulumi.get(self, "source_ip_session_persistence_supported")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "subnets")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="udpSupported")
    def udp_supported(self) -> _builtins.bool:
        return pulumi.get(self, "udp_supported")


class AwaitableGetIsLbResult(GetIsLbResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsLbResult(
            access_mode=self.access_mode,
            access_tags=self.access_tags,
            attached_load_balancer_pool_members=self.attached_load_balancer_pool_members,
            availability=self.availability,
            crn=self.crn,
            dns=self.dns,
            failsafe_policy_actions=self.failsafe_policy_actions,
            hostname=self.hostname,
            id=self.id,
            instance_groups_supported=self.instance_groups_supported,
            listeners=self.listeners,
            logging=self.logging,
            name=self.name,
            operating_status=self.operating_status,
            pools=self.pools,
            private_ip=self.private_ip,
            private_ips=self.private_ips,
            profile=self.profile,
            public_ips=self.public_ips,
            resource_controller_url=self.resource_controller_url,
            resource_group=self.resource_group,
            resource_group_name=self.resource_group_name,
            resource_name=self.resource_name,
            route_mode=self.route_mode,
            security_group_supported=self.security_group_supported,
            security_groups=self.security_groups,
            source_ip_session_persistence_supported=self.source_ip_session_persistence_supported,
            status=self.status,
            subnets=self.subnets,
            tags=self.tags,
            type=self.type,
            udp_supported=self.udp_supported)


def get_is_lb(id: Optional[_builtins.str] = None,
              name: Optional[_builtins.str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsLbResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsLb:getIsLb', __args__, opts=opts, typ=GetIsLbResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsLbResult(
        access_mode=pulumi.get(__ret__, 'access_mode'),
        access_tags=pulumi.get(__ret__, 'access_tags'),
        attached_load_balancer_pool_members=pulumi.get(__ret__, 'attached_load_balancer_pool_members'),
        availability=pulumi.get(__ret__, 'availability'),
        crn=pulumi.get(__ret__, 'crn'),
        dns=pulumi.get(__ret__, 'dns'),
        failsafe_policy_actions=pulumi.get(__ret__, 'failsafe_policy_actions'),
        hostname=pulumi.get(__ret__, 'hostname'),
        id=pulumi.get(__ret__, 'id'),
        instance_groups_supported=pulumi.get(__ret__, 'instance_groups_supported'),
        listeners=pulumi.get(__ret__, 'listeners'),
        logging=pulumi.get(__ret__, 'logging'),
        name=pulumi.get(__ret__, 'name'),
        operating_status=pulumi.get(__ret__, 'operating_status'),
        pools=pulumi.get(__ret__, 'pools'),
        private_ip=pulumi.get(__ret__, 'private_ip'),
        private_ips=pulumi.get(__ret__, 'private_ips'),
        profile=pulumi.get(__ret__, 'profile'),
        public_ips=pulumi.get(__ret__, 'public_ips'),
        resource_controller_url=pulumi.get(__ret__, 'resource_controller_url'),
        resource_group=pulumi.get(__ret__, 'resource_group'),
        resource_group_name=pulumi.get(__ret__, 'resource_group_name'),
        resource_name=pulumi.get(__ret__, 'resource_name'),
        route_mode=pulumi.get(__ret__, 'route_mode'),
        security_group_supported=pulumi.get(__ret__, 'security_group_supported'),
        security_groups=pulumi.get(__ret__, 'security_groups'),
        source_ip_session_persistence_supported=pulumi.get(__ret__, 'source_ip_session_persistence_supported'),
        status=pulumi.get(__ret__, 'status'),
        subnets=pulumi.get(__ret__, 'subnets'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'),
        udp_supported=pulumi.get(__ret__, 'udp_supported'))
def get_is_lb_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     name: Optional[pulumi.Input[_builtins.str]] = None,
                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsLbResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsLb:getIsLb', __args__, opts=opts, typ=GetIsLbResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsLbResult(
        access_mode=pulumi.get(__response__, 'access_mode'),
        access_tags=pulumi.get(__response__, 'access_tags'),
        attached_load_balancer_pool_members=pulumi.get(__response__, 'attached_load_balancer_pool_members'),
        availability=pulumi.get(__response__, 'availability'),
        crn=pulumi.get(__response__, 'crn'),
        dns=pulumi.get(__response__, 'dns'),
        failsafe_policy_actions=pulumi.get(__response__, 'failsafe_policy_actions'),
        hostname=pulumi.get(__response__, 'hostname'),
        id=pulumi.get(__response__, 'id'),
        instance_groups_supported=pulumi.get(__response__, 'instance_groups_supported'),
        listeners=pulumi.get(__response__, 'listeners'),
        logging=pulumi.get(__response__, 'logging'),
        name=pulumi.get(__response__, 'name'),
        operating_status=pulumi.get(__response__, 'operating_status'),
        pools=pulumi.get(__response__, 'pools'),
        private_ip=pulumi.get(__response__, 'private_ip'),
        private_ips=pulumi.get(__response__, 'private_ips'),
        profile=pulumi.get(__response__, 'profile'),
        public_ips=pulumi.get(__response__, 'public_ips'),
        resource_controller_url=pulumi.get(__response__, 'resource_controller_url'),
        resource_group=pulumi.get(__response__, 'resource_group'),
        resource_group_name=pulumi.get(__response__, 'resource_group_name'),
        resource_name=pulumi.get(__response__, 'resource_name'),
        route_mode=pulumi.get(__response__, 'route_mode'),
        security_group_supported=pulumi.get(__response__, 'security_group_supported'),
        security_groups=pulumi.get(__response__, 'security_groups'),
        source_ip_session_persistence_supported=pulumi.get(__response__, 'source_ip_session_persistence_supported'),
        status=pulumi.get(__response__, 'status'),
        subnets=pulumi.get(__response__, 'subnets'),
        tags=pulumi.get(__response__, 'tags'),
        type=pulumi.get(__response__, 'type'),
        udp_supported=pulumi.get(__response__, 'udp_supported')))
