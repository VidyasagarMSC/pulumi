# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsShareSnapshotsResult',
    'AwaitableGetIsShareSnapshotsResult',
    'get_is_share_snapshots',
    'get_is_share_snapshots_output',
]

@pulumi.output_type
class GetIsShareSnapshotsResult:
    """
    A collection of values returned by getIsShareSnapshots.
    """
    def __init__(__self__, backup_policy_plan=None, id=None, name=None, share=None, snapshots=None):
        if backup_policy_plan and not isinstance(backup_policy_plan, str):
            raise TypeError("Expected argument 'backup_policy_plan' to be a str")
        pulumi.set(__self__, "backup_policy_plan", backup_policy_plan)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if share and not isinstance(share, str):
            raise TypeError("Expected argument 'share' to be a str")
        pulumi.set(__self__, "share", share)
        if snapshots and not isinstance(snapshots, list):
            raise TypeError("Expected argument 'snapshots' to be a list")
        pulumi.set(__self__, "snapshots", snapshots)

    @_builtins.property
    @pulumi.getter(name="backupPolicyPlan")
    def backup_policy_plan(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "backup_policy_plan")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def share(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "share")

    @_builtins.property
    @pulumi.getter
    def snapshots(self) -> Sequence['outputs.GetIsShareSnapshotsSnapshotResult']:
        return pulumi.get(self, "snapshots")


class AwaitableGetIsShareSnapshotsResult(GetIsShareSnapshotsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsShareSnapshotsResult(
            backup_policy_plan=self.backup_policy_plan,
            id=self.id,
            name=self.name,
            share=self.share,
            snapshots=self.snapshots)


def get_is_share_snapshots(backup_policy_plan: Optional[_builtins.str] = None,
                           id: Optional[_builtins.str] = None,
                           name: Optional[_builtins.str] = None,
                           share: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsShareSnapshotsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['backupPolicyPlan'] = backup_policy_plan
    __args__['id'] = id
    __args__['name'] = name
    __args__['share'] = share
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsShareSnapshots:getIsShareSnapshots', __args__, opts=opts, typ=GetIsShareSnapshotsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsShareSnapshotsResult(
        backup_policy_plan=pulumi.get(__ret__, 'backup_policy_plan'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        share=pulumi.get(__ret__, 'share'),
        snapshots=pulumi.get(__ret__, 'snapshots'))
def get_is_share_snapshots_output(backup_policy_plan: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  share: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsShareSnapshotsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['backupPolicyPlan'] = backup_policy_plan
    __args__['id'] = id
    __args__['name'] = name
    __args__['share'] = share
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsShareSnapshots:getIsShareSnapshots', __args__, opts=opts, typ=GetIsShareSnapshotsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsShareSnapshotsResult(
        backup_policy_plan=pulumi.get(__response__, 'backup_policy_plan'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        share=pulumi.get(__response__, 'share'),
        snapshots=pulumi.get(__response__, 'snapshots')))
