# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsInstanceGroupManagerActionInitArgs', 'IsInstanceGroupManagerAction']

@pulumi.input_type
class IsInstanceGroupManagerActionInitArgs:
    def __init__(__self__, *,
                 instance_group: pulumi.Input[_builtins.str],
                 instance_group_manager: pulumi.Input[_builtins.str],
                 cron_spec: Optional[pulumi.Input[_builtins.str]] = None,
                 is_instance_group_manager_action_id: Optional[pulumi.Input[_builtins.str]] = None,
                 max_membership_count: Optional[pulumi.Input[_builtins.float]] = None,
                 membership_count: Optional[pulumi.Input[_builtins.float]] = None,
                 min_membership_count: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 run_at: Optional[pulumi.Input[_builtins.str]] = None,
                 target_manager: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['IsInstanceGroupManagerActionTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a IsInstanceGroupManagerAction resource.
        :param pulumi.Input[_builtins.str] instance_group: instance group ID
        :param pulumi.Input[_builtins.str] instance_group_manager: Instance group manager ID of type scheduled
        :param pulumi.Input[_builtins.str] cron_spec: The cron specification for a recurring scheduled action. Actions can be applied a maximum of one time within a 5 min
               period.
        :param pulumi.Input[_builtins.float] max_membership_count: The maximum number of members in a managed instance group
        :param pulumi.Input[_builtins.float] membership_count: The number of members the instance group should have at the scheduled time.
        :param pulumi.Input[_builtins.float] min_membership_count: The minimum number of members in a managed instance group
        :param pulumi.Input[_builtins.str] name: instance group manager action name
        :param pulumi.Input[_builtins.str] run_at: The date and time the scheduled action will run.
        :param pulumi.Input[_builtins.str] target_manager: The unique identifier for this instance group manager of type autoscale.
        """
        pulumi.set(__self__, "instance_group", instance_group)
        pulumi.set(__self__, "instance_group_manager", instance_group_manager)
        if cron_spec is not None:
            pulumi.set(__self__, "cron_spec", cron_spec)
        if is_instance_group_manager_action_id is not None:
            pulumi.set(__self__, "is_instance_group_manager_action_id", is_instance_group_manager_action_id)
        if max_membership_count is not None:
            pulumi.set(__self__, "max_membership_count", max_membership_count)
        if membership_count is not None:
            pulumi.set(__self__, "membership_count", membership_count)
        if min_membership_count is not None:
            pulumi.set(__self__, "min_membership_count", min_membership_count)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if run_at is not None:
            pulumi.set(__self__, "run_at", run_at)
        if target_manager is not None:
            pulumi.set(__self__, "target_manager", target_manager)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="instanceGroup")
    def instance_group(self) -> pulumi.Input[_builtins.str]:
        """
        instance group ID
        """
        return pulumi.get(self, "instance_group")

    @instance_group.setter
    def instance_group(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_group", value)

    @_builtins.property
    @pulumi.getter(name="instanceGroupManager")
    def instance_group_manager(self) -> pulumi.Input[_builtins.str]:
        """
        Instance group manager ID of type scheduled
        """
        return pulumi.get(self, "instance_group_manager")

    @instance_group_manager.setter
    def instance_group_manager(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_group_manager", value)

    @_builtins.property
    @pulumi.getter(name="cronSpec")
    def cron_spec(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cron specification for a recurring scheduled action. Actions can be applied a maximum of one time within a 5 min
        period.
        """
        return pulumi.get(self, "cron_spec")

    @cron_spec.setter
    def cron_spec(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cron_spec", value)

    @_builtins.property
    @pulumi.getter(name="isInstanceGroupManagerActionId")
    def is_instance_group_manager_action_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_instance_group_manager_action_id")

    @is_instance_group_manager_action_id.setter
    def is_instance_group_manager_action_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_instance_group_manager_action_id", value)

    @_builtins.property
    @pulumi.getter(name="maxMembershipCount")
    def max_membership_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The maximum number of members in a managed instance group
        """
        return pulumi.get(self, "max_membership_count")

    @max_membership_count.setter
    def max_membership_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "max_membership_count", value)

    @_builtins.property
    @pulumi.getter(name="membershipCount")
    def membership_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The number of members the instance group should have at the scheduled time.
        """
        return pulumi.get(self, "membership_count")

    @membership_count.setter
    def membership_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "membership_count", value)

    @_builtins.property
    @pulumi.getter(name="minMembershipCount")
    def min_membership_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The minimum number of members in a managed instance group
        """
        return pulumi.get(self, "min_membership_count")

    @min_membership_count.setter
    def min_membership_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "min_membership_count", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        instance group manager action name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="runAt")
    def run_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time the scheduled action will run.
        """
        return pulumi.get(self, "run_at")

    @run_at.setter
    def run_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "run_at", value)

    @_builtins.property
    @pulumi.getter(name="targetManager")
    def target_manager(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier for this instance group manager of type autoscale.
        """
        return pulumi.get(self, "target_manager")

    @target_manager.setter
    def target_manager(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_manager", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsInstanceGroupManagerActionTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsInstanceGroupManagerActionTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _IsInstanceGroupManagerActionState:
    def __init__(__self__, *,
                 action_id: Optional[pulumi.Input[_builtins.str]] = None,
                 action_type: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 auto_delete_timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 cron_spec: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_group: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_group_manager: Optional[pulumi.Input[_builtins.str]] = None,
                 is_instance_group_manager_action_id: Optional[pulumi.Input[_builtins.str]] = None,
                 last_applied_at: Optional[pulumi.Input[_builtins.str]] = None,
                 max_membership_count: Optional[pulumi.Input[_builtins.float]] = None,
                 membership_count: Optional[pulumi.Input[_builtins.float]] = None,
                 min_membership_count: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 next_run_at: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 run_at: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 target_manager: Optional[pulumi.Input[_builtins.str]] = None,
                 target_manager_name: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['IsInstanceGroupManagerActionTimeoutsArgs']] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsInstanceGroupManagerAction resources.
        :param pulumi.Input[_builtins.str] action_id: Instance group manager action ID
        :param pulumi.Input[_builtins.str] action_type: The type of action for the instance group.
        :param pulumi.Input[_builtins.str] created_at: The date and time that the instance group manager action was modified.
        :param pulumi.Input[_builtins.str] cron_spec: The cron specification for a recurring scheduled action. Actions can be applied a maximum of one time within a 5 min
               period.
        :param pulumi.Input[_builtins.str] instance_group: instance group ID
        :param pulumi.Input[_builtins.str] instance_group_manager: Instance group manager ID of type scheduled
        :param pulumi.Input[_builtins.str] last_applied_at: The date and time the scheduled action was last applied. If empty the action has never been applied.
        :param pulumi.Input[_builtins.float] max_membership_count: The maximum number of members in a managed instance group
        :param pulumi.Input[_builtins.float] membership_count: The number of members the instance group should have at the scheduled time.
        :param pulumi.Input[_builtins.float] min_membership_count: The minimum number of members in a managed instance group
        :param pulumi.Input[_builtins.str] name: instance group manager action name
        :param pulumi.Input[_builtins.str] next_run_at: The date and time the scheduled action will next run. If empty the system is currently calculating the next run time.
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input[_builtins.str] run_at: The date and time the scheduled action will run.
        :param pulumi.Input[_builtins.str] status: The status of the instance group action- `active`: Action is ready to be run- `completed`: Action was completed
               successfully- `failed`: Action could not be completed successfully- `incompatible`: Action parameters are not compatible
               with the group or manager- `omitted`: Action was not applied because this action's manager was disabled.
        :param pulumi.Input[_builtins.str] target_manager: The unique identifier for this instance group manager of type autoscale.
        :param pulumi.Input[_builtins.str] target_manager_name: Instance group manager name of type autoscale.
        :param pulumi.Input[_builtins.str] updated_at: The date and time that the instance group manager action was modified.
        """
        if action_id is not None:
            pulumi.set(__self__, "action_id", action_id)
        if action_type is not None:
            pulumi.set(__self__, "action_type", action_type)
        if auto_delete is not None:
            pulumi.set(__self__, "auto_delete", auto_delete)
        if auto_delete_timeout is not None:
            pulumi.set(__self__, "auto_delete_timeout", auto_delete_timeout)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if cron_spec is not None:
            pulumi.set(__self__, "cron_spec", cron_spec)
        if instance_group is not None:
            pulumi.set(__self__, "instance_group", instance_group)
        if instance_group_manager is not None:
            pulumi.set(__self__, "instance_group_manager", instance_group_manager)
        if is_instance_group_manager_action_id is not None:
            pulumi.set(__self__, "is_instance_group_manager_action_id", is_instance_group_manager_action_id)
        if last_applied_at is not None:
            pulumi.set(__self__, "last_applied_at", last_applied_at)
        if max_membership_count is not None:
            pulumi.set(__self__, "max_membership_count", max_membership_count)
        if membership_count is not None:
            pulumi.set(__self__, "membership_count", membership_count)
        if min_membership_count is not None:
            pulumi.set(__self__, "min_membership_count", min_membership_count)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if next_run_at is not None:
            pulumi.set(__self__, "next_run_at", next_run_at)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if run_at is not None:
            pulumi.set(__self__, "run_at", run_at)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if target_manager is not None:
            pulumi.set(__self__, "target_manager", target_manager)
        if target_manager_name is not None:
            pulumi.set(__self__, "target_manager_name", target_manager_name)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="actionId")
    def action_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Instance group manager action ID
        """
        return pulumi.get(self, "action_id")

    @action_id.setter
    def action_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action_id", value)

    @_builtins.property
    @pulumi.getter(name="actionType")
    def action_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of action for the instance group.
        """
        return pulumi.get(self, "action_type")

    @action_type.setter
    def action_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action_type", value)

    @_builtins.property
    @pulumi.getter(name="autoDelete")
    def auto_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "auto_delete")

    @auto_delete.setter
    def auto_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auto_delete", value)

    @_builtins.property
    @pulumi.getter(name="autoDeleteTimeout")
    def auto_delete_timeout(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "auto_delete_timeout")

    @auto_delete_timeout.setter
    def auto_delete_timeout(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "auto_delete_timeout", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time that the instance group manager action was modified.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="cronSpec")
    def cron_spec(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cron specification for a recurring scheduled action. Actions can be applied a maximum of one time within a 5 min
        period.
        """
        return pulumi.get(self, "cron_spec")

    @cron_spec.setter
    def cron_spec(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cron_spec", value)

    @_builtins.property
    @pulumi.getter(name="instanceGroup")
    def instance_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        instance group ID
        """
        return pulumi.get(self, "instance_group")

    @instance_group.setter
    def instance_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_group", value)

    @_builtins.property
    @pulumi.getter(name="instanceGroupManager")
    def instance_group_manager(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Instance group manager ID of type scheduled
        """
        return pulumi.get(self, "instance_group_manager")

    @instance_group_manager.setter
    def instance_group_manager(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_group_manager", value)

    @_builtins.property
    @pulumi.getter(name="isInstanceGroupManagerActionId")
    def is_instance_group_manager_action_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_instance_group_manager_action_id")

    @is_instance_group_manager_action_id.setter
    def is_instance_group_manager_action_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_instance_group_manager_action_id", value)

    @_builtins.property
    @pulumi.getter(name="lastAppliedAt")
    def last_applied_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time the scheduled action was last applied. If empty the action has never been applied.
        """
        return pulumi.get(self, "last_applied_at")

    @last_applied_at.setter
    def last_applied_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_applied_at", value)

    @_builtins.property
    @pulumi.getter(name="maxMembershipCount")
    def max_membership_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The maximum number of members in a managed instance group
        """
        return pulumi.get(self, "max_membership_count")

    @max_membership_count.setter
    def max_membership_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "max_membership_count", value)

    @_builtins.property
    @pulumi.getter(name="membershipCount")
    def membership_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The number of members the instance group should have at the scheduled time.
        """
        return pulumi.get(self, "membership_count")

    @membership_count.setter
    def membership_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "membership_count", value)

    @_builtins.property
    @pulumi.getter(name="minMembershipCount")
    def min_membership_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The minimum number of members in a managed instance group
        """
        return pulumi.get(self, "min_membership_count")

    @min_membership_count.setter
    def min_membership_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "min_membership_count", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        instance group manager action name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nextRunAt")
    def next_run_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time the scheduled action will next run. If empty the system is currently calculating the next run time.
        """
        return pulumi.get(self, "next_run_at")

    @next_run_at.setter
    def next_run_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "next_run_at", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter(name="runAt")
    def run_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time the scheduled action will run.
        """
        return pulumi.get(self, "run_at")

    @run_at.setter
    def run_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "run_at", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the instance group action- `active`: Action is ready to be run- `completed`: Action was completed
        successfully- `failed`: Action could not be completed successfully- `incompatible`: Action parameters are not compatible
        with the group or manager- `omitted`: Action was not applied because this action's manager was disabled.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="targetManager")
    def target_manager(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier for this instance group manager of type autoscale.
        """
        return pulumi.get(self, "target_manager")

    @target_manager.setter
    def target_manager(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_manager", value)

    @_builtins.property
    @pulumi.getter(name="targetManagerName")
    def target_manager_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Instance group manager name of type autoscale.
        """
        return pulumi.get(self, "target_manager_name")

    @target_manager_name.setter
    def target_manager_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_manager_name", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsInstanceGroupManagerActionTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsInstanceGroupManagerActionTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time that the instance group manager action was modified.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("ibm:index/isInstanceGroupManagerAction:IsInstanceGroupManagerAction")
class IsInstanceGroupManagerAction(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cron_spec: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_group: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_group_manager: Optional[pulumi.Input[_builtins.str]] = None,
                 is_instance_group_manager_action_id: Optional[pulumi.Input[_builtins.str]] = None,
                 max_membership_count: Optional[pulumi.Input[_builtins.float]] = None,
                 membership_count: Optional[pulumi.Input[_builtins.float]] = None,
                 min_membership_count: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 run_at: Optional[pulumi.Input[_builtins.str]] = None,
                 target_manager: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsInstanceGroupManagerActionTimeoutsArgs', 'IsInstanceGroupManagerActionTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a IsInstanceGroupManagerAction resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cron_spec: The cron specification for a recurring scheduled action. Actions can be applied a maximum of one time within a 5 min
               period.
        :param pulumi.Input[_builtins.str] instance_group: instance group ID
        :param pulumi.Input[_builtins.str] instance_group_manager: Instance group manager ID of type scheduled
        :param pulumi.Input[_builtins.float] max_membership_count: The maximum number of members in a managed instance group
        :param pulumi.Input[_builtins.float] membership_count: The number of members the instance group should have at the scheduled time.
        :param pulumi.Input[_builtins.float] min_membership_count: The minimum number of members in a managed instance group
        :param pulumi.Input[_builtins.str] name: instance group manager action name
        :param pulumi.Input[_builtins.str] run_at: The date and time the scheduled action will run.
        :param pulumi.Input[_builtins.str] target_manager: The unique identifier for this instance group manager of type autoscale.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsInstanceGroupManagerActionInitArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsInstanceGroupManagerAction resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsInstanceGroupManagerActionInitArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsInstanceGroupManagerActionInitArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cron_spec: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_group: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_group_manager: Optional[pulumi.Input[_builtins.str]] = None,
                 is_instance_group_manager_action_id: Optional[pulumi.Input[_builtins.str]] = None,
                 max_membership_count: Optional[pulumi.Input[_builtins.float]] = None,
                 membership_count: Optional[pulumi.Input[_builtins.float]] = None,
                 min_membership_count: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 run_at: Optional[pulumi.Input[_builtins.str]] = None,
                 target_manager: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsInstanceGroupManagerActionTimeoutsArgs', 'IsInstanceGroupManagerActionTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsInstanceGroupManagerActionInitArgs.__new__(IsInstanceGroupManagerActionInitArgs)

            __props__.__dict__["cron_spec"] = cron_spec
            if instance_group is None and not opts.urn:
                raise TypeError("Missing required property 'instance_group'")
            __props__.__dict__["instance_group"] = instance_group
            if instance_group_manager is None and not opts.urn:
                raise TypeError("Missing required property 'instance_group_manager'")
            __props__.__dict__["instance_group_manager"] = instance_group_manager
            __props__.__dict__["is_instance_group_manager_action_id"] = is_instance_group_manager_action_id
            __props__.__dict__["max_membership_count"] = max_membership_count
            __props__.__dict__["membership_count"] = membership_count
            __props__.__dict__["min_membership_count"] = min_membership_count
            __props__.__dict__["name"] = name
            __props__.__dict__["run_at"] = run_at
            __props__.__dict__["target_manager"] = target_manager
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["action_id"] = None
            __props__.__dict__["action_type"] = None
            __props__.__dict__["auto_delete"] = None
            __props__.__dict__["auto_delete_timeout"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["last_applied_at"] = None
            __props__.__dict__["next_run_at"] = None
            __props__.__dict__["resource_type"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["target_manager_name"] = None
            __props__.__dict__["updated_at"] = None
        super(IsInstanceGroupManagerAction, __self__).__init__(
            'ibm:index/isInstanceGroupManagerAction:IsInstanceGroupManagerAction',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action_id: Optional[pulumi.Input[_builtins.str]] = None,
            action_type: Optional[pulumi.Input[_builtins.str]] = None,
            auto_delete: Optional[pulumi.Input[_builtins.bool]] = None,
            auto_delete_timeout: Optional[pulumi.Input[_builtins.float]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            cron_spec: Optional[pulumi.Input[_builtins.str]] = None,
            instance_group: Optional[pulumi.Input[_builtins.str]] = None,
            instance_group_manager: Optional[pulumi.Input[_builtins.str]] = None,
            is_instance_group_manager_action_id: Optional[pulumi.Input[_builtins.str]] = None,
            last_applied_at: Optional[pulumi.Input[_builtins.str]] = None,
            max_membership_count: Optional[pulumi.Input[_builtins.float]] = None,
            membership_count: Optional[pulumi.Input[_builtins.float]] = None,
            min_membership_count: Optional[pulumi.Input[_builtins.float]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            next_run_at: Optional[pulumi.Input[_builtins.str]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            run_at: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            target_manager: Optional[pulumi.Input[_builtins.str]] = None,
            target_manager_name: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['IsInstanceGroupManagerActionTimeoutsArgs', 'IsInstanceGroupManagerActionTimeoutsArgsDict']]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsInstanceGroupManagerAction':
        """
        Get an existing IsInstanceGroupManagerAction resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action_id: Instance group manager action ID
        :param pulumi.Input[_builtins.str] action_type: The type of action for the instance group.
        :param pulumi.Input[_builtins.str] created_at: The date and time that the instance group manager action was modified.
        :param pulumi.Input[_builtins.str] cron_spec: The cron specification for a recurring scheduled action. Actions can be applied a maximum of one time within a 5 min
               period.
        :param pulumi.Input[_builtins.str] instance_group: instance group ID
        :param pulumi.Input[_builtins.str] instance_group_manager: Instance group manager ID of type scheduled
        :param pulumi.Input[_builtins.str] last_applied_at: The date and time the scheduled action was last applied. If empty the action has never been applied.
        :param pulumi.Input[_builtins.float] max_membership_count: The maximum number of members in a managed instance group
        :param pulumi.Input[_builtins.float] membership_count: The number of members the instance group should have at the scheduled time.
        :param pulumi.Input[_builtins.float] min_membership_count: The minimum number of members in a managed instance group
        :param pulumi.Input[_builtins.str] name: instance group manager action name
        :param pulumi.Input[_builtins.str] next_run_at: The date and time the scheduled action will next run. If empty the system is currently calculating the next run time.
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input[_builtins.str] run_at: The date and time the scheduled action will run.
        :param pulumi.Input[_builtins.str] status: The status of the instance group action- `active`: Action is ready to be run- `completed`: Action was completed
               successfully- `failed`: Action could not be completed successfully- `incompatible`: Action parameters are not compatible
               with the group or manager- `omitted`: Action was not applied because this action's manager was disabled.
        :param pulumi.Input[_builtins.str] target_manager: The unique identifier for this instance group manager of type autoscale.
        :param pulumi.Input[_builtins.str] target_manager_name: Instance group manager name of type autoscale.
        :param pulumi.Input[_builtins.str] updated_at: The date and time that the instance group manager action was modified.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsInstanceGroupManagerActionState.__new__(_IsInstanceGroupManagerActionState)

        __props__.__dict__["action_id"] = action_id
        __props__.__dict__["action_type"] = action_type
        __props__.__dict__["auto_delete"] = auto_delete
        __props__.__dict__["auto_delete_timeout"] = auto_delete_timeout
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["cron_spec"] = cron_spec
        __props__.__dict__["instance_group"] = instance_group
        __props__.__dict__["instance_group_manager"] = instance_group_manager
        __props__.__dict__["is_instance_group_manager_action_id"] = is_instance_group_manager_action_id
        __props__.__dict__["last_applied_at"] = last_applied_at
        __props__.__dict__["max_membership_count"] = max_membership_count
        __props__.__dict__["membership_count"] = membership_count
        __props__.__dict__["min_membership_count"] = min_membership_count
        __props__.__dict__["name"] = name
        __props__.__dict__["next_run_at"] = next_run_at
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["run_at"] = run_at
        __props__.__dict__["status"] = status
        __props__.__dict__["target_manager"] = target_manager
        __props__.__dict__["target_manager_name"] = target_manager_name
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["updated_at"] = updated_at
        return IsInstanceGroupManagerAction(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="actionId")
    def action_id(self) -> pulumi.Output[_builtins.str]:
        """
        Instance group manager action ID
        """
        return pulumi.get(self, "action_id")

    @_builtins.property
    @pulumi.getter(name="actionType")
    def action_type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of action for the instance group.
        """
        return pulumi.get(self, "action_type")

    @_builtins.property
    @pulumi.getter(name="autoDelete")
    def auto_delete(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "auto_delete")

    @_builtins.property
    @pulumi.getter(name="autoDeleteTimeout")
    def auto_delete_timeout(self) -> pulumi.Output[_builtins.float]:
        return pulumi.get(self, "auto_delete_timeout")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time that the instance group manager action was modified.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="cronSpec")
    def cron_spec(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The cron specification for a recurring scheduled action. Actions can be applied a maximum of one time within a 5 min
        period.
        """
        return pulumi.get(self, "cron_spec")

    @_builtins.property
    @pulumi.getter(name="instanceGroup")
    def instance_group(self) -> pulumi.Output[_builtins.str]:
        """
        instance group ID
        """
        return pulumi.get(self, "instance_group")

    @_builtins.property
    @pulumi.getter(name="instanceGroupManager")
    def instance_group_manager(self) -> pulumi.Output[_builtins.str]:
        """
        Instance group manager ID of type scheduled
        """
        return pulumi.get(self, "instance_group_manager")

    @_builtins.property
    @pulumi.getter(name="isInstanceGroupManagerActionId")
    def is_instance_group_manager_action_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_instance_group_manager_action_id")

    @_builtins.property
    @pulumi.getter(name="lastAppliedAt")
    def last_applied_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time the scheduled action was last applied. If empty the action has never been applied.
        """
        return pulumi.get(self, "last_applied_at")

    @_builtins.property
    @pulumi.getter(name="maxMembershipCount")
    def max_membership_count(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        The maximum number of members in a managed instance group
        """
        return pulumi.get(self, "max_membership_count")

    @_builtins.property
    @pulumi.getter(name="membershipCount")
    def membership_count(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        The number of members the instance group should have at the scheduled time.
        """
        return pulumi.get(self, "membership_count")

    @_builtins.property
    @pulumi.getter(name="minMembershipCount")
    def min_membership_count(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        The minimum number of members in a managed instance group
        """
        return pulumi.get(self, "min_membership_count")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        instance group manager action name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nextRunAt")
    def next_run_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time the scheduled action will next run. If empty the system is currently calculating the next run time.
        """
        return pulumi.get(self, "next_run_at")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="runAt")
    def run_at(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The date and time the scheduled action will run.
        """
        return pulumi.get(self, "run_at")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the instance group action- `active`: Action is ready to be run- `completed`: Action was completed
        successfully- `failed`: Action could not be completed successfully- `incompatible`: Action parameters are not compatible
        with the group or manager- `omitted`: Action was not applied because this action's manager was disabled.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="targetManager")
    def target_manager(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The unique identifier for this instance group manager of type autoscale.
        """
        return pulumi.get(self, "target_manager")

    @_builtins.property
    @pulumi.getter(name="targetManagerName")
    def target_manager_name(self) -> pulumi.Output[_builtins.str]:
        """
        Instance group manager name of type autoscale.
        """
        return pulumi.get(self, "target_manager_name")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IsInstanceGroupManagerActionTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time that the instance group manager action was modified.
        """
        return pulumi.get(self, "updated_at")

