# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetAppConfigEnvironmentResult',
    'AwaitableGetAppConfigEnvironmentResult',
    'get_app_config_environment',
    'get_app_config_environment_output',
]

@pulumi.output_type
class GetAppConfigEnvironmentResult:
    """
    A collection of values returned by getAppConfigEnvironment.
    """
    def __init__(__self__, color_code=None, created_time=None, description=None, environment_id=None, expand=None, guid=None, href=None, id=None, name=None, tags=None, updated_time=None):
        if color_code and not isinstance(color_code, str):
            raise TypeError("Expected argument 'color_code' to be a str")
        pulumi.set(__self__, "color_code", color_code)
        if created_time and not isinstance(created_time, str):
            raise TypeError("Expected argument 'created_time' to be a str")
        pulumi.set(__self__, "created_time", created_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if environment_id and not isinstance(environment_id, str):
            raise TypeError("Expected argument 'environment_id' to be a str")
        pulumi.set(__self__, "environment_id", environment_id)
        if expand and not isinstance(expand, bool):
            raise TypeError("Expected argument 'expand' to be a bool")
        pulumi.set(__self__, "expand", expand)
        if guid and not isinstance(guid, str):
            raise TypeError("Expected argument 'guid' to be a str")
        pulumi.set(__self__, "guid", guid)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if tags and not isinstance(tags, str):
            raise TypeError("Expected argument 'tags' to be a str")
        pulumi.set(__self__, "tags", tags)
        if updated_time and not isinstance(updated_time, str):
            raise TypeError("Expected argument 'updated_time' to be a str")
        pulumi.set(__self__, "updated_time", updated_time)

    @_builtins.property
    @pulumi.getter(name="colorCode")
    def color_code(self) -> _builtins.str:
        return pulumi.get(self, "color_code")

    @_builtins.property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> _builtins.str:
        return pulumi.get(self, "created_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> _builtins.str:
        return pulumi.get(self, "environment_id")

    @_builtins.property
    @pulumi.getter
    def expand(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "expand")

    @_builtins.property
    @pulumi.getter
    def guid(self) -> _builtins.str:
        return pulumi.get(self, "guid")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> _builtins.str:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> _builtins.str:
        return pulumi.get(self, "updated_time")


class AwaitableGetAppConfigEnvironmentResult(GetAppConfigEnvironmentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppConfigEnvironmentResult(
            color_code=self.color_code,
            created_time=self.created_time,
            description=self.description,
            environment_id=self.environment_id,
            expand=self.expand,
            guid=self.guid,
            href=self.href,
            id=self.id,
            name=self.name,
            tags=self.tags,
            updated_time=self.updated_time)


def get_app_config_environment(environment_id: Optional[_builtins.str] = None,
                               expand: Optional[_builtins.bool] = None,
                               guid: Optional[_builtins.str] = None,
                               id: Optional[_builtins.str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppConfigEnvironmentResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['environmentId'] = environment_id
    __args__['expand'] = expand
    __args__['guid'] = guid
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getAppConfigEnvironment:getAppConfigEnvironment', __args__, opts=opts, typ=GetAppConfigEnvironmentResult, package_ref=_utilities.get_package()).value

    return AwaitableGetAppConfigEnvironmentResult(
        color_code=pulumi.get(__ret__, 'color_code'),
        created_time=pulumi.get(__ret__, 'created_time'),
        description=pulumi.get(__ret__, 'description'),
        environment_id=pulumi.get(__ret__, 'environment_id'),
        expand=pulumi.get(__ret__, 'expand'),
        guid=pulumi.get(__ret__, 'guid'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        tags=pulumi.get(__ret__, 'tags'),
        updated_time=pulumi.get(__ret__, 'updated_time'))
def get_app_config_environment_output(environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                                      expand: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                      guid: Optional[pulumi.Input[_builtins.str]] = None,
                                      id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppConfigEnvironmentResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['environmentId'] = environment_id
    __args__['expand'] = expand
    __args__['guid'] = guid
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getAppConfigEnvironment:getAppConfigEnvironment', __args__, opts=opts, typ=GetAppConfigEnvironmentResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetAppConfigEnvironmentResult(
        color_code=pulumi.get(__response__, 'color_code'),
        created_time=pulumi.get(__response__, 'created_time'),
        description=pulumi.get(__response__, 'description'),
        environment_id=pulumi.get(__response__, 'environment_id'),
        expand=pulumi.get(__response__, 'expand'),
        guid=pulumi.get(__response__, 'guid'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        tags=pulumi.get(__response__, 'tags'),
        updated_time=pulumi.get(__response__, 'updated_time')))
