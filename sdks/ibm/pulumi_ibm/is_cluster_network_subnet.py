# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsClusterNetworkSubnetArgs', 'IsClusterNetworkSubnet']

@pulumi.input_type
class IsClusterNetworkSubnetArgs:
    def __init__(__self__, *,
                 cluster_network_id: pulumi.Input[_builtins.str],
                 ip_version: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_cidr_block: Optional[pulumi.Input[_builtins.str]] = None,
                 is_cluster_network_subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 total_ipv4_address_count: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a IsClusterNetworkSubnet resource.
        :param pulumi.Input[_builtins.str] cluster_network_id: The cluster network identifier.
        :param pulumi.Input[_builtins.str] ip_version: The IP version for this cluster network subnet.The enumerated values for this property
               may[expand](https://cloud.ibm.com/apidocs/vpc#property-value-expansion) in the future.
        :param pulumi.Input[_builtins.str] ipv4_cidr_block: The IPv4 range of this cluster network subnet, expressed in CIDR format.
        :param pulumi.Input[_builtins.str] name: The name for this cluster network subnet. The name is unique across all cluster network subnets in the cluster network.
        :param pulumi.Input[_builtins.float] total_ipv4_address_count: The total number of IPv4 addresses in this cluster network subnet.Note: This is calculated as 2<sup>(32 - prefix
               length)</sup>. For example, the prefix length `/24` gives:<br> 2<sup>(32 - 24)</sup> = 2<sup>8</sup> = 256 addresses.
        """
        pulumi.set(__self__, "cluster_network_id", cluster_network_id)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if ipv4_cidr_block is not None:
            pulumi.set(__self__, "ipv4_cidr_block", ipv4_cidr_block)
        if is_cluster_network_subnet_id is not None:
            pulumi.set(__self__, "is_cluster_network_subnet_id", is_cluster_network_subnet_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if total_ipv4_address_count is not None:
            pulumi.set(__self__, "total_ipv4_address_count", total_ipv4_address_count)

    @_builtins.property
    @pulumi.getter(name="clusterNetworkId")
    def cluster_network_id(self) -> pulumi.Input[_builtins.str]:
        """
        The cluster network identifier.
        """
        return pulumi.get(self, "cluster_network_id")

    @cluster_network_id.setter
    def cluster_network_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_network_id", value)

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IP version for this cluster network subnet.The enumerated values for this property
        may[expand](https://cloud.ibm.com/apidocs/vpc#property-value-expansion) in the future.
        """
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_version", value)

    @_builtins.property
    @pulumi.getter(name="ipv4CidrBlock")
    def ipv4_cidr_block(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IPv4 range of this cluster network subnet, expressed in CIDR format.
        """
        return pulumi.get(self, "ipv4_cidr_block")

    @ipv4_cidr_block.setter
    def ipv4_cidr_block(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_cidr_block", value)

    @_builtins.property
    @pulumi.getter(name="isClusterNetworkSubnetId")
    def is_cluster_network_subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_cluster_network_subnet_id")

    @is_cluster_network_subnet_id.setter
    def is_cluster_network_subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_cluster_network_subnet_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name for this cluster network subnet. The name is unique across all cluster network subnets in the cluster network.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="totalIpv4AddressCount")
    def total_ipv4_address_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The total number of IPv4 addresses in this cluster network subnet.Note: This is calculated as 2<sup>(32 - prefix
        length)</sup>. For example, the prefix length `/24` gives:<br> 2<sup>(32 - 24)</sup> = 2<sup>8</sup> = 256 addresses.
        """
        return pulumi.get(self, "total_ipv4_address_count")

    @total_ipv4_address_count.setter
    def total_ipv4_address_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "total_ipv4_address_count", value)


@pulumi.input_type
class _IsClusterNetworkSubnetState:
    def __init__(__self__, *,
                 available_ipv4_address_count: Optional[pulumi.Input[_builtins.float]] = None,
                 cluster_network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_network_subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 etag: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_version: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_cidr_block: Optional[pulumi.Input[_builtins.str]] = None,
                 is_cluster_network_subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lifecycle_reasons: Optional[pulumi.Input[Sequence[pulumi.Input['IsClusterNetworkSubnetLifecycleReasonArgs']]]] = None,
                 lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 total_ipv4_address_count: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering IsClusterNetworkSubnet resources.
        :param pulumi.Input[_builtins.float] available_ipv4_address_count: The number of IPv4 addresses in this cluster network subnet that are not in use, and have not been reserved by the user
               or the provider.
        :param pulumi.Input[_builtins.str] cluster_network_id: The cluster network identifier.
        :param pulumi.Input[_builtins.str] cluster_network_subnet_id: The unique identifier for this cluster network subnet.
        :param pulumi.Input[_builtins.str] created_at: The date and time that the cluster network subnet was created.
        :param pulumi.Input[_builtins.str] href: The URL for this cluster network subnet.
        :param pulumi.Input[_builtins.str] ip_version: The IP version for this cluster network subnet.The enumerated values for this property
               may[expand](https://cloud.ibm.com/apidocs/vpc#property-value-expansion) in the future.
        :param pulumi.Input[_builtins.str] ipv4_cidr_block: The IPv4 range of this cluster network subnet, expressed in CIDR format.
        :param pulumi.Input[Sequence[pulumi.Input['IsClusterNetworkSubnetLifecycleReasonArgs']]] lifecycle_reasons: The reasons for the current `lifecycle_state` (if any).
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of the cluster network subnet.
        :param pulumi.Input[_builtins.str] name: The name for this cluster network subnet. The name is unique across all cluster network subnets in the cluster network.
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input[_builtins.float] total_ipv4_address_count: The total number of IPv4 addresses in this cluster network subnet.Note: This is calculated as 2<sup>(32 - prefix
               length)</sup>. For example, the prefix length `/24` gives:<br> 2<sup>(32 - 24)</sup> = 2<sup>8</sup> = 256 addresses.
        """
        if available_ipv4_address_count is not None:
            pulumi.set(__self__, "available_ipv4_address_count", available_ipv4_address_count)
        if cluster_network_id is not None:
            pulumi.set(__self__, "cluster_network_id", cluster_network_id)
        if cluster_network_subnet_id is not None:
            pulumi.set(__self__, "cluster_network_subnet_id", cluster_network_subnet_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if ipv4_cidr_block is not None:
            pulumi.set(__self__, "ipv4_cidr_block", ipv4_cidr_block)
        if is_cluster_network_subnet_id is not None:
            pulumi.set(__self__, "is_cluster_network_subnet_id", is_cluster_network_subnet_id)
        if lifecycle_reasons is not None:
            pulumi.set(__self__, "lifecycle_reasons", lifecycle_reasons)
        if lifecycle_state is not None:
            pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if total_ipv4_address_count is not None:
            pulumi.set(__self__, "total_ipv4_address_count", total_ipv4_address_count)

    @_builtins.property
    @pulumi.getter(name="availableIpv4AddressCount")
    def available_ipv4_address_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The number of IPv4 addresses in this cluster network subnet that are not in use, and have not been reserved by the user
        or the provider.
        """
        return pulumi.get(self, "available_ipv4_address_count")

    @available_ipv4_address_count.setter
    def available_ipv4_address_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "available_ipv4_address_count", value)

    @_builtins.property
    @pulumi.getter(name="clusterNetworkId")
    def cluster_network_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cluster network identifier.
        """
        return pulumi.get(self, "cluster_network_id")

    @cluster_network_id.setter
    def cluster_network_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_network_id", value)

    @_builtins.property
    @pulumi.getter(name="clusterNetworkSubnetId")
    def cluster_network_subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier for this cluster network subnet.
        """
        return pulumi.get(self, "cluster_network_subnet_id")

    @cluster_network_subnet_id.setter
    def cluster_network_subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_network_subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time that the cluster network subnet was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "etag", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL for this cluster network subnet.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IP version for this cluster network subnet.The enumerated values for this property
        may[expand](https://cloud.ibm.com/apidocs/vpc#property-value-expansion) in the future.
        """
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_version", value)

    @_builtins.property
    @pulumi.getter(name="ipv4CidrBlock")
    def ipv4_cidr_block(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IPv4 range of this cluster network subnet, expressed in CIDR format.
        """
        return pulumi.get(self, "ipv4_cidr_block")

    @ipv4_cidr_block.setter
    def ipv4_cidr_block(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_cidr_block", value)

    @_builtins.property
    @pulumi.getter(name="isClusterNetworkSubnetId")
    def is_cluster_network_subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_cluster_network_subnet_id")

    @is_cluster_network_subnet_id.setter
    def is_cluster_network_subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_cluster_network_subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleReasons")
    def lifecycle_reasons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsClusterNetworkSubnetLifecycleReasonArgs']]]]:
        """
        The reasons for the current `lifecycle_state` (if any).
        """
        return pulumi.get(self, "lifecycle_reasons")

    @lifecycle_reasons.setter
    def lifecycle_reasons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsClusterNetworkSubnetLifecycleReasonArgs']]]]):
        pulumi.set(self, "lifecycle_reasons", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The lifecycle state of the cluster network subnet.
        """
        return pulumi.get(self, "lifecycle_state")

    @lifecycle_state.setter
    def lifecycle_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lifecycle_state", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name for this cluster network subnet. The name is unique across all cluster network subnets in the cluster network.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter(name="totalIpv4AddressCount")
    def total_ipv4_address_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The total number of IPv4 addresses in this cluster network subnet.Note: This is calculated as 2<sup>(32 - prefix
        length)</sup>. For example, the prefix length `/24` gives:<br> 2<sup>(32 - 24)</sup> = 2<sup>8</sup> = 256 addresses.
        """
        return pulumi.get(self, "total_ipv4_address_count")

    @total_ipv4_address_count.setter
    def total_ipv4_address_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "total_ipv4_address_count", value)


@pulumi.type_token("ibm:index/isClusterNetworkSubnet:IsClusterNetworkSubnet")
class IsClusterNetworkSubnet(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_version: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_cidr_block: Optional[pulumi.Input[_builtins.str]] = None,
                 is_cluster_network_subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 total_ipv4_address_count: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a IsClusterNetworkSubnet resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_network_id: The cluster network identifier.
        :param pulumi.Input[_builtins.str] ip_version: The IP version for this cluster network subnet.The enumerated values for this property
               may[expand](https://cloud.ibm.com/apidocs/vpc#property-value-expansion) in the future.
        :param pulumi.Input[_builtins.str] ipv4_cidr_block: The IPv4 range of this cluster network subnet, expressed in CIDR format.
        :param pulumi.Input[_builtins.str] name: The name for this cluster network subnet. The name is unique across all cluster network subnets in the cluster network.
        :param pulumi.Input[_builtins.float] total_ipv4_address_count: The total number of IPv4 addresses in this cluster network subnet.Note: This is calculated as 2<sup>(32 - prefix
               length)</sup>. For example, the prefix length `/24` gives:<br> 2<sup>(32 - 24)</sup> = 2<sup>8</sup> = 256 addresses.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsClusterNetworkSubnetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsClusterNetworkSubnet resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsClusterNetworkSubnetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsClusterNetworkSubnetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_version: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_cidr_block: Optional[pulumi.Input[_builtins.str]] = None,
                 is_cluster_network_subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 total_ipv4_address_count: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsClusterNetworkSubnetArgs.__new__(IsClusterNetworkSubnetArgs)

            if cluster_network_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_network_id'")
            __props__.__dict__["cluster_network_id"] = cluster_network_id
            __props__.__dict__["ip_version"] = ip_version
            __props__.__dict__["ipv4_cidr_block"] = ipv4_cidr_block
            __props__.__dict__["is_cluster_network_subnet_id"] = is_cluster_network_subnet_id
            __props__.__dict__["name"] = name
            __props__.__dict__["total_ipv4_address_count"] = total_ipv4_address_count
            __props__.__dict__["available_ipv4_address_count"] = None
            __props__.__dict__["cluster_network_subnet_id"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["etag"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["lifecycle_reasons"] = None
            __props__.__dict__["lifecycle_state"] = None
            __props__.__dict__["resource_type"] = None
        super(IsClusterNetworkSubnet, __self__).__init__(
            'ibm:index/isClusterNetworkSubnet:IsClusterNetworkSubnet',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            available_ipv4_address_count: Optional[pulumi.Input[_builtins.float]] = None,
            cluster_network_id: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_network_subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            etag: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            ip_version: Optional[pulumi.Input[_builtins.str]] = None,
            ipv4_cidr_block: Optional[pulumi.Input[_builtins.str]] = None,
            is_cluster_network_subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
            lifecycle_reasons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsClusterNetworkSubnetLifecycleReasonArgs', 'IsClusterNetworkSubnetLifecycleReasonArgsDict']]]]] = None,
            lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            total_ipv4_address_count: Optional[pulumi.Input[_builtins.float]] = None) -> 'IsClusterNetworkSubnet':
        """
        Get an existing IsClusterNetworkSubnet resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] available_ipv4_address_count: The number of IPv4 addresses in this cluster network subnet that are not in use, and have not been reserved by the user
               or the provider.
        :param pulumi.Input[_builtins.str] cluster_network_id: The cluster network identifier.
        :param pulumi.Input[_builtins.str] cluster_network_subnet_id: The unique identifier for this cluster network subnet.
        :param pulumi.Input[_builtins.str] created_at: The date and time that the cluster network subnet was created.
        :param pulumi.Input[_builtins.str] href: The URL for this cluster network subnet.
        :param pulumi.Input[_builtins.str] ip_version: The IP version for this cluster network subnet.The enumerated values for this property
               may[expand](https://cloud.ibm.com/apidocs/vpc#property-value-expansion) in the future.
        :param pulumi.Input[_builtins.str] ipv4_cidr_block: The IPv4 range of this cluster network subnet, expressed in CIDR format.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsClusterNetworkSubnetLifecycleReasonArgs', 'IsClusterNetworkSubnetLifecycleReasonArgsDict']]]] lifecycle_reasons: The reasons for the current `lifecycle_state` (if any).
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of the cluster network subnet.
        :param pulumi.Input[_builtins.str] name: The name for this cluster network subnet. The name is unique across all cluster network subnets in the cluster network.
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input[_builtins.float] total_ipv4_address_count: The total number of IPv4 addresses in this cluster network subnet.Note: This is calculated as 2<sup>(32 - prefix
               length)</sup>. For example, the prefix length `/24` gives:<br> 2<sup>(32 - 24)</sup> = 2<sup>8</sup> = 256 addresses.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsClusterNetworkSubnetState.__new__(_IsClusterNetworkSubnetState)

        __props__.__dict__["available_ipv4_address_count"] = available_ipv4_address_count
        __props__.__dict__["cluster_network_id"] = cluster_network_id
        __props__.__dict__["cluster_network_subnet_id"] = cluster_network_subnet_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["etag"] = etag
        __props__.__dict__["href"] = href
        __props__.__dict__["ip_version"] = ip_version
        __props__.__dict__["ipv4_cidr_block"] = ipv4_cidr_block
        __props__.__dict__["is_cluster_network_subnet_id"] = is_cluster_network_subnet_id
        __props__.__dict__["lifecycle_reasons"] = lifecycle_reasons
        __props__.__dict__["lifecycle_state"] = lifecycle_state
        __props__.__dict__["name"] = name
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["total_ipv4_address_count"] = total_ipv4_address_count
        return IsClusterNetworkSubnet(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="availableIpv4AddressCount")
    def available_ipv4_address_count(self) -> pulumi.Output[_builtins.float]:
        """
        The number of IPv4 addresses in this cluster network subnet that are not in use, and have not been reserved by the user
        or the provider.
        """
        return pulumi.get(self, "available_ipv4_address_count")

    @_builtins.property
    @pulumi.getter(name="clusterNetworkId")
    def cluster_network_id(self) -> pulumi.Output[_builtins.str]:
        """
        The cluster network identifier.
        """
        return pulumi.get(self, "cluster_network_id")

    @_builtins.property
    @pulumi.getter(name="clusterNetworkSubnetId")
    def cluster_network_subnet_id(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier for this cluster network subnet.
        """
        return pulumi.get(self, "cluster_network_subnet_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time that the cluster network subnet was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def etag(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "etag")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        The URL for this cluster network subnet.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> pulumi.Output[_builtins.str]:
        """
        The IP version for this cluster network subnet.The enumerated values for this property
        may[expand](https://cloud.ibm.com/apidocs/vpc#property-value-expansion) in the future.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter(name="ipv4CidrBlock")
    def ipv4_cidr_block(self) -> pulumi.Output[_builtins.str]:
        """
        The IPv4 range of this cluster network subnet, expressed in CIDR format.
        """
        return pulumi.get(self, "ipv4_cidr_block")

    @_builtins.property
    @pulumi.getter(name="isClusterNetworkSubnetId")
    def is_cluster_network_subnet_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_cluster_network_subnet_id")

    @_builtins.property
    @pulumi.getter(name="lifecycleReasons")
    def lifecycle_reasons(self) -> pulumi.Output[Sequence['outputs.IsClusterNetworkSubnetLifecycleReason']]:
        """
        The reasons for the current `lifecycle_state` (if any).
        """
        return pulumi.get(self, "lifecycle_reasons")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> pulumi.Output[_builtins.str]:
        """
        The lifecycle state of the cluster network subnet.
        """
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name for this cluster network subnet. The name is unique across all cluster network subnets in the cluster network.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="totalIpv4AddressCount")
    def total_ipv4_address_count(self) -> pulumi.Output[_builtins.float]:
        """
        The total number of IPv4 addresses in this cluster network subnet.Note: This is calculated as 2<sup>(32 - prefix
        length)</sup>. For example, the prefix length `/24` gives:<br> 2<sup>(32 - 24)</sup> = 2<sup>8</sup> = 256 addresses.
        """
        return pulumi.get(self, "total_ipv4_address_count")

