# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ContainerBindServiceArgs', 'ContainerBindService']

@pulumi.input_type
class ContainerBindServiceArgs:
    def __init__(__self__, *,
                 cluster_name_id: pulumi.Input[_builtins.str],
                 namespace_id: pulumi.Input[_builtins.str],
                 account_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 container_bind_service_id: Optional[pulumi.Input[_builtins.str]] = None,
                 key: Optional[pulumi.Input[_builtins.str]] = None,
                 org_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 role: Optional[pulumi.Input[_builtins.str]] = None,
                 service_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service_instance_name: Optional[pulumi.Input[_builtins.str]] = None,
                 space_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a ContainerBindService resource.
        :param pulumi.Input[_builtins.str] cluster_name_id: Cluster name or ID
        :param pulumi.Input[_builtins.str] namespace_id: namespace ID
        :param pulumi.Input[_builtins.str] account_guid: The bluemix account guid this cluster belongs to
        :param pulumi.Input[_builtins.str] key: Key info
        :param pulumi.Input[_builtins.str] org_guid: The bluemix organization guid this cluster belongs to
        :param pulumi.Input[_builtins.str] region: The cluster region
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.str] role: Role info
        :param pulumi.Input[_builtins.str] service_instance_id: Service instance ID
        :param pulumi.Input[_builtins.str] service_instance_name: serivice instance name
        :param pulumi.Input[_builtins.str] space_guid: The bluemix space guid this cluster belongs to
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags for the resource
        """
        pulumi.set(__self__, "cluster_name_id", cluster_name_id)
        pulumi.set(__self__, "namespace_id", namespace_id)
        if account_guid is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""account_guid is deprecated: Deprecated""")
        if account_guid is not None:
            pulumi.set(__self__, "account_guid", account_guid)
        if container_bind_service_id is not None:
            pulumi.set(__self__, "container_bind_service_id", container_bind_service_id)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if org_guid is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""org_guid is deprecated: Deprecated""")
        if org_guid is not None:
            pulumi.set(__self__, "org_guid", org_guid)
        if region is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""region is deprecated: Deprecated""")
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if service_instance_id is not None:
            pulumi.set(__self__, "service_instance_id", service_instance_id)
        if service_instance_name is not None:
            pulumi.set(__self__, "service_instance_name", service_instance_name)
        if space_guid is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""space_guid is deprecated: Deprecated""")
        if space_guid is not None:
            pulumi.set(__self__, "space_guid", space_guid)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="clusterNameId")
    def cluster_name_id(self) -> pulumi.Input[_builtins.str]:
        """
        Cluster name or ID
        """
        return pulumi.get(self, "cluster_name_id")

    @cluster_name_id.setter
    def cluster_name_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_name_id", value)

    @_builtins.property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> pulumi.Input[_builtins.str]:
        """
        namespace ID
        """
        return pulumi.get(self, "namespace_id")

    @namespace_id.setter
    def namespace_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "namespace_id", value)

    @_builtins.property
    @pulumi.getter(name="accountGuid")
    @_utilities.deprecated("""Deprecated""")
    def account_guid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The bluemix account guid this cluster belongs to
        """
        return pulumi.get(self, "account_guid")

    @account_guid.setter
    def account_guid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_guid", value)

    @_builtins.property
    @pulumi.getter(name="containerBindServiceId")
    def container_bind_service_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_bind_service_id")

    @container_bind_service_id.setter
    def container_bind_service_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_bind_service_id", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Key info
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter(name="orgGuid")
    @_utilities.deprecated("""Deprecated""")
    def org_guid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The bluemix organization guid this cluster belongs to
        """
        return pulumi.get(self, "org_guid")

    @org_guid.setter
    def org_guid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "org_guid", value)

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cluster region
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Role info
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role", value)

    @_builtins.property
    @pulumi.getter(name="serviceInstanceId")
    def service_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service instance ID
        """
        return pulumi.get(self, "service_instance_id")

    @service_instance_id.setter
    def service_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="serviceInstanceName")
    def service_instance_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        serivice instance name
        """
        return pulumi.get(self, "service_instance_name")

    @service_instance_name.setter
    def service_instance_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_instance_name", value)

    @_builtins.property
    @pulumi.getter(name="spaceGuid")
    @_utilities.deprecated("""Deprecated""")
    def space_guid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The bluemix space guid this cluster belongs to
        """
        return pulumi.get(self, "space_guid")

    @space_guid.setter
    def space_guid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "space_guid", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags for the resource
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _ContainerBindServiceState:
    def __init__(__self__, *,
                 account_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_name_id: Optional[pulumi.Input[_builtins.str]] = None,
                 container_bind_service_id: Optional[pulumi.Input[_builtins.str]] = None,
                 key: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 org_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 role: Optional[pulumi.Input[_builtins.str]] = None,
                 service_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service_instance_name: Optional[pulumi.Input[_builtins.str]] = None,
                 space_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering ContainerBindService resources.
        :param pulumi.Input[_builtins.str] account_guid: The bluemix account guid this cluster belongs to
        :param pulumi.Input[_builtins.str] cluster_name_id: Cluster name or ID
        :param pulumi.Input[_builtins.str] key: Key info
        :param pulumi.Input[_builtins.str] namespace_id: namespace ID
        :param pulumi.Input[_builtins.str] org_guid: The bluemix organization guid this cluster belongs to
        :param pulumi.Input[_builtins.str] region: The cluster region
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.str] role: Role info
        :param pulumi.Input[_builtins.str] service_instance_id: Service instance ID
        :param pulumi.Input[_builtins.str] service_instance_name: serivice instance name
        :param pulumi.Input[_builtins.str] space_guid: The bluemix space guid this cluster belongs to
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags for the resource
        """
        if account_guid is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""account_guid is deprecated: Deprecated""")
        if account_guid is not None:
            pulumi.set(__self__, "account_guid", account_guid)
        if cluster_name_id is not None:
            pulumi.set(__self__, "cluster_name_id", cluster_name_id)
        if container_bind_service_id is not None:
            pulumi.set(__self__, "container_bind_service_id", container_bind_service_id)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if namespace_id is not None:
            pulumi.set(__self__, "namespace_id", namespace_id)
        if org_guid is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""org_guid is deprecated: Deprecated""")
        if org_guid is not None:
            pulumi.set(__self__, "org_guid", org_guid)
        if region is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""region is deprecated: Deprecated""")
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if service_instance_id is not None:
            pulumi.set(__self__, "service_instance_id", service_instance_id)
        if service_instance_name is not None:
            pulumi.set(__self__, "service_instance_name", service_instance_name)
        if space_guid is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""space_guid is deprecated: Deprecated""")
        if space_guid is not None:
            pulumi.set(__self__, "space_guid", space_guid)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="accountGuid")
    @_utilities.deprecated("""Deprecated""")
    def account_guid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The bluemix account guid this cluster belongs to
        """
        return pulumi.get(self, "account_guid")

    @account_guid.setter
    def account_guid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_guid", value)

    @_builtins.property
    @pulumi.getter(name="clusterNameId")
    def cluster_name_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cluster name or ID
        """
        return pulumi.get(self, "cluster_name_id")

    @cluster_name_id.setter
    def cluster_name_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_name_id", value)

    @_builtins.property
    @pulumi.getter(name="containerBindServiceId")
    def container_bind_service_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_bind_service_id")

    @container_bind_service_id.setter
    def container_bind_service_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_bind_service_id", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Key info
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        namespace ID
        """
        return pulumi.get(self, "namespace_id")

    @namespace_id.setter
    def namespace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "namespace_id", value)

    @_builtins.property
    @pulumi.getter(name="orgGuid")
    @_utilities.deprecated("""Deprecated""")
    def org_guid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The bluemix organization guid this cluster belongs to
        """
        return pulumi.get(self, "org_guid")

    @org_guid.setter
    def org_guid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "org_guid", value)

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cluster region
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Role info
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role", value)

    @_builtins.property
    @pulumi.getter(name="serviceInstanceId")
    def service_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service instance ID
        """
        return pulumi.get(self, "service_instance_id")

    @service_instance_id.setter
    def service_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="serviceInstanceName")
    def service_instance_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        serivice instance name
        """
        return pulumi.get(self, "service_instance_name")

    @service_instance_name.setter
    def service_instance_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_instance_name", value)

    @_builtins.property
    @pulumi.getter(name="spaceGuid")
    @_utilities.deprecated("""Deprecated""")
    def space_guid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The bluemix space guid this cluster belongs to
        """
        return pulumi.get(self, "space_guid")

    @space_guid.setter
    def space_guid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "space_guid", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags for the resource
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("ibm:index/containerBindService:ContainerBindService")
class ContainerBindService(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_name_id: Optional[pulumi.Input[_builtins.str]] = None,
                 container_bind_service_id: Optional[pulumi.Input[_builtins.str]] = None,
                 key: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 org_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 role: Optional[pulumi.Input[_builtins.str]] = None,
                 service_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service_instance_name: Optional[pulumi.Input[_builtins.str]] = None,
                 space_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Create a ContainerBindService resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] account_guid: The bluemix account guid this cluster belongs to
        :param pulumi.Input[_builtins.str] cluster_name_id: Cluster name or ID
        :param pulumi.Input[_builtins.str] key: Key info
        :param pulumi.Input[_builtins.str] namespace_id: namespace ID
        :param pulumi.Input[_builtins.str] org_guid: The bluemix organization guid this cluster belongs to
        :param pulumi.Input[_builtins.str] region: The cluster region
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.str] role: Role info
        :param pulumi.Input[_builtins.str] service_instance_id: Service instance ID
        :param pulumi.Input[_builtins.str] service_instance_name: serivice instance name
        :param pulumi.Input[_builtins.str] space_guid: The bluemix space guid this cluster belongs to
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags for the resource
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ContainerBindServiceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ContainerBindService resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ContainerBindServiceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ContainerBindServiceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_name_id: Optional[pulumi.Input[_builtins.str]] = None,
                 container_bind_service_id: Optional[pulumi.Input[_builtins.str]] = None,
                 key: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 org_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 role: Optional[pulumi.Input[_builtins.str]] = None,
                 service_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service_instance_name: Optional[pulumi.Input[_builtins.str]] = None,
                 space_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ContainerBindServiceArgs.__new__(ContainerBindServiceArgs)

            __props__.__dict__["account_guid"] = account_guid
            if cluster_name_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_name_id'")
            __props__.__dict__["cluster_name_id"] = cluster_name_id
            __props__.__dict__["container_bind_service_id"] = container_bind_service_id
            __props__.__dict__["key"] = key
            if namespace_id is None and not opts.urn:
                raise TypeError("Missing required property 'namespace_id'")
            __props__.__dict__["namespace_id"] = namespace_id
            __props__.__dict__["org_guid"] = org_guid
            __props__.__dict__["region"] = region
            __props__.__dict__["resource_group_id"] = resource_group_id
            __props__.__dict__["role"] = role
            __props__.__dict__["service_instance_id"] = service_instance_id
            __props__.__dict__["service_instance_name"] = service_instance_name
            __props__.__dict__["space_guid"] = space_guid
            __props__.__dict__["tags"] = tags
        super(ContainerBindService, __self__).__init__(
            'ibm:index/containerBindService:ContainerBindService',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_guid: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_name_id: Optional[pulumi.Input[_builtins.str]] = None,
            container_bind_service_id: Optional[pulumi.Input[_builtins.str]] = None,
            key: Optional[pulumi.Input[_builtins.str]] = None,
            namespace_id: Optional[pulumi.Input[_builtins.str]] = None,
            org_guid: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            role: Optional[pulumi.Input[_builtins.str]] = None,
            service_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            service_instance_name: Optional[pulumi.Input[_builtins.str]] = None,
            space_guid: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'ContainerBindService':
        """
        Get an existing ContainerBindService resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] account_guid: The bluemix account guid this cluster belongs to
        :param pulumi.Input[_builtins.str] cluster_name_id: Cluster name or ID
        :param pulumi.Input[_builtins.str] key: Key info
        :param pulumi.Input[_builtins.str] namespace_id: namespace ID
        :param pulumi.Input[_builtins.str] org_guid: The bluemix organization guid this cluster belongs to
        :param pulumi.Input[_builtins.str] region: The cluster region
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.str] role: Role info
        :param pulumi.Input[_builtins.str] service_instance_id: Service instance ID
        :param pulumi.Input[_builtins.str] service_instance_name: serivice instance name
        :param pulumi.Input[_builtins.str] space_guid: The bluemix space guid this cluster belongs to
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags for the resource
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ContainerBindServiceState.__new__(_ContainerBindServiceState)

        __props__.__dict__["account_guid"] = account_guid
        __props__.__dict__["cluster_name_id"] = cluster_name_id
        __props__.__dict__["container_bind_service_id"] = container_bind_service_id
        __props__.__dict__["key"] = key
        __props__.__dict__["namespace_id"] = namespace_id
        __props__.__dict__["org_guid"] = org_guid
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_group_id"] = resource_group_id
        __props__.__dict__["role"] = role
        __props__.__dict__["service_instance_id"] = service_instance_id
        __props__.__dict__["service_instance_name"] = service_instance_name
        __props__.__dict__["space_guid"] = space_guid
        __props__.__dict__["tags"] = tags
        return ContainerBindService(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accountGuid")
    @_utilities.deprecated("""Deprecated""")
    def account_guid(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The bluemix account guid this cluster belongs to
        """
        return pulumi.get(self, "account_guid")

    @_builtins.property
    @pulumi.getter(name="clusterNameId")
    def cluster_name_id(self) -> pulumi.Output[_builtins.str]:
        """
        Cluster name or ID
        """
        return pulumi.get(self, "cluster_name_id")

    @_builtins.property
    @pulumi.getter(name="containerBindServiceId")
    def container_bind_service_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "container_bind_service_id")

    @_builtins.property
    @pulumi.getter
    def key(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Key info
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> pulumi.Output[_builtins.str]:
        """
        namespace ID
        """
        return pulumi.get(self, "namespace_id")

    @_builtins.property
    @pulumi.getter(name="orgGuid")
    @_utilities.deprecated("""Deprecated""")
    def org_guid(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The bluemix organization guid this cluster belongs to
        """
        return pulumi.get(self, "org_guid")

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def region(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The cluster region
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter
    def role(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Role info
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter(name="serviceInstanceId")
    def service_instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Service instance ID
        """
        return pulumi.get(self, "service_instance_id")

    @_builtins.property
    @pulumi.getter(name="serviceInstanceName")
    def service_instance_name(self) -> pulumi.Output[_builtins.str]:
        """
        serivice instance name
        """
        return pulumi.get(self, "service_instance_name")

    @_builtins.property
    @pulumi.getter(name="spaceGuid")
    @_utilities.deprecated("""Deprecated""")
    def space_guid(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The bluemix space guid this cluster belongs to
        """
        return pulumi.get(self, "space_guid")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of tags for the resource
        """
        return pulumi.get(self, "tags")

