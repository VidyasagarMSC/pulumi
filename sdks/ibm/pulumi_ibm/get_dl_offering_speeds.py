# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetDlOfferingSpeedsResult',
    'AwaitableGetDlOfferingSpeedsResult',
    'get_dl_offering_speeds',
    'get_dl_offering_speeds_output',
]

@pulumi.output_type
class GetDlOfferingSpeedsResult:
    """
    A collection of values returned by getDlOfferingSpeeds.
    """
    def __init__(__self__, id=None, offering_speeds=None, offering_type=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if offering_speeds and not isinstance(offering_speeds, list):
            raise TypeError("Expected argument 'offering_speeds' to be a list")
        pulumi.set(__self__, "offering_speeds", offering_speeds)
        if offering_type and not isinstance(offering_type, str):
            raise TypeError("Expected argument 'offering_type' to be a str")
        pulumi.set(__self__, "offering_type", offering_type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="offeringSpeeds")
    def offering_speeds(self) -> Sequence['outputs.GetDlOfferingSpeedsOfferingSpeedResult']:
        return pulumi.get(self, "offering_speeds")

    @_builtins.property
    @pulumi.getter(name="offeringType")
    def offering_type(self) -> _builtins.str:
        return pulumi.get(self, "offering_type")


class AwaitableGetDlOfferingSpeedsResult(GetDlOfferingSpeedsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDlOfferingSpeedsResult(
            id=self.id,
            offering_speeds=self.offering_speeds,
            offering_type=self.offering_type)


def get_dl_offering_speeds(id: Optional[_builtins.str] = None,
                           offering_type: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDlOfferingSpeedsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['offeringType'] = offering_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getDlOfferingSpeeds:getDlOfferingSpeeds', __args__, opts=opts, typ=GetDlOfferingSpeedsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetDlOfferingSpeedsResult(
        id=pulumi.get(__ret__, 'id'),
        offering_speeds=pulumi.get(__ret__, 'offering_speeds'),
        offering_type=pulumi.get(__ret__, 'offering_type'))
def get_dl_offering_speeds_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  offering_type: Optional[pulumi.Input[_builtins.str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDlOfferingSpeedsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['offeringType'] = offering_type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getDlOfferingSpeeds:getDlOfferingSpeeds', __args__, opts=opts, typ=GetDlOfferingSpeedsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetDlOfferingSpeedsResult(
        id=pulumi.get(__response__, 'id'),
        offering_speeds=pulumi.get(__response__, 'offering_speeds'),
        offering_type=pulumi.get(__response__, 'offering_type')))
