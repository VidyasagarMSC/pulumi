# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['CisOriginAuthArgs', 'CisOriginAuth']

@pulumi.input_type
class CisOriginAuthArgs:
    def __init__(__self__, *,
                 certificate: pulumi.Input[_builtins.str],
                 cis_id: pulumi.Input[_builtins.str],
                 domain_id: pulumi.Input[_builtins.str],
                 level: pulumi.Input[_builtins.str],
                 private_key: pulumi.Input[_builtins.str],
                 cis_origin_auth_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CisOriginAuth resource.
        :param pulumi.Input[_builtins.str] certificate: Certificate content which needs to be uploaded
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.str] level: Origin auth level zone or hostname
        :param pulumi.Input[_builtins.str] private_key: Private key content which needs to be uploaded
        :param pulumi.Input[_builtins.bool] enabled: Enabel-disable origin auth for a zone or host
        :param pulumi.Input[_builtins.str] hostname: Host name needed for host level authentication
        """
        pulumi.set(__self__, "certificate", certificate)
        pulumi.set(__self__, "cis_id", cis_id)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "private_key", private_key)
        if cis_origin_auth_id is not None:
            pulumi.set(__self__, "cis_origin_auth_id", cis_origin_auth_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)

    @_builtins.property
    @pulumi.getter
    def certificate(self) -> pulumi.Input[_builtins.str]:
        """
        Certificate content which needs to be uploaded
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "certificate", value)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Input[_builtins.str]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Input[_builtins.str]:
        """
        Associated CIS domain
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter
    def level(self) -> pulumi.Input[_builtins.str]:
        """
        Origin auth level zone or hostname
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "level", value)

    @_builtins.property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Input[_builtins.str]:
        """
        Private key content which needs to be uploaded
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "private_key", value)

    @_builtins.property
    @pulumi.getter(name="cisOriginAuthId")
    def cis_origin_auth_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_origin_auth_id")

    @cis_origin_auth_id.setter
    def cis_origin_auth_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_origin_auth_id", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enabel-disable origin auth for a zone or host
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Host name needed for host level authentication
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hostname", value)


@pulumi.input_type
class _CisOriginAuthState:
    def __init__(__self__, *,
                 auth_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cert_id: Optional[pulumi.Input[_builtins.str]] = None,
                 certificate: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_origin_auth_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 expires_on: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 level: Optional[pulumi.Input[_builtins.str]] = None,
                 private_key: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 uploaded_on: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CisOriginAuth resources.
        :param pulumi.Input[_builtins.str] auth_id: Associated CIS auth pull job id
        :param pulumi.Input[_builtins.str] cert_id: Certificate ID which is uploaded
        :param pulumi.Input[_builtins.str] certificate: Certificate content which needs to be uploaded
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.bool] enabled: Enabel-disable origin auth for a zone or host
        :param pulumi.Input[_builtins.str] expires_on: Certificate expires on
        :param pulumi.Input[_builtins.str] hostname: Host name needed for host level authentication
        :param pulumi.Input[_builtins.str] level: Origin auth level zone or hostname
        :param pulumi.Input[_builtins.str] private_key: Private key content which needs to be uploaded
        :param pulumi.Input[_builtins.str] status: Authentication status whether active or not
        :param pulumi.Input[_builtins.str] uploaded_on: Certificate uploaded on
        """
        if auth_id is not None:
            pulumi.set(__self__, "auth_id", auth_id)
        if cert_id is not None:
            pulumi.set(__self__, "cert_id", cert_id)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if cis_id is not None:
            pulumi.set(__self__, "cis_id", cis_id)
        if cis_origin_auth_id is not None:
            pulumi.set(__self__, "cis_origin_auth_id", cis_origin_auth_id)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if expires_on is not None:
            pulumi.set(__self__, "expires_on", expires_on)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if uploaded_on is not None:
            pulumi.set(__self__, "uploaded_on", uploaded_on)

    @_builtins.property
    @pulumi.getter(name="authId")
    def auth_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Associated CIS auth pull job id
        """
        return pulumi.get(self, "auth_id")

    @auth_id.setter
    def auth_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auth_id", value)

    @_builtins.property
    @pulumi.getter(name="certId")
    def cert_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Certificate ID which is uploaded
        """
        return pulumi.get(self, "cert_id")

    @cert_id.setter
    def cert_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cert_id", value)

    @_builtins.property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Certificate content which needs to be uploaded
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate", value)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter(name="cisOriginAuthId")
    def cis_origin_auth_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_origin_auth_id")

    @cis_origin_auth_id.setter
    def cis_origin_auth_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_origin_auth_id", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Associated CIS domain
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enabel-disable origin auth for a zone or host
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Certificate expires on
        """
        return pulumi.get(self, "expires_on")

    @expires_on.setter
    def expires_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expires_on", value)

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Host name needed for host level authentication
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hostname", value)

    @_builtins.property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Origin auth level zone or hostname
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "level", value)

    @_builtins.property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Private key content which needs to be uploaded
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_key", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Authentication status whether active or not
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="uploadedOn")
    def uploaded_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Certificate uploaded on
        """
        return pulumi.get(self, "uploaded_on")

    @uploaded_on.setter
    def uploaded_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "uploaded_on", value)


@pulumi.type_token("ibm:index/cisOriginAuth:CisOriginAuth")
class CisOriginAuth(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_origin_auth_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 level: Optional[pulumi.Input[_builtins.str]] = None,
                 private_key: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a CisOriginAuth resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] certificate: Certificate content which needs to be uploaded
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.bool] enabled: Enabel-disable origin auth for a zone or host
        :param pulumi.Input[_builtins.str] hostname: Host name needed for host level authentication
        :param pulumi.Input[_builtins.str] level: Origin auth level zone or hostname
        :param pulumi.Input[_builtins.str] private_key: Private key content which needs to be uploaded
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CisOriginAuthArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CisOriginAuth resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CisOriginAuthArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CisOriginAuthArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_origin_auth_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 level: Optional[pulumi.Input[_builtins.str]] = None,
                 private_key: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CisOriginAuthArgs.__new__(CisOriginAuthArgs)

            if certificate is None and not opts.urn:
                raise TypeError("Missing required property 'certificate'")
            __props__.__dict__["certificate"] = None if certificate is None else pulumi.Output.secret(certificate)
            if cis_id is None and not opts.urn:
                raise TypeError("Missing required property 'cis_id'")
            __props__.__dict__["cis_id"] = cis_id
            __props__.__dict__["cis_origin_auth_id"] = cis_origin_auth_id
            if domain_id is None and not opts.urn:
                raise TypeError("Missing required property 'domain_id'")
            __props__.__dict__["domain_id"] = domain_id
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["hostname"] = hostname
            if level is None and not opts.urn:
                raise TypeError("Missing required property 'level'")
            __props__.__dict__["level"] = level
            if private_key is None and not opts.urn:
                raise TypeError("Missing required property 'private_key'")
            __props__.__dict__["private_key"] = None if private_key is None else pulumi.Output.secret(private_key)
            __props__.__dict__["auth_id"] = None
            __props__.__dict__["cert_id"] = None
            __props__.__dict__["expires_on"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["uploaded_on"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["certificate", "privateKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(CisOriginAuth, __self__).__init__(
            'ibm:index/cisOriginAuth:CisOriginAuth',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auth_id: Optional[pulumi.Input[_builtins.str]] = None,
            cert_id: Optional[pulumi.Input[_builtins.str]] = None,
            certificate: Optional[pulumi.Input[_builtins.str]] = None,
            cis_id: Optional[pulumi.Input[_builtins.str]] = None,
            cis_origin_auth_id: Optional[pulumi.Input[_builtins.str]] = None,
            domain_id: Optional[pulumi.Input[_builtins.str]] = None,
            enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            expires_on: Optional[pulumi.Input[_builtins.str]] = None,
            hostname: Optional[pulumi.Input[_builtins.str]] = None,
            level: Optional[pulumi.Input[_builtins.str]] = None,
            private_key: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            uploaded_on: Optional[pulumi.Input[_builtins.str]] = None) -> 'CisOriginAuth':
        """
        Get an existing CisOriginAuth resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] auth_id: Associated CIS auth pull job id
        :param pulumi.Input[_builtins.str] cert_id: Certificate ID which is uploaded
        :param pulumi.Input[_builtins.str] certificate: Certificate content which needs to be uploaded
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.bool] enabled: Enabel-disable origin auth for a zone or host
        :param pulumi.Input[_builtins.str] expires_on: Certificate expires on
        :param pulumi.Input[_builtins.str] hostname: Host name needed for host level authentication
        :param pulumi.Input[_builtins.str] level: Origin auth level zone or hostname
        :param pulumi.Input[_builtins.str] private_key: Private key content which needs to be uploaded
        :param pulumi.Input[_builtins.str] status: Authentication status whether active or not
        :param pulumi.Input[_builtins.str] uploaded_on: Certificate uploaded on
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CisOriginAuthState.__new__(_CisOriginAuthState)

        __props__.__dict__["auth_id"] = auth_id
        __props__.__dict__["cert_id"] = cert_id
        __props__.__dict__["certificate"] = certificate
        __props__.__dict__["cis_id"] = cis_id
        __props__.__dict__["cis_origin_auth_id"] = cis_origin_auth_id
        __props__.__dict__["domain_id"] = domain_id
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["expires_on"] = expires_on
        __props__.__dict__["hostname"] = hostname
        __props__.__dict__["level"] = level
        __props__.__dict__["private_key"] = private_key
        __props__.__dict__["status"] = status
        __props__.__dict__["uploaded_on"] = uploaded_on
        return CisOriginAuth(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="authId")
    def auth_id(self) -> pulumi.Output[_builtins.str]:
        """
        Associated CIS auth pull job id
        """
        return pulumi.get(self, "auth_id")

    @_builtins.property
    @pulumi.getter(name="certId")
    def cert_id(self) -> pulumi.Output[_builtins.str]:
        """
        Certificate ID which is uploaded
        """
        return pulumi.get(self, "cert_id")

    @_builtins.property
    @pulumi.getter
    def certificate(self) -> pulumi.Output[_builtins.str]:
        """
        Certificate content which needs to be uploaded
        """
        return pulumi.get(self, "certificate")

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Output[_builtins.str]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @_builtins.property
    @pulumi.getter(name="cisOriginAuthId")
    def cis_origin_auth_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cis_origin_auth_id")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Output[_builtins.str]:
        """
        Associated CIS domain
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Enabel-disable origin auth for a zone or host
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> pulumi.Output[_builtins.str]:
        """
        Certificate expires on
        """
        return pulumi.get(self, "expires_on")

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Host name needed for host level authentication
        """
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter
    def level(self) -> pulumi.Output[_builtins.str]:
        """
        Origin auth level zone or hostname
        """
        return pulumi.get(self, "level")

    @_builtins.property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Output[_builtins.str]:
        """
        Private key content which needs to be uploaded
        """
        return pulumi.get(self, "private_key")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Authentication status whether active or not
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="uploadedOn")
    def uploaded_on(self) -> pulumi.Output[_builtins.str]:
        """
        Certificate uploaded on
        """
        return pulumi.get(self, "uploaded_on")

