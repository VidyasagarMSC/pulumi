# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ServiceKeyArgs', 'ServiceKey']

@pulumi.input_type
class ServiceKeyArgs:
    def __init__(__self__, *,
                 service_instance_guid: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 service_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a ServiceKey resource.
        :param pulumi.Input[_builtins.str] service_instance_guid: The guid of the service instance for which to create service key
        :param pulumi.Input[_builtins.str] name: The name of the service key
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] parameters: Arbitrary parameters to pass along to the service broker. Must be a JSON object
        """
        pulumi.set(__self__, "service_instance_guid", service_instance_guid)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if service_key_id is not None:
            pulumi.set(__self__, "service_key_id", service_key_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="serviceInstanceGuid")
    def service_instance_guid(self) -> pulumi.Input[_builtins.str]:
        """
        The guid of the service instance for which to create service key
        """
        return pulumi.get(self, "service_instance_guid")

    @service_instance_guid.setter
    def service_instance_guid(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "service_instance_guid", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the service key
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Arbitrary parameters to pass along to the service broker. Must be a JSON object
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter(name="serviceKeyId")
    def service_key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "service_key_id")

    @service_key_id.setter
    def service_key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_key_id", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _ServiceKeyState:
    def __init__(__self__, *,
                 credentials: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 service_instance_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 service_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering ServiceKey resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] credentials: Credentials asociated with the key
        :param pulumi.Input[_builtins.str] name: The name of the service key
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] parameters: Arbitrary parameters to pass along to the service broker. Must be a JSON object
        :param pulumi.Input[_builtins.str] service_instance_guid: The guid of the service instance for which to create service key
        """
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if service_instance_guid is not None:
            pulumi.set(__self__, "service_instance_guid", service_instance_guid)
        if service_key_id is not None:
            pulumi.set(__self__, "service_key_id", service_key_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Credentials asociated with the key
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "credentials", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the service key
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Arbitrary parameters to pass along to the service broker. Must be a JSON object
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter(name="serviceInstanceGuid")
    def service_instance_guid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The guid of the service instance for which to create service key
        """
        return pulumi.get(self, "service_instance_guid")

    @service_instance_guid.setter
    def service_instance_guid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_instance_guid", value)

    @_builtins.property
    @pulumi.getter(name="serviceKeyId")
    def service_key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "service_key_id")

    @service_key_id.setter
    def service_key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_key_id", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("ibm:index/serviceKey:ServiceKey")
class ServiceKey(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 service_instance_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 service_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Create a ServiceKey resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: The name of the service key
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] parameters: Arbitrary parameters to pass along to the service broker. Must be a JSON object
        :param pulumi.Input[_builtins.str] service_instance_guid: The guid of the service instance for which to create service key
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ServiceKeyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ServiceKey resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ServiceKeyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServiceKeyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 service_instance_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 service_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServiceKeyArgs.__new__(ServiceKeyArgs)

            __props__.__dict__["name"] = name
            __props__.__dict__["parameters"] = parameters
            if service_instance_guid is None and not opts.urn:
                raise TypeError("Missing required property 'service_instance_guid'")
            __props__.__dict__["service_instance_guid"] = service_instance_guid
            __props__.__dict__["service_key_id"] = service_key_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["credentials"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["credentials"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ServiceKey, __self__).__init__(
            'ibm:index/serviceKey:ServiceKey',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            credentials: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            service_instance_guid: Optional[pulumi.Input[_builtins.str]] = None,
            service_key_id: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'ServiceKey':
        """
        Get an existing ServiceKey resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] credentials: Credentials asociated with the key
        :param pulumi.Input[_builtins.str] name: The name of the service key
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] parameters: Arbitrary parameters to pass along to the service broker. Must be a JSON object
        :param pulumi.Input[_builtins.str] service_instance_guid: The guid of the service instance for which to create service key
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServiceKeyState.__new__(_ServiceKeyState)

        __props__.__dict__["credentials"] = credentials
        __props__.__dict__["name"] = name
        __props__.__dict__["parameters"] = parameters
        __props__.__dict__["service_instance_guid"] = service_instance_guid
        __props__.__dict__["service_key_id"] = service_key_id
        __props__.__dict__["tags"] = tags
        return ServiceKey(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def credentials(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Credentials asociated with the key
        """
        return pulumi.get(self, "credentials")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the service key
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Arbitrary parameters to pass along to the service broker. Must be a JSON object
        """
        return pulumi.get(self, "parameters")

    @_builtins.property
    @pulumi.getter(name="serviceInstanceGuid")
    def service_instance_guid(self) -> pulumi.Output[_builtins.str]:
        """
        The guid of the service instance for which to create service key
        """
        return pulumi.get(self, "service_instance_guid")

    @_builtins.property
    @pulumi.getter(name="serviceKeyId")
    def service_key_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "service_key_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        return pulumi.get(self, "tags")

