# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsLbPoolArgs', 'IsLbPool']

@pulumi.input_type
class IsLbPoolArgs:
    def __init__(__self__, *,
                 algorithm: pulumi.Input[_builtins.str],
                 health_delay: pulumi.Input[_builtins.float],
                 health_retries: pulumi.Input[_builtins.float],
                 health_timeout: pulumi.Input[_builtins.float],
                 health_type: pulumi.Input[_builtins.str],
                 lb: pulumi.Input[_builtins.str],
                 protocol: pulumi.Input[_builtins.str],
                 failsafe_policy: Optional[pulumi.Input['IsLbPoolFailsafePolicyArgs']] = None,
                 health_monitor_port: Optional[pulumi.Input[_builtins.float]] = None,
                 health_monitor_url: Optional[pulumi.Input[_builtins.str]] = None,
                 is_lb_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 proxy_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 session_persistence_app_cookie_name: Optional[pulumi.Input[_builtins.str]] = None,
                 session_persistence_type: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['IsLbPoolTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a IsLbPool resource.
        :param pulumi.Input[_builtins.str] algorithm: Load Balancer Pool algorithm
        :param pulumi.Input[_builtins.float] health_delay: Load Blancer health delay time period
        :param pulumi.Input[_builtins.float] health_retries: Load Balancer health retry count
        :param pulumi.Input[_builtins.float] health_timeout: Load Balancer health timeout interval
        :param pulumi.Input[_builtins.str] health_type: Load Balancer health type
        :param pulumi.Input[_builtins.str] lb: Load Balancer ID
        :param pulumi.Input[_builtins.str] protocol: Load Balancer Protocol
        :param pulumi.Input['IsLbPoolFailsafePolicyArgs'] failsafe_policy: The failsafe policy to use for this pool.If unspecified, the default failsafe policy action from the profile will be
               used.
        :param pulumi.Input[_builtins.float] health_monitor_port: Health monitor Port the LB Pool
        :param pulumi.Input[_builtins.str] health_monitor_url: Health monitor URL of LB Pool
        :param pulumi.Input[_builtins.str] name: Load Balancer Pool name
        :param pulumi.Input[_builtins.str] proxy_protocol: PROXY protocol setting for this pool
        :param pulumi.Input[_builtins.str] session_persistence_app_cookie_name: Load Balancer Pool session persisence app cookie name.
        :param pulumi.Input[_builtins.str] session_persistence_type: Load Balancer Pool session persisence type.
        """
        pulumi.set(__self__, "algorithm", algorithm)
        pulumi.set(__self__, "health_delay", health_delay)
        pulumi.set(__self__, "health_retries", health_retries)
        pulumi.set(__self__, "health_timeout", health_timeout)
        pulumi.set(__self__, "health_type", health_type)
        pulumi.set(__self__, "lb", lb)
        pulumi.set(__self__, "protocol", protocol)
        if failsafe_policy is not None:
            pulumi.set(__self__, "failsafe_policy", failsafe_policy)
        if health_monitor_port is not None:
            pulumi.set(__self__, "health_monitor_port", health_monitor_port)
        if health_monitor_url is not None:
            pulumi.set(__self__, "health_monitor_url", health_monitor_url)
        if is_lb_pool_id is not None:
            pulumi.set(__self__, "is_lb_pool_id", is_lb_pool_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if proxy_protocol is not None:
            pulumi.set(__self__, "proxy_protocol", proxy_protocol)
        if session_persistence_app_cookie_name is not None:
            pulumi.set(__self__, "session_persistence_app_cookie_name", session_persistence_app_cookie_name)
        if session_persistence_type is not None:
            pulumi.set(__self__, "session_persistence_type", session_persistence_type)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def algorithm(self) -> pulumi.Input[_builtins.str]:
        """
        Load Balancer Pool algorithm
        """
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "algorithm", value)

    @_builtins.property
    @pulumi.getter(name="healthDelay")
    def health_delay(self) -> pulumi.Input[_builtins.float]:
        """
        Load Blancer health delay time period
        """
        return pulumi.get(self, "health_delay")

    @health_delay.setter
    def health_delay(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "health_delay", value)

    @_builtins.property
    @pulumi.getter(name="healthRetries")
    def health_retries(self) -> pulumi.Input[_builtins.float]:
        """
        Load Balancer health retry count
        """
        return pulumi.get(self, "health_retries")

    @health_retries.setter
    def health_retries(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "health_retries", value)

    @_builtins.property
    @pulumi.getter(name="healthTimeout")
    def health_timeout(self) -> pulumi.Input[_builtins.float]:
        """
        Load Balancer health timeout interval
        """
        return pulumi.get(self, "health_timeout")

    @health_timeout.setter
    def health_timeout(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "health_timeout", value)

    @_builtins.property
    @pulumi.getter(name="healthType")
    def health_type(self) -> pulumi.Input[_builtins.str]:
        """
        Load Balancer health type
        """
        return pulumi.get(self, "health_type")

    @health_type.setter
    def health_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "health_type", value)

    @_builtins.property
    @pulumi.getter
    def lb(self) -> pulumi.Input[_builtins.str]:
        """
        Load Balancer ID
        """
        return pulumi.get(self, "lb")

    @lb.setter
    def lb(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "lb", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[_builtins.str]:
        """
        Load Balancer Protocol
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="failsafePolicy")
    def failsafe_policy(self) -> Optional[pulumi.Input['IsLbPoolFailsafePolicyArgs']]:
        """
        The failsafe policy to use for this pool.If unspecified, the default failsafe policy action from the profile will be
        used.
        """
        return pulumi.get(self, "failsafe_policy")

    @failsafe_policy.setter
    def failsafe_policy(self, value: Optional[pulumi.Input['IsLbPoolFailsafePolicyArgs']]):
        pulumi.set(self, "failsafe_policy", value)

    @_builtins.property
    @pulumi.getter(name="healthMonitorPort")
    def health_monitor_port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Health monitor Port the LB Pool
        """
        return pulumi.get(self, "health_monitor_port")

    @health_monitor_port.setter
    def health_monitor_port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "health_monitor_port", value)

    @_builtins.property
    @pulumi.getter(name="healthMonitorUrl")
    def health_monitor_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Health monitor URL of LB Pool
        """
        return pulumi.get(self, "health_monitor_url")

    @health_monitor_url.setter
    def health_monitor_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "health_monitor_url", value)

    @_builtins.property
    @pulumi.getter(name="isLbPoolId")
    def is_lb_pool_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_lb_pool_id")

    @is_lb_pool_id.setter
    def is_lb_pool_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_lb_pool_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Load Balancer Pool name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="proxyProtocol")
    def proxy_protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        PROXY protocol setting for this pool
        """
        return pulumi.get(self, "proxy_protocol")

    @proxy_protocol.setter
    def proxy_protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "proxy_protocol", value)

    @_builtins.property
    @pulumi.getter(name="sessionPersistenceAppCookieName")
    def session_persistence_app_cookie_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Load Balancer Pool session persisence app cookie name.
        """
        return pulumi.get(self, "session_persistence_app_cookie_name")

    @session_persistence_app_cookie_name.setter
    def session_persistence_app_cookie_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "session_persistence_app_cookie_name", value)

    @_builtins.property
    @pulumi.getter(name="sessionPersistenceType")
    def session_persistence_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Load Balancer Pool session persisence type.
        """
        return pulumi.get(self, "session_persistence_type")

    @session_persistence_type.setter
    def session_persistence_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "session_persistence_type", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsLbPoolTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsLbPoolTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _IsLbPoolState:
    def __init__(__self__, *,
                 algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 failsafe_policy: Optional[pulumi.Input['IsLbPoolFailsafePolicyArgs']] = None,
                 health_delay: Optional[pulumi.Input[_builtins.float]] = None,
                 health_monitor_port: Optional[pulumi.Input[_builtins.float]] = None,
                 health_monitor_url: Optional[pulumi.Input[_builtins.str]] = None,
                 health_retries: Optional[pulumi.Input[_builtins.float]] = None,
                 health_timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 health_type: Optional[pulumi.Input[_builtins.str]] = None,
                 is_lb_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lb: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 provisioning_status: Optional[pulumi.Input[_builtins.str]] = None,
                 proxy_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 related_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 session_persistence_app_cookie_name: Optional[pulumi.Input[_builtins.str]] = None,
                 session_persistence_http_cookie_name: Optional[pulumi.Input[_builtins.str]] = None,
                 session_persistence_type: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['IsLbPoolTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering IsLbPool resources.
        :param pulumi.Input[_builtins.str] algorithm: Load Balancer Pool algorithm
        :param pulumi.Input['IsLbPoolFailsafePolicyArgs'] failsafe_policy: The failsafe policy to use for this pool.If unspecified, the default failsafe policy action from the profile will be
               used.
        :param pulumi.Input[_builtins.float] health_delay: Load Blancer health delay time period
        :param pulumi.Input[_builtins.float] health_monitor_port: Health monitor Port the LB Pool
        :param pulumi.Input[_builtins.str] health_monitor_url: Health monitor URL of LB Pool
        :param pulumi.Input[_builtins.float] health_retries: Load Balancer health retry count
        :param pulumi.Input[_builtins.float] health_timeout: Load Balancer health timeout interval
        :param pulumi.Input[_builtins.str] health_type: Load Balancer health type
        :param pulumi.Input[_builtins.str] lb: Load Balancer ID
        :param pulumi.Input[_builtins.str] name: Load Balancer Pool name
        :param pulumi.Input[_builtins.str] pool_id: The LB Pool id
        :param pulumi.Input[_builtins.str] protocol: Load Balancer Protocol
        :param pulumi.Input[_builtins.str] provisioning_status: Status of the LB Pool
        :param pulumi.Input[_builtins.str] proxy_protocol: PROXY protocol setting for this pool
        :param pulumi.Input[_builtins.str] related_crn: The crn of the LB resource
        :param pulumi.Input[_builtins.str] session_persistence_app_cookie_name: Load Balancer Pool session persisence app cookie name.
        :param pulumi.Input[_builtins.str] session_persistence_http_cookie_name: Load Balancer Pool session persisence http cookie name.
        :param pulumi.Input[_builtins.str] session_persistence_type: Load Balancer Pool session persisence type.
        """
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if failsafe_policy is not None:
            pulumi.set(__self__, "failsafe_policy", failsafe_policy)
        if health_delay is not None:
            pulumi.set(__self__, "health_delay", health_delay)
        if health_monitor_port is not None:
            pulumi.set(__self__, "health_monitor_port", health_monitor_port)
        if health_monitor_url is not None:
            pulumi.set(__self__, "health_monitor_url", health_monitor_url)
        if health_retries is not None:
            pulumi.set(__self__, "health_retries", health_retries)
        if health_timeout is not None:
            pulumi.set(__self__, "health_timeout", health_timeout)
        if health_type is not None:
            pulumi.set(__self__, "health_type", health_type)
        if is_lb_pool_id is not None:
            pulumi.set(__self__, "is_lb_pool_id", is_lb_pool_id)
        if lb is not None:
            pulumi.set(__self__, "lb", lb)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pool_id is not None:
            pulumi.set(__self__, "pool_id", pool_id)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if provisioning_status is not None:
            pulumi.set(__self__, "provisioning_status", provisioning_status)
        if proxy_protocol is not None:
            pulumi.set(__self__, "proxy_protocol", proxy_protocol)
        if related_crn is not None:
            pulumi.set(__self__, "related_crn", related_crn)
        if session_persistence_app_cookie_name is not None:
            pulumi.set(__self__, "session_persistence_app_cookie_name", session_persistence_app_cookie_name)
        if session_persistence_http_cookie_name is not None:
            pulumi.set(__self__, "session_persistence_http_cookie_name", session_persistence_http_cookie_name)
        if session_persistence_type is not None:
            pulumi.set(__self__, "session_persistence_type", session_persistence_type)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def algorithm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Load Balancer Pool algorithm
        """
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "algorithm", value)

    @_builtins.property
    @pulumi.getter(name="failsafePolicy")
    def failsafe_policy(self) -> Optional[pulumi.Input['IsLbPoolFailsafePolicyArgs']]:
        """
        The failsafe policy to use for this pool.If unspecified, the default failsafe policy action from the profile will be
        used.
        """
        return pulumi.get(self, "failsafe_policy")

    @failsafe_policy.setter
    def failsafe_policy(self, value: Optional[pulumi.Input['IsLbPoolFailsafePolicyArgs']]):
        pulumi.set(self, "failsafe_policy", value)

    @_builtins.property
    @pulumi.getter(name="healthDelay")
    def health_delay(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Load Blancer health delay time period
        """
        return pulumi.get(self, "health_delay")

    @health_delay.setter
    def health_delay(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "health_delay", value)

    @_builtins.property
    @pulumi.getter(name="healthMonitorPort")
    def health_monitor_port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Health monitor Port the LB Pool
        """
        return pulumi.get(self, "health_monitor_port")

    @health_monitor_port.setter
    def health_monitor_port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "health_monitor_port", value)

    @_builtins.property
    @pulumi.getter(name="healthMonitorUrl")
    def health_monitor_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Health monitor URL of LB Pool
        """
        return pulumi.get(self, "health_monitor_url")

    @health_monitor_url.setter
    def health_monitor_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "health_monitor_url", value)

    @_builtins.property
    @pulumi.getter(name="healthRetries")
    def health_retries(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Load Balancer health retry count
        """
        return pulumi.get(self, "health_retries")

    @health_retries.setter
    def health_retries(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "health_retries", value)

    @_builtins.property
    @pulumi.getter(name="healthTimeout")
    def health_timeout(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Load Balancer health timeout interval
        """
        return pulumi.get(self, "health_timeout")

    @health_timeout.setter
    def health_timeout(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "health_timeout", value)

    @_builtins.property
    @pulumi.getter(name="healthType")
    def health_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Load Balancer health type
        """
        return pulumi.get(self, "health_type")

    @health_type.setter
    def health_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "health_type", value)

    @_builtins.property
    @pulumi.getter(name="isLbPoolId")
    def is_lb_pool_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_lb_pool_id")

    @is_lb_pool_id.setter
    def is_lb_pool_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_lb_pool_id", value)

    @_builtins.property
    @pulumi.getter
    def lb(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Load Balancer ID
        """
        return pulumi.get(self, "lb")

    @lb.setter
    def lb(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lb", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Load Balancer Pool name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="poolId")
    def pool_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The LB Pool id
        """
        return pulumi.get(self, "pool_id")

    @pool_id.setter
    def pool_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pool_id", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Load Balancer Protocol
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Status of the LB Pool
        """
        return pulumi.get(self, "provisioning_status")

    @provisioning_status.setter
    def provisioning_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "provisioning_status", value)

    @_builtins.property
    @pulumi.getter(name="proxyProtocol")
    def proxy_protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        PROXY protocol setting for this pool
        """
        return pulumi.get(self, "proxy_protocol")

    @proxy_protocol.setter
    def proxy_protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "proxy_protocol", value)

    @_builtins.property
    @pulumi.getter(name="relatedCrn")
    def related_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The crn of the LB resource
        """
        return pulumi.get(self, "related_crn")

    @related_crn.setter
    def related_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "related_crn", value)

    @_builtins.property
    @pulumi.getter(name="sessionPersistenceAppCookieName")
    def session_persistence_app_cookie_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Load Balancer Pool session persisence app cookie name.
        """
        return pulumi.get(self, "session_persistence_app_cookie_name")

    @session_persistence_app_cookie_name.setter
    def session_persistence_app_cookie_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "session_persistence_app_cookie_name", value)

    @_builtins.property
    @pulumi.getter(name="sessionPersistenceHttpCookieName")
    def session_persistence_http_cookie_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Load Balancer Pool session persisence http cookie name.
        """
        return pulumi.get(self, "session_persistence_http_cookie_name")

    @session_persistence_http_cookie_name.setter
    def session_persistence_http_cookie_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "session_persistence_http_cookie_name", value)

    @_builtins.property
    @pulumi.getter(name="sessionPersistenceType")
    def session_persistence_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Load Balancer Pool session persisence type.
        """
        return pulumi.get(self, "session_persistence_type")

    @session_persistence_type.setter
    def session_persistence_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "session_persistence_type", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsLbPoolTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsLbPoolTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/isLbPool:IsLbPool")
class IsLbPool(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 failsafe_policy: Optional[pulumi.Input[Union['IsLbPoolFailsafePolicyArgs', 'IsLbPoolFailsafePolicyArgsDict']]] = None,
                 health_delay: Optional[pulumi.Input[_builtins.float]] = None,
                 health_monitor_port: Optional[pulumi.Input[_builtins.float]] = None,
                 health_monitor_url: Optional[pulumi.Input[_builtins.str]] = None,
                 health_retries: Optional[pulumi.Input[_builtins.float]] = None,
                 health_timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 health_type: Optional[pulumi.Input[_builtins.str]] = None,
                 is_lb_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lb: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 proxy_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 session_persistence_app_cookie_name: Optional[pulumi.Input[_builtins.str]] = None,
                 session_persistence_type: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsLbPoolTimeoutsArgs', 'IsLbPoolTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a IsLbPool resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] algorithm: Load Balancer Pool algorithm
        :param pulumi.Input[Union['IsLbPoolFailsafePolicyArgs', 'IsLbPoolFailsafePolicyArgsDict']] failsafe_policy: The failsafe policy to use for this pool.If unspecified, the default failsafe policy action from the profile will be
               used.
        :param pulumi.Input[_builtins.float] health_delay: Load Blancer health delay time period
        :param pulumi.Input[_builtins.float] health_monitor_port: Health monitor Port the LB Pool
        :param pulumi.Input[_builtins.str] health_monitor_url: Health monitor URL of LB Pool
        :param pulumi.Input[_builtins.float] health_retries: Load Balancer health retry count
        :param pulumi.Input[_builtins.float] health_timeout: Load Balancer health timeout interval
        :param pulumi.Input[_builtins.str] health_type: Load Balancer health type
        :param pulumi.Input[_builtins.str] lb: Load Balancer ID
        :param pulumi.Input[_builtins.str] name: Load Balancer Pool name
        :param pulumi.Input[_builtins.str] protocol: Load Balancer Protocol
        :param pulumi.Input[_builtins.str] proxy_protocol: PROXY protocol setting for this pool
        :param pulumi.Input[_builtins.str] session_persistence_app_cookie_name: Load Balancer Pool session persisence app cookie name.
        :param pulumi.Input[_builtins.str] session_persistence_type: Load Balancer Pool session persisence type.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsLbPoolArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsLbPool resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsLbPoolArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsLbPoolArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 failsafe_policy: Optional[pulumi.Input[Union['IsLbPoolFailsafePolicyArgs', 'IsLbPoolFailsafePolicyArgsDict']]] = None,
                 health_delay: Optional[pulumi.Input[_builtins.float]] = None,
                 health_monitor_port: Optional[pulumi.Input[_builtins.float]] = None,
                 health_monitor_url: Optional[pulumi.Input[_builtins.str]] = None,
                 health_retries: Optional[pulumi.Input[_builtins.float]] = None,
                 health_timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 health_type: Optional[pulumi.Input[_builtins.str]] = None,
                 is_lb_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lb: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 proxy_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 session_persistence_app_cookie_name: Optional[pulumi.Input[_builtins.str]] = None,
                 session_persistence_type: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsLbPoolTimeoutsArgs', 'IsLbPoolTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsLbPoolArgs.__new__(IsLbPoolArgs)

            if algorithm is None and not opts.urn:
                raise TypeError("Missing required property 'algorithm'")
            __props__.__dict__["algorithm"] = algorithm
            __props__.__dict__["failsafe_policy"] = failsafe_policy
            if health_delay is None and not opts.urn:
                raise TypeError("Missing required property 'health_delay'")
            __props__.__dict__["health_delay"] = health_delay
            __props__.__dict__["health_monitor_port"] = health_monitor_port
            __props__.__dict__["health_monitor_url"] = health_monitor_url
            if health_retries is None and not opts.urn:
                raise TypeError("Missing required property 'health_retries'")
            __props__.__dict__["health_retries"] = health_retries
            if health_timeout is None and not opts.urn:
                raise TypeError("Missing required property 'health_timeout'")
            __props__.__dict__["health_timeout"] = health_timeout
            if health_type is None and not opts.urn:
                raise TypeError("Missing required property 'health_type'")
            __props__.__dict__["health_type"] = health_type
            __props__.__dict__["is_lb_pool_id"] = is_lb_pool_id
            if lb is None and not opts.urn:
                raise TypeError("Missing required property 'lb'")
            __props__.__dict__["lb"] = lb
            __props__.__dict__["name"] = name
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["proxy_protocol"] = proxy_protocol
            __props__.__dict__["session_persistence_app_cookie_name"] = session_persistence_app_cookie_name
            __props__.__dict__["session_persistence_type"] = session_persistence_type
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["pool_id"] = None
            __props__.__dict__["provisioning_status"] = None
            __props__.__dict__["related_crn"] = None
            __props__.__dict__["session_persistence_http_cookie_name"] = None
        super(IsLbPool, __self__).__init__(
            'ibm:index/isLbPool:IsLbPool',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            algorithm: Optional[pulumi.Input[_builtins.str]] = None,
            failsafe_policy: Optional[pulumi.Input[Union['IsLbPoolFailsafePolicyArgs', 'IsLbPoolFailsafePolicyArgsDict']]] = None,
            health_delay: Optional[pulumi.Input[_builtins.float]] = None,
            health_monitor_port: Optional[pulumi.Input[_builtins.float]] = None,
            health_monitor_url: Optional[pulumi.Input[_builtins.str]] = None,
            health_retries: Optional[pulumi.Input[_builtins.float]] = None,
            health_timeout: Optional[pulumi.Input[_builtins.float]] = None,
            health_type: Optional[pulumi.Input[_builtins.str]] = None,
            is_lb_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
            lb: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            pool_id: Optional[pulumi.Input[_builtins.str]] = None,
            protocol: Optional[pulumi.Input[_builtins.str]] = None,
            provisioning_status: Optional[pulumi.Input[_builtins.str]] = None,
            proxy_protocol: Optional[pulumi.Input[_builtins.str]] = None,
            related_crn: Optional[pulumi.Input[_builtins.str]] = None,
            session_persistence_app_cookie_name: Optional[pulumi.Input[_builtins.str]] = None,
            session_persistence_http_cookie_name: Optional[pulumi.Input[_builtins.str]] = None,
            session_persistence_type: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['IsLbPoolTimeoutsArgs', 'IsLbPoolTimeoutsArgsDict']]] = None) -> 'IsLbPool':
        """
        Get an existing IsLbPool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] algorithm: Load Balancer Pool algorithm
        :param pulumi.Input[Union['IsLbPoolFailsafePolicyArgs', 'IsLbPoolFailsafePolicyArgsDict']] failsafe_policy: The failsafe policy to use for this pool.If unspecified, the default failsafe policy action from the profile will be
               used.
        :param pulumi.Input[_builtins.float] health_delay: Load Blancer health delay time period
        :param pulumi.Input[_builtins.float] health_monitor_port: Health monitor Port the LB Pool
        :param pulumi.Input[_builtins.str] health_monitor_url: Health monitor URL of LB Pool
        :param pulumi.Input[_builtins.float] health_retries: Load Balancer health retry count
        :param pulumi.Input[_builtins.float] health_timeout: Load Balancer health timeout interval
        :param pulumi.Input[_builtins.str] health_type: Load Balancer health type
        :param pulumi.Input[_builtins.str] lb: Load Balancer ID
        :param pulumi.Input[_builtins.str] name: Load Balancer Pool name
        :param pulumi.Input[_builtins.str] pool_id: The LB Pool id
        :param pulumi.Input[_builtins.str] protocol: Load Balancer Protocol
        :param pulumi.Input[_builtins.str] provisioning_status: Status of the LB Pool
        :param pulumi.Input[_builtins.str] proxy_protocol: PROXY protocol setting for this pool
        :param pulumi.Input[_builtins.str] related_crn: The crn of the LB resource
        :param pulumi.Input[_builtins.str] session_persistence_app_cookie_name: Load Balancer Pool session persisence app cookie name.
        :param pulumi.Input[_builtins.str] session_persistence_http_cookie_name: Load Balancer Pool session persisence http cookie name.
        :param pulumi.Input[_builtins.str] session_persistence_type: Load Balancer Pool session persisence type.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsLbPoolState.__new__(_IsLbPoolState)

        __props__.__dict__["algorithm"] = algorithm
        __props__.__dict__["failsafe_policy"] = failsafe_policy
        __props__.__dict__["health_delay"] = health_delay
        __props__.__dict__["health_monitor_port"] = health_monitor_port
        __props__.__dict__["health_monitor_url"] = health_monitor_url
        __props__.__dict__["health_retries"] = health_retries
        __props__.__dict__["health_timeout"] = health_timeout
        __props__.__dict__["health_type"] = health_type
        __props__.__dict__["is_lb_pool_id"] = is_lb_pool_id
        __props__.__dict__["lb"] = lb
        __props__.__dict__["name"] = name
        __props__.__dict__["pool_id"] = pool_id
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["provisioning_status"] = provisioning_status
        __props__.__dict__["proxy_protocol"] = proxy_protocol
        __props__.__dict__["related_crn"] = related_crn
        __props__.__dict__["session_persistence_app_cookie_name"] = session_persistence_app_cookie_name
        __props__.__dict__["session_persistence_http_cookie_name"] = session_persistence_http_cookie_name
        __props__.__dict__["session_persistence_type"] = session_persistence_type
        __props__.__dict__["timeouts"] = timeouts
        return IsLbPool(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def algorithm(self) -> pulumi.Output[_builtins.str]:
        """
        Load Balancer Pool algorithm
        """
        return pulumi.get(self, "algorithm")

    @_builtins.property
    @pulumi.getter(name="failsafePolicy")
    def failsafe_policy(self) -> pulumi.Output[Optional['outputs.IsLbPoolFailsafePolicy']]:
        """
        The failsafe policy to use for this pool.If unspecified, the default failsafe policy action from the profile will be
        used.
        """
        return pulumi.get(self, "failsafe_policy")

    @_builtins.property
    @pulumi.getter(name="healthDelay")
    def health_delay(self) -> pulumi.Output[_builtins.float]:
        """
        Load Blancer health delay time period
        """
        return pulumi.get(self, "health_delay")

    @_builtins.property
    @pulumi.getter(name="healthMonitorPort")
    def health_monitor_port(self) -> pulumi.Output[_builtins.float]:
        """
        Health monitor Port the LB Pool
        """
        return pulumi.get(self, "health_monitor_port")

    @_builtins.property
    @pulumi.getter(name="healthMonitorUrl")
    def health_monitor_url(self) -> pulumi.Output[_builtins.str]:
        """
        Health monitor URL of LB Pool
        """
        return pulumi.get(self, "health_monitor_url")

    @_builtins.property
    @pulumi.getter(name="healthRetries")
    def health_retries(self) -> pulumi.Output[_builtins.float]:
        """
        Load Balancer health retry count
        """
        return pulumi.get(self, "health_retries")

    @_builtins.property
    @pulumi.getter(name="healthTimeout")
    def health_timeout(self) -> pulumi.Output[_builtins.float]:
        """
        Load Balancer health timeout interval
        """
        return pulumi.get(self, "health_timeout")

    @_builtins.property
    @pulumi.getter(name="healthType")
    def health_type(self) -> pulumi.Output[_builtins.str]:
        """
        Load Balancer health type
        """
        return pulumi.get(self, "health_type")

    @_builtins.property
    @pulumi.getter(name="isLbPoolId")
    def is_lb_pool_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_lb_pool_id")

    @_builtins.property
    @pulumi.getter
    def lb(self) -> pulumi.Output[_builtins.str]:
        """
        Load Balancer ID
        """
        return pulumi.get(self, "lb")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Load Balancer Pool name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="poolId")
    def pool_id(self) -> pulumi.Output[_builtins.str]:
        """
        The LB Pool id
        """
        return pulumi.get(self, "pool_id")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[_builtins.str]:
        """
        Load Balancer Protocol
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> pulumi.Output[_builtins.str]:
        """
        Status of the LB Pool
        """
        return pulumi.get(self, "provisioning_status")

    @_builtins.property
    @pulumi.getter(name="proxyProtocol")
    def proxy_protocol(self) -> pulumi.Output[_builtins.str]:
        """
        PROXY protocol setting for this pool
        """
        return pulumi.get(self, "proxy_protocol")

    @_builtins.property
    @pulumi.getter(name="relatedCrn")
    def related_crn(self) -> pulumi.Output[_builtins.str]:
        """
        The crn of the LB resource
        """
        return pulumi.get(self, "related_crn")

    @_builtins.property
    @pulumi.getter(name="sessionPersistenceAppCookieName")
    def session_persistence_app_cookie_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Load Balancer Pool session persisence app cookie name.
        """
        return pulumi.get(self, "session_persistence_app_cookie_name")

    @_builtins.property
    @pulumi.getter(name="sessionPersistenceHttpCookieName")
    def session_persistence_http_cookie_name(self) -> pulumi.Output[_builtins.str]:
        """
        Load Balancer Pool session persisence http cookie name.
        """
        return pulumi.get(self, "session_persistence_http_cookie_name")

    @_builtins.property
    @pulumi.getter(name="sessionPersistenceType")
    def session_persistence_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Load Balancer Pool session persisence type.
        """
        return pulumi.get(self, "session_persistence_type")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IsLbPoolTimeouts']]:
        return pulumi.get(self, "timeouts")

