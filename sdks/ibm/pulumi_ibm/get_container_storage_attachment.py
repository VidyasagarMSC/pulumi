# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetContainerStorageAttachmentResult',
    'AwaitableGetContainerStorageAttachmentResult',
    'get_container_storage_attachment',
    'get_container_storage_attachment_output',
]

@pulumi.output_type
class GetContainerStorageAttachmentResult:
    """
    A collection of values returned by getContainerStorageAttachment.
    """
    def __init__(__self__, cluster=None, id=None, resource_group_id=None, status=None, volume=None, volume_attachment_id=None, volume_attachment_name=None, volume_type=None, worker=None):
        if cluster and not isinstance(cluster, str):
            raise TypeError("Expected argument 'cluster' to be a str")
        pulumi.set(__self__, "cluster", cluster)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if resource_group_id and not isinstance(resource_group_id, str):
            raise TypeError("Expected argument 'resource_group_id' to be a str")
        pulumi.set(__self__, "resource_group_id", resource_group_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if volume and not isinstance(volume, str):
            raise TypeError("Expected argument 'volume' to be a str")
        pulumi.set(__self__, "volume", volume)
        if volume_attachment_id and not isinstance(volume_attachment_id, str):
            raise TypeError("Expected argument 'volume_attachment_id' to be a str")
        pulumi.set(__self__, "volume_attachment_id", volume_attachment_id)
        if volume_attachment_name and not isinstance(volume_attachment_name, str):
            raise TypeError("Expected argument 'volume_attachment_name' to be a str")
        pulumi.set(__self__, "volume_attachment_name", volume_attachment_name)
        if volume_type and not isinstance(volume_type, str):
            raise TypeError("Expected argument 'volume_type' to be a str")
        pulumi.set(__self__, "volume_type", volume_type)
        if worker and not isinstance(worker, str):
            raise TypeError("Expected argument 'worker' to be a str")
        pulumi.set(__self__, "worker", worker)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> _builtins.str:
        return pulumi.get(self, "cluster")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def volume(self) -> _builtins.str:
        return pulumi.get(self, "volume")

    @_builtins.property
    @pulumi.getter(name="volumeAttachmentId")
    def volume_attachment_id(self) -> _builtins.str:
        return pulumi.get(self, "volume_attachment_id")

    @_builtins.property
    @pulumi.getter(name="volumeAttachmentName")
    def volume_attachment_name(self) -> _builtins.str:
        return pulumi.get(self, "volume_attachment_name")

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> _builtins.str:
        return pulumi.get(self, "volume_type")

    @_builtins.property
    @pulumi.getter
    def worker(self) -> _builtins.str:
        return pulumi.get(self, "worker")


class AwaitableGetContainerStorageAttachmentResult(GetContainerStorageAttachmentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetContainerStorageAttachmentResult(
            cluster=self.cluster,
            id=self.id,
            resource_group_id=self.resource_group_id,
            status=self.status,
            volume=self.volume,
            volume_attachment_id=self.volume_attachment_id,
            volume_attachment_name=self.volume_attachment_name,
            volume_type=self.volume_type,
            worker=self.worker)


def get_container_storage_attachment(cluster: Optional[_builtins.str] = None,
                                     id: Optional[_builtins.str] = None,
                                     resource_group_id: Optional[_builtins.str] = None,
                                     volume_attachment_id: Optional[_builtins.str] = None,
                                     worker: Optional[_builtins.str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetContainerStorageAttachmentResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cluster'] = cluster
    __args__['id'] = id
    __args__['resourceGroupId'] = resource_group_id
    __args__['volumeAttachmentId'] = volume_attachment_id
    __args__['worker'] = worker
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getContainerStorageAttachment:getContainerStorageAttachment', __args__, opts=opts, typ=GetContainerStorageAttachmentResult, package_ref=_utilities.get_package()).value

    return AwaitableGetContainerStorageAttachmentResult(
        cluster=pulumi.get(__ret__, 'cluster'),
        id=pulumi.get(__ret__, 'id'),
        resource_group_id=pulumi.get(__ret__, 'resource_group_id'),
        status=pulumi.get(__ret__, 'status'),
        volume=pulumi.get(__ret__, 'volume'),
        volume_attachment_id=pulumi.get(__ret__, 'volume_attachment_id'),
        volume_attachment_name=pulumi.get(__ret__, 'volume_attachment_name'),
        volume_type=pulumi.get(__ret__, 'volume_type'),
        worker=pulumi.get(__ret__, 'worker'))
def get_container_storage_attachment_output(cluster: Optional[pulumi.Input[_builtins.str]] = None,
                                            id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            resource_group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            volume_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                                            worker: Optional[pulumi.Input[_builtins.str]] = None,
                                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetContainerStorageAttachmentResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cluster'] = cluster
    __args__['id'] = id
    __args__['resourceGroupId'] = resource_group_id
    __args__['volumeAttachmentId'] = volume_attachment_id
    __args__['worker'] = worker
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getContainerStorageAttachment:getContainerStorageAttachment', __args__, opts=opts, typ=GetContainerStorageAttachmentResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetContainerStorageAttachmentResult(
        cluster=pulumi.get(__response__, 'cluster'),
        id=pulumi.get(__response__, 'id'),
        resource_group_id=pulumi.get(__response__, 'resource_group_id'),
        status=pulumi.get(__response__, 'status'),
        volume=pulumi.get(__response__, 'volume'),
        volume_attachment_id=pulumi.get(__response__, 'volume_attachment_id'),
        volume_attachment_name=pulumi.get(__response__, 'volume_attachment_name'),
        volume_type=pulumi.get(__response__, 'volume_type'),
        worker=pulumi.get(__response__, 'worker')))
