# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCisCustomListItemsResult',
    'AwaitableGetCisCustomListItemsResult',
    'get_cis_custom_list_items',
    'get_cis_custom_list_items_output',
]

@pulumi.output_type
class GetCisCustomListItemsResult:
    """
    A collection of values returned by getCisCustomListItems.
    """
    def __init__(__self__, cis_id=None, id=None, item_id=None, items=None, list_id=None):
        if cis_id and not isinstance(cis_id, str):
            raise TypeError("Expected argument 'cis_id' to be a str")
        pulumi.set(__self__, "cis_id", cis_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if item_id and not isinstance(item_id, str):
            raise TypeError("Expected argument 'item_id' to be a str")
        pulumi.set(__self__, "item_id", item_id)
        if items and not isinstance(items, list):
            raise TypeError("Expected argument 'items' to be a list")
        pulumi.set(__self__, "items", items)
        if list_id and not isinstance(list_id, str):
            raise TypeError("Expected argument 'list_id' to be a str")
        pulumi.set(__self__, "list_id", list_id)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> _builtins.str:
        return pulumi.get(self, "cis_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="itemId")
    def item_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "item_id")

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetCisCustomListItemsItemResult']:
        return pulumi.get(self, "items")

    @_builtins.property
    @pulumi.getter(name="listId")
    def list_id(self) -> _builtins.str:
        return pulumi.get(self, "list_id")


class AwaitableGetCisCustomListItemsResult(GetCisCustomListItemsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCisCustomListItemsResult(
            cis_id=self.cis_id,
            id=self.id,
            item_id=self.item_id,
            items=self.items,
            list_id=self.list_id)


def get_cis_custom_list_items(cis_id: Optional[_builtins.str] = None,
                              id: Optional[_builtins.str] = None,
                              item_id: Optional[_builtins.str] = None,
                              list_id: Optional[_builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCisCustomListItemsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cisId'] = cis_id
    __args__['id'] = id
    __args__['itemId'] = item_id
    __args__['listId'] = list_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCisCustomListItems:getCisCustomListItems', __args__, opts=opts, typ=GetCisCustomListItemsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCisCustomListItemsResult(
        cis_id=pulumi.get(__ret__, 'cis_id'),
        id=pulumi.get(__ret__, 'id'),
        item_id=pulumi.get(__ret__, 'item_id'),
        items=pulumi.get(__ret__, 'items'),
        list_id=pulumi.get(__ret__, 'list_id'))
def get_cis_custom_list_items_output(cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                                     id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     item_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     list_id: Optional[pulumi.Input[_builtins.str]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCisCustomListItemsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cisId'] = cis_id
    __args__['id'] = id
    __args__['itemId'] = item_id
    __args__['listId'] = list_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCisCustomListItems:getCisCustomListItems', __args__, opts=opts, typ=GetCisCustomListItemsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCisCustomListItemsResult(
        cis_id=pulumi.get(__response__, 'cis_id'),
        id=pulumi.get(__response__, 'id'),
        item_id=pulumi.get(__response__, 'item_id'),
        items=pulumi.get(__response__, 'items'),
        list_id=pulumi.get(__response__, 'list_id')))
