# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetSchematicsStateResult',
    'AwaitableGetSchematicsStateResult',
    'get_schematics_state',
    'get_schematics_state_output',
]

@pulumi.output_type
class GetSchematicsStateResult:
    """
    A collection of values returned by getSchematicsState.
    """
    def __init__(__self__, id=None, location=None, resource_controller_url=None, state_store=None, state_store_json=None, template_id=None, workspace_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if resource_controller_url and not isinstance(resource_controller_url, str):
            raise TypeError("Expected argument 'resource_controller_url' to be a str")
        pulumi.set(__self__, "resource_controller_url", resource_controller_url)
        if state_store and not isinstance(state_store, str):
            raise TypeError("Expected argument 'state_store' to be a str")
        pulumi.set(__self__, "state_store", state_store)
        if state_store_json and not isinstance(state_store_json, str):
            raise TypeError("Expected argument 'state_store_json' to be a str")
        pulumi.set(__self__, "state_store_json", state_store_json)
        if template_id and not isinstance(template_id, str):
            raise TypeError("Expected argument 'template_id' to be a str")
        pulumi.set(__self__, "template_id", template_id)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> _builtins.str:
        return pulumi.get(self, "resource_controller_url")

    @_builtins.property
    @pulumi.getter(name="stateStore")
    def state_store(self) -> _builtins.str:
        return pulumi.get(self, "state_store")

    @_builtins.property
    @pulumi.getter(name="stateStoreJson")
    def state_store_json(self) -> _builtins.str:
        return pulumi.get(self, "state_store_json")

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> _builtins.str:
        return pulumi.get(self, "template_id")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        return pulumi.get(self, "workspace_id")


class AwaitableGetSchematicsStateResult(GetSchematicsStateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSchematicsStateResult(
            id=self.id,
            location=self.location,
            resource_controller_url=self.resource_controller_url,
            state_store=self.state_store,
            state_store_json=self.state_store_json,
            template_id=self.template_id,
            workspace_id=self.workspace_id)


def get_schematics_state(id: Optional[_builtins.str] = None,
                         location: Optional[_builtins.str] = None,
                         template_id: Optional[_builtins.str] = None,
                         workspace_id: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSchematicsStateResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['location'] = location
    __args__['templateId'] = template_id
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSchematicsState:getSchematicsState', __args__, opts=opts, typ=GetSchematicsStateResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSchematicsStateResult(
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        resource_controller_url=pulumi.get(__ret__, 'resource_controller_url'),
        state_store=pulumi.get(__ret__, 'state_store'),
        state_store_json=pulumi.get(__ret__, 'state_store_json'),
        template_id=pulumi.get(__ret__, 'template_id'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_schematics_state_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                location: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                template_id: Optional[pulumi.Input[_builtins.str]] = None,
                                workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSchematicsStateResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['location'] = location
    __args__['templateId'] = template_id
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSchematicsState:getSchematicsState', __args__, opts=opts, typ=GetSchematicsStateResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSchematicsStateResult(
        id=pulumi.get(__response__, 'id'),
        location=pulumi.get(__response__, 'location'),
        resource_controller_url=pulumi.get(__response__, 'resource_controller_url'),
        state_store=pulumi.get(__response__, 'state_store'),
        state_store_json=pulumi.get(__response__, 'state_store_json'),
        template_id=pulumi.get(__response__, 'template_id'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
