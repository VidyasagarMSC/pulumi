# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsVirtualEndpointGatewayResult',
    'AwaitableGetIsVirtualEndpointGatewayResult',
    'get_is_virtual_endpoint_gateway',
    'get_is_virtual_endpoint_gateway_output',
]

@pulumi.output_type
class GetIsVirtualEndpointGatewayResult:
    """
    A collection of values returned by getIsVirtualEndpointGateway.
    """
    def __init__(__self__, access_tags=None, allow_dns_resolution_binding=None, created_at=None, crn=None, health_state=None, id=None, ips=None, lifecycle_reasons=None, lifecycle_state=None, name=None, resource_group=None, resource_type=None, security_groups=None, service_endpoints=None, tags=None, targets=None, vpc=None):
        if access_tags and not isinstance(access_tags, list):
            raise TypeError("Expected argument 'access_tags' to be a list")
        pulumi.set(__self__, "access_tags", access_tags)
        if allow_dns_resolution_binding and not isinstance(allow_dns_resolution_binding, bool):
            raise TypeError("Expected argument 'allow_dns_resolution_binding' to be a bool")
        pulumi.set(__self__, "allow_dns_resolution_binding", allow_dns_resolution_binding)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if health_state and not isinstance(health_state, str):
            raise TypeError("Expected argument 'health_state' to be a str")
        pulumi.set(__self__, "health_state", health_state)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ips and not isinstance(ips, list):
            raise TypeError("Expected argument 'ips' to be a list")
        pulumi.set(__self__, "ips", ips)
        if lifecycle_reasons and not isinstance(lifecycle_reasons, list):
            raise TypeError("Expected argument 'lifecycle_reasons' to be a list")
        pulumi.set(__self__, "lifecycle_reasons", lifecycle_reasons)
        if lifecycle_state and not isinstance(lifecycle_state, str):
            raise TypeError("Expected argument 'lifecycle_state' to be a str")
        pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resource_group and not isinstance(resource_group, str):
            raise TypeError("Expected argument 'resource_group' to be a str")
        pulumi.set(__self__, "resource_group", resource_group)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if security_groups and not isinstance(security_groups, list):
            raise TypeError("Expected argument 'security_groups' to be a list")
        pulumi.set(__self__, "security_groups", security_groups)
        if service_endpoints and not isinstance(service_endpoints, list):
            raise TypeError("Expected argument 'service_endpoints' to be a list")
        pulumi.set(__self__, "service_endpoints", service_endpoints)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if targets and not isinstance(targets, list):
            raise TypeError("Expected argument 'targets' to be a list")
        pulumi.set(__self__, "targets", targets)
        if vpc and not isinstance(vpc, str):
            raise TypeError("Expected argument 'vpc' to be a str")
        pulumi.set(__self__, "vpc", vpc)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter(name="allowDnsResolutionBinding")
    def allow_dns_resolution_binding(self) -> _builtins.bool:
        return pulumi.get(self, "allow_dns_resolution_binding")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="healthState")
    def health_state(self) -> _builtins.str:
        return pulumi.get(self, "health_state")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ips(self) -> Sequence['outputs.GetIsVirtualEndpointGatewayIpResult']:
        return pulumi.get(self, "ips")

    @_builtins.property
    @pulumi.getter(name="lifecycleReasons")
    def lifecycle_reasons(self) -> Sequence['outputs.GetIsVirtualEndpointGatewayLifecycleReasonResult']:
        return pulumi.get(self, "lifecycle_reasons")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> _builtins.str:
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> _builtins.str:
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter(name="serviceEndpoints")
    def service_endpoints(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "service_endpoints")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetIsVirtualEndpointGatewayTargetResult']:
        return pulumi.get(self, "targets")

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> _builtins.str:
        return pulumi.get(self, "vpc")


class AwaitableGetIsVirtualEndpointGatewayResult(GetIsVirtualEndpointGatewayResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsVirtualEndpointGatewayResult(
            access_tags=self.access_tags,
            allow_dns_resolution_binding=self.allow_dns_resolution_binding,
            created_at=self.created_at,
            crn=self.crn,
            health_state=self.health_state,
            id=self.id,
            ips=self.ips,
            lifecycle_reasons=self.lifecycle_reasons,
            lifecycle_state=self.lifecycle_state,
            name=self.name,
            resource_group=self.resource_group,
            resource_type=self.resource_type,
            security_groups=self.security_groups,
            service_endpoints=self.service_endpoints,
            tags=self.tags,
            targets=self.targets,
            vpc=self.vpc)


def get_is_virtual_endpoint_gateway(id: Optional[_builtins.str] = None,
                                    name: Optional[_builtins.str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsVirtualEndpointGatewayResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsVirtualEndpointGateway:getIsVirtualEndpointGateway', __args__, opts=opts, typ=GetIsVirtualEndpointGatewayResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsVirtualEndpointGatewayResult(
        access_tags=pulumi.get(__ret__, 'access_tags'),
        allow_dns_resolution_binding=pulumi.get(__ret__, 'allow_dns_resolution_binding'),
        created_at=pulumi.get(__ret__, 'created_at'),
        crn=pulumi.get(__ret__, 'crn'),
        health_state=pulumi.get(__ret__, 'health_state'),
        id=pulumi.get(__ret__, 'id'),
        ips=pulumi.get(__ret__, 'ips'),
        lifecycle_reasons=pulumi.get(__ret__, 'lifecycle_reasons'),
        lifecycle_state=pulumi.get(__ret__, 'lifecycle_state'),
        name=pulumi.get(__ret__, 'name'),
        resource_group=pulumi.get(__ret__, 'resource_group'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        security_groups=pulumi.get(__ret__, 'security_groups'),
        service_endpoints=pulumi.get(__ret__, 'service_endpoints'),
        tags=pulumi.get(__ret__, 'tags'),
        targets=pulumi.get(__ret__, 'targets'),
        vpc=pulumi.get(__ret__, 'vpc'))
def get_is_virtual_endpoint_gateway_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           name: Optional[pulumi.Input[_builtins.str]] = None,
                                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsVirtualEndpointGatewayResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsVirtualEndpointGateway:getIsVirtualEndpointGateway', __args__, opts=opts, typ=GetIsVirtualEndpointGatewayResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsVirtualEndpointGatewayResult(
        access_tags=pulumi.get(__response__, 'access_tags'),
        allow_dns_resolution_binding=pulumi.get(__response__, 'allow_dns_resolution_binding'),
        created_at=pulumi.get(__response__, 'created_at'),
        crn=pulumi.get(__response__, 'crn'),
        health_state=pulumi.get(__response__, 'health_state'),
        id=pulumi.get(__response__, 'id'),
        ips=pulumi.get(__response__, 'ips'),
        lifecycle_reasons=pulumi.get(__response__, 'lifecycle_reasons'),
        lifecycle_state=pulumi.get(__response__, 'lifecycle_state'),
        name=pulumi.get(__response__, 'name'),
        resource_group=pulumi.get(__response__, 'resource_group'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        security_groups=pulumi.get(__response__, 'security_groups'),
        service_endpoints=pulumi.get(__response__, 'service_endpoints'),
        tags=pulumi.get(__response__, 'tags'),
        targets=pulumi.get(__response__, 'targets'),
        vpc=pulumi.get(__response__, 'vpc')))
