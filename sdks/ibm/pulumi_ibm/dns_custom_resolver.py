# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DnsCustomResolverArgs', 'DnsCustomResolver']

@pulumi.input_type
class DnsCustomResolverArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 allow_disruptive_updates: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_custom_resolver_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 high_availability: Optional[pulumi.Input[_builtins.bool]] = None,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input['DnsCustomResolverLocationArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['DnsCustomResolverTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a DnsCustomResolver resource.
        :param pulumi.Input[_builtins.str] instance_id: Instance ID
        :param pulumi.Input[_builtins.bool] allow_disruptive_updates: Whether a disruptive update is allowed for the custom resolver.
        :param pulumi.Input[_builtins.str] description: Descriptive text of the custom resolver.
        :param pulumi.Input[_builtins.bool] enabled: Whether the custom resolver is enabled
        :param pulumi.Input[_builtins.bool] high_availability: Whether High Availability is enabled in custom resolver
        :param pulumi.Input[Sequence[pulumi.Input['DnsCustomResolverLocationArgs']]] locations: Locations on which the custom resolver will be running
        :param pulumi.Input[_builtins.str] name: Name of the custom resolver
        :param pulumi.Input[_builtins.str] profile: The profile name of the custom resolver.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        if allow_disruptive_updates is not None:
            pulumi.set(__self__, "allow_disruptive_updates", allow_disruptive_updates)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dns_custom_resolver_id is not None:
            pulumi.set(__self__, "dns_custom_resolver_id", dns_custom_resolver_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if high_availability is not None:
            pulumi.set(__self__, "high_availability", high_availability)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Instance ID
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="allowDisruptiveUpdates")
    def allow_disruptive_updates(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether a disruptive update is allowed for the custom resolver.
        """
        return pulumi.get(self, "allow_disruptive_updates")

    @allow_disruptive_updates.setter
    def allow_disruptive_updates(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_disruptive_updates", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Descriptive text of the custom resolver.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="dnsCustomResolverId")
    def dns_custom_resolver_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dns_custom_resolver_id")

    @dns_custom_resolver_id.setter
    def dns_custom_resolver_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_custom_resolver_id", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the custom resolver is enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="highAvailability")
    def high_availability(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether High Availability is enabled in custom resolver
        """
        return pulumi.get(self, "high_availability")

    @high_availability.setter
    def high_availability(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "high_availability", value)

    @_builtins.property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DnsCustomResolverLocationArgs']]]]:
        """
        Locations on which the custom resolver will be running
        """
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DnsCustomResolverLocationArgs']]]]):
        pulumi.set(self, "locations", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the custom resolver
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The profile name of the custom resolver.
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "profile", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['DnsCustomResolverTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['DnsCustomResolverTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _DnsCustomResolverState:
    def __init__(__self__, *,
                 allow_disruptive_updates: Optional[pulumi.Input[_builtins.bool]] = None,
                 created_on: Optional[pulumi.Input[_builtins.str]] = None,
                 custom_resolver_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_custom_resolver_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 health: Optional[pulumi.Input[_builtins.str]] = None,
                 high_availability: Optional[pulumi.Input[_builtins.bool]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input['DnsCustomResolverLocationArgs']]]] = None,
                 modified_on: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['DnsCustomResolverRuleArgs']]]] = None,
                 timeouts: Optional[pulumi.Input['DnsCustomResolverTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering DnsCustomResolver resources.
        :param pulumi.Input[_builtins.bool] allow_disruptive_updates: Whether a disruptive update is allowed for the custom resolver.
        :param pulumi.Input[_builtins.str] created_on: Time when a custom resolver is created
        :param pulumi.Input[_builtins.str] custom_resolver_id: Identifier of the custom resolver
        :param pulumi.Input[_builtins.str] description: Descriptive text of the custom resolver.
        :param pulumi.Input[_builtins.bool] enabled: Whether the custom resolver is enabled
        :param pulumi.Input[_builtins.str] health: Healthy state of the custom resolver
        :param pulumi.Input[_builtins.bool] high_availability: Whether High Availability is enabled in custom resolver
        :param pulumi.Input[_builtins.str] instance_id: Instance ID
        :param pulumi.Input[Sequence[pulumi.Input['DnsCustomResolverLocationArgs']]] locations: Locations on which the custom resolver will be running
        :param pulumi.Input[_builtins.str] modified_on: The recent time when a custom resolver is modified
        :param pulumi.Input[_builtins.str] name: Name of the custom resolver
        :param pulumi.Input[_builtins.str] profile: The profile name of the custom resolver.
        """
        if allow_disruptive_updates is not None:
            pulumi.set(__self__, "allow_disruptive_updates", allow_disruptive_updates)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if custom_resolver_id is not None:
            pulumi.set(__self__, "custom_resolver_id", custom_resolver_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dns_custom_resolver_id is not None:
            pulumi.set(__self__, "dns_custom_resolver_id", dns_custom_resolver_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if health is not None:
            pulumi.set(__self__, "health", health)
        if high_availability is not None:
            pulumi.set(__self__, "high_availability", high_availability)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if modified_on is not None:
            pulumi.set(__self__, "modified_on", modified_on)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="allowDisruptiveUpdates")
    def allow_disruptive_updates(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether a disruptive update is allowed for the custom resolver.
        """
        return pulumi.get(self, "allow_disruptive_updates")

    @allow_disruptive_updates.setter
    def allow_disruptive_updates(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_disruptive_updates", value)

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Time when a custom resolver is created
        """
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_on", value)

    @_builtins.property
    @pulumi.getter(name="customResolverId")
    def custom_resolver_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Identifier of the custom resolver
        """
        return pulumi.get(self, "custom_resolver_id")

    @custom_resolver_id.setter
    def custom_resolver_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "custom_resolver_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Descriptive text of the custom resolver.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="dnsCustomResolverId")
    def dns_custom_resolver_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dns_custom_resolver_id")

    @dns_custom_resolver_id.setter
    def dns_custom_resolver_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_custom_resolver_id", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the custom resolver is enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter
    def health(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Healthy state of the custom resolver
        """
        return pulumi.get(self, "health")

    @health.setter
    def health(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "health", value)

    @_builtins.property
    @pulumi.getter(name="highAvailability")
    def high_availability(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether High Availability is enabled in custom resolver
        """
        return pulumi.get(self, "high_availability")

    @high_availability.setter
    def high_availability(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "high_availability", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Instance ID
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DnsCustomResolverLocationArgs']]]]:
        """
        Locations on which the custom resolver will be running
        """
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DnsCustomResolverLocationArgs']]]]):
        pulumi.set(self, "locations", value)

    @_builtins.property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The recent time when a custom resolver is modified
        """
        return pulumi.get(self, "modified_on")

    @modified_on.setter
    def modified_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "modified_on", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the custom resolver
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The profile name of the custom resolver.
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "profile", value)

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DnsCustomResolverRuleArgs']]]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DnsCustomResolverRuleArgs']]]]):
        pulumi.set(self, "rules", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['DnsCustomResolverTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['DnsCustomResolverTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/dnsCustomResolver:DnsCustomResolver")
class DnsCustomResolver(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_disruptive_updates: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_custom_resolver_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 high_availability: Optional[pulumi.Input[_builtins.bool]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DnsCustomResolverLocationArgs', 'DnsCustomResolverLocationArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['DnsCustomResolverTimeoutsArgs', 'DnsCustomResolverTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a DnsCustomResolver resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] allow_disruptive_updates: Whether a disruptive update is allowed for the custom resolver.
        :param pulumi.Input[_builtins.str] description: Descriptive text of the custom resolver.
        :param pulumi.Input[_builtins.bool] enabled: Whether the custom resolver is enabled
        :param pulumi.Input[_builtins.bool] high_availability: Whether High Availability is enabled in custom resolver
        :param pulumi.Input[_builtins.str] instance_id: Instance ID
        :param pulumi.Input[Sequence[pulumi.Input[Union['DnsCustomResolverLocationArgs', 'DnsCustomResolverLocationArgsDict']]]] locations: Locations on which the custom resolver will be running
        :param pulumi.Input[_builtins.str] name: Name of the custom resolver
        :param pulumi.Input[_builtins.str] profile: The profile name of the custom resolver.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DnsCustomResolverArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DnsCustomResolver resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DnsCustomResolverArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DnsCustomResolverArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_disruptive_updates: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_custom_resolver_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 high_availability: Optional[pulumi.Input[_builtins.bool]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DnsCustomResolverLocationArgs', 'DnsCustomResolverLocationArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['DnsCustomResolverTimeoutsArgs', 'DnsCustomResolverTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DnsCustomResolverArgs.__new__(DnsCustomResolverArgs)

            __props__.__dict__["allow_disruptive_updates"] = allow_disruptive_updates
            __props__.__dict__["description"] = description
            __props__.__dict__["dns_custom_resolver_id"] = dns_custom_resolver_id
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["high_availability"] = high_availability
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["locations"] = locations
            __props__.__dict__["name"] = name
            __props__.__dict__["profile"] = profile
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["created_on"] = None
            __props__.__dict__["custom_resolver_id"] = None
            __props__.__dict__["health"] = None
            __props__.__dict__["modified_on"] = None
            __props__.__dict__["rules"] = None
        super(DnsCustomResolver, __self__).__init__(
            'ibm:index/dnsCustomResolver:DnsCustomResolver',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_disruptive_updates: Optional[pulumi.Input[_builtins.bool]] = None,
            created_on: Optional[pulumi.Input[_builtins.str]] = None,
            custom_resolver_id: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            dns_custom_resolver_id: Optional[pulumi.Input[_builtins.str]] = None,
            enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            health: Optional[pulumi.Input[_builtins.str]] = None,
            high_availability: Optional[pulumi.Input[_builtins.bool]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            locations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DnsCustomResolverLocationArgs', 'DnsCustomResolverLocationArgsDict']]]]] = None,
            modified_on: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            profile: Optional[pulumi.Input[_builtins.str]] = None,
            rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DnsCustomResolverRuleArgs', 'DnsCustomResolverRuleArgsDict']]]]] = None,
            timeouts: Optional[pulumi.Input[Union['DnsCustomResolverTimeoutsArgs', 'DnsCustomResolverTimeoutsArgsDict']]] = None) -> 'DnsCustomResolver':
        """
        Get an existing DnsCustomResolver resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] allow_disruptive_updates: Whether a disruptive update is allowed for the custom resolver.
        :param pulumi.Input[_builtins.str] created_on: Time when a custom resolver is created
        :param pulumi.Input[_builtins.str] custom_resolver_id: Identifier of the custom resolver
        :param pulumi.Input[_builtins.str] description: Descriptive text of the custom resolver.
        :param pulumi.Input[_builtins.bool] enabled: Whether the custom resolver is enabled
        :param pulumi.Input[_builtins.str] health: Healthy state of the custom resolver
        :param pulumi.Input[_builtins.bool] high_availability: Whether High Availability is enabled in custom resolver
        :param pulumi.Input[_builtins.str] instance_id: Instance ID
        :param pulumi.Input[Sequence[pulumi.Input[Union['DnsCustomResolverLocationArgs', 'DnsCustomResolverLocationArgsDict']]]] locations: Locations on which the custom resolver will be running
        :param pulumi.Input[_builtins.str] modified_on: The recent time when a custom resolver is modified
        :param pulumi.Input[_builtins.str] name: Name of the custom resolver
        :param pulumi.Input[_builtins.str] profile: The profile name of the custom resolver.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DnsCustomResolverState.__new__(_DnsCustomResolverState)

        __props__.__dict__["allow_disruptive_updates"] = allow_disruptive_updates
        __props__.__dict__["created_on"] = created_on
        __props__.__dict__["custom_resolver_id"] = custom_resolver_id
        __props__.__dict__["description"] = description
        __props__.__dict__["dns_custom_resolver_id"] = dns_custom_resolver_id
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["health"] = health
        __props__.__dict__["high_availability"] = high_availability
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["locations"] = locations
        __props__.__dict__["modified_on"] = modified_on
        __props__.__dict__["name"] = name
        __props__.__dict__["profile"] = profile
        __props__.__dict__["rules"] = rules
        __props__.__dict__["timeouts"] = timeouts
        return DnsCustomResolver(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="allowDisruptiveUpdates")
    def allow_disruptive_updates(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Whether a disruptive update is allowed for the custom resolver.
        """
        return pulumi.get(self, "allow_disruptive_updates")

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> pulumi.Output[_builtins.str]:
        """
        Time when a custom resolver is created
        """
        return pulumi.get(self, "created_on")

    @_builtins.property
    @pulumi.getter(name="customResolverId")
    def custom_resolver_id(self) -> pulumi.Output[_builtins.str]:
        """
        Identifier of the custom resolver
        """
        return pulumi.get(self, "custom_resolver_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Descriptive text of the custom resolver.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="dnsCustomResolverId")
    def dns_custom_resolver_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "dns_custom_resolver_id")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Whether the custom resolver is enabled
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def health(self) -> pulumi.Output[_builtins.str]:
        """
        Healthy state of the custom resolver
        """
        return pulumi.get(self, "health")

    @_builtins.property
    @pulumi.getter(name="highAvailability")
    def high_availability(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Whether High Availability is enabled in custom resolver
        """
        return pulumi.get(self, "high_availability")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Instance ID
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def locations(self) -> pulumi.Output[Optional[Sequence['outputs.DnsCustomResolverLocation']]]:
        """
        Locations on which the custom resolver will be running
        """
        return pulumi.get(self, "locations")

    @_builtins.property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> pulumi.Output[_builtins.str]:
        """
        The recent time when a custom resolver is modified
        """
        return pulumi.get(self, "modified_on")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the custom resolver
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def profile(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The profile name of the custom resolver.
        """
        return pulumi.get(self, "profile")

    @_builtins.property
    @pulumi.getter
    def rules(self) -> pulumi.Output[Sequence['outputs.DnsCustomResolverRule']]:
        return pulumi.get(self, "rules")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.DnsCustomResolverTimeouts']]:
        return pulumi.get(self, "timeouts")

