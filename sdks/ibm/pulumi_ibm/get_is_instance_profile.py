# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsInstanceProfileResult',
    'AwaitableGetIsInstanceProfileResult',
    'get_is_instance_profile',
    'get_is_instance_profile_output',
]

@pulumi.output_type
class GetIsInstanceProfileResult:
    """
    A collection of values returned by getIsInstanceProfile.
    """
    def __init__(__self__, architecture=None, architecture_type=None, architecture_values=None, bandwidths=None, cluster_network_attachment_counts=None, confidential_compute_modes=None, disks=None, family=None, gpu_counts=None, gpu_manufacturers=None, gpu_memories=None, gpu_models=None, href=None, id=None, memories=None, name=None, network_attachment_counts=None, network_interface_counts=None, numa_counts=None, port_speeds=None, reservation_terms=None, secure_boot_modes=None, status=None, supported_cluster_network_profiles=None, total_volume_bandwidths=None, vcpu_architectures=None, vcpu_counts=None, vcpu_manufacturers=None):
        if architecture and not isinstance(architecture, str):
            raise TypeError("Expected argument 'architecture' to be a str")
        pulumi.set(__self__, "architecture", architecture)
        if architecture_type and not isinstance(architecture_type, str):
            raise TypeError("Expected argument 'architecture_type' to be a str")
        pulumi.set(__self__, "architecture_type", architecture_type)
        if architecture_values and not isinstance(architecture_values, list):
            raise TypeError("Expected argument 'architecture_values' to be a list")
        pulumi.set(__self__, "architecture_values", architecture_values)
        if bandwidths and not isinstance(bandwidths, list):
            raise TypeError("Expected argument 'bandwidths' to be a list")
        pulumi.set(__self__, "bandwidths", bandwidths)
        if cluster_network_attachment_counts and not isinstance(cluster_network_attachment_counts, list):
            raise TypeError("Expected argument 'cluster_network_attachment_counts' to be a list")
        pulumi.set(__self__, "cluster_network_attachment_counts", cluster_network_attachment_counts)
        if confidential_compute_modes and not isinstance(confidential_compute_modes, list):
            raise TypeError("Expected argument 'confidential_compute_modes' to be a list")
        pulumi.set(__self__, "confidential_compute_modes", confidential_compute_modes)
        if disks and not isinstance(disks, list):
            raise TypeError("Expected argument 'disks' to be a list")
        pulumi.set(__self__, "disks", disks)
        if family and not isinstance(family, str):
            raise TypeError("Expected argument 'family' to be a str")
        pulumi.set(__self__, "family", family)
        if gpu_counts and not isinstance(gpu_counts, list):
            raise TypeError("Expected argument 'gpu_counts' to be a list")
        pulumi.set(__self__, "gpu_counts", gpu_counts)
        if gpu_manufacturers and not isinstance(gpu_manufacturers, list):
            raise TypeError("Expected argument 'gpu_manufacturers' to be a list")
        pulumi.set(__self__, "gpu_manufacturers", gpu_manufacturers)
        if gpu_memories and not isinstance(gpu_memories, list):
            raise TypeError("Expected argument 'gpu_memories' to be a list")
        pulumi.set(__self__, "gpu_memories", gpu_memories)
        if gpu_models and not isinstance(gpu_models, list):
            raise TypeError("Expected argument 'gpu_models' to be a list")
        pulumi.set(__self__, "gpu_models", gpu_models)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if memories and not isinstance(memories, list):
            raise TypeError("Expected argument 'memories' to be a list")
        pulumi.set(__self__, "memories", memories)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_attachment_counts and not isinstance(network_attachment_counts, list):
            raise TypeError("Expected argument 'network_attachment_counts' to be a list")
        pulumi.set(__self__, "network_attachment_counts", network_attachment_counts)
        if network_interface_counts and not isinstance(network_interface_counts, list):
            raise TypeError("Expected argument 'network_interface_counts' to be a list")
        pulumi.set(__self__, "network_interface_counts", network_interface_counts)
        if numa_counts and not isinstance(numa_counts, list):
            raise TypeError("Expected argument 'numa_counts' to be a list")
        pulumi.set(__self__, "numa_counts", numa_counts)
        if port_speeds and not isinstance(port_speeds, list):
            raise TypeError("Expected argument 'port_speeds' to be a list")
        pulumi.set(__self__, "port_speeds", port_speeds)
        if reservation_terms and not isinstance(reservation_terms, list):
            raise TypeError("Expected argument 'reservation_terms' to be a list")
        pulumi.set(__self__, "reservation_terms", reservation_terms)
        if secure_boot_modes and not isinstance(secure_boot_modes, list):
            raise TypeError("Expected argument 'secure_boot_modes' to be a list")
        pulumi.set(__self__, "secure_boot_modes", secure_boot_modes)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if supported_cluster_network_profiles and not isinstance(supported_cluster_network_profiles, list):
            raise TypeError("Expected argument 'supported_cluster_network_profiles' to be a list")
        pulumi.set(__self__, "supported_cluster_network_profiles", supported_cluster_network_profiles)
        if total_volume_bandwidths and not isinstance(total_volume_bandwidths, list):
            raise TypeError("Expected argument 'total_volume_bandwidths' to be a list")
        pulumi.set(__self__, "total_volume_bandwidths", total_volume_bandwidths)
        if vcpu_architectures and not isinstance(vcpu_architectures, list):
            raise TypeError("Expected argument 'vcpu_architectures' to be a list")
        pulumi.set(__self__, "vcpu_architectures", vcpu_architectures)
        if vcpu_counts and not isinstance(vcpu_counts, list):
            raise TypeError("Expected argument 'vcpu_counts' to be a list")
        pulumi.set(__self__, "vcpu_counts", vcpu_counts)
        if vcpu_manufacturers and not isinstance(vcpu_manufacturers, list):
            raise TypeError("Expected argument 'vcpu_manufacturers' to be a list")
        pulumi.set(__self__, "vcpu_manufacturers", vcpu_manufacturers)

    @_builtins.property
    @pulumi.getter
    def architecture(self) -> _builtins.str:
        return pulumi.get(self, "architecture")

    @_builtins.property
    @pulumi.getter(name="architectureType")
    def architecture_type(self) -> _builtins.str:
        return pulumi.get(self, "architecture_type")

    @_builtins.property
    @pulumi.getter(name="architectureValues")
    def architecture_values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "architecture_values")

    @_builtins.property
    @pulumi.getter
    def bandwidths(self) -> Sequence['outputs.GetIsInstanceProfileBandwidthResult']:
        return pulumi.get(self, "bandwidths")

    @_builtins.property
    @pulumi.getter(name="clusterNetworkAttachmentCounts")
    def cluster_network_attachment_counts(self) -> Sequence['outputs.GetIsInstanceProfileClusterNetworkAttachmentCountResult']:
        return pulumi.get(self, "cluster_network_attachment_counts")

    @_builtins.property
    @pulumi.getter(name="confidentialComputeModes")
    def confidential_compute_modes(self) -> Sequence['outputs.GetIsInstanceProfileConfidentialComputeModeResult']:
        return pulumi.get(self, "confidential_compute_modes")

    @_builtins.property
    @pulumi.getter
    def disks(self) -> Sequence['outputs.GetIsInstanceProfileDiskResult']:
        return pulumi.get(self, "disks")

    @_builtins.property
    @pulumi.getter
    def family(self) -> _builtins.str:
        return pulumi.get(self, "family")

    @_builtins.property
    @pulumi.getter(name="gpuCounts")
    def gpu_counts(self) -> Sequence['outputs.GetIsInstanceProfileGpuCountResult']:
        return pulumi.get(self, "gpu_counts")

    @_builtins.property
    @pulumi.getter(name="gpuManufacturers")
    def gpu_manufacturers(self) -> Sequence['outputs.GetIsInstanceProfileGpuManufacturerResult']:
        return pulumi.get(self, "gpu_manufacturers")

    @_builtins.property
    @pulumi.getter(name="gpuMemories")
    def gpu_memories(self) -> Sequence['outputs.GetIsInstanceProfileGpuMemoryResult']:
        return pulumi.get(self, "gpu_memories")

    @_builtins.property
    @pulumi.getter(name="gpuModels")
    def gpu_models(self) -> Sequence['outputs.GetIsInstanceProfileGpuModelResult']:
        return pulumi.get(self, "gpu_models")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def memories(self) -> Sequence['outputs.GetIsInstanceProfileMemoryResult']:
        return pulumi.get(self, "memories")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkAttachmentCounts")
    def network_attachment_counts(self) -> Sequence['outputs.GetIsInstanceProfileNetworkAttachmentCountResult']:
        return pulumi.get(self, "network_attachment_counts")

    @_builtins.property
    @pulumi.getter(name="networkInterfaceCounts")
    def network_interface_counts(self) -> Sequence['outputs.GetIsInstanceProfileNetworkInterfaceCountResult']:
        return pulumi.get(self, "network_interface_counts")

    @_builtins.property
    @pulumi.getter(name="numaCounts")
    def numa_counts(self) -> Sequence['outputs.GetIsInstanceProfileNumaCountResult']:
        return pulumi.get(self, "numa_counts")

    @_builtins.property
    @pulumi.getter(name="portSpeeds")
    def port_speeds(self) -> Sequence['outputs.GetIsInstanceProfilePortSpeedResult']:
        return pulumi.get(self, "port_speeds")

    @_builtins.property
    @pulumi.getter(name="reservationTerms")
    def reservation_terms(self) -> Sequence['outputs.GetIsInstanceProfileReservationTermResult']:
        return pulumi.get(self, "reservation_terms")

    @_builtins.property
    @pulumi.getter(name="secureBootModes")
    def secure_boot_modes(self) -> Sequence['outputs.GetIsInstanceProfileSecureBootModeResult']:
        return pulumi.get(self, "secure_boot_modes")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="supportedClusterNetworkProfiles")
    def supported_cluster_network_profiles(self) -> Sequence['outputs.GetIsInstanceProfileSupportedClusterNetworkProfileResult']:
        return pulumi.get(self, "supported_cluster_network_profiles")

    @_builtins.property
    @pulumi.getter(name="totalVolumeBandwidths")
    def total_volume_bandwidths(self) -> Sequence['outputs.GetIsInstanceProfileTotalVolumeBandwidthResult']:
        return pulumi.get(self, "total_volume_bandwidths")

    @_builtins.property
    @pulumi.getter(name="vcpuArchitectures")
    def vcpu_architectures(self) -> Sequence['outputs.GetIsInstanceProfileVcpuArchitectureResult']:
        return pulumi.get(self, "vcpu_architectures")

    @_builtins.property
    @pulumi.getter(name="vcpuCounts")
    def vcpu_counts(self) -> Sequence['outputs.GetIsInstanceProfileVcpuCountResult']:
        return pulumi.get(self, "vcpu_counts")

    @_builtins.property
    @pulumi.getter(name="vcpuManufacturers")
    def vcpu_manufacturers(self) -> Sequence['outputs.GetIsInstanceProfileVcpuManufacturerResult']:
        return pulumi.get(self, "vcpu_manufacturers")


class AwaitableGetIsInstanceProfileResult(GetIsInstanceProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsInstanceProfileResult(
            architecture=self.architecture,
            architecture_type=self.architecture_type,
            architecture_values=self.architecture_values,
            bandwidths=self.bandwidths,
            cluster_network_attachment_counts=self.cluster_network_attachment_counts,
            confidential_compute_modes=self.confidential_compute_modes,
            disks=self.disks,
            family=self.family,
            gpu_counts=self.gpu_counts,
            gpu_manufacturers=self.gpu_manufacturers,
            gpu_memories=self.gpu_memories,
            gpu_models=self.gpu_models,
            href=self.href,
            id=self.id,
            memories=self.memories,
            name=self.name,
            network_attachment_counts=self.network_attachment_counts,
            network_interface_counts=self.network_interface_counts,
            numa_counts=self.numa_counts,
            port_speeds=self.port_speeds,
            reservation_terms=self.reservation_terms,
            secure_boot_modes=self.secure_boot_modes,
            status=self.status,
            supported_cluster_network_profiles=self.supported_cluster_network_profiles,
            total_volume_bandwidths=self.total_volume_bandwidths,
            vcpu_architectures=self.vcpu_architectures,
            vcpu_counts=self.vcpu_counts,
            vcpu_manufacturers=self.vcpu_manufacturers)


def get_is_instance_profile(id: Optional[_builtins.str] = None,
                            name: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsInstanceProfileResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsInstanceProfile:getIsInstanceProfile', __args__, opts=opts, typ=GetIsInstanceProfileResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsInstanceProfileResult(
        architecture=pulumi.get(__ret__, 'architecture'),
        architecture_type=pulumi.get(__ret__, 'architecture_type'),
        architecture_values=pulumi.get(__ret__, 'architecture_values'),
        bandwidths=pulumi.get(__ret__, 'bandwidths'),
        cluster_network_attachment_counts=pulumi.get(__ret__, 'cluster_network_attachment_counts'),
        confidential_compute_modes=pulumi.get(__ret__, 'confidential_compute_modes'),
        disks=pulumi.get(__ret__, 'disks'),
        family=pulumi.get(__ret__, 'family'),
        gpu_counts=pulumi.get(__ret__, 'gpu_counts'),
        gpu_manufacturers=pulumi.get(__ret__, 'gpu_manufacturers'),
        gpu_memories=pulumi.get(__ret__, 'gpu_memories'),
        gpu_models=pulumi.get(__ret__, 'gpu_models'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        memories=pulumi.get(__ret__, 'memories'),
        name=pulumi.get(__ret__, 'name'),
        network_attachment_counts=pulumi.get(__ret__, 'network_attachment_counts'),
        network_interface_counts=pulumi.get(__ret__, 'network_interface_counts'),
        numa_counts=pulumi.get(__ret__, 'numa_counts'),
        port_speeds=pulumi.get(__ret__, 'port_speeds'),
        reservation_terms=pulumi.get(__ret__, 'reservation_terms'),
        secure_boot_modes=pulumi.get(__ret__, 'secure_boot_modes'),
        status=pulumi.get(__ret__, 'status'),
        supported_cluster_network_profiles=pulumi.get(__ret__, 'supported_cluster_network_profiles'),
        total_volume_bandwidths=pulumi.get(__ret__, 'total_volume_bandwidths'),
        vcpu_architectures=pulumi.get(__ret__, 'vcpu_architectures'),
        vcpu_counts=pulumi.get(__ret__, 'vcpu_counts'),
        vcpu_manufacturers=pulumi.get(__ret__, 'vcpu_manufacturers'))
def get_is_instance_profile_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   name: Optional[pulumi.Input[_builtins.str]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsInstanceProfileResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsInstanceProfile:getIsInstanceProfile', __args__, opts=opts, typ=GetIsInstanceProfileResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsInstanceProfileResult(
        architecture=pulumi.get(__response__, 'architecture'),
        architecture_type=pulumi.get(__response__, 'architecture_type'),
        architecture_values=pulumi.get(__response__, 'architecture_values'),
        bandwidths=pulumi.get(__response__, 'bandwidths'),
        cluster_network_attachment_counts=pulumi.get(__response__, 'cluster_network_attachment_counts'),
        confidential_compute_modes=pulumi.get(__response__, 'confidential_compute_modes'),
        disks=pulumi.get(__response__, 'disks'),
        family=pulumi.get(__response__, 'family'),
        gpu_counts=pulumi.get(__response__, 'gpu_counts'),
        gpu_manufacturers=pulumi.get(__response__, 'gpu_manufacturers'),
        gpu_memories=pulumi.get(__response__, 'gpu_memories'),
        gpu_models=pulumi.get(__response__, 'gpu_models'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        memories=pulumi.get(__response__, 'memories'),
        name=pulumi.get(__response__, 'name'),
        network_attachment_counts=pulumi.get(__response__, 'network_attachment_counts'),
        network_interface_counts=pulumi.get(__response__, 'network_interface_counts'),
        numa_counts=pulumi.get(__response__, 'numa_counts'),
        port_speeds=pulumi.get(__response__, 'port_speeds'),
        reservation_terms=pulumi.get(__response__, 'reservation_terms'),
        secure_boot_modes=pulumi.get(__response__, 'secure_boot_modes'),
        status=pulumi.get(__response__, 'status'),
        supported_cluster_network_profiles=pulumi.get(__response__, 'supported_cluster_network_profiles'),
        total_volume_bandwidths=pulumi.get(__response__, 'total_volume_bandwidths'),
        vcpu_architectures=pulumi.get(__response__, 'vcpu_architectures'),
        vcpu_counts=pulumi.get(__response__, 'vcpu_counts'),
        vcpu_manufacturers=pulumi.get(__response__, 'vcpu_manufacturers')))
