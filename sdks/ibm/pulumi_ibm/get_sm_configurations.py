# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSmConfigurationsResult',
    'AwaitableGetSmConfigurationsResult',
    'get_sm_configurations',
    'get_sm_configurations_output',
]

@pulumi.output_type
class GetSmConfigurationsResult:
    """
    A collection of values returned by getSmConfigurations.
    """
    def __init__(__self__, configurations=None, endpoint_type=None, groups=None, id=None, instance_id=None, region=None, search=None, secret_types=None, sort=None, total_count=None):
        if configurations and not isinstance(configurations, list):
            raise TypeError("Expected argument 'configurations' to be a list")
        pulumi.set(__self__, "configurations", configurations)
        if endpoint_type and not isinstance(endpoint_type, str):
            raise TypeError("Expected argument 'endpoint_type' to be a str")
        pulumi.set(__self__, "endpoint_type", endpoint_type)
        if groups and not isinstance(groups, str):
            raise TypeError("Expected argument 'groups' to be a str")
        pulumi.set(__self__, "groups", groups)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if search and not isinstance(search, str):
            raise TypeError("Expected argument 'search' to be a str")
        pulumi.set(__self__, "search", search)
        if secret_types and not isinstance(secret_types, list):
            raise TypeError("Expected argument 'secret_types' to be a list")
        pulumi.set(__self__, "secret_types", secret_types)
        if sort and not isinstance(sort, str):
            raise TypeError("Expected argument 'sort' to be a str")
        pulumi.set(__self__, "sort", sort)
        if total_count and not isinstance(total_count, float):
            raise TypeError("Expected argument 'total_count' to be a float")
        pulumi.set(__self__, "total_count", total_count)

    @_builtins.property
    @pulumi.getter
    def configurations(self) -> Sequence['outputs.GetSmConfigurationsConfigurationResult']:
        return pulumi.get(self, "configurations")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "groups")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def search(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "search")

    @_builtins.property
    @pulumi.getter(name="secretTypes")
    def secret_types(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "secret_types")

    @_builtins.property
    @pulumi.getter
    def sort(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort")

    @_builtins.property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> _builtins.float:
        return pulumi.get(self, "total_count")


class AwaitableGetSmConfigurationsResult(GetSmConfigurationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSmConfigurationsResult(
            configurations=self.configurations,
            endpoint_type=self.endpoint_type,
            groups=self.groups,
            id=self.id,
            instance_id=self.instance_id,
            region=self.region,
            search=self.search,
            secret_types=self.secret_types,
            sort=self.sort,
            total_count=self.total_count)


def get_sm_configurations(endpoint_type: Optional[_builtins.str] = None,
                          groups: Optional[_builtins.str] = None,
                          id: Optional[_builtins.str] = None,
                          instance_id: Optional[_builtins.str] = None,
                          region: Optional[_builtins.str] = None,
                          search: Optional[_builtins.str] = None,
                          secret_types: Optional[Sequence[_builtins.str]] = None,
                          sort: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSmConfigurationsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['endpointType'] = endpoint_type
    __args__['groups'] = groups
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['search'] = search
    __args__['secretTypes'] = secret_types
    __args__['sort'] = sort
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSmConfigurations:getSmConfigurations', __args__, opts=opts, typ=GetSmConfigurationsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSmConfigurationsResult(
        configurations=pulumi.get(__ret__, 'configurations'),
        endpoint_type=pulumi.get(__ret__, 'endpoint_type'),
        groups=pulumi.get(__ret__, 'groups'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        region=pulumi.get(__ret__, 'region'),
        search=pulumi.get(__ret__, 'search'),
        secret_types=pulumi.get(__ret__, 'secret_types'),
        sort=pulumi.get(__ret__, 'sort'),
        total_count=pulumi.get(__ret__, 'total_count'))
def get_sm_configurations_output(endpoint_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 groups: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                 region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 search: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 secret_types: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                 sort: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSmConfigurationsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['endpointType'] = endpoint_type
    __args__['groups'] = groups
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['search'] = search
    __args__['secretTypes'] = secret_types
    __args__['sort'] = sort
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSmConfigurations:getSmConfigurations', __args__, opts=opts, typ=GetSmConfigurationsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSmConfigurationsResult(
        configurations=pulumi.get(__response__, 'configurations'),
        endpoint_type=pulumi.get(__response__, 'endpoint_type'),
        groups=pulumi.get(__response__, 'groups'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        region=pulumi.get(__response__, 'region'),
        search=pulumi.get(__response__, 'search'),
        secret_types=pulumi.get(__response__, 'secret_types'),
        sort=pulumi.get(__response__, 'sort'),
        total_count=pulumi.get(__response__, 'total_count')))
