# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CdTektonPipelineTriggerInitArgs', 'CdTektonPipelineTrigger']

@pulumi.input_type
class CdTektonPipelineTriggerInitArgs:
    def __init__(__self__, *,
                 event_listener: pulumi.Input[_builtins.str],
                 pipeline_id: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 cd_tekton_pipeline_trigger_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cron: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_events_from_forks: Optional[pulumi.Input[_builtins.bool]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 events: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 favorite: Optional[pulumi.Input[_builtins.bool]] = None,
                 filter: Optional[pulumi.Input[_builtins.str]] = None,
                 limit_waiting_runs: Optional[pulumi.Input[_builtins.bool]] = None,
                 max_concurrent_runs: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 secret: Optional[pulumi.Input['CdTektonPipelineTriggerSecretArgs']] = None,
                 source: Optional[pulumi.Input['CdTektonPipelineTriggerSourceArgs']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timezone: Optional[pulumi.Input[_builtins.str]] = None,
                 worker: Optional[pulumi.Input['CdTektonPipelineTriggerWorkerArgs']] = None):
        """
        The set of arguments for constructing a CdTektonPipelineTrigger resource.
        :param pulumi.Input[_builtins.str] event_listener: Event listener name. The name of the event listener to which the trigger is associated. The event listeners are defined
               in the definition repositories of the Tekton pipeline.
        :param pulumi.Input[_builtins.str] pipeline_id: The Tekton pipeline ID.
        :param pulumi.Input[_builtins.str] type: Trigger type.
        :param pulumi.Input[_builtins.str] cron: Only needed for timer triggers. CRON expression that indicates when this trigger will activate. Maximum frequency is
               every 5 minutes. The string is based on UNIX crontab syntax: minute, hour, day of month, month, day of week. Example:
               The CRON expression 0 *_/2 * * * - translates to - every 2 hours.
        :param pulumi.Input[_builtins.bool] enable_events_from_forks: When enabled, pull request events from forks of the selected repository will trigger a pipeline run.
        :param pulumi.Input[_builtins.bool] enabled: Flag to check if the trigger is enabled.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] events: Either 'events' or 'filter' is required specifically for Git triggers. Stores a list of events that a Git trigger
               listens to. Choose one or more from 'push', 'pull_request', and 'pull_request_closed'. If SCM repositories use the
               'merge request' term, they correspond to the generic term i.e. 'pull request'.
        :param pulumi.Input[_builtins.bool] favorite: Mark the trigger as a favorite.
        :param pulumi.Input[_builtins.str] filter: Either 'events' or 'filter' can be used. Stores the CEL (Common Expression Language) expression value which is used for
               event filtering against the Git webhook payloads.
        :param pulumi.Input[_builtins.bool] limit_waiting_runs: Flag that will limit the trigger to a maximum of one waiting run. A newly triggered run will cause any other waiting
               run(s) to be automatically cancelled.
        :param pulumi.Input[_builtins.float] max_concurrent_runs: Defines the maximum number of concurrent runs for this trigger. If omitted then the concurrency limit is disabled for
               this trigger.
        :param pulumi.Input[_builtins.str] name: Trigger name.
        :param pulumi.Input['CdTektonPipelineTriggerSecretArgs'] secret: Only needed for Generic Webhook trigger type. The secret is used to start the Generic Webhook trigger.
        :param pulumi.Input['CdTektonPipelineTriggerSourceArgs'] source: Source repository for a Git trigger. Only required for Git triggers. The referenced repository URL must match the URL of
               a repository tool integration in the parent toolchain. Obtain the list of integrations from the toolchain API
               https://cloud.ibm.com/apidocs/toolchain#list-tools.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Optional trigger tags array.
        :param pulumi.Input[_builtins.str] timezone: Only used for timer triggers. Specify the timezone used for this timer trigger, which will ensure the CRON activates
               this trigger relative to the specified timezone. If no timezone is specified, the default timezone used is UTC. Valid
               timezones are those listed in the IANA timezone database, https://www.iana.org/time-zones.
        :param pulumi.Input['CdTektonPipelineTriggerWorkerArgs'] worker: Details of the worker used to run the trigger.
        """
        pulumi.set(__self__, "event_listener", event_listener)
        pulumi.set(__self__, "pipeline_id", pipeline_id)
        pulumi.set(__self__, "type", type)
        if cd_tekton_pipeline_trigger_id is not None:
            pulumi.set(__self__, "cd_tekton_pipeline_trigger_id", cd_tekton_pipeline_trigger_id)
        if cron is not None:
            pulumi.set(__self__, "cron", cron)
        if enable_events_from_forks is not None:
            pulumi.set(__self__, "enable_events_from_forks", enable_events_from_forks)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if favorite is not None:
            pulumi.set(__self__, "favorite", favorite)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if limit_waiting_runs is not None:
            pulumi.set(__self__, "limit_waiting_runs", limit_waiting_runs)
        if max_concurrent_runs is not None:
            pulumi.set(__self__, "max_concurrent_runs", max_concurrent_runs)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if worker is not None:
            pulumi.set(__self__, "worker", worker)

    @_builtins.property
    @pulumi.getter(name="eventListener")
    def event_listener(self) -> pulumi.Input[_builtins.str]:
        """
        Event listener name. The name of the event listener to which the trigger is associated. The event listeners are defined
        in the definition repositories of the Tekton pipeline.
        """
        return pulumi.get(self, "event_listener")

    @event_listener.setter
    def event_listener(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "event_listener", value)

    @_builtins.property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> pulumi.Input[_builtins.str]:
        """
        The Tekton pipeline ID.
        """
        return pulumi.get(self, "pipeline_id")

    @pipeline_id.setter
    def pipeline_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pipeline_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Trigger type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="cdTektonPipelineTriggerId")
    def cd_tekton_pipeline_trigger_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cd_tekton_pipeline_trigger_id")

    @cd_tekton_pipeline_trigger_id.setter
    def cd_tekton_pipeline_trigger_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cd_tekton_pipeline_trigger_id", value)

    @_builtins.property
    @pulumi.getter
    def cron(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Only needed for timer triggers. CRON expression that indicates when this trigger will activate. Maximum frequency is
        every 5 minutes. The string is based on UNIX crontab syntax: minute, hour, day of month, month, day of week. Example:
        The CRON expression 0 *_/2 * * * - translates to - every 2 hours.
        """
        return pulumi.get(self, "cron")

    @cron.setter
    def cron(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cron", value)

    @_builtins.property
    @pulumi.getter(name="enableEventsFromForks")
    def enable_events_from_forks(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        When enabled, pull request events from forks of the selected repository will trigger a pipeline run.
        """
        return pulumi.get(self, "enable_events_from_forks")

    @enable_events_from_forks.setter
    def enable_events_from_forks(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_events_from_forks", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Flag to check if the trigger is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Either 'events' or 'filter' is required specifically for Git triggers. Stores a list of events that a Git trigger
        listens to. Choose one or more from 'push', 'pull_request', and 'pull_request_closed'. If SCM repositories use the
        'merge request' term, they correspond to the generic term i.e. 'pull request'.
        """
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "events", value)

    @_builtins.property
    @pulumi.getter
    def favorite(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Mark the trigger as a favorite.
        """
        return pulumi.get(self, "favorite")

    @favorite.setter
    def favorite(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "favorite", value)

    @_builtins.property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Either 'events' or 'filter' can be used. Stores the CEL (Common Expression Language) expression value which is used for
        event filtering against the Git webhook payloads.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "filter", value)

    @_builtins.property
    @pulumi.getter(name="limitWaitingRuns")
    def limit_waiting_runs(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Flag that will limit the trigger to a maximum of one waiting run. A newly triggered run will cause any other waiting
        run(s) to be automatically cancelled.
        """
        return pulumi.get(self, "limit_waiting_runs")

    @limit_waiting_runs.setter
    def limit_waiting_runs(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "limit_waiting_runs", value)

    @_builtins.property
    @pulumi.getter(name="maxConcurrentRuns")
    def max_concurrent_runs(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Defines the maximum number of concurrent runs for this trigger. If omitted then the concurrency limit is disabled for
        this trigger.
        """
        return pulumi.get(self, "max_concurrent_runs")

    @max_concurrent_runs.setter
    def max_concurrent_runs(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "max_concurrent_runs", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Trigger name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['CdTektonPipelineTriggerSecretArgs']]:
        """
        Only needed for Generic Webhook trigger type. The secret is used to start the Generic Webhook trigger.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['CdTektonPipelineTriggerSecretArgs']]):
        pulumi.set(self, "secret", value)

    @_builtins.property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input['CdTektonPipelineTriggerSourceArgs']]:
        """
        Source repository for a Git trigger. Only required for Git triggers. The referenced repository URL must match the URL of
        a repository tool integration in the parent toolchain. Obtain the list of integrations from the toolchain API
        https://cloud.ibm.com/apidocs/toolchain#list-tools.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input['CdTektonPipelineTriggerSourceArgs']]):
        pulumi.set(self, "source", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Optional trigger tags array.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Only used for timer triggers. Specify the timezone used for this timer trigger, which will ensure the CRON activates
        this trigger relative to the specified timezone. If no timezone is specified, the default timezone used is UTC. Valid
        timezones are those listed in the IANA timezone database, https://www.iana.org/time-zones.
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "timezone", value)

    @_builtins.property
    @pulumi.getter
    def worker(self) -> Optional[pulumi.Input['CdTektonPipelineTriggerWorkerArgs']]:
        """
        Details of the worker used to run the trigger.
        """
        return pulumi.get(self, "worker")

    @worker.setter
    def worker(self, value: Optional[pulumi.Input['CdTektonPipelineTriggerWorkerArgs']]):
        pulumi.set(self, "worker", value)


@pulumi.input_type
class _CdTektonPipelineTriggerState:
    def __init__(__self__, *,
                 cd_tekton_pipeline_trigger_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cron: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_events_from_forks: Optional[pulumi.Input[_builtins.bool]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 event_listener: Optional[pulumi.Input[_builtins.str]] = None,
                 events: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 favorite: Optional[pulumi.Input[_builtins.bool]] = None,
                 filter: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 limit_waiting_runs: Optional[pulumi.Input[_builtins.bool]] = None,
                 max_concurrent_runs: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['CdTektonPipelineTriggerPropertyArgs']]]] = None,
                 secret: Optional[pulumi.Input['CdTektonPipelineTriggerSecretArgs']] = None,
                 source: Optional[pulumi.Input['CdTektonPipelineTriggerSourceArgs']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timezone: Optional[pulumi.Input[_builtins.str]] = None,
                 trigger_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 webhook_url: Optional[pulumi.Input[_builtins.str]] = None,
                 worker: Optional[pulumi.Input['CdTektonPipelineTriggerWorkerArgs']] = None):
        """
        Input properties used for looking up and filtering CdTektonPipelineTrigger resources.
        :param pulumi.Input[_builtins.str] cron: Only needed for timer triggers. CRON expression that indicates when this trigger will activate. Maximum frequency is
               every 5 minutes. The string is based on UNIX crontab syntax: minute, hour, day of month, month, day of week. Example:
               The CRON expression 0 *_/2 * * * - translates to - every 2 hours.
        :param pulumi.Input[_builtins.bool] enable_events_from_forks: When enabled, pull request events from forks of the selected repository will trigger a pipeline run.
        :param pulumi.Input[_builtins.bool] enabled: Flag to check if the trigger is enabled.
        :param pulumi.Input[_builtins.str] event_listener: Event listener name. The name of the event listener to which the trigger is associated. The event listeners are defined
               in the definition repositories of the Tekton pipeline.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] events: Either 'events' or 'filter' is required specifically for Git triggers. Stores a list of events that a Git trigger
               listens to. Choose one or more from 'push', 'pull_request', and 'pull_request_closed'. If SCM repositories use the
               'merge request' term, they correspond to the generic term i.e. 'pull request'.
        :param pulumi.Input[_builtins.bool] favorite: Mark the trigger as a favorite.
        :param pulumi.Input[_builtins.str] filter: Either 'events' or 'filter' can be used. Stores the CEL (Common Expression Language) expression value which is used for
               event filtering against the Git webhook payloads.
        :param pulumi.Input[_builtins.str] href: API URL for interacting with the trigger. Only included when fetching the list of pipeline triggers.
        :param pulumi.Input[_builtins.bool] limit_waiting_runs: Flag that will limit the trigger to a maximum of one waiting run. A newly triggered run will cause any other waiting
               run(s) to be automatically cancelled.
        :param pulumi.Input[_builtins.float] max_concurrent_runs: Defines the maximum number of concurrent runs for this trigger. If omitted then the concurrency limit is disabled for
               this trigger.
        :param pulumi.Input[_builtins.str] name: Trigger name.
        :param pulumi.Input[_builtins.str] pipeline_id: The Tekton pipeline ID.
        :param pulumi.Input[Sequence[pulumi.Input['CdTektonPipelineTriggerPropertyArgs']]] properties: Optional trigger properties are used to override or supplement the pipeline properties when triggering a pipeline run.
        :param pulumi.Input['CdTektonPipelineTriggerSecretArgs'] secret: Only needed for Generic Webhook trigger type. The secret is used to start the Generic Webhook trigger.
        :param pulumi.Input['CdTektonPipelineTriggerSourceArgs'] source: Source repository for a Git trigger. Only required for Git triggers. The referenced repository URL must match the URL of
               a repository tool integration in the parent toolchain. Obtain the list of integrations from the toolchain API
               https://cloud.ibm.com/apidocs/toolchain#list-tools.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Optional trigger tags array.
        :param pulumi.Input[_builtins.str] timezone: Only used for timer triggers. Specify the timezone used for this timer trigger, which will ensure the CRON activates
               this trigger relative to the specified timezone. If no timezone is specified, the default timezone used is UTC. Valid
               timezones are those listed in the IANA timezone database, https://www.iana.org/time-zones.
        :param pulumi.Input[_builtins.str] trigger_id: The Trigger ID.
        :param pulumi.Input[_builtins.str] type: Trigger type.
        :param pulumi.Input[_builtins.str] webhook_url: Webhook URL that can be used to trigger pipeline runs.
        :param pulumi.Input['CdTektonPipelineTriggerWorkerArgs'] worker: Details of the worker used to run the trigger.
        """
        if cd_tekton_pipeline_trigger_id is not None:
            pulumi.set(__self__, "cd_tekton_pipeline_trigger_id", cd_tekton_pipeline_trigger_id)
        if cron is not None:
            pulumi.set(__self__, "cron", cron)
        if enable_events_from_forks is not None:
            pulumi.set(__self__, "enable_events_from_forks", enable_events_from_forks)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if event_listener is not None:
            pulumi.set(__self__, "event_listener", event_listener)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if favorite is not None:
            pulumi.set(__self__, "favorite", favorite)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if limit_waiting_runs is not None:
            pulumi.set(__self__, "limit_waiting_runs", limit_waiting_runs)
        if max_concurrent_runs is not None:
            pulumi.set(__self__, "max_concurrent_runs", max_concurrent_runs)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pipeline_id is not None:
            pulumi.set(__self__, "pipeline_id", pipeline_id)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if trigger_id is not None:
            pulumi.set(__self__, "trigger_id", trigger_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if webhook_url is not None:
            pulumi.set(__self__, "webhook_url", webhook_url)
        if worker is not None:
            pulumi.set(__self__, "worker", worker)

    @_builtins.property
    @pulumi.getter(name="cdTektonPipelineTriggerId")
    def cd_tekton_pipeline_trigger_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cd_tekton_pipeline_trigger_id")

    @cd_tekton_pipeline_trigger_id.setter
    def cd_tekton_pipeline_trigger_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cd_tekton_pipeline_trigger_id", value)

    @_builtins.property
    @pulumi.getter
    def cron(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Only needed for timer triggers. CRON expression that indicates when this trigger will activate. Maximum frequency is
        every 5 minutes. The string is based on UNIX crontab syntax: minute, hour, day of month, month, day of week. Example:
        The CRON expression 0 *_/2 * * * - translates to - every 2 hours.
        """
        return pulumi.get(self, "cron")

    @cron.setter
    def cron(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cron", value)

    @_builtins.property
    @pulumi.getter(name="enableEventsFromForks")
    def enable_events_from_forks(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        When enabled, pull request events from forks of the selected repository will trigger a pipeline run.
        """
        return pulumi.get(self, "enable_events_from_forks")

    @enable_events_from_forks.setter
    def enable_events_from_forks(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_events_from_forks", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Flag to check if the trigger is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="eventListener")
    def event_listener(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Event listener name. The name of the event listener to which the trigger is associated. The event listeners are defined
        in the definition repositories of the Tekton pipeline.
        """
        return pulumi.get(self, "event_listener")

    @event_listener.setter
    def event_listener(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "event_listener", value)

    @_builtins.property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Either 'events' or 'filter' is required specifically for Git triggers. Stores a list of events that a Git trigger
        listens to. Choose one or more from 'push', 'pull_request', and 'pull_request_closed'. If SCM repositories use the
        'merge request' term, they correspond to the generic term i.e. 'pull request'.
        """
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "events", value)

    @_builtins.property
    @pulumi.getter
    def favorite(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Mark the trigger as a favorite.
        """
        return pulumi.get(self, "favorite")

    @favorite.setter
    def favorite(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "favorite", value)

    @_builtins.property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Either 'events' or 'filter' can be used. Stores the CEL (Common Expression Language) expression value which is used for
        event filtering against the Git webhook payloads.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "filter", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        API URL for interacting with the trigger. Only included when fetching the list of pipeline triggers.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="limitWaitingRuns")
    def limit_waiting_runs(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Flag that will limit the trigger to a maximum of one waiting run. A newly triggered run will cause any other waiting
        run(s) to be automatically cancelled.
        """
        return pulumi.get(self, "limit_waiting_runs")

    @limit_waiting_runs.setter
    def limit_waiting_runs(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "limit_waiting_runs", value)

    @_builtins.property
    @pulumi.getter(name="maxConcurrentRuns")
    def max_concurrent_runs(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Defines the maximum number of concurrent runs for this trigger. If omitted then the concurrency limit is disabled for
        this trigger.
        """
        return pulumi.get(self, "max_concurrent_runs")

    @max_concurrent_runs.setter
    def max_concurrent_runs(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "max_concurrent_runs", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Trigger name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Tekton pipeline ID.
        """
        return pulumi.get(self, "pipeline_id")

    @pipeline_id.setter
    def pipeline_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pipeline_id", value)

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CdTektonPipelineTriggerPropertyArgs']]]]:
        """
        Optional trigger properties are used to override or supplement the pipeline properties when triggering a pipeline run.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CdTektonPipelineTriggerPropertyArgs']]]]):
        pulumi.set(self, "properties", value)

    @_builtins.property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['CdTektonPipelineTriggerSecretArgs']]:
        """
        Only needed for Generic Webhook trigger type. The secret is used to start the Generic Webhook trigger.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['CdTektonPipelineTriggerSecretArgs']]):
        pulumi.set(self, "secret", value)

    @_builtins.property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input['CdTektonPipelineTriggerSourceArgs']]:
        """
        Source repository for a Git trigger. Only required for Git triggers. The referenced repository URL must match the URL of
        a repository tool integration in the parent toolchain. Obtain the list of integrations from the toolchain API
        https://cloud.ibm.com/apidocs/toolchain#list-tools.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input['CdTektonPipelineTriggerSourceArgs']]):
        pulumi.set(self, "source", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Optional trigger tags array.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Only used for timer triggers. Specify the timezone used for this timer trigger, which will ensure the CRON activates
        this trigger relative to the specified timezone. If no timezone is specified, the default timezone used is UTC. Valid
        timezones are those listed in the IANA timezone database, https://www.iana.org/time-zones.
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "timezone", value)

    @_builtins.property
    @pulumi.getter(name="triggerId")
    def trigger_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Trigger ID.
        """
        return pulumi.get(self, "trigger_id")

    @trigger_id.setter
    def trigger_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "trigger_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Trigger type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="webhookUrl")
    def webhook_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Webhook URL that can be used to trigger pipeline runs.
        """
        return pulumi.get(self, "webhook_url")

    @webhook_url.setter
    def webhook_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "webhook_url", value)

    @_builtins.property
    @pulumi.getter
    def worker(self) -> Optional[pulumi.Input['CdTektonPipelineTriggerWorkerArgs']]:
        """
        Details of the worker used to run the trigger.
        """
        return pulumi.get(self, "worker")

    @worker.setter
    def worker(self, value: Optional[pulumi.Input['CdTektonPipelineTriggerWorkerArgs']]):
        pulumi.set(self, "worker", value)


@pulumi.type_token("ibm:index/cdTektonPipelineTrigger:CdTektonPipelineTrigger")
class CdTektonPipelineTrigger(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cd_tekton_pipeline_trigger_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cron: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_events_from_forks: Optional[pulumi.Input[_builtins.bool]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 event_listener: Optional[pulumi.Input[_builtins.str]] = None,
                 events: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 favorite: Optional[pulumi.Input[_builtins.bool]] = None,
                 filter: Optional[pulumi.Input[_builtins.str]] = None,
                 limit_waiting_runs: Optional[pulumi.Input[_builtins.bool]] = None,
                 max_concurrent_runs: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
                 secret: Optional[pulumi.Input[Union['CdTektonPipelineTriggerSecretArgs', 'CdTektonPipelineTriggerSecretArgsDict']]] = None,
                 source: Optional[pulumi.Input[Union['CdTektonPipelineTriggerSourceArgs', 'CdTektonPipelineTriggerSourceArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timezone: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 worker: Optional[pulumi.Input[Union['CdTektonPipelineTriggerWorkerArgs', 'CdTektonPipelineTriggerWorkerArgsDict']]] = None,
                 __props__=None):
        """
        Create a CdTektonPipelineTrigger resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cron: Only needed for timer triggers. CRON expression that indicates when this trigger will activate. Maximum frequency is
               every 5 minutes. The string is based on UNIX crontab syntax: minute, hour, day of month, month, day of week. Example:
               The CRON expression 0 *_/2 * * * - translates to - every 2 hours.
        :param pulumi.Input[_builtins.bool] enable_events_from_forks: When enabled, pull request events from forks of the selected repository will trigger a pipeline run.
        :param pulumi.Input[_builtins.bool] enabled: Flag to check if the trigger is enabled.
        :param pulumi.Input[_builtins.str] event_listener: Event listener name. The name of the event listener to which the trigger is associated. The event listeners are defined
               in the definition repositories of the Tekton pipeline.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] events: Either 'events' or 'filter' is required specifically for Git triggers. Stores a list of events that a Git trigger
               listens to. Choose one or more from 'push', 'pull_request', and 'pull_request_closed'. If SCM repositories use the
               'merge request' term, they correspond to the generic term i.e. 'pull request'.
        :param pulumi.Input[_builtins.bool] favorite: Mark the trigger as a favorite.
        :param pulumi.Input[_builtins.str] filter: Either 'events' or 'filter' can be used. Stores the CEL (Common Expression Language) expression value which is used for
               event filtering against the Git webhook payloads.
        :param pulumi.Input[_builtins.bool] limit_waiting_runs: Flag that will limit the trigger to a maximum of one waiting run. A newly triggered run will cause any other waiting
               run(s) to be automatically cancelled.
        :param pulumi.Input[_builtins.float] max_concurrent_runs: Defines the maximum number of concurrent runs for this trigger. If omitted then the concurrency limit is disabled for
               this trigger.
        :param pulumi.Input[_builtins.str] name: Trigger name.
        :param pulumi.Input[_builtins.str] pipeline_id: The Tekton pipeline ID.
        :param pulumi.Input[Union['CdTektonPipelineTriggerSecretArgs', 'CdTektonPipelineTriggerSecretArgsDict']] secret: Only needed for Generic Webhook trigger type. The secret is used to start the Generic Webhook trigger.
        :param pulumi.Input[Union['CdTektonPipelineTriggerSourceArgs', 'CdTektonPipelineTriggerSourceArgsDict']] source: Source repository for a Git trigger. Only required for Git triggers. The referenced repository URL must match the URL of
               a repository tool integration in the parent toolchain. Obtain the list of integrations from the toolchain API
               https://cloud.ibm.com/apidocs/toolchain#list-tools.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Optional trigger tags array.
        :param pulumi.Input[_builtins.str] timezone: Only used for timer triggers. Specify the timezone used for this timer trigger, which will ensure the CRON activates
               this trigger relative to the specified timezone. If no timezone is specified, the default timezone used is UTC. Valid
               timezones are those listed in the IANA timezone database, https://www.iana.org/time-zones.
        :param pulumi.Input[_builtins.str] type: Trigger type.
        :param pulumi.Input[Union['CdTektonPipelineTriggerWorkerArgs', 'CdTektonPipelineTriggerWorkerArgsDict']] worker: Details of the worker used to run the trigger.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CdTektonPipelineTriggerInitArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CdTektonPipelineTrigger resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CdTektonPipelineTriggerInitArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CdTektonPipelineTriggerInitArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cd_tekton_pipeline_trigger_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cron: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_events_from_forks: Optional[pulumi.Input[_builtins.bool]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 event_listener: Optional[pulumi.Input[_builtins.str]] = None,
                 events: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 favorite: Optional[pulumi.Input[_builtins.bool]] = None,
                 filter: Optional[pulumi.Input[_builtins.str]] = None,
                 limit_waiting_runs: Optional[pulumi.Input[_builtins.bool]] = None,
                 max_concurrent_runs: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
                 secret: Optional[pulumi.Input[Union['CdTektonPipelineTriggerSecretArgs', 'CdTektonPipelineTriggerSecretArgsDict']]] = None,
                 source: Optional[pulumi.Input[Union['CdTektonPipelineTriggerSourceArgs', 'CdTektonPipelineTriggerSourceArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timezone: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 worker: Optional[pulumi.Input[Union['CdTektonPipelineTriggerWorkerArgs', 'CdTektonPipelineTriggerWorkerArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CdTektonPipelineTriggerInitArgs.__new__(CdTektonPipelineTriggerInitArgs)

            __props__.__dict__["cd_tekton_pipeline_trigger_id"] = cd_tekton_pipeline_trigger_id
            __props__.__dict__["cron"] = cron
            __props__.__dict__["enable_events_from_forks"] = enable_events_from_forks
            __props__.__dict__["enabled"] = enabled
            if event_listener is None and not opts.urn:
                raise TypeError("Missing required property 'event_listener'")
            __props__.__dict__["event_listener"] = event_listener
            __props__.__dict__["events"] = events
            __props__.__dict__["favorite"] = favorite
            __props__.__dict__["filter"] = filter
            __props__.__dict__["limit_waiting_runs"] = limit_waiting_runs
            __props__.__dict__["max_concurrent_runs"] = max_concurrent_runs
            __props__.__dict__["name"] = name
            if pipeline_id is None and not opts.urn:
                raise TypeError("Missing required property 'pipeline_id'")
            __props__.__dict__["pipeline_id"] = pipeline_id
            __props__.__dict__["secret"] = secret
            __props__.__dict__["source"] = source
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timezone"] = timezone
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["worker"] = worker
            __props__.__dict__["href"] = None
            __props__.__dict__["properties"] = None
            __props__.__dict__["trigger_id"] = None
            __props__.__dict__["webhook_url"] = None
        super(CdTektonPipelineTrigger, __self__).__init__(
            'ibm:index/cdTektonPipelineTrigger:CdTektonPipelineTrigger',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cd_tekton_pipeline_trigger_id: Optional[pulumi.Input[_builtins.str]] = None,
            cron: Optional[pulumi.Input[_builtins.str]] = None,
            enable_events_from_forks: Optional[pulumi.Input[_builtins.bool]] = None,
            enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            event_listener: Optional[pulumi.Input[_builtins.str]] = None,
            events: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            favorite: Optional[pulumi.Input[_builtins.bool]] = None,
            filter: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            limit_waiting_runs: Optional[pulumi.Input[_builtins.bool]] = None,
            max_concurrent_runs: Optional[pulumi.Input[_builtins.float]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
            properties: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CdTektonPipelineTriggerPropertyArgs', 'CdTektonPipelineTriggerPropertyArgsDict']]]]] = None,
            secret: Optional[pulumi.Input[Union['CdTektonPipelineTriggerSecretArgs', 'CdTektonPipelineTriggerSecretArgsDict']]] = None,
            source: Optional[pulumi.Input[Union['CdTektonPipelineTriggerSourceArgs', 'CdTektonPipelineTriggerSourceArgsDict']]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            timezone: Optional[pulumi.Input[_builtins.str]] = None,
            trigger_id: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            webhook_url: Optional[pulumi.Input[_builtins.str]] = None,
            worker: Optional[pulumi.Input[Union['CdTektonPipelineTriggerWorkerArgs', 'CdTektonPipelineTriggerWorkerArgsDict']]] = None) -> 'CdTektonPipelineTrigger':
        """
        Get an existing CdTektonPipelineTrigger resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cron: Only needed for timer triggers. CRON expression that indicates when this trigger will activate. Maximum frequency is
               every 5 minutes. The string is based on UNIX crontab syntax: minute, hour, day of month, month, day of week. Example:
               The CRON expression 0 *_/2 * * * - translates to - every 2 hours.
        :param pulumi.Input[_builtins.bool] enable_events_from_forks: When enabled, pull request events from forks of the selected repository will trigger a pipeline run.
        :param pulumi.Input[_builtins.bool] enabled: Flag to check if the trigger is enabled.
        :param pulumi.Input[_builtins.str] event_listener: Event listener name. The name of the event listener to which the trigger is associated. The event listeners are defined
               in the definition repositories of the Tekton pipeline.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] events: Either 'events' or 'filter' is required specifically for Git triggers. Stores a list of events that a Git trigger
               listens to. Choose one or more from 'push', 'pull_request', and 'pull_request_closed'. If SCM repositories use the
               'merge request' term, they correspond to the generic term i.e. 'pull request'.
        :param pulumi.Input[_builtins.bool] favorite: Mark the trigger as a favorite.
        :param pulumi.Input[_builtins.str] filter: Either 'events' or 'filter' can be used. Stores the CEL (Common Expression Language) expression value which is used for
               event filtering against the Git webhook payloads.
        :param pulumi.Input[_builtins.str] href: API URL for interacting with the trigger. Only included when fetching the list of pipeline triggers.
        :param pulumi.Input[_builtins.bool] limit_waiting_runs: Flag that will limit the trigger to a maximum of one waiting run. A newly triggered run will cause any other waiting
               run(s) to be automatically cancelled.
        :param pulumi.Input[_builtins.float] max_concurrent_runs: Defines the maximum number of concurrent runs for this trigger. If omitted then the concurrency limit is disabled for
               this trigger.
        :param pulumi.Input[_builtins.str] name: Trigger name.
        :param pulumi.Input[_builtins.str] pipeline_id: The Tekton pipeline ID.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CdTektonPipelineTriggerPropertyArgs', 'CdTektonPipelineTriggerPropertyArgsDict']]]] properties: Optional trigger properties are used to override or supplement the pipeline properties when triggering a pipeline run.
        :param pulumi.Input[Union['CdTektonPipelineTriggerSecretArgs', 'CdTektonPipelineTriggerSecretArgsDict']] secret: Only needed for Generic Webhook trigger type. The secret is used to start the Generic Webhook trigger.
        :param pulumi.Input[Union['CdTektonPipelineTriggerSourceArgs', 'CdTektonPipelineTriggerSourceArgsDict']] source: Source repository for a Git trigger. Only required for Git triggers. The referenced repository URL must match the URL of
               a repository tool integration in the parent toolchain. Obtain the list of integrations from the toolchain API
               https://cloud.ibm.com/apidocs/toolchain#list-tools.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Optional trigger tags array.
        :param pulumi.Input[_builtins.str] timezone: Only used for timer triggers. Specify the timezone used for this timer trigger, which will ensure the CRON activates
               this trigger relative to the specified timezone. If no timezone is specified, the default timezone used is UTC. Valid
               timezones are those listed in the IANA timezone database, https://www.iana.org/time-zones.
        :param pulumi.Input[_builtins.str] trigger_id: The Trigger ID.
        :param pulumi.Input[_builtins.str] type: Trigger type.
        :param pulumi.Input[_builtins.str] webhook_url: Webhook URL that can be used to trigger pipeline runs.
        :param pulumi.Input[Union['CdTektonPipelineTriggerWorkerArgs', 'CdTektonPipelineTriggerWorkerArgsDict']] worker: Details of the worker used to run the trigger.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CdTektonPipelineTriggerState.__new__(_CdTektonPipelineTriggerState)

        __props__.__dict__["cd_tekton_pipeline_trigger_id"] = cd_tekton_pipeline_trigger_id
        __props__.__dict__["cron"] = cron
        __props__.__dict__["enable_events_from_forks"] = enable_events_from_forks
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["event_listener"] = event_listener
        __props__.__dict__["events"] = events
        __props__.__dict__["favorite"] = favorite
        __props__.__dict__["filter"] = filter
        __props__.__dict__["href"] = href
        __props__.__dict__["limit_waiting_runs"] = limit_waiting_runs
        __props__.__dict__["max_concurrent_runs"] = max_concurrent_runs
        __props__.__dict__["name"] = name
        __props__.__dict__["pipeline_id"] = pipeline_id
        __props__.__dict__["properties"] = properties
        __props__.__dict__["secret"] = secret
        __props__.__dict__["source"] = source
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timezone"] = timezone
        __props__.__dict__["trigger_id"] = trigger_id
        __props__.__dict__["type"] = type
        __props__.__dict__["webhook_url"] = webhook_url
        __props__.__dict__["worker"] = worker
        return CdTektonPipelineTrigger(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="cdTektonPipelineTriggerId")
    def cd_tekton_pipeline_trigger_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cd_tekton_pipeline_trigger_id")

    @_builtins.property
    @pulumi.getter
    def cron(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Only needed for timer triggers. CRON expression that indicates when this trigger will activate. Maximum frequency is
        every 5 minutes. The string is based on UNIX crontab syntax: minute, hour, day of month, month, day of week. Example:
        The CRON expression 0 *_/2 * * * - translates to - every 2 hours.
        """
        return pulumi.get(self, "cron")

    @_builtins.property
    @pulumi.getter(name="enableEventsFromForks")
    def enable_events_from_forks(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        When enabled, pull request events from forks of the selected repository will trigger a pipeline run.
        """
        return pulumi.get(self, "enable_events_from_forks")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Flag to check if the trigger is enabled.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="eventListener")
    def event_listener(self) -> pulumi.Output[_builtins.str]:
        """
        Event listener name. The name of the event listener to which the trigger is associated. The event listeners are defined
        in the definition repositories of the Tekton pipeline.
        """
        return pulumi.get(self, "event_listener")

    @_builtins.property
    @pulumi.getter
    def events(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Either 'events' or 'filter' is required specifically for Git triggers. Stores a list of events that a Git trigger
        listens to. Choose one or more from 'push', 'pull_request', and 'pull_request_closed'. If SCM repositories use the
        'merge request' term, they correspond to the generic term i.e. 'pull request'.
        """
        return pulumi.get(self, "events")

    @_builtins.property
    @pulumi.getter
    def favorite(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Mark the trigger as a favorite.
        """
        return pulumi.get(self, "favorite")

    @_builtins.property
    @pulumi.getter
    def filter(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Either 'events' or 'filter' can be used. Stores the CEL (Common Expression Language) expression value which is used for
        event filtering against the Git webhook payloads.
        """
        return pulumi.get(self, "filter")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        API URL for interacting with the trigger. Only included when fetching the list of pipeline triggers.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="limitWaitingRuns")
    def limit_waiting_runs(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Flag that will limit the trigger to a maximum of one waiting run. A newly triggered run will cause any other waiting
        run(s) to be automatically cancelled.
        """
        return pulumi.get(self, "limit_waiting_runs")

    @_builtins.property
    @pulumi.getter(name="maxConcurrentRuns")
    def max_concurrent_runs(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Defines the maximum number of concurrent runs for this trigger. If omitted then the concurrency limit is disabled for
        this trigger.
        """
        return pulumi.get(self, "max_concurrent_runs")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Trigger name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> pulumi.Output[_builtins.str]:
        """
        The Tekton pipeline ID.
        """
        return pulumi.get(self, "pipeline_id")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> pulumi.Output[Sequence['outputs.CdTektonPipelineTriggerProperty']]:
        """
        Optional trigger properties are used to override or supplement the pipeline properties when triggering a pipeline run.
        """
        return pulumi.get(self, "properties")

    @_builtins.property
    @pulumi.getter
    def secret(self) -> pulumi.Output[Optional['outputs.CdTektonPipelineTriggerSecret']]:
        """
        Only needed for Generic Webhook trigger type. The secret is used to start the Generic Webhook trigger.
        """
        return pulumi.get(self, "secret")

    @_builtins.property
    @pulumi.getter
    def source(self) -> pulumi.Output[Optional['outputs.CdTektonPipelineTriggerSource']]:
        """
        Source repository for a Git trigger. Only required for Git triggers. The referenced repository URL must match the URL of
        a repository tool integration in the parent toolchain. Obtain the list of integrations from the toolchain API
        https://cloud.ibm.com/apidocs/toolchain#list-tools.
        """
        return pulumi.get(self, "source")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Optional trigger tags array.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def timezone(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Only used for timer triggers. Specify the timezone used for this timer trigger, which will ensure the CRON activates
        this trigger relative to the specified timezone. If no timezone is specified, the default timezone used is UTC. Valid
        timezones are those listed in the IANA timezone database, https://www.iana.org/time-zones.
        """
        return pulumi.get(self, "timezone")

    @_builtins.property
    @pulumi.getter(name="triggerId")
    def trigger_id(self) -> pulumi.Output[_builtins.str]:
        """
        The Trigger ID.
        """
        return pulumi.get(self, "trigger_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Trigger type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="webhookUrl")
    def webhook_url(self) -> pulumi.Output[_builtins.str]:
        """
        Webhook URL that can be used to trigger pipeline runs.
        """
        return pulumi.get(self, "webhook_url")

    @_builtins.property
    @pulumi.getter
    def worker(self) -> pulumi.Output[Optional['outputs.CdTektonPipelineTriggerWorker']]:
        """
        Details of the worker used to run the trigger.
        """
        return pulumi.get(self, "worker")

