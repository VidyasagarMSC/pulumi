# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ComputeProvisioningHookArgs', 'ComputeProvisioningHook']

@pulumi.input_type
class ComputeProvisioningHookArgs:
    def __init__(__self__, *,
                 uri: pulumi.Input[_builtins.str],
                 compute_provisioning_hook_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a ComputeProvisioningHook resource.
        :param pulumi.Input[_builtins.str] uri: URI of the hook
        :param pulumi.Input[_builtins.str] name: Provision hook name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags associated with resource
        """
        pulumi.set(__self__, "uri", uri)
        if compute_provisioning_hook_id is not None:
            pulumi.set(__self__, "compute_provisioning_hook_id", compute_provisioning_hook_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def uri(self) -> pulumi.Input[_builtins.str]:
        """
        URI of the hook
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "uri", value)

    @_builtins.property
    @pulumi.getter(name="computeProvisioningHookId")
    def compute_provisioning_hook_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compute_provisioning_hook_id")

    @compute_provisioning_hook_id.setter
    def compute_provisioning_hook_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_provisioning_hook_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Provision hook name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Tags associated with resource
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _ComputeProvisioningHookState:
    def __init__(__self__, *,
                 compute_provisioning_hook_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 uri: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ComputeProvisioningHook resources.
        :param pulumi.Input[_builtins.str] name: Provision hook name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags associated with resource
        :param pulumi.Input[_builtins.str] uri: URI of the hook
        """
        if compute_provisioning_hook_id is not None:
            pulumi.set(__self__, "compute_provisioning_hook_id", compute_provisioning_hook_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @_builtins.property
    @pulumi.getter(name="computeProvisioningHookId")
    def compute_provisioning_hook_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compute_provisioning_hook_id")

    @compute_provisioning_hook_id.setter
    def compute_provisioning_hook_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_provisioning_hook_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Provision hook name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Tags associated with resource
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        URI of the hook
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "uri", value)


@pulumi.type_token("ibm:index/computeProvisioningHook:ComputeProvisioningHook")
class ComputeProvisioningHook(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compute_provisioning_hook_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 uri: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a ComputeProvisioningHook resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: Provision hook name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags associated with resource
        :param pulumi.Input[_builtins.str] uri: URI of the hook
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ComputeProvisioningHookArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ComputeProvisioningHook resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ComputeProvisioningHookArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ComputeProvisioningHookArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compute_provisioning_hook_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 uri: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ComputeProvisioningHookArgs.__new__(ComputeProvisioningHookArgs)

            __props__.__dict__["compute_provisioning_hook_id"] = compute_provisioning_hook_id
            __props__.__dict__["name"] = name
            __props__.__dict__["tags"] = tags
            if uri is None and not opts.urn:
                raise TypeError("Missing required property 'uri'")
            __props__.__dict__["uri"] = uri
        super(ComputeProvisioningHook, __self__).__init__(
            'ibm:index/computeProvisioningHook:ComputeProvisioningHook',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            compute_provisioning_hook_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            uri: Optional[pulumi.Input[_builtins.str]] = None) -> 'ComputeProvisioningHook':
        """
        Get an existing ComputeProvisioningHook resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: Provision hook name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags associated with resource
        :param pulumi.Input[_builtins.str] uri: URI of the hook
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ComputeProvisioningHookState.__new__(_ComputeProvisioningHookState)

        __props__.__dict__["compute_provisioning_hook_id"] = compute_provisioning_hook_id
        __props__.__dict__["name"] = name
        __props__.__dict__["tags"] = tags
        __props__.__dict__["uri"] = uri
        return ComputeProvisioningHook(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="computeProvisioningHookId")
    def compute_provisioning_hook_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "compute_provisioning_hook_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Provision hook name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Tags associated with resource
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def uri(self) -> pulumi.Output[_builtins.str]:
        """
        URI of the hook
        """
        return pulumi.get(self, "uri")

