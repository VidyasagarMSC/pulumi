# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetCisBotManagementsResult',
    'AwaitableGetCisBotManagementsResult',
    'get_cis_bot_managements',
    'get_cis_bot_managements_output',
]

@pulumi.output_type
class GetCisBotManagementsResult:
    """
    A collection of values returned by getCisBotManagements.
    """
    def __init__(__self__, auth_id_logging=None, cis_id=None, domain_id=None, enable_js=None, fight_mode=None, id=None, session_score=None, use_latest_model=None):
        if auth_id_logging and not isinstance(auth_id_logging, str):
            raise TypeError("Expected argument 'auth_id_logging' to be a str")
        pulumi.set(__self__, "auth_id_logging", auth_id_logging)
        if cis_id and not isinstance(cis_id, str):
            raise TypeError("Expected argument 'cis_id' to be a str")
        pulumi.set(__self__, "cis_id", cis_id)
        if domain_id and not isinstance(domain_id, str):
            raise TypeError("Expected argument 'domain_id' to be a str")
        pulumi.set(__self__, "domain_id", domain_id)
        if enable_js and not isinstance(enable_js, str):
            raise TypeError("Expected argument 'enable_js' to be a str")
        pulumi.set(__self__, "enable_js", enable_js)
        if fight_mode and not isinstance(fight_mode, str):
            raise TypeError("Expected argument 'fight_mode' to be a str")
        pulumi.set(__self__, "fight_mode", fight_mode)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if session_score and not isinstance(session_score, str):
            raise TypeError("Expected argument 'session_score' to be a str")
        pulumi.set(__self__, "session_score", session_score)
        if use_latest_model and not isinstance(use_latest_model, str):
            raise TypeError("Expected argument 'use_latest_model' to be a str")
        pulumi.set(__self__, "use_latest_model", use_latest_model)

    @_builtins.property
    @pulumi.getter(name="authIdLogging")
    def auth_id_logging(self) -> _builtins.str:
        return pulumi.get(self, "auth_id_logging")

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> _builtins.str:
        return pulumi.get(self, "cis_id")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="enableJs")
    def enable_js(self) -> _builtins.str:
        return pulumi.get(self, "enable_js")

    @_builtins.property
    @pulumi.getter(name="fightMode")
    def fight_mode(self) -> _builtins.str:
        return pulumi.get(self, "fight_mode")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="sessionScore")
    def session_score(self) -> _builtins.str:
        return pulumi.get(self, "session_score")

    @_builtins.property
    @pulumi.getter(name="useLatestModel")
    def use_latest_model(self) -> _builtins.str:
        return pulumi.get(self, "use_latest_model")


class AwaitableGetCisBotManagementsResult(GetCisBotManagementsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCisBotManagementsResult(
            auth_id_logging=self.auth_id_logging,
            cis_id=self.cis_id,
            domain_id=self.domain_id,
            enable_js=self.enable_js,
            fight_mode=self.fight_mode,
            id=self.id,
            session_score=self.session_score,
            use_latest_model=self.use_latest_model)


def get_cis_bot_managements(cis_id: Optional[_builtins.str] = None,
                            domain_id: Optional[_builtins.str] = None,
                            id: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCisBotManagementsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cisId'] = cis_id
    __args__['domainId'] = domain_id
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCisBotManagements:getCisBotManagements', __args__, opts=opts, typ=GetCisBotManagementsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCisBotManagementsResult(
        auth_id_logging=pulumi.get(__ret__, 'auth_id_logging'),
        cis_id=pulumi.get(__ret__, 'cis_id'),
        domain_id=pulumi.get(__ret__, 'domain_id'),
        enable_js=pulumi.get(__ret__, 'enable_js'),
        fight_mode=pulumi.get(__ret__, 'fight_mode'),
        id=pulumi.get(__ret__, 'id'),
        session_score=pulumi.get(__ret__, 'session_score'),
        use_latest_model=pulumi.get(__ret__, 'use_latest_model'))
def get_cis_bot_managements_output(cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCisBotManagementsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cisId'] = cis_id
    __args__['domainId'] = domain_id
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCisBotManagements:getCisBotManagements', __args__, opts=opts, typ=GetCisBotManagementsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCisBotManagementsResult(
        auth_id_logging=pulumi.get(__response__, 'auth_id_logging'),
        cis_id=pulumi.get(__response__, 'cis_id'),
        domain_id=pulumi.get(__response__, 'domain_id'),
        enable_js=pulumi.get(__response__, 'enable_js'),
        fight_mode=pulumi.get(__response__, 'fight_mode'),
        id=pulumi.get(__response__, 'id'),
        session_score=pulumi.get(__response__, 'session_score'),
        use_latest_model=pulumi.get(__response__, 'use_latest_model')))
