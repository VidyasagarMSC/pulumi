# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCodeEngineSecretResult',
    'AwaitableGetCodeEngineSecretResult',
    'get_code_engine_secret',
    'get_code_engine_secret_output',
]

@pulumi.output_type
class GetCodeEngineSecretResult:
    """
    A collection of values returned by getCodeEngineSecret.
    """
    def __init__(__self__, created_at=None, data=None, entity_tag=None, format=None, href=None, id=None, name=None, project_id=None, region=None, resource_type=None, secret_id=None, service_accesses=None, service_operators=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if data and not isinstance(data, dict):
            raise TypeError("Expected argument 'data' to be a dict")
        pulumi.set(__self__, "data", data)
        if entity_tag and not isinstance(entity_tag, str):
            raise TypeError("Expected argument 'entity_tag' to be a str")
        pulumi.set(__self__, "entity_tag", entity_tag)
        if format and not isinstance(format, str):
            raise TypeError("Expected argument 'format' to be a str")
        pulumi.set(__self__, "format", format)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if secret_id and not isinstance(secret_id, str):
            raise TypeError("Expected argument 'secret_id' to be a str")
        pulumi.set(__self__, "secret_id", secret_id)
        if service_accesses and not isinstance(service_accesses, list):
            raise TypeError("Expected argument 'service_accesses' to be a list")
        pulumi.set(__self__, "service_accesses", service_accesses)
        if service_operators and not isinstance(service_operators, list):
            raise TypeError("Expected argument 'service_operators' to be a list")
        pulumi.set(__self__, "service_operators", service_operators)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def data(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "data")

    @_builtins.property
    @pulumi.getter(name="entityTag")
    def entity_tag(self) -> _builtins.str:
        return pulumi.get(self, "entity_tag")

    @_builtins.property
    @pulumi.getter
    def format(self) -> _builtins.str:
        return pulumi.get(self, "format")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> _builtins.str:
        return pulumi.get(self, "secret_id")

    @_builtins.property
    @pulumi.getter(name="serviceAccesses")
    def service_accesses(self) -> Sequence['outputs.GetCodeEngineSecretServiceAccessResult']:
        return pulumi.get(self, "service_accesses")

    @_builtins.property
    @pulumi.getter(name="serviceOperators")
    def service_operators(self) -> Sequence['outputs.GetCodeEngineSecretServiceOperatorResult']:
        return pulumi.get(self, "service_operators")


class AwaitableGetCodeEngineSecretResult(GetCodeEngineSecretResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCodeEngineSecretResult(
            created_at=self.created_at,
            data=self.data,
            entity_tag=self.entity_tag,
            format=self.format,
            href=self.href,
            id=self.id,
            name=self.name,
            project_id=self.project_id,
            region=self.region,
            resource_type=self.resource_type,
            secret_id=self.secret_id,
            service_accesses=self.service_accesses,
            service_operators=self.service_operators)


def get_code_engine_secret(id: Optional[_builtins.str] = None,
                           name: Optional[_builtins.str] = None,
                           project_id: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCodeEngineSecretResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCodeEngineSecret:getCodeEngineSecret', __args__, opts=opts, typ=GetCodeEngineSecretResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCodeEngineSecretResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        data=pulumi.get(__ret__, 'data'),
        entity_tag=pulumi.get(__ret__, 'entity_tag'),
        format=pulumi.get(__ret__, 'format'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        project_id=pulumi.get(__ret__, 'project_id'),
        region=pulumi.get(__ret__, 'region'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        secret_id=pulumi.get(__ret__, 'secret_id'),
        service_accesses=pulumi.get(__ret__, 'service_accesses'),
        service_operators=pulumi.get(__ret__, 'service_operators'))
def get_code_engine_secret_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  name: Optional[pulumi.Input[_builtins.str]] = None,
                                  project_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCodeEngineSecretResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCodeEngineSecret:getCodeEngineSecret', __args__, opts=opts, typ=GetCodeEngineSecretResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCodeEngineSecretResult(
        created_at=pulumi.get(__response__, 'created_at'),
        data=pulumi.get(__response__, 'data'),
        entity_tag=pulumi.get(__response__, 'entity_tag'),
        format=pulumi.get(__response__, 'format'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        project_id=pulumi.get(__response__, 'project_id'),
        region=pulumi.get(__response__, 'region'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        secret_id=pulumi.get(__response__, 'secret_id'),
        service_accesses=pulumi.get(__response__, 'service_accesses'),
        service_operators=pulumi.get(__response__, 'service_operators')))
