# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsNetworkAclRulesResult',
    'AwaitableGetIsNetworkAclRulesResult',
    'get_is_network_acl_rules',
    'get_is_network_acl_rules_output',
]

@pulumi.output_type
class GetIsNetworkAclRulesResult:
    """
    A collection of values returned by getIsNetworkAclRules.
    """
    def __init__(__self__, direction=None, id=None, network_acl=None, rules=None):
        if direction and not isinstance(direction, str):
            raise TypeError("Expected argument 'direction' to be a str")
        pulumi.set(__self__, "direction", direction)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if network_acl and not isinstance(network_acl, str):
            raise TypeError("Expected argument 'network_acl' to be a str")
        pulumi.set(__self__, "network_acl", network_acl)
        if rules and not isinstance(rules, list):
            raise TypeError("Expected argument 'rules' to be a list")
        pulumi.set(__self__, "rules", rules)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="networkAcl")
    def network_acl(self) -> _builtins.str:
        return pulumi.get(self, "network_acl")

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetIsNetworkAclRulesRuleResult']:
        return pulumi.get(self, "rules")


class AwaitableGetIsNetworkAclRulesResult(GetIsNetworkAclRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsNetworkAclRulesResult(
            direction=self.direction,
            id=self.id,
            network_acl=self.network_acl,
            rules=self.rules)


def get_is_network_acl_rules(direction: Optional[_builtins.str] = None,
                             id: Optional[_builtins.str] = None,
                             network_acl: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsNetworkAclRulesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['direction'] = direction
    __args__['id'] = id
    __args__['networkAcl'] = network_acl
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsNetworkAclRules:getIsNetworkAclRules', __args__, opts=opts, typ=GetIsNetworkAclRulesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsNetworkAclRulesResult(
        direction=pulumi.get(__ret__, 'direction'),
        id=pulumi.get(__ret__, 'id'),
        network_acl=pulumi.get(__ret__, 'network_acl'),
        rules=pulumi.get(__ret__, 'rules'))
def get_is_network_acl_rules_output(direction: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    network_acl: Optional[pulumi.Input[_builtins.str]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsNetworkAclRulesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['direction'] = direction
    __args__['id'] = id
    __args__['networkAcl'] = network_acl
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsNetworkAclRules:getIsNetworkAclRules', __args__, opts=opts, typ=GetIsNetworkAclRulesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsNetworkAclRulesResult(
        direction=pulumi.get(__response__, 'direction'),
        id=pulumi.get(__response__, 'id'),
        network_acl=pulumi.get(__response__, 'network_acl'),
        rules=pulumi.get(__response__, 'rules')))
