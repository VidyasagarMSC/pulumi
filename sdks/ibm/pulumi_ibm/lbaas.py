# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LbaasArgs', 'Lbaas']

@pulumi.input_type
class LbaasArgs:
    def __init__(__self__, *,
                 subnets: pulumi.Input[Sequence[pulumi.Input[_builtins.float]]],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 lbaas_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input['LbaasProtocolArgs']]]] = None,
                 ssl_ciphers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 use_system_public_ip_pool: Optional[pulumi.Input[_builtins.bool]] = None,
                 wait_time_minutes: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a Lbaas resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] subnets: The subnet where this Load Balancer will be provisioned.
        :param pulumi.Input[_builtins.str] description: Description of a load balancer.
        :param pulumi.Input[_builtins.str] name: The load balancer's name.
        :param pulumi.Input[Sequence[pulumi.Input['LbaasProtocolArgs']]] protocols: Protocols to be assigned to this load balancer.
        :param pulumi.Input[_builtins.str] type: Specifies if a load balancer is public or private
        :param pulumi.Input[_builtins.bool] use_system_public_ip_pool: "in public loadbalancer - Public IP address allocation done by system public IP pool or public subnet."
        """
        pulumi.set(__self__, "subnets", subnets)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if lbaas_id is not None:
            pulumi.set(__self__, "lbaas_id", lbaas_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if ssl_ciphers is not None:
            pulumi.set(__self__, "ssl_ciphers", ssl_ciphers)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_system_public_ip_pool is not None:
            pulumi.set(__self__, "use_system_public_ip_pool", use_system_public_ip_pool)
        if wait_time_minutes is not None:
            pulumi.set(__self__, "wait_time_minutes", wait_time_minutes)

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]:
        """
        The subnet where this Load Balancer will be provisioned.
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]):
        pulumi.set(self, "subnets", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of a load balancer.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="lbaasId")
    def lbaas_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "lbaas_id")

    @lbaas_id.setter
    def lbaas_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lbaas_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The load balancer's name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LbaasProtocolArgs']]]]:
        """
        Protocols to be assigned to this load balancer.
        """
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LbaasProtocolArgs']]]]):
        pulumi.set(self, "protocols", value)

    @_builtins.property
    @pulumi.getter(name="sslCiphers")
    def ssl_ciphers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "ssl_ciphers")

    @ssl_ciphers.setter
    def ssl_ciphers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "ssl_ciphers", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies if a load balancer is public or private
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="useSystemPublicIpPool")
    def use_system_public_ip_pool(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        "in public loadbalancer - Public IP address allocation done by system public IP pool or public subnet."
        """
        return pulumi.get(self, "use_system_public_ip_pool")

    @use_system_public_ip_pool.setter
    def use_system_public_ip_pool(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "use_system_public_ip_pool", value)

    @_builtins.property
    @pulumi.getter(name="waitTimeMinutes")
    def wait_time_minutes(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "wait_time_minutes")

    @wait_time_minutes.setter
    def wait_time_minutes(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "wait_time_minutes", value)


@pulumi.input_type
class _LbaasState:
    def __init__(__self__, *,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 health_monitors: Optional[pulumi.Input[Sequence[pulumi.Input['LbaasHealthMonitorArgs']]]] = None,
                 lbaas_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input['LbaasProtocolArgs']]]] = None,
                 resource_controller_url: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_status: Optional[pulumi.Input[_builtins.str]] = None,
                 ssl_ciphers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 use_system_public_ip_pool: Optional[pulumi.Input[_builtins.bool]] = None,
                 vip: Optional[pulumi.Input[_builtins.str]] = None,
                 wait_time_minutes: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering Lbaas resources.
        :param pulumi.Input[_builtins.str] description: Description of a load balancer.
        :param pulumi.Input[_builtins.str] name: The load balancer's name.
        :param pulumi.Input[Sequence[pulumi.Input['LbaasProtocolArgs']]] protocols: Protocols to be assigned to this load balancer.
        :param pulumi.Input[_builtins.str] resource_controller_url: The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        :param pulumi.Input[_builtins.str] resource_name: The name of the resource
        :param pulumi.Input[_builtins.str] resource_status: The status of the resource
        :param pulumi.Input[_builtins.str] status: The operation status 'ONLINE' or 'OFFLINE' of a load balancer.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] subnets: The subnet where this Load Balancer will be provisioned.
        :param pulumi.Input[_builtins.str] type: Specifies if a load balancer is public or private
        :param pulumi.Input[_builtins.bool] use_system_public_ip_pool: "in public loadbalancer - Public IP address allocation done by system public IP pool or public subnet."
        :param pulumi.Input[_builtins.str] vip: The virtual ip address of this load balancer
        """
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if health_monitors is not None:
            pulumi.set(__self__, "health_monitors", health_monitors)
        if lbaas_id is not None:
            pulumi.set(__self__, "lbaas_id", lbaas_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if resource_controller_url is not None:
            pulumi.set(__self__, "resource_controller_url", resource_controller_url)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_status is not None:
            pulumi.set(__self__, "resource_status", resource_status)
        if ssl_ciphers is not None:
            pulumi.set(__self__, "ssl_ciphers", ssl_ciphers)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_system_public_ip_pool is not None:
            pulumi.set(__self__, "use_system_public_ip_pool", use_system_public_ip_pool)
        if vip is not None:
            pulumi.set(__self__, "vip", vip)
        if wait_time_minutes is not None:
            pulumi.set(__self__, "wait_time_minutes", wait_time_minutes)

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "datacenter")

    @datacenter.setter
    def datacenter(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "datacenter", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of a load balancer.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="healthMonitors")
    def health_monitors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LbaasHealthMonitorArgs']]]]:
        return pulumi.get(self, "health_monitors")

    @health_monitors.setter
    def health_monitors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LbaasHealthMonitorArgs']]]]):
        pulumi.set(self, "health_monitors", value)

    @_builtins.property
    @pulumi.getter(name="lbaasId")
    def lbaas_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "lbaas_id")

    @lbaas_id.setter
    def lbaas_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lbaas_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The load balancer's name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LbaasProtocolArgs']]]]:
        """
        Protocols to be assigned to this load balancer.
        """
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LbaasProtocolArgs']]]]):
        pulumi.set(self, "protocols", value)

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        """
        return pulumi.get(self, "resource_controller_url")

    @resource_controller_url.setter
    def resource_controller_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_controller_url", value)

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_name", value)

    @_builtins.property
    @pulumi.getter(name="resourceStatus")
    def resource_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the resource
        """
        return pulumi.get(self, "resource_status")

    @resource_status.setter
    def resource_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_status", value)

    @_builtins.property
    @pulumi.getter(name="sslCiphers")
    def ssl_ciphers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "ssl_ciphers")

    @ssl_ciphers.setter
    def ssl_ciphers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "ssl_ciphers", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The operation status 'ONLINE' or 'OFFLINE' of a load balancer.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        """
        The subnet where this Load Balancer will be provisioned.
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "subnets", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies if a load balancer is public or private
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="useSystemPublicIpPool")
    def use_system_public_ip_pool(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        "in public loadbalancer - Public IP address allocation done by system public IP pool or public subnet."
        """
        return pulumi.get(self, "use_system_public_ip_pool")

    @use_system_public_ip_pool.setter
    def use_system_public_ip_pool(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "use_system_public_ip_pool", value)

    @_builtins.property
    @pulumi.getter
    def vip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The virtual ip address of this load balancer
        """
        return pulumi.get(self, "vip")

    @vip.setter
    def vip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vip", value)

    @_builtins.property
    @pulumi.getter(name="waitTimeMinutes")
    def wait_time_minutes(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "wait_time_minutes")

    @wait_time_minutes.setter
    def wait_time_minutes(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "wait_time_minutes", value)


@pulumi.type_token("ibm:index/lbaas:Lbaas")
class Lbaas(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 lbaas_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LbaasProtocolArgs', 'LbaasProtocolArgsDict']]]]] = None,
                 ssl_ciphers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 use_system_public_ip_pool: Optional[pulumi.Input[_builtins.bool]] = None,
                 wait_time_minutes: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a Lbaas resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Description of a load balancer.
        :param pulumi.Input[_builtins.str] name: The load balancer's name.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LbaasProtocolArgs', 'LbaasProtocolArgsDict']]]] protocols: Protocols to be assigned to this load balancer.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] subnets: The subnet where this Load Balancer will be provisioned.
        :param pulumi.Input[_builtins.str] type: Specifies if a load balancer is public or private
        :param pulumi.Input[_builtins.bool] use_system_public_ip_pool: "in public loadbalancer - Public IP address allocation done by system public IP pool or public subnet."
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LbaasArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Lbaas resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LbaasArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LbaasArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 lbaas_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LbaasProtocolArgs', 'LbaasProtocolArgsDict']]]]] = None,
                 ssl_ciphers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 use_system_public_ip_pool: Optional[pulumi.Input[_builtins.bool]] = None,
                 wait_time_minutes: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LbaasArgs.__new__(LbaasArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["lbaas_id"] = lbaas_id
            __props__.__dict__["name"] = name
            __props__.__dict__["protocols"] = protocols
            __props__.__dict__["ssl_ciphers"] = ssl_ciphers
            if subnets is None and not opts.urn:
                raise TypeError("Missing required property 'subnets'")
            __props__.__dict__["subnets"] = subnets
            __props__.__dict__["type"] = type
            __props__.__dict__["use_system_public_ip_pool"] = use_system_public_ip_pool
            __props__.__dict__["wait_time_minutes"] = wait_time_minutes
            __props__.__dict__["datacenter"] = None
            __props__.__dict__["health_monitors"] = None
            __props__.__dict__["resource_controller_url"] = None
            __props__.__dict__["resource_name"] = None
            __props__.__dict__["resource_status"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["vip"] = None
        super(Lbaas, __self__).__init__(
            'ibm:index/lbaas:Lbaas',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            datacenter: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            health_monitors: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LbaasHealthMonitorArgs', 'LbaasHealthMonitorArgsDict']]]]] = None,
            lbaas_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            protocols: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LbaasProtocolArgs', 'LbaasProtocolArgsDict']]]]] = None,
            resource_controller_url: Optional[pulumi.Input[_builtins.str]] = None,
            resource_name_: Optional[pulumi.Input[_builtins.str]] = None,
            resource_status: Optional[pulumi.Input[_builtins.str]] = None,
            ssl_ciphers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            subnets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            use_system_public_ip_pool: Optional[pulumi.Input[_builtins.bool]] = None,
            vip: Optional[pulumi.Input[_builtins.str]] = None,
            wait_time_minutes: Optional[pulumi.Input[_builtins.float]] = None) -> 'Lbaas':
        """
        Get an existing Lbaas resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Description of a load balancer.
        :param pulumi.Input[_builtins.str] name: The load balancer's name.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LbaasProtocolArgs', 'LbaasProtocolArgsDict']]]] protocols: Protocols to be assigned to this load balancer.
        :param pulumi.Input[_builtins.str] resource_controller_url: The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        :param pulumi.Input[_builtins.str] resource_name_: The name of the resource
        :param pulumi.Input[_builtins.str] resource_status: The status of the resource
        :param pulumi.Input[_builtins.str] status: The operation status 'ONLINE' or 'OFFLINE' of a load balancer.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] subnets: The subnet where this Load Balancer will be provisioned.
        :param pulumi.Input[_builtins.str] type: Specifies if a load balancer is public or private
        :param pulumi.Input[_builtins.bool] use_system_public_ip_pool: "in public loadbalancer - Public IP address allocation done by system public IP pool or public subnet."
        :param pulumi.Input[_builtins.str] vip: The virtual ip address of this load balancer
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LbaasState.__new__(_LbaasState)

        __props__.__dict__["datacenter"] = datacenter
        __props__.__dict__["description"] = description
        __props__.__dict__["health_monitors"] = health_monitors
        __props__.__dict__["lbaas_id"] = lbaas_id
        __props__.__dict__["name"] = name
        __props__.__dict__["protocols"] = protocols
        __props__.__dict__["resource_controller_url"] = resource_controller_url
        __props__.__dict__["resource_name"] = resource_name_
        __props__.__dict__["resource_status"] = resource_status
        __props__.__dict__["ssl_ciphers"] = ssl_ciphers
        __props__.__dict__["status"] = status
        __props__.__dict__["subnets"] = subnets
        __props__.__dict__["type"] = type
        __props__.__dict__["use_system_public_ip_pool"] = use_system_public_ip_pool
        __props__.__dict__["vip"] = vip
        __props__.__dict__["wait_time_minutes"] = wait_time_minutes
        return Lbaas(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "datacenter")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Description of a load balancer.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="healthMonitors")
    def health_monitors(self) -> pulumi.Output[Sequence['outputs.LbaasHealthMonitor']]:
        return pulumi.get(self, "health_monitors")

    @_builtins.property
    @pulumi.getter(name="lbaasId")
    def lbaas_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "lbaas_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The load balancer's name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def protocols(self) -> pulumi.Output[Optional[Sequence['outputs.LbaasProtocol']]]:
        """
        Protocols to be assigned to this load balancer.
        """
        return pulumi.get(self, "protocols")

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> pulumi.Output[_builtins.str]:
        """
        The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        """
        return pulumi.get(self, "resource_controller_url")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceStatus")
    def resource_status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the resource
        """
        return pulumi.get(self, "resource_status")

    @_builtins.property
    @pulumi.getter(name="sslCiphers")
    def ssl_ciphers(self) -> pulumi.Output[Sequence[_builtins.str]]:
        return pulumi.get(self, "ssl_ciphers")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The operation status 'ONLINE' or 'OFFLINE' of a load balancer.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> pulumi.Output[Sequence[_builtins.float]]:
        """
        The subnet where this Load Balancer will be provisioned.
        """
        return pulumi.get(self, "subnets")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies if a load balancer is public or private
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="useSystemPublicIpPool")
    def use_system_public_ip_pool(self) -> pulumi.Output[_builtins.bool]:
        """
        "in public loadbalancer - Public IP address allocation done by system public IP pool or public subnet."
        """
        return pulumi.get(self, "use_system_public_ip_pool")

    @_builtins.property
    @pulumi.getter
    def vip(self) -> pulumi.Output[_builtins.str]:
        """
        The virtual ip address of this load balancer
        """
        return pulumi.get(self, "vip")

    @_builtins.property
    @pulumi.getter(name="waitTimeMinutes")
    def wait_time_minutes(self) -> pulumi.Output[Optional[_builtins.float]]:
        return pulumi.get(self, "wait_time_minutes")

