# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSccProviderTypeResult',
    'AwaitableGetSccProviderTypeResult',
    'get_scc_provider_type',
    'get_scc_provider_type_output',
]

@pulumi.output_type
class GetSccProviderTypeResult:
    """
    A collection of values returned by getSccProviderType.
    """
    def __init__(__self__, attributes=None, created_at=None, data_type=None, description=None, icon=None, id=None, instance_id=None, instance_limit=None, labels=None, mode=None, name=None, provider_type_id=None, s2s_enabled=None, type=None, updated_at=None):
        if attributes and not isinstance(attributes, dict):
            raise TypeError("Expected argument 'attributes' to be a dict")
        pulumi.set(__self__, "attributes", attributes)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if data_type and not isinstance(data_type, str):
            raise TypeError("Expected argument 'data_type' to be a str")
        pulumi.set(__self__, "data_type", data_type)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if icon and not isinstance(icon, str):
            raise TypeError("Expected argument 'icon' to be a str")
        pulumi.set(__self__, "icon", icon)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if instance_limit and not isinstance(instance_limit, float):
            raise TypeError("Expected argument 'instance_limit' to be a float")
        pulumi.set(__self__, "instance_limit", instance_limit)
        if labels and not isinstance(labels, list):
            raise TypeError("Expected argument 'labels' to be a list")
        pulumi.set(__self__, "labels", labels)
        if mode and not isinstance(mode, str):
            raise TypeError("Expected argument 'mode' to be a str")
        pulumi.set(__self__, "mode", mode)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provider_type_id and not isinstance(provider_type_id, str):
            raise TypeError("Expected argument 'provider_type_id' to be a str")
        pulumi.set(__self__, "provider_type_id", provider_type_id)
        if s2s_enabled and not isinstance(s2s_enabled, bool):
            raise TypeError("Expected argument 's2s_enabled' to be a bool")
        pulumi.set(__self__, "s2s_enabled", s2s_enabled)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def attributes(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "attributes")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="dataType")
    def data_type(self) -> _builtins.str:
        return pulumi.get(self, "data_type")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def icon(self) -> _builtins.str:
        return pulumi.get(self, "icon")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="instanceLimit")
    def instance_limit(self) -> _builtins.float:
        return pulumi.get(self, "instance_limit")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Sequence['outputs.GetSccProviderTypeLabelResult']:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> _builtins.str:
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="providerTypeId")
    def provider_type_id(self) -> _builtins.str:
        return pulumi.get(self, "provider_type_id")

    @_builtins.property
    @pulumi.getter(name="s2sEnabled")
    def s2s_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "s2s_enabled")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")


class AwaitableGetSccProviderTypeResult(GetSccProviderTypeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSccProviderTypeResult(
            attributes=self.attributes,
            created_at=self.created_at,
            data_type=self.data_type,
            description=self.description,
            icon=self.icon,
            id=self.id,
            instance_id=self.instance_id,
            instance_limit=self.instance_limit,
            labels=self.labels,
            mode=self.mode,
            name=self.name,
            provider_type_id=self.provider_type_id,
            s2s_enabled=self.s2s_enabled,
            type=self.type,
            updated_at=self.updated_at)


def get_scc_provider_type(instance_id: Optional[_builtins.str] = None,
                          provider_type_id: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSccProviderTypeResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['providerTypeId'] = provider_type_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSccProviderType:getSccProviderType', __args__, opts=opts, typ=GetSccProviderTypeResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSccProviderTypeResult(
        attributes=pulumi.get(__ret__, 'attributes'),
        created_at=pulumi.get(__ret__, 'created_at'),
        data_type=pulumi.get(__ret__, 'data_type'),
        description=pulumi.get(__ret__, 'description'),
        icon=pulumi.get(__ret__, 'icon'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        instance_limit=pulumi.get(__ret__, 'instance_limit'),
        labels=pulumi.get(__ret__, 'labels'),
        mode=pulumi.get(__ret__, 'mode'),
        name=pulumi.get(__ret__, 'name'),
        provider_type_id=pulumi.get(__ret__, 'provider_type_id'),
        s2s_enabled=pulumi.get(__ret__, 's2s_enabled'),
        type=pulumi.get(__ret__, 'type'),
        updated_at=pulumi.get(__ret__, 'updated_at'))
def get_scc_provider_type_output(instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                 provider_type_id: Optional[pulumi.Input[_builtins.str]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSccProviderTypeResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['providerTypeId'] = provider_type_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSccProviderType:getSccProviderType', __args__, opts=opts, typ=GetSccProviderTypeResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSccProviderTypeResult(
        attributes=pulumi.get(__response__, 'attributes'),
        created_at=pulumi.get(__response__, 'created_at'),
        data_type=pulumi.get(__response__, 'data_type'),
        description=pulumi.get(__response__, 'description'),
        icon=pulumi.get(__response__, 'icon'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        instance_limit=pulumi.get(__response__, 'instance_limit'),
        labels=pulumi.get(__response__, 'labels'),
        mode=pulumi.get(__response__, 'mode'),
        name=pulumi.get(__response__, 'name'),
        provider_type_id=pulumi.get(__response__, 'provider_type_id'),
        s2s_enabled=pulumi.get(__response__, 's2s_enabled'),
        type=pulumi.get(__response__, 'type'),
        updated_at=pulumi.get(__response__, 'updated_at')))
