# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ConfigAggregatorSettingsArgs', 'ConfigAggregatorSettings']

@pulumi.input_type
class ConfigAggregatorSettingsArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 resource_collection_enabled: pulumi.Input[_builtins.bool],
                 resource_collection_regions: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 trusted_profile_id: pulumi.Input[_builtins.str],
                 additional_scopes: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigAggregatorSettingsAdditionalScopeArgs']]]] = None,
                 config_aggregator_settings_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ConfigAggregatorSettings resource.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the configuration aggregator instance.
        :param pulumi.Input[_builtins.bool] resource_collection_enabled: The field denoting if the resource collection is enabled.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] resource_collection_regions: The list of regions across which the resource collection is enabled.
        :param pulumi.Input[_builtins.str] trusted_profile_id: The trusted profile id that provides Reader access to the App Configuration instance to collect resource metadata.
        :param pulumi.Input[Sequence[pulumi.Input['ConfigAggregatorSettingsAdditionalScopeArgs']]] additional_scopes: The additional scope that enables resource collection for Enterprise acccounts.
        :param pulumi.Input[_builtins.str] region: The region of the configuration aggregator instance.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "resource_collection_enabled", resource_collection_enabled)
        pulumi.set(__self__, "resource_collection_regions", resource_collection_regions)
        pulumi.set(__self__, "trusted_profile_id", trusted_profile_id)
        if additional_scopes is not None:
            pulumi.set(__self__, "additional_scopes", additional_scopes)
        if config_aggregator_settings_id is not None:
            pulumi.set(__self__, "config_aggregator_settings_id", config_aggregator_settings_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the configuration aggregator instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceCollectionEnabled")
    def resource_collection_enabled(self) -> pulumi.Input[_builtins.bool]:
        """
        The field denoting if the resource collection is enabled.
        """
        return pulumi.get(self, "resource_collection_enabled")

    @resource_collection_enabled.setter
    def resource_collection_enabled(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "resource_collection_enabled", value)

    @_builtins.property
    @pulumi.getter(name="resourceCollectionRegions")
    def resource_collection_regions(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        The list of regions across which the resource collection is enabled.
        """
        return pulumi.get(self, "resource_collection_regions")

    @resource_collection_regions.setter
    def resource_collection_regions(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "resource_collection_regions", value)

    @_builtins.property
    @pulumi.getter(name="trustedProfileId")
    def trusted_profile_id(self) -> pulumi.Input[_builtins.str]:
        """
        The trusted profile id that provides Reader access to the App Configuration instance to collect resource metadata.
        """
        return pulumi.get(self, "trusted_profile_id")

    @trusted_profile_id.setter
    def trusted_profile_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "trusted_profile_id", value)

    @_builtins.property
    @pulumi.getter(name="additionalScopes")
    def additional_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConfigAggregatorSettingsAdditionalScopeArgs']]]]:
        """
        The additional scope that enables resource collection for Enterprise acccounts.
        """
        return pulumi.get(self, "additional_scopes")

    @additional_scopes.setter
    def additional_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigAggregatorSettingsAdditionalScopeArgs']]]]):
        pulumi.set(self, "additional_scopes", value)

    @_builtins.property
    @pulumi.getter(name="configAggregatorSettingsId")
    def config_aggregator_settings_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "config_aggregator_settings_id")

    @config_aggregator_settings_id.setter
    def config_aggregator_settings_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "config_aggregator_settings_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the configuration aggregator instance.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _ConfigAggregatorSettingsState:
    def __init__(__self__, *,
                 additional_scopes: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigAggregatorSettingsAdditionalScopeArgs']]]] = None,
                 config_aggregator_settings_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_collection_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 resource_collection_regions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 trusted_profile_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ConfigAggregatorSettings resources.
        :param pulumi.Input[Sequence[pulumi.Input['ConfigAggregatorSettingsAdditionalScopeArgs']]] additional_scopes: The additional scope that enables resource collection for Enterprise acccounts.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the configuration aggregator instance.
        :param pulumi.Input[_builtins.str] region: The region of the configuration aggregator instance.
        :param pulumi.Input[_builtins.bool] resource_collection_enabled: The field denoting if the resource collection is enabled.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] resource_collection_regions: The list of regions across which the resource collection is enabled.
        :param pulumi.Input[_builtins.str] trusted_profile_id: The trusted profile id that provides Reader access to the App Configuration instance to collect resource metadata.
        """
        if additional_scopes is not None:
            pulumi.set(__self__, "additional_scopes", additional_scopes)
        if config_aggregator_settings_id is not None:
            pulumi.set(__self__, "config_aggregator_settings_id", config_aggregator_settings_id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_collection_enabled is not None:
            pulumi.set(__self__, "resource_collection_enabled", resource_collection_enabled)
        if resource_collection_regions is not None:
            pulumi.set(__self__, "resource_collection_regions", resource_collection_regions)
        if trusted_profile_id is not None:
            pulumi.set(__self__, "trusted_profile_id", trusted_profile_id)

    @_builtins.property
    @pulumi.getter(name="additionalScopes")
    def additional_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConfigAggregatorSettingsAdditionalScopeArgs']]]]:
        """
        The additional scope that enables resource collection for Enterprise acccounts.
        """
        return pulumi.get(self, "additional_scopes")

    @additional_scopes.setter
    def additional_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigAggregatorSettingsAdditionalScopeArgs']]]]):
        pulumi.set(self, "additional_scopes", value)

    @_builtins.property
    @pulumi.getter(name="configAggregatorSettingsId")
    def config_aggregator_settings_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "config_aggregator_settings_id")

    @config_aggregator_settings_id.setter
    def config_aggregator_settings_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "config_aggregator_settings_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the configuration aggregator instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the configuration aggregator instance.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceCollectionEnabled")
    def resource_collection_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The field denoting if the resource collection is enabled.
        """
        return pulumi.get(self, "resource_collection_enabled")

    @resource_collection_enabled.setter
    def resource_collection_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "resource_collection_enabled", value)

    @_builtins.property
    @pulumi.getter(name="resourceCollectionRegions")
    def resource_collection_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The list of regions across which the resource collection is enabled.
        """
        return pulumi.get(self, "resource_collection_regions")

    @resource_collection_regions.setter
    def resource_collection_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "resource_collection_regions", value)

    @_builtins.property
    @pulumi.getter(name="trustedProfileId")
    def trusted_profile_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The trusted profile id that provides Reader access to the App Configuration instance to collect resource metadata.
        """
        return pulumi.get(self, "trusted_profile_id")

    @trusted_profile_id.setter
    def trusted_profile_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "trusted_profile_id", value)


@pulumi.type_token("ibm:index/configAggregatorSettings:ConfigAggregatorSettings")
class ConfigAggregatorSettings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 additional_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ConfigAggregatorSettingsAdditionalScopeArgs', 'ConfigAggregatorSettingsAdditionalScopeArgsDict']]]]] = None,
                 config_aggregator_settings_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_collection_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 resource_collection_regions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 trusted_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a ConfigAggregatorSettings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ConfigAggregatorSettingsAdditionalScopeArgs', 'ConfigAggregatorSettingsAdditionalScopeArgsDict']]]] additional_scopes: The additional scope that enables resource collection for Enterprise acccounts.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the configuration aggregator instance.
        :param pulumi.Input[_builtins.str] region: The region of the configuration aggregator instance.
        :param pulumi.Input[_builtins.bool] resource_collection_enabled: The field denoting if the resource collection is enabled.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] resource_collection_regions: The list of regions across which the resource collection is enabled.
        :param pulumi.Input[_builtins.str] trusted_profile_id: The trusted profile id that provides Reader access to the App Configuration instance to collect resource metadata.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConfigAggregatorSettingsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ConfigAggregatorSettings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ConfigAggregatorSettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConfigAggregatorSettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 additional_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ConfigAggregatorSettingsAdditionalScopeArgs', 'ConfigAggregatorSettingsAdditionalScopeArgsDict']]]]] = None,
                 config_aggregator_settings_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_collection_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 resource_collection_regions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 trusted_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConfigAggregatorSettingsArgs.__new__(ConfigAggregatorSettingsArgs)

            __props__.__dict__["additional_scopes"] = additional_scopes
            __props__.__dict__["config_aggregator_settings_id"] = config_aggregator_settings_id
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["region"] = region
            if resource_collection_enabled is None and not opts.urn:
                raise TypeError("Missing required property 'resource_collection_enabled'")
            __props__.__dict__["resource_collection_enabled"] = resource_collection_enabled
            if resource_collection_regions is None and not opts.urn:
                raise TypeError("Missing required property 'resource_collection_regions'")
            __props__.__dict__["resource_collection_regions"] = resource_collection_regions
            if trusted_profile_id is None and not opts.urn:
                raise TypeError("Missing required property 'trusted_profile_id'")
            __props__.__dict__["trusted_profile_id"] = trusted_profile_id
        super(ConfigAggregatorSettings, __self__).__init__(
            'ibm:index/configAggregatorSettings:ConfigAggregatorSettings',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            additional_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ConfigAggregatorSettingsAdditionalScopeArgs', 'ConfigAggregatorSettingsAdditionalScopeArgsDict']]]]] = None,
            config_aggregator_settings_id: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            resource_collection_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            resource_collection_regions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            trusted_profile_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'ConfigAggregatorSettings':
        """
        Get an existing ConfigAggregatorSettings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ConfigAggregatorSettingsAdditionalScopeArgs', 'ConfigAggregatorSettingsAdditionalScopeArgsDict']]]] additional_scopes: The additional scope that enables resource collection for Enterprise acccounts.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the configuration aggregator instance.
        :param pulumi.Input[_builtins.str] region: The region of the configuration aggregator instance.
        :param pulumi.Input[_builtins.bool] resource_collection_enabled: The field denoting if the resource collection is enabled.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] resource_collection_regions: The list of regions across which the resource collection is enabled.
        :param pulumi.Input[_builtins.str] trusted_profile_id: The trusted profile id that provides Reader access to the App Configuration instance to collect resource metadata.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConfigAggregatorSettingsState.__new__(_ConfigAggregatorSettingsState)

        __props__.__dict__["additional_scopes"] = additional_scopes
        __props__.__dict__["config_aggregator_settings_id"] = config_aggregator_settings_id
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_collection_enabled"] = resource_collection_enabled
        __props__.__dict__["resource_collection_regions"] = resource_collection_regions
        __props__.__dict__["trusted_profile_id"] = trusted_profile_id
        return ConfigAggregatorSettings(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="additionalScopes")
    def additional_scopes(self) -> pulumi.Output[Optional[Sequence['outputs.ConfigAggregatorSettingsAdditionalScope']]]:
        """
        The additional scope that enables resource collection for Enterprise acccounts.
        """
        return pulumi.get(self, "additional_scopes")

    @_builtins.property
    @pulumi.getter(name="configAggregatorSettingsId")
    def config_aggregator_settings_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "config_aggregator_settings_id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the configuration aggregator instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region of the configuration aggregator instance.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceCollectionEnabled")
    def resource_collection_enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        The field denoting if the resource collection is enabled.
        """
        return pulumi.get(self, "resource_collection_enabled")

    @_builtins.property
    @pulumi.getter(name="resourceCollectionRegions")
    def resource_collection_regions(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The list of regions across which the resource collection is enabled.
        """
        return pulumi.get(self, "resource_collection_regions")

    @_builtins.property
    @pulumi.getter(name="trustedProfileId")
    def trusted_profile_id(self) -> pulumi.Output[_builtins.str]:
        """
        The trusted profile id that provides Reader access to the App Configuration instance to collect resource metadata.
        """
        return pulumi.get(self, "trusted_profile_id")

