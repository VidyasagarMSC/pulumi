# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NetworkVlanArgs', 'NetworkVlan']

@pulumi.input_type
class NetworkVlanArgs:
    def __init__(__self__, *,
                 datacenter: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_vlan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 router_hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['NetworkVlanTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a NetworkVlan resource.
        :param pulumi.Input[_builtins.str] datacenter: Datacenter name
        :param pulumi.Input[_builtins.str] type: VLAN type
        :param pulumi.Input[_builtins.str] name: VLAN name
        :param pulumi.Input[_builtins.str] router_hostname: router host name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        """
        pulumi.set(__self__, "datacenter", datacenter)
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_vlan_id is not None:
            pulumi.set(__self__, "network_vlan_id", network_vlan_id)
        if router_hostname is not None:
            pulumi.set(__self__, "router_hostname", router_hostname)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> pulumi.Input[_builtins.str]:
        """
        Datacenter name
        """
        return pulumi.get(self, "datacenter")

    @datacenter.setter
    def datacenter(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "datacenter", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        VLAN type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        VLAN name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="networkVlanId")
    def network_vlan_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "network_vlan_id")

    @network_vlan_id.setter
    def network_vlan_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_vlan_id", value)

    @_builtins.property
    @pulumi.getter(name="routerHostname")
    def router_hostname(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        router host name
        """
        return pulumi.get(self, "router_hostname")

    @router_hostname.setter
    def router_hostname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "router_hostname", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['NetworkVlanTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['NetworkVlanTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _NetworkVlanState:
    def __init__(__self__, *,
                 child_resource_count: Optional[pulumi.Input[_builtins.float]] = None,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_vlan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_controller_url: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_name: Optional[pulumi.Input[_builtins.str]] = None,
                 router_hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 softlayer_managed: Optional[pulumi.Input[_builtins.bool]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkVlanSubnetArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['NetworkVlanTimeoutsArgs']] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 vlan_number: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering NetworkVlan resources.
        :param pulumi.Input[_builtins.float] child_resource_count: Child resource count
        :param pulumi.Input[_builtins.str] datacenter: Datacenter name
        :param pulumi.Input[_builtins.str] name: VLAN name
        :param pulumi.Input[_builtins.str] resource_controller_url: The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        :param pulumi.Input[_builtins.str] resource_name: The name of the resource
        :param pulumi.Input[_builtins.str] router_hostname: router host name
        :param pulumi.Input[_builtins.bool] softlayer_managed: Zzset to true if VLAN is managed by softlayer
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        :param pulumi.Input[_builtins.str] type: VLAN type
        :param pulumi.Input[_builtins.float] vlan_number: VLAN number
        """
        if child_resource_count is not None:
            pulumi.set(__self__, "child_resource_count", child_resource_count)
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_vlan_id is not None:
            pulumi.set(__self__, "network_vlan_id", network_vlan_id)
        if resource_controller_url is not None:
            pulumi.set(__self__, "resource_controller_url", resource_controller_url)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if router_hostname is not None:
            pulumi.set(__self__, "router_hostname", router_hostname)
        if softlayer_managed is not None:
            pulumi.set(__self__, "softlayer_managed", softlayer_managed)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vlan_number is not None:
            pulumi.set(__self__, "vlan_number", vlan_number)

    @_builtins.property
    @pulumi.getter(name="childResourceCount")
    def child_resource_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Child resource count
        """
        return pulumi.get(self, "child_resource_count")

    @child_resource_count.setter
    def child_resource_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "child_resource_count", value)

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Datacenter name
        """
        return pulumi.get(self, "datacenter")

    @datacenter.setter
    def datacenter(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "datacenter", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        VLAN name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="networkVlanId")
    def network_vlan_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "network_vlan_id")

    @network_vlan_id.setter
    def network_vlan_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_vlan_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        """
        return pulumi.get(self, "resource_controller_url")

    @resource_controller_url.setter
    def resource_controller_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_controller_url", value)

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_name", value)

    @_builtins.property
    @pulumi.getter(name="routerHostname")
    def router_hostname(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        router host name
        """
        return pulumi.get(self, "router_hostname")

    @router_hostname.setter
    def router_hostname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "router_hostname", value)

    @_builtins.property
    @pulumi.getter(name="softlayerManaged")
    def softlayer_managed(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Zzset to true if VLAN is managed by softlayer
        """
        return pulumi.get(self, "softlayer_managed")

    @softlayer_managed.setter
    def softlayer_managed(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "softlayer_managed", value)

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkVlanSubnetArgs']]]]:
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkVlanSubnetArgs']]]]):
        pulumi.set(self, "subnets", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['NetworkVlanTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['NetworkVlanTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        VLAN type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="vlanNumber")
    def vlan_number(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        VLAN number
        """
        return pulumi.get(self, "vlan_number")

    @vlan_number.setter
    def vlan_number(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "vlan_number", value)


@pulumi.type_token("ibm:index/networkVlan:NetworkVlan")
class NetworkVlan(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_vlan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 router_hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['NetworkVlanTimeoutsArgs', 'NetworkVlanTimeoutsArgsDict']]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a NetworkVlan resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] datacenter: Datacenter name
        :param pulumi.Input[_builtins.str] name: VLAN name
        :param pulumi.Input[_builtins.str] router_hostname: router host name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        :param pulumi.Input[_builtins.str] type: VLAN type
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NetworkVlanArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NetworkVlan resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NetworkVlanArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NetworkVlanArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_vlan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 router_hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['NetworkVlanTimeoutsArgs', 'NetworkVlanTimeoutsArgsDict']]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NetworkVlanArgs.__new__(NetworkVlanArgs)

            if datacenter is None and not opts.urn:
                raise TypeError("Missing required property 'datacenter'")
            __props__.__dict__["datacenter"] = datacenter
            __props__.__dict__["name"] = name
            __props__.__dict__["network_vlan_id"] = network_vlan_id
            __props__.__dict__["router_hostname"] = router_hostname
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeouts"] = timeouts
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["child_resource_count"] = None
            __props__.__dict__["resource_controller_url"] = None
            __props__.__dict__["resource_name"] = None
            __props__.__dict__["softlayer_managed"] = None
            __props__.__dict__["subnets"] = None
            __props__.__dict__["vlan_number"] = None
        super(NetworkVlan, __self__).__init__(
            'ibm:index/networkVlan:NetworkVlan',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            child_resource_count: Optional[pulumi.Input[_builtins.float]] = None,
            datacenter: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            network_vlan_id: Optional[pulumi.Input[_builtins.str]] = None,
            resource_controller_url: Optional[pulumi.Input[_builtins.str]] = None,
            resource_name_: Optional[pulumi.Input[_builtins.str]] = None,
            router_hostname: Optional[pulumi.Input[_builtins.str]] = None,
            softlayer_managed: Optional[pulumi.Input[_builtins.bool]] = None,
            subnets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworkVlanSubnetArgs', 'NetworkVlanSubnetArgsDict']]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            timeouts: Optional[pulumi.Input[Union['NetworkVlanTimeoutsArgs', 'NetworkVlanTimeoutsArgsDict']]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            vlan_number: Optional[pulumi.Input[_builtins.float]] = None) -> 'NetworkVlan':
        """
        Get an existing NetworkVlan resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] child_resource_count: Child resource count
        :param pulumi.Input[_builtins.str] datacenter: Datacenter name
        :param pulumi.Input[_builtins.str] name: VLAN name
        :param pulumi.Input[_builtins.str] resource_controller_url: The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        :param pulumi.Input[_builtins.str] resource_name_: The name of the resource
        :param pulumi.Input[_builtins.str] router_hostname: router host name
        :param pulumi.Input[_builtins.bool] softlayer_managed: Zzset to true if VLAN is managed by softlayer
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        :param pulumi.Input[_builtins.str] type: VLAN type
        :param pulumi.Input[_builtins.float] vlan_number: VLAN number
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NetworkVlanState.__new__(_NetworkVlanState)

        __props__.__dict__["child_resource_count"] = child_resource_count
        __props__.__dict__["datacenter"] = datacenter
        __props__.__dict__["name"] = name
        __props__.__dict__["network_vlan_id"] = network_vlan_id
        __props__.__dict__["resource_controller_url"] = resource_controller_url
        __props__.__dict__["resource_name"] = resource_name_
        __props__.__dict__["router_hostname"] = router_hostname
        __props__.__dict__["softlayer_managed"] = softlayer_managed
        __props__.__dict__["subnets"] = subnets
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["type"] = type
        __props__.__dict__["vlan_number"] = vlan_number
        return NetworkVlan(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="childResourceCount")
    def child_resource_count(self) -> pulumi.Output[_builtins.float]:
        """
        Child resource count
        """
        return pulumi.get(self, "child_resource_count")

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> pulumi.Output[_builtins.str]:
        """
        Datacenter name
        """
        return pulumi.get(self, "datacenter")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        VLAN name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkVlanId")
    def network_vlan_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "network_vlan_id")

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> pulumi.Output[_builtins.str]:
        """
        The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        """
        return pulumi.get(self, "resource_controller_url")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="routerHostname")
    def router_hostname(self) -> pulumi.Output[_builtins.str]:
        """
        router host name
        """
        return pulumi.get(self, "router_hostname")

    @_builtins.property
    @pulumi.getter(name="softlayerManaged")
    def softlayer_managed(self) -> pulumi.Output[_builtins.bool]:
        """
        Zzset to true if VLAN is managed by softlayer
        """
        return pulumi.get(self, "softlayer_managed")

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> pulumi.Output[Sequence['outputs.NetworkVlanSubnet']]:
        return pulumi.get(self, "subnets")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.NetworkVlanTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        VLAN type
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="vlanNumber")
    def vlan_number(self) -> pulumi.Output[_builtins.float]:
        """
        VLAN number
        """
        return pulumi.get(self, "vlan_number")

