# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['CrNamespaceArgs', 'CrNamespace']

@pulumi.input_type
class CrNamespaceArgs:
    def __init__(__self__, *,
                 cr_namespace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a CrNamespace resource.
        :param pulumi.Input[_builtins.str] name: The name of the namespace.
        :param pulumi.Input[_builtins.str] resource_group_id: The ID of the resource group that the namespace will be created within.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        """
        if cr_namespace_id is not None:
            pulumi.set(__self__, "cr_namespace_id", cr_namespace_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="crNamespaceId")
    def cr_namespace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cr_namespace_id")

    @cr_namespace_id.setter
    def cr_namespace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cr_namespace_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the namespace.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the resource group that the namespace will be created within.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _CrNamespaceState:
    def __init__(__self__, *,
                 account: Optional[pulumi.Input[_builtins.str]] = None,
                 cr_namespace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 created_date: Optional[pulumi.Input[_builtins.str]] = None,
                 created_on: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_created_date: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 updated_date: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_on: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CrNamespace resources.
        :param pulumi.Input[_builtins.str] account: The IBM Cloud account that owns the namespace.
        :param pulumi.Input[_builtins.str] created_date: When the namespace was created.
        :param pulumi.Input[_builtins.str] created_on: When the namespace was created.
        :param pulumi.Input[_builtins.str] crn: If the namespace has been assigned to a resource group, this is the IBM Cloud CRN representing the namespace.
        :param pulumi.Input[_builtins.str] name: The name of the namespace.
        :param pulumi.Input[_builtins.str] resource_created_date: When the namespace was assigned to a resource group.
        :param pulumi.Input[_builtins.str] resource_group_id: The ID of the resource group that the namespace will be created within.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        :param pulumi.Input[_builtins.str] updated_date: When the namespace was last updated.
        :param pulumi.Input[_builtins.str] updated_on: When the namespace was last updated.
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if cr_namespace_id is not None:
            pulumi.set(__self__, "cr_namespace_id", cr_namespace_id)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if created_on is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""created_on is deprecated: Deprecated""")
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_created_date is not None:
            pulumi.set(__self__, "resource_created_date", resource_created_date)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if updated_date is not None:
            pulumi.set(__self__, "updated_date", updated_date)
        if updated_on is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""updated_on is deprecated: Deprecated""")
        if updated_on is not None:
            pulumi.set(__self__, "updated_on", updated_on)

    @_builtins.property
    @pulumi.getter
    def account(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IBM Cloud account that owns the namespace.
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account", value)

    @_builtins.property
    @pulumi.getter(name="crNamespaceId")
    def cr_namespace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cr_namespace_id")

    @cr_namespace_id.setter
    def cr_namespace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cr_namespace_id", value)

    @_builtins.property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        When the namespace was created.
        """
        return pulumi.get(self, "created_date")

    @created_date.setter
    def created_date(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_date", value)

    @_builtins.property
    @pulumi.getter(name="createdOn")
    @_utilities.deprecated("""Deprecated""")
    def created_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        When the namespace was created.
        """
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_on", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        If the namespace has been assigned to a resource group, this is the IBM Cloud CRN representing the namespace.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the namespace.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceCreatedDate")
    def resource_created_date(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        When the namespace was assigned to a resource group.
        """
        return pulumi.get(self, "resource_created_date")

    @resource_created_date.setter
    def resource_created_date(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_created_date", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the resource group that the namespace will be created within.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="updatedDate")
    def updated_date(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        When the namespace was last updated.
        """
        return pulumi.get(self, "updated_date")

    @updated_date.setter
    def updated_date(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_date", value)

    @_builtins.property
    @pulumi.getter(name="updatedOn")
    @_utilities.deprecated("""Deprecated""")
    def updated_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        When the namespace was last updated.
        """
        return pulumi.get(self, "updated_on")

    @updated_on.setter
    def updated_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_on", value)


@pulumi.type_token("ibm:index/crNamespace:CrNamespace")
class CrNamespace(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cr_namespace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Create a CrNamespace resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: The name of the namespace.
        :param pulumi.Input[_builtins.str] resource_group_id: The ID of the resource group that the namespace will be created within.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[CrNamespaceArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CrNamespace resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CrNamespaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CrNamespaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cr_namespace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CrNamespaceArgs.__new__(CrNamespaceArgs)

            __props__.__dict__["cr_namespace_id"] = cr_namespace_id
            __props__.__dict__["name"] = name
            __props__.__dict__["resource_group_id"] = resource_group_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["account"] = None
            __props__.__dict__["created_date"] = None
            __props__.__dict__["created_on"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["resource_created_date"] = None
            __props__.__dict__["updated_date"] = None
            __props__.__dict__["updated_on"] = None
        super(CrNamespace, __self__).__init__(
            'ibm:index/crNamespace:CrNamespace',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account: Optional[pulumi.Input[_builtins.str]] = None,
            cr_namespace_id: Optional[pulumi.Input[_builtins.str]] = None,
            created_date: Optional[pulumi.Input[_builtins.str]] = None,
            created_on: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            resource_created_date: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            updated_date: Optional[pulumi.Input[_builtins.str]] = None,
            updated_on: Optional[pulumi.Input[_builtins.str]] = None) -> 'CrNamespace':
        """
        Get an existing CrNamespace resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] account: The IBM Cloud account that owns the namespace.
        :param pulumi.Input[_builtins.str] created_date: When the namespace was created.
        :param pulumi.Input[_builtins.str] created_on: When the namespace was created.
        :param pulumi.Input[_builtins.str] crn: If the namespace has been assigned to a resource group, this is the IBM Cloud CRN representing the namespace.
        :param pulumi.Input[_builtins.str] name: The name of the namespace.
        :param pulumi.Input[_builtins.str] resource_created_date: When the namespace was assigned to a resource group.
        :param pulumi.Input[_builtins.str] resource_group_id: The ID of the resource group that the namespace will be created within.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        :param pulumi.Input[_builtins.str] updated_date: When the namespace was last updated.
        :param pulumi.Input[_builtins.str] updated_on: When the namespace was last updated.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CrNamespaceState.__new__(_CrNamespaceState)

        __props__.__dict__["account"] = account
        __props__.__dict__["cr_namespace_id"] = cr_namespace_id
        __props__.__dict__["created_date"] = created_date
        __props__.__dict__["created_on"] = created_on
        __props__.__dict__["crn"] = crn
        __props__.__dict__["name"] = name
        __props__.__dict__["resource_created_date"] = resource_created_date
        __props__.__dict__["resource_group_id"] = resource_group_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["updated_date"] = updated_date
        __props__.__dict__["updated_on"] = updated_on
        return CrNamespace(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def account(self) -> pulumi.Output[_builtins.str]:
        """
        The IBM Cloud account that owns the namespace.
        """
        return pulumi.get(self, "account")

    @_builtins.property
    @pulumi.getter(name="crNamespaceId")
    def cr_namespace_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cr_namespace_id")

    @_builtins.property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> pulumi.Output[_builtins.str]:
        """
        When the namespace was created.
        """
        return pulumi.get(self, "created_date")

    @_builtins.property
    @pulumi.getter(name="createdOn")
    @_utilities.deprecated("""Deprecated""")
    def created_on(self) -> pulumi.Output[_builtins.str]:
        """
        When the namespace was created.
        """
        return pulumi.get(self, "created_on")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        If the namespace has been assigned to a resource group, this is the IBM Cloud CRN representing the namespace.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the namespace.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceCreatedDate")
    def resource_created_date(self) -> pulumi.Output[_builtins.str]:
        """
        When the namespace was assigned to a resource group.
        """
        return pulumi.get(self, "resource_created_date")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the resource group that the namespace will be created within.
        """
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updatedDate")
    def updated_date(self) -> pulumi.Output[_builtins.str]:
        """
        When the namespace was last updated.
        """
        return pulumi.get(self, "updated_date")

    @_builtins.property
    @pulumi.getter(name="updatedOn")
    @_utilities.deprecated("""Deprecated""")
    def updated_on(self) -> pulumi.Output[_builtins.str]:
        """
        When the namespace was last updated.
        """
        return pulumi.get(self, "updated_on")

