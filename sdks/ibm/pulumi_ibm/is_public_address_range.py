# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsPublicAddressRangeArgs', 'IsPublicAddressRange']

@pulumi.input_type
class IsPublicAddressRangeArgs:
    def __init__(__self__, *,
                 ipv4_address_count: pulumi.Input[_builtins.float],
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 is_public_address_range_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input['IsPublicAddressRangeResourceGroupArgs']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 target: Optional[pulumi.Input['IsPublicAddressRangeTargetArgs']] = None):
        """
        The set of arguments for constructing a IsPublicAddressRange resource.
        :param pulumi.Input[_builtins.float] ipv4_address_count: The number of IPv4 addresses in this public address range.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.str] name: The name for this public address range. The name is unique across all public address ranges in the region.
        :param pulumi.Input['IsPublicAddressRangeResourceGroupArgs'] resource_group: The resource group for this public address range.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: User Tags for the PublicAddressRange
        :param pulumi.Input['IsPublicAddressRangeTargetArgs'] target: The target this public address range is bound to.If absent, this pubic address range is not bound to a target.
        """
        pulumi.set(__self__, "ipv4_address_count", ipv4_address_count)
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if is_public_address_range_id is not None:
            pulumi.set(__self__, "is_public_address_range_id", is_public_address_range_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @_builtins.property
    @pulumi.getter(name="ipv4AddressCount")
    def ipv4_address_count(self) -> pulumi.Input[_builtins.float]:
        """
        The number of IPv4 addresses in this public address range.
        """
        return pulumi.get(self, "ipv4_address_count")

    @ipv4_address_count.setter
    def ipv4_address_count(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "ipv4_address_count", value)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter(name="isPublicAddressRangeId")
    def is_public_address_range_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_public_address_range_id")

    @is_public_address_range_id.setter
    def is_public_address_range_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_public_address_range_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name for this public address range. The name is unique across all public address ranges in the region.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input['IsPublicAddressRangeResourceGroupArgs']]:
        """
        The resource group for this public address range.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input['IsPublicAddressRangeResourceGroupArgs']]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        User Tags for the PublicAddressRange
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input['IsPublicAddressRangeTargetArgs']]:
        """
        The target this public address range is bound to.If absent, this pubic address range is not bound to a target.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input['IsPublicAddressRangeTargetArgs']]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class _IsPublicAddressRangeState:
    def __init__(__self__, *,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_address_count: Optional[pulumi.Input[_builtins.float]] = None,
                 is_public_address_range_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input['IsPublicAddressRangeResourceGroupArgs']] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 target: Optional[pulumi.Input['IsPublicAddressRangeTargetArgs']] = None):
        """
        Input properties used for looking up and filtering IsPublicAddressRange resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.str] cidr: The public IPv4 range, expressed in CIDR format.
        :param pulumi.Input[_builtins.str] created_at: The date and time that the public address range was created.
        :param pulumi.Input[_builtins.str] crn: The CRN for this public address range.
        :param pulumi.Input[_builtins.str] href: The URL for this public address range.
        :param pulumi.Input[_builtins.float] ipv4_address_count: The number of IPv4 addresses in this public address range.
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of the public address range.
        :param pulumi.Input[_builtins.str] name: The name for this public address range. The name is unique across all public address ranges in the region.
        :param pulumi.Input['IsPublicAddressRangeResourceGroupArgs'] resource_group: The resource group for this public address range.
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: User Tags for the PublicAddressRange
        :param pulumi.Input['IsPublicAddressRangeTargetArgs'] target: The target this public address range is bound to.If absent, this pubic address range is not bound to a target.
        """
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if ipv4_address_count is not None:
            pulumi.set(__self__, "ipv4_address_count", ipv4_address_count)
        if is_public_address_range_id is not None:
            pulumi.set(__self__, "is_public_address_range_id", is_public_address_range_id)
        if lifecycle_state is not None:
            pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The public IPv4 range, expressed in CIDR format.
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cidr", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time that the public address range was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN for this public address range.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL for this public address range.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="ipv4AddressCount")
    def ipv4_address_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The number of IPv4 addresses in this public address range.
        """
        return pulumi.get(self, "ipv4_address_count")

    @ipv4_address_count.setter
    def ipv4_address_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ipv4_address_count", value)

    @_builtins.property
    @pulumi.getter(name="isPublicAddressRangeId")
    def is_public_address_range_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_public_address_range_id")

    @is_public_address_range_id.setter
    def is_public_address_range_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_public_address_range_id", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The lifecycle state of the public address range.
        """
        return pulumi.get(self, "lifecycle_state")

    @lifecycle_state.setter
    def lifecycle_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lifecycle_state", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name for this public address range. The name is unique across all public address ranges in the region.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input['IsPublicAddressRangeResourceGroupArgs']]:
        """
        The resource group for this public address range.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input['IsPublicAddressRangeResourceGroupArgs']]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        User Tags for the PublicAddressRange
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input['IsPublicAddressRangeTargetArgs']]:
        """
        The target this public address range is bound to.If absent, this pubic address range is not bound to a target.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input['IsPublicAddressRangeTargetArgs']]):
        pulumi.set(self, "target", value)


@pulumi.type_token("ibm:index/isPublicAddressRange:IsPublicAddressRange")
class IsPublicAddressRange(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 ipv4_address_count: Optional[pulumi.Input[_builtins.float]] = None,
                 is_public_address_range_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[Union['IsPublicAddressRangeResourceGroupArgs', 'IsPublicAddressRangeResourceGroupArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 target: Optional[pulumi.Input[Union['IsPublicAddressRangeTargetArgs', 'IsPublicAddressRangeTargetArgsDict']]] = None,
                 __props__=None):
        """
        Create a IsPublicAddressRange resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.float] ipv4_address_count: The number of IPv4 addresses in this public address range.
        :param pulumi.Input[_builtins.str] name: The name for this public address range. The name is unique across all public address ranges in the region.
        :param pulumi.Input[Union['IsPublicAddressRangeResourceGroupArgs', 'IsPublicAddressRangeResourceGroupArgsDict']] resource_group: The resource group for this public address range.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: User Tags for the PublicAddressRange
        :param pulumi.Input[Union['IsPublicAddressRangeTargetArgs', 'IsPublicAddressRangeTargetArgsDict']] target: The target this public address range is bound to.If absent, this pubic address range is not bound to a target.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsPublicAddressRangeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsPublicAddressRange resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsPublicAddressRangeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsPublicAddressRangeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 ipv4_address_count: Optional[pulumi.Input[_builtins.float]] = None,
                 is_public_address_range_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[Union['IsPublicAddressRangeResourceGroupArgs', 'IsPublicAddressRangeResourceGroupArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 target: Optional[pulumi.Input[Union['IsPublicAddressRangeTargetArgs', 'IsPublicAddressRangeTargetArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsPublicAddressRangeArgs.__new__(IsPublicAddressRangeArgs)

            __props__.__dict__["access_tags"] = access_tags
            if ipv4_address_count is None and not opts.urn:
                raise TypeError("Missing required property 'ipv4_address_count'")
            __props__.__dict__["ipv4_address_count"] = ipv4_address_count
            __props__.__dict__["is_public_address_range_id"] = is_public_address_range_id
            __props__.__dict__["name"] = name
            __props__.__dict__["resource_group"] = resource_group
            __props__.__dict__["tags"] = tags
            __props__.__dict__["target"] = target
            __props__.__dict__["cidr"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["lifecycle_state"] = None
            __props__.__dict__["resource_type"] = None
        super(IsPublicAddressRange, __self__).__init__(
            'ibm:index/isPublicAddressRange:IsPublicAddressRange',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            cidr: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            ipv4_address_count: Optional[pulumi.Input[_builtins.float]] = None,
            is_public_address_range_id: Optional[pulumi.Input[_builtins.str]] = None,
            lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group: Optional[pulumi.Input[Union['IsPublicAddressRangeResourceGroupArgs', 'IsPublicAddressRangeResourceGroupArgsDict']]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            target: Optional[pulumi.Input[Union['IsPublicAddressRangeTargetArgs', 'IsPublicAddressRangeTargetArgsDict']]] = None) -> 'IsPublicAddressRange':
        """
        Get an existing IsPublicAddressRange resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.str] cidr: The public IPv4 range, expressed in CIDR format.
        :param pulumi.Input[_builtins.str] created_at: The date and time that the public address range was created.
        :param pulumi.Input[_builtins.str] crn: The CRN for this public address range.
        :param pulumi.Input[_builtins.str] href: The URL for this public address range.
        :param pulumi.Input[_builtins.float] ipv4_address_count: The number of IPv4 addresses in this public address range.
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of the public address range.
        :param pulumi.Input[_builtins.str] name: The name for this public address range. The name is unique across all public address ranges in the region.
        :param pulumi.Input[Union['IsPublicAddressRangeResourceGroupArgs', 'IsPublicAddressRangeResourceGroupArgsDict']] resource_group: The resource group for this public address range.
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: User Tags for the PublicAddressRange
        :param pulumi.Input[Union['IsPublicAddressRangeTargetArgs', 'IsPublicAddressRangeTargetArgsDict']] target: The target this public address range is bound to.If absent, this pubic address range is not bound to a target.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsPublicAddressRangeState.__new__(_IsPublicAddressRangeState)

        __props__.__dict__["access_tags"] = access_tags
        __props__.__dict__["cidr"] = cidr
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["crn"] = crn
        __props__.__dict__["href"] = href
        __props__.__dict__["ipv4_address_count"] = ipv4_address_count
        __props__.__dict__["is_public_address_range_id"] = is_public_address_range_id
        __props__.__dict__["lifecycle_state"] = lifecycle_state
        __props__.__dict__["name"] = name
        __props__.__dict__["resource_group"] = resource_group
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["tags"] = tags
        __props__.__dict__["target"] = target
        return IsPublicAddressRange(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> pulumi.Output[_builtins.str]:
        """
        The public IPv4 range, expressed in CIDR format.
        """
        return pulumi.get(self, "cidr")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time that the public address range was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The CRN for this public address range.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        The URL for this public address range.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="ipv4AddressCount")
    def ipv4_address_count(self) -> pulumi.Output[_builtins.float]:
        """
        The number of IPv4 addresses in this public address range.
        """
        return pulumi.get(self, "ipv4_address_count")

    @_builtins.property
    @pulumi.getter(name="isPublicAddressRangeId")
    def is_public_address_range_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_public_address_range_id")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> pulumi.Output[_builtins.str]:
        """
        The lifecycle state of the public address range.
        """
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name for this public address range. The name is unique across all public address ranges in the region.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Output[Optional['outputs.IsPublicAddressRangeResourceGroup']]:
        """
        The resource group for this public address range.
        """
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        User Tags for the PublicAddressRange
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def target(self) -> pulumi.Output[Optional['outputs.IsPublicAddressRangeTarget']]:
        """
        The target this public address range is bound to.If absent, this pubic address range is not bound to a target.
        """
        return pulumi.get(self, "target")

