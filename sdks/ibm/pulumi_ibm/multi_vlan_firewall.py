# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['MultiVlanFirewallArgs', 'MultiVlanFirewall']

@pulumi.input_type
class MultiVlanFirewallArgs:
    def __init__(__self__, *,
                 datacenter: pulumi.Input[_builtins.str],
                 firewall_type: pulumi.Input[_builtins.str],
                 pod: pulumi.Input[_builtins.str],
                 addon_configurations: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 multi_vlan_firewall_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a MultiVlanFirewall resource.
        :param pulumi.Input[_builtins.str] datacenter: Datacenter name
        :param pulumi.Input[_builtins.str] firewall_type: Firewall type
        :param pulumi.Input[_builtins.str] pod: POD name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] addon_configurations: High Availability - [Web Filtering Add-on, NGFW Add-on, AV Add-on] or [Web Filtering Add-on, NGFW Add-on, AV Add-on]
        :param pulumi.Input[_builtins.str] name: name
        """
        pulumi.set(__self__, "datacenter", datacenter)
        pulumi.set(__self__, "firewall_type", firewall_type)
        pulumi.set(__self__, "pod", pod)
        if addon_configurations is not None:
            pulumi.set(__self__, "addon_configurations", addon_configurations)
        if multi_vlan_firewall_id is not None:
            pulumi.set(__self__, "multi_vlan_firewall_id", multi_vlan_firewall_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> pulumi.Input[_builtins.str]:
        """
        Datacenter name
        """
        return pulumi.get(self, "datacenter")

    @datacenter.setter
    def datacenter(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "datacenter", value)

    @_builtins.property
    @pulumi.getter(name="firewallType")
    def firewall_type(self) -> pulumi.Input[_builtins.str]:
        """
        Firewall type
        """
        return pulumi.get(self, "firewall_type")

    @firewall_type.setter
    def firewall_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "firewall_type", value)

    @_builtins.property
    @pulumi.getter
    def pod(self) -> pulumi.Input[_builtins.str]:
        """
        POD name
        """
        return pulumi.get(self, "pod")

    @pod.setter
    def pod(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pod", value)

    @_builtins.property
    @pulumi.getter(name="addonConfigurations")
    def addon_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        High Availability - [Web Filtering Add-on, NGFW Add-on, AV Add-on] or [Web Filtering Add-on, NGFW Add-on, AV Add-on]
        """
        return pulumi.get(self, "addon_configurations")

    @addon_configurations.setter
    def addon_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "addon_configurations", value)

    @_builtins.property
    @pulumi.getter(name="multiVlanFirewallId")
    def multi_vlan_firewall_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "multi_vlan_firewall_id")

    @multi_vlan_firewall_id.setter
    def multi_vlan_firewall_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "multi_vlan_firewall_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _MultiVlanFirewallState:
    def __init__(__self__, *,
                 addon_configurations: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 firewall_type: Optional[pulumi.Input[_builtins.str]] = None,
                 multi_vlan_firewall_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 pod: Optional[pulumi.Input[_builtins.str]] = None,
                 private_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 private_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
                 public_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 public_ipv6: Optional[pulumi.Input[_builtins.str]] = None,
                 public_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
                 username: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering MultiVlanFirewall resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] addon_configurations: High Availability - [Web Filtering Add-on, NGFW Add-on, AV Add-on] or [Web Filtering Add-on, NGFW Add-on, AV Add-on]
        :param pulumi.Input[_builtins.str] datacenter: Datacenter name
        :param pulumi.Input[_builtins.str] firewall_type: Firewall type
        :param pulumi.Input[_builtins.str] name: name
        :param pulumi.Input[_builtins.str] password: Password
        :param pulumi.Input[_builtins.str] pod: POD name
        :param pulumi.Input[_builtins.str] private_ip: Private IP Address
        :param pulumi.Input[_builtins.float] private_vlan_id: Private VLAN id
        :param pulumi.Input[_builtins.str] public_ip: Public IP Address
        :param pulumi.Input[_builtins.str] public_ipv6: Public IPV6 IP
        :param pulumi.Input[_builtins.float] public_vlan_id: Public VLAN id
        :param pulumi.Input[_builtins.str] username: User name
        """
        if addon_configurations is not None:
            pulumi.set(__self__, "addon_configurations", addon_configurations)
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if firewall_type is not None:
            pulumi.set(__self__, "firewall_type", firewall_type)
        if multi_vlan_firewall_id is not None:
            pulumi.set(__self__, "multi_vlan_firewall_id", multi_vlan_firewall_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if pod is not None:
            pulumi.set(__self__, "pod", pod)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if private_vlan_id is not None:
            pulumi.set(__self__, "private_vlan_id", private_vlan_id)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if public_ipv6 is not None:
            pulumi.set(__self__, "public_ipv6", public_ipv6)
        if public_vlan_id is not None:
            pulumi.set(__self__, "public_vlan_id", public_vlan_id)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter(name="addonConfigurations")
    def addon_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        High Availability - [Web Filtering Add-on, NGFW Add-on, AV Add-on] or [Web Filtering Add-on, NGFW Add-on, AV Add-on]
        """
        return pulumi.get(self, "addon_configurations")

    @addon_configurations.setter
    def addon_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "addon_configurations", value)

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Datacenter name
        """
        return pulumi.get(self, "datacenter")

    @datacenter.setter
    def datacenter(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "datacenter", value)

    @_builtins.property
    @pulumi.getter(name="firewallType")
    def firewall_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Firewall type
        """
        return pulumi.get(self, "firewall_type")

    @firewall_type.setter
    def firewall_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "firewall_type", value)

    @_builtins.property
    @pulumi.getter(name="multiVlanFirewallId")
    def multi_vlan_firewall_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "multi_vlan_firewall_id")

    @multi_vlan_firewall_id.setter
    def multi_vlan_firewall_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "multi_vlan_firewall_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Password
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter
    def pod(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        POD name
        """
        return pulumi.get(self, "pod")

    @pod.setter
    def pod(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pod", value)

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Private IP Address
        """
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_ip", value)

    @_builtins.property
    @pulumi.getter(name="privateVlanId")
    def private_vlan_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Private VLAN id
        """
        return pulumi.get(self, "private_vlan_id")

    @private_vlan_id.setter
    def private_vlan_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "private_vlan_id", value)

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Public IP Address
        """
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_ip", value)

    @_builtins.property
    @pulumi.getter(name="publicIpv6")
    def public_ipv6(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Public IPV6 IP
        """
        return pulumi.get(self, "public_ipv6")

    @public_ipv6.setter
    def public_ipv6(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_ipv6", value)

    @_builtins.property
    @pulumi.getter(name="publicVlanId")
    def public_vlan_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Public VLAN id
        """
        return pulumi.get(self, "public_vlan_id")

    @public_vlan_id.setter
    def public_vlan_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "public_vlan_id", value)

    @_builtins.property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        User name
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "username", value)


@pulumi.type_token("ibm:index/multiVlanFirewall:MultiVlanFirewall")
class MultiVlanFirewall(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addon_configurations: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 firewall_type: Optional[pulumi.Input[_builtins.str]] = None,
                 multi_vlan_firewall_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 pod: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a MultiVlanFirewall resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] addon_configurations: High Availability - [Web Filtering Add-on, NGFW Add-on, AV Add-on] or [Web Filtering Add-on, NGFW Add-on, AV Add-on]
        :param pulumi.Input[_builtins.str] datacenter: Datacenter name
        :param pulumi.Input[_builtins.str] firewall_type: Firewall type
        :param pulumi.Input[_builtins.str] name: name
        :param pulumi.Input[_builtins.str] pod: POD name
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MultiVlanFirewallArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a MultiVlanFirewall resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param MultiVlanFirewallArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MultiVlanFirewallArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addon_configurations: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 firewall_type: Optional[pulumi.Input[_builtins.str]] = None,
                 multi_vlan_firewall_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 pod: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MultiVlanFirewallArgs.__new__(MultiVlanFirewallArgs)

            __props__.__dict__["addon_configurations"] = addon_configurations
            if datacenter is None and not opts.urn:
                raise TypeError("Missing required property 'datacenter'")
            __props__.__dict__["datacenter"] = datacenter
            if firewall_type is None and not opts.urn:
                raise TypeError("Missing required property 'firewall_type'")
            __props__.__dict__["firewall_type"] = firewall_type
            __props__.__dict__["multi_vlan_firewall_id"] = multi_vlan_firewall_id
            __props__.__dict__["name"] = name
            if pod is None and not opts.urn:
                raise TypeError("Missing required property 'pod'")
            __props__.__dict__["pod"] = pod
            __props__.__dict__["password"] = None
            __props__.__dict__["private_ip"] = None
            __props__.__dict__["private_vlan_id"] = None
            __props__.__dict__["public_ip"] = None
            __props__.__dict__["public_ipv6"] = None
            __props__.__dict__["public_vlan_id"] = None
            __props__.__dict__["username"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(MultiVlanFirewall, __self__).__init__(
            'ibm:index/multiVlanFirewall:MultiVlanFirewall',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            addon_configurations: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            datacenter: Optional[pulumi.Input[_builtins.str]] = None,
            firewall_type: Optional[pulumi.Input[_builtins.str]] = None,
            multi_vlan_firewall_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            password: Optional[pulumi.Input[_builtins.str]] = None,
            pod: Optional[pulumi.Input[_builtins.str]] = None,
            private_ip: Optional[pulumi.Input[_builtins.str]] = None,
            private_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
            public_ip: Optional[pulumi.Input[_builtins.str]] = None,
            public_ipv6: Optional[pulumi.Input[_builtins.str]] = None,
            public_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
            username: Optional[pulumi.Input[_builtins.str]] = None) -> 'MultiVlanFirewall':
        """
        Get an existing MultiVlanFirewall resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] addon_configurations: High Availability - [Web Filtering Add-on, NGFW Add-on, AV Add-on] or [Web Filtering Add-on, NGFW Add-on, AV Add-on]
        :param pulumi.Input[_builtins.str] datacenter: Datacenter name
        :param pulumi.Input[_builtins.str] firewall_type: Firewall type
        :param pulumi.Input[_builtins.str] name: name
        :param pulumi.Input[_builtins.str] password: Password
        :param pulumi.Input[_builtins.str] pod: POD name
        :param pulumi.Input[_builtins.str] private_ip: Private IP Address
        :param pulumi.Input[_builtins.float] private_vlan_id: Private VLAN id
        :param pulumi.Input[_builtins.str] public_ip: Public IP Address
        :param pulumi.Input[_builtins.str] public_ipv6: Public IPV6 IP
        :param pulumi.Input[_builtins.float] public_vlan_id: Public VLAN id
        :param pulumi.Input[_builtins.str] username: User name
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MultiVlanFirewallState.__new__(_MultiVlanFirewallState)

        __props__.__dict__["addon_configurations"] = addon_configurations
        __props__.__dict__["datacenter"] = datacenter
        __props__.__dict__["firewall_type"] = firewall_type
        __props__.__dict__["multi_vlan_firewall_id"] = multi_vlan_firewall_id
        __props__.__dict__["name"] = name
        __props__.__dict__["password"] = password
        __props__.__dict__["pod"] = pod
        __props__.__dict__["private_ip"] = private_ip
        __props__.__dict__["private_vlan_id"] = private_vlan_id
        __props__.__dict__["public_ip"] = public_ip
        __props__.__dict__["public_ipv6"] = public_ipv6
        __props__.__dict__["public_vlan_id"] = public_vlan_id
        __props__.__dict__["username"] = username
        return MultiVlanFirewall(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="addonConfigurations")
    def addon_configurations(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        High Availability - [Web Filtering Add-on, NGFW Add-on, AV Add-on] or [Web Filtering Add-on, NGFW Add-on, AV Add-on]
        """
        return pulumi.get(self, "addon_configurations")

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> pulumi.Output[_builtins.str]:
        """
        Datacenter name
        """
        return pulumi.get(self, "datacenter")

    @_builtins.property
    @pulumi.getter(name="firewallType")
    def firewall_type(self) -> pulumi.Output[_builtins.str]:
        """
        Firewall type
        """
        return pulumi.get(self, "firewall_type")

    @_builtins.property
    @pulumi.getter(name="multiVlanFirewallId")
    def multi_vlan_firewall_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "multi_vlan_firewall_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def password(self) -> pulumi.Output[_builtins.str]:
        """
        Password
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter
    def pod(self) -> pulumi.Output[_builtins.str]:
        """
        POD name
        """
        return pulumi.get(self, "pod")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> pulumi.Output[_builtins.str]:
        """
        Private IP Address
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="privateVlanId")
    def private_vlan_id(self) -> pulumi.Output[_builtins.float]:
        """
        Private VLAN id
        """
        return pulumi.get(self, "private_vlan_id")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> pulumi.Output[_builtins.str]:
        """
        Public IP Address
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="publicIpv6")
    def public_ipv6(self) -> pulumi.Output[_builtins.str]:
        """
        Public IPV6 IP
        """
        return pulumi.get(self, "public_ipv6")

    @_builtins.property
    @pulumi.getter(name="publicVlanId")
    def public_vlan_id(self) -> pulumi.Output[_builtins.float]:
        """
        Public VLAN id
        """
        return pulumi.get(self, "public_vlan_id")

    @_builtins.property
    @pulumi.getter
    def username(self) -> pulumi.Output[_builtins.str]:
        """
        User name
        """
        return pulumi.get(self, "username")

