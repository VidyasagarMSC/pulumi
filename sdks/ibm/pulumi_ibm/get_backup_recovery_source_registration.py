# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetBackupRecoverySourceRegistrationResult',
    'AwaitableGetBackupRecoverySourceRegistrationResult',
    'get_backup_recovery_source_registration',
    'get_backup_recovery_source_registration_output',
]

@pulumi.output_type
class GetBackupRecoverySourceRegistrationResult:
    """
    A collection of values returned by getBackupRecoverySourceRegistration.
    """
    def __init__(__self__, advanced_configs=None, authentication_status=None, connection_id=None, connections=None, connector_group_id=None, data_source_connection_id=None, environment=None, external_metadatas=None, id=None, last_refreshed_time_msecs=None, name=None, physical_params=None, registration_time_msecs=None, request_initiator_type=None, source_id=None, source_infos=None, source_registration_id=None, x_ibm_tenant_id=None):
        if advanced_configs and not isinstance(advanced_configs, list):
            raise TypeError("Expected argument 'advanced_configs' to be a list")
        pulumi.set(__self__, "advanced_configs", advanced_configs)
        if authentication_status and not isinstance(authentication_status, str):
            raise TypeError("Expected argument 'authentication_status' to be a str")
        pulumi.set(__self__, "authentication_status", authentication_status)
        if connection_id and not isinstance(connection_id, float):
            raise TypeError("Expected argument 'connection_id' to be a float")
        pulumi.set(__self__, "connection_id", connection_id)
        if connections and not isinstance(connections, list):
            raise TypeError("Expected argument 'connections' to be a list")
        pulumi.set(__self__, "connections", connections)
        if connector_group_id and not isinstance(connector_group_id, float):
            raise TypeError("Expected argument 'connector_group_id' to be a float")
        pulumi.set(__self__, "connector_group_id", connector_group_id)
        if data_source_connection_id and not isinstance(data_source_connection_id, str):
            raise TypeError("Expected argument 'data_source_connection_id' to be a str")
        pulumi.set(__self__, "data_source_connection_id", data_source_connection_id)
        if environment and not isinstance(environment, str):
            raise TypeError("Expected argument 'environment' to be a str")
        pulumi.set(__self__, "environment", environment)
        if external_metadatas and not isinstance(external_metadatas, list):
            raise TypeError("Expected argument 'external_metadatas' to be a list")
        pulumi.set(__self__, "external_metadatas", external_metadatas)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_refreshed_time_msecs and not isinstance(last_refreshed_time_msecs, float):
            raise TypeError("Expected argument 'last_refreshed_time_msecs' to be a float")
        pulumi.set(__self__, "last_refreshed_time_msecs", last_refreshed_time_msecs)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if physical_params and not isinstance(physical_params, list):
            raise TypeError("Expected argument 'physical_params' to be a list")
        pulumi.set(__self__, "physical_params", physical_params)
        if registration_time_msecs and not isinstance(registration_time_msecs, float):
            raise TypeError("Expected argument 'registration_time_msecs' to be a float")
        pulumi.set(__self__, "registration_time_msecs", registration_time_msecs)
        if request_initiator_type and not isinstance(request_initiator_type, str):
            raise TypeError("Expected argument 'request_initiator_type' to be a str")
        pulumi.set(__self__, "request_initiator_type", request_initiator_type)
        if source_id and not isinstance(source_id, float):
            raise TypeError("Expected argument 'source_id' to be a float")
        pulumi.set(__self__, "source_id", source_id)
        if source_infos and not isinstance(source_infos, list):
            raise TypeError("Expected argument 'source_infos' to be a list")
        pulumi.set(__self__, "source_infos", source_infos)
        if source_registration_id and not isinstance(source_registration_id, float):
            raise TypeError("Expected argument 'source_registration_id' to be a float")
        pulumi.set(__self__, "source_registration_id", source_registration_id)
        if x_ibm_tenant_id and not isinstance(x_ibm_tenant_id, str):
            raise TypeError("Expected argument 'x_ibm_tenant_id' to be a str")
        pulumi.set(__self__, "x_ibm_tenant_id", x_ibm_tenant_id)

    @_builtins.property
    @pulumi.getter(name="advancedConfigs")
    def advanced_configs(self) -> Sequence['outputs.GetBackupRecoverySourceRegistrationAdvancedConfigResult']:
        return pulumi.get(self, "advanced_configs")

    @_builtins.property
    @pulumi.getter(name="authenticationStatus")
    def authentication_status(self) -> _builtins.str:
        return pulumi.get(self, "authentication_status")

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> _builtins.float:
        return pulumi.get(self, "connection_id")

    @_builtins.property
    @pulumi.getter
    def connections(self) -> Sequence['outputs.GetBackupRecoverySourceRegistrationConnectionResult']:
        return pulumi.get(self, "connections")

    @_builtins.property
    @pulumi.getter(name="connectorGroupId")
    def connector_group_id(self) -> _builtins.float:
        return pulumi.get(self, "connector_group_id")

    @_builtins.property
    @pulumi.getter(name="dataSourceConnectionId")
    def data_source_connection_id(self) -> _builtins.str:
        return pulumi.get(self, "data_source_connection_id")

    @_builtins.property
    @pulumi.getter
    def environment(self) -> _builtins.str:
        return pulumi.get(self, "environment")

    @_builtins.property
    @pulumi.getter(name="externalMetadatas")
    def external_metadatas(self) -> Sequence['outputs.GetBackupRecoverySourceRegistrationExternalMetadataResult']:
        return pulumi.get(self, "external_metadatas")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastRefreshedTimeMsecs")
    def last_refreshed_time_msecs(self) -> _builtins.float:
        return pulumi.get(self, "last_refreshed_time_msecs")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="physicalParams")
    def physical_params(self) -> Sequence['outputs.GetBackupRecoverySourceRegistrationPhysicalParamResult']:
        return pulumi.get(self, "physical_params")

    @_builtins.property
    @pulumi.getter(name="registrationTimeMsecs")
    def registration_time_msecs(self) -> _builtins.float:
        return pulumi.get(self, "registration_time_msecs")

    @_builtins.property
    @pulumi.getter(name="requestInitiatorType")
    def request_initiator_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "request_initiator_type")

    @_builtins.property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> _builtins.float:
        return pulumi.get(self, "source_id")

    @_builtins.property
    @pulumi.getter(name="sourceInfos")
    def source_infos(self) -> Sequence['outputs.GetBackupRecoverySourceRegistrationSourceInfoResult']:
        return pulumi.get(self, "source_infos")

    @_builtins.property
    @pulumi.getter(name="sourceRegistrationId")
    def source_registration_id(self) -> _builtins.float:
        return pulumi.get(self, "source_registration_id")

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> _builtins.str:
        return pulumi.get(self, "x_ibm_tenant_id")


class AwaitableGetBackupRecoverySourceRegistrationResult(GetBackupRecoverySourceRegistrationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupRecoverySourceRegistrationResult(
            advanced_configs=self.advanced_configs,
            authentication_status=self.authentication_status,
            connection_id=self.connection_id,
            connections=self.connections,
            connector_group_id=self.connector_group_id,
            data_source_connection_id=self.data_source_connection_id,
            environment=self.environment,
            external_metadatas=self.external_metadatas,
            id=self.id,
            last_refreshed_time_msecs=self.last_refreshed_time_msecs,
            name=self.name,
            physical_params=self.physical_params,
            registration_time_msecs=self.registration_time_msecs,
            request_initiator_type=self.request_initiator_type,
            source_id=self.source_id,
            source_infos=self.source_infos,
            source_registration_id=self.source_registration_id,
            x_ibm_tenant_id=self.x_ibm_tenant_id)


def get_backup_recovery_source_registration(id: Optional[_builtins.str] = None,
                                            request_initiator_type: Optional[_builtins.str] = None,
                                            source_registration_id: Optional[_builtins.float] = None,
                                            x_ibm_tenant_id: Optional[_builtins.str] = None,
                                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupRecoverySourceRegistrationResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['requestInitiatorType'] = request_initiator_type
    __args__['sourceRegistrationId'] = source_registration_id
    __args__['xIbmTenantId'] = x_ibm_tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getBackupRecoverySourceRegistration:getBackupRecoverySourceRegistration', __args__, opts=opts, typ=GetBackupRecoverySourceRegistrationResult, package_ref=_utilities.get_package()).value

    return AwaitableGetBackupRecoverySourceRegistrationResult(
        advanced_configs=pulumi.get(__ret__, 'advanced_configs'),
        authentication_status=pulumi.get(__ret__, 'authentication_status'),
        connection_id=pulumi.get(__ret__, 'connection_id'),
        connections=pulumi.get(__ret__, 'connections'),
        connector_group_id=pulumi.get(__ret__, 'connector_group_id'),
        data_source_connection_id=pulumi.get(__ret__, 'data_source_connection_id'),
        environment=pulumi.get(__ret__, 'environment'),
        external_metadatas=pulumi.get(__ret__, 'external_metadatas'),
        id=pulumi.get(__ret__, 'id'),
        last_refreshed_time_msecs=pulumi.get(__ret__, 'last_refreshed_time_msecs'),
        name=pulumi.get(__ret__, 'name'),
        physical_params=pulumi.get(__ret__, 'physical_params'),
        registration_time_msecs=pulumi.get(__ret__, 'registration_time_msecs'),
        request_initiator_type=pulumi.get(__ret__, 'request_initiator_type'),
        source_id=pulumi.get(__ret__, 'source_id'),
        source_infos=pulumi.get(__ret__, 'source_infos'),
        source_registration_id=pulumi.get(__ret__, 'source_registration_id'),
        x_ibm_tenant_id=pulumi.get(__ret__, 'x_ibm_tenant_id'))
def get_backup_recovery_source_registration_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                   request_initiator_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                   source_registration_id: Optional[pulumi.Input[_builtins.float]] = None,
                                                   x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBackupRecoverySourceRegistrationResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['requestInitiatorType'] = request_initiator_type
    __args__['sourceRegistrationId'] = source_registration_id
    __args__['xIbmTenantId'] = x_ibm_tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getBackupRecoverySourceRegistration:getBackupRecoverySourceRegistration', __args__, opts=opts, typ=GetBackupRecoverySourceRegistrationResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetBackupRecoverySourceRegistrationResult(
        advanced_configs=pulumi.get(__response__, 'advanced_configs'),
        authentication_status=pulumi.get(__response__, 'authentication_status'),
        connection_id=pulumi.get(__response__, 'connection_id'),
        connections=pulumi.get(__response__, 'connections'),
        connector_group_id=pulumi.get(__response__, 'connector_group_id'),
        data_source_connection_id=pulumi.get(__response__, 'data_source_connection_id'),
        environment=pulumi.get(__response__, 'environment'),
        external_metadatas=pulumi.get(__response__, 'external_metadatas'),
        id=pulumi.get(__response__, 'id'),
        last_refreshed_time_msecs=pulumi.get(__response__, 'last_refreshed_time_msecs'),
        name=pulumi.get(__response__, 'name'),
        physical_params=pulumi.get(__response__, 'physical_params'),
        registration_time_msecs=pulumi.get(__response__, 'registration_time_msecs'),
        request_initiator_type=pulumi.get(__response__, 'request_initiator_type'),
        source_id=pulumi.get(__response__, 'source_id'),
        source_infos=pulumi.get(__response__, 'source_infos'),
        source_registration_id=pulumi.get(__response__, 'source_registration_id'),
        x_ibm_tenant_id=pulumi.get(__response__, 'x_ibm_tenant_id')))
