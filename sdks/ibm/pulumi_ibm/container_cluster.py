# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ContainerClusterArgs', 'ContainerCluster']

@pulumi.input_type
class ContainerClusterArgs:
    def __init__(__self__, *,
                 datacenter: pulumi.Input[_builtins.str],
                 hardware: pulumi.Input[_builtins.str],
                 container_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 default_pool_size: Optional[pulumi.Input[_builtins.float]] = None,
                 disk_encryption: Optional[pulumi.Input[_builtins.bool]] = None,
                 entitlement: Optional[pulumi.Input[_builtins.str]] = None,
                 force_delete_storage: Optional[pulumi.Input[_builtins.bool]] = None,
                 gateway_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 image_security_enforcement: Optional[pulumi.Input[_builtins.bool]] = None,
                 kms_config: Optional[pulumi.Input['ContainerClusterKmsConfigArgs']] = None,
                 kube_version: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 machine_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 no_subnet: Optional[pulumi.Input[_builtins.bool]] = None,
                 operating_system: Optional[pulumi.Input[_builtins.str]] = None,
                 patch_version: Optional[pulumi.Input[_builtins.str]] = None,
                 pod_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 private_service_endpoint: Optional[pulumi.Input[_builtins.bool]] = None,
                 private_vlan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 public_service_endpoint: Optional[pulumi.Input[_builtins.bool]] = None,
                 public_vlan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 retry_patch_version: Optional[pulumi.Input[_builtins.float]] = None,
                 service_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerClusterTaintArgs']]]] = None,
                 timeouts: Optional[pulumi.Input['ContainerClusterTimeoutsArgs']] = None,
                 update_all_workers: Optional[pulumi.Input[_builtins.bool]] = None,
                 wait_for_worker_update: Optional[pulumi.Input[_builtins.bool]] = None,
                 wait_till: Optional[pulumi.Input[_builtins.str]] = None,
                 webhooks: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerClusterWebhookArgs']]]] = None,
                 workers_infos: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerClusterWorkersInfoArgs']]]] = None):
        """
        The set of arguments for constructing a ContainerCluster resource.
        :param pulumi.Input[_builtins.str] datacenter: The datacenter where this cluster will be deployed
        :param pulumi.Input[_builtins.str] hardware: Hardware type
        :param pulumi.Input[_builtins.float] default_pool_size: The size of the default worker pool
        :param pulumi.Input[_builtins.bool] disk_encryption: disc encryption done, if set to true.
        :param pulumi.Input[_builtins.str] entitlement: Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        :param pulumi.Input[_builtins.bool] force_delete_storage: Force the removal of a cluster and its persistent storage. Deleted data cannot be recovered
        :param pulumi.Input[_builtins.bool] gateway_enabled: Set true for gateway enabled clusters
        :param pulumi.Input[_builtins.bool] image_security_enforcement: Set true to enable image security enforcement policies
        :param pulumi.Input['ContainerClusterKmsConfigArgs'] kms_config: Enables KMS on a given cluster
        :param pulumi.Input[_builtins.str] kube_version: Kubernetes version info
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: list of labels to the default worker pool
        :param pulumi.Input[_builtins.str] machine_type: Machine type
        :param pulumi.Input[_builtins.str] name: The cluster name
        :param pulumi.Input[_builtins.bool] no_subnet: Boolean value set to true when subnet creation is not required.
        :param pulumi.Input[_builtins.str] operating_system: The operating system of the workers in the default worker pool.
        :param pulumi.Input[_builtins.str] patch_version: Kubernetes patch version
        :param pulumi.Input[_builtins.str] pod_subnet: Custom subnet CIDR to provide private IP addresses for pods
        :param pulumi.Input[_builtins.str] private_vlan_id: Private VLAN ID
        :param pulumi.Input[_builtins.str] public_vlan_id: Public VLAN ID
        :param pulumi.Input[_builtins.str] region: The cluster region
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.float] retry_patch_version: Argument which helps to retry the patch version updates on worker nodes. Increment the value to retry the patch updates
               if the previous apply fails
        :param pulumi.Input[_builtins.str] service_subnet: Custom subnet CIDR to provide private IP addresses for services
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] subnet_ids: List of subnet IDs
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags for the resource
        :param pulumi.Input[Sequence[pulumi.Input['ContainerClusterTaintArgs']]] taints: WorkerPool Taints
        :param pulumi.Input[_builtins.bool] update_all_workers: Updates all the woker nodes if sets to true
        :param pulumi.Input[_builtins.bool] wait_for_worker_update: Wait for worker node to update during kube version update.
        :param pulumi.Input[_builtins.str] wait_till: wait_till can be configured for Master Ready, One worker Ready, Ingress Ready or Normal
        :param pulumi.Input[Sequence[pulumi.Input['ContainerClusterWorkersInfoArgs']]] workers_infos: The IDs of the worker node
        """
        pulumi.set(__self__, "datacenter", datacenter)
        pulumi.set(__self__, "hardware", hardware)
        if container_cluster_id is not None:
            pulumi.set(__self__, "container_cluster_id", container_cluster_id)
        if default_pool_size is not None:
            pulumi.set(__self__, "default_pool_size", default_pool_size)
        if disk_encryption is not None:
            pulumi.set(__self__, "disk_encryption", disk_encryption)
        if entitlement is not None:
            pulumi.set(__self__, "entitlement", entitlement)
        if force_delete_storage is not None:
            pulumi.set(__self__, "force_delete_storage", force_delete_storage)
        if gateway_enabled is not None:
            pulumi.set(__self__, "gateway_enabled", gateway_enabled)
        if image_security_enforcement is not None:
            pulumi.set(__self__, "image_security_enforcement", image_security_enforcement)
        if kms_config is not None:
            pulumi.set(__self__, "kms_config", kms_config)
        if kube_version is not None:
            pulumi.set(__self__, "kube_version", kube_version)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if machine_type is not None:
            pulumi.set(__self__, "machine_type", machine_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if no_subnet is not None:
            pulumi.set(__self__, "no_subnet", no_subnet)
        if operating_system is not None:
            pulumi.set(__self__, "operating_system", operating_system)
        if patch_version is not None:
            pulumi.set(__self__, "patch_version", patch_version)
        if pod_subnet is not None:
            pulumi.set(__self__, "pod_subnet", pod_subnet)
        if private_service_endpoint is not None:
            pulumi.set(__self__, "private_service_endpoint", private_service_endpoint)
        if private_vlan_id is not None:
            pulumi.set(__self__, "private_vlan_id", private_vlan_id)
        if public_service_endpoint is not None:
            pulumi.set(__self__, "public_service_endpoint", public_service_endpoint)
        if public_vlan_id is not None:
            pulumi.set(__self__, "public_vlan_id", public_vlan_id)
        if region is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""region is deprecated: Deprecated""")
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if retry_patch_version is not None:
            pulumi.set(__self__, "retry_patch_version", retry_patch_version)
        if service_subnet is not None:
            pulumi.set(__self__, "service_subnet", service_subnet)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if update_all_workers is not None:
            pulumi.set(__self__, "update_all_workers", update_all_workers)
        if wait_for_worker_update is not None:
            pulumi.set(__self__, "wait_for_worker_update", wait_for_worker_update)
        if wait_till is not None:
            pulumi.set(__self__, "wait_till", wait_till)
        if webhooks is not None:
            pulumi.set(__self__, "webhooks", webhooks)
        if workers_infos is not None:
            pulumi.set(__self__, "workers_infos", workers_infos)

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> pulumi.Input[_builtins.str]:
        """
        The datacenter where this cluster will be deployed
        """
        return pulumi.get(self, "datacenter")

    @datacenter.setter
    def datacenter(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "datacenter", value)

    @_builtins.property
    @pulumi.getter
    def hardware(self) -> pulumi.Input[_builtins.str]:
        """
        Hardware type
        """
        return pulumi.get(self, "hardware")

    @hardware.setter
    def hardware(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "hardware", value)

    @_builtins.property
    @pulumi.getter(name="containerClusterId")
    def container_cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_cluster_id")

    @container_cluster_id.setter
    def container_cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="defaultPoolSize")
    def default_pool_size(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The size of the default worker pool
        """
        return pulumi.get(self, "default_pool_size")

    @default_pool_size.setter
    def default_pool_size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "default_pool_size", value)

    @_builtins.property
    @pulumi.getter(name="diskEncryption")
    def disk_encryption(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        disc encryption done, if set to true.
        """
        return pulumi.get(self, "disk_encryption")

    @disk_encryption.setter
    def disk_encryption(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disk_encryption", value)

    @_builtins.property
    @pulumi.getter
    def entitlement(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        """
        return pulumi.get(self, "entitlement")

    @entitlement.setter
    def entitlement(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entitlement", value)

    @_builtins.property
    @pulumi.getter(name="forceDeleteStorage")
    def force_delete_storage(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Force the removal of a cluster and its persistent storage. Deleted data cannot be recovered
        """
        return pulumi.get(self, "force_delete_storage")

    @force_delete_storage.setter
    def force_delete_storage(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "force_delete_storage", value)

    @_builtins.property
    @pulumi.getter(name="gatewayEnabled")
    def gateway_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set true for gateway enabled clusters
        """
        return pulumi.get(self, "gateway_enabled")

    @gateway_enabled.setter
    def gateway_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "gateway_enabled", value)

    @_builtins.property
    @pulumi.getter(name="imageSecurityEnforcement")
    def image_security_enforcement(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set true to enable image security enforcement policies
        """
        return pulumi.get(self, "image_security_enforcement")

    @image_security_enforcement.setter
    def image_security_enforcement(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "image_security_enforcement", value)

    @_builtins.property
    @pulumi.getter(name="kmsConfig")
    def kms_config(self) -> Optional[pulumi.Input['ContainerClusterKmsConfigArgs']]:
        """
        Enables KMS on a given cluster
        """
        return pulumi.get(self, "kms_config")

    @kms_config.setter
    def kms_config(self, value: Optional[pulumi.Input['ContainerClusterKmsConfigArgs']]):
        pulumi.set(self, "kms_config", value)

    @_builtins.property
    @pulumi.getter(name="kubeVersion")
    def kube_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Kubernetes version info
        """
        return pulumi.get(self, "kube_version")

    @kube_version.setter
    def kube_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kube_version", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        list of labels to the default worker pool
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Machine type
        """
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "machine_type", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cluster name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="noSubnet")
    def no_subnet(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Boolean value set to true when subnet creation is not required.
        """
        return pulumi.get(self, "no_subnet")

    @no_subnet.setter
    def no_subnet(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "no_subnet", value)

    @_builtins.property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The operating system of the workers in the default worker pool.
        """
        return pulumi.get(self, "operating_system")

    @operating_system.setter
    def operating_system(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "operating_system", value)

    @_builtins.property
    @pulumi.getter(name="patchVersion")
    def patch_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Kubernetes patch version
        """
        return pulumi.get(self, "patch_version")

    @patch_version.setter
    def patch_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "patch_version", value)

    @_builtins.property
    @pulumi.getter(name="podSubnet")
    def pod_subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Custom subnet CIDR to provide private IP addresses for pods
        """
        return pulumi.get(self, "pod_subnet")

    @pod_subnet.setter
    def pod_subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pod_subnet", value)

    @_builtins.property
    @pulumi.getter(name="privateServiceEndpoint")
    def private_service_endpoint(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "private_service_endpoint")

    @private_service_endpoint.setter
    def private_service_endpoint(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "private_service_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="privateVlanId")
    def private_vlan_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Private VLAN ID
        """
        return pulumi.get(self, "private_vlan_id")

    @private_vlan_id.setter
    def private_vlan_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_vlan_id", value)

    @_builtins.property
    @pulumi.getter(name="publicServiceEndpoint")
    def public_service_endpoint(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "public_service_endpoint")

    @public_service_endpoint.setter
    def public_service_endpoint(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "public_service_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="publicVlanId")
    def public_vlan_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Public VLAN ID
        """
        return pulumi.get(self, "public_vlan_id")

    @public_vlan_id.setter
    def public_vlan_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_vlan_id", value)

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cluster region
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter(name="retryPatchVersion")
    def retry_patch_version(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Argument which helps to retry the patch version updates on worker nodes. Increment the value to retry the patch updates
        if the previous apply fails
        """
        return pulumi.get(self, "retry_patch_version")

    @retry_patch_version.setter
    def retry_patch_version(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "retry_patch_version", value)

    @_builtins.property
    @pulumi.getter(name="serviceSubnet")
    def service_subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Custom subnet CIDR to provide private IP addresses for services
        """
        return pulumi.get(self, "service_subnet")

    @service_subnet.setter
    def service_subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_subnet", value)

    @_builtins.property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of subnet IDs
        """
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "subnet_ids", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Tags for the resource
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerClusterTaintArgs']]]]:
        """
        WorkerPool Taints
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerClusterTaintArgs']]]]):
        pulumi.set(self, "taints", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ContainerClusterTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ContainerClusterTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="updateAllWorkers")
    def update_all_workers(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Updates all the woker nodes if sets to true
        """
        return pulumi.get(self, "update_all_workers")

    @update_all_workers.setter
    def update_all_workers(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "update_all_workers", value)

    @_builtins.property
    @pulumi.getter(name="waitForWorkerUpdate")
    def wait_for_worker_update(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Wait for worker node to update during kube version update.
        """
        return pulumi.get(self, "wait_for_worker_update")

    @wait_for_worker_update.setter
    def wait_for_worker_update(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "wait_for_worker_update", value)

    @_builtins.property
    @pulumi.getter(name="waitTill")
    def wait_till(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        wait_till can be configured for Master Ready, One worker Ready, Ingress Ready or Normal
        """
        return pulumi.get(self, "wait_till")

    @wait_till.setter
    def wait_till(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "wait_till", value)

    @_builtins.property
    @pulumi.getter
    def webhooks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerClusterWebhookArgs']]]]:
        return pulumi.get(self, "webhooks")

    @webhooks.setter
    def webhooks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerClusterWebhookArgs']]]]):
        pulumi.set(self, "webhooks", value)

    @_builtins.property
    @pulumi.getter(name="workersInfos")
    def workers_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerClusterWorkersInfoArgs']]]]:
        """
        The IDs of the worker node
        """
        return pulumi.get(self, "workers_infos")

    @workers_infos.setter
    def workers_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerClusterWorkersInfoArgs']]]]):
        pulumi.set(self, "workers_infos", value)


@pulumi.input_type
class _ContainerClusterState:
    def __init__(__self__, *,
                 albs: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerClusterAlbArgs']]]] = None,
                 container_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 default_pool_size: Optional[pulumi.Input[_builtins.float]] = None,
                 disk_encryption: Optional[pulumi.Input[_builtins.bool]] = None,
                 entitlement: Optional[pulumi.Input[_builtins.str]] = None,
                 force_delete_storage: Optional[pulumi.Input[_builtins.bool]] = None,
                 gateway_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 hardware: Optional[pulumi.Input[_builtins.str]] = None,
                 image_security_enforcement: Optional[pulumi.Input[_builtins.bool]] = None,
                 ingress_hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 ingress_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 kms_config: Optional[pulumi.Input['ContainerClusterKmsConfigArgs']] = None,
                 kube_version: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 machine_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 no_subnet: Optional[pulumi.Input[_builtins.bool]] = None,
                 operating_system: Optional[pulumi.Input[_builtins.str]] = None,
                 patch_version: Optional[pulumi.Input[_builtins.str]] = None,
                 pod_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 private_service_endpoint: Optional[pulumi.Input[_builtins.bool]] = None,
                 private_service_endpoint_url: Optional[pulumi.Input[_builtins.str]] = None,
                 private_vlan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 public_service_endpoint: Optional[pulumi.Input[_builtins.bool]] = None,
                 public_service_endpoint_url: Optional[pulumi.Input[_builtins.str]] = None,
                 public_vlan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_controller_url: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_status: Optional[pulumi.Input[_builtins.str]] = None,
                 retry_patch_version: Optional[pulumi.Input[_builtins.float]] = None,
                 server_url: Optional[pulumi.Input[_builtins.str]] = None,
                 service_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerClusterTaintArgs']]]] = None,
                 timeouts: Optional[pulumi.Input['ContainerClusterTimeoutsArgs']] = None,
                 update_all_workers: Optional[pulumi.Input[_builtins.bool]] = None,
                 wait_for_worker_update: Optional[pulumi.Input[_builtins.bool]] = None,
                 wait_till: Optional[pulumi.Input[_builtins.str]] = None,
                 webhooks: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerClusterWebhookArgs']]]] = None,
                 worker_pools: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerClusterWorkerPoolArgs']]]] = None,
                 workers_infos: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerClusterWorkersInfoArgs']]]] = None):
        """
        Input properties used for looking up and filtering ContainerCluster resources.
        :param pulumi.Input[_builtins.str] crn: CRN of resource instance
        :param pulumi.Input[_builtins.str] datacenter: The datacenter where this cluster will be deployed
        :param pulumi.Input[_builtins.float] default_pool_size: The size of the default worker pool
        :param pulumi.Input[_builtins.bool] disk_encryption: disc encryption done, if set to true.
        :param pulumi.Input[_builtins.str] entitlement: Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        :param pulumi.Input[_builtins.bool] force_delete_storage: Force the removal of a cluster and its persistent storage. Deleted data cannot be recovered
        :param pulumi.Input[_builtins.bool] gateway_enabled: Set true for gateway enabled clusters
        :param pulumi.Input[_builtins.str] hardware: Hardware type
        :param pulumi.Input[_builtins.bool] image_security_enforcement: Set true to enable image security enforcement policies
        :param pulumi.Input['ContainerClusterKmsConfigArgs'] kms_config: Enables KMS on a given cluster
        :param pulumi.Input[_builtins.str] kube_version: Kubernetes version info
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: list of labels to the default worker pool
        :param pulumi.Input[_builtins.str] machine_type: Machine type
        :param pulumi.Input[_builtins.str] name: The cluster name
        :param pulumi.Input[_builtins.bool] no_subnet: Boolean value set to true when subnet creation is not required.
        :param pulumi.Input[_builtins.str] operating_system: The operating system of the workers in the default worker pool.
        :param pulumi.Input[_builtins.str] patch_version: Kubernetes patch version
        :param pulumi.Input[_builtins.str] pod_subnet: Custom subnet CIDR to provide private IP addresses for pods
        :param pulumi.Input[_builtins.str] private_vlan_id: Private VLAN ID
        :param pulumi.Input[_builtins.str] public_vlan_id: Public VLAN ID
        :param pulumi.Input[_builtins.str] region: The cluster region
        :param pulumi.Input[_builtins.str] resource_controller_url: The URL of the IBM Cloud dashboard that can be used to explore and view details about this cluster
        :param pulumi.Input[_builtins.str] resource_crn: The crn of the resource
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.str] resource_group_name: The resource group name in which resource is provisioned
        :param pulumi.Input[_builtins.str] resource_name: The name of the resource
        :param pulumi.Input[_builtins.str] resource_status: The status of the resource
        :param pulumi.Input[_builtins.float] retry_patch_version: Argument which helps to retry the patch version updates on worker nodes. Increment the value to retry the patch updates
               if the previous apply fails
        :param pulumi.Input[_builtins.str] service_subnet: Custom subnet CIDR to provide private IP addresses for services
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] subnet_ids: List of subnet IDs
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags for the resource
        :param pulumi.Input[Sequence[pulumi.Input['ContainerClusterTaintArgs']]] taints: WorkerPool Taints
        :param pulumi.Input[_builtins.bool] update_all_workers: Updates all the woker nodes if sets to true
        :param pulumi.Input[_builtins.bool] wait_for_worker_update: Wait for worker node to update during kube version update.
        :param pulumi.Input[_builtins.str] wait_till: wait_till can be configured for Master Ready, One worker Ready, Ingress Ready or Normal
        :param pulumi.Input[Sequence[pulumi.Input['ContainerClusterWorkersInfoArgs']]] workers_infos: The IDs of the worker node
        """
        if albs is not None:
            pulumi.set(__self__, "albs", albs)
        if container_cluster_id is not None:
            pulumi.set(__self__, "container_cluster_id", container_cluster_id)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if default_pool_size is not None:
            pulumi.set(__self__, "default_pool_size", default_pool_size)
        if disk_encryption is not None:
            pulumi.set(__self__, "disk_encryption", disk_encryption)
        if entitlement is not None:
            pulumi.set(__self__, "entitlement", entitlement)
        if force_delete_storage is not None:
            pulumi.set(__self__, "force_delete_storage", force_delete_storage)
        if gateway_enabled is not None:
            pulumi.set(__self__, "gateway_enabled", gateway_enabled)
        if hardware is not None:
            pulumi.set(__self__, "hardware", hardware)
        if image_security_enforcement is not None:
            pulumi.set(__self__, "image_security_enforcement", image_security_enforcement)
        if ingress_hostname is not None:
            pulumi.set(__self__, "ingress_hostname", ingress_hostname)
        if ingress_secret is not None:
            pulumi.set(__self__, "ingress_secret", ingress_secret)
        if kms_config is not None:
            pulumi.set(__self__, "kms_config", kms_config)
        if kube_version is not None:
            pulumi.set(__self__, "kube_version", kube_version)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if machine_type is not None:
            pulumi.set(__self__, "machine_type", machine_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if no_subnet is not None:
            pulumi.set(__self__, "no_subnet", no_subnet)
        if operating_system is not None:
            pulumi.set(__self__, "operating_system", operating_system)
        if patch_version is not None:
            pulumi.set(__self__, "patch_version", patch_version)
        if pod_subnet is not None:
            pulumi.set(__self__, "pod_subnet", pod_subnet)
        if private_service_endpoint is not None:
            pulumi.set(__self__, "private_service_endpoint", private_service_endpoint)
        if private_service_endpoint_url is not None:
            pulumi.set(__self__, "private_service_endpoint_url", private_service_endpoint_url)
        if private_vlan_id is not None:
            pulumi.set(__self__, "private_vlan_id", private_vlan_id)
        if public_service_endpoint is not None:
            pulumi.set(__self__, "public_service_endpoint", public_service_endpoint)
        if public_service_endpoint_url is not None:
            pulumi.set(__self__, "public_service_endpoint_url", public_service_endpoint_url)
        if public_vlan_id is not None:
            pulumi.set(__self__, "public_vlan_id", public_vlan_id)
        if region is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""region is deprecated: Deprecated""")
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_controller_url is not None:
            pulumi.set(__self__, "resource_controller_url", resource_controller_url)
        if resource_crn is not None:
            pulumi.set(__self__, "resource_crn", resource_crn)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_status is not None:
            pulumi.set(__self__, "resource_status", resource_status)
        if retry_patch_version is not None:
            pulumi.set(__self__, "retry_patch_version", retry_patch_version)
        if server_url is not None:
            pulumi.set(__self__, "server_url", server_url)
        if service_subnet is not None:
            pulumi.set(__self__, "service_subnet", service_subnet)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if update_all_workers is not None:
            pulumi.set(__self__, "update_all_workers", update_all_workers)
        if wait_for_worker_update is not None:
            pulumi.set(__self__, "wait_for_worker_update", wait_for_worker_update)
        if wait_till is not None:
            pulumi.set(__self__, "wait_till", wait_till)
        if webhooks is not None:
            pulumi.set(__self__, "webhooks", webhooks)
        if worker_pools is not None:
            pulumi.set(__self__, "worker_pools", worker_pools)
        if workers_infos is not None:
            pulumi.set(__self__, "workers_infos", workers_infos)

    @_builtins.property
    @pulumi.getter
    def albs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerClusterAlbArgs']]]]:
        return pulumi.get(self, "albs")

    @albs.setter
    def albs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerClusterAlbArgs']]]]):
        pulumi.set(self, "albs", value)

    @_builtins.property
    @pulumi.getter(name="containerClusterId")
    def container_cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_cluster_id")

    @container_cluster_id.setter
    def container_cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_cluster_id", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CRN of resource instance
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The datacenter where this cluster will be deployed
        """
        return pulumi.get(self, "datacenter")

    @datacenter.setter
    def datacenter(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "datacenter", value)

    @_builtins.property
    @pulumi.getter(name="defaultPoolSize")
    def default_pool_size(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The size of the default worker pool
        """
        return pulumi.get(self, "default_pool_size")

    @default_pool_size.setter
    def default_pool_size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "default_pool_size", value)

    @_builtins.property
    @pulumi.getter(name="diskEncryption")
    def disk_encryption(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        disc encryption done, if set to true.
        """
        return pulumi.get(self, "disk_encryption")

    @disk_encryption.setter
    def disk_encryption(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disk_encryption", value)

    @_builtins.property
    @pulumi.getter
    def entitlement(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        """
        return pulumi.get(self, "entitlement")

    @entitlement.setter
    def entitlement(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entitlement", value)

    @_builtins.property
    @pulumi.getter(name="forceDeleteStorage")
    def force_delete_storage(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Force the removal of a cluster and its persistent storage. Deleted data cannot be recovered
        """
        return pulumi.get(self, "force_delete_storage")

    @force_delete_storage.setter
    def force_delete_storage(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "force_delete_storage", value)

    @_builtins.property
    @pulumi.getter(name="gatewayEnabled")
    def gateway_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set true for gateway enabled clusters
        """
        return pulumi.get(self, "gateway_enabled")

    @gateway_enabled.setter
    def gateway_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "gateway_enabled", value)

    @_builtins.property
    @pulumi.getter
    def hardware(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Hardware type
        """
        return pulumi.get(self, "hardware")

    @hardware.setter
    def hardware(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hardware", value)

    @_builtins.property
    @pulumi.getter(name="imageSecurityEnforcement")
    def image_security_enforcement(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set true to enable image security enforcement policies
        """
        return pulumi.get(self, "image_security_enforcement")

    @image_security_enforcement.setter
    def image_security_enforcement(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "image_security_enforcement", value)

    @_builtins.property
    @pulumi.getter(name="ingressHostname")
    def ingress_hostname(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ingress_hostname")

    @ingress_hostname.setter
    def ingress_hostname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ingress_hostname", value)

    @_builtins.property
    @pulumi.getter(name="ingressSecret")
    def ingress_secret(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ingress_secret")

    @ingress_secret.setter
    def ingress_secret(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ingress_secret", value)

    @_builtins.property
    @pulumi.getter(name="kmsConfig")
    def kms_config(self) -> Optional[pulumi.Input['ContainerClusterKmsConfigArgs']]:
        """
        Enables KMS on a given cluster
        """
        return pulumi.get(self, "kms_config")

    @kms_config.setter
    def kms_config(self, value: Optional[pulumi.Input['ContainerClusterKmsConfigArgs']]):
        pulumi.set(self, "kms_config", value)

    @_builtins.property
    @pulumi.getter(name="kubeVersion")
    def kube_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Kubernetes version info
        """
        return pulumi.get(self, "kube_version")

    @kube_version.setter
    def kube_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kube_version", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        list of labels to the default worker pool
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Machine type
        """
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "machine_type", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cluster name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="noSubnet")
    def no_subnet(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Boolean value set to true when subnet creation is not required.
        """
        return pulumi.get(self, "no_subnet")

    @no_subnet.setter
    def no_subnet(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "no_subnet", value)

    @_builtins.property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The operating system of the workers in the default worker pool.
        """
        return pulumi.get(self, "operating_system")

    @operating_system.setter
    def operating_system(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "operating_system", value)

    @_builtins.property
    @pulumi.getter(name="patchVersion")
    def patch_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Kubernetes patch version
        """
        return pulumi.get(self, "patch_version")

    @patch_version.setter
    def patch_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "patch_version", value)

    @_builtins.property
    @pulumi.getter(name="podSubnet")
    def pod_subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Custom subnet CIDR to provide private IP addresses for pods
        """
        return pulumi.get(self, "pod_subnet")

    @pod_subnet.setter
    def pod_subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pod_subnet", value)

    @_builtins.property
    @pulumi.getter(name="privateServiceEndpoint")
    def private_service_endpoint(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "private_service_endpoint")

    @private_service_endpoint.setter
    def private_service_endpoint(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "private_service_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="privateServiceEndpointUrl")
    def private_service_endpoint_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "private_service_endpoint_url")

    @private_service_endpoint_url.setter
    def private_service_endpoint_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_service_endpoint_url", value)

    @_builtins.property
    @pulumi.getter(name="privateVlanId")
    def private_vlan_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Private VLAN ID
        """
        return pulumi.get(self, "private_vlan_id")

    @private_vlan_id.setter
    def private_vlan_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_vlan_id", value)

    @_builtins.property
    @pulumi.getter(name="publicServiceEndpoint")
    def public_service_endpoint(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "public_service_endpoint")

    @public_service_endpoint.setter
    def public_service_endpoint(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "public_service_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="publicServiceEndpointUrl")
    def public_service_endpoint_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "public_service_endpoint_url")

    @public_service_endpoint_url.setter
    def public_service_endpoint_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_service_endpoint_url", value)

    @_builtins.property
    @pulumi.getter(name="publicVlanId")
    def public_vlan_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Public VLAN ID
        """
        return pulumi.get(self, "public_vlan_id")

    @public_vlan_id.setter
    def public_vlan_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_vlan_id", value)

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cluster region
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL of the IBM Cloud dashboard that can be used to explore and view details about this cluster
        """
        return pulumi.get(self, "resource_controller_url")

    @resource_controller_url.setter
    def resource_controller_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_controller_url", value)

    @_builtins.property
    @pulumi.getter(name="resourceCrn")
    def resource_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The crn of the resource
        """
        return pulumi.get(self, "resource_crn")

    @resource_crn.setter
    def resource_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_crn", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource group name in which resource is provisioned
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_name", value)

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_name", value)

    @_builtins.property
    @pulumi.getter(name="resourceStatus")
    def resource_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the resource
        """
        return pulumi.get(self, "resource_status")

    @resource_status.setter
    def resource_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_status", value)

    @_builtins.property
    @pulumi.getter(name="retryPatchVersion")
    def retry_patch_version(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Argument which helps to retry the patch version updates on worker nodes. Increment the value to retry the patch updates
        if the previous apply fails
        """
        return pulumi.get(self, "retry_patch_version")

    @retry_patch_version.setter
    def retry_patch_version(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "retry_patch_version", value)

    @_builtins.property
    @pulumi.getter(name="serverUrl")
    def server_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "server_url")

    @server_url.setter
    def server_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "server_url", value)

    @_builtins.property
    @pulumi.getter(name="serviceSubnet")
    def service_subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Custom subnet CIDR to provide private IP addresses for services
        """
        return pulumi.get(self, "service_subnet")

    @service_subnet.setter
    def service_subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_subnet", value)

    @_builtins.property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of subnet IDs
        """
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "subnet_ids", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Tags for the resource
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerClusterTaintArgs']]]]:
        """
        WorkerPool Taints
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerClusterTaintArgs']]]]):
        pulumi.set(self, "taints", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ContainerClusterTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ContainerClusterTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="updateAllWorkers")
    def update_all_workers(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Updates all the woker nodes if sets to true
        """
        return pulumi.get(self, "update_all_workers")

    @update_all_workers.setter
    def update_all_workers(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "update_all_workers", value)

    @_builtins.property
    @pulumi.getter(name="waitForWorkerUpdate")
    def wait_for_worker_update(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Wait for worker node to update during kube version update.
        """
        return pulumi.get(self, "wait_for_worker_update")

    @wait_for_worker_update.setter
    def wait_for_worker_update(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "wait_for_worker_update", value)

    @_builtins.property
    @pulumi.getter(name="waitTill")
    def wait_till(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        wait_till can be configured for Master Ready, One worker Ready, Ingress Ready or Normal
        """
        return pulumi.get(self, "wait_till")

    @wait_till.setter
    def wait_till(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "wait_till", value)

    @_builtins.property
    @pulumi.getter
    def webhooks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerClusterWebhookArgs']]]]:
        return pulumi.get(self, "webhooks")

    @webhooks.setter
    def webhooks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerClusterWebhookArgs']]]]):
        pulumi.set(self, "webhooks", value)

    @_builtins.property
    @pulumi.getter(name="workerPools")
    def worker_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerClusterWorkerPoolArgs']]]]:
        return pulumi.get(self, "worker_pools")

    @worker_pools.setter
    def worker_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerClusterWorkerPoolArgs']]]]):
        pulumi.set(self, "worker_pools", value)

    @_builtins.property
    @pulumi.getter(name="workersInfos")
    def workers_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerClusterWorkersInfoArgs']]]]:
        """
        The IDs of the worker node
        """
        return pulumi.get(self, "workers_infos")

    @workers_infos.setter
    def workers_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerClusterWorkersInfoArgs']]]]):
        pulumi.set(self, "workers_infos", value)


@pulumi.type_token("ibm:index/containerCluster:ContainerCluster")
class ContainerCluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 container_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 default_pool_size: Optional[pulumi.Input[_builtins.float]] = None,
                 disk_encryption: Optional[pulumi.Input[_builtins.bool]] = None,
                 entitlement: Optional[pulumi.Input[_builtins.str]] = None,
                 force_delete_storage: Optional[pulumi.Input[_builtins.bool]] = None,
                 gateway_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 hardware: Optional[pulumi.Input[_builtins.str]] = None,
                 image_security_enforcement: Optional[pulumi.Input[_builtins.bool]] = None,
                 kms_config: Optional[pulumi.Input[Union['ContainerClusterKmsConfigArgs', 'ContainerClusterKmsConfigArgsDict']]] = None,
                 kube_version: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 machine_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 no_subnet: Optional[pulumi.Input[_builtins.bool]] = None,
                 operating_system: Optional[pulumi.Input[_builtins.str]] = None,
                 patch_version: Optional[pulumi.Input[_builtins.str]] = None,
                 pod_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 private_service_endpoint: Optional[pulumi.Input[_builtins.bool]] = None,
                 private_vlan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 public_service_endpoint: Optional[pulumi.Input[_builtins.bool]] = None,
                 public_vlan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 retry_patch_version: Optional[pulumi.Input[_builtins.float]] = None,
                 service_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerClusterTaintArgs', 'ContainerClusterTaintArgsDict']]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['ContainerClusterTimeoutsArgs', 'ContainerClusterTimeoutsArgsDict']]] = None,
                 update_all_workers: Optional[pulumi.Input[_builtins.bool]] = None,
                 wait_for_worker_update: Optional[pulumi.Input[_builtins.bool]] = None,
                 wait_till: Optional[pulumi.Input[_builtins.str]] = None,
                 webhooks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerClusterWebhookArgs', 'ContainerClusterWebhookArgsDict']]]]] = None,
                 workers_infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerClusterWorkersInfoArgs', 'ContainerClusterWorkersInfoArgsDict']]]]] = None,
                 __props__=None):
        """
        Create a ContainerCluster resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] datacenter: The datacenter where this cluster will be deployed
        :param pulumi.Input[_builtins.float] default_pool_size: The size of the default worker pool
        :param pulumi.Input[_builtins.bool] disk_encryption: disc encryption done, if set to true.
        :param pulumi.Input[_builtins.str] entitlement: Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        :param pulumi.Input[_builtins.bool] force_delete_storage: Force the removal of a cluster and its persistent storage. Deleted data cannot be recovered
        :param pulumi.Input[_builtins.bool] gateway_enabled: Set true for gateway enabled clusters
        :param pulumi.Input[_builtins.str] hardware: Hardware type
        :param pulumi.Input[_builtins.bool] image_security_enforcement: Set true to enable image security enforcement policies
        :param pulumi.Input[Union['ContainerClusterKmsConfigArgs', 'ContainerClusterKmsConfigArgsDict']] kms_config: Enables KMS on a given cluster
        :param pulumi.Input[_builtins.str] kube_version: Kubernetes version info
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: list of labels to the default worker pool
        :param pulumi.Input[_builtins.str] machine_type: Machine type
        :param pulumi.Input[_builtins.str] name: The cluster name
        :param pulumi.Input[_builtins.bool] no_subnet: Boolean value set to true when subnet creation is not required.
        :param pulumi.Input[_builtins.str] operating_system: The operating system of the workers in the default worker pool.
        :param pulumi.Input[_builtins.str] patch_version: Kubernetes patch version
        :param pulumi.Input[_builtins.str] pod_subnet: Custom subnet CIDR to provide private IP addresses for pods
        :param pulumi.Input[_builtins.str] private_vlan_id: Private VLAN ID
        :param pulumi.Input[_builtins.str] public_vlan_id: Public VLAN ID
        :param pulumi.Input[_builtins.str] region: The cluster region
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.float] retry_patch_version: Argument which helps to retry the patch version updates on worker nodes. Increment the value to retry the patch updates
               if the previous apply fails
        :param pulumi.Input[_builtins.str] service_subnet: Custom subnet CIDR to provide private IP addresses for services
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] subnet_ids: List of subnet IDs
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags for the resource
        :param pulumi.Input[Sequence[pulumi.Input[Union['ContainerClusterTaintArgs', 'ContainerClusterTaintArgsDict']]]] taints: WorkerPool Taints
        :param pulumi.Input[_builtins.bool] update_all_workers: Updates all the woker nodes if sets to true
        :param pulumi.Input[_builtins.bool] wait_for_worker_update: Wait for worker node to update during kube version update.
        :param pulumi.Input[_builtins.str] wait_till: wait_till can be configured for Master Ready, One worker Ready, Ingress Ready or Normal
        :param pulumi.Input[Sequence[pulumi.Input[Union['ContainerClusterWorkersInfoArgs', 'ContainerClusterWorkersInfoArgsDict']]]] workers_infos: The IDs of the worker node
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ContainerClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ContainerCluster resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ContainerClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ContainerClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 container_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 default_pool_size: Optional[pulumi.Input[_builtins.float]] = None,
                 disk_encryption: Optional[pulumi.Input[_builtins.bool]] = None,
                 entitlement: Optional[pulumi.Input[_builtins.str]] = None,
                 force_delete_storage: Optional[pulumi.Input[_builtins.bool]] = None,
                 gateway_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 hardware: Optional[pulumi.Input[_builtins.str]] = None,
                 image_security_enforcement: Optional[pulumi.Input[_builtins.bool]] = None,
                 kms_config: Optional[pulumi.Input[Union['ContainerClusterKmsConfigArgs', 'ContainerClusterKmsConfigArgsDict']]] = None,
                 kube_version: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 machine_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 no_subnet: Optional[pulumi.Input[_builtins.bool]] = None,
                 operating_system: Optional[pulumi.Input[_builtins.str]] = None,
                 patch_version: Optional[pulumi.Input[_builtins.str]] = None,
                 pod_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 private_service_endpoint: Optional[pulumi.Input[_builtins.bool]] = None,
                 private_vlan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 public_service_endpoint: Optional[pulumi.Input[_builtins.bool]] = None,
                 public_vlan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 retry_patch_version: Optional[pulumi.Input[_builtins.float]] = None,
                 service_subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerClusterTaintArgs', 'ContainerClusterTaintArgsDict']]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['ContainerClusterTimeoutsArgs', 'ContainerClusterTimeoutsArgsDict']]] = None,
                 update_all_workers: Optional[pulumi.Input[_builtins.bool]] = None,
                 wait_for_worker_update: Optional[pulumi.Input[_builtins.bool]] = None,
                 wait_till: Optional[pulumi.Input[_builtins.str]] = None,
                 webhooks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerClusterWebhookArgs', 'ContainerClusterWebhookArgsDict']]]]] = None,
                 workers_infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerClusterWorkersInfoArgs', 'ContainerClusterWorkersInfoArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ContainerClusterArgs.__new__(ContainerClusterArgs)

            __props__.__dict__["container_cluster_id"] = container_cluster_id
            if datacenter is None and not opts.urn:
                raise TypeError("Missing required property 'datacenter'")
            __props__.__dict__["datacenter"] = datacenter
            __props__.__dict__["default_pool_size"] = default_pool_size
            __props__.__dict__["disk_encryption"] = disk_encryption
            __props__.__dict__["entitlement"] = entitlement
            __props__.__dict__["force_delete_storage"] = force_delete_storage
            __props__.__dict__["gateway_enabled"] = gateway_enabled
            if hardware is None and not opts.urn:
                raise TypeError("Missing required property 'hardware'")
            __props__.__dict__["hardware"] = hardware
            __props__.__dict__["image_security_enforcement"] = image_security_enforcement
            __props__.__dict__["kms_config"] = kms_config
            __props__.__dict__["kube_version"] = kube_version
            __props__.__dict__["labels"] = labels
            __props__.__dict__["machine_type"] = machine_type
            __props__.__dict__["name"] = name
            __props__.__dict__["no_subnet"] = no_subnet
            __props__.__dict__["operating_system"] = operating_system
            __props__.__dict__["patch_version"] = patch_version
            __props__.__dict__["pod_subnet"] = pod_subnet
            __props__.__dict__["private_service_endpoint"] = private_service_endpoint
            __props__.__dict__["private_vlan_id"] = private_vlan_id
            __props__.__dict__["public_service_endpoint"] = public_service_endpoint
            __props__.__dict__["public_vlan_id"] = public_vlan_id
            __props__.__dict__["region"] = region
            __props__.__dict__["resource_group_id"] = resource_group_id
            __props__.__dict__["retry_patch_version"] = retry_patch_version
            __props__.__dict__["service_subnet"] = service_subnet
            __props__.__dict__["subnet_ids"] = subnet_ids
            __props__.__dict__["tags"] = tags
            __props__.__dict__["taints"] = taints
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["update_all_workers"] = update_all_workers
            __props__.__dict__["wait_for_worker_update"] = wait_for_worker_update
            __props__.__dict__["wait_till"] = wait_till
            __props__.__dict__["webhooks"] = webhooks
            __props__.__dict__["workers_infos"] = workers_infos
            __props__.__dict__["albs"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["ingress_hostname"] = None
            __props__.__dict__["ingress_secret"] = None
            __props__.__dict__["private_service_endpoint_url"] = None
            __props__.__dict__["public_service_endpoint_url"] = None
            __props__.__dict__["resource_controller_url"] = None
            __props__.__dict__["resource_crn"] = None
            __props__.__dict__["resource_group_name"] = None
            __props__.__dict__["resource_name"] = None
            __props__.__dict__["resource_status"] = None
            __props__.__dict__["server_url"] = None
            __props__.__dict__["worker_pools"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["ingressSecret"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ContainerCluster, __self__).__init__(
            'ibm:index/containerCluster:ContainerCluster',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            albs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerClusterAlbArgs', 'ContainerClusterAlbArgsDict']]]]] = None,
            container_cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            datacenter: Optional[pulumi.Input[_builtins.str]] = None,
            default_pool_size: Optional[pulumi.Input[_builtins.float]] = None,
            disk_encryption: Optional[pulumi.Input[_builtins.bool]] = None,
            entitlement: Optional[pulumi.Input[_builtins.str]] = None,
            force_delete_storage: Optional[pulumi.Input[_builtins.bool]] = None,
            gateway_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            hardware: Optional[pulumi.Input[_builtins.str]] = None,
            image_security_enforcement: Optional[pulumi.Input[_builtins.bool]] = None,
            ingress_hostname: Optional[pulumi.Input[_builtins.str]] = None,
            ingress_secret: Optional[pulumi.Input[_builtins.str]] = None,
            kms_config: Optional[pulumi.Input[Union['ContainerClusterKmsConfigArgs', 'ContainerClusterKmsConfigArgsDict']]] = None,
            kube_version: Optional[pulumi.Input[_builtins.str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            machine_type: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            no_subnet: Optional[pulumi.Input[_builtins.bool]] = None,
            operating_system: Optional[pulumi.Input[_builtins.str]] = None,
            patch_version: Optional[pulumi.Input[_builtins.str]] = None,
            pod_subnet: Optional[pulumi.Input[_builtins.str]] = None,
            private_service_endpoint: Optional[pulumi.Input[_builtins.bool]] = None,
            private_service_endpoint_url: Optional[pulumi.Input[_builtins.str]] = None,
            private_vlan_id: Optional[pulumi.Input[_builtins.str]] = None,
            public_service_endpoint: Optional[pulumi.Input[_builtins.bool]] = None,
            public_service_endpoint_url: Optional[pulumi.Input[_builtins.str]] = None,
            public_vlan_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            resource_controller_url: Optional[pulumi.Input[_builtins.str]] = None,
            resource_crn: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_name: Optional[pulumi.Input[_builtins.str]] = None,
            resource_name_: Optional[pulumi.Input[_builtins.str]] = None,
            resource_status: Optional[pulumi.Input[_builtins.str]] = None,
            retry_patch_version: Optional[pulumi.Input[_builtins.float]] = None,
            server_url: Optional[pulumi.Input[_builtins.str]] = None,
            service_subnet: Optional[pulumi.Input[_builtins.str]] = None,
            subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            taints: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerClusterTaintArgs', 'ContainerClusterTaintArgsDict']]]]] = None,
            timeouts: Optional[pulumi.Input[Union['ContainerClusterTimeoutsArgs', 'ContainerClusterTimeoutsArgsDict']]] = None,
            update_all_workers: Optional[pulumi.Input[_builtins.bool]] = None,
            wait_for_worker_update: Optional[pulumi.Input[_builtins.bool]] = None,
            wait_till: Optional[pulumi.Input[_builtins.str]] = None,
            webhooks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerClusterWebhookArgs', 'ContainerClusterWebhookArgsDict']]]]] = None,
            worker_pools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerClusterWorkerPoolArgs', 'ContainerClusterWorkerPoolArgsDict']]]]] = None,
            workers_infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerClusterWorkersInfoArgs', 'ContainerClusterWorkersInfoArgsDict']]]]] = None) -> 'ContainerCluster':
        """
        Get an existing ContainerCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] crn: CRN of resource instance
        :param pulumi.Input[_builtins.str] datacenter: The datacenter where this cluster will be deployed
        :param pulumi.Input[_builtins.float] default_pool_size: The size of the default worker pool
        :param pulumi.Input[_builtins.bool] disk_encryption: disc encryption done, if set to true.
        :param pulumi.Input[_builtins.str] entitlement: Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        :param pulumi.Input[_builtins.bool] force_delete_storage: Force the removal of a cluster and its persistent storage. Deleted data cannot be recovered
        :param pulumi.Input[_builtins.bool] gateway_enabled: Set true for gateway enabled clusters
        :param pulumi.Input[_builtins.str] hardware: Hardware type
        :param pulumi.Input[_builtins.bool] image_security_enforcement: Set true to enable image security enforcement policies
        :param pulumi.Input[Union['ContainerClusterKmsConfigArgs', 'ContainerClusterKmsConfigArgsDict']] kms_config: Enables KMS on a given cluster
        :param pulumi.Input[_builtins.str] kube_version: Kubernetes version info
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: list of labels to the default worker pool
        :param pulumi.Input[_builtins.str] machine_type: Machine type
        :param pulumi.Input[_builtins.str] name: The cluster name
        :param pulumi.Input[_builtins.bool] no_subnet: Boolean value set to true when subnet creation is not required.
        :param pulumi.Input[_builtins.str] operating_system: The operating system of the workers in the default worker pool.
        :param pulumi.Input[_builtins.str] patch_version: Kubernetes patch version
        :param pulumi.Input[_builtins.str] pod_subnet: Custom subnet CIDR to provide private IP addresses for pods
        :param pulumi.Input[_builtins.str] private_vlan_id: Private VLAN ID
        :param pulumi.Input[_builtins.str] public_vlan_id: Public VLAN ID
        :param pulumi.Input[_builtins.str] region: The cluster region
        :param pulumi.Input[_builtins.str] resource_controller_url: The URL of the IBM Cloud dashboard that can be used to explore and view details about this cluster
        :param pulumi.Input[_builtins.str] resource_crn: The crn of the resource
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.str] resource_group_name: The resource group name in which resource is provisioned
        :param pulumi.Input[_builtins.str] resource_name_: The name of the resource
        :param pulumi.Input[_builtins.str] resource_status: The status of the resource
        :param pulumi.Input[_builtins.float] retry_patch_version: Argument which helps to retry the patch version updates on worker nodes. Increment the value to retry the patch updates
               if the previous apply fails
        :param pulumi.Input[_builtins.str] service_subnet: Custom subnet CIDR to provide private IP addresses for services
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] subnet_ids: List of subnet IDs
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags for the resource
        :param pulumi.Input[Sequence[pulumi.Input[Union['ContainerClusterTaintArgs', 'ContainerClusterTaintArgsDict']]]] taints: WorkerPool Taints
        :param pulumi.Input[_builtins.bool] update_all_workers: Updates all the woker nodes if sets to true
        :param pulumi.Input[_builtins.bool] wait_for_worker_update: Wait for worker node to update during kube version update.
        :param pulumi.Input[_builtins.str] wait_till: wait_till can be configured for Master Ready, One worker Ready, Ingress Ready or Normal
        :param pulumi.Input[Sequence[pulumi.Input[Union['ContainerClusterWorkersInfoArgs', 'ContainerClusterWorkersInfoArgsDict']]]] workers_infos: The IDs of the worker node
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ContainerClusterState.__new__(_ContainerClusterState)

        __props__.__dict__["albs"] = albs
        __props__.__dict__["container_cluster_id"] = container_cluster_id
        __props__.__dict__["crn"] = crn
        __props__.__dict__["datacenter"] = datacenter
        __props__.__dict__["default_pool_size"] = default_pool_size
        __props__.__dict__["disk_encryption"] = disk_encryption
        __props__.__dict__["entitlement"] = entitlement
        __props__.__dict__["force_delete_storage"] = force_delete_storage
        __props__.__dict__["gateway_enabled"] = gateway_enabled
        __props__.__dict__["hardware"] = hardware
        __props__.__dict__["image_security_enforcement"] = image_security_enforcement
        __props__.__dict__["ingress_hostname"] = ingress_hostname
        __props__.__dict__["ingress_secret"] = ingress_secret
        __props__.__dict__["kms_config"] = kms_config
        __props__.__dict__["kube_version"] = kube_version
        __props__.__dict__["labels"] = labels
        __props__.__dict__["machine_type"] = machine_type
        __props__.__dict__["name"] = name
        __props__.__dict__["no_subnet"] = no_subnet
        __props__.__dict__["operating_system"] = operating_system
        __props__.__dict__["patch_version"] = patch_version
        __props__.__dict__["pod_subnet"] = pod_subnet
        __props__.__dict__["private_service_endpoint"] = private_service_endpoint
        __props__.__dict__["private_service_endpoint_url"] = private_service_endpoint_url
        __props__.__dict__["private_vlan_id"] = private_vlan_id
        __props__.__dict__["public_service_endpoint"] = public_service_endpoint
        __props__.__dict__["public_service_endpoint_url"] = public_service_endpoint_url
        __props__.__dict__["public_vlan_id"] = public_vlan_id
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_controller_url"] = resource_controller_url
        __props__.__dict__["resource_crn"] = resource_crn
        __props__.__dict__["resource_group_id"] = resource_group_id
        __props__.__dict__["resource_group_name"] = resource_group_name
        __props__.__dict__["resource_name"] = resource_name_
        __props__.__dict__["resource_status"] = resource_status
        __props__.__dict__["retry_patch_version"] = retry_patch_version
        __props__.__dict__["server_url"] = server_url
        __props__.__dict__["service_subnet"] = service_subnet
        __props__.__dict__["subnet_ids"] = subnet_ids
        __props__.__dict__["tags"] = tags
        __props__.__dict__["taints"] = taints
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["update_all_workers"] = update_all_workers
        __props__.__dict__["wait_for_worker_update"] = wait_for_worker_update
        __props__.__dict__["wait_till"] = wait_till
        __props__.__dict__["webhooks"] = webhooks
        __props__.__dict__["worker_pools"] = worker_pools
        __props__.__dict__["workers_infos"] = workers_infos
        return ContainerCluster(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def albs(self) -> pulumi.Output[Sequence['outputs.ContainerClusterAlb']]:
        return pulumi.get(self, "albs")

    @_builtins.property
    @pulumi.getter(name="containerClusterId")
    def container_cluster_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "container_cluster_id")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        CRN of resource instance
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> pulumi.Output[_builtins.str]:
        """
        The datacenter where this cluster will be deployed
        """
        return pulumi.get(self, "datacenter")

    @_builtins.property
    @pulumi.getter(name="defaultPoolSize")
    def default_pool_size(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        The size of the default worker pool
        """
        return pulumi.get(self, "default_pool_size")

    @_builtins.property
    @pulumi.getter(name="diskEncryption")
    def disk_encryption(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        disc encryption done, if set to true.
        """
        return pulumi.get(self, "disk_encryption")

    @_builtins.property
    @pulumi.getter
    def entitlement(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        """
        return pulumi.get(self, "entitlement")

    @_builtins.property
    @pulumi.getter(name="forceDeleteStorage")
    def force_delete_storage(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Force the removal of a cluster and its persistent storage. Deleted data cannot be recovered
        """
        return pulumi.get(self, "force_delete_storage")

    @_builtins.property
    @pulumi.getter(name="gatewayEnabled")
    def gateway_enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Set true for gateway enabled clusters
        """
        return pulumi.get(self, "gateway_enabled")

    @_builtins.property
    @pulumi.getter
    def hardware(self) -> pulumi.Output[_builtins.str]:
        """
        Hardware type
        """
        return pulumi.get(self, "hardware")

    @_builtins.property
    @pulumi.getter(name="imageSecurityEnforcement")
    def image_security_enforcement(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Set true to enable image security enforcement policies
        """
        return pulumi.get(self, "image_security_enforcement")

    @_builtins.property
    @pulumi.getter(name="ingressHostname")
    def ingress_hostname(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "ingress_hostname")

    @_builtins.property
    @pulumi.getter(name="ingressSecret")
    def ingress_secret(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "ingress_secret")

    @_builtins.property
    @pulumi.getter(name="kmsConfig")
    def kms_config(self) -> pulumi.Output[Optional['outputs.ContainerClusterKmsConfig']]:
        """
        Enables KMS on a given cluster
        """
        return pulumi.get(self, "kms_config")

    @_builtins.property
    @pulumi.getter(name="kubeVersion")
    def kube_version(self) -> pulumi.Output[_builtins.str]:
        """
        Kubernetes version info
        """
        return pulumi.get(self, "kube_version")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        list of labels to the default worker pool
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Machine type
        """
        return pulumi.get(self, "machine_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The cluster name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="noSubnet")
    def no_subnet(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Boolean value set to true when subnet creation is not required.
        """
        return pulumi.get(self, "no_subnet")

    @_builtins.property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> pulumi.Output[_builtins.str]:
        """
        The operating system of the workers in the default worker pool.
        """
        return pulumi.get(self, "operating_system")

    @_builtins.property
    @pulumi.getter(name="patchVersion")
    def patch_version(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Kubernetes patch version
        """
        return pulumi.get(self, "patch_version")

    @_builtins.property
    @pulumi.getter(name="podSubnet")
    def pod_subnet(self) -> pulumi.Output[_builtins.str]:
        """
        Custom subnet CIDR to provide private IP addresses for pods
        """
        return pulumi.get(self, "pod_subnet")

    @_builtins.property
    @pulumi.getter(name="privateServiceEndpoint")
    def private_service_endpoint(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "private_service_endpoint")

    @_builtins.property
    @pulumi.getter(name="privateServiceEndpointUrl")
    def private_service_endpoint_url(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "private_service_endpoint_url")

    @_builtins.property
    @pulumi.getter(name="privateVlanId")
    def private_vlan_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Private VLAN ID
        """
        return pulumi.get(self, "private_vlan_id")

    @_builtins.property
    @pulumi.getter(name="publicServiceEndpoint")
    def public_service_endpoint(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "public_service_endpoint")

    @_builtins.property
    @pulumi.getter(name="publicServiceEndpointUrl")
    def public_service_endpoint_url(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "public_service_endpoint_url")

    @_builtins.property
    @pulumi.getter(name="publicVlanId")
    def public_vlan_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Public VLAN ID
        """
        return pulumi.get(self, "public_vlan_id")

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The cluster region
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> pulumi.Output[_builtins.str]:
        """
        The URL of the IBM Cloud dashboard that can be used to explore and view details about this cluster
        """
        return pulumi.get(self, "resource_controller_url")

    @_builtins.property
    @pulumi.getter(name="resourceCrn")
    def resource_crn(self) -> pulumi.Output[_builtins.str]:
        """
        The crn of the resource
        """
        return pulumi.get(self, "resource_crn")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Output[_builtins.str]:
        """
        The resource group name in which resource is provisioned
        """
        return pulumi.get(self, "resource_group_name")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceStatus")
    def resource_status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the resource
        """
        return pulumi.get(self, "resource_status")

    @_builtins.property
    @pulumi.getter(name="retryPatchVersion")
    def retry_patch_version(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Argument which helps to retry the patch version updates on worker nodes. Increment the value to retry the patch updates
        if the previous apply fails
        """
        return pulumi.get(self, "retry_patch_version")

    @_builtins.property
    @pulumi.getter(name="serverUrl")
    def server_url(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "server_url")

    @_builtins.property
    @pulumi.getter(name="serviceSubnet")
    def service_subnet(self) -> pulumi.Output[_builtins.str]:
        """
        Custom subnet CIDR to provide private IP addresses for services
        """
        return pulumi.get(self, "service_subnet")

    @_builtins.property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of subnet IDs
        """
        return pulumi.get(self, "subnet_ids")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Tags for the resource
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def taints(self) -> pulumi.Output[Optional[Sequence['outputs.ContainerClusterTaint']]]:
        """
        WorkerPool Taints
        """
        return pulumi.get(self, "taints")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.ContainerClusterTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter(name="updateAllWorkers")
    def update_all_workers(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Updates all the woker nodes if sets to true
        """
        return pulumi.get(self, "update_all_workers")

    @_builtins.property
    @pulumi.getter(name="waitForWorkerUpdate")
    def wait_for_worker_update(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Wait for worker node to update during kube version update.
        """
        return pulumi.get(self, "wait_for_worker_update")

    @_builtins.property
    @pulumi.getter(name="waitTill")
    def wait_till(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        wait_till can be configured for Master Ready, One worker Ready, Ingress Ready or Normal
        """
        return pulumi.get(self, "wait_till")

    @_builtins.property
    @pulumi.getter
    def webhooks(self) -> pulumi.Output[Optional[Sequence['outputs.ContainerClusterWebhook']]]:
        return pulumi.get(self, "webhooks")

    @_builtins.property
    @pulumi.getter(name="workerPools")
    def worker_pools(self) -> pulumi.Output[Sequence['outputs.ContainerClusterWorkerPool']]:
        return pulumi.get(self, "worker_pools")

    @_builtins.property
    @pulumi.getter(name="workersInfos")
    def workers_infos(self) -> pulumi.Output[Optional[Sequence['outputs.ContainerClusterWorkersInfo']]]:
        """
        The IDs of the worker node
        """
        return pulumi.get(self, "workers_infos")

