# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsVpnGatewayConnectionResult',
    'AwaitableGetIsVpnGatewayConnectionResult',
    'get_is_vpn_gateway_connection',
    'get_is_vpn_gateway_connection_output',
]

@pulumi.output_type
class GetIsVpnGatewayConnectionResult:
    """
    A collection of values returned by getIsVpnGatewayConnection.
    """
    def __init__(__self__, admin_state_up=None, authentication_mode=None, created_at=None, dead_peer_detections=None, distribute_traffic=None, establish_mode=None, href=None, id=None, ike_policies=None, ipsec_policies=None, local_cidrs=None, locals=None, mode=None, name=None, peer_address=None, peer_cidrs=None, peers=None, psk=None, resource_type=None, routing_protocol=None, status=None, status_reasons=None, tunnels=None, vpn_gateway=None, vpn_gateway_connection=None, vpn_gateway_connection_name=None, vpn_gateway_name=None):
        if admin_state_up and not isinstance(admin_state_up, bool):
            raise TypeError("Expected argument 'admin_state_up' to be a bool")
        pulumi.set(__self__, "admin_state_up", admin_state_up)
        if authentication_mode and not isinstance(authentication_mode, str):
            raise TypeError("Expected argument 'authentication_mode' to be a str")
        pulumi.set(__self__, "authentication_mode", authentication_mode)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if dead_peer_detections and not isinstance(dead_peer_detections, list):
            raise TypeError("Expected argument 'dead_peer_detections' to be a list")
        pulumi.set(__self__, "dead_peer_detections", dead_peer_detections)
        if distribute_traffic and not isinstance(distribute_traffic, bool):
            raise TypeError("Expected argument 'distribute_traffic' to be a bool")
        pulumi.set(__self__, "distribute_traffic", distribute_traffic)
        if establish_mode and not isinstance(establish_mode, str):
            raise TypeError("Expected argument 'establish_mode' to be a str")
        pulumi.set(__self__, "establish_mode", establish_mode)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ike_policies and not isinstance(ike_policies, list):
            raise TypeError("Expected argument 'ike_policies' to be a list")
        pulumi.set(__self__, "ike_policies", ike_policies)
        if ipsec_policies and not isinstance(ipsec_policies, list):
            raise TypeError("Expected argument 'ipsec_policies' to be a list")
        pulumi.set(__self__, "ipsec_policies", ipsec_policies)
        if local_cidrs and not isinstance(local_cidrs, list):
            raise TypeError("Expected argument 'local_cidrs' to be a list")
        pulumi.set(__self__, "local_cidrs", local_cidrs)
        if locals and not isinstance(locals, list):
            raise TypeError("Expected argument 'locals' to be a list")
        pulumi.set(__self__, "locals", locals)
        if mode and not isinstance(mode, str):
            raise TypeError("Expected argument 'mode' to be a str")
        pulumi.set(__self__, "mode", mode)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if peer_address and not isinstance(peer_address, str):
            raise TypeError("Expected argument 'peer_address' to be a str")
        pulumi.set(__self__, "peer_address", peer_address)
        if peer_cidrs and not isinstance(peer_cidrs, list):
            raise TypeError("Expected argument 'peer_cidrs' to be a list")
        pulumi.set(__self__, "peer_cidrs", peer_cidrs)
        if peers and not isinstance(peers, list):
            raise TypeError("Expected argument 'peers' to be a list")
        pulumi.set(__self__, "peers", peers)
        if psk and not isinstance(psk, str):
            raise TypeError("Expected argument 'psk' to be a str")
        pulumi.set(__self__, "psk", psk)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if routing_protocol and not isinstance(routing_protocol, str):
            raise TypeError("Expected argument 'routing_protocol' to be a str")
        pulumi.set(__self__, "routing_protocol", routing_protocol)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if status_reasons and not isinstance(status_reasons, list):
            raise TypeError("Expected argument 'status_reasons' to be a list")
        pulumi.set(__self__, "status_reasons", status_reasons)
        if tunnels and not isinstance(tunnels, list):
            raise TypeError("Expected argument 'tunnels' to be a list")
        pulumi.set(__self__, "tunnels", tunnels)
        if vpn_gateway and not isinstance(vpn_gateway, str):
            raise TypeError("Expected argument 'vpn_gateway' to be a str")
        pulumi.set(__self__, "vpn_gateway", vpn_gateway)
        if vpn_gateway_connection and not isinstance(vpn_gateway_connection, str):
            raise TypeError("Expected argument 'vpn_gateway_connection' to be a str")
        pulumi.set(__self__, "vpn_gateway_connection", vpn_gateway_connection)
        if vpn_gateway_connection_name and not isinstance(vpn_gateway_connection_name, str):
            raise TypeError("Expected argument 'vpn_gateway_connection_name' to be a str")
        pulumi.set(__self__, "vpn_gateway_connection_name", vpn_gateway_connection_name)
        if vpn_gateway_name and not isinstance(vpn_gateway_name, str):
            raise TypeError("Expected argument 'vpn_gateway_name' to be a str")
        pulumi.set(__self__, "vpn_gateway_name", vpn_gateway_name)

    @_builtins.property
    @pulumi.getter(name="adminStateUp")
    def admin_state_up(self) -> _builtins.bool:
        return pulumi.get(self, "admin_state_up")

    @_builtins.property
    @pulumi.getter(name="authenticationMode")
    def authentication_mode(self) -> _builtins.str:
        return pulumi.get(self, "authentication_mode")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="deadPeerDetections")
    def dead_peer_detections(self) -> Sequence['outputs.GetIsVpnGatewayConnectionDeadPeerDetectionResult']:
        return pulumi.get(self, "dead_peer_detections")

    @_builtins.property
    @pulumi.getter(name="distributeTraffic")
    def distribute_traffic(self) -> _builtins.bool:
        return pulumi.get(self, "distribute_traffic")

    @_builtins.property
    @pulumi.getter(name="establishMode")
    def establish_mode(self) -> _builtins.str:
        return pulumi.get(self, "establish_mode")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ikePolicies")
    def ike_policies(self) -> Sequence['outputs.GetIsVpnGatewayConnectionIkePolicyResult']:
        return pulumi.get(self, "ike_policies")

    @_builtins.property
    @pulumi.getter(name="ipsecPolicies")
    def ipsec_policies(self) -> Sequence['outputs.GetIsVpnGatewayConnectionIpsecPolicyResult']:
        return pulumi.get(self, "ipsec_policies")

    @_builtins.property
    @pulumi.getter(name="localCidrs")
    @_utilities.deprecated("""Deprecated""")
    def local_cidrs(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "local_cidrs")

    @_builtins.property
    @pulumi.getter
    def locals(self) -> Sequence['outputs.GetIsVpnGatewayConnectionLocalResult']:
        return pulumi.get(self, "locals")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> _builtins.str:
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="peerAddress")
    @_utilities.deprecated("""Deprecated""")
    def peer_address(self) -> _builtins.str:
        return pulumi.get(self, "peer_address")

    @_builtins.property
    @pulumi.getter(name="peerCidrs")
    @_utilities.deprecated("""Deprecated""")
    def peer_cidrs(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "peer_cidrs")

    @_builtins.property
    @pulumi.getter
    def peers(self) -> Sequence['outputs.GetIsVpnGatewayConnectionPeerResult']:
        return pulumi.get(self, "peers")

    @_builtins.property
    @pulumi.getter
    def psk(self) -> _builtins.str:
        return pulumi.get(self, "psk")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="routingProtocol")
    def routing_protocol(self) -> _builtins.str:
        return pulumi.get(self, "routing_protocol")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> Sequence['outputs.GetIsVpnGatewayConnectionStatusReasonResult']:
        return pulumi.get(self, "status_reasons")

    @_builtins.property
    @pulumi.getter
    def tunnels(self) -> Sequence['outputs.GetIsVpnGatewayConnectionTunnelResult']:
        return pulumi.get(self, "tunnels")

    @_builtins.property
    @pulumi.getter(name="vpnGateway")
    def vpn_gateway(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vpn_gateway")

    @_builtins.property
    @pulumi.getter(name="vpnGatewayConnection")
    def vpn_gateway_connection(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vpn_gateway_connection")

    @_builtins.property
    @pulumi.getter(name="vpnGatewayConnectionName")
    def vpn_gateway_connection_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vpn_gateway_connection_name")

    @_builtins.property
    @pulumi.getter(name="vpnGatewayName")
    def vpn_gateway_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vpn_gateway_name")


class AwaitableGetIsVpnGatewayConnectionResult(GetIsVpnGatewayConnectionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsVpnGatewayConnectionResult(
            admin_state_up=self.admin_state_up,
            authentication_mode=self.authentication_mode,
            created_at=self.created_at,
            dead_peer_detections=self.dead_peer_detections,
            distribute_traffic=self.distribute_traffic,
            establish_mode=self.establish_mode,
            href=self.href,
            id=self.id,
            ike_policies=self.ike_policies,
            ipsec_policies=self.ipsec_policies,
            local_cidrs=self.local_cidrs,
            locals=self.locals,
            mode=self.mode,
            name=self.name,
            peer_address=self.peer_address,
            peer_cidrs=self.peer_cidrs,
            peers=self.peers,
            psk=self.psk,
            resource_type=self.resource_type,
            routing_protocol=self.routing_protocol,
            status=self.status,
            status_reasons=self.status_reasons,
            tunnels=self.tunnels,
            vpn_gateway=self.vpn_gateway,
            vpn_gateway_connection=self.vpn_gateway_connection,
            vpn_gateway_connection_name=self.vpn_gateway_connection_name,
            vpn_gateway_name=self.vpn_gateway_name)


def get_is_vpn_gateway_connection(id: Optional[_builtins.str] = None,
                                  vpn_gateway: Optional[_builtins.str] = None,
                                  vpn_gateway_connection: Optional[_builtins.str] = None,
                                  vpn_gateway_connection_name: Optional[_builtins.str] = None,
                                  vpn_gateway_name: Optional[_builtins.str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsVpnGatewayConnectionResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['vpnGateway'] = vpn_gateway
    __args__['vpnGatewayConnection'] = vpn_gateway_connection
    __args__['vpnGatewayConnectionName'] = vpn_gateway_connection_name
    __args__['vpnGatewayName'] = vpn_gateway_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsVpnGatewayConnection:getIsVpnGatewayConnection', __args__, opts=opts, typ=GetIsVpnGatewayConnectionResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsVpnGatewayConnectionResult(
        admin_state_up=pulumi.get(__ret__, 'admin_state_up'),
        authentication_mode=pulumi.get(__ret__, 'authentication_mode'),
        created_at=pulumi.get(__ret__, 'created_at'),
        dead_peer_detections=pulumi.get(__ret__, 'dead_peer_detections'),
        distribute_traffic=pulumi.get(__ret__, 'distribute_traffic'),
        establish_mode=pulumi.get(__ret__, 'establish_mode'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        ike_policies=pulumi.get(__ret__, 'ike_policies'),
        ipsec_policies=pulumi.get(__ret__, 'ipsec_policies'),
        local_cidrs=pulumi.get(__ret__, 'local_cidrs'),
        locals=pulumi.get(__ret__, 'locals'),
        mode=pulumi.get(__ret__, 'mode'),
        name=pulumi.get(__ret__, 'name'),
        peer_address=pulumi.get(__ret__, 'peer_address'),
        peer_cidrs=pulumi.get(__ret__, 'peer_cidrs'),
        peers=pulumi.get(__ret__, 'peers'),
        psk=pulumi.get(__ret__, 'psk'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        routing_protocol=pulumi.get(__ret__, 'routing_protocol'),
        status=pulumi.get(__ret__, 'status'),
        status_reasons=pulumi.get(__ret__, 'status_reasons'),
        tunnels=pulumi.get(__ret__, 'tunnels'),
        vpn_gateway=pulumi.get(__ret__, 'vpn_gateway'),
        vpn_gateway_connection=pulumi.get(__ret__, 'vpn_gateway_connection'),
        vpn_gateway_connection_name=pulumi.get(__ret__, 'vpn_gateway_connection_name'),
        vpn_gateway_name=pulumi.get(__ret__, 'vpn_gateway_name'))
def get_is_vpn_gateway_connection_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         vpn_gateway: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         vpn_gateway_connection: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         vpn_gateway_connection_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         vpn_gateway_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsVpnGatewayConnectionResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['vpnGateway'] = vpn_gateway
    __args__['vpnGatewayConnection'] = vpn_gateway_connection
    __args__['vpnGatewayConnectionName'] = vpn_gateway_connection_name
    __args__['vpnGatewayName'] = vpn_gateway_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsVpnGatewayConnection:getIsVpnGatewayConnection', __args__, opts=opts, typ=GetIsVpnGatewayConnectionResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsVpnGatewayConnectionResult(
        admin_state_up=pulumi.get(__response__, 'admin_state_up'),
        authentication_mode=pulumi.get(__response__, 'authentication_mode'),
        created_at=pulumi.get(__response__, 'created_at'),
        dead_peer_detections=pulumi.get(__response__, 'dead_peer_detections'),
        distribute_traffic=pulumi.get(__response__, 'distribute_traffic'),
        establish_mode=pulumi.get(__response__, 'establish_mode'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        ike_policies=pulumi.get(__response__, 'ike_policies'),
        ipsec_policies=pulumi.get(__response__, 'ipsec_policies'),
        local_cidrs=pulumi.get(__response__, 'local_cidrs'),
        locals=pulumi.get(__response__, 'locals'),
        mode=pulumi.get(__response__, 'mode'),
        name=pulumi.get(__response__, 'name'),
        peer_address=pulumi.get(__response__, 'peer_address'),
        peer_cidrs=pulumi.get(__response__, 'peer_cidrs'),
        peers=pulumi.get(__response__, 'peers'),
        psk=pulumi.get(__response__, 'psk'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        routing_protocol=pulumi.get(__response__, 'routing_protocol'),
        status=pulumi.get(__response__, 'status'),
        status_reasons=pulumi.get(__response__, 'status_reasons'),
        tunnels=pulumi.get(__response__, 'tunnels'),
        vpn_gateway=pulumi.get(__response__, 'vpn_gateway'),
        vpn_gateway_connection=pulumi.get(__response__, 'vpn_gateway_connection'),
        vpn_gateway_connection_name=pulumi.get(__response__, 'vpn_gateway_connection_name'),
        vpn_gateway_name=pulumi.get(__response__, 'vpn_gateway_name')))
