# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['HpcsKeyTemplateArgs', 'HpcsKeyTemplate']

@pulumi.input_type
class HpcsKeyTemplateArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 key: pulumi.Input['HpcsKeyTemplateKeyArgs'],
                 keystores: pulumi.Input[Sequence[pulumi.Input['HpcsKeyTemplateKeystoreArgs']]],
                 region: pulumi.Input[_builtins.str],
                 uko_vault: pulumi.Input[_builtins.str],
                 vault: pulumi.Input['HpcsKeyTemplateVaultArgs'],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 hpcs_key_template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a HpcsKeyTemplate resource.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the UKO instance this resource exists in.
        :param pulumi.Input['HpcsKeyTemplateKeyArgs'] key: Properties describing the properties of the managed key.
        :param pulumi.Input[Sequence[pulumi.Input['HpcsKeyTemplateKeystoreArgs']]] keystores: An array describing the type and group of target keystores the managed key is to be installed in.
        :param pulumi.Input[_builtins.str] region: The region of the UKO instance this resource exists in.
        :param pulumi.Input[_builtins.str] uko_vault: The UUID of the Vault in which the update is to take place.
        :param pulumi.Input['HpcsKeyTemplateVaultArgs'] vault: ID of the Vault where the entity is to be created in.
        :param pulumi.Input[_builtins.str] description: Description of the key template.
        :param pulumi.Input[_builtins.str] name: Name of the template, it will be referenced when creating managed keys.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "keystores", keystores)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "uko_vault", uko_vault)
        pulumi.set(__self__, "vault", vault)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if hpcs_key_template_id is not None:
            pulumi.set(__self__, "hpcs_key_template_id", hpcs_key_template_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the UKO instance this resource exists in.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> pulumi.Input['HpcsKeyTemplateKeyArgs']:
        """
        Properties describing the properties of the managed key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input['HpcsKeyTemplateKeyArgs']):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def keystores(self) -> pulumi.Input[Sequence[pulumi.Input['HpcsKeyTemplateKeystoreArgs']]]:
        """
        An array describing the type and group of target keystores the managed key is to be installed in.
        """
        return pulumi.get(self, "keystores")

    @keystores.setter
    def keystores(self, value: pulumi.Input[Sequence[pulumi.Input['HpcsKeyTemplateKeystoreArgs']]]):
        pulumi.set(self, "keystores", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Input[_builtins.str]:
        """
        The region of the UKO instance this resource exists in.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="ukoVault")
    def uko_vault(self) -> pulumi.Input[_builtins.str]:
        """
        The UUID of the Vault in which the update is to take place.
        """
        return pulumi.get(self, "uko_vault")

    @uko_vault.setter
    def uko_vault(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "uko_vault", value)

    @_builtins.property
    @pulumi.getter
    def vault(self) -> pulumi.Input['HpcsKeyTemplateVaultArgs']:
        """
        ID of the Vault where the entity is to be created in.
        """
        return pulumi.get(self, "vault")

    @vault.setter
    def vault(self, value: pulumi.Input['HpcsKeyTemplateVaultArgs']):
        pulumi.set(self, "vault", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the key template.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="hpcsKeyTemplateId")
    def hpcs_key_template_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "hpcs_key_template_id")

    @hpcs_key_template_id.setter
    def hpcs_key_template_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hpcs_key_template_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the template, it will be referenced when creating managed keys.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _HpcsKeyTemplateState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 hpcs_key_template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 key: Optional[pulumi.Input['HpcsKeyTemplateKeyArgs']] = None,
                 keystores: Optional[pulumi.Input[Sequence[pulumi.Input['HpcsKeyTemplateKeystoreArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 uko_vault: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_by: Optional[pulumi.Input[_builtins.str]] = None,
                 vault: Optional[pulumi.Input['HpcsKeyTemplateVaultArgs']] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering HpcsKeyTemplate resources.
        :param pulumi.Input[_builtins.str] created_at: Date and time when the key template was created.
        :param pulumi.Input[_builtins.str] created_by: ID of the user that created the key template.
        :param pulumi.Input[_builtins.str] description: Description of the key template.
        :param pulumi.Input[_builtins.str] href: A URL that uniquely identifies your cloud resource.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the UKO instance this resource exists in.
        :param pulumi.Input['HpcsKeyTemplateKeyArgs'] key: Properties describing the properties of the managed key.
        :param pulumi.Input[Sequence[pulumi.Input['HpcsKeyTemplateKeystoreArgs']]] keystores: An array describing the type and group of target keystores the managed key is to be installed in.
        :param pulumi.Input[_builtins.str] name: Name of the template, it will be referenced when creating managed keys.
        :param pulumi.Input[_builtins.str] region: The region of the UKO instance this resource exists in.
        :param pulumi.Input[_builtins.str] uko_vault: The UUID of the Vault in which the update is to take place.
        :param pulumi.Input[_builtins.str] updated_at: Date and time when the key template was updated.
        :param pulumi.Input[_builtins.str] updated_by: ID of the user that updated the key.
        :param pulumi.Input['HpcsKeyTemplateVaultArgs'] vault: ID of the Vault where the entity is to be created in.
        :param pulumi.Input[_builtins.str] version: Version of the key template. Every time the key template is updated, the version will be updated automatically.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if hpcs_key_template_id is not None:
            pulumi.set(__self__, "hpcs_key_template_id", hpcs_key_template_id)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if keystores is not None:
            pulumi.set(__self__, "keystores", keystores)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if uko_vault is not None:
            pulumi.set(__self__, "uko_vault", uko_vault)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if vault is not None:
            pulumi.set(__self__, "vault", vault)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Date and time when the key template was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the user that created the key template.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the key template.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="hpcsKeyTemplateId")
    def hpcs_key_template_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "hpcs_key_template_id")

    @hpcs_key_template_id.setter
    def hpcs_key_template_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hpcs_key_template_id", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A URL that uniquely identifies your cloud resource.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the UKO instance this resource exists in.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input['HpcsKeyTemplateKeyArgs']]:
        """
        Properties describing the properties of the managed key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input['HpcsKeyTemplateKeyArgs']]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def keystores(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HpcsKeyTemplateKeystoreArgs']]]]:
        """
        An array describing the type and group of target keystores the managed key is to be installed in.
        """
        return pulumi.get(self, "keystores")

    @keystores.setter
    def keystores(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HpcsKeyTemplateKeystoreArgs']]]]):
        pulumi.set(self, "keystores", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the template, it will be referenced when creating managed keys.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the UKO instance this resource exists in.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="ukoVault")
    def uko_vault(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The UUID of the Vault in which the update is to take place.
        """
        return pulumi.get(self, "uko_vault")

    @uko_vault.setter
    def uko_vault(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "uko_vault", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Date and time when the key template was updated.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the user that updated the key.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_by", value)

    @_builtins.property
    @pulumi.getter
    def vault(self) -> Optional[pulumi.Input['HpcsKeyTemplateVaultArgs']]:
        """
        ID of the Vault where the entity is to be created in.
        """
        return pulumi.get(self, "vault")

    @vault.setter
    def vault(self, value: Optional[pulumi.Input['HpcsKeyTemplateVaultArgs']]):
        pulumi.set(self, "vault", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Version of the key template. Every time the key template is updated, the version will be updated automatically.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


@pulumi.type_token("ibm:index/hpcsKeyTemplate:HpcsKeyTemplate")
class HpcsKeyTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 hpcs_key_template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 key: Optional[pulumi.Input[Union['HpcsKeyTemplateKeyArgs', 'HpcsKeyTemplateKeyArgsDict']]] = None,
                 keystores: Optional[pulumi.Input[Sequence[pulumi.Input[Union['HpcsKeyTemplateKeystoreArgs', 'HpcsKeyTemplateKeystoreArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 uko_vault: Optional[pulumi.Input[_builtins.str]] = None,
                 vault: Optional[pulumi.Input[Union['HpcsKeyTemplateVaultArgs', 'HpcsKeyTemplateVaultArgsDict']]] = None,
                 __props__=None):
        """
        Create a HpcsKeyTemplate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Description of the key template.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the UKO instance this resource exists in.
        :param pulumi.Input[Union['HpcsKeyTemplateKeyArgs', 'HpcsKeyTemplateKeyArgsDict']] key: Properties describing the properties of the managed key.
        :param pulumi.Input[Sequence[pulumi.Input[Union['HpcsKeyTemplateKeystoreArgs', 'HpcsKeyTemplateKeystoreArgsDict']]]] keystores: An array describing the type and group of target keystores the managed key is to be installed in.
        :param pulumi.Input[_builtins.str] name: Name of the template, it will be referenced when creating managed keys.
        :param pulumi.Input[_builtins.str] region: The region of the UKO instance this resource exists in.
        :param pulumi.Input[_builtins.str] uko_vault: The UUID of the Vault in which the update is to take place.
        :param pulumi.Input[Union['HpcsKeyTemplateVaultArgs', 'HpcsKeyTemplateVaultArgsDict']] vault: ID of the Vault where the entity is to be created in.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: HpcsKeyTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a HpcsKeyTemplate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param HpcsKeyTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(HpcsKeyTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 hpcs_key_template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 key: Optional[pulumi.Input[Union['HpcsKeyTemplateKeyArgs', 'HpcsKeyTemplateKeyArgsDict']]] = None,
                 keystores: Optional[pulumi.Input[Sequence[pulumi.Input[Union['HpcsKeyTemplateKeystoreArgs', 'HpcsKeyTemplateKeystoreArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 uko_vault: Optional[pulumi.Input[_builtins.str]] = None,
                 vault: Optional[pulumi.Input[Union['HpcsKeyTemplateVaultArgs', 'HpcsKeyTemplateVaultArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = HpcsKeyTemplateArgs.__new__(HpcsKeyTemplateArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["hpcs_key_template_id"] = hpcs_key_template_id
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if key is None and not opts.urn:
                raise TypeError("Missing required property 'key'")
            __props__.__dict__["key"] = key
            if keystores is None and not opts.urn:
                raise TypeError("Missing required property 'keystores'")
            __props__.__dict__["keystores"] = keystores
            __props__.__dict__["name"] = name
            if region is None and not opts.urn:
                raise TypeError("Missing required property 'region'")
            __props__.__dict__["region"] = region
            if uko_vault is None and not opts.urn:
                raise TypeError("Missing required property 'uko_vault'")
            __props__.__dict__["uko_vault"] = uko_vault
            if vault is None and not opts.urn:
                raise TypeError("Missing required property 'vault'")
            __props__.__dict__["vault"] = vault
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["updated_by"] = None
            __props__.__dict__["version"] = None
        super(HpcsKeyTemplate, __self__).__init__(
            'ibm:index/hpcsKeyTemplate:HpcsKeyTemplate',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            created_by: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            hpcs_key_template_id: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            key: Optional[pulumi.Input[Union['HpcsKeyTemplateKeyArgs', 'HpcsKeyTemplateKeyArgsDict']]] = None,
            keystores: Optional[pulumi.Input[Sequence[pulumi.Input[Union['HpcsKeyTemplateKeystoreArgs', 'HpcsKeyTemplateKeystoreArgsDict']]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            uko_vault: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            updated_by: Optional[pulumi.Input[_builtins.str]] = None,
            vault: Optional[pulumi.Input[Union['HpcsKeyTemplateVaultArgs', 'HpcsKeyTemplateVaultArgsDict']]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None) -> 'HpcsKeyTemplate':
        """
        Get an existing HpcsKeyTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: Date and time when the key template was created.
        :param pulumi.Input[_builtins.str] created_by: ID of the user that created the key template.
        :param pulumi.Input[_builtins.str] description: Description of the key template.
        :param pulumi.Input[_builtins.str] href: A URL that uniquely identifies your cloud resource.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the UKO instance this resource exists in.
        :param pulumi.Input[Union['HpcsKeyTemplateKeyArgs', 'HpcsKeyTemplateKeyArgsDict']] key: Properties describing the properties of the managed key.
        :param pulumi.Input[Sequence[pulumi.Input[Union['HpcsKeyTemplateKeystoreArgs', 'HpcsKeyTemplateKeystoreArgsDict']]]] keystores: An array describing the type and group of target keystores the managed key is to be installed in.
        :param pulumi.Input[_builtins.str] name: Name of the template, it will be referenced when creating managed keys.
        :param pulumi.Input[_builtins.str] region: The region of the UKO instance this resource exists in.
        :param pulumi.Input[_builtins.str] uko_vault: The UUID of the Vault in which the update is to take place.
        :param pulumi.Input[_builtins.str] updated_at: Date and time when the key template was updated.
        :param pulumi.Input[_builtins.str] updated_by: ID of the user that updated the key.
        :param pulumi.Input[Union['HpcsKeyTemplateVaultArgs', 'HpcsKeyTemplateVaultArgsDict']] vault: ID of the Vault where the entity is to be created in.
        :param pulumi.Input[_builtins.str] version: Version of the key template. Every time the key template is updated, the version will be updated automatically.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _HpcsKeyTemplateState.__new__(_HpcsKeyTemplateState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["description"] = description
        __props__.__dict__["hpcs_key_template_id"] = hpcs_key_template_id
        __props__.__dict__["href"] = href
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["key"] = key
        __props__.__dict__["keystores"] = keystores
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["uko_vault"] = uko_vault
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["updated_by"] = updated_by
        __props__.__dict__["vault"] = vault
        __props__.__dict__["version"] = version
        return HpcsKeyTemplate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Date and time when the key template was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[_builtins.str]:
        """
        ID of the user that created the key template.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Description of the key template.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="hpcsKeyTemplateId")
    def hpcs_key_template_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "hpcs_key_template_id")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        A URL that uniquely identifies your cloud resource.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the UKO instance this resource exists in.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def key(self) -> pulumi.Output['outputs.HpcsKeyTemplateKey']:
        """
        Properties describing the properties of the managed key.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def keystores(self) -> pulumi.Output[Sequence['outputs.HpcsKeyTemplateKeystore']]:
        """
        An array describing the type and group of target keystores the managed key is to be installed in.
        """
        return pulumi.get(self, "keystores")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the template, it will be referenced when creating managed keys.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region of the UKO instance this resource exists in.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="ukoVault")
    def uko_vault(self) -> pulumi.Output[_builtins.str]:
        """
        The UUID of the Vault in which the update is to take place.
        """
        return pulumi.get(self, "uko_vault")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Date and time when the key template was updated.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> pulumi.Output[_builtins.str]:
        """
        ID of the user that updated the key.
        """
        return pulumi.get(self, "updated_by")

    @_builtins.property
    @pulumi.getter
    def vault(self) -> pulumi.Output['outputs.HpcsKeyTemplateVault']:
        """
        ID of the Vault where the entity is to be created in.
        """
        return pulumi.get(self, "vault")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.str]:
        """
        Version of the key template. Every time the key template is updated, the version will be updated automatically.
        """
        return pulumi.get(self, "version")

