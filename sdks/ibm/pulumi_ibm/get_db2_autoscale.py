# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetDb2AutoscaleResult',
    'AwaitableGetDb2AutoscaleResult',
    'get_db2_autoscale',
    'get_db2_autoscale_output',
]

@pulumi.output_type
class GetDb2AutoscaleResult:
    """
    A collection of values returned by getDb2Autoscale.
    """
    def __init__(__self__, auto_scaling_allow_plan_limit=None, auto_scaling_enabled=None, auto_scaling_max_storage=None, auto_scaling_over_time_period=None, auto_scaling_pause_limit=None, auto_scaling_threshold=None, deployment_id=None, id=None, storage_unit=None, storage_utilization_percentage=None, support_auto_scaling=None):
        if auto_scaling_allow_plan_limit and not isinstance(auto_scaling_allow_plan_limit, bool):
            raise TypeError("Expected argument 'auto_scaling_allow_plan_limit' to be a bool")
        pulumi.set(__self__, "auto_scaling_allow_plan_limit", auto_scaling_allow_plan_limit)
        if auto_scaling_enabled and not isinstance(auto_scaling_enabled, bool):
            raise TypeError("Expected argument 'auto_scaling_enabled' to be a bool")
        pulumi.set(__self__, "auto_scaling_enabled", auto_scaling_enabled)
        if auto_scaling_max_storage and not isinstance(auto_scaling_max_storage, float):
            raise TypeError("Expected argument 'auto_scaling_max_storage' to be a float")
        pulumi.set(__self__, "auto_scaling_max_storage", auto_scaling_max_storage)
        if auto_scaling_over_time_period and not isinstance(auto_scaling_over_time_period, float):
            raise TypeError("Expected argument 'auto_scaling_over_time_period' to be a float")
        pulumi.set(__self__, "auto_scaling_over_time_period", auto_scaling_over_time_period)
        if auto_scaling_pause_limit and not isinstance(auto_scaling_pause_limit, float):
            raise TypeError("Expected argument 'auto_scaling_pause_limit' to be a float")
        pulumi.set(__self__, "auto_scaling_pause_limit", auto_scaling_pause_limit)
        if auto_scaling_threshold and not isinstance(auto_scaling_threshold, float):
            raise TypeError("Expected argument 'auto_scaling_threshold' to be a float")
        pulumi.set(__self__, "auto_scaling_threshold", auto_scaling_threshold)
        if deployment_id and not isinstance(deployment_id, str):
            raise TypeError("Expected argument 'deployment_id' to be a str")
        pulumi.set(__self__, "deployment_id", deployment_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if storage_unit and not isinstance(storage_unit, str):
            raise TypeError("Expected argument 'storage_unit' to be a str")
        pulumi.set(__self__, "storage_unit", storage_unit)
        if storage_utilization_percentage and not isinstance(storage_utilization_percentage, float):
            raise TypeError("Expected argument 'storage_utilization_percentage' to be a float")
        pulumi.set(__self__, "storage_utilization_percentage", storage_utilization_percentage)
        if support_auto_scaling and not isinstance(support_auto_scaling, bool):
            raise TypeError("Expected argument 'support_auto_scaling' to be a bool")
        pulumi.set(__self__, "support_auto_scaling", support_auto_scaling)

    @_builtins.property
    @pulumi.getter(name="autoScalingAllowPlanLimit")
    def auto_scaling_allow_plan_limit(self) -> _builtins.bool:
        return pulumi.get(self, "auto_scaling_allow_plan_limit")

    @_builtins.property
    @pulumi.getter(name="autoScalingEnabled")
    def auto_scaling_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "auto_scaling_enabled")

    @_builtins.property
    @pulumi.getter(name="autoScalingMaxStorage")
    def auto_scaling_max_storage(self) -> _builtins.float:
        return pulumi.get(self, "auto_scaling_max_storage")

    @_builtins.property
    @pulumi.getter(name="autoScalingOverTimePeriod")
    def auto_scaling_over_time_period(self) -> _builtins.float:
        return pulumi.get(self, "auto_scaling_over_time_period")

    @_builtins.property
    @pulumi.getter(name="autoScalingPauseLimit")
    def auto_scaling_pause_limit(self) -> _builtins.float:
        return pulumi.get(self, "auto_scaling_pause_limit")

    @_builtins.property
    @pulumi.getter(name="autoScalingThreshold")
    def auto_scaling_threshold(self) -> _builtins.float:
        return pulumi.get(self, "auto_scaling_threshold")

    @_builtins.property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> _builtins.str:
        return pulumi.get(self, "deployment_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="storageUnit")
    def storage_unit(self) -> _builtins.str:
        return pulumi.get(self, "storage_unit")

    @_builtins.property
    @pulumi.getter(name="storageUtilizationPercentage")
    def storage_utilization_percentage(self) -> _builtins.float:
        return pulumi.get(self, "storage_utilization_percentage")

    @_builtins.property
    @pulumi.getter(name="supportAutoScaling")
    def support_auto_scaling(self) -> _builtins.bool:
        return pulumi.get(self, "support_auto_scaling")


class AwaitableGetDb2AutoscaleResult(GetDb2AutoscaleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDb2AutoscaleResult(
            auto_scaling_allow_plan_limit=self.auto_scaling_allow_plan_limit,
            auto_scaling_enabled=self.auto_scaling_enabled,
            auto_scaling_max_storage=self.auto_scaling_max_storage,
            auto_scaling_over_time_period=self.auto_scaling_over_time_period,
            auto_scaling_pause_limit=self.auto_scaling_pause_limit,
            auto_scaling_threshold=self.auto_scaling_threshold,
            deployment_id=self.deployment_id,
            id=self.id,
            storage_unit=self.storage_unit,
            storage_utilization_percentage=self.storage_utilization_percentage,
            support_auto_scaling=self.support_auto_scaling)


def get_db2_autoscale(deployment_id: Optional[_builtins.str] = None,
                      id: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDb2AutoscaleResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['deploymentId'] = deployment_id
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getDb2Autoscale:getDb2Autoscale', __args__, opts=opts, typ=GetDb2AutoscaleResult, package_ref=_utilities.get_package()).value

    return AwaitableGetDb2AutoscaleResult(
        auto_scaling_allow_plan_limit=pulumi.get(__ret__, 'auto_scaling_allow_plan_limit'),
        auto_scaling_enabled=pulumi.get(__ret__, 'auto_scaling_enabled'),
        auto_scaling_max_storage=pulumi.get(__ret__, 'auto_scaling_max_storage'),
        auto_scaling_over_time_period=pulumi.get(__ret__, 'auto_scaling_over_time_period'),
        auto_scaling_pause_limit=pulumi.get(__ret__, 'auto_scaling_pause_limit'),
        auto_scaling_threshold=pulumi.get(__ret__, 'auto_scaling_threshold'),
        deployment_id=pulumi.get(__ret__, 'deployment_id'),
        id=pulumi.get(__ret__, 'id'),
        storage_unit=pulumi.get(__ret__, 'storage_unit'),
        storage_utilization_percentage=pulumi.get(__ret__, 'storage_utilization_percentage'),
        support_auto_scaling=pulumi.get(__ret__, 'support_auto_scaling'))
def get_db2_autoscale_output(deployment_id: Optional[pulumi.Input[_builtins.str]] = None,
                             id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDb2AutoscaleResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['deploymentId'] = deployment_id
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getDb2Autoscale:getDb2Autoscale', __args__, opts=opts, typ=GetDb2AutoscaleResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetDb2AutoscaleResult(
        auto_scaling_allow_plan_limit=pulumi.get(__response__, 'auto_scaling_allow_plan_limit'),
        auto_scaling_enabled=pulumi.get(__response__, 'auto_scaling_enabled'),
        auto_scaling_max_storage=pulumi.get(__response__, 'auto_scaling_max_storage'),
        auto_scaling_over_time_period=pulumi.get(__response__, 'auto_scaling_over_time_period'),
        auto_scaling_pause_limit=pulumi.get(__response__, 'auto_scaling_pause_limit'),
        auto_scaling_threshold=pulumi.get(__response__, 'auto_scaling_threshold'),
        deployment_id=pulumi.get(__response__, 'deployment_id'),
        id=pulumi.get(__response__, 'id'),
        storage_unit=pulumi.get(__response__, 'storage_unit'),
        storage_utilization_percentage=pulumi.get(__response__, 'storage_utilization_percentage'),
        support_auto_scaling=pulumi.get(__response__, 'support_auto_scaling')))
