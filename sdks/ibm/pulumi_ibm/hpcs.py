# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['HpcsArgs', 'Hpcs']

@pulumi.input_type
class HpcsArgs:
    def __init__(__self__, *,
                 admins: pulumi.Input[Sequence[pulumi.Input['HpcsAdminArgs']]],
                 location: pulumi.Input[_builtins.str],
                 plan: pulumi.Input[_builtins.str],
                 revocation_threshold: pulumi.Input[_builtins.float],
                 signature_threshold: pulumi.Input[_builtins.float],
                 units: pulumi.Input[_builtins.float],
                 failover_units: Optional[pulumi.Input[_builtins.float]] = None,
                 hpcs_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service: Optional[pulumi.Input[_builtins.str]] = None,
                 service_endpoints: Optional[pulumi.Input[_builtins.str]] = None,
                 signature_server_url: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['HpcsTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a Hpcs resource.
        :param pulumi.Input[Sequence[pulumi.Input['HpcsAdminArgs']]] admins: Crypto Unit Administrators
        :param pulumi.Input[_builtins.str] location: The location where the HPCS instance available
        :param pulumi.Input[_builtins.str] plan: The plan type of the HPCS Instance
        :param pulumi.Input[_builtins.float] revocation_threshold: Revocation Threshold Value
        :param pulumi.Input[_builtins.float] signature_threshold: Signature Threshold Value
        :param pulumi.Input[_builtins.float] units: The number of operational crypto units for your service instance
        :param pulumi.Input[_builtins.float] failover_units: The number of failover crypto units for your service instance
        :param pulumi.Input[_builtins.str] name: A name for the HPCS instance
        :param pulumi.Input[_builtins.str] resource_group_id: The resource group id
        :param pulumi.Input[_builtins.str] service: The name of the service offering `hs-crypto`
        :param pulumi.Input[_builtins.str] service_endpoints: Types of the service endpoints. Possible values are `public-and-private`, `private-only`.
        :param pulumi.Input[_builtins.str] signature_server_url: URL of signing service
        """
        pulumi.set(__self__, "admins", admins)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "plan", plan)
        pulumi.set(__self__, "revocation_threshold", revocation_threshold)
        pulumi.set(__self__, "signature_threshold", signature_threshold)
        pulumi.set(__self__, "units", units)
        if failover_units is not None:
            pulumi.set(__self__, "failover_units", failover_units)
        if hpcs_id is not None:
            pulumi.set(__self__, "hpcs_id", hpcs_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if service_endpoints is not None:
            pulumi.set(__self__, "service_endpoints", service_endpoints)
        if signature_server_url is not None:
            pulumi.set(__self__, "signature_server_url", signature_server_url)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def admins(self) -> pulumi.Input[Sequence[pulumi.Input['HpcsAdminArgs']]]:
        """
        Crypto Unit Administrators
        """
        return pulumi.get(self, "admins")

    @admins.setter
    def admins(self, value: pulumi.Input[Sequence[pulumi.Input['HpcsAdminArgs']]]):
        pulumi.set(self, "admins", value)

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Input[_builtins.str]:
        """
        The location where the HPCS instance available
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter
    def plan(self) -> pulumi.Input[_builtins.str]:
        """
        The plan type of the HPCS Instance
        """
        return pulumi.get(self, "plan")

    @plan.setter
    def plan(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "plan", value)

    @_builtins.property
    @pulumi.getter(name="revocationThreshold")
    def revocation_threshold(self) -> pulumi.Input[_builtins.float]:
        """
        Revocation Threshold Value
        """
        return pulumi.get(self, "revocation_threshold")

    @revocation_threshold.setter
    def revocation_threshold(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "revocation_threshold", value)

    @_builtins.property
    @pulumi.getter(name="signatureThreshold")
    def signature_threshold(self) -> pulumi.Input[_builtins.float]:
        """
        Signature Threshold Value
        """
        return pulumi.get(self, "signature_threshold")

    @signature_threshold.setter
    def signature_threshold(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "signature_threshold", value)

    @_builtins.property
    @pulumi.getter
    def units(self) -> pulumi.Input[_builtins.float]:
        """
        The number of operational crypto units for your service instance
        """
        return pulumi.get(self, "units")

    @units.setter
    def units(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "units", value)

    @_builtins.property
    @pulumi.getter(name="failoverUnits")
    def failover_units(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The number of failover crypto units for your service instance
        """
        return pulumi.get(self, "failover_units")

    @failover_units.setter
    def failover_units(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "failover_units", value)

    @_builtins.property
    @pulumi.getter(name="hpcsId")
    def hpcs_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "hpcs_id")

    @hpcs_id.setter
    def hpcs_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hpcs_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A name for the HPCS instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource group id
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the service offering `hs-crypto`
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service", value)

    @_builtins.property
    @pulumi.getter(name="serviceEndpoints")
    def service_endpoints(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Types of the service endpoints. Possible values are `public-and-private`, `private-only`.
        """
        return pulumi.get(self, "service_endpoints")

    @service_endpoints.setter
    def service_endpoints(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_endpoints", value)

    @_builtins.property
    @pulumi.getter(name="signatureServerUrl")
    def signature_server_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        URL of signing service
        """
        return pulumi.get(self, "signature_server_url")

    @signature_server_url.setter
    def signature_server_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "signature_server_url", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['HpcsTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['HpcsTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _HpcsState:
    def __init__(__self__, *,
                 admins: Optional[pulumi.Input[Sequence[pulumi.Input['HpcsAdminArgs']]]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 dashboard_url: Optional[pulumi.Input[_builtins.str]] = None,
                 deleted_at: Optional[pulumi.Input[_builtins.str]] = None,
                 deleted_by: Optional[pulumi.Input[_builtins.str]] = None,
                 extensions: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 failover_units: Optional[pulumi.Input[_builtins.float]] = None,
                 guid: Optional[pulumi.Input[_builtins.str]] = None,
                 hpcs_id: Optional[pulumi.Input[_builtins.str]] = None,
                 hsm_infos: Optional[pulumi.Input[Sequence[pulumi.Input['HpcsHsmInfoArgs']]]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 plan: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_aliases_url: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_bindings_url: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_keys_url: Optional[pulumi.Input[_builtins.str]] = None,
                 restored_at: Optional[pulumi.Input[_builtins.str]] = None,
                 restored_by: Optional[pulumi.Input[_builtins.str]] = None,
                 revocation_threshold: Optional[pulumi.Input[_builtins.float]] = None,
                 scheduled_reclaim_at: Optional[pulumi.Input[_builtins.str]] = None,
                 scheduled_reclaim_by: Optional[pulumi.Input[_builtins.str]] = None,
                 service: Optional[pulumi.Input[_builtins.str]] = None,
                 service_endpoints: Optional[pulumi.Input[_builtins.str]] = None,
                 signature_server_url: Optional[pulumi.Input[_builtins.str]] = None,
                 signature_threshold: Optional[pulumi.Input[_builtins.float]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['HpcsTimeoutsArgs']] = None,
                 units: Optional[pulumi.Input[_builtins.float]] = None,
                 update_at: Optional[pulumi.Input[_builtins.str]] = None,
                 update_by: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Hpcs resources.
        :param pulumi.Input[Sequence[pulumi.Input['HpcsAdminArgs']]] admins: Crypto Unit Administrators
        :param pulumi.Input[_builtins.str] created_at: The date when the instance was created.
        :param pulumi.Input[_builtins.str] created_by: The subject who created the instance.
        :param pulumi.Input[_builtins.str] crn: CRN of HPCS instance
        :param pulumi.Input[_builtins.str] dashboard_url: Dashboard URL to access resource.
        :param pulumi.Input[_builtins.str] deleted_at: The date when the instance was deleted.
        :param pulumi.Input[_builtins.str] deleted_by: The subject who deleted the instance.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] extensions: The extended metadata as a map associated with the HPCS instance.
        :param pulumi.Input[_builtins.float] failover_units: The number of failover crypto units for your service instance
        :param pulumi.Input[_builtins.str] guid: Guid of HPCS instance
        :param pulumi.Input[Sequence[pulumi.Input['HpcsHsmInfoArgs']]] hsm_infos: HSM Configuration
        :param pulumi.Input[_builtins.str] location: The location where the HPCS instance available
        :param pulumi.Input[_builtins.str] name: A name for the HPCS instance
        :param pulumi.Input[_builtins.str] plan: The plan type of the HPCS Instance
        :param pulumi.Input[_builtins.str] resource_aliases_url: The relative path to the resource aliases for the instance.
        :param pulumi.Input[_builtins.str] resource_bindings_url: The relative path to the resource bindings for the instance.
        :param pulumi.Input[_builtins.str] resource_group_id: The resource group id
        :param pulumi.Input[_builtins.str] resource_keys_url: The relative path to the resource keys for the instance.
        :param pulumi.Input[_builtins.str] restored_at: The date when the instance under reclamation was restored.
        :param pulumi.Input[_builtins.str] restored_by: The subject who restored the instance back from reclamation.
        :param pulumi.Input[_builtins.float] revocation_threshold: Revocation Threshold Value
        :param pulumi.Input[_builtins.str] scheduled_reclaim_at: The date when the instance was scheduled for reclamation.
        :param pulumi.Input[_builtins.str] scheduled_reclaim_by: The subject who initiated the instance reclamation.
        :param pulumi.Input[_builtins.str] service: The name of the service offering `hs-crypto`
        :param pulumi.Input[_builtins.str] service_endpoints: Types of the service endpoints. Possible values are `public-and-private`, `private-only`.
        :param pulumi.Input[_builtins.str] signature_server_url: URL of signing service
        :param pulumi.Input[_builtins.float] signature_threshold: Signature Threshold Value
        :param pulumi.Input[_builtins.str] state: The current state of the instance.
        :param pulumi.Input[_builtins.str] status: Status of HPCS instance
        :param pulumi.Input[_builtins.float] units: The number of operational crypto units for your service instance
        :param pulumi.Input[_builtins.str] update_at: The date when the instance was last updated.
        :param pulumi.Input[_builtins.str] update_by: The subject who updated the instance.
        """
        if admins is not None:
            pulumi.set(__self__, "admins", admins)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if dashboard_url is not None:
            pulumi.set(__self__, "dashboard_url", dashboard_url)
        if deleted_at is not None:
            pulumi.set(__self__, "deleted_at", deleted_at)
        if deleted_by is not None:
            pulumi.set(__self__, "deleted_by", deleted_by)
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if failover_units is not None:
            pulumi.set(__self__, "failover_units", failover_units)
        if guid is not None:
            pulumi.set(__self__, "guid", guid)
        if hpcs_id is not None:
            pulumi.set(__self__, "hpcs_id", hpcs_id)
        if hsm_infos is not None:
            pulumi.set(__self__, "hsm_infos", hsm_infos)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if plan is not None:
            pulumi.set(__self__, "plan", plan)
        if resource_aliases_url is not None:
            pulumi.set(__self__, "resource_aliases_url", resource_aliases_url)
        if resource_bindings_url is not None:
            pulumi.set(__self__, "resource_bindings_url", resource_bindings_url)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if resource_keys_url is not None:
            pulumi.set(__self__, "resource_keys_url", resource_keys_url)
        if restored_at is not None:
            pulumi.set(__self__, "restored_at", restored_at)
        if restored_by is not None:
            pulumi.set(__self__, "restored_by", restored_by)
        if revocation_threshold is not None:
            pulumi.set(__self__, "revocation_threshold", revocation_threshold)
        if scheduled_reclaim_at is not None:
            pulumi.set(__self__, "scheduled_reclaim_at", scheduled_reclaim_at)
        if scheduled_reclaim_by is not None:
            pulumi.set(__self__, "scheduled_reclaim_by", scheduled_reclaim_by)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if service_endpoints is not None:
            pulumi.set(__self__, "service_endpoints", service_endpoints)
        if signature_server_url is not None:
            pulumi.set(__self__, "signature_server_url", signature_server_url)
        if signature_threshold is not None:
            pulumi.set(__self__, "signature_threshold", signature_threshold)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if units is not None:
            pulumi.set(__self__, "units", units)
        if update_at is not None:
            pulumi.set(__self__, "update_at", update_at)
        if update_by is not None:
            pulumi.set(__self__, "update_by", update_by)

    @_builtins.property
    @pulumi.getter
    def admins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HpcsAdminArgs']]]]:
        """
        Crypto Unit Administrators
        """
        return pulumi.get(self, "admins")

    @admins.setter
    def admins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HpcsAdminArgs']]]]):
        pulumi.set(self, "admins", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date when the instance was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The subject who created the instance.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CRN of HPCS instance
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="dashboardUrl")
    def dashboard_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Dashboard URL to access resource.
        """
        return pulumi.get(self, "dashboard_url")

    @dashboard_url.setter
    def dashboard_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dashboard_url", value)

    @_builtins.property
    @pulumi.getter(name="deletedAt")
    def deleted_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date when the instance was deleted.
        """
        return pulumi.get(self, "deleted_at")

    @deleted_at.setter
    def deleted_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "deleted_at", value)

    @_builtins.property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The subject who deleted the instance.
        """
        return pulumi.get(self, "deleted_by")

    @deleted_by.setter
    def deleted_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "deleted_by", value)

    @_builtins.property
    @pulumi.getter
    def extensions(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        The extended metadata as a map associated with the HPCS instance.
        """
        return pulumi.get(self, "extensions")

    @extensions.setter
    def extensions(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "extensions", value)

    @_builtins.property
    @pulumi.getter(name="failoverUnits")
    def failover_units(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The number of failover crypto units for your service instance
        """
        return pulumi.get(self, "failover_units")

    @failover_units.setter
    def failover_units(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "failover_units", value)

    @_builtins.property
    @pulumi.getter
    def guid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Guid of HPCS instance
        """
        return pulumi.get(self, "guid")

    @guid.setter
    def guid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "guid", value)

    @_builtins.property
    @pulumi.getter(name="hpcsId")
    def hpcs_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "hpcs_id")

    @hpcs_id.setter
    def hpcs_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hpcs_id", value)

    @_builtins.property
    @pulumi.getter(name="hsmInfos")
    def hsm_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HpcsHsmInfoArgs']]]]:
        """
        HSM Configuration
        """
        return pulumi.get(self, "hsm_infos")

    @hsm_infos.setter
    def hsm_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HpcsHsmInfoArgs']]]]):
        pulumi.set(self, "hsm_infos", value)

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The location where the HPCS instance available
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A name for the HPCS instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def plan(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The plan type of the HPCS Instance
        """
        return pulumi.get(self, "plan")

    @plan.setter
    def plan(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "plan", value)

    @_builtins.property
    @pulumi.getter(name="resourceAliasesUrl")
    def resource_aliases_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The relative path to the resource aliases for the instance.
        """
        return pulumi.get(self, "resource_aliases_url")

    @resource_aliases_url.setter
    def resource_aliases_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_aliases_url", value)

    @_builtins.property
    @pulumi.getter(name="resourceBindingsUrl")
    def resource_bindings_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The relative path to the resource bindings for the instance.
        """
        return pulumi.get(self, "resource_bindings_url")

    @resource_bindings_url.setter
    def resource_bindings_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_bindings_url", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource group id
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceKeysUrl")
    def resource_keys_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The relative path to the resource keys for the instance.
        """
        return pulumi.get(self, "resource_keys_url")

    @resource_keys_url.setter
    def resource_keys_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_keys_url", value)

    @_builtins.property
    @pulumi.getter(name="restoredAt")
    def restored_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date when the instance under reclamation was restored.
        """
        return pulumi.get(self, "restored_at")

    @restored_at.setter
    def restored_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "restored_at", value)

    @_builtins.property
    @pulumi.getter(name="restoredBy")
    def restored_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The subject who restored the instance back from reclamation.
        """
        return pulumi.get(self, "restored_by")

    @restored_by.setter
    def restored_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "restored_by", value)

    @_builtins.property
    @pulumi.getter(name="revocationThreshold")
    def revocation_threshold(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Revocation Threshold Value
        """
        return pulumi.get(self, "revocation_threshold")

    @revocation_threshold.setter
    def revocation_threshold(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "revocation_threshold", value)

    @_builtins.property
    @pulumi.getter(name="scheduledReclaimAt")
    def scheduled_reclaim_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date when the instance was scheduled for reclamation.
        """
        return pulumi.get(self, "scheduled_reclaim_at")

    @scheduled_reclaim_at.setter
    def scheduled_reclaim_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scheduled_reclaim_at", value)

    @_builtins.property
    @pulumi.getter(name="scheduledReclaimBy")
    def scheduled_reclaim_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The subject who initiated the instance reclamation.
        """
        return pulumi.get(self, "scheduled_reclaim_by")

    @scheduled_reclaim_by.setter
    def scheduled_reclaim_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scheduled_reclaim_by", value)

    @_builtins.property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the service offering `hs-crypto`
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service", value)

    @_builtins.property
    @pulumi.getter(name="serviceEndpoints")
    def service_endpoints(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Types of the service endpoints. Possible values are `public-and-private`, `private-only`.
        """
        return pulumi.get(self, "service_endpoints")

    @service_endpoints.setter
    def service_endpoints(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_endpoints", value)

    @_builtins.property
    @pulumi.getter(name="signatureServerUrl")
    def signature_server_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        URL of signing service
        """
        return pulumi.get(self, "signature_server_url")

    @signature_server_url.setter
    def signature_server_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "signature_server_url", value)

    @_builtins.property
    @pulumi.getter(name="signatureThreshold")
    def signature_threshold(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Signature Threshold Value
        """
        return pulumi.get(self, "signature_threshold")

    @signature_threshold.setter
    def signature_threshold(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "signature_threshold", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The current state of the instance.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Status of HPCS instance
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['HpcsTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['HpcsTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def units(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The number of operational crypto units for your service instance
        """
        return pulumi.get(self, "units")

    @units.setter
    def units(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "units", value)

    @_builtins.property
    @pulumi.getter(name="updateAt")
    def update_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date when the instance was last updated.
        """
        return pulumi.get(self, "update_at")

    @update_at.setter
    def update_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "update_at", value)

    @_builtins.property
    @pulumi.getter(name="updateBy")
    def update_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The subject who updated the instance.
        """
        return pulumi.get(self, "update_by")

    @update_by.setter
    def update_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "update_by", value)


@pulumi.type_token("ibm:index/hpcs:Hpcs")
class Hpcs(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admins: Optional[pulumi.Input[Sequence[pulumi.Input[Union['HpcsAdminArgs', 'HpcsAdminArgsDict']]]]] = None,
                 failover_units: Optional[pulumi.Input[_builtins.float]] = None,
                 hpcs_id: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 plan: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 revocation_threshold: Optional[pulumi.Input[_builtins.float]] = None,
                 service: Optional[pulumi.Input[_builtins.str]] = None,
                 service_endpoints: Optional[pulumi.Input[_builtins.str]] = None,
                 signature_server_url: Optional[pulumi.Input[_builtins.str]] = None,
                 signature_threshold: Optional[pulumi.Input[_builtins.float]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['HpcsTimeoutsArgs', 'HpcsTimeoutsArgsDict']]] = None,
                 units: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a Hpcs resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['HpcsAdminArgs', 'HpcsAdminArgsDict']]]] admins: Crypto Unit Administrators
        :param pulumi.Input[_builtins.float] failover_units: The number of failover crypto units for your service instance
        :param pulumi.Input[_builtins.str] location: The location where the HPCS instance available
        :param pulumi.Input[_builtins.str] name: A name for the HPCS instance
        :param pulumi.Input[_builtins.str] plan: The plan type of the HPCS Instance
        :param pulumi.Input[_builtins.str] resource_group_id: The resource group id
        :param pulumi.Input[_builtins.float] revocation_threshold: Revocation Threshold Value
        :param pulumi.Input[_builtins.str] service: The name of the service offering `hs-crypto`
        :param pulumi.Input[_builtins.str] service_endpoints: Types of the service endpoints. Possible values are `public-and-private`, `private-only`.
        :param pulumi.Input[_builtins.str] signature_server_url: URL of signing service
        :param pulumi.Input[_builtins.float] signature_threshold: Signature Threshold Value
        :param pulumi.Input[_builtins.float] units: The number of operational crypto units for your service instance
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: HpcsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Hpcs resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param HpcsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(HpcsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admins: Optional[pulumi.Input[Sequence[pulumi.Input[Union['HpcsAdminArgs', 'HpcsAdminArgsDict']]]]] = None,
                 failover_units: Optional[pulumi.Input[_builtins.float]] = None,
                 hpcs_id: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 plan: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 revocation_threshold: Optional[pulumi.Input[_builtins.float]] = None,
                 service: Optional[pulumi.Input[_builtins.str]] = None,
                 service_endpoints: Optional[pulumi.Input[_builtins.str]] = None,
                 signature_server_url: Optional[pulumi.Input[_builtins.str]] = None,
                 signature_threshold: Optional[pulumi.Input[_builtins.float]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['HpcsTimeoutsArgs', 'HpcsTimeoutsArgsDict']]] = None,
                 units: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = HpcsArgs.__new__(HpcsArgs)

            if admins is None and not opts.urn:
                raise TypeError("Missing required property 'admins'")
            __props__.__dict__["admins"] = admins
            __props__.__dict__["failover_units"] = failover_units
            __props__.__dict__["hpcs_id"] = hpcs_id
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            if plan is None and not opts.urn:
                raise TypeError("Missing required property 'plan'")
            __props__.__dict__["plan"] = plan
            __props__.__dict__["resource_group_id"] = resource_group_id
            if revocation_threshold is None and not opts.urn:
                raise TypeError("Missing required property 'revocation_threshold'")
            __props__.__dict__["revocation_threshold"] = revocation_threshold
            __props__.__dict__["service"] = service
            __props__.__dict__["service_endpoints"] = service_endpoints
            __props__.__dict__["signature_server_url"] = signature_server_url
            if signature_threshold is None and not opts.urn:
                raise TypeError("Missing required property 'signature_threshold'")
            __props__.__dict__["signature_threshold"] = signature_threshold
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeouts"] = timeouts
            if units is None and not opts.urn:
                raise TypeError("Missing required property 'units'")
            __props__.__dict__["units"] = units
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["dashboard_url"] = None
            __props__.__dict__["deleted_at"] = None
            __props__.__dict__["deleted_by"] = None
            __props__.__dict__["extensions"] = None
            __props__.__dict__["guid"] = None
            __props__.__dict__["hsm_infos"] = None
            __props__.__dict__["resource_aliases_url"] = None
            __props__.__dict__["resource_bindings_url"] = None
            __props__.__dict__["resource_keys_url"] = None
            __props__.__dict__["restored_at"] = None
            __props__.__dict__["restored_by"] = None
            __props__.__dict__["scheduled_reclaim_at"] = None
            __props__.__dict__["scheduled_reclaim_by"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["update_at"] = None
            __props__.__dict__["update_by"] = None
        super(Hpcs, __self__).__init__(
            'ibm:index/hpcs:Hpcs',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            admins: Optional[pulumi.Input[Sequence[pulumi.Input[Union['HpcsAdminArgs', 'HpcsAdminArgsDict']]]]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            created_by: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            dashboard_url: Optional[pulumi.Input[_builtins.str]] = None,
            deleted_at: Optional[pulumi.Input[_builtins.str]] = None,
            deleted_by: Optional[pulumi.Input[_builtins.str]] = None,
            extensions: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            failover_units: Optional[pulumi.Input[_builtins.float]] = None,
            guid: Optional[pulumi.Input[_builtins.str]] = None,
            hpcs_id: Optional[pulumi.Input[_builtins.str]] = None,
            hsm_infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['HpcsHsmInfoArgs', 'HpcsHsmInfoArgsDict']]]]] = None,
            location: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            plan: Optional[pulumi.Input[_builtins.str]] = None,
            resource_aliases_url: Optional[pulumi.Input[_builtins.str]] = None,
            resource_bindings_url: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            resource_keys_url: Optional[pulumi.Input[_builtins.str]] = None,
            restored_at: Optional[pulumi.Input[_builtins.str]] = None,
            restored_by: Optional[pulumi.Input[_builtins.str]] = None,
            revocation_threshold: Optional[pulumi.Input[_builtins.float]] = None,
            scheduled_reclaim_at: Optional[pulumi.Input[_builtins.str]] = None,
            scheduled_reclaim_by: Optional[pulumi.Input[_builtins.str]] = None,
            service: Optional[pulumi.Input[_builtins.str]] = None,
            service_endpoints: Optional[pulumi.Input[_builtins.str]] = None,
            signature_server_url: Optional[pulumi.Input[_builtins.str]] = None,
            signature_threshold: Optional[pulumi.Input[_builtins.float]] = None,
            state: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            timeouts: Optional[pulumi.Input[Union['HpcsTimeoutsArgs', 'HpcsTimeoutsArgsDict']]] = None,
            units: Optional[pulumi.Input[_builtins.float]] = None,
            update_at: Optional[pulumi.Input[_builtins.str]] = None,
            update_by: Optional[pulumi.Input[_builtins.str]] = None) -> 'Hpcs':
        """
        Get an existing Hpcs resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['HpcsAdminArgs', 'HpcsAdminArgsDict']]]] admins: Crypto Unit Administrators
        :param pulumi.Input[_builtins.str] created_at: The date when the instance was created.
        :param pulumi.Input[_builtins.str] created_by: The subject who created the instance.
        :param pulumi.Input[_builtins.str] crn: CRN of HPCS instance
        :param pulumi.Input[_builtins.str] dashboard_url: Dashboard URL to access resource.
        :param pulumi.Input[_builtins.str] deleted_at: The date when the instance was deleted.
        :param pulumi.Input[_builtins.str] deleted_by: The subject who deleted the instance.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] extensions: The extended metadata as a map associated with the HPCS instance.
        :param pulumi.Input[_builtins.float] failover_units: The number of failover crypto units for your service instance
        :param pulumi.Input[_builtins.str] guid: Guid of HPCS instance
        :param pulumi.Input[Sequence[pulumi.Input[Union['HpcsHsmInfoArgs', 'HpcsHsmInfoArgsDict']]]] hsm_infos: HSM Configuration
        :param pulumi.Input[_builtins.str] location: The location where the HPCS instance available
        :param pulumi.Input[_builtins.str] name: A name for the HPCS instance
        :param pulumi.Input[_builtins.str] plan: The plan type of the HPCS Instance
        :param pulumi.Input[_builtins.str] resource_aliases_url: The relative path to the resource aliases for the instance.
        :param pulumi.Input[_builtins.str] resource_bindings_url: The relative path to the resource bindings for the instance.
        :param pulumi.Input[_builtins.str] resource_group_id: The resource group id
        :param pulumi.Input[_builtins.str] resource_keys_url: The relative path to the resource keys for the instance.
        :param pulumi.Input[_builtins.str] restored_at: The date when the instance under reclamation was restored.
        :param pulumi.Input[_builtins.str] restored_by: The subject who restored the instance back from reclamation.
        :param pulumi.Input[_builtins.float] revocation_threshold: Revocation Threshold Value
        :param pulumi.Input[_builtins.str] scheduled_reclaim_at: The date when the instance was scheduled for reclamation.
        :param pulumi.Input[_builtins.str] scheduled_reclaim_by: The subject who initiated the instance reclamation.
        :param pulumi.Input[_builtins.str] service: The name of the service offering `hs-crypto`
        :param pulumi.Input[_builtins.str] service_endpoints: Types of the service endpoints. Possible values are `public-and-private`, `private-only`.
        :param pulumi.Input[_builtins.str] signature_server_url: URL of signing service
        :param pulumi.Input[_builtins.float] signature_threshold: Signature Threshold Value
        :param pulumi.Input[_builtins.str] state: The current state of the instance.
        :param pulumi.Input[_builtins.str] status: Status of HPCS instance
        :param pulumi.Input[_builtins.float] units: The number of operational crypto units for your service instance
        :param pulumi.Input[_builtins.str] update_at: The date when the instance was last updated.
        :param pulumi.Input[_builtins.str] update_by: The subject who updated the instance.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _HpcsState.__new__(_HpcsState)

        __props__.__dict__["admins"] = admins
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["crn"] = crn
        __props__.__dict__["dashboard_url"] = dashboard_url
        __props__.__dict__["deleted_at"] = deleted_at
        __props__.__dict__["deleted_by"] = deleted_by
        __props__.__dict__["extensions"] = extensions
        __props__.__dict__["failover_units"] = failover_units
        __props__.__dict__["guid"] = guid
        __props__.__dict__["hpcs_id"] = hpcs_id
        __props__.__dict__["hsm_infos"] = hsm_infos
        __props__.__dict__["location"] = location
        __props__.__dict__["name"] = name
        __props__.__dict__["plan"] = plan
        __props__.__dict__["resource_aliases_url"] = resource_aliases_url
        __props__.__dict__["resource_bindings_url"] = resource_bindings_url
        __props__.__dict__["resource_group_id"] = resource_group_id
        __props__.__dict__["resource_keys_url"] = resource_keys_url
        __props__.__dict__["restored_at"] = restored_at
        __props__.__dict__["restored_by"] = restored_by
        __props__.__dict__["revocation_threshold"] = revocation_threshold
        __props__.__dict__["scheduled_reclaim_at"] = scheduled_reclaim_at
        __props__.__dict__["scheduled_reclaim_by"] = scheduled_reclaim_by
        __props__.__dict__["service"] = service
        __props__.__dict__["service_endpoints"] = service_endpoints
        __props__.__dict__["signature_server_url"] = signature_server_url
        __props__.__dict__["signature_threshold"] = signature_threshold
        __props__.__dict__["state"] = state
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["units"] = units
        __props__.__dict__["update_at"] = update_at
        __props__.__dict__["update_by"] = update_by
        return Hpcs(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def admins(self) -> pulumi.Output[Sequence['outputs.HpcsAdmin']]:
        """
        Crypto Unit Administrators
        """
        return pulumi.get(self, "admins")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date when the instance was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[_builtins.str]:
        """
        The subject who created the instance.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        CRN of HPCS instance
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="dashboardUrl")
    def dashboard_url(self) -> pulumi.Output[_builtins.str]:
        """
        Dashboard URL to access resource.
        """
        return pulumi.get(self, "dashboard_url")

    @_builtins.property
    @pulumi.getter(name="deletedAt")
    def deleted_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date when the instance was deleted.
        """
        return pulumi.get(self, "deleted_at")

    @_builtins.property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> pulumi.Output[_builtins.str]:
        """
        The subject who deleted the instance.
        """
        return pulumi.get(self, "deleted_by")

    @_builtins.property
    @pulumi.getter
    def extensions(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        The extended metadata as a map associated with the HPCS instance.
        """
        return pulumi.get(self, "extensions")

    @_builtins.property
    @pulumi.getter(name="failoverUnits")
    def failover_units(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        The number of failover crypto units for your service instance
        """
        return pulumi.get(self, "failover_units")

    @_builtins.property
    @pulumi.getter
    def guid(self) -> pulumi.Output[_builtins.str]:
        """
        Guid of HPCS instance
        """
        return pulumi.get(self, "guid")

    @_builtins.property
    @pulumi.getter(name="hpcsId")
    def hpcs_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "hpcs_id")

    @_builtins.property
    @pulumi.getter(name="hsmInfos")
    def hsm_infos(self) -> pulumi.Output[Sequence['outputs.HpcsHsmInfo']]:
        """
        HSM Configuration
        """
        return pulumi.get(self, "hsm_infos")

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Output[_builtins.str]:
        """
        The location where the HPCS instance available
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        A name for the HPCS instance
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def plan(self) -> pulumi.Output[_builtins.str]:
        """
        The plan type of the HPCS Instance
        """
        return pulumi.get(self, "plan")

    @_builtins.property
    @pulumi.getter(name="resourceAliasesUrl")
    def resource_aliases_url(self) -> pulumi.Output[_builtins.str]:
        """
        The relative path to the resource aliases for the instance.
        """
        return pulumi.get(self, "resource_aliases_url")

    @_builtins.property
    @pulumi.getter(name="resourceBindingsUrl")
    def resource_bindings_url(self) -> pulumi.Output[_builtins.str]:
        """
        The relative path to the resource bindings for the instance.
        """
        return pulumi.get(self, "resource_bindings_url")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        The resource group id
        """
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter(name="resourceKeysUrl")
    def resource_keys_url(self) -> pulumi.Output[_builtins.str]:
        """
        The relative path to the resource keys for the instance.
        """
        return pulumi.get(self, "resource_keys_url")

    @_builtins.property
    @pulumi.getter(name="restoredAt")
    def restored_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date when the instance under reclamation was restored.
        """
        return pulumi.get(self, "restored_at")

    @_builtins.property
    @pulumi.getter(name="restoredBy")
    def restored_by(self) -> pulumi.Output[_builtins.str]:
        """
        The subject who restored the instance back from reclamation.
        """
        return pulumi.get(self, "restored_by")

    @_builtins.property
    @pulumi.getter(name="revocationThreshold")
    def revocation_threshold(self) -> pulumi.Output[_builtins.float]:
        """
        Revocation Threshold Value
        """
        return pulumi.get(self, "revocation_threshold")

    @_builtins.property
    @pulumi.getter(name="scheduledReclaimAt")
    def scheduled_reclaim_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date when the instance was scheduled for reclamation.
        """
        return pulumi.get(self, "scheduled_reclaim_at")

    @_builtins.property
    @pulumi.getter(name="scheduledReclaimBy")
    def scheduled_reclaim_by(self) -> pulumi.Output[_builtins.str]:
        """
        The subject who initiated the instance reclamation.
        """
        return pulumi.get(self, "scheduled_reclaim_by")

    @_builtins.property
    @pulumi.getter
    def service(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The name of the service offering `hs-crypto`
        """
        return pulumi.get(self, "service")

    @_builtins.property
    @pulumi.getter(name="serviceEndpoints")
    def service_endpoints(self) -> pulumi.Output[_builtins.str]:
        """
        Types of the service endpoints. Possible values are `public-and-private`, `private-only`.
        """
        return pulumi.get(self, "service_endpoints")

    @_builtins.property
    @pulumi.getter(name="signatureServerUrl")
    def signature_server_url(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        URL of signing service
        """
        return pulumi.get(self, "signature_server_url")

    @_builtins.property
    @pulumi.getter(name="signatureThreshold")
    def signature_threshold(self) -> pulumi.Output[_builtins.float]:
        """
        Signature Threshold Value
        """
        return pulumi.get(self, "signature_threshold")

    @_builtins.property
    @pulumi.getter
    def state(self) -> pulumi.Output[_builtins.str]:
        """
        The current state of the instance.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Status of HPCS instance
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.HpcsTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def units(self) -> pulumi.Output[_builtins.float]:
        """
        The number of operational crypto units for your service instance
        """
        return pulumi.get(self, "units")

    @_builtins.property
    @pulumi.getter(name="updateAt")
    def update_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date when the instance was last updated.
        """
        return pulumi.get(self, "update_at")

    @_builtins.property
    @pulumi.getter(name="updateBy")
    def update_by(self) -> pulumi.Output[_builtins.str]:
        """
        The subject who updated the instance.
        """
        return pulumi.get(self, "update_by")

