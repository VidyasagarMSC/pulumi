# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCisOriginCertificatesResult',
    'AwaitableGetCisOriginCertificatesResult',
    'get_cis_origin_certificates',
    'get_cis_origin_certificates_output',
]

@pulumi.output_type
class GetCisOriginCertificatesResult:
    """
    A collection of values returned by getCisOriginCertificates.
    """
    def __init__(__self__, certificate_id=None, cis_id=None, domain_id=None, id=None, origin_certificate_lists=None):
        if certificate_id and not isinstance(certificate_id, str):
            raise TypeError("Expected argument 'certificate_id' to be a str")
        pulumi.set(__self__, "certificate_id", certificate_id)
        if cis_id and not isinstance(cis_id, str):
            raise TypeError("Expected argument 'cis_id' to be a str")
        pulumi.set(__self__, "cis_id", cis_id)
        if domain_id and not isinstance(domain_id, str):
            raise TypeError("Expected argument 'domain_id' to be a str")
        pulumi.set(__self__, "domain_id", domain_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if origin_certificate_lists and not isinstance(origin_certificate_lists, list):
            raise TypeError("Expected argument 'origin_certificate_lists' to be a list")
        pulumi.set(__self__, "origin_certificate_lists", origin_certificate_lists)

    @_builtins.property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "certificate_id")

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> _builtins.str:
        return pulumi.get(self, "cis_id")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="originCertificateLists")
    def origin_certificate_lists(self) -> Sequence['outputs.GetCisOriginCertificatesOriginCertificateListResult']:
        return pulumi.get(self, "origin_certificate_lists")


class AwaitableGetCisOriginCertificatesResult(GetCisOriginCertificatesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCisOriginCertificatesResult(
            certificate_id=self.certificate_id,
            cis_id=self.cis_id,
            domain_id=self.domain_id,
            id=self.id,
            origin_certificate_lists=self.origin_certificate_lists)


def get_cis_origin_certificates(certificate_id: Optional[_builtins.str] = None,
                                cis_id: Optional[_builtins.str] = None,
                                domain_id: Optional[_builtins.str] = None,
                                id: Optional[_builtins.str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCisOriginCertificatesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['certificateId'] = certificate_id
    __args__['cisId'] = cis_id
    __args__['domainId'] = domain_id
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCisOriginCertificates:getCisOriginCertificates', __args__, opts=opts, typ=GetCisOriginCertificatesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCisOriginCertificatesResult(
        certificate_id=pulumi.get(__ret__, 'certificate_id'),
        cis_id=pulumi.get(__ret__, 'cis_id'),
        domain_id=pulumi.get(__ret__, 'domain_id'),
        id=pulumi.get(__ret__, 'id'),
        origin_certificate_lists=pulumi.get(__ret__, 'origin_certificate_lists'))
def get_cis_origin_certificates_output(certificate_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                                       domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                                       id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCisOriginCertificatesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['certificateId'] = certificate_id
    __args__['cisId'] = cis_id
    __args__['domainId'] = domain_id
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCisOriginCertificates:getCisOriginCertificates', __args__, opts=opts, typ=GetCisOriginCertificatesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCisOriginCertificatesResult(
        certificate_id=pulumi.get(__response__, 'certificate_id'),
        cis_id=pulumi.get(__response__, 'cis_id'),
        domain_id=pulumi.get(__response__, 'domain_id'),
        id=pulumi.get(__response__, 'id'),
        origin_certificate_lists=pulumi.get(__response__, 'origin_certificate_lists')))
