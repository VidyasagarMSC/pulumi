# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsInstanceTemplateArgs', 'IsInstanceTemplate']

@pulumi.input_type
class IsInstanceTemplateArgs:
    def __init__(__self__, *,
                 keys: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 profile: pulumi.Input[_builtins.str],
                 vpc: pulumi.Input[_builtins.str],
                 zone: pulumi.Input[_builtins.str],
                 availability_policy_host_failure: Optional[pulumi.Input[_builtins.str]] = None,
                 boot_volume: Optional[pulumi.Input['IsInstanceTemplateBootVolumeArgs']] = None,
                 catalog_offering: Optional[pulumi.Input['IsInstanceTemplateCatalogOfferingArgs']] = None,
                 cluster_network_attachments: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceTemplateClusterNetworkAttachmentArgs']]]] = None,
                 confidential_compute_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 dedicated_host: Optional[pulumi.Input[_builtins.str]] = None,
                 dedicated_host_group: Optional[pulumi.Input[_builtins.str]] = None,
                 default_trusted_profile_auto_link: Optional[pulumi.Input[_builtins.bool]] = None,
                 default_trusted_profile_target: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_secure_boot: Optional[pulumi.Input[_builtins.bool]] = None,
                 image: Optional[pulumi.Input[_builtins.str]] = None,
                 is_instance_template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 metadata_service: Optional[pulumi.Input['IsInstanceTemplateMetadataServiceArgs']] = None,
                 metadata_service_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_attachments: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceTemplateNetworkAttachmentArgs']]]] = None,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceTemplateNetworkInterfaceArgs']]]] = None,
                 placement_group: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_network_attachment: Optional[pulumi.Input['IsInstanceTemplatePrimaryNetworkAttachmentArgs']] = None,
                 primary_network_interface: Optional[pulumi.Input['IsInstanceTemplatePrimaryNetworkInterfaceArgs']] = None,
                 reservation_affinities: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceTemplateReservationAffinityArgs']]]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 total_volume_bandwidth: Optional[pulumi.Input[_builtins.float]] = None,
                 user_data: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_attachments: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceTemplateVolumeAttachmentArgs']]]] = None):
        """
        The set of arguments for constructing a IsInstanceTemplate resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] keys: SSH key Ids for the instance template
        :param pulumi.Input[_builtins.str] profile: Profile info
        :param pulumi.Input[_builtins.str] vpc: VPC id
        :param pulumi.Input[_builtins.str] zone: Zone name
        :param pulumi.Input[_builtins.str] availability_policy_host_failure: The availability policy to use for this virtual server instance
        :param pulumi.Input['IsInstanceTemplateCatalogOfferingArgs'] catalog_offering: The catalog offering or offering version to use when provisioning this virtual server instance template. If an offering
               is specified, the latest version of that offering will be used. The specified offering or offering version may be in a
               different account in the same enterprise, subject to IAM policies.
        :param pulumi.Input[Sequence[pulumi.Input['IsInstanceTemplateClusterNetworkAttachmentArgs']]] cluster_network_attachments: The cluster network attachments to create for this virtual server instance. A cluster network attachment represents a
               device that is connected to a cluster network. The number of network attachments must match one of the values from the
               instance profile's `cluster_network_attachment_count` before the instance can be started.
        :param pulumi.Input[_builtins.str] confidential_compute_mode: The confidential compute mode to use for this virtual server instance.If unspecified, the default confidential compute
               mode from the profile will be used.
        :param pulumi.Input[_builtins.str] dedicated_host: Unique Identifier of the Dedicated Host where the instance will be placed
        :param pulumi.Input[_builtins.str] dedicated_host_group: Unique Identifier of the Dedicated Host Group where the instance will be placed
        :param pulumi.Input[_builtins.bool] default_trusted_profile_auto_link: If set to `true`, the system will create a link to the specified `target` trusted profile during instance creation.
               Regardless of whether a link is created by the system or manually using the IAM Identity service, it will be
               automatically deleted when the instance is deleted.
        :param pulumi.Input[_builtins.str] default_trusted_profile_target: The unique identifier or CRN of the default IAM trusted profile to use for this virtual server instance.
        :param pulumi.Input[_builtins.bool] enable_secure_boot: Indicates whether secure boot is enabled for this virtual server instance.If unspecified, the default secure boot mode
               from the profile will be used.
        :param pulumi.Input[_builtins.str] image: image name
        :param pulumi.Input['IsInstanceTemplateMetadataServiceArgs'] metadata_service: The metadata service configuration
        :param pulumi.Input[_builtins.bool] metadata_service_enabled: Indicates whether the metadata service endpoint is available to the virtual server instance
        :param pulumi.Input[_builtins.str] name: Instance Template name
        :param pulumi.Input[Sequence[pulumi.Input['IsInstanceTemplateNetworkAttachmentArgs']]] network_attachments: The network attachments for this virtual server instance, including the primary network attachment.
        :param pulumi.Input[_builtins.str] placement_group: Unique Identifier of the Placement Group for restricting the placement of the instance
        :param pulumi.Input['IsInstanceTemplatePrimaryNetworkAttachmentArgs'] primary_network_attachment: The primary network attachment for this virtual server instance.
        :param pulumi.Input['IsInstanceTemplatePrimaryNetworkInterfaceArgs'] primary_network_interface: Primary Network interface info
        :param pulumi.Input[_builtins.str] resource_group: Instance template resource group
        :param pulumi.Input[_builtins.float] total_volume_bandwidth: The amount of bandwidth (in megabits per second) allocated exclusively to instance storage volumes
        :param pulumi.Input[_builtins.str] user_data: User data given for the instance
        """
        pulumi.set(__self__, "keys", keys)
        pulumi.set(__self__, "profile", profile)
        pulumi.set(__self__, "vpc", vpc)
        pulumi.set(__self__, "zone", zone)
        if availability_policy_host_failure is not None:
            pulumi.set(__self__, "availability_policy_host_failure", availability_policy_host_failure)
        if boot_volume is not None:
            pulumi.set(__self__, "boot_volume", boot_volume)
        if catalog_offering is not None:
            pulumi.set(__self__, "catalog_offering", catalog_offering)
        if cluster_network_attachments is not None:
            pulumi.set(__self__, "cluster_network_attachments", cluster_network_attachments)
        if confidential_compute_mode is not None:
            pulumi.set(__self__, "confidential_compute_mode", confidential_compute_mode)
        if dedicated_host is not None:
            pulumi.set(__self__, "dedicated_host", dedicated_host)
        if dedicated_host_group is not None:
            pulumi.set(__self__, "dedicated_host_group", dedicated_host_group)
        if default_trusted_profile_auto_link is not None:
            pulumi.set(__self__, "default_trusted_profile_auto_link", default_trusted_profile_auto_link)
        if default_trusted_profile_target is not None:
            pulumi.set(__self__, "default_trusted_profile_target", default_trusted_profile_target)
        if enable_secure_boot is not None:
            pulumi.set(__self__, "enable_secure_boot", enable_secure_boot)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if is_instance_template_id is not None:
            pulumi.set(__self__, "is_instance_template_id", is_instance_template_id)
        if metadata_service is not None:
            pulumi.set(__self__, "metadata_service", metadata_service)
        if metadata_service_enabled is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""metadata_service_enabled is deprecated: Deprecated""")
        if metadata_service_enabled is not None:
            pulumi.set(__self__, "metadata_service_enabled", metadata_service_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_attachments is not None:
            pulumi.set(__self__, "network_attachments", network_attachments)
        if network_interfaces is not None:
            pulumi.set(__self__, "network_interfaces", network_interfaces)
        if placement_group is not None:
            pulumi.set(__self__, "placement_group", placement_group)
        if primary_network_attachment is not None:
            pulumi.set(__self__, "primary_network_attachment", primary_network_attachment)
        if primary_network_interface is not None:
            pulumi.set(__self__, "primary_network_interface", primary_network_interface)
        if reservation_affinities is not None:
            pulumi.set(__self__, "reservation_affinities", reservation_affinities)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if total_volume_bandwidth is not None:
            pulumi.set(__self__, "total_volume_bandwidth", total_volume_bandwidth)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)
        if volume_attachments is not None:
            pulumi.set(__self__, "volume_attachments", volume_attachments)

    @_builtins.property
    @pulumi.getter
    def keys(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        SSH key Ids for the instance template
        """
        return pulumi.get(self, "keys")

    @keys.setter
    def keys(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "keys", value)

    @_builtins.property
    @pulumi.getter
    def profile(self) -> pulumi.Input[_builtins.str]:
        """
        Profile info
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "profile", value)

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> pulumi.Input[_builtins.str]:
        """
        VPC id
        """
        return pulumi.get(self, "vpc")

    @vpc.setter
    def vpc(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vpc", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> pulumi.Input[_builtins.str]:
        """
        Zone name
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "zone", value)

    @_builtins.property
    @pulumi.getter(name="availabilityPolicyHostFailure")
    def availability_policy_host_failure(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The availability policy to use for this virtual server instance
        """
        return pulumi.get(self, "availability_policy_host_failure")

    @availability_policy_host_failure.setter
    def availability_policy_host_failure(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "availability_policy_host_failure", value)

    @_builtins.property
    @pulumi.getter(name="bootVolume")
    def boot_volume(self) -> Optional[pulumi.Input['IsInstanceTemplateBootVolumeArgs']]:
        return pulumi.get(self, "boot_volume")

    @boot_volume.setter
    def boot_volume(self, value: Optional[pulumi.Input['IsInstanceTemplateBootVolumeArgs']]):
        pulumi.set(self, "boot_volume", value)

    @_builtins.property
    @pulumi.getter(name="catalogOffering")
    def catalog_offering(self) -> Optional[pulumi.Input['IsInstanceTemplateCatalogOfferingArgs']]:
        """
        The catalog offering or offering version to use when provisioning this virtual server instance template. If an offering
        is specified, the latest version of that offering will be used. The specified offering or offering version may be in a
        different account in the same enterprise, subject to IAM policies.
        """
        return pulumi.get(self, "catalog_offering")

    @catalog_offering.setter
    def catalog_offering(self, value: Optional[pulumi.Input['IsInstanceTemplateCatalogOfferingArgs']]):
        pulumi.set(self, "catalog_offering", value)

    @_builtins.property
    @pulumi.getter(name="clusterNetworkAttachments")
    def cluster_network_attachments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceTemplateClusterNetworkAttachmentArgs']]]]:
        """
        The cluster network attachments to create for this virtual server instance. A cluster network attachment represents a
        device that is connected to a cluster network. The number of network attachments must match one of the values from the
        instance profile's `cluster_network_attachment_count` before the instance can be started.
        """
        return pulumi.get(self, "cluster_network_attachments")

    @cluster_network_attachments.setter
    def cluster_network_attachments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceTemplateClusterNetworkAttachmentArgs']]]]):
        pulumi.set(self, "cluster_network_attachments", value)

    @_builtins.property
    @pulumi.getter(name="confidentialComputeMode")
    def confidential_compute_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The confidential compute mode to use for this virtual server instance.If unspecified, the default confidential compute
        mode from the profile will be used.
        """
        return pulumi.get(self, "confidential_compute_mode")

    @confidential_compute_mode.setter
    def confidential_compute_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "confidential_compute_mode", value)

    @_builtins.property
    @pulumi.getter(name="dedicatedHost")
    def dedicated_host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique Identifier of the Dedicated Host where the instance will be placed
        """
        return pulumi.get(self, "dedicated_host")

    @dedicated_host.setter
    def dedicated_host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dedicated_host", value)

    @_builtins.property
    @pulumi.getter(name="dedicatedHostGroup")
    def dedicated_host_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique Identifier of the Dedicated Host Group where the instance will be placed
        """
        return pulumi.get(self, "dedicated_host_group")

    @dedicated_host_group.setter
    def dedicated_host_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dedicated_host_group", value)

    @_builtins.property
    @pulumi.getter(name="defaultTrustedProfileAutoLink")
    def default_trusted_profile_auto_link(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to `true`, the system will create a link to the specified `target` trusted profile during instance creation.
        Regardless of whether a link is created by the system or manually using the IAM Identity service, it will be
        automatically deleted when the instance is deleted.
        """
        return pulumi.get(self, "default_trusted_profile_auto_link")

    @default_trusted_profile_auto_link.setter
    def default_trusted_profile_auto_link(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "default_trusted_profile_auto_link", value)

    @_builtins.property
    @pulumi.getter(name="defaultTrustedProfileTarget")
    def default_trusted_profile_target(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier or CRN of the default IAM trusted profile to use for this virtual server instance.
        """
        return pulumi.get(self, "default_trusted_profile_target")

    @default_trusted_profile_target.setter
    def default_trusted_profile_target(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_trusted_profile_target", value)

    @_builtins.property
    @pulumi.getter(name="enableSecureBoot")
    def enable_secure_boot(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether secure boot is enabled for this virtual server instance.If unspecified, the default secure boot mode
        from the profile will be used.
        """
        return pulumi.get(self, "enable_secure_boot")

    @enable_secure_boot.setter
    def enable_secure_boot(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_secure_boot", value)

    @_builtins.property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        image name
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image", value)

    @_builtins.property
    @pulumi.getter(name="isInstanceTemplateId")
    def is_instance_template_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_instance_template_id")

    @is_instance_template_id.setter
    def is_instance_template_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_instance_template_id", value)

    @_builtins.property
    @pulumi.getter(name="metadataService")
    def metadata_service(self) -> Optional[pulumi.Input['IsInstanceTemplateMetadataServiceArgs']]:
        """
        The metadata service configuration
        """
        return pulumi.get(self, "metadata_service")

    @metadata_service.setter
    def metadata_service(self, value: Optional[pulumi.Input['IsInstanceTemplateMetadataServiceArgs']]):
        pulumi.set(self, "metadata_service", value)

    @_builtins.property
    @pulumi.getter(name="metadataServiceEnabled")
    @_utilities.deprecated("""Deprecated""")
    def metadata_service_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the metadata service endpoint is available to the virtual server instance
        """
        return pulumi.get(self, "metadata_service_enabled")

    @metadata_service_enabled.setter
    def metadata_service_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "metadata_service_enabled", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Instance Template name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="networkAttachments")
    def network_attachments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceTemplateNetworkAttachmentArgs']]]]:
        """
        The network attachments for this virtual server instance, including the primary network attachment.
        """
        return pulumi.get(self, "network_attachments")

    @network_attachments.setter
    def network_attachments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceTemplateNetworkAttachmentArgs']]]]):
        pulumi.set(self, "network_attachments", value)

    @_builtins.property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceTemplateNetworkInterfaceArgs']]]]:
        return pulumi.get(self, "network_interfaces")

    @network_interfaces.setter
    def network_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceTemplateNetworkInterfaceArgs']]]]):
        pulumi.set(self, "network_interfaces", value)

    @_builtins.property
    @pulumi.getter(name="placementGroup")
    def placement_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique Identifier of the Placement Group for restricting the placement of the instance
        """
        return pulumi.get(self, "placement_group")

    @placement_group.setter
    def placement_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "placement_group", value)

    @_builtins.property
    @pulumi.getter(name="primaryNetworkAttachment")
    def primary_network_attachment(self) -> Optional[pulumi.Input['IsInstanceTemplatePrimaryNetworkAttachmentArgs']]:
        """
        The primary network attachment for this virtual server instance.
        """
        return pulumi.get(self, "primary_network_attachment")

    @primary_network_attachment.setter
    def primary_network_attachment(self, value: Optional[pulumi.Input['IsInstanceTemplatePrimaryNetworkAttachmentArgs']]):
        pulumi.set(self, "primary_network_attachment", value)

    @_builtins.property
    @pulumi.getter(name="primaryNetworkInterface")
    def primary_network_interface(self) -> Optional[pulumi.Input['IsInstanceTemplatePrimaryNetworkInterfaceArgs']]:
        """
        Primary Network interface info
        """
        return pulumi.get(self, "primary_network_interface")

    @primary_network_interface.setter
    def primary_network_interface(self, value: Optional[pulumi.Input['IsInstanceTemplatePrimaryNetworkInterfaceArgs']]):
        pulumi.set(self, "primary_network_interface", value)

    @_builtins.property
    @pulumi.getter(name="reservationAffinities")
    def reservation_affinities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceTemplateReservationAffinityArgs']]]]:
        return pulumi.get(self, "reservation_affinities")

    @reservation_affinities.setter
    def reservation_affinities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceTemplateReservationAffinityArgs']]]]):
        pulumi.set(self, "reservation_affinities", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Instance template resource group
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="totalVolumeBandwidth")
    def total_volume_bandwidth(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The amount of bandwidth (in megabits per second) allocated exclusively to instance storage volumes
        """
        return pulumi.get(self, "total_volume_bandwidth")

    @total_volume_bandwidth.setter
    def total_volume_bandwidth(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "total_volume_bandwidth", value)

    @_builtins.property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        User data given for the instance
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_data", value)

    @_builtins.property
    @pulumi.getter(name="volumeAttachments")
    def volume_attachments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceTemplateVolumeAttachmentArgs']]]]:
        return pulumi.get(self, "volume_attachments")

    @volume_attachments.setter
    def volume_attachments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceTemplateVolumeAttachmentArgs']]]]):
        pulumi.set(self, "volume_attachments", value)


@pulumi.input_type
class _IsInstanceTemplateState:
    def __init__(__self__, *,
                 availability_policy_host_failure: Optional[pulumi.Input[_builtins.str]] = None,
                 boot_volume: Optional[pulumi.Input['IsInstanceTemplateBootVolumeArgs']] = None,
                 catalog_offering: Optional[pulumi.Input['IsInstanceTemplateCatalogOfferingArgs']] = None,
                 cluster_network_attachments: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceTemplateClusterNetworkAttachmentArgs']]]] = None,
                 confidential_compute_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 dedicated_host: Optional[pulumi.Input[_builtins.str]] = None,
                 dedicated_host_group: Optional[pulumi.Input[_builtins.str]] = None,
                 default_trusted_profile_auto_link: Optional[pulumi.Input[_builtins.bool]] = None,
                 default_trusted_profile_target: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_secure_boot: Optional[pulumi.Input[_builtins.bool]] = None,
                 image: Optional[pulumi.Input[_builtins.str]] = None,
                 is_instance_template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 metadata_service: Optional[pulumi.Input['IsInstanceTemplateMetadataServiceArgs']] = None,
                 metadata_service_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_attachments: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceTemplateNetworkAttachmentArgs']]]] = None,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceTemplateNetworkInterfaceArgs']]]] = None,
                 placement_group: Optional[pulumi.Input[_builtins.str]] = None,
                 placement_targets: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceTemplatePlacementTargetArgs']]]] = None,
                 primary_network_attachment: Optional[pulumi.Input['IsInstanceTemplatePrimaryNetworkAttachmentArgs']] = None,
                 primary_network_interface: Optional[pulumi.Input['IsInstanceTemplatePrimaryNetworkInterfaceArgs']] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 reservation_affinities: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceTemplateReservationAffinityArgs']]]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 total_volume_bandwidth: Optional[pulumi.Input[_builtins.float]] = None,
                 user_data: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_attachments: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceTemplateVolumeAttachmentArgs']]]] = None,
                 vpc: Optional[pulumi.Input[_builtins.str]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsInstanceTemplate resources.
        :param pulumi.Input[_builtins.str] availability_policy_host_failure: The availability policy to use for this virtual server instance
        :param pulumi.Input['IsInstanceTemplateCatalogOfferingArgs'] catalog_offering: The catalog offering or offering version to use when provisioning this virtual server instance template. If an offering
               is specified, the latest version of that offering will be used. The specified offering or offering version may be in a
               different account in the same enterprise, subject to IAM policies.
        :param pulumi.Input[Sequence[pulumi.Input['IsInstanceTemplateClusterNetworkAttachmentArgs']]] cluster_network_attachments: The cluster network attachments to create for this virtual server instance. A cluster network attachment represents a
               device that is connected to a cluster network. The number of network attachments must match one of the values from the
               instance profile's `cluster_network_attachment_count` before the instance can be started.
        :param pulumi.Input[_builtins.str] confidential_compute_mode: The confidential compute mode to use for this virtual server instance.If unspecified, the default confidential compute
               mode from the profile will be used.
        :param pulumi.Input[_builtins.str] crn: The CRN for the instance
        :param pulumi.Input[_builtins.str] dedicated_host: Unique Identifier of the Dedicated Host where the instance will be placed
        :param pulumi.Input[_builtins.str] dedicated_host_group: Unique Identifier of the Dedicated Host Group where the instance will be placed
        :param pulumi.Input[_builtins.bool] default_trusted_profile_auto_link: If set to `true`, the system will create a link to the specified `target` trusted profile during instance creation.
               Regardless of whether a link is created by the system or manually using the IAM Identity service, it will be
               automatically deleted when the instance is deleted.
        :param pulumi.Input[_builtins.str] default_trusted_profile_target: The unique identifier or CRN of the default IAM trusted profile to use for this virtual server instance.
        :param pulumi.Input[_builtins.bool] enable_secure_boot: Indicates whether secure boot is enabled for this virtual server instance.If unspecified, the default secure boot mode
               from the profile will be used.
        :param pulumi.Input[_builtins.str] image: image name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] keys: SSH key Ids for the instance template
        :param pulumi.Input['IsInstanceTemplateMetadataServiceArgs'] metadata_service: The metadata service configuration
        :param pulumi.Input[_builtins.bool] metadata_service_enabled: Indicates whether the metadata service endpoint is available to the virtual server instance
        :param pulumi.Input[_builtins.str] name: Instance Template name
        :param pulumi.Input[Sequence[pulumi.Input['IsInstanceTemplateNetworkAttachmentArgs']]] network_attachments: The network attachments for this virtual server instance, including the primary network attachment.
        :param pulumi.Input[_builtins.str] placement_group: Unique Identifier of the Placement Group for restricting the placement of the instance
        :param pulumi.Input[Sequence[pulumi.Input['IsInstanceTemplatePlacementTargetArgs']]] placement_targets: The placement restrictions for the virtual server instance.
        :param pulumi.Input['IsInstanceTemplatePrimaryNetworkAttachmentArgs'] primary_network_attachment: The primary network attachment for this virtual server instance.
        :param pulumi.Input['IsInstanceTemplatePrimaryNetworkInterfaceArgs'] primary_network_interface: Primary Network interface info
        :param pulumi.Input[_builtins.str] profile: Profile info
        :param pulumi.Input[_builtins.str] resource_group: Instance template resource group
        :param pulumi.Input[_builtins.float] total_volume_bandwidth: The amount of bandwidth (in megabits per second) allocated exclusively to instance storage volumes
        :param pulumi.Input[_builtins.str] user_data: User data given for the instance
        :param pulumi.Input[_builtins.str] vpc: VPC id
        :param pulumi.Input[_builtins.str] zone: Zone name
        """
        if availability_policy_host_failure is not None:
            pulumi.set(__self__, "availability_policy_host_failure", availability_policy_host_failure)
        if boot_volume is not None:
            pulumi.set(__self__, "boot_volume", boot_volume)
        if catalog_offering is not None:
            pulumi.set(__self__, "catalog_offering", catalog_offering)
        if cluster_network_attachments is not None:
            pulumi.set(__self__, "cluster_network_attachments", cluster_network_attachments)
        if confidential_compute_mode is not None:
            pulumi.set(__self__, "confidential_compute_mode", confidential_compute_mode)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if dedicated_host is not None:
            pulumi.set(__self__, "dedicated_host", dedicated_host)
        if dedicated_host_group is not None:
            pulumi.set(__self__, "dedicated_host_group", dedicated_host_group)
        if default_trusted_profile_auto_link is not None:
            pulumi.set(__self__, "default_trusted_profile_auto_link", default_trusted_profile_auto_link)
        if default_trusted_profile_target is not None:
            pulumi.set(__self__, "default_trusted_profile_target", default_trusted_profile_target)
        if enable_secure_boot is not None:
            pulumi.set(__self__, "enable_secure_boot", enable_secure_boot)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if is_instance_template_id is not None:
            pulumi.set(__self__, "is_instance_template_id", is_instance_template_id)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if metadata_service is not None:
            pulumi.set(__self__, "metadata_service", metadata_service)
        if metadata_service_enabled is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""metadata_service_enabled is deprecated: Deprecated""")
        if metadata_service_enabled is not None:
            pulumi.set(__self__, "metadata_service_enabled", metadata_service_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_attachments is not None:
            pulumi.set(__self__, "network_attachments", network_attachments)
        if network_interfaces is not None:
            pulumi.set(__self__, "network_interfaces", network_interfaces)
        if placement_group is not None:
            pulumi.set(__self__, "placement_group", placement_group)
        if placement_targets is not None:
            pulumi.set(__self__, "placement_targets", placement_targets)
        if primary_network_attachment is not None:
            pulumi.set(__self__, "primary_network_attachment", primary_network_attachment)
        if primary_network_interface is not None:
            pulumi.set(__self__, "primary_network_interface", primary_network_interface)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if reservation_affinities is not None:
            pulumi.set(__self__, "reservation_affinities", reservation_affinities)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if total_volume_bandwidth is not None:
            pulumi.set(__self__, "total_volume_bandwidth", total_volume_bandwidth)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)
        if volume_attachments is not None:
            pulumi.set(__self__, "volume_attachments", volume_attachments)
        if vpc is not None:
            pulumi.set(__self__, "vpc", vpc)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter(name="availabilityPolicyHostFailure")
    def availability_policy_host_failure(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The availability policy to use for this virtual server instance
        """
        return pulumi.get(self, "availability_policy_host_failure")

    @availability_policy_host_failure.setter
    def availability_policy_host_failure(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "availability_policy_host_failure", value)

    @_builtins.property
    @pulumi.getter(name="bootVolume")
    def boot_volume(self) -> Optional[pulumi.Input['IsInstanceTemplateBootVolumeArgs']]:
        return pulumi.get(self, "boot_volume")

    @boot_volume.setter
    def boot_volume(self, value: Optional[pulumi.Input['IsInstanceTemplateBootVolumeArgs']]):
        pulumi.set(self, "boot_volume", value)

    @_builtins.property
    @pulumi.getter(name="catalogOffering")
    def catalog_offering(self) -> Optional[pulumi.Input['IsInstanceTemplateCatalogOfferingArgs']]:
        """
        The catalog offering or offering version to use when provisioning this virtual server instance template. If an offering
        is specified, the latest version of that offering will be used. The specified offering or offering version may be in a
        different account in the same enterprise, subject to IAM policies.
        """
        return pulumi.get(self, "catalog_offering")

    @catalog_offering.setter
    def catalog_offering(self, value: Optional[pulumi.Input['IsInstanceTemplateCatalogOfferingArgs']]):
        pulumi.set(self, "catalog_offering", value)

    @_builtins.property
    @pulumi.getter(name="clusterNetworkAttachments")
    def cluster_network_attachments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceTemplateClusterNetworkAttachmentArgs']]]]:
        """
        The cluster network attachments to create for this virtual server instance. A cluster network attachment represents a
        device that is connected to a cluster network. The number of network attachments must match one of the values from the
        instance profile's `cluster_network_attachment_count` before the instance can be started.
        """
        return pulumi.get(self, "cluster_network_attachments")

    @cluster_network_attachments.setter
    def cluster_network_attachments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceTemplateClusterNetworkAttachmentArgs']]]]):
        pulumi.set(self, "cluster_network_attachments", value)

    @_builtins.property
    @pulumi.getter(name="confidentialComputeMode")
    def confidential_compute_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The confidential compute mode to use for this virtual server instance.If unspecified, the default confidential compute
        mode from the profile will be used.
        """
        return pulumi.get(self, "confidential_compute_mode")

    @confidential_compute_mode.setter
    def confidential_compute_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "confidential_compute_mode", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN for the instance
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="dedicatedHost")
    def dedicated_host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique Identifier of the Dedicated Host where the instance will be placed
        """
        return pulumi.get(self, "dedicated_host")

    @dedicated_host.setter
    def dedicated_host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dedicated_host", value)

    @_builtins.property
    @pulumi.getter(name="dedicatedHostGroup")
    def dedicated_host_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique Identifier of the Dedicated Host Group where the instance will be placed
        """
        return pulumi.get(self, "dedicated_host_group")

    @dedicated_host_group.setter
    def dedicated_host_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dedicated_host_group", value)

    @_builtins.property
    @pulumi.getter(name="defaultTrustedProfileAutoLink")
    def default_trusted_profile_auto_link(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to `true`, the system will create a link to the specified `target` trusted profile during instance creation.
        Regardless of whether a link is created by the system or manually using the IAM Identity service, it will be
        automatically deleted when the instance is deleted.
        """
        return pulumi.get(self, "default_trusted_profile_auto_link")

    @default_trusted_profile_auto_link.setter
    def default_trusted_profile_auto_link(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "default_trusted_profile_auto_link", value)

    @_builtins.property
    @pulumi.getter(name="defaultTrustedProfileTarget")
    def default_trusted_profile_target(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier or CRN of the default IAM trusted profile to use for this virtual server instance.
        """
        return pulumi.get(self, "default_trusted_profile_target")

    @default_trusted_profile_target.setter
    def default_trusted_profile_target(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_trusted_profile_target", value)

    @_builtins.property
    @pulumi.getter(name="enableSecureBoot")
    def enable_secure_boot(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether secure boot is enabled for this virtual server instance.If unspecified, the default secure boot mode
        from the profile will be used.
        """
        return pulumi.get(self, "enable_secure_boot")

    @enable_secure_boot.setter
    def enable_secure_boot(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_secure_boot", value)

    @_builtins.property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        image name
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image", value)

    @_builtins.property
    @pulumi.getter(name="isInstanceTemplateId")
    def is_instance_template_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_instance_template_id")

    @is_instance_template_id.setter
    def is_instance_template_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_instance_template_id", value)

    @_builtins.property
    @pulumi.getter
    def keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        SSH key Ids for the instance template
        """
        return pulumi.get(self, "keys")

    @keys.setter
    def keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "keys", value)

    @_builtins.property
    @pulumi.getter(name="metadataService")
    def metadata_service(self) -> Optional[pulumi.Input['IsInstanceTemplateMetadataServiceArgs']]:
        """
        The metadata service configuration
        """
        return pulumi.get(self, "metadata_service")

    @metadata_service.setter
    def metadata_service(self, value: Optional[pulumi.Input['IsInstanceTemplateMetadataServiceArgs']]):
        pulumi.set(self, "metadata_service", value)

    @_builtins.property
    @pulumi.getter(name="metadataServiceEnabled")
    @_utilities.deprecated("""Deprecated""")
    def metadata_service_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the metadata service endpoint is available to the virtual server instance
        """
        return pulumi.get(self, "metadata_service_enabled")

    @metadata_service_enabled.setter
    def metadata_service_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "metadata_service_enabled", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Instance Template name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="networkAttachments")
    def network_attachments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceTemplateNetworkAttachmentArgs']]]]:
        """
        The network attachments for this virtual server instance, including the primary network attachment.
        """
        return pulumi.get(self, "network_attachments")

    @network_attachments.setter
    def network_attachments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceTemplateNetworkAttachmentArgs']]]]):
        pulumi.set(self, "network_attachments", value)

    @_builtins.property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceTemplateNetworkInterfaceArgs']]]]:
        return pulumi.get(self, "network_interfaces")

    @network_interfaces.setter
    def network_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceTemplateNetworkInterfaceArgs']]]]):
        pulumi.set(self, "network_interfaces", value)

    @_builtins.property
    @pulumi.getter(name="placementGroup")
    def placement_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique Identifier of the Placement Group for restricting the placement of the instance
        """
        return pulumi.get(self, "placement_group")

    @placement_group.setter
    def placement_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "placement_group", value)

    @_builtins.property
    @pulumi.getter(name="placementTargets")
    def placement_targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceTemplatePlacementTargetArgs']]]]:
        """
        The placement restrictions for the virtual server instance.
        """
        return pulumi.get(self, "placement_targets")

    @placement_targets.setter
    def placement_targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceTemplatePlacementTargetArgs']]]]):
        pulumi.set(self, "placement_targets", value)

    @_builtins.property
    @pulumi.getter(name="primaryNetworkAttachment")
    def primary_network_attachment(self) -> Optional[pulumi.Input['IsInstanceTemplatePrimaryNetworkAttachmentArgs']]:
        """
        The primary network attachment for this virtual server instance.
        """
        return pulumi.get(self, "primary_network_attachment")

    @primary_network_attachment.setter
    def primary_network_attachment(self, value: Optional[pulumi.Input['IsInstanceTemplatePrimaryNetworkAttachmentArgs']]):
        pulumi.set(self, "primary_network_attachment", value)

    @_builtins.property
    @pulumi.getter(name="primaryNetworkInterface")
    def primary_network_interface(self) -> Optional[pulumi.Input['IsInstanceTemplatePrimaryNetworkInterfaceArgs']]:
        """
        Primary Network interface info
        """
        return pulumi.get(self, "primary_network_interface")

    @primary_network_interface.setter
    def primary_network_interface(self, value: Optional[pulumi.Input['IsInstanceTemplatePrimaryNetworkInterfaceArgs']]):
        pulumi.set(self, "primary_network_interface", value)

    @_builtins.property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Profile info
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "profile", value)

    @_builtins.property
    @pulumi.getter(name="reservationAffinities")
    def reservation_affinities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceTemplateReservationAffinityArgs']]]]:
        return pulumi.get(self, "reservation_affinities")

    @reservation_affinities.setter
    def reservation_affinities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceTemplateReservationAffinityArgs']]]]):
        pulumi.set(self, "reservation_affinities", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Instance template resource group
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="totalVolumeBandwidth")
    def total_volume_bandwidth(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The amount of bandwidth (in megabits per second) allocated exclusively to instance storage volumes
        """
        return pulumi.get(self, "total_volume_bandwidth")

    @total_volume_bandwidth.setter
    def total_volume_bandwidth(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "total_volume_bandwidth", value)

    @_builtins.property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        User data given for the instance
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_data", value)

    @_builtins.property
    @pulumi.getter(name="volumeAttachments")
    def volume_attachments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceTemplateVolumeAttachmentArgs']]]]:
        return pulumi.get(self, "volume_attachments")

    @volume_attachments.setter
    def volume_attachments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceTemplateVolumeAttachmentArgs']]]]):
        pulumi.set(self, "volume_attachments", value)

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        VPC id
        """
        return pulumi.get(self, "vpc")

    @vpc.setter
    def vpc(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Zone name
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zone", value)


@pulumi.type_token("ibm:index/isInstanceTemplate:IsInstanceTemplate")
class IsInstanceTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 availability_policy_host_failure: Optional[pulumi.Input[_builtins.str]] = None,
                 boot_volume: Optional[pulumi.Input[Union['IsInstanceTemplateBootVolumeArgs', 'IsInstanceTemplateBootVolumeArgsDict']]] = None,
                 catalog_offering: Optional[pulumi.Input[Union['IsInstanceTemplateCatalogOfferingArgs', 'IsInstanceTemplateCatalogOfferingArgsDict']]] = None,
                 cluster_network_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceTemplateClusterNetworkAttachmentArgs', 'IsInstanceTemplateClusterNetworkAttachmentArgsDict']]]]] = None,
                 confidential_compute_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 dedicated_host: Optional[pulumi.Input[_builtins.str]] = None,
                 dedicated_host_group: Optional[pulumi.Input[_builtins.str]] = None,
                 default_trusted_profile_auto_link: Optional[pulumi.Input[_builtins.bool]] = None,
                 default_trusted_profile_target: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_secure_boot: Optional[pulumi.Input[_builtins.bool]] = None,
                 image: Optional[pulumi.Input[_builtins.str]] = None,
                 is_instance_template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 metadata_service: Optional[pulumi.Input[Union['IsInstanceTemplateMetadataServiceArgs', 'IsInstanceTemplateMetadataServiceArgsDict']]] = None,
                 metadata_service_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceTemplateNetworkAttachmentArgs', 'IsInstanceTemplateNetworkAttachmentArgsDict']]]]] = None,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceTemplateNetworkInterfaceArgs', 'IsInstanceTemplateNetworkInterfaceArgsDict']]]]] = None,
                 placement_group: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_network_attachment: Optional[pulumi.Input[Union['IsInstanceTemplatePrimaryNetworkAttachmentArgs', 'IsInstanceTemplatePrimaryNetworkAttachmentArgsDict']]] = None,
                 primary_network_interface: Optional[pulumi.Input[Union['IsInstanceTemplatePrimaryNetworkInterfaceArgs', 'IsInstanceTemplatePrimaryNetworkInterfaceArgsDict']]] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 reservation_affinities: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceTemplateReservationAffinityArgs', 'IsInstanceTemplateReservationAffinityArgsDict']]]]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 total_volume_bandwidth: Optional[pulumi.Input[_builtins.float]] = None,
                 user_data: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceTemplateVolumeAttachmentArgs', 'IsInstanceTemplateVolumeAttachmentArgsDict']]]]] = None,
                 vpc: Optional[pulumi.Input[_builtins.str]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IsInstanceTemplate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] availability_policy_host_failure: The availability policy to use for this virtual server instance
        :param pulumi.Input[Union['IsInstanceTemplateCatalogOfferingArgs', 'IsInstanceTemplateCatalogOfferingArgsDict']] catalog_offering: The catalog offering or offering version to use when provisioning this virtual server instance template. If an offering
               is specified, the latest version of that offering will be used. The specified offering or offering version may be in a
               different account in the same enterprise, subject to IAM policies.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceTemplateClusterNetworkAttachmentArgs', 'IsInstanceTemplateClusterNetworkAttachmentArgsDict']]]] cluster_network_attachments: The cluster network attachments to create for this virtual server instance. A cluster network attachment represents a
               device that is connected to a cluster network. The number of network attachments must match one of the values from the
               instance profile's `cluster_network_attachment_count` before the instance can be started.
        :param pulumi.Input[_builtins.str] confidential_compute_mode: The confidential compute mode to use for this virtual server instance.If unspecified, the default confidential compute
               mode from the profile will be used.
        :param pulumi.Input[_builtins.str] dedicated_host: Unique Identifier of the Dedicated Host where the instance will be placed
        :param pulumi.Input[_builtins.str] dedicated_host_group: Unique Identifier of the Dedicated Host Group where the instance will be placed
        :param pulumi.Input[_builtins.bool] default_trusted_profile_auto_link: If set to `true`, the system will create a link to the specified `target` trusted profile during instance creation.
               Regardless of whether a link is created by the system or manually using the IAM Identity service, it will be
               automatically deleted when the instance is deleted.
        :param pulumi.Input[_builtins.str] default_trusted_profile_target: The unique identifier or CRN of the default IAM trusted profile to use for this virtual server instance.
        :param pulumi.Input[_builtins.bool] enable_secure_boot: Indicates whether secure boot is enabled for this virtual server instance.If unspecified, the default secure boot mode
               from the profile will be used.
        :param pulumi.Input[_builtins.str] image: image name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] keys: SSH key Ids for the instance template
        :param pulumi.Input[Union['IsInstanceTemplateMetadataServiceArgs', 'IsInstanceTemplateMetadataServiceArgsDict']] metadata_service: The metadata service configuration
        :param pulumi.Input[_builtins.bool] metadata_service_enabled: Indicates whether the metadata service endpoint is available to the virtual server instance
        :param pulumi.Input[_builtins.str] name: Instance Template name
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceTemplateNetworkAttachmentArgs', 'IsInstanceTemplateNetworkAttachmentArgsDict']]]] network_attachments: The network attachments for this virtual server instance, including the primary network attachment.
        :param pulumi.Input[_builtins.str] placement_group: Unique Identifier of the Placement Group for restricting the placement of the instance
        :param pulumi.Input[Union['IsInstanceTemplatePrimaryNetworkAttachmentArgs', 'IsInstanceTemplatePrimaryNetworkAttachmentArgsDict']] primary_network_attachment: The primary network attachment for this virtual server instance.
        :param pulumi.Input[Union['IsInstanceTemplatePrimaryNetworkInterfaceArgs', 'IsInstanceTemplatePrimaryNetworkInterfaceArgsDict']] primary_network_interface: Primary Network interface info
        :param pulumi.Input[_builtins.str] profile: Profile info
        :param pulumi.Input[_builtins.str] resource_group: Instance template resource group
        :param pulumi.Input[_builtins.float] total_volume_bandwidth: The amount of bandwidth (in megabits per second) allocated exclusively to instance storage volumes
        :param pulumi.Input[_builtins.str] user_data: User data given for the instance
        :param pulumi.Input[_builtins.str] vpc: VPC id
        :param pulumi.Input[_builtins.str] zone: Zone name
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsInstanceTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsInstanceTemplate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsInstanceTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsInstanceTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 availability_policy_host_failure: Optional[pulumi.Input[_builtins.str]] = None,
                 boot_volume: Optional[pulumi.Input[Union['IsInstanceTemplateBootVolumeArgs', 'IsInstanceTemplateBootVolumeArgsDict']]] = None,
                 catalog_offering: Optional[pulumi.Input[Union['IsInstanceTemplateCatalogOfferingArgs', 'IsInstanceTemplateCatalogOfferingArgsDict']]] = None,
                 cluster_network_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceTemplateClusterNetworkAttachmentArgs', 'IsInstanceTemplateClusterNetworkAttachmentArgsDict']]]]] = None,
                 confidential_compute_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 dedicated_host: Optional[pulumi.Input[_builtins.str]] = None,
                 dedicated_host_group: Optional[pulumi.Input[_builtins.str]] = None,
                 default_trusted_profile_auto_link: Optional[pulumi.Input[_builtins.bool]] = None,
                 default_trusted_profile_target: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_secure_boot: Optional[pulumi.Input[_builtins.bool]] = None,
                 image: Optional[pulumi.Input[_builtins.str]] = None,
                 is_instance_template_id: Optional[pulumi.Input[_builtins.str]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 metadata_service: Optional[pulumi.Input[Union['IsInstanceTemplateMetadataServiceArgs', 'IsInstanceTemplateMetadataServiceArgsDict']]] = None,
                 metadata_service_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceTemplateNetworkAttachmentArgs', 'IsInstanceTemplateNetworkAttachmentArgsDict']]]]] = None,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceTemplateNetworkInterfaceArgs', 'IsInstanceTemplateNetworkInterfaceArgsDict']]]]] = None,
                 placement_group: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_network_attachment: Optional[pulumi.Input[Union['IsInstanceTemplatePrimaryNetworkAttachmentArgs', 'IsInstanceTemplatePrimaryNetworkAttachmentArgsDict']]] = None,
                 primary_network_interface: Optional[pulumi.Input[Union['IsInstanceTemplatePrimaryNetworkInterfaceArgs', 'IsInstanceTemplatePrimaryNetworkInterfaceArgsDict']]] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 reservation_affinities: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceTemplateReservationAffinityArgs', 'IsInstanceTemplateReservationAffinityArgsDict']]]]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 total_volume_bandwidth: Optional[pulumi.Input[_builtins.float]] = None,
                 user_data: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceTemplateVolumeAttachmentArgs', 'IsInstanceTemplateVolumeAttachmentArgsDict']]]]] = None,
                 vpc: Optional[pulumi.Input[_builtins.str]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsInstanceTemplateArgs.__new__(IsInstanceTemplateArgs)

            __props__.__dict__["availability_policy_host_failure"] = availability_policy_host_failure
            __props__.__dict__["boot_volume"] = boot_volume
            __props__.__dict__["catalog_offering"] = catalog_offering
            __props__.__dict__["cluster_network_attachments"] = cluster_network_attachments
            __props__.__dict__["confidential_compute_mode"] = confidential_compute_mode
            __props__.__dict__["dedicated_host"] = dedicated_host
            __props__.__dict__["dedicated_host_group"] = dedicated_host_group
            __props__.__dict__["default_trusted_profile_auto_link"] = default_trusted_profile_auto_link
            __props__.__dict__["default_trusted_profile_target"] = default_trusted_profile_target
            __props__.__dict__["enable_secure_boot"] = enable_secure_boot
            __props__.__dict__["image"] = image
            __props__.__dict__["is_instance_template_id"] = is_instance_template_id
            if keys is None and not opts.urn:
                raise TypeError("Missing required property 'keys'")
            __props__.__dict__["keys"] = keys
            __props__.__dict__["metadata_service"] = metadata_service
            __props__.__dict__["metadata_service_enabled"] = metadata_service_enabled
            __props__.__dict__["name"] = name
            __props__.__dict__["network_attachments"] = network_attachments
            __props__.__dict__["network_interfaces"] = network_interfaces
            __props__.__dict__["placement_group"] = placement_group
            __props__.__dict__["primary_network_attachment"] = primary_network_attachment
            __props__.__dict__["primary_network_interface"] = primary_network_interface
            if profile is None and not opts.urn:
                raise TypeError("Missing required property 'profile'")
            __props__.__dict__["profile"] = profile
            __props__.__dict__["reservation_affinities"] = reservation_affinities
            __props__.__dict__["resource_group"] = resource_group
            __props__.__dict__["total_volume_bandwidth"] = total_volume_bandwidth
            __props__.__dict__["user_data"] = user_data
            __props__.__dict__["volume_attachments"] = volume_attachments
            if vpc is None and not opts.urn:
                raise TypeError("Missing required property 'vpc'")
            __props__.__dict__["vpc"] = vpc
            if zone is None and not opts.urn:
                raise TypeError("Missing required property 'zone'")
            __props__.__dict__["zone"] = zone
            __props__.__dict__["crn"] = None
            __props__.__dict__["placement_targets"] = None
        super(IsInstanceTemplate, __self__).__init__(
            'ibm:index/isInstanceTemplate:IsInstanceTemplate',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            availability_policy_host_failure: Optional[pulumi.Input[_builtins.str]] = None,
            boot_volume: Optional[pulumi.Input[Union['IsInstanceTemplateBootVolumeArgs', 'IsInstanceTemplateBootVolumeArgsDict']]] = None,
            catalog_offering: Optional[pulumi.Input[Union['IsInstanceTemplateCatalogOfferingArgs', 'IsInstanceTemplateCatalogOfferingArgsDict']]] = None,
            cluster_network_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceTemplateClusterNetworkAttachmentArgs', 'IsInstanceTemplateClusterNetworkAttachmentArgsDict']]]]] = None,
            confidential_compute_mode: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            dedicated_host: Optional[pulumi.Input[_builtins.str]] = None,
            dedicated_host_group: Optional[pulumi.Input[_builtins.str]] = None,
            default_trusted_profile_auto_link: Optional[pulumi.Input[_builtins.bool]] = None,
            default_trusted_profile_target: Optional[pulumi.Input[_builtins.str]] = None,
            enable_secure_boot: Optional[pulumi.Input[_builtins.bool]] = None,
            image: Optional[pulumi.Input[_builtins.str]] = None,
            is_instance_template_id: Optional[pulumi.Input[_builtins.str]] = None,
            keys: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            metadata_service: Optional[pulumi.Input[Union['IsInstanceTemplateMetadataServiceArgs', 'IsInstanceTemplateMetadataServiceArgsDict']]] = None,
            metadata_service_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            network_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceTemplateNetworkAttachmentArgs', 'IsInstanceTemplateNetworkAttachmentArgsDict']]]]] = None,
            network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceTemplateNetworkInterfaceArgs', 'IsInstanceTemplateNetworkInterfaceArgsDict']]]]] = None,
            placement_group: Optional[pulumi.Input[_builtins.str]] = None,
            placement_targets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceTemplatePlacementTargetArgs', 'IsInstanceTemplatePlacementTargetArgsDict']]]]] = None,
            primary_network_attachment: Optional[pulumi.Input[Union['IsInstanceTemplatePrimaryNetworkAttachmentArgs', 'IsInstanceTemplatePrimaryNetworkAttachmentArgsDict']]] = None,
            primary_network_interface: Optional[pulumi.Input[Union['IsInstanceTemplatePrimaryNetworkInterfaceArgs', 'IsInstanceTemplatePrimaryNetworkInterfaceArgsDict']]] = None,
            profile: Optional[pulumi.Input[_builtins.str]] = None,
            reservation_affinities: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceTemplateReservationAffinityArgs', 'IsInstanceTemplateReservationAffinityArgsDict']]]]] = None,
            resource_group: Optional[pulumi.Input[_builtins.str]] = None,
            total_volume_bandwidth: Optional[pulumi.Input[_builtins.float]] = None,
            user_data: Optional[pulumi.Input[_builtins.str]] = None,
            volume_attachments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceTemplateVolumeAttachmentArgs', 'IsInstanceTemplateVolumeAttachmentArgsDict']]]]] = None,
            vpc: Optional[pulumi.Input[_builtins.str]] = None,
            zone: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsInstanceTemplate':
        """
        Get an existing IsInstanceTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] availability_policy_host_failure: The availability policy to use for this virtual server instance
        :param pulumi.Input[Union['IsInstanceTemplateCatalogOfferingArgs', 'IsInstanceTemplateCatalogOfferingArgsDict']] catalog_offering: The catalog offering or offering version to use when provisioning this virtual server instance template. If an offering
               is specified, the latest version of that offering will be used. The specified offering or offering version may be in a
               different account in the same enterprise, subject to IAM policies.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceTemplateClusterNetworkAttachmentArgs', 'IsInstanceTemplateClusterNetworkAttachmentArgsDict']]]] cluster_network_attachments: The cluster network attachments to create for this virtual server instance. A cluster network attachment represents a
               device that is connected to a cluster network. The number of network attachments must match one of the values from the
               instance profile's `cluster_network_attachment_count` before the instance can be started.
        :param pulumi.Input[_builtins.str] confidential_compute_mode: The confidential compute mode to use for this virtual server instance.If unspecified, the default confidential compute
               mode from the profile will be used.
        :param pulumi.Input[_builtins.str] crn: The CRN for the instance
        :param pulumi.Input[_builtins.str] dedicated_host: Unique Identifier of the Dedicated Host where the instance will be placed
        :param pulumi.Input[_builtins.str] dedicated_host_group: Unique Identifier of the Dedicated Host Group where the instance will be placed
        :param pulumi.Input[_builtins.bool] default_trusted_profile_auto_link: If set to `true`, the system will create a link to the specified `target` trusted profile during instance creation.
               Regardless of whether a link is created by the system or manually using the IAM Identity service, it will be
               automatically deleted when the instance is deleted.
        :param pulumi.Input[_builtins.str] default_trusted_profile_target: The unique identifier or CRN of the default IAM trusted profile to use for this virtual server instance.
        :param pulumi.Input[_builtins.bool] enable_secure_boot: Indicates whether secure boot is enabled for this virtual server instance.If unspecified, the default secure boot mode
               from the profile will be used.
        :param pulumi.Input[_builtins.str] image: image name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] keys: SSH key Ids for the instance template
        :param pulumi.Input[Union['IsInstanceTemplateMetadataServiceArgs', 'IsInstanceTemplateMetadataServiceArgsDict']] metadata_service: The metadata service configuration
        :param pulumi.Input[_builtins.bool] metadata_service_enabled: Indicates whether the metadata service endpoint is available to the virtual server instance
        :param pulumi.Input[_builtins.str] name: Instance Template name
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceTemplateNetworkAttachmentArgs', 'IsInstanceTemplateNetworkAttachmentArgsDict']]]] network_attachments: The network attachments for this virtual server instance, including the primary network attachment.
        :param pulumi.Input[_builtins.str] placement_group: Unique Identifier of the Placement Group for restricting the placement of the instance
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceTemplatePlacementTargetArgs', 'IsInstanceTemplatePlacementTargetArgsDict']]]] placement_targets: The placement restrictions for the virtual server instance.
        :param pulumi.Input[Union['IsInstanceTemplatePrimaryNetworkAttachmentArgs', 'IsInstanceTemplatePrimaryNetworkAttachmentArgsDict']] primary_network_attachment: The primary network attachment for this virtual server instance.
        :param pulumi.Input[Union['IsInstanceTemplatePrimaryNetworkInterfaceArgs', 'IsInstanceTemplatePrimaryNetworkInterfaceArgsDict']] primary_network_interface: Primary Network interface info
        :param pulumi.Input[_builtins.str] profile: Profile info
        :param pulumi.Input[_builtins.str] resource_group: Instance template resource group
        :param pulumi.Input[_builtins.float] total_volume_bandwidth: The amount of bandwidth (in megabits per second) allocated exclusively to instance storage volumes
        :param pulumi.Input[_builtins.str] user_data: User data given for the instance
        :param pulumi.Input[_builtins.str] vpc: VPC id
        :param pulumi.Input[_builtins.str] zone: Zone name
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsInstanceTemplateState.__new__(_IsInstanceTemplateState)

        __props__.__dict__["availability_policy_host_failure"] = availability_policy_host_failure
        __props__.__dict__["boot_volume"] = boot_volume
        __props__.__dict__["catalog_offering"] = catalog_offering
        __props__.__dict__["cluster_network_attachments"] = cluster_network_attachments
        __props__.__dict__["confidential_compute_mode"] = confidential_compute_mode
        __props__.__dict__["crn"] = crn
        __props__.__dict__["dedicated_host"] = dedicated_host
        __props__.__dict__["dedicated_host_group"] = dedicated_host_group
        __props__.__dict__["default_trusted_profile_auto_link"] = default_trusted_profile_auto_link
        __props__.__dict__["default_trusted_profile_target"] = default_trusted_profile_target
        __props__.__dict__["enable_secure_boot"] = enable_secure_boot
        __props__.__dict__["image"] = image
        __props__.__dict__["is_instance_template_id"] = is_instance_template_id
        __props__.__dict__["keys"] = keys
        __props__.__dict__["metadata_service"] = metadata_service
        __props__.__dict__["metadata_service_enabled"] = metadata_service_enabled
        __props__.__dict__["name"] = name
        __props__.__dict__["network_attachments"] = network_attachments
        __props__.__dict__["network_interfaces"] = network_interfaces
        __props__.__dict__["placement_group"] = placement_group
        __props__.__dict__["placement_targets"] = placement_targets
        __props__.__dict__["primary_network_attachment"] = primary_network_attachment
        __props__.__dict__["primary_network_interface"] = primary_network_interface
        __props__.__dict__["profile"] = profile
        __props__.__dict__["reservation_affinities"] = reservation_affinities
        __props__.__dict__["resource_group"] = resource_group
        __props__.__dict__["total_volume_bandwidth"] = total_volume_bandwidth
        __props__.__dict__["user_data"] = user_data
        __props__.__dict__["volume_attachments"] = volume_attachments
        __props__.__dict__["vpc"] = vpc
        __props__.__dict__["zone"] = zone
        return IsInstanceTemplate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="availabilityPolicyHostFailure")
    def availability_policy_host_failure(self) -> pulumi.Output[_builtins.str]:
        """
        The availability policy to use for this virtual server instance
        """
        return pulumi.get(self, "availability_policy_host_failure")

    @_builtins.property
    @pulumi.getter(name="bootVolume")
    def boot_volume(self) -> pulumi.Output[Optional['outputs.IsInstanceTemplateBootVolume']]:
        return pulumi.get(self, "boot_volume")

    @_builtins.property
    @pulumi.getter(name="catalogOffering")
    def catalog_offering(self) -> pulumi.Output[Optional['outputs.IsInstanceTemplateCatalogOffering']]:
        """
        The catalog offering or offering version to use when provisioning this virtual server instance template. If an offering
        is specified, the latest version of that offering will be used. The specified offering or offering version may be in a
        different account in the same enterprise, subject to IAM policies.
        """
        return pulumi.get(self, "catalog_offering")

    @_builtins.property
    @pulumi.getter(name="clusterNetworkAttachments")
    def cluster_network_attachments(self) -> pulumi.Output[Optional[Sequence['outputs.IsInstanceTemplateClusterNetworkAttachment']]]:
        """
        The cluster network attachments to create for this virtual server instance. A cluster network attachment represents a
        device that is connected to a cluster network. The number of network attachments must match one of the values from the
        instance profile's `cluster_network_attachment_count` before the instance can be started.
        """
        return pulumi.get(self, "cluster_network_attachments")

    @_builtins.property
    @pulumi.getter(name="confidentialComputeMode")
    def confidential_compute_mode(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The confidential compute mode to use for this virtual server instance.If unspecified, the default confidential compute
        mode from the profile will be used.
        """
        return pulumi.get(self, "confidential_compute_mode")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The CRN for the instance
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="dedicatedHost")
    def dedicated_host(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Unique Identifier of the Dedicated Host where the instance will be placed
        """
        return pulumi.get(self, "dedicated_host")

    @_builtins.property
    @pulumi.getter(name="dedicatedHostGroup")
    def dedicated_host_group(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Unique Identifier of the Dedicated Host Group where the instance will be placed
        """
        return pulumi.get(self, "dedicated_host_group")

    @_builtins.property
    @pulumi.getter(name="defaultTrustedProfileAutoLink")
    def default_trusted_profile_auto_link(self) -> pulumi.Output[_builtins.bool]:
        """
        If set to `true`, the system will create a link to the specified `target` trusted profile during instance creation.
        Regardless of whether a link is created by the system or manually using the IAM Identity service, it will be
        automatically deleted when the instance is deleted.
        """
        return pulumi.get(self, "default_trusted_profile_auto_link")

    @_builtins.property
    @pulumi.getter(name="defaultTrustedProfileTarget")
    def default_trusted_profile_target(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The unique identifier or CRN of the default IAM trusted profile to use for this virtual server instance.
        """
        return pulumi.get(self, "default_trusted_profile_target")

    @_builtins.property
    @pulumi.getter(name="enableSecureBoot")
    def enable_secure_boot(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Indicates whether secure boot is enabled for this virtual server instance.If unspecified, the default secure boot mode
        from the profile will be used.
        """
        return pulumi.get(self, "enable_secure_boot")

    @_builtins.property
    @pulumi.getter
    def image(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        image name
        """
        return pulumi.get(self, "image")

    @_builtins.property
    @pulumi.getter(name="isInstanceTemplateId")
    def is_instance_template_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_instance_template_id")

    @_builtins.property
    @pulumi.getter
    def keys(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        SSH key Ids for the instance template
        """
        return pulumi.get(self, "keys")

    @_builtins.property
    @pulumi.getter(name="metadataService")
    def metadata_service(self) -> pulumi.Output[Optional['outputs.IsInstanceTemplateMetadataService']]:
        """
        The metadata service configuration
        """
        return pulumi.get(self, "metadata_service")

    @_builtins.property
    @pulumi.getter(name="metadataServiceEnabled")
    @_utilities.deprecated("""Deprecated""")
    def metadata_service_enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether the metadata service endpoint is available to the virtual server instance
        """
        return pulumi.get(self, "metadata_service_enabled")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Instance Template name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkAttachments")
    def network_attachments(self) -> pulumi.Output[Optional[Sequence['outputs.IsInstanceTemplateNetworkAttachment']]]:
        """
        The network attachments for this virtual server instance, including the primary network attachment.
        """
        return pulumi.get(self, "network_attachments")

    @_builtins.property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> pulumi.Output[Optional[Sequence['outputs.IsInstanceTemplateNetworkInterface']]]:
        return pulumi.get(self, "network_interfaces")

    @_builtins.property
    @pulumi.getter(name="placementGroup")
    def placement_group(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Unique Identifier of the Placement Group for restricting the placement of the instance
        """
        return pulumi.get(self, "placement_group")

    @_builtins.property
    @pulumi.getter(name="placementTargets")
    def placement_targets(self) -> pulumi.Output[Sequence['outputs.IsInstanceTemplatePlacementTarget']]:
        """
        The placement restrictions for the virtual server instance.
        """
        return pulumi.get(self, "placement_targets")

    @_builtins.property
    @pulumi.getter(name="primaryNetworkAttachment")
    def primary_network_attachment(self) -> pulumi.Output[Optional['outputs.IsInstanceTemplatePrimaryNetworkAttachment']]:
        """
        The primary network attachment for this virtual server instance.
        """
        return pulumi.get(self, "primary_network_attachment")

    @_builtins.property
    @pulumi.getter(name="primaryNetworkInterface")
    def primary_network_interface(self) -> pulumi.Output[Optional['outputs.IsInstanceTemplatePrimaryNetworkInterface']]:
        """
        Primary Network interface info
        """
        return pulumi.get(self, "primary_network_interface")

    @_builtins.property
    @pulumi.getter
    def profile(self) -> pulumi.Output[_builtins.str]:
        """
        Profile info
        """
        return pulumi.get(self, "profile")

    @_builtins.property
    @pulumi.getter(name="reservationAffinities")
    def reservation_affinities(self) -> pulumi.Output[Optional[Sequence['outputs.IsInstanceTemplateReservationAffinity']]]:
        return pulumi.get(self, "reservation_affinities")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Output[_builtins.str]:
        """
        Instance template resource group
        """
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="totalVolumeBandwidth")
    def total_volume_bandwidth(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        The amount of bandwidth (in megabits per second) allocated exclusively to instance storage volumes
        """
        return pulumi.get(self, "total_volume_bandwidth")

    @_builtins.property
    @pulumi.getter(name="userData")
    def user_data(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        User data given for the instance
        """
        return pulumi.get(self, "user_data")

    @_builtins.property
    @pulumi.getter(name="volumeAttachments")
    def volume_attachments(self) -> pulumi.Output[Optional[Sequence['outputs.IsInstanceTemplateVolumeAttachment']]]:
        return pulumi.get(self, "volume_attachments")

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> pulumi.Output[_builtins.str]:
        """
        VPC id
        """
        return pulumi.get(self, "vpc")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> pulumi.Output[_builtins.str]:
        """
        Zone name
        """
        return pulumi.get(self, "zone")

