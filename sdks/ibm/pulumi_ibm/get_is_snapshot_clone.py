# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetIsSnapshotCloneResult',
    'AwaitableGetIsSnapshotCloneResult',
    'get_is_snapshot_clone',
    'get_is_snapshot_clone_output',
]

@pulumi.output_type
class GetIsSnapshotCloneResult:
    """
    A collection of values returned by getIsSnapshotClone.
    """
    def __init__(__self__, available=None, created_at=None, id=None, snapshot=None, zone=None):
        if available and not isinstance(available, bool):
            raise TypeError("Expected argument 'available' to be a bool")
        pulumi.set(__self__, "available", available)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if snapshot and not isinstance(snapshot, str):
            raise TypeError("Expected argument 'snapshot' to be a str")
        pulumi.set(__self__, "snapshot", snapshot)
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter
    def available(self) -> _builtins.bool:
        return pulumi.get(self, "available")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def snapshot(self) -> _builtins.str:
        return pulumi.get(self, "snapshot")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> _builtins.str:
        return pulumi.get(self, "zone")


class AwaitableGetIsSnapshotCloneResult(GetIsSnapshotCloneResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsSnapshotCloneResult(
            available=self.available,
            created_at=self.created_at,
            id=self.id,
            snapshot=self.snapshot,
            zone=self.zone)


def get_is_snapshot_clone(id: Optional[_builtins.str] = None,
                          snapshot: Optional[_builtins.str] = None,
                          zone: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsSnapshotCloneResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['snapshot'] = snapshot
    __args__['zone'] = zone
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsSnapshotClone:getIsSnapshotClone', __args__, opts=opts, typ=GetIsSnapshotCloneResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsSnapshotCloneResult(
        available=pulumi.get(__ret__, 'available'),
        created_at=pulumi.get(__ret__, 'created_at'),
        id=pulumi.get(__ret__, 'id'),
        snapshot=pulumi.get(__ret__, 'snapshot'),
        zone=pulumi.get(__ret__, 'zone'))
def get_is_snapshot_clone_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 snapshot: Optional[pulumi.Input[_builtins.str]] = None,
                                 zone: Optional[pulumi.Input[_builtins.str]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsSnapshotCloneResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['snapshot'] = snapshot
    __args__['zone'] = zone
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsSnapshotClone:getIsSnapshotClone', __args__, opts=opts, typ=GetIsSnapshotCloneResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsSnapshotCloneResult(
        available=pulumi.get(__response__, 'available'),
        created_at=pulumi.get(__response__, 'created_at'),
        id=pulumi.get(__response__, 'id'),
        snapshot=pulumi.get(__response__, 'snapshot'),
        zone=pulumi.get(__response__, 'zone')))
