# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BackupRecoveryProtectionGroupArgs', 'BackupRecoveryProtectionGroup']

@pulumi.input_type
class BackupRecoveryProtectionGroupArgs:
    def __init__(__self__, *,
                 environment: pulumi.Input[_builtins.str],
                 policy_id: pulumi.Input[_builtins.str],
                 x_ibm_tenant_id: pulumi.Input[_builtins.str],
                 abort_in_blackouts: Optional[pulumi.Input[_builtins.bool]] = None,
                 advanced_configs: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionGroupAdvancedConfigArgs']]]] = None,
                 alert_policy: Optional[pulumi.Input['BackupRecoveryProtectionGroupAlertPolicyArgs']] = None,
                 backup_recovery_protection_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 end_time_usecs: Optional[pulumi.Input[_builtins.float]] = None,
                 is_paused: Optional[pulumi.Input[_builtins.bool]] = None,
                 mssql_params: Optional[pulumi.Input['BackupRecoveryProtectionGroupMssqlParamsArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 pause_in_blackouts: Optional[pulumi.Input[_builtins.bool]] = None,
                 physical_params: Optional[pulumi.Input['BackupRecoveryProtectionGroupPhysicalParamsArgs']] = None,
                 priority: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 slas: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionGroupSlaArgs']]]] = None,
                 start_time: Optional[pulumi.Input['BackupRecoveryProtectionGroupStartTimeArgs']] = None):
        """
        The set of arguments for constructing a BackupRecoveryProtectionGroup resource.
        :param pulumi.Input[_builtins.str] environment: Specifies the environment of the Protection Group.
        :param pulumi.Input[_builtins.str] policy_id: Specifies the unique id of the Protection Policy associated with the Protection Group. The Policy provides retry
               settings Protection Schedules, Priority, SLA, etc.
        :param pulumi.Input[_builtins.str] x_ibm_tenant_id: Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
               be specified.
        :param pulumi.Input[_builtins.bool] abort_in_blackouts: Specifies whether currently executing jobs should abort if a blackout period specified by a policy starts. Available
               only if the selected policy has at least one blackout period. Default value is false.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionGroupAdvancedConfigArgs']]] advanced_configs: Specifies the advanced configuration for a protection job.
        :param pulumi.Input['BackupRecoveryProtectionGroupAlertPolicyArgs'] alert_policy: Specifies a policy for alerting users of the status of a Protection Group.
        :param pulumi.Input[_builtins.str] description: Specifies a description of the Protection Group.
        :param pulumi.Input[_builtins.float] end_time_usecs: Specifies the end time in micro seconds for this Protection Group. If this is not specified, the Protection Group won't
               be ended.
        :param pulumi.Input[_builtins.bool] is_paused: Specifies if the the Protection Group is paused. New runs are not scheduled for the paused Protection Groups. Active run
               if any is not impacted.
        :param pulumi.Input['BackupRecoveryProtectionGroupMssqlParamsArgs'] mssql_params: Specifies the parameters specific to MSSQL Protection Group.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the Protection Group.
        :param pulumi.Input[_builtins.bool] pause_in_blackouts: Specifies whether currently executing jobs should be paused if a blackout period specified by a policy starts. Available
               only if the selected policy has at least one blackout period. Default value is false. This field should not be set to
               true if 'abortInBlackouts' is sent as true.
        :param pulumi.Input[_builtins.str] priority: Specifies the priority of the Protection Group.
        :param pulumi.Input[_builtins.str] qos_policy: Specifies whether the Protection Group will be written to HDD or SSD.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionGroupSlaArgs']]] slas: Specifies the SLA parameters for this Protection Group.
        :param pulumi.Input['BackupRecoveryProtectionGroupStartTimeArgs'] start_time: Specifies the time of day. Used for scheduling purposes.
        """
        pulumi.set(__self__, "environment", environment)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "x_ibm_tenant_id", x_ibm_tenant_id)
        if abort_in_blackouts is not None:
            pulumi.set(__self__, "abort_in_blackouts", abort_in_blackouts)
        if advanced_configs is not None:
            pulumi.set(__self__, "advanced_configs", advanced_configs)
        if alert_policy is not None:
            pulumi.set(__self__, "alert_policy", alert_policy)
        if backup_recovery_protection_group_id is not None:
            pulumi.set(__self__, "backup_recovery_protection_group_id", backup_recovery_protection_group_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if end_time_usecs is not None:
            pulumi.set(__self__, "end_time_usecs", end_time_usecs)
        if is_paused is not None:
            pulumi.set(__self__, "is_paused", is_paused)
        if mssql_params is not None:
            pulumi.set(__self__, "mssql_params", mssql_params)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pause_in_blackouts is not None:
            pulumi.set(__self__, "pause_in_blackouts", pause_in_blackouts)
        if physical_params is not None:
            pulumi.set(__self__, "physical_params", physical_params)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if qos_policy is not None:
            pulumi.set(__self__, "qos_policy", qos_policy)
        if slas is not None:
            pulumi.set(__self__, "slas", slas)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter
    def environment(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the environment of the Protection Group.
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "environment", value)

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the unique id of the Protection Policy associated with the Protection Group. The Policy provides retry
        settings Protection Schedules, Priority, SLA, etc.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "policy_id", value)

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
        be specified.
        """
        return pulumi.get(self, "x_ibm_tenant_id")

    @x_ibm_tenant_id.setter
    def x_ibm_tenant_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "x_ibm_tenant_id", value)

    @_builtins.property
    @pulumi.getter(name="abortInBlackouts")
    def abort_in_blackouts(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether currently executing jobs should abort if a blackout period specified by a policy starts. Available
        only if the selected policy has at least one blackout period. Default value is false.
        """
        return pulumi.get(self, "abort_in_blackouts")

    @abort_in_blackouts.setter
    def abort_in_blackouts(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "abort_in_blackouts", value)

    @_builtins.property
    @pulumi.getter(name="advancedConfigs")
    def advanced_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionGroupAdvancedConfigArgs']]]]:
        """
        Specifies the advanced configuration for a protection job.
        """
        return pulumi.get(self, "advanced_configs")

    @advanced_configs.setter
    def advanced_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionGroupAdvancedConfigArgs']]]]):
        pulumi.set(self, "advanced_configs", value)

    @_builtins.property
    @pulumi.getter(name="alertPolicy")
    def alert_policy(self) -> Optional[pulumi.Input['BackupRecoveryProtectionGroupAlertPolicyArgs']]:
        """
        Specifies a policy for alerting users of the status of a Protection Group.
        """
        return pulumi.get(self, "alert_policy")

    @alert_policy.setter
    def alert_policy(self, value: Optional[pulumi.Input['BackupRecoveryProtectionGroupAlertPolicyArgs']]):
        pulumi.set(self, "alert_policy", value)

    @_builtins.property
    @pulumi.getter(name="backupRecoveryProtectionGroupId")
    def backup_recovery_protection_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "backup_recovery_protection_group_id")

    @backup_recovery_protection_group_id.setter
    def backup_recovery_protection_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_recovery_protection_group_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies a description of the Protection Group.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="endTimeUsecs")
    def end_time_usecs(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the end time in micro seconds for this Protection Group. If this is not specified, the Protection Group won't
        be ended.
        """
        return pulumi.get(self, "end_time_usecs")

    @end_time_usecs.setter
    def end_time_usecs(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "end_time_usecs", value)

    @_builtins.property
    @pulumi.getter(name="isPaused")
    def is_paused(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies if the the Protection Group is paused. New runs are not scheduled for the paused Protection Groups. Active run
        if any is not impacted.
        """
        return pulumi.get(self, "is_paused")

    @is_paused.setter
    def is_paused(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_paused", value)

    @_builtins.property
    @pulumi.getter(name="mssqlParams")
    def mssql_params(self) -> Optional[pulumi.Input['BackupRecoveryProtectionGroupMssqlParamsArgs']]:
        """
        Specifies the parameters specific to MSSQL Protection Group.
        """
        return pulumi.get(self, "mssql_params")

    @mssql_params.setter
    def mssql_params(self, value: Optional[pulumi.Input['BackupRecoveryProtectionGroupMssqlParamsArgs']]):
        pulumi.set(self, "mssql_params", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the Protection Group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="pauseInBlackouts")
    def pause_in_blackouts(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether currently executing jobs should be paused if a blackout period specified by a policy starts. Available
        only if the selected policy has at least one blackout period. Default value is false. This field should not be set to
        true if 'abortInBlackouts' is sent as true.
        """
        return pulumi.get(self, "pause_in_blackouts")

    @pause_in_blackouts.setter
    def pause_in_blackouts(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pause_in_blackouts", value)

    @_builtins.property
    @pulumi.getter(name="physicalParams")
    def physical_params(self) -> Optional[pulumi.Input['BackupRecoveryProtectionGroupPhysicalParamsArgs']]:
        return pulumi.get(self, "physical_params")

    @physical_params.setter
    def physical_params(self, value: Optional[pulumi.Input['BackupRecoveryProtectionGroupPhysicalParamsArgs']]):
        pulumi.set(self, "physical_params", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the priority of the Protection Group.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "priority", value)

    @_builtins.property
    @pulumi.getter(name="qosPolicy")
    def qos_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether the Protection Group will be written to HDD or SSD.
        """
        return pulumi.get(self, "qos_policy")

    @qos_policy.setter
    def qos_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_policy", value)

    @_builtins.property
    @pulumi.getter
    def slas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionGroupSlaArgs']]]]:
        """
        Specifies the SLA parameters for this Protection Group.
        """
        return pulumi.get(self, "slas")

    @slas.setter
    def slas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionGroupSlaArgs']]]]):
        pulumi.set(self, "slas", value)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input['BackupRecoveryProtectionGroupStartTimeArgs']]:
        """
        Specifies the time of day. Used for scheduling purposes.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input['BackupRecoveryProtectionGroupStartTimeArgs']]):
        pulumi.set(self, "start_time", value)


@pulumi.input_type
class _BackupRecoveryProtectionGroupState:
    def __init__(__self__, *,
                 abort_in_blackouts: Optional[pulumi.Input[_builtins.bool]] = None,
                 advanced_configs: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionGroupAdvancedConfigArgs']]]] = None,
                 alert_policy: Optional[pulumi.Input['BackupRecoveryProtectionGroupAlertPolicyArgs']] = None,
                 backup_recovery_protection_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 end_time_usecs: Optional[pulumi.Input[_builtins.float]] = None,
                 environment: Optional[pulumi.Input[_builtins.str]] = None,
                 group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 invalid_entities: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionGroupInvalidEntityArgs']]]] = None,
                 is_active: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_deleted: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_paused: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_protect_once: Optional[pulumi.Input[_builtins.bool]] = None,
                 last_modified_timestamp_usecs: Optional[pulumi.Input[_builtins.float]] = None,
                 last_runs: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionGroupLastRunArgs']]]] = None,
                 missing_entities: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionGroupMissingEntityArgs']]]] = None,
                 mssql_params: Optional[pulumi.Input['BackupRecoveryProtectionGroupMssqlParamsArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 num_protected_objects: Optional[pulumi.Input[_builtins.float]] = None,
                 pause_in_blackouts: Optional[pulumi.Input[_builtins.bool]] = None,
                 permissions: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionGroupPermissionArgs']]]] = None,
                 physical_params: Optional[pulumi.Input['BackupRecoveryProtectionGroupPhysicalParamsArgs']] = None,
                 policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 priority: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 region_id: Optional[pulumi.Input[_builtins.str]] = None,
                 slas: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionGroupSlaArgs']]]] = None,
                 start_time: Optional[pulumi.Input['BackupRecoveryProtectionGroupStartTimeArgs']] = None,
                 x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering BackupRecoveryProtectionGroup resources.
        :param pulumi.Input[_builtins.bool] abort_in_blackouts: Specifies whether currently executing jobs should abort if a blackout period specified by a policy starts. Available
               only if the selected policy has at least one blackout period. Default value is false.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionGroupAdvancedConfigArgs']]] advanced_configs: Specifies the advanced configuration for a protection job.
        :param pulumi.Input['BackupRecoveryProtectionGroupAlertPolicyArgs'] alert_policy: Specifies a policy for alerting users of the status of a Protection Group.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the cluster ID.
        :param pulumi.Input[_builtins.str] description: Specifies a description of the Protection Group.
        :param pulumi.Input[_builtins.float] end_time_usecs: Specifies the end time in micro seconds for this Protection Group. If this is not specified, the Protection Group won't
               be ended.
        :param pulumi.Input[_builtins.str] environment: Specifies the environment of the Protection Group.
        :param pulumi.Input[_builtins.str] group_id: Group ID
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionGroupInvalidEntityArgs']]] invalid_entities: Specifies the Information about invalid entities. An entity will be considered invalid if it is part of an active
               protection group but has lost compatibility for the given backup type.
        :param pulumi.Input[_builtins.bool] is_active: Specifies if the Protection Group is active or not.
        :param pulumi.Input[_builtins.bool] is_deleted: Specifies if the Protection Group has been deleted.
        :param pulumi.Input[_builtins.bool] is_paused: Specifies if the the Protection Group is paused. New runs are not scheduled for the paused Protection Groups. Active run
               if any is not impacted.
        :param pulumi.Input[_builtins.bool] is_protect_once: Specifies if the the Protection Group is using a protect once type of policy. This field is helpful to identify run
               happen for this group.
        :param pulumi.Input[_builtins.float] last_modified_timestamp_usecs: Specifies the last time this protection group was updated. If this is passed into a PUT request, then the backend will
               validate that the timestamp passed in matches the time that the protection group was actually last modified. If the two
               timestamps do not match, then the request will be rejected with a stale error.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionGroupLastRunArgs']]] last_runs: Specifies the parameters which are common between Protection Group runs of all Protection Groups.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionGroupMissingEntityArgs']]] missing_entities: Specifies the Information about missing entities.
        :param pulumi.Input['BackupRecoveryProtectionGroupMssqlParamsArgs'] mssql_params: Specifies the parameters specific to MSSQL Protection Group.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the Protection Group.
        :param pulumi.Input[_builtins.float] num_protected_objects: Specifies the number of protected objects of the Protection Group.
        :param pulumi.Input[_builtins.bool] pause_in_blackouts: Specifies whether currently executing jobs should be paused if a blackout period specified by a policy starts. Available
               only if the selected policy has at least one blackout period. Default value is false. This field should not be set to
               true if 'abortInBlackouts' is sent as true.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionGroupPermissionArgs']]] permissions: Specifies the list of tenants that have permissions for this protection group.
        :param pulumi.Input[_builtins.str] policy_id: Specifies the unique id of the Protection Policy associated with the Protection Group. The Policy provides retry
               settings Protection Schedules, Priority, SLA, etc.
        :param pulumi.Input[_builtins.str] priority: Specifies the priority of the Protection Group.
        :param pulumi.Input[_builtins.str] qos_policy: Specifies whether the Protection Group will be written to HDD or SSD.
        :param pulumi.Input[_builtins.str] region_id: Specifies the region ID.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionGroupSlaArgs']]] slas: Specifies the SLA parameters for this Protection Group.
        :param pulumi.Input['BackupRecoveryProtectionGroupStartTimeArgs'] start_time: Specifies the time of day. Used for scheduling purposes.
        :param pulumi.Input[_builtins.str] x_ibm_tenant_id: Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
               be specified.
        """
        if abort_in_blackouts is not None:
            pulumi.set(__self__, "abort_in_blackouts", abort_in_blackouts)
        if advanced_configs is not None:
            pulumi.set(__self__, "advanced_configs", advanced_configs)
        if alert_policy is not None:
            pulumi.set(__self__, "alert_policy", alert_policy)
        if backup_recovery_protection_group_id is not None:
            pulumi.set(__self__, "backup_recovery_protection_group_id", backup_recovery_protection_group_id)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if end_time_usecs is not None:
            pulumi.set(__self__, "end_time_usecs", end_time_usecs)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if invalid_entities is not None:
            pulumi.set(__self__, "invalid_entities", invalid_entities)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if is_deleted is not None:
            pulumi.set(__self__, "is_deleted", is_deleted)
        if is_paused is not None:
            pulumi.set(__self__, "is_paused", is_paused)
        if is_protect_once is not None:
            pulumi.set(__self__, "is_protect_once", is_protect_once)
        if last_modified_timestamp_usecs is not None:
            pulumi.set(__self__, "last_modified_timestamp_usecs", last_modified_timestamp_usecs)
        if last_runs is not None:
            pulumi.set(__self__, "last_runs", last_runs)
        if missing_entities is not None:
            pulumi.set(__self__, "missing_entities", missing_entities)
        if mssql_params is not None:
            pulumi.set(__self__, "mssql_params", mssql_params)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if num_protected_objects is not None:
            pulumi.set(__self__, "num_protected_objects", num_protected_objects)
        if pause_in_blackouts is not None:
            pulumi.set(__self__, "pause_in_blackouts", pause_in_blackouts)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)
        if physical_params is not None:
            pulumi.set(__self__, "physical_params", physical_params)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if qos_policy is not None:
            pulumi.set(__self__, "qos_policy", qos_policy)
        if region_id is not None:
            pulumi.set(__self__, "region_id", region_id)
        if slas is not None:
            pulumi.set(__self__, "slas", slas)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if x_ibm_tenant_id is not None:
            pulumi.set(__self__, "x_ibm_tenant_id", x_ibm_tenant_id)

    @_builtins.property
    @pulumi.getter(name="abortInBlackouts")
    def abort_in_blackouts(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether currently executing jobs should abort if a blackout period specified by a policy starts. Available
        only if the selected policy has at least one blackout period. Default value is false.
        """
        return pulumi.get(self, "abort_in_blackouts")

    @abort_in_blackouts.setter
    def abort_in_blackouts(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "abort_in_blackouts", value)

    @_builtins.property
    @pulumi.getter(name="advancedConfigs")
    def advanced_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionGroupAdvancedConfigArgs']]]]:
        """
        Specifies the advanced configuration for a protection job.
        """
        return pulumi.get(self, "advanced_configs")

    @advanced_configs.setter
    def advanced_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionGroupAdvancedConfigArgs']]]]):
        pulumi.set(self, "advanced_configs", value)

    @_builtins.property
    @pulumi.getter(name="alertPolicy")
    def alert_policy(self) -> Optional[pulumi.Input['BackupRecoveryProtectionGroupAlertPolicyArgs']]:
        """
        Specifies a policy for alerting users of the status of a Protection Group.
        """
        return pulumi.get(self, "alert_policy")

    @alert_policy.setter
    def alert_policy(self, value: Optional[pulumi.Input['BackupRecoveryProtectionGroupAlertPolicyArgs']]):
        pulumi.set(self, "alert_policy", value)

    @_builtins.property
    @pulumi.getter(name="backupRecoveryProtectionGroupId")
    def backup_recovery_protection_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "backup_recovery_protection_group_id")

    @backup_recovery_protection_group_id.setter
    def backup_recovery_protection_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_recovery_protection_group_id", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies a description of the Protection Group.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="endTimeUsecs")
    def end_time_usecs(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the end time in micro seconds for this Protection Group. If this is not specified, the Protection Group won't
        be ended.
        """
        return pulumi.get(self, "end_time_usecs")

    @end_time_usecs.setter
    def end_time_usecs(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "end_time_usecs", value)

    @_builtins.property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the environment of the Protection Group.
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "environment", value)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Group ID
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_id", value)

    @_builtins.property
    @pulumi.getter(name="invalidEntities")
    def invalid_entities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionGroupInvalidEntityArgs']]]]:
        """
        Specifies the Information about invalid entities. An entity will be considered invalid if it is part of an active
        protection group but has lost compatibility for the given backup type.
        """
        return pulumi.get(self, "invalid_entities")

    @invalid_entities.setter
    def invalid_entities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionGroupInvalidEntityArgs']]]]):
        pulumi.set(self, "invalid_entities", value)

    @_builtins.property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies if the Protection Group is active or not.
        """
        return pulumi.get(self, "is_active")

    @is_active.setter
    def is_active(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_active", value)

    @_builtins.property
    @pulumi.getter(name="isDeleted")
    def is_deleted(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies if the Protection Group has been deleted.
        """
        return pulumi.get(self, "is_deleted")

    @is_deleted.setter
    def is_deleted(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_deleted", value)

    @_builtins.property
    @pulumi.getter(name="isPaused")
    def is_paused(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies if the the Protection Group is paused. New runs are not scheduled for the paused Protection Groups. Active run
        if any is not impacted.
        """
        return pulumi.get(self, "is_paused")

    @is_paused.setter
    def is_paused(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_paused", value)

    @_builtins.property
    @pulumi.getter(name="isProtectOnce")
    def is_protect_once(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies if the the Protection Group is using a protect once type of policy. This field is helpful to identify run
        happen for this group.
        """
        return pulumi.get(self, "is_protect_once")

    @is_protect_once.setter
    def is_protect_once(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_protect_once", value)

    @_builtins.property
    @pulumi.getter(name="lastModifiedTimestampUsecs")
    def last_modified_timestamp_usecs(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the last time this protection group was updated. If this is passed into a PUT request, then the backend will
        validate that the timestamp passed in matches the time that the protection group was actually last modified. If the two
        timestamps do not match, then the request will be rejected with a stale error.
        """
        return pulumi.get(self, "last_modified_timestamp_usecs")

    @last_modified_timestamp_usecs.setter
    def last_modified_timestamp_usecs(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "last_modified_timestamp_usecs", value)

    @_builtins.property
    @pulumi.getter(name="lastRuns")
    def last_runs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionGroupLastRunArgs']]]]:
        """
        Specifies the parameters which are common between Protection Group runs of all Protection Groups.
        """
        return pulumi.get(self, "last_runs")

    @last_runs.setter
    def last_runs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionGroupLastRunArgs']]]]):
        pulumi.set(self, "last_runs", value)

    @_builtins.property
    @pulumi.getter(name="missingEntities")
    def missing_entities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionGroupMissingEntityArgs']]]]:
        """
        Specifies the Information about missing entities.
        """
        return pulumi.get(self, "missing_entities")

    @missing_entities.setter
    def missing_entities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionGroupMissingEntityArgs']]]]):
        pulumi.set(self, "missing_entities", value)

    @_builtins.property
    @pulumi.getter(name="mssqlParams")
    def mssql_params(self) -> Optional[pulumi.Input['BackupRecoveryProtectionGroupMssqlParamsArgs']]:
        """
        Specifies the parameters specific to MSSQL Protection Group.
        """
        return pulumi.get(self, "mssql_params")

    @mssql_params.setter
    def mssql_params(self, value: Optional[pulumi.Input['BackupRecoveryProtectionGroupMssqlParamsArgs']]):
        pulumi.set(self, "mssql_params", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the Protection Group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="numProtectedObjects")
    def num_protected_objects(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the number of protected objects of the Protection Group.
        """
        return pulumi.get(self, "num_protected_objects")

    @num_protected_objects.setter
    def num_protected_objects(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "num_protected_objects", value)

    @_builtins.property
    @pulumi.getter(name="pauseInBlackouts")
    def pause_in_blackouts(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether currently executing jobs should be paused if a blackout period specified by a policy starts. Available
        only if the selected policy has at least one blackout period. Default value is false. This field should not be set to
        true if 'abortInBlackouts' is sent as true.
        """
        return pulumi.get(self, "pause_in_blackouts")

    @pause_in_blackouts.setter
    def pause_in_blackouts(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pause_in_blackouts", value)

    @_builtins.property
    @pulumi.getter
    def permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionGroupPermissionArgs']]]]:
        """
        Specifies the list of tenants that have permissions for this protection group.
        """
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionGroupPermissionArgs']]]]):
        pulumi.set(self, "permissions", value)

    @_builtins.property
    @pulumi.getter(name="physicalParams")
    def physical_params(self) -> Optional[pulumi.Input['BackupRecoveryProtectionGroupPhysicalParamsArgs']]:
        return pulumi.get(self, "physical_params")

    @physical_params.setter
    def physical_params(self, value: Optional[pulumi.Input['BackupRecoveryProtectionGroupPhysicalParamsArgs']]):
        pulumi.set(self, "physical_params", value)

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the unique id of the Protection Policy associated with the Protection Group. The Policy provides retry
        settings Protection Schedules, Priority, SLA, etc.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_id", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the priority of the Protection Group.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "priority", value)

    @_builtins.property
    @pulumi.getter(name="qosPolicy")
    def qos_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether the Protection Group will be written to HDD or SSD.
        """
        return pulumi.get(self, "qos_policy")

    @qos_policy.setter
    def qos_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "qos_policy", value)

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region ID.
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region_id", value)

    @_builtins.property
    @pulumi.getter
    def slas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionGroupSlaArgs']]]]:
        """
        Specifies the SLA parameters for this Protection Group.
        """
        return pulumi.get(self, "slas")

    @slas.setter
    def slas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryProtectionGroupSlaArgs']]]]):
        pulumi.set(self, "slas", value)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input['BackupRecoveryProtectionGroupStartTimeArgs']]:
        """
        Specifies the time of day. Used for scheduling purposes.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input['BackupRecoveryProtectionGroupStartTimeArgs']]):
        pulumi.set(self, "start_time", value)

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
        be specified.
        """
        return pulumi.get(self, "x_ibm_tenant_id")

    @x_ibm_tenant_id.setter
    def x_ibm_tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "x_ibm_tenant_id", value)


@pulumi.type_token("ibm:index/backupRecoveryProtectionGroup:BackupRecoveryProtectionGroup")
class BackupRecoveryProtectionGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 abort_in_blackouts: Optional[pulumi.Input[_builtins.bool]] = None,
                 advanced_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryProtectionGroupAdvancedConfigArgs', 'BackupRecoveryProtectionGroupAdvancedConfigArgsDict']]]]] = None,
                 alert_policy: Optional[pulumi.Input[Union['BackupRecoveryProtectionGroupAlertPolicyArgs', 'BackupRecoveryProtectionGroupAlertPolicyArgsDict']]] = None,
                 backup_recovery_protection_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 end_time_usecs: Optional[pulumi.Input[_builtins.float]] = None,
                 environment: Optional[pulumi.Input[_builtins.str]] = None,
                 is_paused: Optional[pulumi.Input[_builtins.bool]] = None,
                 mssql_params: Optional[pulumi.Input[Union['BackupRecoveryProtectionGroupMssqlParamsArgs', 'BackupRecoveryProtectionGroupMssqlParamsArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 pause_in_blackouts: Optional[pulumi.Input[_builtins.bool]] = None,
                 physical_params: Optional[pulumi.Input[Union['BackupRecoveryProtectionGroupPhysicalParamsArgs', 'BackupRecoveryProtectionGroupPhysicalParamsArgsDict']]] = None,
                 policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 priority: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 slas: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryProtectionGroupSlaArgs', 'BackupRecoveryProtectionGroupSlaArgsDict']]]]] = None,
                 start_time: Optional[pulumi.Input[Union['BackupRecoveryProtectionGroupStartTimeArgs', 'BackupRecoveryProtectionGroupStartTimeArgsDict']]] = None,
                 x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a BackupRecoveryProtectionGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] abort_in_blackouts: Specifies whether currently executing jobs should abort if a blackout period specified by a policy starts. Available
               only if the selected policy has at least one blackout period. Default value is false.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryProtectionGroupAdvancedConfigArgs', 'BackupRecoveryProtectionGroupAdvancedConfigArgsDict']]]] advanced_configs: Specifies the advanced configuration for a protection job.
        :param pulumi.Input[Union['BackupRecoveryProtectionGroupAlertPolicyArgs', 'BackupRecoveryProtectionGroupAlertPolicyArgsDict']] alert_policy: Specifies a policy for alerting users of the status of a Protection Group.
        :param pulumi.Input[_builtins.str] description: Specifies a description of the Protection Group.
        :param pulumi.Input[_builtins.float] end_time_usecs: Specifies the end time in micro seconds for this Protection Group. If this is not specified, the Protection Group won't
               be ended.
        :param pulumi.Input[_builtins.str] environment: Specifies the environment of the Protection Group.
        :param pulumi.Input[_builtins.bool] is_paused: Specifies if the the Protection Group is paused. New runs are not scheduled for the paused Protection Groups. Active run
               if any is not impacted.
        :param pulumi.Input[Union['BackupRecoveryProtectionGroupMssqlParamsArgs', 'BackupRecoveryProtectionGroupMssqlParamsArgsDict']] mssql_params: Specifies the parameters specific to MSSQL Protection Group.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the Protection Group.
        :param pulumi.Input[_builtins.bool] pause_in_blackouts: Specifies whether currently executing jobs should be paused if a blackout period specified by a policy starts. Available
               only if the selected policy has at least one blackout period. Default value is false. This field should not be set to
               true if 'abortInBlackouts' is sent as true.
        :param pulumi.Input[_builtins.str] policy_id: Specifies the unique id of the Protection Policy associated with the Protection Group. The Policy provides retry
               settings Protection Schedules, Priority, SLA, etc.
        :param pulumi.Input[_builtins.str] priority: Specifies the priority of the Protection Group.
        :param pulumi.Input[_builtins.str] qos_policy: Specifies whether the Protection Group will be written to HDD or SSD.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryProtectionGroupSlaArgs', 'BackupRecoveryProtectionGroupSlaArgsDict']]]] slas: Specifies the SLA parameters for this Protection Group.
        :param pulumi.Input[Union['BackupRecoveryProtectionGroupStartTimeArgs', 'BackupRecoveryProtectionGroupStartTimeArgsDict']] start_time: Specifies the time of day. Used for scheduling purposes.
        :param pulumi.Input[_builtins.str] x_ibm_tenant_id: Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
               be specified.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BackupRecoveryProtectionGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a BackupRecoveryProtectionGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param BackupRecoveryProtectionGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BackupRecoveryProtectionGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 abort_in_blackouts: Optional[pulumi.Input[_builtins.bool]] = None,
                 advanced_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryProtectionGroupAdvancedConfigArgs', 'BackupRecoveryProtectionGroupAdvancedConfigArgsDict']]]]] = None,
                 alert_policy: Optional[pulumi.Input[Union['BackupRecoveryProtectionGroupAlertPolicyArgs', 'BackupRecoveryProtectionGroupAlertPolicyArgsDict']]] = None,
                 backup_recovery_protection_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 end_time_usecs: Optional[pulumi.Input[_builtins.float]] = None,
                 environment: Optional[pulumi.Input[_builtins.str]] = None,
                 is_paused: Optional[pulumi.Input[_builtins.bool]] = None,
                 mssql_params: Optional[pulumi.Input[Union['BackupRecoveryProtectionGroupMssqlParamsArgs', 'BackupRecoveryProtectionGroupMssqlParamsArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 pause_in_blackouts: Optional[pulumi.Input[_builtins.bool]] = None,
                 physical_params: Optional[pulumi.Input[Union['BackupRecoveryProtectionGroupPhysicalParamsArgs', 'BackupRecoveryProtectionGroupPhysicalParamsArgsDict']]] = None,
                 policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 priority: Optional[pulumi.Input[_builtins.str]] = None,
                 qos_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 slas: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryProtectionGroupSlaArgs', 'BackupRecoveryProtectionGroupSlaArgsDict']]]]] = None,
                 start_time: Optional[pulumi.Input[Union['BackupRecoveryProtectionGroupStartTimeArgs', 'BackupRecoveryProtectionGroupStartTimeArgsDict']]] = None,
                 x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BackupRecoveryProtectionGroupArgs.__new__(BackupRecoveryProtectionGroupArgs)

            __props__.__dict__["abort_in_blackouts"] = abort_in_blackouts
            __props__.__dict__["advanced_configs"] = advanced_configs
            __props__.__dict__["alert_policy"] = alert_policy
            __props__.__dict__["backup_recovery_protection_group_id"] = backup_recovery_protection_group_id
            __props__.__dict__["description"] = description
            __props__.__dict__["end_time_usecs"] = end_time_usecs
            if environment is None and not opts.urn:
                raise TypeError("Missing required property 'environment'")
            __props__.__dict__["environment"] = environment
            __props__.__dict__["is_paused"] = is_paused
            __props__.__dict__["mssql_params"] = mssql_params
            __props__.__dict__["name"] = name
            __props__.__dict__["pause_in_blackouts"] = pause_in_blackouts
            __props__.__dict__["physical_params"] = physical_params
            if policy_id is None and not opts.urn:
                raise TypeError("Missing required property 'policy_id'")
            __props__.__dict__["policy_id"] = policy_id
            __props__.__dict__["priority"] = priority
            __props__.__dict__["qos_policy"] = qos_policy
            __props__.__dict__["slas"] = slas
            __props__.__dict__["start_time"] = start_time
            if x_ibm_tenant_id is None and not opts.urn:
                raise TypeError("Missing required property 'x_ibm_tenant_id'")
            __props__.__dict__["x_ibm_tenant_id"] = x_ibm_tenant_id
            __props__.__dict__["cluster_id"] = None
            __props__.__dict__["group_id"] = None
            __props__.__dict__["invalid_entities"] = None
            __props__.__dict__["is_active"] = None
            __props__.__dict__["is_deleted"] = None
            __props__.__dict__["is_protect_once"] = None
            __props__.__dict__["last_modified_timestamp_usecs"] = None
            __props__.__dict__["last_runs"] = None
            __props__.__dict__["missing_entities"] = None
            __props__.__dict__["num_protected_objects"] = None
            __props__.__dict__["permissions"] = None
            __props__.__dict__["region_id"] = None
        super(BackupRecoveryProtectionGroup, __self__).__init__(
            'ibm:index/backupRecoveryProtectionGroup:BackupRecoveryProtectionGroup',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            abort_in_blackouts: Optional[pulumi.Input[_builtins.bool]] = None,
            advanced_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryProtectionGroupAdvancedConfigArgs', 'BackupRecoveryProtectionGroupAdvancedConfigArgsDict']]]]] = None,
            alert_policy: Optional[pulumi.Input[Union['BackupRecoveryProtectionGroupAlertPolicyArgs', 'BackupRecoveryProtectionGroupAlertPolicyArgsDict']]] = None,
            backup_recovery_protection_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            end_time_usecs: Optional[pulumi.Input[_builtins.float]] = None,
            environment: Optional[pulumi.Input[_builtins.str]] = None,
            group_id: Optional[pulumi.Input[_builtins.str]] = None,
            invalid_entities: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryProtectionGroupInvalidEntityArgs', 'BackupRecoveryProtectionGroupInvalidEntityArgsDict']]]]] = None,
            is_active: Optional[pulumi.Input[_builtins.bool]] = None,
            is_deleted: Optional[pulumi.Input[_builtins.bool]] = None,
            is_paused: Optional[pulumi.Input[_builtins.bool]] = None,
            is_protect_once: Optional[pulumi.Input[_builtins.bool]] = None,
            last_modified_timestamp_usecs: Optional[pulumi.Input[_builtins.float]] = None,
            last_runs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryProtectionGroupLastRunArgs', 'BackupRecoveryProtectionGroupLastRunArgsDict']]]]] = None,
            missing_entities: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryProtectionGroupMissingEntityArgs', 'BackupRecoveryProtectionGroupMissingEntityArgsDict']]]]] = None,
            mssql_params: Optional[pulumi.Input[Union['BackupRecoveryProtectionGroupMssqlParamsArgs', 'BackupRecoveryProtectionGroupMssqlParamsArgsDict']]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            num_protected_objects: Optional[pulumi.Input[_builtins.float]] = None,
            pause_in_blackouts: Optional[pulumi.Input[_builtins.bool]] = None,
            permissions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryProtectionGroupPermissionArgs', 'BackupRecoveryProtectionGroupPermissionArgsDict']]]]] = None,
            physical_params: Optional[pulumi.Input[Union['BackupRecoveryProtectionGroupPhysicalParamsArgs', 'BackupRecoveryProtectionGroupPhysicalParamsArgsDict']]] = None,
            policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            priority: Optional[pulumi.Input[_builtins.str]] = None,
            qos_policy: Optional[pulumi.Input[_builtins.str]] = None,
            region_id: Optional[pulumi.Input[_builtins.str]] = None,
            slas: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryProtectionGroupSlaArgs', 'BackupRecoveryProtectionGroupSlaArgsDict']]]]] = None,
            start_time: Optional[pulumi.Input[Union['BackupRecoveryProtectionGroupStartTimeArgs', 'BackupRecoveryProtectionGroupStartTimeArgsDict']]] = None,
            x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'BackupRecoveryProtectionGroup':
        """
        Get an existing BackupRecoveryProtectionGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] abort_in_blackouts: Specifies whether currently executing jobs should abort if a blackout period specified by a policy starts. Available
               only if the selected policy has at least one blackout period. Default value is false.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryProtectionGroupAdvancedConfigArgs', 'BackupRecoveryProtectionGroupAdvancedConfigArgsDict']]]] advanced_configs: Specifies the advanced configuration for a protection job.
        :param pulumi.Input[Union['BackupRecoveryProtectionGroupAlertPolicyArgs', 'BackupRecoveryProtectionGroupAlertPolicyArgsDict']] alert_policy: Specifies a policy for alerting users of the status of a Protection Group.
        :param pulumi.Input[_builtins.str] cluster_id: Specifies the cluster ID.
        :param pulumi.Input[_builtins.str] description: Specifies a description of the Protection Group.
        :param pulumi.Input[_builtins.float] end_time_usecs: Specifies the end time in micro seconds for this Protection Group. If this is not specified, the Protection Group won't
               be ended.
        :param pulumi.Input[_builtins.str] environment: Specifies the environment of the Protection Group.
        :param pulumi.Input[_builtins.str] group_id: Group ID
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryProtectionGroupInvalidEntityArgs', 'BackupRecoveryProtectionGroupInvalidEntityArgsDict']]]] invalid_entities: Specifies the Information about invalid entities. An entity will be considered invalid if it is part of an active
               protection group but has lost compatibility for the given backup type.
        :param pulumi.Input[_builtins.bool] is_active: Specifies if the Protection Group is active or not.
        :param pulumi.Input[_builtins.bool] is_deleted: Specifies if the Protection Group has been deleted.
        :param pulumi.Input[_builtins.bool] is_paused: Specifies if the the Protection Group is paused. New runs are not scheduled for the paused Protection Groups. Active run
               if any is not impacted.
        :param pulumi.Input[_builtins.bool] is_protect_once: Specifies if the the Protection Group is using a protect once type of policy. This field is helpful to identify run
               happen for this group.
        :param pulumi.Input[_builtins.float] last_modified_timestamp_usecs: Specifies the last time this protection group was updated. If this is passed into a PUT request, then the backend will
               validate that the timestamp passed in matches the time that the protection group was actually last modified. If the two
               timestamps do not match, then the request will be rejected with a stale error.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryProtectionGroupLastRunArgs', 'BackupRecoveryProtectionGroupLastRunArgsDict']]]] last_runs: Specifies the parameters which are common between Protection Group runs of all Protection Groups.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryProtectionGroupMissingEntityArgs', 'BackupRecoveryProtectionGroupMissingEntityArgsDict']]]] missing_entities: Specifies the Information about missing entities.
        :param pulumi.Input[Union['BackupRecoveryProtectionGroupMssqlParamsArgs', 'BackupRecoveryProtectionGroupMssqlParamsArgsDict']] mssql_params: Specifies the parameters specific to MSSQL Protection Group.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the Protection Group.
        :param pulumi.Input[_builtins.float] num_protected_objects: Specifies the number of protected objects of the Protection Group.
        :param pulumi.Input[_builtins.bool] pause_in_blackouts: Specifies whether currently executing jobs should be paused if a blackout period specified by a policy starts. Available
               only if the selected policy has at least one blackout period. Default value is false. This field should not be set to
               true if 'abortInBlackouts' is sent as true.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryProtectionGroupPermissionArgs', 'BackupRecoveryProtectionGroupPermissionArgsDict']]]] permissions: Specifies the list of tenants that have permissions for this protection group.
        :param pulumi.Input[_builtins.str] policy_id: Specifies the unique id of the Protection Policy associated with the Protection Group. The Policy provides retry
               settings Protection Schedules, Priority, SLA, etc.
        :param pulumi.Input[_builtins.str] priority: Specifies the priority of the Protection Group.
        :param pulumi.Input[_builtins.str] qos_policy: Specifies whether the Protection Group will be written to HDD or SSD.
        :param pulumi.Input[_builtins.str] region_id: Specifies the region ID.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryProtectionGroupSlaArgs', 'BackupRecoveryProtectionGroupSlaArgsDict']]]] slas: Specifies the SLA parameters for this Protection Group.
        :param pulumi.Input[Union['BackupRecoveryProtectionGroupStartTimeArgs', 'BackupRecoveryProtectionGroupStartTimeArgsDict']] start_time: Specifies the time of day. Used for scheduling purposes.
        :param pulumi.Input[_builtins.str] x_ibm_tenant_id: Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
               be specified.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BackupRecoveryProtectionGroupState.__new__(_BackupRecoveryProtectionGroupState)

        __props__.__dict__["abort_in_blackouts"] = abort_in_blackouts
        __props__.__dict__["advanced_configs"] = advanced_configs
        __props__.__dict__["alert_policy"] = alert_policy
        __props__.__dict__["backup_recovery_protection_group_id"] = backup_recovery_protection_group_id
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["description"] = description
        __props__.__dict__["end_time_usecs"] = end_time_usecs
        __props__.__dict__["environment"] = environment
        __props__.__dict__["group_id"] = group_id
        __props__.__dict__["invalid_entities"] = invalid_entities
        __props__.__dict__["is_active"] = is_active
        __props__.__dict__["is_deleted"] = is_deleted
        __props__.__dict__["is_paused"] = is_paused
        __props__.__dict__["is_protect_once"] = is_protect_once
        __props__.__dict__["last_modified_timestamp_usecs"] = last_modified_timestamp_usecs
        __props__.__dict__["last_runs"] = last_runs
        __props__.__dict__["missing_entities"] = missing_entities
        __props__.__dict__["mssql_params"] = mssql_params
        __props__.__dict__["name"] = name
        __props__.__dict__["num_protected_objects"] = num_protected_objects
        __props__.__dict__["pause_in_blackouts"] = pause_in_blackouts
        __props__.__dict__["permissions"] = permissions
        __props__.__dict__["physical_params"] = physical_params
        __props__.__dict__["policy_id"] = policy_id
        __props__.__dict__["priority"] = priority
        __props__.__dict__["qos_policy"] = qos_policy
        __props__.__dict__["region_id"] = region_id
        __props__.__dict__["slas"] = slas
        __props__.__dict__["start_time"] = start_time
        __props__.__dict__["x_ibm_tenant_id"] = x_ibm_tenant_id
        return BackupRecoveryProtectionGroup(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="abortInBlackouts")
    def abort_in_blackouts(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether currently executing jobs should abort if a blackout period specified by a policy starts. Available
        only if the selected policy has at least one blackout period. Default value is false.
        """
        return pulumi.get(self, "abort_in_blackouts")

    @_builtins.property
    @pulumi.getter(name="advancedConfigs")
    def advanced_configs(self) -> pulumi.Output[Optional[Sequence['outputs.BackupRecoveryProtectionGroupAdvancedConfig']]]:
        """
        Specifies the advanced configuration for a protection job.
        """
        return pulumi.get(self, "advanced_configs")

    @_builtins.property
    @pulumi.getter(name="alertPolicy")
    def alert_policy(self) -> pulumi.Output[Optional['outputs.BackupRecoveryProtectionGroupAlertPolicy']]:
        """
        Specifies a policy for alerting users of the status of a Protection Group.
        """
        return pulumi.get(self, "alert_policy")

    @_builtins.property
    @pulumi.getter(name="backupRecoveryProtectionGroupId")
    def backup_recovery_protection_group_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "backup_recovery_protection_group_id")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies a description of the Protection Group.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="endTimeUsecs")
    def end_time_usecs(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Specifies the end time in micro seconds for this Protection Group. If this is not specified, the Protection Group won't
        be ended.
        """
        return pulumi.get(self, "end_time_usecs")

    @_builtins.property
    @pulumi.getter
    def environment(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the environment of the Protection Group.
        """
        return pulumi.get(self, "environment")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Output[_builtins.str]:
        """
        Group ID
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="invalidEntities")
    def invalid_entities(self) -> pulumi.Output[Sequence['outputs.BackupRecoveryProtectionGroupInvalidEntity']]:
        """
        Specifies the Information about invalid entities. An entity will be considered invalid if it is part of an active
        protection group but has lost compatibility for the given backup type.
        """
        return pulumi.get(self, "invalid_entities")

    @_builtins.property
    @pulumi.getter(name="isActive")
    def is_active(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies if the Protection Group is active or not.
        """
        return pulumi.get(self, "is_active")

    @_builtins.property
    @pulumi.getter(name="isDeleted")
    def is_deleted(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies if the Protection Group has been deleted.
        """
        return pulumi.get(self, "is_deleted")

    @_builtins.property
    @pulumi.getter(name="isPaused")
    def is_paused(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies if the the Protection Group is paused. New runs are not scheduled for the paused Protection Groups. Active run
        if any is not impacted.
        """
        return pulumi.get(self, "is_paused")

    @_builtins.property
    @pulumi.getter(name="isProtectOnce")
    def is_protect_once(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies if the the Protection Group is using a protect once type of policy. This field is helpful to identify run
        happen for this group.
        """
        return pulumi.get(self, "is_protect_once")

    @_builtins.property
    @pulumi.getter(name="lastModifiedTimestampUsecs")
    def last_modified_timestamp_usecs(self) -> pulumi.Output[_builtins.float]:
        """
        Specifies the last time this protection group was updated. If this is passed into a PUT request, then the backend will
        validate that the timestamp passed in matches the time that the protection group was actually last modified. If the two
        timestamps do not match, then the request will be rejected with a stale error.
        """
        return pulumi.get(self, "last_modified_timestamp_usecs")

    @_builtins.property
    @pulumi.getter(name="lastRuns")
    def last_runs(self) -> pulumi.Output[Sequence['outputs.BackupRecoveryProtectionGroupLastRun']]:
        """
        Specifies the parameters which are common between Protection Group runs of all Protection Groups.
        """
        return pulumi.get(self, "last_runs")

    @_builtins.property
    @pulumi.getter(name="missingEntities")
    def missing_entities(self) -> pulumi.Output[Sequence['outputs.BackupRecoveryProtectionGroupMissingEntity']]:
        """
        Specifies the Information about missing entities.
        """
        return pulumi.get(self, "missing_entities")

    @_builtins.property
    @pulumi.getter(name="mssqlParams")
    def mssql_params(self) -> pulumi.Output[Optional['outputs.BackupRecoveryProtectionGroupMssqlParams']]:
        """
        Specifies the parameters specific to MSSQL Protection Group.
        """
        return pulumi.get(self, "mssql_params")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the Protection Group.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="numProtectedObjects")
    def num_protected_objects(self) -> pulumi.Output[_builtins.float]:
        """
        Specifies the number of protected objects of the Protection Group.
        """
        return pulumi.get(self, "num_protected_objects")

    @_builtins.property
    @pulumi.getter(name="pauseInBlackouts")
    def pause_in_blackouts(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether currently executing jobs should be paused if a blackout period specified by a policy starts. Available
        only if the selected policy has at least one blackout period. Default value is false. This field should not be set to
        true if 'abortInBlackouts' is sent as true.
        """
        return pulumi.get(self, "pause_in_blackouts")

    @_builtins.property
    @pulumi.getter
    def permissions(self) -> pulumi.Output[Sequence['outputs.BackupRecoveryProtectionGroupPermission']]:
        """
        Specifies the list of tenants that have permissions for this protection group.
        """
        return pulumi.get(self, "permissions")

    @_builtins.property
    @pulumi.getter(name="physicalParams")
    def physical_params(self) -> pulumi.Output[Optional['outputs.BackupRecoveryProtectionGroupPhysicalParams']]:
        return pulumi.get(self, "physical_params")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the unique id of the Protection Policy associated with the Protection Group. The Policy provides retry
        settings Protection Schedules, Priority, SLA, etc.
        """
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the priority of the Protection Group.
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="qosPolicy")
    def qos_policy(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies whether the Protection Group will be written to HDD or SSD.
        """
        return pulumi.get(self, "qos_policy")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region ID.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter
    def slas(self) -> pulumi.Output[Optional[Sequence['outputs.BackupRecoveryProtectionGroupSla']]]:
        """
        Specifies the SLA parameters for this Protection Group.
        """
        return pulumi.get(self, "slas")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Output[Optional['outputs.BackupRecoveryProtectionGroupStartTime']]:
        """
        Specifies the time of day. Used for scheduling purposes.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
        be specified.
        """
        return pulumi.get(self, "x_ibm_tenant_id")

