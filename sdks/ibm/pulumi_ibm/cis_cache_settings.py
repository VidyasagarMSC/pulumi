# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['CisCacheSettingsArgs', 'CisCacheSettings']

@pulumi.input_type
class CisCacheSettingsArgs:
    def __init__(__self__, *,
                 cis_id: pulumi.Input[_builtins.str],
                 domain_id: pulumi.Input[_builtins.str],
                 browser_expiration: Optional[pulumi.Input[_builtins.float]] = None,
                 caching_level: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_cache_settings_id: Optional[pulumi.Input[_builtins.str]] = None,
                 development_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 purge_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 purge_by_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 purge_by_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 purge_by_urls: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 query_string_sort: Optional[pulumi.Input[_builtins.str]] = None,
                 serve_stale_content: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CisCacheSettings resource.
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.float] browser_expiration: Browser Expiration setting
        :param pulumi.Input[_builtins.str] caching_level: Cache level setting
        :param pulumi.Input[_builtins.str] development_mode: Development mode setting
        :param pulumi.Input[_builtins.bool] purge_all: Purge all setting
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] purge_by_hosts: Purge by hosts
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] purge_by_tags: Purge by tags
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] purge_by_urls: Purge by URLs
        :param pulumi.Input[_builtins.str] query_string_sort: Query String sort setting
        :param pulumi.Input[_builtins.str] serve_stale_content: Serve Stale Content
        """
        pulumi.set(__self__, "cis_id", cis_id)
        pulumi.set(__self__, "domain_id", domain_id)
        if browser_expiration is not None:
            pulumi.set(__self__, "browser_expiration", browser_expiration)
        if caching_level is not None:
            pulumi.set(__self__, "caching_level", caching_level)
        if cis_cache_settings_id is not None:
            pulumi.set(__self__, "cis_cache_settings_id", cis_cache_settings_id)
        if development_mode is not None:
            pulumi.set(__self__, "development_mode", development_mode)
        if purge_all is not None:
            pulumi.set(__self__, "purge_all", purge_all)
        if purge_by_hosts is not None:
            pulumi.set(__self__, "purge_by_hosts", purge_by_hosts)
        if purge_by_tags is not None:
            pulumi.set(__self__, "purge_by_tags", purge_by_tags)
        if purge_by_urls is not None:
            pulumi.set(__self__, "purge_by_urls", purge_by_urls)
        if query_string_sort is not None:
            pulumi.set(__self__, "query_string_sort", query_string_sort)
        if serve_stale_content is not None:
            pulumi.set(__self__, "serve_stale_content", serve_stale_content)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Input[_builtins.str]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Input[_builtins.str]:
        """
        Associated CIS domain
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter(name="browserExpiration")
    def browser_expiration(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Browser Expiration setting
        """
        return pulumi.get(self, "browser_expiration")

    @browser_expiration.setter
    def browser_expiration(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "browser_expiration", value)

    @_builtins.property
    @pulumi.getter(name="cachingLevel")
    def caching_level(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cache level setting
        """
        return pulumi.get(self, "caching_level")

    @caching_level.setter
    def caching_level(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "caching_level", value)

    @_builtins.property
    @pulumi.getter(name="cisCacheSettingsId")
    def cis_cache_settings_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_cache_settings_id")

    @cis_cache_settings_id.setter
    def cis_cache_settings_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_cache_settings_id", value)

    @_builtins.property
    @pulumi.getter(name="developmentMode")
    def development_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Development mode setting
        """
        return pulumi.get(self, "development_mode")

    @development_mode.setter
    def development_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "development_mode", value)

    @_builtins.property
    @pulumi.getter(name="purgeAll")
    def purge_all(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Purge all setting
        """
        return pulumi.get(self, "purge_all")

    @purge_all.setter
    def purge_all(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "purge_all", value)

    @_builtins.property
    @pulumi.getter(name="purgeByHosts")
    def purge_by_hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Purge by hosts
        """
        return pulumi.get(self, "purge_by_hosts")

    @purge_by_hosts.setter
    def purge_by_hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "purge_by_hosts", value)

    @_builtins.property
    @pulumi.getter(name="purgeByTags")
    def purge_by_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Purge by tags
        """
        return pulumi.get(self, "purge_by_tags")

    @purge_by_tags.setter
    def purge_by_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "purge_by_tags", value)

    @_builtins.property
    @pulumi.getter(name="purgeByUrls")
    def purge_by_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Purge by URLs
        """
        return pulumi.get(self, "purge_by_urls")

    @purge_by_urls.setter
    def purge_by_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "purge_by_urls", value)

    @_builtins.property
    @pulumi.getter(name="queryStringSort")
    def query_string_sort(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Query String sort setting
        """
        return pulumi.get(self, "query_string_sort")

    @query_string_sort.setter
    def query_string_sort(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "query_string_sort", value)

    @_builtins.property
    @pulumi.getter(name="serveStaleContent")
    def serve_stale_content(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Serve Stale Content
        """
        return pulumi.get(self, "serve_stale_content")

    @serve_stale_content.setter
    def serve_stale_content(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "serve_stale_content", value)


@pulumi.input_type
class _CisCacheSettingsState:
    def __init__(__self__, *,
                 browser_expiration: Optional[pulumi.Input[_builtins.float]] = None,
                 caching_level: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_cache_settings_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 development_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 purge_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 purge_by_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 purge_by_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 purge_by_urls: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 query_string_sort: Optional[pulumi.Input[_builtins.str]] = None,
                 serve_stale_content: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CisCacheSettings resources.
        :param pulumi.Input[_builtins.float] browser_expiration: Browser Expiration setting
        :param pulumi.Input[_builtins.str] caching_level: Cache level setting
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] development_mode: Development mode setting
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.bool] purge_all: Purge all setting
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] purge_by_hosts: Purge by hosts
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] purge_by_tags: Purge by tags
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] purge_by_urls: Purge by URLs
        :param pulumi.Input[_builtins.str] query_string_sort: Query String sort setting
        :param pulumi.Input[_builtins.str] serve_stale_content: Serve Stale Content
        """
        if browser_expiration is not None:
            pulumi.set(__self__, "browser_expiration", browser_expiration)
        if caching_level is not None:
            pulumi.set(__self__, "caching_level", caching_level)
        if cis_cache_settings_id is not None:
            pulumi.set(__self__, "cis_cache_settings_id", cis_cache_settings_id)
        if cis_id is not None:
            pulumi.set(__self__, "cis_id", cis_id)
        if development_mode is not None:
            pulumi.set(__self__, "development_mode", development_mode)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if purge_all is not None:
            pulumi.set(__self__, "purge_all", purge_all)
        if purge_by_hosts is not None:
            pulumi.set(__self__, "purge_by_hosts", purge_by_hosts)
        if purge_by_tags is not None:
            pulumi.set(__self__, "purge_by_tags", purge_by_tags)
        if purge_by_urls is not None:
            pulumi.set(__self__, "purge_by_urls", purge_by_urls)
        if query_string_sort is not None:
            pulumi.set(__self__, "query_string_sort", query_string_sort)
        if serve_stale_content is not None:
            pulumi.set(__self__, "serve_stale_content", serve_stale_content)

    @_builtins.property
    @pulumi.getter(name="browserExpiration")
    def browser_expiration(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Browser Expiration setting
        """
        return pulumi.get(self, "browser_expiration")

    @browser_expiration.setter
    def browser_expiration(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "browser_expiration", value)

    @_builtins.property
    @pulumi.getter(name="cachingLevel")
    def caching_level(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cache level setting
        """
        return pulumi.get(self, "caching_level")

    @caching_level.setter
    def caching_level(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "caching_level", value)

    @_builtins.property
    @pulumi.getter(name="cisCacheSettingsId")
    def cis_cache_settings_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_cache_settings_id")

    @cis_cache_settings_id.setter
    def cis_cache_settings_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_cache_settings_id", value)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter(name="developmentMode")
    def development_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Development mode setting
        """
        return pulumi.get(self, "development_mode")

    @development_mode.setter
    def development_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "development_mode", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Associated CIS domain
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter(name="purgeAll")
    def purge_all(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Purge all setting
        """
        return pulumi.get(self, "purge_all")

    @purge_all.setter
    def purge_all(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "purge_all", value)

    @_builtins.property
    @pulumi.getter(name="purgeByHosts")
    def purge_by_hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Purge by hosts
        """
        return pulumi.get(self, "purge_by_hosts")

    @purge_by_hosts.setter
    def purge_by_hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "purge_by_hosts", value)

    @_builtins.property
    @pulumi.getter(name="purgeByTags")
    def purge_by_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Purge by tags
        """
        return pulumi.get(self, "purge_by_tags")

    @purge_by_tags.setter
    def purge_by_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "purge_by_tags", value)

    @_builtins.property
    @pulumi.getter(name="purgeByUrls")
    def purge_by_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Purge by URLs
        """
        return pulumi.get(self, "purge_by_urls")

    @purge_by_urls.setter
    def purge_by_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "purge_by_urls", value)

    @_builtins.property
    @pulumi.getter(name="queryStringSort")
    def query_string_sort(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Query String sort setting
        """
        return pulumi.get(self, "query_string_sort")

    @query_string_sort.setter
    def query_string_sort(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "query_string_sort", value)

    @_builtins.property
    @pulumi.getter(name="serveStaleContent")
    def serve_stale_content(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Serve Stale Content
        """
        return pulumi.get(self, "serve_stale_content")

    @serve_stale_content.setter
    def serve_stale_content(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "serve_stale_content", value)


@pulumi.type_token("ibm:index/cisCacheSettings:CisCacheSettings")
class CisCacheSettings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 browser_expiration: Optional[pulumi.Input[_builtins.float]] = None,
                 caching_level: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_cache_settings_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 development_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 purge_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 purge_by_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 purge_by_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 purge_by_urls: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 query_string_sort: Optional[pulumi.Input[_builtins.str]] = None,
                 serve_stale_content: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a CisCacheSettings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] browser_expiration: Browser Expiration setting
        :param pulumi.Input[_builtins.str] caching_level: Cache level setting
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] development_mode: Development mode setting
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.bool] purge_all: Purge all setting
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] purge_by_hosts: Purge by hosts
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] purge_by_tags: Purge by tags
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] purge_by_urls: Purge by URLs
        :param pulumi.Input[_builtins.str] query_string_sort: Query String sort setting
        :param pulumi.Input[_builtins.str] serve_stale_content: Serve Stale Content
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CisCacheSettingsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CisCacheSettings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CisCacheSettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CisCacheSettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 browser_expiration: Optional[pulumi.Input[_builtins.float]] = None,
                 caching_level: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_cache_settings_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 development_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 purge_all: Optional[pulumi.Input[_builtins.bool]] = None,
                 purge_by_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 purge_by_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 purge_by_urls: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 query_string_sort: Optional[pulumi.Input[_builtins.str]] = None,
                 serve_stale_content: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CisCacheSettingsArgs.__new__(CisCacheSettingsArgs)

            __props__.__dict__["browser_expiration"] = browser_expiration
            __props__.__dict__["caching_level"] = caching_level
            __props__.__dict__["cis_cache_settings_id"] = cis_cache_settings_id
            if cis_id is None and not opts.urn:
                raise TypeError("Missing required property 'cis_id'")
            __props__.__dict__["cis_id"] = cis_id
            __props__.__dict__["development_mode"] = development_mode
            if domain_id is None and not opts.urn:
                raise TypeError("Missing required property 'domain_id'")
            __props__.__dict__["domain_id"] = domain_id
            __props__.__dict__["purge_all"] = purge_all
            __props__.__dict__["purge_by_hosts"] = purge_by_hosts
            __props__.__dict__["purge_by_tags"] = purge_by_tags
            __props__.__dict__["purge_by_urls"] = purge_by_urls
            __props__.__dict__["query_string_sort"] = query_string_sort
            __props__.__dict__["serve_stale_content"] = serve_stale_content
        super(CisCacheSettings, __self__).__init__(
            'ibm:index/cisCacheSettings:CisCacheSettings',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            browser_expiration: Optional[pulumi.Input[_builtins.float]] = None,
            caching_level: Optional[pulumi.Input[_builtins.str]] = None,
            cis_cache_settings_id: Optional[pulumi.Input[_builtins.str]] = None,
            cis_id: Optional[pulumi.Input[_builtins.str]] = None,
            development_mode: Optional[pulumi.Input[_builtins.str]] = None,
            domain_id: Optional[pulumi.Input[_builtins.str]] = None,
            purge_all: Optional[pulumi.Input[_builtins.bool]] = None,
            purge_by_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            purge_by_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            purge_by_urls: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            query_string_sort: Optional[pulumi.Input[_builtins.str]] = None,
            serve_stale_content: Optional[pulumi.Input[_builtins.str]] = None) -> 'CisCacheSettings':
        """
        Get an existing CisCacheSettings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] browser_expiration: Browser Expiration setting
        :param pulumi.Input[_builtins.str] caching_level: Cache level setting
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] development_mode: Development mode setting
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.bool] purge_all: Purge all setting
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] purge_by_hosts: Purge by hosts
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] purge_by_tags: Purge by tags
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] purge_by_urls: Purge by URLs
        :param pulumi.Input[_builtins.str] query_string_sort: Query String sort setting
        :param pulumi.Input[_builtins.str] serve_stale_content: Serve Stale Content
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CisCacheSettingsState.__new__(_CisCacheSettingsState)

        __props__.__dict__["browser_expiration"] = browser_expiration
        __props__.__dict__["caching_level"] = caching_level
        __props__.__dict__["cis_cache_settings_id"] = cis_cache_settings_id
        __props__.__dict__["cis_id"] = cis_id
        __props__.__dict__["development_mode"] = development_mode
        __props__.__dict__["domain_id"] = domain_id
        __props__.__dict__["purge_all"] = purge_all
        __props__.__dict__["purge_by_hosts"] = purge_by_hosts
        __props__.__dict__["purge_by_tags"] = purge_by_tags
        __props__.__dict__["purge_by_urls"] = purge_by_urls
        __props__.__dict__["query_string_sort"] = query_string_sort
        __props__.__dict__["serve_stale_content"] = serve_stale_content
        return CisCacheSettings(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="browserExpiration")
    def browser_expiration(self) -> pulumi.Output[_builtins.float]:
        """
        Browser Expiration setting
        """
        return pulumi.get(self, "browser_expiration")

    @_builtins.property
    @pulumi.getter(name="cachingLevel")
    def caching_level(self) -> pulumi.Output[_builtins.str]:
        """
        Cache level setting
        """
        return pulumi.get(self, "caching_level")

    @_builtins.property
    @pulumi.getter(name="cisCacheSettingsId")
    def cis_cache_settings_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cis_cache_settings_id")

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Output[_builtins.str]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @_builtins.property
    @pulumi.getter(name="developmentMode")
    def development_mode(self) -> pulumi.Output[_builtins.str]:
        """
        Development mode setting
        """
        return pulumi.get(self, "development_mode")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Output[_builtins.str]:
        """
        Associated CIS domain
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="purgeAll")
    def purge_all(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Purge all setting
        """
        return pulumi.get(self, "purge_all")

    @_builtins.property
    @pulumi.getter(name="purgeByHosts")
    def purge_by_hosts(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Purge by hosts
        """
        return pulumi.get(self, "purge_by_hosts")

    @_builtins.property
    @pulumi.getter(name="purgeByTags")
    def purge_by_tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Purge by tags
        """
        return pulumi.get(self, "purge_by_tags")

    @_builtins.property
    @pulumi.getter(name="purgeByUrls")
    def purge_by_urls(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Purge by URLs
        """
        return pulumi.get(self, "purge_by_urls")

    @_builtins.property
    @pulumi.getter(name="queryStringSort")
    def query_string_sort(self) -> pulumi.Output[_builtins.str]:
        """
        Query String sort setting
        """
        return pulumi.get(self, "query_string_sort")

    @_builtins.property
    @pulumi.getter(name="serveStaleContent")
    def serve_stale_content(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Serve Stale Content
        """
        return pulumi.get(self, "serve_stale_content")

