# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsSubnetResult',
    'AwaitableGetIsSubnetResult',
    'get_is_subnet',
    'get_is_subnet_output',
]

@pulumi.output_type
class GetIsSubnetResult:
    """
    A collection of values returned by getIsSubnet.
    """
    def __init__(__self__, access_tags=None, available_ipv4_address_count=None, crn=None, id=None, identifier=None, ipv4_cidr_block=None, name=None, network_acl=None, public_gateway=None, resource_controller_url=None, resource_crn=None, resource_group=None, resource_group_name=None, resource_name=None, resource_status=None, routing_tables=None, status=None, tags=None, total_ipv4_address_count=None, vpc=None, vpc_name=None, zone=None):
        if access_tags and not isinstance(access_tags, list):
            raise TypeError("Expected argument 'access_tags' to be a list")
        pulumi.set(__self__, "access_tags", access_tags)
        if available_ipv4_address_count and not isinstance(available_ipv4_address_count, float):
            raise TypeError("Expected argument 'available_ipv4_address_count' to be a float")
        pulumi.set(__self__, "available_ipv4_address_count", available_ipv4_address_count)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identifier and not isinstance(identifier, str):
            raise TypeError("Expected argument 'identifier' to be a str")
        pulumi.set(__self__, "identifier", identifier)
        if ipv4_cidr_block and not isinstance(ipv4_cidr_block, str):
            raise TypeError("Expected argument 'ipv4_cidr_block' to be a str")
        pulumi.set(__self__, "ipv4_cidr_block", ipv4_cidr_block)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_acl and not isinstance(network_acl, str):
            raise TypeError("Expected argument 'network_acl' to be a str")
        pulumi.set(__self__, "network_acl", network_acl)
        if public_gateway and not isinstance(public_gateway, str):
            raise TypeError("Expected argument 'public_gateway' to be a str")
        pulumi.set(__self__, "public_gateway", public_gateway)
        if resource_controller_url and not isinstance(resource_controller_url, str):
            raise TypeError("Expected argument 'resource_controller_url' to be a str")
        pulumi.set(__self__, "resource_controller_url", resource_controller_url)
        if resource_crn and not isinstance(resource_crn, str):
            raise TypeError("Expected argument 'resource_crn' to be a str")
        pulumi.set(__self__, "resource_crn", resource_crn)
        if resource_group and not isinstance(resource_group, str):
            raise TypeError("Expected argument 'resource_group' to be a str")
        pulumi.set(__self__, "resource_group", resource_group)
        if resource_group_name and not isinstance(resource_group_name, str):
            raise TypeError("Expected argument 'resource_group_name' to be a str")
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if resource_name and not isinstance(resource_name, str):
            raise TypeError("Expected argument 'resource_name' to be a str")
        pulumi.set(__self__, "resource_name", resource_name)
        if resource_status and not isinstance(resource_status, str):
            raise TypeError("Expected argument 'resource_status' to be a str")
        pulumi.set(__self__, "resource_status", resource_status)
        if routing_tables and not isinstance(routing_tables, list):
            raise TypeError("Expected argument 'routing_tables' to be a list")
        pulumi.set(__self__, "routing_tables", routing_tables)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if total_ipv4_address_count and not isinstance(total_ipv4_address_count, float):
            raise TypeError("Expected argument 'total_ipv4_address_count' to be a float")
        pulumi.set(__self__, "total_ipv4_address_count", total_ipv4_address_count)
        if vpc and not isinstance(vpc, str):
            raise TypeError("Expected argument 'vpc' to be a str")
        pulumi.set(__self__, "vpc", vpc)
        if vpc_name and not isinstance(vpc_name, str):
            raise TypeError("Expected argument 'vpc_name' to be a str")
        pulumi.set(__self__, "vpc_name", vpc_name)
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter(name="availableIpv4AddressCount")
    def available_ipv4_address_count(self) -> _builtins.float:
        return pulumi.get(self, "available_ipv4_address_count")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def identifier(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "identifier")

    @_builtins.property
    @pulumi.getter(name="ipv4CidrBlock")
    def ipv4_cidr_block(self) -> _builtins.str:
        return pulumi.get(self, "ipv4_cidr_block")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkAcl")
    def network_acl(self) -> _builtins.str:
        return pulumi.get(self, "network_acl")

    @_builtins.property
    @pulumi.getter(name="publicGateway")
    def public_gateway(self) -> _builtins.str:
        return pulumi.get(self, "public_gateway")

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> _builtins.str:
        return pulumi.get(self, "resource_controller_url")

    @_builtins.property
    @pulumi.getter(name="resourceCrn")
    def resource_crn(self) -> _builtins.str:
        return pulumi.get(self, "resource_crn")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> _builtins.str:
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> _builtins.str:
        return pulumi.get(self, "resource_group_name")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceStatus")
    def resource_status(self) -> _builtins.str:
        return pulumi.get(self, "resource_status")

    @_builtins.property
    @pulumi.getter(name="routingTables")
    def routing_tables(self) -> Sequence['outputs.GetIsSubnetRoutingTableResult']:
        return pulumi.get(self, "routing_tables")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="totalIpv4AddressCount")
    def total_ipv4_address_count(self) -> _builtins.float:
        return pulumi.get(self, "total_ipv4_address_count")

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> _builtins.str:
        return pulumi.get(self, "vpc")

    @_builtins.property
    @pulumi.getter(name="vpcName")
    def vpc_name(self) -> _builtins.str:
        return pulumi.get(self, "vpc_name")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> _builtins.str:
        return pulumi.get(self, "zone")


class AwaitableGetIsSubnetResult(GetIsSubnetResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsSubnetResult(
            access_tags=self.access_tags,
            available_ipv4_address_count=self.available_ipv4_address_count,
            crn=self.crn,
            id=self.id,
            identifier=self.identifier,
            ipv4_cidr_block=self.ipv4_cidr_block,
            name=self.name,
            network_acl=self.network_acl,
            public_gateway=self.public_gateway,
            resource_controller_url=self.resource_controller_url,
            resource_crn=self.resource_crn,
            resource_group=self.resource_group,
            resource_group_name=self.resource_group_name,
            resource_name=self.resource_name,
            resource_status=self.resource_status,
            routing_tables=self.routing_tables,
            status=self.status,
            tags=self.tags,
            total_ipv4_address_count=self.total_ipv4_address_count,
            vpc=self.vpc,
            vpc_name=self.vpc_name,
            zone=self.zone)


def get_is_subnet(id: Optional[_builtins.str] = None,
                  identifier: Optional[_builtins.str] = None,
                  name: Optional[_builtins.str] = None,
                  vpc: Optional[_builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsSubnetResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['identifier'] = identifier
    __args__['name'] = name
    __args__['vpc'] = vpc
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsSubnet:getIsSubnet', __args__, opts=opts, typ=GetIsSubnetResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsSubnetResult(
        access_tags=pulumi.get(__ret__, 'access_tags'),
        available_ipv4_address_count=pulumi.get(__ret__, 'available_ipv4_address_count'),
        crn=pulumi.get(__ret__, 'crn'),
        id=pulumi.get(__ret__, 'id'),
        identifier=pulumi.get(__ret__, 'identifier'),
        ipv4_cidr_block=pulumi.get(__ret__, 'ipv4_cidr_block'),
        name=pulumi.get(__ret__, 'name'),
        network_acl=pulumi.get(__ret__, 'network_acl'),
        public_gateway=pulumi.get(__ret__, 'public_gateway'),
        resource_controller_url=pulumi.get(__ret__, 'resource_controller_url'),
        resource_crn=pulumi.get(__ret__, 'resource_crn'),
        resource_group=pulumi.get(__ret__, 'resource_group'),
        resource_group_name=pulumi.get(__ret__, 'resource_group_name'),
        resource_name=pulumi.get(__ret__, 'resource_name'),
        resource_status=pulumi.get(__ret__, 'resource_status'),
        routing_tables=pulumi.get(__ret__, 'routing_tables'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'),
        total_ipv4_address_count=pulumi.get(__ret__, 'total_ipv4_address_count'),
        vpc=pulumi.get(__ret__, 'vpc'),
        vpc_name=pulumi.get(__ret__, 'vpc_name'),
        zone=pulumi.get(__ret__, 'zone'))
def get_is_subnet_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         identifier: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         vpc: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsSubnetResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['identifier'] = identifier
    __args__['name'] = name
    __args__['vpc'] = vpc
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsSubnet:getIsSubnet', __args__, opts=opts, typ=GetIsSubnetResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsSubnetResult(
        access_tags=pulumi.get(__response__, 'access_tags'),
        available_ipv4_address_count=pulumi.get(__response__, 'available_ipv4_address_count'),
        crn=pulumi.get(__response__, 'crn'),
        id=pulumi.get(__response__, 'id'),
        identifier=pulumi.get(__response__, 'identifier'),
        ipv4_cidr_block=pulumi.get(__response__, 'ipv4_cidr_block'),
        name=pulumi.get(__response__, 'name'),
        network_acl=pulumi.get(__response__, 'network_acl'),
        public_gateway=pulumi.get(__response__, 'public_gateway'),
        resource_controller_url=pulumi.get(__response__, 'resource_controller_url'),
        resource_crn=pulumi.get(__response__, 'resource_crn'),
        resource_group=pulumi.get(__response__, 'resource_group'),
        resource_group_name=pulumi.get(__response__, 'resource_group_name'),
        resource_name=pulumi.get(__response__, 'resource_name'),
        resource_status=pulumi.get(__response__, 'resource_status'),
        routing_tables=pulumi.get(__response__, 'routing_tables'),
        status=pulumi.get(__response__, 'status'),
        tags=pulumi.get(__response__, 'tags'),
        total_ipv4_address_count=pulumi.get(__response__, 'total_ipv4_address_count'),
        vpc=pulumi.get(__response__, 'vpc'),
        vpc_name=pulumi.get(__response__, 'vpc_name'),
        zone=pulumi.get(__response__, 'zone')))
