# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsBackupPolicyArgs', 'IsBackupPolicy']

@pulumi.input_type
class IsBackupPolicyArgs:
    def __init__(__self__, *,
                 match_user_tags: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 included_contents: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 is_backup_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 match_resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 match_resource_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 scope: Optional[pulumi.Input['IsBackupPolicyScopeArgs']] = None):
        """
        The set of arguments for constructing a IsBackupPolicy resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] match_user_tags: The user tags this backup policy applies to. Resources that have both a matching user tag and a matching type will be
               subject to the backup policy.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] included_contents: The included content for backups created using this policy
        :param pulumi.Input[_builtins.str] match_resource_type: A resource type this backup policy applies to. Resources that have both a matching type and a matching user tag will be
               subject to the backup policy.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] match_resource_types: A resource type this backup policy applies to. Resources that have both a matching type and a matching user tag will be
               subject to the backup policy.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this backup policy. Names must be unique within the region this backup policy resides in. If
               unspecified, the name will be a hyphenated list of randomly-selected words.
        :param pulumi.Input[_builtins.str] resource_group: The unique identifier of the resource group to use. If unspecified, the account's [default
               resourcegroup](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
        :param pulumi.Input['IsBackupPolicyScopeArgs'] scope: The scope for this backup policy.
        """
        pulumi.set(__self__, "match_user_tags", match_user_tags)
        if included_contents is not None:
            pulumi.set(__self__, "included_contents", included_contents)
        if is_backup_policy_id is not None:
            pulumi.set(__self__, "is_backup_policy_id", is_backup_policy_id)
        if match_resource_type is not None:
            pulumi.set(__self__, "match_resource_type", match_resource_type)
        if match_resource_types is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""match_resource_types is deprecated: Deprecated""")
        if match_resource_types is not None:
            pulumi.set(__self__, "match_resource_types", match_resource_types)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @_builtins.property
    @pulumi.getter(name="matchUserTags")
    def match_user_tags(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        The user tags this backup policy applies to. Resources that have both a matching user tag and a matching type will be
        subject to the backup policy.
        """
        return pulumi.get(self, "match_user_tags")

    @match_user_tags.setter
    def match_user_tags(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "match_user_tags", value)

    @_builtins.property
    @pulumi.getter(name="includedContents")
    def included_contents(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The included content for backups created using this policy
        """
        return pulumi.get(self, "included_contents")

    @included_contents.setter
    def included_contents(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "included_contents", value)

    @_builtins.property
    @pulumi.getter(name="isBackupPolicyId")
    def is_backup_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_backup_policy_id")

    @is_backup_policy_id.setter
    def is_backup_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_backup_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="matchResourceType")
    def match_resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A resource type this backup policy applies to. Resources that have both a matching type and a matching user tag will be
        subject to the backup policy.
        """
        return pulumi.get(self, "match_resource_type")

    @match_resource_type.setter
    def match_resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "match_resource_type", value)

    @_builtins.property
    @pulumi.getter(name="matchResourceTypes")
    @_utilities.deprecated("""Deprecated""")
    def match_resource_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        A resource type this backup policy applies to. Resources that have both a matching type and a matching user tag will be
        subject to the backup policy.
        """
        return pulumi.get(self, "match_resource_types")

    @match_resource_types.setter
    def match_resource_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "match_resource_types", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user-defined name for this backup policy. Names must be unique within the region this backup policy resides in. If
        unspecified, the name will be a hyphenated list of randomly-selected words.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier of the resource group to use. If unspecified, the account's [default
        resourcegroup](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input['IsBackupPolicyScopeArgs']]:
        """
        The scope for this backup policy.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input['IsBackupPolicyScopeArgs']]):
        pulumi.set(self, "scope", value)


@pulumi.input_type
class _IsBackupPolicyState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 health_reasons: Optional[pulumi.Input[Sequence[pulumi.Input['IsBackupPolicyHealthReasonArgs']]]] = None,
                 health_state: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 included_contents: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 is_backup_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 last_job_completed_at: Optional[pulumi.Input[_builtins.str]] = None,
                 lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
                 match_resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 match_resource_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 match_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 scope: Optional[pulumi.Input['IsBackupPolicyScopeArgs']] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsBackupPolicy resources.
        :param pulumi.Input[_builtins.str] created_at: The date and time that the backup policy was created.
        :param pulumi.Input[_builtins.str] crn: The CRN for this backup policy.
        :param pulumi.Input[Sequence[pulumi.Input['IsBackupPolicyHealthReasonArgs']]] health_reasons: The reasons for the current health_state (if any).
        :param pulumi.Input[_builtins.str] health_state: The health of this resource
        :param pulumi.Input[_builtins.str] href: The URL for this backup policy.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] included_contents: The included content for backups created using this policy
        :param pulumi.Input[_builtins.str] last_job_completed_at: The date and time that the most recent job for this backup policy completed.
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of the backup policy.
        :param pulumi.Input[_builtins.str] match_resource_type: A resource type this backup policy applies to. Resources that have both a matching type and a matching user tag will be
               subject to the backup policy.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] match_resource_types: A resource type this backup policy applies to. Resources that have both a matching type and a matching user tag will be
               subject to the backup policy.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] match_user_tags: The user tags this backup policy applies to. Resources that have both a matching user tag and a matching type will be
               subject to the backup policy.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this backup policy. Names must be unique within the region this backup policy resides in. If
               unspecified, the name will be a hyphenated list of randomly-selected words.
        :param pulumi.Input[_builtins.str] resource_group: The unique identifier of the resource group to use. If unspecified, the account's [default
               resourcegroup](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input['IsBackupPolicyScopeArgs'] scope: The scope for this backup policy.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if health_reasons is not None:
            pulumi.set(__self__, "health_reasons", health_reasons)
        if health_state is not None:
            pulumi.set(__self__, "health_state", health_state)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if included_contents is not None:
            pulumi.set(__self__, "included_contents", included_contents)
        if is_backup_policy_id is not None:
            pulumi.set(__self__, "is_backup_policy_id", is_backup_policy_id)
        if last_job_completed_at is not None:
            pulumi.set(__self__, "last_job_completed_at", last_job_completed_at)
        if lifecycle_state is not None:
            pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if match_resource_type is not None:
            pulumi.set(__self__, "match_resource_type", match_resource_type)
        if match_resource_types is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""match_resource_types is deprecated: Deprecated""")
        if match_resource_types is not None:
            pulumi.set(__self__, "match_resource_types", match_resource_types)
        if match_user_tags is not None:
            pulumi.set(__self__, "match_user_tags", match_user_tags)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time that the backup policy was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN for this backup policy.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="healthReasons")
    def health_reasons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsBackupPolicyHealthReasonArgs']]]]:
        """
        The reasons for the current health_state (if any).
        """
        return pulumi.get(self, "health_reasons")

    @health_reasons.setter
    def health_reasons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsBackupPolicyHealthReasonArgs']]]]):
        pulumi.set(self, "health_reasons", value)

    @_builtins.property
    @pulumi.getter(name="healthState")
    def health_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The health of this resource
        """
        return pulumi.get(self, "health_state")

    @health_state.setter
    def health_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "health_state", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL for this backup policy.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="includedContents")
    def included_contents(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The included content for backups created using this policy
        """
        return pulumi.get(self, "included_contents")

    @included_contents.setter
    def included_contents(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "included_contents", value)

    @_builtins.property
    @pulumi.getter(name="isBackupPolicyId")
    def is_backup_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_backup_policy_id")

    @is_backup_policy_id.setter
    def is_backup_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_backup_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="lastJobCompletedAt")
    def last_job_completed_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time that the most recent job for this backup policy completed.
        """
        return pulumi.get(self, "last_job_completed_at")

    @last_job_completed_at.setter
    def last_job_completed_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_job_completed_at", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The lifecycle state of the backup policy.
        """
        return pulumi.get(self, "lifecycle_state")

    @lifecycle_state.setter
    def lifecycle_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lifecycle_state", value)

    @_builtins.property
    @pulumi.getter(name="matchResourceType")
    def match_resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A resource type this backup policy applies to. Resources that have both a matching type and a matching user tag will be
        subject to the backup policy.
        """
        return pulumi.get(self, "match_resource_type")

    @match_resource_type.setter
    def match_resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "match_resource_type", value)

    @_builtins.property
    @pulumi.getter(name="matchResourceTypes")
    @_utilities.deprecated("""Deprecated""")
    def match_resource_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        A resource type this backup policy applies to. Resources that have both a matching type and a matching user tag will be
        subject to the backup policy.
        """
        return pulumi.get(self, "match_resource_types")

    @match_resource_types.setter
    def match_resource_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "match_resource_types", value)

    @_builtins.property
    @pulumi.getter(name="matchUserTags")
    def match_user_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The user tags this backup policy applies to. Resources that have both a matching user tag and a matching type will be
        subject to the backup policy.
        """
        return pulumi.get(self, "match_user_tags")

    @match_user_tags.setter
    def match_user_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "match_user_tags", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user-defined name for this backup policy. Names must be unique within the region this backup policy resides in. If
        unspecified, the name will be a hyphenated list of randomly-selected words.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier of the resource group to use. If unspecified, the account's [default
        resourcegroup](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input['IsBackupPolicyScopeArgs']]:
        """
        The scope for this backup policy.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input['IsBackupPolicyScopeArgs']]):
        pulumi.set(self, "scope", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


@pulumi.type_token("ibm:index/isBackupPolicy:IsBackupPolicy")
class IsBackupPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 included_contents: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 is_backup_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 match_resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 match_resource_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 match_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 scope: Optional[pulumi.Input[Union['IsBackupPolicyScopeArgs', 'IsBackupPolicyScopeArgsDict']]] = None,
                 __props__=None):
        """
        Create a IsBackupPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] included_contents: The included content for backups created using this policy
        :param pulumi.Input[_builtins.str] match_resource_type: A resource type this backup policy applies to. Resources that have both a matching type and a matching user tag will be
               subject to the backup policy.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] match_resource_types: A resource type this backup policy applies to. Resources that have both a matching type and a matching user tag will be
               subject to the backup policy.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] match_user_tags: The user tags this backup policy applies to. Resources that have both a matching user tag and a matching type will be
               subject to the backup policy.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this backup policy. Names must be unique within the region this backup policy resides in. If
               unspecified, the name will be a hyphenated list of randomly-selected words.
        :param pulumi.Input[_builtins.str] resource_group: The unique identifier of the resource group to use. If unspecified, the account's [default
               resourcegroup](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
        :param pulumi.Input[Union['IsBackupPolicyScopeArgs', 'IsBackupPolicyScopeArgsDict']] scope: The scope for this backup policy.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsBackupPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsBackupPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsBackupPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsBackupPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 included_contents: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 is_backup_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 match_resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 match_resource_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 match_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 scope: Optional[pulumi.Input[Union['IsBackupPolicyScopeArgs', 'IsBackupPolicyScopeArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsBackupPolicyArgs.__new__(IsBackupPolicyArgs)

            __props__.__dict__["included_contents"] = included_contents
            __props__.__dict__["is_backup_policy_id"] = is_backup_policy_id
            __props__.__dict__["match_resource_type"] = match_resource_type
            __props__.__dict__["match_resource_types"] = match_resource_types
            if match_user_tags is None and not opts.urn:
                raise TypeError("Missing required property 'match_user_tags'")
            __props__.__dict__["match_user_tags"] = match_user_tags
            __props__.__dict__["name"] = name
            __props__.__dict__["resource_group"] = resource_group
            __props__.__dict__["scope"] = scope
            __props__.__dict__["created_at"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["health_reasons"] = None
            __props__.__dict__["health_state"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["last_job_completed_at"] = None
            __props__.__dict__["lifecycle_state"] = None
            __props__.__dict__["resource_type"] = None
            __props__.__dict__["version"] = None
        super(IsBackupPolicy, __self__).__init__(
            'ibm:index/isBackupPolicy:IsBackupPolicy',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            health_reasons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsBackupPolicyHealthReasonArgs', 'IsBackupPolicyHealthReasonArgsDict']]]]] = None,
            health_state: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            included_contents: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            is_backup_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            last_job_completed_at: Optional[pulumi.Input[_builtins.str]] = None,
            lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
            match_resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            match_resource_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            match_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group: Optional[pulumi.Input[_builtins.str]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            scope: Optional[pulumi.Input[Union['IsBackupPolicyScopeArgs', 'IsBackupPolicyScopeArgsDict']]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsBackupPolicy':
        """
        Get an existing IsBackupPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: The date and time that the backup policy was created.
        :param pulumi.Input[_builtins.str] crn: The CRN for this backup policy.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsBackupPolicyHealthReasonArgs', 'IsBackupPolicyHealthReasonArgsDict']]]] health_reasons: The reasons for the current health_state (if any).
        :param pulumi.Input[_builtins.str] health_state: The health of this resource
        :param pulumi.Input[_builtins.str] href: The URL for this backup policy.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] included_contents: The included content for backups created using this policy
        :param pulumi.Input[_builtins.str] last_job_completed_at: The date and time that the most recent job for this backup policy completed.
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of the backup policy.
        :param pulumi.Input[_builtins.str] match_resource_type: A resource type this backup policy applies to. Resources that have both a matching type and a matching user tag will be
               subject to the backup policy.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] match_resource_types: A resource type this backup policy applies to. Resources that have both a matching type and a matching user tag will be
               subject to the backup policy.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] match_user_tags: The user tags this backup policy applies to. Resources that have both a matching user tag and a matching type will be
               subject to the backup policy.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this backup policy. Names must be unique within the region this backup policy resides in. If
               unspecified, the name will be a hyphenated list of randomly-selected words.
        :param pulumi.Input[_builtins.str] resource_group: The unique identifier of the resource group to use. If unspecified, the account's [default
               resourcegroup](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input[Union['IsBackupPolicyScopeArgs', 'IsBackupPolicyScopeArgsDict']] scope: The scope for this backup policy.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsBackupPolicyState.__new__(_IsBackupPolicyState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["crn"] = crn
        __props__.__dict__["health_reasons"] = health_reasons
        __props__.__dict__["health_state"] = health_state
        __props__.__dict__["href"] = href
        __props__.__dict__["included_contents"] = included_contents
        __props__.__dict__["is_backup_policy_id"] = is_backup_policy_id
        __props__.__dict__["last_job_completed_at"] = last_job_completed_at
        __props__.__dict__["lifecycle_state"] = lifecycle_state
        __props__.__dict__["match_resource_type"] = match_resource_type
        __props__.__dict__["match_resource_types"] = match_resource_types
        __props__.__dict__["match_user_tags"] = match_user_tags
        __props__.__dict__["name"] = name
        __props__.__dict__["resource_group"] = resource_group
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["scope"] = scope
        __props__.__dict__["version"] = version
        return IsBackupPolicy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time that the backup policy was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The CRN for this backup policy.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="healthReasons")
    def health_reasons(self) -> pulumi.Output[Sequence['outputs.IsBackupPolicyHealthReason']]:
        """
        The reasons for the current health_state (if any).
        """
        return pulumi.get(self, "health_reasons")

    @_builtins.property
    @pulumi.getter(name="healthState")
    def health_state(self) -> pulumi.Output[_builtins.str]:
        """
        The health of this resource
        """
        return pulumi.get(self, "health_state")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        The URL for this backup policy.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="includedContents")
    def included_contents(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The included content for backups created using this policy
        """
        return pulumi.get(self, "included_contents")

    @_builtins.property
    @pulumi.getter(name="isBackupPolicyId")
    def is_backup_policy_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_backup_policy_id")

    @_builtins.property
    @pulumi.getter(name="lastJobCompletedAt")
    def last_job_completed_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time that the most recent job for this backup policy completed.
        """
        return pulumi.get(self, "last_job_completed_at")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> pulumi.Output[_builtins.str]:
        """
        The lifecycle state of the backup policy.
        """
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter(name="matchResourceType")
    def match_resource_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        A resource type this backup policy applies to. Resources that have both a matching type and a matching user tag will be
        subject to the backup policy.
        """
        return pulumi.get(self, "match_resource_type")

    @_builtins.property
    @pulumi.getter(name="matchResourceTypes")
    @_utilities.deprecated("""Deprecated""")
    def match_resource_types(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        A resource type this backup policy applies to. Resources that have both a matching type and a matching user tag will be
        subject to the backup policy.
        """
        return pulumi.get(self, "match_resource_types")

    @_builtins.property
    @pulumi.getter(name="matchUserTags")
    def match_user_tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The user tags this backup policy applies to. Resources that have both a matching user tag and a matching type will be
        subject to the backup policy.
        """
        return pulumi.get(self, "match_user_tags")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The user-defined name for this backup policy. Names must be unique within the region this backup policy resides in. If
        unspecified, the name will be a hyphenated list of randomly-selected words.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier of the resource group to use. If unspecified, the account's [default
        resourcegroup](https://cloud.ibm.com/apidocs/resource-manager#introduction) is used.
        """
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def scope(self) -> pulumi.Output[Optional['outputs.IsBackupPolicyScope']]:
        """
        The scope for this backup policy.
        """
        return pulumi.get(self, "scope")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "version")

