# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PiVirtualSerialNumberArgs', 'PiVirtualSerialNumber']

@pulumi.input_type
class PiVirtualSerialNumberArgs:
    def __init__(__self__, *,
                 pi_cloud_instance_id: pulumi.Input[_builtins.str],
                 pi_serial: pulumi.Input[_builtins.str],
                 pi_description: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_retain_virtual_serial_number: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_software_tier: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_virtual_serial_number_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['PiVirtualSerialNumberTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a PiVirtualSerialNumber resource.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: This is the Power Instance id that is assigned to the account
        :param pulumi.Input[_builtins.str] pi_serial: Virtual serial number.
        :param pulumi.Input[_builtins.str] pi_description: Description of virtual serial number.
        :param pulumi.Input[_builtins.str] pi_instance_id: PVM Instance to attach VSN to.
        :param pulumi.Input[_builtins.bool] pi_retain_virtual_serial_number: Indicates whether to retain virtual serial number after unassigning from PVM instance during deletion.
        :param pulumi.Input[_builtins.str] pi_software_tier: Software tier for virtual serial number.
        """
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        pulumi.set(__self__, "pi_serial", pi_serial)
        if pi_description is not None:
            pulumi.set(__self__, "pi_description", pi_description)
        if pi_instance_id is not None:
            pulumi.set(__self__, "pi_instance_id", pi_instance_id)
        if pi_retain_virtual_serial_number is not None:
            pulumi.set(__self__, "pi_retain_virtual_serial_number", pi_retain_virtual_serial_number)
        if pi_software_tier is not None:
            pulumi.set(__self__, "pi_software_tier", pi_software_tier)
        if pi_virtual_serial_number_id is not None:
            pulumi.set(__self__, "pi_virtual_serial_number_id", pi_virtual_serial_number_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        This is the Power Instance id that is assigned to the account
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piSerial")
    def pi_serial(self) -> pulumi.Input[_builtins.str]:
        """
        Virtual serial number.
        """
        return pulumi.get(self, "pi_serial")

    @pi_serial.setter
    def pi_serial(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_serial", value)

    @_builtins.property
    @pulumi.getter(name="piDescription")
    def pi_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of virtual serial number.
        """
        return pulumi.get(self, "pi_description")

    @pi_description.setter
    def pi_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_description", value)

    @_builtins.property
    @pulumi.getter(name="piInstanceId")
    def pi_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        PVM Instance to attach VSN to.
        """
        return pulumi.get(self, "pi_instance_id")

    @pi_instance_id.setter
    def pi_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piRetainVirtualSerialNumber")
    def pi_retain_virtual_serial_number(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether to retain virtual serial number after unassigning from PVM instance during deletion.
        """
        return pulumi.get(self, "pi_retain_virtual_serial_number")

    @pi_retain_virtual_serial_number.setter
    def pi_retain_virtual_serial_number(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pi_retain_virtual_serial_number", value)

    @_builtins.property
    @pulumi.getter(name="piSoftwareTier")
    def pi_software_tier(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Software tier for virtual serial number.
        """
        return pulumi.get(self, "pi_software_tier")

    @pi_software_tier.setter
    def pi_software_tier(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_software_tier", value)

    @_builtins.property
    @pulumi.getter(name="piVirtualSerialNumberId")
    def pi_virtual_serial_number_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_virtual_serial_number_id")

    @pi_virtual_serial_number_id.setter
    def pi_virtual_serial_number_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_virtual_serial_number_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiVirtualSerialNumberTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiVirtualSerialNumberTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _PiVirtualSerialNumberState:
    def __init__(__self__, *,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_description: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_retain_virtual_serial_number: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_serial: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_software_tier: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_virtual_serial_number_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['PiVirtualSerialNumberTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering PiVirtualSerialNumber resources.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: This is the Power Instance id that is assigned to the account
        :param pulumi.Input[_builtins.str] pi_description: Description of virtual serial number.
        :param pulumi.Input[_builtins.str] pi_instance_id: PVM Instance to attach VSN to.
        :param pulumi.Input[_builtins.bool] pi_retain_virtual_serial_number: Indicates whether to retain virtual serial number after unassigning from PVM instance during deletion.
        :param pulumi.Input[_builtins.str] pi_serial: Virtual serial number.
        :param pulumi.Input[_builtins.str] pi_software_tier: Software tier for virtual serial number.
        """
        if pi_cloud_instance_id is not None:
            pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_description is not None:
            pulumi.set(__self__, "pi_description", pi_description)
        if pi_instance_id is not None:
            pulumi.set(__self__, "pi_instance_id", pi_instance_id)
        if pi_retain_virtual_serial_number is not None:
            pulumi.set(__self__, "pi_retain_virtual_serial_number", pi_retain_virtual_serial_number)
        if pi_serial is not None:
            pulumi.set(__self__, "pi_serial", pi_serial)
        if pi_software_tier is not None:
            pulumi.set(__self__, "pi_software_tier", pi_software_tier)
        if pi_virtual_serial_number_id is not None:
            pulumi.set(__self__, "pi_virtual_serial_number_id", pi_virtual_serial_number_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        This is the Power Instance id that is assigned to the account
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piDescription")
    def pi_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of virtual serial number.
        """
        return pulumi.get(self, "pi_description")

    @pi_description.setter
    def pi_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_description", value)

    @_builtins.property
    @pulumi.getter(name="piInstanceId")
    def pi_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        PVM Instance to attach VSN to.
        """
        return pulumi.get(self, "pi_instance_id")

    @pi_instance_id.setter
    def pi_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piRetainVirtualSerialNumber")
    def pi_retain_virtual_serial_number(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether to retain virtual serial number after unassigning from PVM instance during deletion.
        """
        return pulumi.get(self, "pi_retain_virtual_serial_number")

    @pi_retain_virtual_serial_number.setter
    def pi_retain_virtual_serial_number(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pi_retain_virtual_serial_number", value)

    @_builtins.property
    @pulumi.getter(name="piSerial")
    def pi_serial(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Virtual serial number.
        """
        return pulumi.get(self, "pi_serial")

    @pi_serial.setter
    def pi_serial(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_serial", value)

    @_builtins.property
    @pulumi.getter(name="piSoftwareTier")
    def pi_software_tier(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Software tier for virtual serial number.
        """
        return pulumi.get(self, "pi_software_tier")

    @pi_software_tier.setter
    def pi_software_tier(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_software_tier", value)

    @_builtins.property
    @pulumi.getter(name="piVirtualSerialNumberId")
    def pi_virtual_serial_number_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_virtual_serial_number_id")

    @pi_virtual_serial_number_id.setter
    def pi_virtual_serial_number_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_virtual_serial_number_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiVirtualSerialNumberTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiVirtualSerialNumberTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/piVirtualSerialNumber:PiVirtualSerialNumber")
class PiVirtualSerialNumber(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_description: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_retain_virtual_serial_number: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_serial: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_software_tier: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_virtual_serial_number_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiVirtualSerialNumberTimeoutsArgs', 'PiVirtualSerialNumberTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a PiVirtualSerialNumber resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: This is the Power Instance id that is assigned to the account
        :param pulumi.Input[_builtins.str] pi_description: Description of virtual serial number.
        :param pulumi.Input[_builtins.str] pi_instance_id: PVM Instance to attach VSN to.
        :param pulumi.Input[_builtins.bool] pi_retain_virtual_serial_number: Indicates whether to retain virtual serial number after unassigning from PVM instance during deletion.
        :param pulumi.Input[_builtins.str] pi_serial: Virtual serial number.
        :param pulumi.Input[_builtins.str] pi_software_tier: Software tier for virtual serial number.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PiVirtualSerialNumberArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PiVirtualSerialNumber resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PiVirtualSerialNumberArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PiVirtualSerialNumberArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_description: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_retain_virtual_serial_number: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_serial: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_software_tier: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_virtual_serial_number_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiVirtualSerialNumberTimeoutsArgs', 'PiVirtualSerialNumberTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PiVirtualSerialNumberArgs.__new__(PiVirtualSerialNumberArgs)

            if pi_cloud_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'pi_cloud_instance_id'")
            __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
            __props__.__dict__["pi_description"] = pi_description
            __props__.__dict__["pi_instance_id"] = pi_instance_id
            __props__.__dict__["pi_retain_virtual_serial_number"] = pi_retain_virtual_serial_number
            if pi_serial is None and not opts.urn:
                raise TypeError("Missing required property 'pi_serial'")
            __props__.__dict__["pi_serial"] = pi_serial
            __props__.__dict__["pi_software_tier"] = pi_software_tier
            __props__.__dict__["pi_virtual_serial_number_id"] = pi_virtual_serial_number_id
            __props__.__dict__["timeouts"] = timeouts
        super(PiVirtualSerialNumber, __self__).__init__(
            'ibm:index/piVirtualSerialNumber:PiVirtualSerialNumber',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_description: Optional[pulumi.Input[_builtins.str]] = None,
            pi_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_retain_virtual_serial_number: Optional[pulumi.Input[_builtins.bool]] = None,
            pi_serial: Optional[pulumi.Input[_builtins.str]] = None,
            pi_software_tier: Optional[pulumi.Input[_builtins.str]] = None,
            pi_virtual_serial_number_id: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['PiVirtualSerialNumberTimeoutsArgs', 'PiVirtualSerialNumberTimeoutsArgsDict']]] = None) -> 'PiVirtualSerialNumber':
        """
        Get an existing PiVirtualSerialNumber resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: This is the Power Instance id that is assigned to the account
        :param pulumi.Input[_builtins.str] pi_description: Description of virtual serial number.
        :param pulumi.Input[_builtins.str] pi_instance_id: PVM Instance to attach VSN to.
        :param pulumi.Input[_builtins.bool] pi_retain_virtual_serial_number: Indicates whether to retain virtual serial number after unassigning from PVM instance during deletion.
        :param pulumi.Input[_builtins.str] pi_serial: Virtual serial number.
        :param pulumi.Input[_builtins.str] pi_software_tier: Software tier for virtual serial number.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PiVirtualSerialNumberState.__new__(_PiVirtualSerialNumberState)

        __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
        __props__.__dict__["pi_description"] = pi_description
        __props__.__dict__["pi_instance_id"] = pi_instance_id
        __props__.__dict__["pi_retain_virtual_serial_number"] = pi_retain_virtual_serial_number
        __props__.__dict__["pi_serial"] = pi_serial
        __props__.__dict__["pi_software_tier"] = pi_software_tier
        __props__.__dict__["pi_virtual_serial_number_id"] = pi_virtual_serial_number_id
        __props__.__dict__["timeouts"] = timeouts
        return PiVirtualSerialNumber(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        This is the Power Instance id that is assigned to the account
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piDescription")
    def pi_description(self) -> pulumi.Output[_builtins.str]:
        """
        Description of virtual serial number.
        """
        return pulumi.get(self, "pi_description")

    @_builtins.property
    @pulumi.getter(name="piInstanceId")
    def pi_instance_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        PVM Instance to attach VSN to.
        """
        return pulumi.get(self, "pi_instance_id")

    @_builtins.property
    @pulumi.getter(name="piRetainVirtualSerialNumber")
    def pi_retain_virtual_serial_number(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Indicates whether to retain virtual serial number after unassigning from PVM instance during deletion.
        """
        return pulumi.get(self, "pi_retain_virtual_serial_number")

    @_builtins.property
    @pulumi.getter(name="piSerial")
    def pi_serial(self) -> pulumi.Output[_builtins.str]:
        """
        Virtual serial number.
        """
        return pulumi.get(self, "pi_serial")

    @_builtins.property
    @pulumi.getter(name="piSoftwareTier")
    def pi_software_tier(self) -> pulumi.Output[_builtins.str]:
        """
        Software tier for virtual serial number.
        """
        return pulumi.get(self, "pi_software_tier")

    @_builtins.property
    @pulumi.getter(name="piVirtualSerialNumberId")
    def pi_virtual_serial_number_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "pi_virtual_serial_number_id")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.PiVirtualSerialNumberTimeouts']]:
        return pulumi.get(self, "timeouts")

