# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsInstanceNetworkInterfaceInitArgs', 'IsInstanceNetworkInterface']

@pulumi.input_type
class IsInstanceNetworkInterfaceInitArgs:
    def __init__(__self__, *,
                 instance: pulumi.Input[_builtins.str],
                 subnet: pulumi.Input[_builtins.str],
                 allow_ip_spoofing: Optional[pulumi.Input[_builtins.bool]] = None,
                 floating_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 is_instance_network_interface_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_ip: Optional[pulumi.Input['IsInstanceNetworkInterfacePrimaryIpArgs']] = None,
                 primary_ipv4_address: Optional[pulumi.Input[_builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a IsInstanceNetworkInterface resource.
        :param pulumi.Input[_builtins.str] instance: The unique identifier of the instance.
        :param pulumi.Input[_builtins.str] subnet: The unique identifier of the subnet.
        :param pulumi.Input[_builtins.bool] allow_ip_spoofing: Indicates whether source IP spoofing is allowed on this interface. If false, source IP spoofing is prevented on this
               interface. If true, source IP spoofing is allowed on this interface.
        :param pulumi.Input[_builtins.str] floating_ip: The ID of the floating IP to attach to this network interface
        :param pulumi.Input[_builtins.str] name: The user-defined name for this network interface. If unspecified, the name will be a hyphenated list of
               randomly-selected words.
        :param pulumi.Input['IsInstanceNetworkInterfacePrimaryIpArgs'] primary_ip: The primary IP address to bind to the network interface. This can be specified using an existing reserved IP, or a
               prototype object for a new reserved IP.
        :param pulumi.Input[_builtins.str] primary_ipv4_address: The primary IPv4 address. If specified, it must be an available address on the network interface's subnet. If
               unspecified, an available address on the subnet will be automatically selected.
        """
        pulumi.set(__self__, "instance", instance)
        pulumi.set(__self__, "subnet", subnet)
        if allow_ip_spoofing is not None:
            pulumi.set(__self__, "allow_ip_spoofing", allow_ip_spoofing)
        if floating_ip is not None:
            pulumi.set(__self__, "floating_ip", floating_ip)
        if is_instance_network_interface_id is not None:
            pulumi.set(__self__, "is_instance_network_interface_id", is_instance_network_interface_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if primary_ip is not None:
            pulumi.set(__self__, "primary_ip", primary_ip)
        if primary_ipv4_address is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""primary_ipv4_address is deprecated: Deprecated""")
        if primary_ipv4_address is not None:
            pulumi.set(__self__, "primary_ipv4_address", primary_ipv4_address)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)

    @_builtins.property
    @pulumi.getter
    def instance(self) -> pulumi.Input[_builtins.str]:
        """
        The unique identifier of the instance.
        """
        return pulumi.get(self, "instance")

    @instance.setter
    def instance(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance", value)

    @_builtins.property
    @pulumi.getter
    def subnet(self) -> pulumi.Input[_builtins.str]:
        """
        The unique identifier of the subnet.
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "subnet", value)

    @_builtins.property
    @pulumi.getter(name="allowIpSpoofing")
    def allow_ip_spoofing(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether source IP spoofing is allowed on this interface. If false, source IP spoofing is prevented on this
        interface. If true, source IP spoofing is allowed on this interface.
        """
        return pulumi.get(self, "allow_ip_spoofing")

    @allow_ip_spoofing.setter
    def allow_ip_spoofing(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_ip_spoofing", value)

    @_builtins.property
    @pulumi.getter(name="floatingIp")
    def floating_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the floating IP to attach to this network interface
        """
        return pulumi.get(self, "floating_ip")

    @floating_ip.setter
    def floating_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "floating_ip", value)

    @_builtins.property
    @pulumi.getter(name="isInstanceNetworkInterfaceId")
    def is_instance_network_interface_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_instance_network_interface_id")

    @is_instance_network_interface_id.setter
    def is_instance_network_interface_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_instance_network_interface_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user-defined name for this network interface. If unspecified, the name will be a hyphenated list of
        randomly-selected words.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="primaryIp")
    def primary_ip(self) -> Optional[pulumi.Input['IsInstanceNetworkInterfacePrimaryIpArgs']]:
        """
        The primary IP address to bind to the network interface. This can be specified using an existing reserved IP, or a
        prototype object for a new reserved IP.
        """
        return pulumi.get(self, "primary_ip")

    @primary_ip.setter
    def primary_ip(self, value: Optional[pulumi.Input['IsInstanceNetworkInterfacePrimaryIpArgs']]):
        pulumi.set(self, "primary_ip", value)

    @_builtins.property
    @pulumi.getter(name="primaryIpv4Address")
    @_utilities.deprecated("""Deprecated""")
    def primary_ipv4_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The primary IPv4 address. If specified, it must be an available address on the network interface's subnet. If
        unspecified, an available address on the subnet will be automatically selected.
        """
        return pulumi.get(self, "primary_ipv4_address")

    @primary_ipv4_address.setter
    def primary_ipv4_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "primary_ipv4_address", value)

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_groups", value)


@pulumi.input_type
class _IsInstanceNetworkInterfaceState:
    def __init__(__self__, *,
                 allow_ip_spoofing: Optional[pulumi.Input[_builtins.bool]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 floating_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 floating_ips: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceNetworkInterfaceFloatingIpArgs']]]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 instance: Optional[pulumi.Input[_builtins.str]] = None,
                 is_instance_network_interface_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 port_speed: Optional[pulumi.Input[_builtins.float]] = None,
                 primary_ip: Optional[pulumi.Input['IsInstanceNetworkInterfacePrimaryIpArgs']] = None,
                 primary_ipv4_address: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsInstanceNetworkInterface resources.
        :param pulumi.Input[_builtins.bool] allow_ip_spoofing: Indicates whether source IP spoofing is allowed on this interface. If false, source IP spoofing is prevented on this
               interface. If true, source IP spoofing is allowed on this interface.
        :param pulumi.Input[_builtins.str] created_at: The date and time that the network interface was created.
        :param pulumi.Input[_builtins.str] floating_ip: The ID of the floating IP to attach to this network interface
        :param pulumi.Input[Sequence[pulumi.Input['IsInstanceNetworkInterfaceFloatingIpArgs']]] floating_ips: The floating IPs associated with this network interface.
        :param pulumi.Input[_builtins.str] href: The URL for this network interface.
        :param pulumi.Input[_builtins.str] instance: The unique identifier of the instance.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this network interface. If unspecified, the name will be a hyphenated list of
               randomly-selected words.
        :param pulumi.Input[_builtins.str] network_interface: The globally unique ID of this network interface
        :param pulumi.Input[_builtins.float] port_speed: The network interface port speed in Mbps.
        :param pulumi.Input['IsInstanceNetworkInterfacePrimaryIpArgs'] primary_ip: The primary IP address to bind to the network interface. This can be specified using an existing reserved IP, or a
               prototype object for a new reserved IP.
        :param pulumi.Input[_builtins.str] primary_ipv4_address: The primary IPv4 address. If specified, it must be an available address on the network interface's subnet. If
               unspecified, an available address on the subnet will be automatically selected.
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input[_builtins.str] status: The status of the network interface.
        :param pulumi.Input[_builtins.str] subnet: The unique identifier of the subnet.
        :param pulumi.Input[_builtins.str] type: The type of this network interface as it relates to an instance.
        """
        if allow_ip_spoofing is not None:
            pulumi.set(__self__, "allow_ip_spoofing", allow_ip_spoofing)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if floating_ip is not None:
            pulumi.set(__self__, "floating_ip", floating_ip)
        if floating_ips is not None:
            pulumi.set(__self__, "floating_ips", floating_ips)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if instance is not None:
            pulumi.set(__self__, "instance", instance)
        if is_instance_network_interface_id is not None:
            pulumi.set(__self__, "is_instance_network_interface_id", is_instance_network_interface_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_interface is not None:
            pulumi.set(__self__, "network_interface", network_interface)
        if port_speed is not None:
            pulumi.set(__self__, "port_speed", port_speed)
        if primary_ip is not None:
            pulumi.set(__self__, "primary_ip", primary_ip)
        if primary_ipv4_address is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""primary_ipv4_address is deprecated: Deprecated""")
        if primary_ipv4_address is not None:
            pulumi.set(__self__, "primary_ipv4_address", primary_ipv4_address)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="allowIpSpoofing")
    def allow_ip_spoofing(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether source IP spoofing is allowed on this interface. If false, source IP spoofing is prevented on this
        interface. If true, source IP spoofing is allowed on this interface.
        """
        return pulumi.get(self, "allow_ip_spoofing")

    @allow_ip_spoofing.setter
    def allow_ip_spoofing(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_ip_spoofing", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time that the network interface was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="floatingIp")
    def floating_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the floating IP to attach to this network interface
        """
        return pulumi.get(self, "floating_ip")

    @floating_ip.setter
    def floating_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "floating_ip", value)

    @_builtins.property
    @pulumi.getter(name="floatingIps")
    def floating_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceNetworkInterfaceFloatingIpArgs']]]]:
        """
        The floating IPs associated with this network interface.
        """
        return pulumi.get(self, "floating_ips")

    @floating_ips.setter
    def floating_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceNetworkInterfaceFloatingIpArgs']]]]):
        pulumi.set(self, "floating_ips", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL for this network interface.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter
    def instance(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier of the instance.
        """
        return pulumi.get(self, "instance")

    @instance.setter
    def instance(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance", value)

    @_builtins.property
    @pulumi.getter(name="isInstanceNetworkInterfaceId")
    def is_instance_network_interface_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_instance_network_interface_id")

    @is_instance_network_interface_id.setter
    def is_instance_network_interface_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_instance_network_interface_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user-defined name for this network interface. If unspecified, the name will be a hyphenated list of
        randomly-selected words.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="networkInterface")
    def network_interface(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The globally unique ID of this network interface
        """
        return pulumi.get(self, "network_interface")

    @network_interface.setter
    def network_interface(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_interface", value)

    @_builtins.property
    @pulumi.getter(name="portSpeed")
    def port_speed(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The network interface port speed in Mbps.
        """
        return pulumi.get(self, "port_speed")

    @port_speed.setter
    def port_speed(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port_speed", value)

    @_builtins.property
    @pulumi.getter(name="primaryIp")
    def primary_ip(self) -> Optional[pulumi.Input['IsInstanceNetworkInterfacePrimaryIpArgs']]:
        """
        The primary IP address to bind to the network interface. This can be specified using an existing reserved IP, or a
        prototype object for a new reserved IP.
        """
        return pulumi.get(self, "primary_ip")

    @primary_ip.setter
    def primary_ip(self, value: Optional[pulumi.Input['IsInstanceNetworkInterfacePrimaryIpArgs']]):
        pulumi.set(self, "primary_ip", value)

    @_builtins.property
    @pulumi.getter(name="primaryIpv4Address")
    @_utilities.deprecated("""Deprecated""")
    def primary_ipv4_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The primary IPv4 address. If specified, it must be an available address on the network interface's subnet. If
        unspecified, an available address on the subnet will be automatically selected.
        """
        return pulumi.get(self, "primary_ipv4_address")

    @primary_ipv4_address.setter
    def primary_ipv4_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "primary_ipv4_address", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_groups", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the network interface.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier of the subnet.
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of this network interface as it relates to an instance.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("ibm:index/isInstanceNetworkInterface:IsInstanceNetworkInterface")
class IsInstanceNetworkInterface(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_ip_spoofing: Optional[pulumi.Input[_builtins.bool]] = None,
                 floating_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 instance: Optional[pulumi.Input[_builtins.str]] = None,
                 is_instance_network_interface_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_ip: Optional[pulumi.Input[Union['IsInstanceNetworkInterfacePrimaryIpArgs', 'IsInstanceNetworkInterfacePrimaryIpArgsDict']]] = None,
                 primary_ipv4_address: Optional[pulumi.Input[_builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IsInstanceNetworkInterface resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] allow_ip_spoofing: Indicates whether source IP spoofing is allowed on this interface. If false, source IP spoofing is prevented on this
               interface. If true, source IP spoofing is allowed on this interface.
        :param pulumi.Input[_builtins.str] floating_ip: The ID of the floating IP to attach to this network interface
        :param pulumi.Input[_builtins.str] instance: The unique identifier of the instance.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this network interface. If unspecified, the name will be a hyphenated list of
               randomly-selected words.
        :param pulumi.Input[Union['IsInstanceNetworkInterfacePrimaryIpArgs', 'IsInstanceNetworkInterfacePrimaryIpArgsDict']] primary_ip: The primary IP address to bind to the network interface. This can be specified using an existing reserved IP, or a
               prototype object for a new reserved IP.
        :param pulumi.Input[_builtins.str] primary_ipv4_address: The primary IPv4 address. If specified, it must be an available address on the network interface's subnet. If
               unspecified, an available address on the subnet will be automatically selected.
        :param pulumi.Input[_builtins.str] subnet: The unique identifier of the subnet.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsInstanceNetworkInterfaceInitArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsInstanceNetworkInterface resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsInstanceNetworkInterfaceInitArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsInstanceNetworkInterfaceInitArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_ip_spoofing: Optional[pulumi.Input[_builtins.bool]] = None,
                 floating_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 instance: Optional[pulumi.Input[_builtins.str]] = None,
                 is_instance_network_interface_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_ip: Optional[pulumi.Input[Union['IsInstanceNetworkInterfacePrimaryIpArgs', 'IsInstanceNetworkInterfacePrimaryIpArgsDict']]] = None,
                 primary_ipv4_address: Optional[pulumi.Input[_builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsInstanceNetworkInterfaceInitArgs.__new__(IsInstanceNetworkInterfaceInitArgs)

            __props__.__dict__["allow_ip_spoofing"] = allow_ip_spoofing
            __props__.__dict__["floating_ip"] = floating_ip
            if instance is None and not opts.urn:
                raise TypeError("Missing required property 'instance'")
            __props__.__dict__["instance"] = instance
            __props__.__dict__["is_instance_network_interface_id"] = is_instance_network_interface_id
            __props__.__dict__["name"] = name
            __props__.__dict__["primary_ip"] = primary_ip
            __props__.__dict__["primary_ipv4_address"] = primary_ipv4_address
            __props__.__dict__["security_groups"] = security_groups
            if subnet is None and not opts.urn:
                raise TypeError("Missing required property 'subnet'")
            __props__.__dict__["subnet"] = subnet
            __props__.__dict__["created_at"] = None
            __props__.__dict__["floating_ips"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["network_interface"] = None
            __props__.__dict__["port_speed"] = None
            __props__.__dict__["resource_type"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["type"] = None
        super(IsInstanceNetworkInterface, __self__).__init__(
            'ibm:index/isInstanceNetworkInterface:IsInstanceNetworkInterface',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_ip_spoofing: Optional[pulumi.Input[_builtins.bool]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            floating_ip: Optional[pulumi.Input[_builtins.str]] = None,
            floating_ips: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceNetworkInterfaceFloatingIpArgs', 'IsInstanceNetworkInterfaceFloatingIpArgsDict']]]]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            instance: Optional[pulumi.Input[_builtins.str]] = None,
            is_instance_network_interface_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            network_interface: Optional[pulumi.Input[_builtins.str]] = None,
            port_speed: Optional[pulumi.Input[_builtins.float]] = None,
            primary_ip: Optional[pulumi.Input[Union['IsInstanceNetworkInterfacePrimaryIpArgs', 'IsInstanceNetworkInterfacePrimaryIpArgsDict']]] = None,
            primary_ipv4_address: Optional[pulumi.Input[_builtins.str]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            subnet: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsInstanceNetworkInterface':
        """
        Get an existing IsInstanceNetworkInterface resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] allow_ip_spoofing: Indicates whether source IP spoofing is allowed on this interface. If false, source IP spoofing is prevented on this
               interface. If true, source IP spoofing is allowed on this interface.
        :param pulumi.Input[_builtins.str] created_at: The date and time that the network interface was created.
        :param pulumi.Input[_builtins.str] floating_ip: The ID of the floating IP to attach to this network interface
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceNetworkInterfaceFloatingIpArgs', 'IsInstanceNetworkInterfaceFloatingIpArgsDict']]]] floating_ips: The floating IPs associated with this network interface.
        :param pulumi.Input[_builtins.str] href: The URL for this network interface.
        :param pulumi.Input[_builtins.str] instance: The unique identifier of the instance.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this network interface. If unspecified, the name will be a hyphenated list of
               randomly-selected words.
        :param pulumi.Input[_builtins.str] network_interface: The globally unique ID of this network interface
        :param pulumi.Input[_builtins.float] port_speed: The network interface port speed in Mbps.
        :param pulumi.Input[Union['IsInstanceNetworkInterfacePrimaryIpArgs', 'IsInstanceNetworkInterfacePrimaryIpArgsDict']] primary_ip: The primary IP address to bind to the network interface. This can be specified using an existing reserved IP, or a
               prototype object for a new reserved IP.
        :param pulumi.Input[_builtins.str] primary_ipv4_address: The primary IPv4 address. If specified, it must be an available address on the network interface's subnet. If
               unspecified, an available address on the subnet will be automatically selected.
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input[_builtins.str] status: The status of the network interface.
        :param pulumi.Input[_builtins.str] subnet: The unique identifier of the subnet.
        :param pulumi.Input[_builtins.str] type: The type of this network interface as it relates to an instance.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsInstanceNetworkInterfaceState.__new__(_IsInstanceNetworkInterfaceState)

        __props__.__dict__["allow_ip_spoofing"] = allow_ip_spoofing
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["floating_ip"] = floating_ip
        __props__.__dict__["floating_ips"] = floating_ips
        __props__.__dict__["href"] = href
        __props__.__dict__["instance"] = instance
        __props__.__dict__["is_instance_network_interface_id"] = is_instance_network_interface_id
        __props__.__dict__["name"] = name
        __props__.__dict__["network_interface"] = network_interface
        __props__.__dict__["port_speed"] = port_speed
        __props__.__dict__["primary_ip"] = primary_ip
        __props__.__dict__["primary_ipv4_address"] = primary_ipv4_address
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["security_groups"] = security_groups
        __props__.__dict__["status"] = status
        __props__.__dict__["subnet"] = subnet
        __props__.__dict__["type"] = type
        return IsInstanceNetworkInterface(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="allowIpSpoofing")
    def allow_ip_spoofing(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Indicates whether source IP spoofing is allowed on this interface. If false, source IP spoofing is prevented on this
        interface. If true, source IP spoofing is allowed on this interface.
        """
        return pulumi.get(self, "allow_ip_spoofing")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time that the network interface was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="floatingIp")
    def floating_ip(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The ID of the floating IP to attach to this network interface
        """
        return pulumi.get(self, "floating_ip")

    @_builtins.property
    @pulumi.getter(name="floatingIps")
    def floating_ips(self) -> pulumi.Output[Sequence['outputs.IsInstanceNetworkInterfaceFloatingIp']]:
        """
        The floating IPs associated with this network interface.
        """
        return pulumi.get(self, "floating_ips")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        The URL for this network interface.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def instance(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier of the instance.
        """
        return pulumi.get(self, "instance")

    @_builtins.property
    @pulumi.getter(name="isInstanceNetworkInterfaceId")
    def is_instance_network_interface_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_instance_network_interface_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The user-defined name for this network interface. If unspecified, the name will be a hyphenated list of
        randomly-selected words.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkInterface")
    def network_interface(self) -> pulumi.Output[_builtins.str]:
        """
        The globally unique ID of this network interface
        """
        return pulumi.get(self, "network_interface")

    @_builtins.property
    @pulumi.getter(name="portSpeed")
    def port_speed(self) -> pulumi.Output[_builtins.float]:
        """
        The network interface port speed in Mbps.
        """
        return pulumi.get(self, "port_speed")

    @_builtins.property
    @pulumi.getter(name="primaryIp")
    def primary_ip(self) -> pulumi.Output[Optional['outputs.IsInstanceNetworkInterfacePrimaryIp']]:
        """
        The primary IP address to bind to the network interface. This can be specified using an existing reserved IP, or a
        prototype object for a new reserved IP.
        """
        return pulumi.get(self, "primary_ip")

    @_builtins.property
    @pulumi.getter(name="primaryIpv4Address")
    @_utilities.deprecated("""Deprecated""")
    def primary_ipv4_address(self) -> pulumi.Output[_builtins.str]:
        """
        The primary IPv4 address. If specified, it must be an available address on the network interface's subnet. If
        unspecified, an available address on the subnet will be automatically selected.
        """
        return pulumi.get(self, "primary_ipv4_address")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Output[Sequence[_builtins.str]]:
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the network interface.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def subnet(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier of the subnet.
        """
        return pulumi.get(self, "subnet")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of this network interface as it relates to an instance.
        """
        return pulumi.get(self, "type")

