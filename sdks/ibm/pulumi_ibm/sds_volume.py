# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SdsVolumeArgs', 'SdsVolume']

@pulumi.input_type
class SdsVolumeArgs:
    def __init__(__self__, *,
                 capacity: pulumi.Input[_builtins.float],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 sds_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 sds_volume_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a SdsVolume resource.
        :param pulumi.Input[_builtins.float] capacity: The capacity of the volume (in gigabytes).
        :param pulumi.Input[_builtins.str] name: Unique name of the host.
        :param pulumi.Input[_builtins.str] sds_endpoint: The endpoint to use for operations
        """
        pulumi.set(__self__, "capacity", capacity)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if sds_endpoint is not None:
            pulumi.set(__self__, "sds_endpoint", sds_endpoint)
        if sds_volume_id is not None:
            pulumi.set(__self__, "sds_volume_id", sds_volume_id)

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> pulumi.Input[_builtins.float]:
        """
        The capacity of the volume (in gigabytes).
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "capacity", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique name of the host.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="sdsEndpoint")
    def sds_endpoint(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The endpoint to use for operations
        """
        return pulumi.get(self, "sds_endpoint")

    @sds_endpoint.setter
    def sds_endpoint(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sds_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="sdsVolumeId")
    def sds_volume_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "sds_volume_id")

    @sds_volume_id.setter
    def sds_volume_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sds_volume_id", value)


@pulumi.input_type
class _SdsVolumeState:
    def __init__(__self__, *,
                 bandwidth: Optional[pulumi.Input[_builtins.float]] = None,
                 capacity: Optional[pulumi.Input[_builtins.float]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 iops: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 sds_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 sds_volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 status_reasons: Optional[pulumi.Input[Sequence[pulumi.Input['SdsVolumeStatusReasonArgs']]]] = None,
                 volume_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['SdsVolumeVolumeMappingArgs']]]] = None):
        """
        Input properties used for looking up and filtering SdsVolume resources.
        :param pulumi.Input[_builtins.float] bandwidth: The maximum bandwidth (in megabits per second) for the volume.
        :param pulumi.Input[_builtins.float] capacity: The capacity of the volume (in gigabytes).
        :param pulumi.Input[_builtins.str] created_at: The date and time that the volume was created.
        :param pulumi.Input[_builtins.str] href: The URL for this resource.
        :param pulumi.Input[_builtins.float] iops: Iops The maximum I/O operations per second (IOPS) for this volume.
        :param pulumi.Input[_builtins.str] name: Unique name of the host.
        :param pulumi.Input[_builtins.str] resource_type: The resource type of the volume.
        :param pulumi.Input[_builtins.str] sds_endpoint: The endpoint to use for operations
        :param pulumi.Input[_builtins.str] status: The status of the volume resource. The enumerated values for this property will expand in the future. When processing
               this property, check for and log unknown values. Optionally halt processing and surface the error, or bypass the
               resource on which the unexpected property value was encountered.
        :param pulumi.Input[Sequence[pulumi.Input['SdsVolumeStatusReasonArgs']]] status_reasons: The reasons for the current status (if any).
        :param pulumi.Input[Sequence[pulumi.Input['SdsVolumeVolumeMappingArgs']]] volume_mappings: List of volume mappings for this volume.
        """
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if sds_endpoint is not None:
            pulumi.set(__self__, "sds_endpoint", sds_endpoint)
        if sds_volume_id is not None:
            pulumi.set(__self__, "sds_volume_id", sds_volume_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_reasons is not None:
            pulumi.set(__self__, "status_reasons", status_reasons)
        if volume_mappings is not None:
            pulumi.set(__self__, "volume_mappings", volume_mappings)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The maximum bandwidth (in megabits per second) for the volume.
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "bandwidth", value)

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The capacity of the volume (in gigabytes).
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "capacity", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time that the volume was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL for this resource.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter
    def iops(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Iops The maximum I/O operations per second (IOPS) for this volume.
        """
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "iops", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique name of the host.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource type of the volume.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter(name="sdsEndpoint")
    def sds_endpoint(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The endpoint to use for operations
        """
        return pulumi.get(self, "sds_endpoint")

    @sds_endpoint.setter
    def sds_endpoint(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sds_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="sdsVolumeId")
    def sds_volume_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "sds_volume_id")

    @sds_volume_id.setter
    def sds_volume_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sds_volume_id", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the volume resource. The enumerated values for this property will expand in the future. When processing
        this property, check for and log unknown values. Optionally halt processing and surface the error, or bypass the
        resource on which the unexpected property value was encountered.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdsVolumeStatusReasonArgs']]]]:
        """
        The reasons for the current status (if any).
        """
        return pulumi.get(self, "status_reasons")

    @status_reasons.setter
    def status_reasons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdsVolumeStatusReasonArgs']]]]):
        pulumi.set(self, "status_reasons", value)

    @_builtins.property
    @pulumi.getter(name="volumeMappings")
    def volume_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdsVolumeVolumeMappingArgs']]]]:
        """
        List of volume mappings for this volume.
        """
        return pulumi.get(self, "volume_mappings")

    @volume_mappings.setter
    def volume_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdsVolumeVolumeMappingArgs']]]]):
        pulumi.set(self, "volume_mappings", value)


@pulumi.type_token("ibm:index/sdsVolume:SdsVolume")
class SdsVolume(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 capacity: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 sds_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 sds_volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a SdsVolume resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] capacity: The capacity of the volume (in gigabytes).
        :param pulumi.Input[_builtins.str] name: Unique name of the host.
        :param pulumi.Input[_builtins.str] sds_endpoint: The endpoint to use for operations
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SdsVolumeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SdsVolume resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SdsVolumeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SdsVolumeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 capacity: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 sds_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 sds_volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SdsVolumeArgs.__new__(SdsVolumeArgs)

            if capacity is None and not opts.urn:
                raise TypeError("Missing required property 'capacity'")
            __props__.__dict__["capacity"] = capacity
            __props__.__dict__["name"] = name
            __props__.__dict__["sds_endpoint"] = sds_endpoint
            __props__.__dict__["sds_volume_id"] = sds_volume_id
            __props__.__dict__["bandwidth"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["iops"] = None
            __props__.__dict__["resource_type"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["status_reasons"] = None
            __props__.__dict__["volume_mappings"] = None
        super(SdsVolume, __self__).__init__(
            'ibm:index/sdsVolume:SdsVolume',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bandwidth: Optional[pulumi.Input[_builtins.float]] = None,
            capacity: Optional[pulumi.Input[_builtins.float]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            iops: Optional[pulumi.Input[_builtins.float]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            sds_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
            sds_volume_id: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            status_reasons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SdsVolumeStatusReasonArgs', 'SdsVolumeStatusReasonArgsDict']]]]] = None,
            volume_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SdsVolumeVolumeMappingArgs', 'SdsVolumeVolumeMappingArgsDict']]]]] = None) -> 'SdsVolume':
        """
        Get an existing SdsVolume resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] bandwidth: The maximum bandwidth (in megabits per second) for the volume.
        :param pulumi.Input[_builtins.float] capacity: The capacity of the volume (in gigabytes).
        :param pulumi.Input[_builtins.str] created_at: The date and time that the volume was created.
        :param pulumi.Input[_builtins.str] href: The URL for this resource.
        :param pulumi.Input[_builtins.float] iops: Iops The maximum I/O operations per second (IOPS) for this volume.
        :param pulumi.Input[_builtins.str] name: Unique name of the host.
        :param pulumi.Input[_builtins.str] resource_type: The resource type of the volume.
        :param pulumi.Input[_builtins.str] sds_endpoint: The endpoint to use for operations
        :param pulumi.Input[_builtins.str] status: The status of the volume resource. The enumerated values for this property will expand in the future. When processing
               this property, check for and log unknown values. Optionally halt processing and surface the error, or bypass the
               resource on which the unexpected property value was encountered.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SdsVolumeStatusReasonArgs', 'SdsVolumeStatusReasonArgsDict']]]] status_reasons: The reasons for the current status (if any).
        :param pulumi.Input[Sequence[pulumi.Input[Union['SdsVolumeVolumeMappingArgs', 'SdsVolumeVolumeMappingArgsDict']]]] volume_mappings: List of volume mappings for this volume.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SdsVolumeState.__new__(_SdsVolumeState)

        __props__.__dict__["bandwidth"] = bandwidth
        __props__.__dict__["capacity"] = capacity
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["href"] = href
        __props__.__dict__["iops"] = iops
        __props__.__dict__["name"] = name
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["sds_endpoint"] = sds_endpoint
        __props__.__dict__["sds_volume_id"] = sds_volume_id
        __props__.__dict__["status"] = status
        __props__.__dict__["status_reasons"] = status_reasons
        __props__.__dict__["volume_mappings"] = volume_mappings
        return SdsVolume(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> pulumi.Output[_builtins.float]:
        """
        The maximum bandwidth (in megabits per second) for the volume.
        """
        return pulumi.get(self, "bandwidth")

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> pulumi.Output[_builtins.float]:
        """
        The capacity of the volume (in gigabytes).
        """
        return pulumi.get(self, "capacity")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time that the volume was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        The URL for this resource.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def iops(self) -> pulumi.Output[_builtins.float]:
        """
        Iops The maximum I/O operations per second (IOPS) for this volume.
        """
        return pulumi.get(self, "iops")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Unique name of the host.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        The resource type of the volume.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="sdsEndpoint")
    def sds_endpoint(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The endpoint to use for operations
        """
        return pulumi.get(self, "sds_endpoint")

    @_builtins.property
    @pulumi.getter(name="sdsVolumeId")
    def sds_volume_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "sds_volume_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the volume resource. The enumerated values for this property will expand in the future. When processing
        this property, check for and log unknown values. Optionally halt processing and surface the error, or bypass the
        resource on which the unexpected property value was encountered.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> pulumi.Output[Sequence['outputs.SdsVolumeStatusReason']]:
        """
        The reasons for the current status (if any).
        """
        return pulumi.get(self, "status_reasons")

    @_builtins.property
    @pulumi.getter(name="volumeMappings")
    def volume_mappings(self) -> pulumi.Output[Sequence['outputs.SdsVolumeVolumeMapping']]:
        """
        List of volume mappings for this volume.
        """
        return pulumi.get(self, "volume_mappings")

