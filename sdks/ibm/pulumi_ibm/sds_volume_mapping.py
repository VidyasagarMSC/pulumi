# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SdsVolumeMappingArgs', 'SdsVolumeMapping']

@pulumi.input_type
class SdsVolumeMappingArgs:
    def __init__(__self__, *,
                 host_id: pulumi.Input[_builtins.str],
                 volume: pulumi.Input['SdsVolumeMappingVolumeArgs'],
                 sds_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 sds_volume_mapping_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a SdsVolumeMapping resource.
        :param pulumi.Input[_builtins.str] host_id: A unique host ID.
        :param pulumi.Input['SdsVolumeMappingVolumeArgs'] volume: The volume reference.
        :param pulumi.Input[_builtins.str] sds_endpoint: The endpoint to use for operations
        """
        pulumi.set(__self__, "host_id", host_id)
        pulumi.set(__self__, "volume", volume)
        if sds_endpoint is not None:
            pulumi.set(__self__, "sds_endpoint", sds_endpoint)
        if sds_volume_mapping_id is not None:
            pulumi.set(__self__, "sds_volume_mapping_id", sds_volume_mapping_id)

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> pulumi.Input[_builtins.str]:
        """
        A unique host ID.
        """
        return pulumi.get(self, "host_id")

    @host_id.setter
    def host_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "host_id", value)

    @_builtins.property
    @pulumi.getter
    def volume(self) -> pulumi.Input['SdsVolumeMappingVolumeArgs']:
        """
        The volume reference.
        """
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: pulumi.Input['SdsVolumeMappingVolumeArgs']):
        pulumi.set(self, "volume", value)

    @_builtins.property
    @pulumi.getter(name="sdsEndpoint")
    def sds_endpoint(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The endpoint to use for operations
        """
        return pulumi.get(self, "sds_endpoint")

    @sds_endpoint.setter
    def sds_endpoint(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sds_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="sdsVolumeMappingId")
    def sds_volume_mapping_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "sds_volume_mapping_id")

    @sds_volume_mapping_id.setter
    def sds_volume_mapping_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sds_volume_mapping_id", value)


@pulumi.input_type
class _SdsVolumeMappingState:
    def __init__(__self__, *,
                 gateways: Optional[pulumi.Input[Sequence[pulumi.Input['SdsVolumeMappingGatewayArgs']]]] = None,
                 host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input['SdsVolumeMappingHostArgs']]]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input['SdsVolumeMappingNamespaceArgs']]]] = None,
                 sds_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 sds_volume_mapping_id: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_identifiers: Optional[pulumi.Input[Sequence[pulumi.Input['SdsVolumeMappingStorageIdentifierArgs']]]] = None,
                 subsystem_nqn: Optional[pulumi.Input[_builtins.str]] = None,
                 volume: Optional[pulumi.Input['SdsVolumeMappingVolumeArgs']] = None,
                 volume_mapping_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SdsVolumeMapping resources.
        :param pulumi.Input[Sequence[pulumi.Input['SdsVolumeMappingGatewayArgs']]] gateways: List of NVMe gateways.
        :param pulumi.Input[_builtins.str] host_id: A unique host ID.
        :param pulumi.Input[Sequence[pulumi.Input['SdsVolumeMappingHostArgs']]] hosts: Host mapping schema.
        :param pulumi.Input[_builtins.str] href: The URL for this resource.
        :param pulumi.Input[Sequence[pulumi.Input['SdsVolumeMappingNamespaceArgs']]] namespaces: The NVMe namespace properties for a given volume mapping.
        :param pulumi.Input[_builtins.str] sds_endpoint: The endpoint to use for operations
        :param pulumi.Input[_builtins.str] status: The status of the volume mapping. The enumerated values for this property will expand in the future. When processing
               this property, check for and log unknown values. Optionally halt processing and surface the error, or bypass the
               resource on which the unexpected property value was encountered.
        :param pulumi.Input[Sequence[pulumi.Input['SdsVolumeMappingStorageIdentifierArgs']]] storage_identifiers: Storage network and ID information associated with a volume/host mapping.
        :param pulumi.Input[_builtins.str] subsystem_nqn: The NVMe target subsystem NQN (NVMe Qualified Name) that can be used for doing NVMe connect by the initiator.
        :param pulumi.Input['SdsVolumeMappingVolumeArgs'] volume: The volume reference.
        :param pulumi.Input[_builtins.str] volume_mapping_id: Unique identifier of the mapping.
        """
        if gateways is not None:
            pulumi.set(__self__, "gateways", gateways)
        if host_id is not None:
            pulumi.set(__self__, "host_id", host_id)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if sds_endpoint is not None:
            pulumi.set(__self__, "sds_endpoint", sds_endpoint)
        if sds_volume_mapping_id is not None:
            pulumi.set(__self__, "sds_volume_mapping_id", sds_volume_mapping_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if storage_identifiers is not None:
            pulumi.set(__self__, "storage_identifiers", storage_identifiers)
        if subsystem_nqn is not None:
            pulumi.set(__self__, "subsystem_nqn", subsystem_nqn)
        if volume is not None:
            pulumi.set(__self__, "volume", volume)
        if volume_mapping_id is not None:
            pulumi.set(__self__, "volume_mapping_id", volume_mapping_id)

    @_builtins.property
    @pulumi.getter
    def gateways(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdsVolumeMappingGatewayArgs']]]]:
        """
        List of NVMe gateways.
        """
        return pulumi.get(self, "gateways")

    @gateways.setter
    def gateways(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdsVolumeMappingGatewayArgs']]]]):
        pulumi.set(self, "gateways", value)

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A unique host ID.
        """
        return pulumi.get(self, "host_id")

    @host_id.setter
    def host_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_id", value)

    @_builtins.property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdsVolumeMappingHostArgs']]]]:
        """
        Host mapping schema.
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdsVolumeMappingHostArgs']]]]):
        pulumi.set(self, "hosts", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL for this resource.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdsVolumeMappingNamespaceArgs']]]]:
        """
        The NVMe namespace properties for a given volume mapping.
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdsVolumeMappingNamespaceArgs']]]]):
        pulumi.set(self, "namespaces", value)

    @_builtins.property
    @pulumi.getter(name="sdsEndpoint")
    def sds_endpoint(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The endpoint to use for operations
        """
        return pulumi.get(self, "sds_endpoint")

    @sds_endpoint.setter
    def sds_endpoint(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sds_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="sdsVolumeMappingId")
    def sds_volume_mapping_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "sds_volume_mapping_id")

    @sds_volume_mapping_id.setter
    def sds_volume_mapping_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sds_volume_mapping_id", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the volume mapping. The enumerated values for this property will expand in the future. When processing
        this property, check for and log unknown values. Optionally halt processing and surface the error, or bypass the
        resource on which the unexpected property value was encountered.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="storageIdentifiers")
    def storage_identifiers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdsVolumeMappingStorageIdentifierArgs']]]]:
        """
        Storage network and ID information associated with a volume/host mapping.
        """
        return pulumi.get(self, "storage_identifiers")

    @storage_identifiers.setter
    def storage_identifiers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdsVolumeMappingStorageIdentifierArgs']]]]):
        pulumi.set(self, "storage_identifiers", value)

    @_builtins.property
    @pulumi.getter(name="subsystemNqn")
    def subsystem_nqn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The NVMe target subsystem NQN (NVMe Qualified Name) that can be used for doing NVMe connect by the initiator.
        """
        return pulumi.get(self, "subsystem_nqn")

    @subsystem_nqn.setter
    def subsystem_nqn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subsystem_nqn", value)

    @_builtins.property
    @pulumi.getter
    def volume(self) -> Optional[pulumi.Input['SdsVolumeMappingVolumeArgs']]:
        """
        The volume reference.
        """
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: Optional[pulumi.Input['SdsVolumeMappingVolumeArgs']]):
        pulumi.set(self, "volume", value)

    @_builtins.property
    @pulumi.getter(name="volumeMappingId")
    def volume_mapping_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique identifier of the mapping.
        """
        return pulumi.get(self, "volume_mapping_id")

    @volume_mapping_id.setter
    def volume_mapping_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume_mapping_id", value)


@pulumi.type_token("ibm:index/sdsVolumeMapping:SdsVolumeMapping")
class SdsVolumeMapping(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 sds_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 sds_volume_mapping_id: Optional[pulumi.Input[_builtins.str]] = None,
                 volume: Optional[pulumi.Input[Union['SdsVolumeMappingVolumeArgs', 'SdsVolumeMappingVolumeArgsDict']]] = None,
                 __props__=None):
        """
        Create a SdsVolumeMapping resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] host_id: A unique host ID.
        :param pulumi.Input[_builtins.str] sds_endpoint: The endpoint to use for operations
        :param pulumi.Input[Union['SdsVolumeMappingVolumeArgs', 'SdsVolumeMappingVolumeArgsDict']] volume: The volume reference.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SdsVolumeMappingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SdsVolumeMapping resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SdsVolumeMappingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SdsVolumeMappingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 sds_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 sds_volume_mapping_id: Optional[pulumi.Input[_builtins.str]] = None,
                 volume: Optional[pulumi.Input[Union['SdsVolumeMappingVolumeArgs', 'SdsVolumeMappingVolumeArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SdsVolumeMappingArgs.__new__(SdsVolumeMappingArgs)

            if host_id is None and not opts.urn:
                raise TypeError("Missing required property 'host_id'")
            __props__.__dict__["host_id"] = host_id
            __props__.__dict__["sds_endpoint"] = sds_endpoint
            __props__.__dict__["sds_volume_mapping_id"] = sds_volume_mapping_id
            if volume is None and not opts.urn:
                raise TypeError("Missing required property 'volume'")
            __props__.__dict__["volume"] = volume
            __props__.__dict__["gateways"] = None
            __props__.__dict__["hosts"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["namespaces"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["storage_identifiers"] = None
            __props__.__dict__["subsystem_nqn"] = None
            __props__.__dict__["volume_mapping_id"] = None
        super(SdsVolumeMapping, __self__).__init__(
            'ibm:index/sdsVolumeMapping:SdsVolumeMapping',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            gateways: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SdsVolumeMappingGatewayArgs', 'SdsVolumeMappingGatewayArgsDict']]]]] = None,
            host_id: Optional[pulumi.Input[_builtins.str]] = None,
            hosts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SdsVolumeMappingHostArgs', 'SdsVolumeMappingHostArgsDict']]]]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SdsVolumeMappingNamespaceArgs', 'SdsVolumeMappingNamespaceArgsDict']]]]] = None,
            sds_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
            sds_volume_mapping_id: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            storage_identifiers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SdsVolumeMappingStorageIdentifierArgs', 'SdsVolumeMappingStorageIdentifierArgsDict']]]]] = None,
            subsystem_nqn: Optional[pulumi.Input[_builtins.str]] = None,
            volume: Optional[pulumi.Input[Union['SdsVolumeMappingVolumeArgs', 'SdsVolumeMappingVolumeArgsDict']]] = None,
            volume_mapping_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'SdsVolumeMapping':
        """
        Get an existing SdsVolumeMapping resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SdsVolumeMappingGatewayArgs', 'SdsVolumeMappingGatewayArgsDict']]]] gateways: List of NVMe gateways.
        :param pulumi.Input[_builtins.str] host_id: A unique host ID.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SdsVolumeMappingHostArgs', 'SdsVolumeMappingHostArgsDict']]]] hosts: Host mapping schema.
        :param pulumi.Input[_builtins.str] href: The URL for this resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SdsVolumeMappingNamespaceArgs', 'SdsVolumeMappingNamespaceArgsDict']]]] namespaces: The NVMe namespace properties for a given volume mapping.
        :param pulumi.Input[_builtins.str] sds_endpoint: The endpoint to use for operations
        :param pulumi.Input[_builtins.str] status: The status of the volume mapping. The enumerated values for this property will expand in the future. When processing
               this property, check for and log unknown values. Optionally halt processing and surface the error, or bypass the
               resource on which the unexpected property value was encountered.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SdsVolumeMappingStorageIdentifierArgs', 'SdsVolumeMappingStorageIdentifierArgsDict']]]] storage_identifiers: Storage network and ID information associated with a volume/host mapping.
        :param pulumi.Input[_builtins.str] subsystem_nqn: The NVMe target subsystem NQN (NVMe Qualified Name) that can be used for doing NVMe connect by the initiator.
        :param pulumi.Input[Union['SdsVolumeMappingVolumeArgs', 'SdsVolumeMappingVolumeArgsDict']] volume: The volume reference.
        :param pulumi.Input[_builtins.str] volume_mapping_id: Unique identifier of the mapping.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SdsVolumeMappingState.__new__(_SdsVolumeMappingState)

        __props__.__dict__["gateways"] = gateways
        __props__.__dict__["host_id"] = host_id
        __props__.__dict__["hosts"] = hosts
        __props__.__dict__["href"] = href
        __props__.__dict__["namespaces"] = namespaces
        __props__.__dict__["sds_endpoint"] = sds_endpoint
        __props__.__dict__["sds_volume_mapping_id"] = sds_volume_mapping_id
        __props__.__dict__["status"] = status
        __props__.__dict__["storage_identifiers"] = storage_identifiers
        __props__.__dict__["subsystem_nqn"] = subsystem_nqn
        __props__.__dict__["volume"] = volume
        __props__.__dict__["volume_mapping_id"] = volume_mapping_id
        return SdsVolumeMapping(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def gateways(self) -> pulumi.Output[Sequence['outputs.SdsVolumeMappingGateway']]:
        """
        List of NVMe gateways.
        """
        return pulumi.get(self, "gateways")

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> pulumi.Output[_builtins.str]:
        """
        A unique host ID.
        """
        return pulumi.get(self, "host_id")

    @_builtins.property
    @pulumi.getter
    def hosts(self) -> pulumi.Output[Sequence['outputs.SdsVolumeMappingHost']]:
        """
        Host mapping schema.
        """
        return pulumi.get(self, "hosts")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        The URL for this resource.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def namespaces(self) -> pulumi.Output[Sequence['outputs.SdsVolumeMappingNamespace']]:
        """
        The NVMe namespace properties for a given volume mapping.
        """
        return pulumi.get(self, "namespaces")

    @_builtins.property
    @pulumi.getter(name="sdsEndpoint")
    def sds_endpoint(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The endpoint to use for operations
        """
        return pulumi.get(self, "sds_endpoint")

    @_builtins.property
    @pulumi.getter(name="sdsVolumeMappingId")
    def sds_volume_mapping_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "sds_volume_mapping_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the volume mapping. The enumerated values for this property will expand in the future. When processing
        this property, check for and log unknown values. Optionally halt processing and surface the error, or bypass the
        resource on which the unexpected property value was encountered.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="storageIdentifiers")
    def storage_identifiers(self) -> pulumi.Output[Sequence['outputs.SdsVolumeMappingStorageIdentifier']]:
        """
        Storage network and ID information associated with a volume/host mapping.
        """
        return pulumi.get(self, "storage_identifiers")

    @_builtins.property
    @pulumi.getter(name="subsystemNqn")
    def subsystem_nqn(self) -> pulumi.Output[_builtins.str]:
        """
        The NVMe target subsystem NQN (NVMe Qualified Name) that can be used for doing NVMe connect by the initiator.
        """
        return pulumi.get(self, "subsystem_nqn")

    @_builtins.property
    @pulumi.getter
    def volume(self) -> pulumi.Output['outputs.SdsVolumeMappingVolume']:
        """
        The volume reference.
        """
        return pulumi.get(self, "volume")

    @_builtins.property
    @pulumi.getter(name="volumeMappingId")
    def volume_mapping_id(self) -> pulumi.Output[_builtins.str]:
        """
        Unique identifier of the mapping.
        """
        return pulumi.get(self, "volume_mapping_id")

