# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SslCertificateArgs', 'SslCertificate']

@pulumi.input_type
class SslCertificateArgs:
    def __init__(__self__, *,
                 certificate_signing_request: pulumi.Input[_builtins.str],
                 order_approver_email_address: pulumi.Input[_builtins.str],
                 organization_information: pulumi.Input['SslCertificateOrganizationInformationArgs'],
                 server_count: pulumi.Input[_builtins.float],
                 server_type: pulumi.Input[_builtins.str],
                 ssl_type: pulumi.Input[_builtins.str],
                 technical_contact: pulumi.Input['SslCertificateTechnicalContactArgs'],
                 validity_months: pulumi.Input[_builtins.float],
                 administrative_address_same_as_organization_flag: Optional[pulumi.Input[_builtins.bool]] = None,
                 administrative_contact: Optional[pulumi.Input['SslCertificateAdministrativeContactArgs']] = None,
                 administrative_contact_same_as_technical_flag: Optional[pulumi.Input[_builtins.bool]] = None,
                 billing_address_same_as_organization_flag: Optional[pulumi.Input[_builtins.bool]] = None,
                 billing_contact: Optional[pulumi.Input['SslCertificateBillingContactArgs']] = None,
                 billing_contact_same_as_technical_flag: Optional[pulumi.Input[_builtins.bool]] = None,
                 renewal_flag: Optional[pulumi.Input[_builtins.bool]] = None,
                 ssl_certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
                 technical_contact_same_as_org_address_flag: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a SslCertificate resource.
        :param pulumi.Input[_builtins.str] certificate_signing_request: certificate signing request info
        :param pulumi.Input[_builtins.str] order_approver_email_address: Email address of the approver
        :param pulumi.Input['SslCertificateOrganizationInformationArgs'] organization_information: Organization information
        :param pulumi.Input[_builtins.float] server_count: Server count
        :param pulumi.Input[_builtins.str] server_type: server type
        :param pulumi.Input[_builtins.str] ssl_type: ssl type
        :param pulumi.Input['SslCertificateTechnicalContactArgs'] technical_contact: Technical contact info
        :param pulumi.Input[_builtins.float] validity_months: vslidity of the ssl certificate in month
        :param pulumi.Input[_builtins.bool] administrative_address_same_as_organization_flag: administrative address same as organization flag
        :param pulumi.Input[_builtins.bool] administrative_contact_same_as_technical_flag: Administrative contact same as technical flag
        :param pulumi.Input[_builtins.bool] billing_address_same_as_organization_flag: billing address same as organization flag
        :param pulumi.Input[_builtins.bool] billing_contact_same_as_technical_flag: billing contact
        :param pulumi.Input[_builtins.bool] renewal_flag: Renewal flag
        :param pulumi.Input[_builtins.bool] technical_contact_same_as_org_address_flag: Technical contact same as org address flag
        """
        pulumi.set(__self__, "certificate_signing_request", certificate_signing_request)
        pulumi.set(__self__, "order_approver_email_address", order_approver_email_address)
        pulumi.set(__self__, "organization_information", organization_information)
        pulumi.set(__self__, "server_count", server_count)
        pulumi.set(__self__, "server_type", server_type)
        pulumi.set(__self__, "ssl_type", ssl_type)
        pulumi.set(__self__, "technical_contact", technical_contact)
        pulumi.set(__self__, "validity_months", validity_months)
        if administrative_address_same_as_organization_flag is not None:
            pulumi.set(__self__, "administrative_address_same_as_organization_flag", administrative_address_same_as_organization_flag)
        if administrative_contact is not None:
            pulumi.set(__self__, "administrative_contact", administrative_contact)
        if administrative_contact_same_as_technical_flag is not None:
            pulumi.set(__self__, "administrative_contact_same_as_technical_flag", administrative_contact_same_as_technical_flag)
        if billing_address_same_as_organization_flag is not None:
            pulumi.set(__self__, "billing_address_same_as_organization_flag", billing_address_same_as_organization_flag)
        if billing_contact is not None:
            pulumi.set(__self__, "billing_contact", billing_contact)
        if billing_contact_same_as_technical_flag is not None:
            pulumi.set(__self__, "billing_contact_same_as_technical_flag", billing_contact_same_as_technical_flag)
        if renewal_flag is not None:
            pulumi.set(__self__, "renewal_flag", renewal_flag)
        if ssl_certificate_id is not None:
            pulumi.set(__self__, "ssl_certificate_id", ssl_certificate_id)
        if technical_contact_same_as_org_address_flag is not None:
            pulumi.set(__self__, "technical_contact_same_as_org_address_flag", technical_contact_same_as_org_address_flag)

    @_builtins.property
    @pulumi.getter(name="certificateSigningRequest")
    def certificate_signing_request(self) -> pulumi.Input[_builtins.str]:
        """
        certificate signing request info
        """
        return pulumi.get(self, "certificate_signing_request")

    @certificate_signing_request.setter
    def certificate_signing_request(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "certificate_signing_request", value)

    @_builtins.property
    @pulumi.getter(name="orderApproverEmailAddress")
    def order_approver_email_address(self) -> pulumi.Input[_builtins.str]:
        """
        Email address of the approver
        """
        return pulumi.get(self, "order_approver_email_address")

    @order_approver_email_address.setter
    def order_approver_email_address(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "order_approver_email_address", value)

    @_builtins.property
    @pulumi.getter(name="organizationInformation")
    def organization_information(self) -> pulumi.Input['SslCertificateOrganizationInformationArgs']:
        """
        Organization information
        """
        return pulumi.get(self, "organization_information")

    @organization_information.setter
    def organization_information(self, value: pulumi.Input['SslCertificateOrganizationInformationArgs']):
        pulumi.set(self, "organization_information", value)

    @_builtins.property
    @pulumi.getter(name="serverCount")
    def server_count(self) -> pulumi.Input[_builtins.float]:
        """
        Server count
        """
        return pulumi.get(self, "server_count")

    @server_count.setter
    def server_count(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "server_count", value)

    @_builtins.property
    @pulumi.getter(name="serverType")
    def server_type(self) -> pulumi.Input[_builtins.str]:
        """
        server type
        """
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "server_type", value)

    @_builtins.property
    @pulumi.getter(name="sslType")
    def ssl_type(self) -> pulumi.Input[_builtins.str]:
        """
        ssl type
        """
        return pulumi.get(self, "ssl_type")

    @ssl_type.setter
    def ssl_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "ssl_type", value)

    @_builtins.property
    @pulumi.getter(name="technicalContact")
    def technical_contact(self) -> pulumi.Input['SslCertificateTechnicalContactArgs']:
        """
        Technical contact info
        """
        return pulumi.get(self, "technical_contact")

    @technical_contact.setter
    def technical_contact(self, value: pulumi.Input['SslCertificateTechnicalContactArgs']):
        pulumi.set(self, "technical_contact", value)

    @_builtins.property
    @pulumi.getter(name="validityMonths")
    def validity_months(self) -> pulumi.Input[_builtins.float]:
        """
        vslidity of the ssl certificate in month
        """
        return pulumi.get(self, "validity_months")

    @validity_months.setter
    def validity_months(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "validity_months", value)

    @_builtins.property
    @pulumi.getter(name="administrativeAddressSameAsOrganizationFlag")
    def administrative_address_same_as_organization_flag(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        administrative address same as organization flag
        """
        return pulumi.get(self, "administrative_address_same_as_organization_flag")

    @administrative_address_same_as_organization_flag.setter
    def administrative_address_same_as_organization_flag(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "administrative_address_same_as_organization_flag", value)

    @_builtins.property
    @pulumi.getter(name="administrativeContact")
    def administrative_contact(self) -> Optional[pulumi.Input['SslCertificateAdministrativeContactArgs']]:
        return pulumi.get(self, "administrative_contact")

    @administrative_contact.setter
    def administrative_contact(self, value: Optional[pulumi.Input['SslCertificateAdministrativeContactArgs']]):
        pulumi.set(self, "administrative_contact", value)

    @_builtins.property
    @pulumi.getter(name="administrativeContactSameAsTechnicalFlag")
    def administrative_contact_same_as_technical_flag(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Administrative contact same as technical flag
        """
        return pulumi.get(self, "administrative_contact_same_as_technical_flag")

    @administrative_contact_same_as_technical_flag.setter
    def administrative_contact_same_as_technical_flag(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "administrative_contact_same_as_technical_flag", value)

    @_builtins.property
    @pulumi.getter(name="billingAddressSameAsOrganizationFlag")
    def billing_address_same_as_organization_flag(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        billing address same as organization flag
        """
        return pulumi.get(self, "billing_address_same_as_organization_flag")

    @billing_address_same_as_organization_flag.setter
    def billing_address_same_as_organization_flag(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "billing_address_same_as_organization_flag", value)

    @_builtins.property
    @pulumi.getter(name="billingContact")
    def billing_contact(self) -> Optional[pulumi.Input['SslCertificateBillingContactArgs']]:
        return pulumi.get(self, "billing_contact")

    @billing_contact.setter
    def billing_contact(self, value: Optional[pulumi.Input['SslCertificateBillingContactArgs']]):
        pulumi.set(self, "billing_contact", value)

    @_builtins.property
    @pulumi.getter(name="billingContactSameAsTechnicalFlag")
    def billing_contact_same_as_technical_flag(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        billing contact
        """
        return pulumi.get(self, "billing_contact_same_as_technical_flag")

    @billing_contact_same_as_technical_flag.setter
    def billing_contact_same_as_technical_flag(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "billing_contact_same_as_technical_flag", value)

    @_builtins.property
    @pulumi.getter(name="renewalFlag")
    def renewal_flag(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Renewal flag
        """
        return pulumi.get(self, "renewal_flag")

    @renewal_flag.setter
    def renewal_flag(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "renewal_flag", value)

    @_builtins.property
    @pulumi.getter(name="sslCertificateId")
    def ssl_certificate_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ssl_certificate_id")

    @ssl_certificate_id.setter
    def ssl_certificate_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ssl_certificate_id", value)

    @_builtins.property
    @pulumi.getter(name="technicalContactSameAsOrgAddressFlag")
    def technical_contact_same_as_org_address_flag(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Technical contact same as org address flag
        """
        return pulumi.get(self, "technical_contact_same_as_org_address_flag")

    @technical_contact_same_as_org_address_flag.setter
    def technical_contact_same_as_org_address_flag(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "technical_contact_same_as_org_address_flag", value)


@pulumi.input_type
class _SslCertificateState:
    def __init__(__self__, *,
                 administrative_address_same_as_organization_flag: Optional[pulumi.Input[_builtins.bool]] = None,
                 administrative_contact: Optional[pulumi.Input['SslCertificateAdministrativeContactArgs']] = None,
                 administrative_contact_same_as_technical_flag: Optional[pulumi.Input[_builtins.bool]] = None,
                 billing_address_same_as_organization_flag: Optional[pulumi.Input[_builtins.bool]] = None,
                 billing_contact: Optional[pulumi.Input['SslCertificateBillingContactArgs']] = None,
                 billing_contact_same_as_technical_flag: Optional[pulumi.Input[_builtins.bool]] = None,
                 certificate_signing_request: Optional[pulumi.Input[_builtins.str]] = None,
                 order_approver_email_address: Optional[pulumi.Input[_builtins.str]] = None,
                 organization_information: Optional[pulumi.Input['SslCertificateOrganizationInformationArgs']] = None,
                 renewal_flag: Optional[pulumi.Input[_builtins.bool]] = None,
                 server_count: Optional[pulumi.Input[_builtins.float]] = None,
                 server_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ssl_certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ssl_type: Optional[pulumi.Input[_builtins.str]] = None,
                 technical_contact: Optional[pulumi.Input['SslCertificateTechnicalContactArgs']] = None,
                 technical_contact_same_as_org_address_flag: Optional[pulumi.Input[_builtins.bool]] = None,
                 validity_months: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering SslCertificate resources.
        :param pulumi.Input[_builtins.bool] administrative_address_same_as_organization_flag: administrative address same as organization flag
        :param pulumi.Input[_builtins.bool] administrative_contact_same_as_technical_flag: Administrative contact same as technical flag
        :param pulumi.Input[_builtins.bool] billing_address_same_as_organization_flag: billing address same as organization flag
        :param pulumi.Input[_builtins.bool] billing_contact_same_as_technical_flag: billing contact
        :param pulumi.Input[_builtins.str] certificate_signing_request: certificate signing request info
        :param pulumi.Input[_builtins.str] order_approver_email_address: Email address of the approver
        :param pulumi.Input['SslCertificateOrganizationInformationArgs'] organization_information: Organization information
        :param pulumi.Input[_builtins.bool] renewal_flag: Renewal flag
        :param pulumi.Input[_builtins.float] server_count: Server count
        :param pulumi.Input[_builtins.str] server_type: server type
        :param pulumi.Input[_builtins.str] ssl_type: ssl type
        :param pulumi.Input['SslCertificateTechnicalContactArgs'] technical_contact: Technical contact info
        :param pulumi.Input[_builtins.bool] technical_contact_same_as_org_address_flag: Technical contact same as org address flag
        :param pulumi.Input[_builtins.float] validity_months: vslidity of the ssl certificate in month
        """
        if administrative_address_same_as_organization_flag is not None:
            pulumi.set(__self__, "administrative_address_same_as_organization_flag", administrative_address_same_as_organization_flag)
        if administrative_contact is not None:
            pulumi.set(__self__, "administrative_contact", administrative_contact)
        if administrative_contact_same_as_technical_flag is not None:
            pulumi.set(__self__, "administrative_contact_same_as_technical_flag", administrative_contact_same_as_technical_flag)
        if billing_address_same_as_organization_flag is not None:
            pulumi.set(__self__, "billing_address_same_as_organization_flag", billing_address_same_as_organization_flag)
        if billing_contact is not None:
            pulumi.set(__self__, "billing_contact", billing_contact)
        if billing_contact_same_as_technical_flag is not None:
            pulumi.set(__self__, "billing_contact_same_as_technical_flag", billing_contact_same_as_technical_flag)
        if certificate_signing_request is not None:
            pulumi.set(__self__, "certificate_signing_request", certificate_signing_request)
        if order_approver_email_address is not None:
            pulumi.set(__self__, "order_approver_email_address", order_approver_email_address)
        if organization_information is not None:
            pulumi.set(__self__, "organization_information", organization_information)
        if renewal_flag is not None:
            pulumi.set(__self__, "renewal_flag", renewal_flag)
        if server_count is not None:
            pulumi.set(__self__, "server_count", server_count)
        if server_type is not None:
            pulumi.set(__self__, "server_type", server_type)
        if ssl_certificate_id is not None:
            pulumi.set(__self__, "ssl_certificate_id", ssl_certificate_id)
        if ssl_type is not None:
            pulumi.set(__self__, "ssl_type", ssl_type)
        if technical_contact is not None:
            pulumi.set(__self__, "technical_contact", technical_contact)
        if technical_contact_same_as_org_address_flag is not None:
            pulumi.set(__self__, "technical_contact_same_as_org_address_flag", technical_contact_same_as_org_address_flag)
        if validity_months is not None:
            pulumi.set(__self__, "validity_months", validity_months)

    @_builtins.property
    @pulumi.getter(name="administrativeAddressSameAsOrganizationFlag")
    def administrative_address_same_as_organization_flag(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        administrative address same as organization flag
        """
        return pulumi.get(self, "administrative_address_same_as_organization_flag")

    @administrative_address_same_as_organization_flag.setter
    def administrative_address_same_as_organization_flag(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "administrative_address_same_as_organization_flag", value)

    @_builtins.property
    @pulumi.getter(name="administrativeContact")
    def administrative_contact(self) -> Optional[pulumi.Input['SslCertificateAdministrativeContactArgs']]:
        return pulumi.get(self, "administrative_contact")

    @administrative_contact.setter
    def administrative_contact(self, value: Optional[pulumi.Input['SslCertificateAdministrativeContactArgs']]):
        pulumi.set(self, "administrative_contact", value)

    @_builtins.property
    @pulumi.getter(name="administrativeContactSameAsTechnicalFlag")
    def administrative_contact_same_as_technical_flag(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Administrative contact same as technical flag
        """
        return pulumi.get(self, "administrative_contact_same_as_technical_flag")

    @administrative_contact_same_as_technical_flag.setter
    def administrative_contact_same_as_technical_flag(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "administrative_contact_same_as_technical_flag", value)

    @_builtins.property
    @pulumi.getter(name="billingAddressSameAsOrganizationFlag")
    def billing_address_same_as_organization_flag(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        billing address same as organization flag
        """
        return pulumi.get(self, "billing_address_same_as_organization_flag")

    @billing_address_same_as_organization_flag.setter
    def billing_address_same_as_organization_flag(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "billing_address_same_as_organization_flag", value)

    @_builtins.property
    @pulumi.getter(name="billingContact")
    def billing_contact(self) -> Optional[pulumi.Input['SslCertificateBillingContactArgs']]:
        return pulumi.get(self, "billing_contact")

    @billing_contact.setter
    def billing_contact(self, value: Optional[pulumi.Input['SslCertificateBillingContactArgs']]):
        pulumi.set(self, "billing_contact", value)

    @_builtins.property
    @pulumi.getter(name="billingContactSameAsTechnicalFlag")
    def billing_contact_same_as_technical_flag(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        billing contact
        """
        return pulumi.get(self, "billing_contact_same_as_technical_flag")

    @billing_contact_same_as_technical_flag.setter
    def billing_contact_same_as_technical_flag(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "billing_contact_same_as_technical_flag", value)

    @_builtins.property
    @pulumi.getter(name="certificateSigningRequest")
    def certificate_signing_request(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        certificate signing request info
        """
        return pulumi.get(self, "certificate_signing_request")

    @certificate_signing_request.setter
    def certificate_signing_request(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate_signing_request", value)

    @_builtins.property
    @pulumi.getter(name="orderApproverEmailAddress")
    def order_approver_email_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Email address of the approver
        """
        return pulumi.get(self, "order_approver_email_address")

    @order_approver_email_address.setter
    def order_approver_email_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "order_approver_email_address", value)

    @_builtins.property
    @pulumi.getter(name="organizationInformation")
    def organization_information(self) -> Optional[pulumi.Input['SslCertificateOrganizationInformationArgs']]:
        """
        Organization information
        """
        return pulumi.get(self, "organization_information")

    @organization_information.setter
    def organization_information(self, value: Optional[pulumi.Input['SslCertificateOrganizationInformationArgs']]):
        pulumi.set(self, "organization_information", value)

    @_builtins.property
    @pulumi.getter(name="renewalFlag")
    def renewal_flag(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Renewal flag
        """
        return pulumi.get(self, "renewal_flag")

    @renewal_flag.setter
    def renewal_flag(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "renewal_flag", value)

    @_builtins.property
    @pulumi.getter(name="serverCount")
    def server_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Server count
        """
        return pulumi.get(self, "server_count")

    @server_count.setter
    def server_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "server_count", value)

    @_builtins.property
    @pulumi.getter(name="serverType")
    def server_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        server type
        """
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "server_type", value)

    @_builtins.property
    @pulumi.getter(name="sslCertificateId")
    def ssl_certificate_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ssl_certificate_id")

    @ssl_certificate_id.setter
    def ssl_certificate_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ssl_certificate_id", value)

    @_builtins.property
    @pulumi.getter(name="sslType")
    def ssl_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ssl type
        """
        return pulumi.get(self, "ssl_type")

    @ssl_type.setter
    def ssl_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ssl_type", value)

    @_builtins.property
    @pulumi.getter(name="technicalContact")
    def technical_contact(self) -> Optional[pulumi.Input['SslCertificateTechnicalContactArgs']]:
        """
        Technical contact info
        """
        return pulumi.get(self, "technical_contact")

    @technical_contact.setter
    def technical_contact(self, value: Optional[pulumi.Input['SslCertificateTechnicalContactArgs']]):
        pulumi.set(self, "technical_contact", value)

    @_builtins.property
    @pulumi.getter(name="technicalContactSameAsOrgAddressFlag")
    def technical_contact_same_as_org_address_flag(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Technical contact same as org address flag
        """
        return pulumi.get(self, "technical_contact_same_as_org_address_flag")

    @technical_contact_same_as_org_address_flag.setter
    def technical_contact_same_as_org_address_flag(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "technical_contact_same_as_org_address_flag", value)

    @_builtins.property
    @pulumi.getter(name="validityMonths")
    def validity_months(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        vslidity of the ssl certificate in month
        """
        return pulumi.get(self, "validity_months")

    @validity_months.setter
    def validity_months(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "validity_months", value)


@pulumi.type_token("ibm:index/sslCertificate:SslCertificate")
class SslCertificate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 administrative_address_same_as_organization_flag: Optional[pulumi.Input[_builtins.bool]] = None,
                 administrative_contact: Optional[pulumi.Input[Union['SslCertificateAdministrativeContactArgs', 'SslCertificateAdministrativeContactArgsDict']]] = None,
                 administrative_contact_same_as_technical_flag: Optional[pulumi.Input[_builtins.bool]] = None,
                 billing_address_same_as_organization_flag: Optional[pulumi.Input[_builtins.bool]] = None,
                 billing_contact: Optional[pulumi.Input[Union['SslCertificateBillingContactArgs', 'SslCertificateBillingContactArgsDict']]] = None,
                 billing_contact_same_as_technical_flag: Optional[pulumi.Input[_builtins.bool]] = None,
                 certificate_signing_request: Optional[pulumi.Input[_builtins.str]] = None,
                 order_approver_email_address: Optional[pulumi.Input[_builtins.str]] = None,
                 organization_information: Optional[pulumi.Input[Union['SslCertificateOrganizationInformationArgs', 'SslCertificateOrganizationInformationArgsDict']]] = None,
                 renewal_flag: Optional[pulumi.Input[_builtins.bool]] = None,
                 server_count: Optional[pulumi.Input[_builtins.float]] = None,
                 server_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ssl_certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ssl_type: Optional[pulumi.Input[_builtins.str]] = None,
                 technical_contact: Optional[pulumi.Input[Union['SslCertificateTechnicalContactArgs', 'SslCertificateTechnicalContactArgsDict']]] = None,
                 technical_contact_same_as_org_address_flag: Optional[pulumi.Input[_builtins.bool]] = None,
                 validity_months: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a SslCertificate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] administrative_address_same_as_organization_flag: administrative address same as organization flag
        :param pulumi.Input[_builtins.bool] administrative_contact_same_as_technical_flag: Administrative contact same as technical flag
        :param pulumi.Input[_builtins.bool] billing_address_same_as_organization_flag: billing address same as organization flag
        :param pulumi.Input[_builtins.bool] billing_contact_same_as_technical_flag: billing contact
        :param pulumi.Input[_builtins.str] certificate_signing_request: certificate signing request info
        :param pulumi.Input[_builtins.str] order_approver_email_address: Email address of the approver
        :param pulumi.Input[Union['SslCertificateOrganizationInformationArgs', 'SslCertificateOrganizationInformationArgsDict']] organization_information: Organization information
        :param pulumi.Input[_builtins.bool] renewal_flag: Renewal flag
        :param pulumi.Input[_builtins.float] server_count: Server count
        :param pulumi.Input[_builtins.str] server_type: server type
        :param pulumi.Input[_builtins.str] ssl_type: ssl type
        :param pulumi.Input[Union['SslCertificateTechnicalContactArgs', 'SslCertificateTechnicalContactArgsDict']] technical_contact: Technical contact info
        :param pulumi.Input[_builtins.bool] technical_contact_same_as_org_address_flag: Technical contact same as org address flag
        :param pulumi.Input[_builtins.float] validity_months: vslidity of the ssl certificate in month
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SslCertificateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SslCertificate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SslCertificateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SslCertificateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 administrative_address_same_as_organization_flag: Optional[pulumi.Input[_builtins.bool]] = None,
                 administrative_contact: Optional[pulumi.Input[Union['SslCertificateAdministrativeContactArgs', 'SslCertificateAdministrativeContactArgsDict']]] = None,
                 administrative_contact_same_as_technical_flag: Optional[pulumi.Input[_builtins.bool]] = None,
                 billing_address_same_as_organization_flag: Optional[pulumi.Input[_builtins.bool]] = None,
                 billing_contact: Optional[pulumi.Input[Union['SslCertificateBillingContactArgs', 'SslCertificateBillingContactArgsDict']]] = None,
                 billing_contact_same_as_technical_flag: Optional[pulumi.Input[_builtins.bool]] = None,
                 certificate_signing_request: Optional[pulumi.Input[_builtins.str]] = None,
                 order_approver_email_address: Optional[pulumi.Input[_builtins.str]] = None,
                 organization_information: Optional[pulumi.Input[Union['SslCertificateOrganizationInformationArgs', 'SslCertificateOrganizationInformationArgsDict']]] = None,
                 renewal_flag: Optional[pulumi.Input[_builtins.bool]] = None,
                 server_count: Optional[pulumi.Input[_builtins.float]] = None,
                 server_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ssl_certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ssl_type: Optional[pulumi.Input[_builtins.str]] = None,
                 technical_contact: Optional[pulumi.Input[Union['SslCertificateTechnicalContactArgs', 'SslCertificateTechnicalContactArgsDict']]] = None,
                 technical_contact_same_as_org_address_flag: Optional[pulumi.Input[_builtins.bool]] = None,
                 validity_months: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SslCertificateArgs.__new__(SslCertificateArgs)

            __props__.__dict__["administrative_address_same_as_organization_flag"] = administrative_address_same_as_organization_flag
            __props__.__dict__["administrative_contact"] = administrative_contact
            __props__.__dict__["administrative_contact_same_as_technical_flag"] = administrative_contact_same_as_technical_flag
            __props__.__dict__["billing_address_same_as_organization_flag"] = billing_address_same_as_organization_flag
            __props__.__dict__["billing_contact"] = billing_contact
            __props__.__dict__["billing_contact_same_as_technical_flag"] = billing_contact_same_as_technical_flag
            if certificate_signing_request is None and not opts.urn:
                raise TypeError("Missing required property 'certificate_signing_request'")
            __props__.__dict__["certificate_signing_request"] = certificate_signing_request
            if order_approver_email_address is None and not opts.urn:
                raise TypeError("Missing required property 'order_approver_email_address'")
            __props__.__dict__["order_approver_email_address"] = order_approver_email_address
            if organization_information is None and not opts.urn:
                raise TypeError("Missing required property 'organization_information'")
            __props__.__dict__["organization_information"] = organization_information
            __props__.__dict__["renewal_flag"] = renewal_flag
            if server_count is None and not opts.urn:
                raise TypeError("Missing required property 'server_count'")
            __props__.__dict__["server_count"] = server_count
            if server_type is None and not opts.urn:
                raise TypeError("Missing required property 'server_type'")
            __props__.__dict__["server_type"] = server_type
            __props__.__dict__["ssl_certificate_id"] = ssl_certificate_id
            if ssl_type is None and not opts.urn:
                raise TypeError("Missing required property 'ssl_type'")
            __props__.__dict__["ssl_type"] = ssl_type
            if technical_contact is None and not opts.urn:
                raise TypeError("Missing required property 'technical_contact'")
            __props__.__dict__["technical_contact"] = technical_contact
            __props__.__dict__["technical_contact_same_as_org_address_flag"] = technical_contact_same_as_org_address_flag
            if validity_months is None and not opts.urn:
                raise TypeError("Missing required property 'validity_months'")
            __props__.__dict__["validity_months"] = validity_months
        super(SslCertificate, __self__).__init__(
            'ibm:index/sslCertificate:SslCertificate',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            administrative_address_same_as_organization_flag: Optional[pulumi.Input[_builtins.bool]] = None,
            administrative_contact: Optional[pulumi.Input[Union['SslCertificateAdministrativeContactArgs', 'SslCertificateAdministrativeContactArgsDict']]] = None,
            administrative_contact_same_as_technical_flag: Optional[pulumi.Input[_builtins.bool]] = None,
            billing_address_same_as_organization_flag: Optional[pulumi.Input[_builtins.bool]] = None,
            billing_contact: Optional[pulumi.Input[Union['SslCertificateBillingContactArgs', 'SslCertificateBillingContactArgsDict']]] = None,
            billing_contact_same_as_technical_flag: Optional[pulumi.Input[_builtins.bool]] = None,
            certificate_signing_request: Optional[pulumi.Input[_builtins.str]] = None,
            order_approver_email_address: Optional[pulumi.Input[_builtins.str]] = None,
            organization_information: Optional[pulumi.Input[Union['SslCertificateOrganizationInformationArgs', 'SslCertificateOrganizationInformationArgsDict']]] = None,
            renewal_flag: Optional[pulumi.Input[_builtins.bool]] = None,
            server_count: Optional[pulumi.Input[_builtins.float]] = None,
            server_type: Optional[pulumi.Input[_builtins.str]] = None,
            ssl_certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
            ssl_type: Optional[pulumi.Input[_builtins.str]] = None,
            technical_contact: Optional[pulumi.Input[Union['SslCertificateTechnicalContactArgs', 'SslCertificateTechnicalContactArgsDict']]] = None,
            technical_contact_same_as_org_address_flag: Optional[pulumi.Input[_builtins.bool]] = None,
            validity_months: Optional[pulumi.Input[_builtins.float]] = None) -> 'SslCertificate':
        """
        Get an existing SslCertificate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] administrative_address_same_as_organization_flag: administrative address same as organization flag
        :param pulumi.Input[_builtins.bool] administrative_contact_same_as_technical_flag: Administrative contact same as technical flag
        :param pulumi.Input[_builtins.bool] billing_address_same_as_organization_flag: billing address same as organization flag
        :param pulumi.Input[_builtins.bool] billing_contact_same_as_technical_flag: billing contact
        :param pulumi.Input[_builtins.str] certificate_signing_request: certificate signing request info
        :param pulumi.Input[_builtins.str] order_approver_email_address: Email address of the approver
        :param pulumi.Input[Union['SslCertificateOrganizationInformationArgs', 'SslCertificateOrganizationInformationArgsDict']] organization_information: Organization information
        :param pulumi.Input[_builtins.bool] renewal_flag: Renewal flag
        :param pulumi.Input[_builtins.float] server_count: Server count
        :param pulumi.Input[_builtins.str] server_type: server type
        :param pulumi.Input[_builtins.str] ssl_type: ssl type
        :param pulumi.Input[Union['SslCertificateTechnicalContactArgs', 'SslCertificateTechnicalContactArgsDict']] technical_contact: Technical contact info
        :param pulumi.Input[_builtins.bool] technical_contact_same_as_org_address_flag: Technical contact same as org address flag
        :param pulumi.Input[_builtins.float] validity_months: vslidity of the ssl certificate in month
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SslCertificateState.__new__(_SslCertificateState)

        __props__.__dict__["administrative_address_same_as_organization_flag"] = administrative_address_same_as_organization_flag
        __props__.__dict__["administrative_contact"] = administrative_contact
        __props__.__dict__["administrative_contact_same_as_technical_flag"] = administrative_contact_same_as_technical_flag
        __props__.__dict__["billing_address_same_as_organization_flag"] = billing_address_same_as_organization_flag
        __props__.__dict__["billing_contact"] = billing_contact
        __props__.__dict__["billing_contact_same_as_technical_flag"] = billing_contact_same_as_technical_flag
        __props__.__dict__["certificate_signing_request"] = certificate_signing_request
        __props__.__dict__["order_approver_email_address"] = order_approver_email_address
        __props__.__dict__["organization_information"] = organization_information
        __props__.__dict__["renewal_flag"] = renewal_flag
        __props__.__dict__["server_count"] = server_count
        __props__.__dict__["server_type"] = server_type
        __props__.__dict__["ssl_certificate_id"] = ssl_certificate_id
        __props__.__dict__["ssl_type"] = ssl_type
        __props__.__dict__["technical_contact"] = technical_contact
        __props__.__dict__["technical_contact_same_as_org_address_flag"] = technical_contact_same_as_org_address_flag
        __props__.__dict__["validity_months"] = validity_months
        return SslCertificate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="administrativeAddressSameAsOrganizationFlag")
    def administrative_address_same_as_organization_flag(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        administrative address same as organization flag
        """
        return pulumi.get(self, "administrative_address_same_as_organization_flag")

    @_builtins.property
    @pulumi.getter(name="administrativeContact")
    def administrative_contact(self) -> pulumi.Output[Optional['outputs.SslCertificateAdministrativeContact']]:
        return pulumi.get(self, "administrative_contact")

    @_builtins.property
    @pulumi.getter(name="administrativeContactSameAsTechnicalFlag")
    def administrative_contact_same_as_technical_flag(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Administrative contact same as technical flag
        """
        return pulumi.get(self, "administrative_contact_same_as_technical_flag")

    @_builtins.property
    @pulumi.getter(name="billingAddressSameAsOrganizationFlag")
    def billing_address_same_as_organization_flag(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        billing address same as organization flag
        """
        return pulumi.get(self, "billing_address_same_as_organization_flag")

    @_builtins.property
    @pulumi.getter(name="billingContact")
    def billing_contact(self) -> pulumi.Output[Optional['outputs.SslCertificateBillingContact']]:
        return pulumi.get(self, "billing_contact")

    @_builtins.property
    @pulumi.getter(name="billingContactSameAsTechnicalFlag")
    def billing_contact_same_as_technical_flag(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        billing contact
        """
        return pulumi.get(self, "billing_contact_same_as_technical_flag")

    @_builtins.property
    @pulumi.getter(name="certificateSigningRequest")
    def certificate_signing_request(self) -> pulumi.Output[_builtins.str]:
        """
        certificate signing request info
        """
        return pulumi.get(self, "certificate_signing_request")

    @_builtins.property
    @pulumi.getter(name="orderApproverEmailAddress")
    def order_approver_email_address(self) -> pulumi.Output[_builtins.str]:
        """
        Email address of the approver
        """
        return pulumi.get(self, "order_approver_email_address")

    @_builtins.property
    @pulumi.getter(name="organizationInformation")
    def organization_information(self) -> pulumi.Output['outputs.SslCertificateOrganizationInformation']:
        """
        Organization information
        """
        return pulumi.get(self, "organization_information")

    @_builtins.property
    @pulumi.getter(name="renewalFlag")
    def renewal_flag(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Renewal flag
        """
        return pulumi.get(self, "renewal_flag")

    @_builtins.property
    @pulumi.getter(name="serverCount")
    def server_count(self) -> pulumi.Output[_builtins.float]:
        """
        Server count
        """
        return pulumi.get(self, "server_count")

    @_builtins.property
    @pulumi.getter(name="serverType")
    def server_type(self) -> pulumi.Output[_builtins.str]:
        """
        server type
        """
        return pulumi.get(self, "server_type")

    @_builtins.property
    @pulumi.getter(name="sslCertificateId")
    def ssl_certificate_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "ssl_certificate_id")

    @_builtins.property
    @pulumi.getter(name="sslType")
    def ssl_type(self) -> pulumi.Output[_builtins.str]:
        """
        ssl type
        """
        return pulumi.get(self, "ssl_type")

    @_builtins.property
    @pulumi.getter(name="technicalContact")
    def technical_contact(self) -> pulumi.Output['outputs.SslCertificateTechnicalContact']:
        """
        Technical contact info
        """
        return pulumi.get(self, "technical_contact")

    @_builtins.property
    @pulumi.getter(name="technicalContactSameAsOrgAddressFlag")
    def technical_contact_same_as_org_address_flag(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Technical contact same as org address flag
        """
        return pulumi.get(self, "technical_contact_same_as_org_address_flag")

    @_builtins.property
    @pulumi.getter(name="validityMonths")
    def validity_months(self) -> pulumi.Output[_builtins.float]:
        """
        vslidity of the ssl certificate in month
        """
        return pulumi.get(self, "validity_months")

