# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSccProfilesResult',
    'AwaitableGetSccProfilesResult',
    'get_scc_profiles',
    'get_scc_profiles_output',
]

@pulumi.output_type
class GetSccProfilesResult:
    """
    A collection of values returned by getSccProfiles.
    """
    def __init__(__self__, id=None, instance_id=None, profile_type=None, profiles=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if profile_type and not isinstance(profile_type, str):
            raise TypeError("Expected argument 'profile_type' to be a str")
        pulumi.set(__self__, "profile_type", profile_type)
        if profiles and not isinstance(profiles, list):
            raise TypeError("Expected argument 'profiles' to be a list")
        pulumi.set(__self__, "profiles", profiles)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="profileType")
    def profile_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "profile_type")

    @_builtins.property
    @pulumi.getter
    def profiles(self) -> Sequence['outputs.GetSccProfilesProfileResult']:
        return pulumi.get(self, "profiles")


class AwaitableGetSccProfilesResult(GetSccProfilesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSccProfilesResult(
            id=self.id,
            instance_id=self.instance_id,
            profile_type=self.profile_type,
            profiles=self.profiles)


def get_scc_profiles(id: Optional[_builtins.str] = None,
                     instance_id: Optional[_builtins.str] = None,
                     profile_type: Optional[_builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSccProfilesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['profileType'] = profile_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSccProfiles:getSccProfiles', __args__, opts=opts, typ=GetSccProfilesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSccProfilesResult(
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        profile_type=pulumi.get(__ret__, 'profile_type'),
        profiles=pulumi.get(__ret__, 'profiles'))
def get_scc_profiles_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                            profile_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSccProfilesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['profileType'] = profile_type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSccProfiles:getSccProfiles', __args__, opts=opts, typ=GetSccProfilesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSccProfilesResult(
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        profile_type=pulumi.get(__response__, 'profile_type'),
        profiles=pulumi.get(__response__, 'profiles')))
