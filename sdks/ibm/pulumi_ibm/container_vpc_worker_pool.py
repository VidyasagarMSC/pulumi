# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ContainerVpcWorkerPoolArgs', 'ContainerVpcWorkerPool']

@pulumi.input_type
class ContainerVpcWorkerPoolArgs:
    def __init__(__self__, *,
                 cluster: pulumi.Input[_builtins.str],
                 flavor: pulumi.Input[_builtins.str],
                 vpc_id: pulumi.Input[_builtins.str],
                 worker_count: pulumi.Input[_builtins.float],
                 worker_pool_name: pulumi.Input[_builtins.str],
                 zones: pulumi.Input[Sequence[pulumi.Input['ContainerVpcWorkerPoolZoneArgs']]],
                 container_vpc_worker_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 crk: Optional[pulumi.Input[_builtins.str]] = None,
                 entitlement: Optional[pulumi.Input[_builtins.str]] = None,
                 host_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 import_on_create: Optional[pulumi.Input[_builtins.bool]] = None,
                 kms_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 kms_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 operating_system: Optional[pulumi.Input[_builtins.str]] = None,
                 orphan_on_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 secondary_storage: Optional[pulumi.Input[_builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerVpcWorkerPoolTaintArgs']]]] = None,
                 timeouts: Optional[pulumi.Input['ContainerVpcWorkerPoolTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a ContainerVpcWorkerPool resource.
        :param pulumi.Input[_builtins.str] cluster: Cluster name
        :param pulumi.Input[_builtins.str] flavor: cluster node falvor
        :param pulumi.Input[_builtins.str] vpc_id: The vpc id where the cluster is
        :param pulumi.Input[_builtins.float] worker_count: The number of workers
        :param pulumi.Input[_builtins.str] worker_pool_name: worker pool name
        :param pulumi.Input[Sequence[pulumi.Input['ContainerVpcWorkerPoolZoneArgs']]] zones: Zones info
        :param pulumi.Input[_builtins.str] crk: Root Key ID for boot volume encryption
        :param pulumi.Input[_builtins.str] entitlement: Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        :param pulumi.Input[_builtins.str] host_pool_id: The ID of the dedicated host pool associated with the worker pool
        :param pulumi.Input[_builtins.bool] import_on_create: Import an existing workerpool from the cluster instead of creating a new
        :param pulumi.Input[_builtins.str] kms_account_id: Account ID of kms instance holder - if not provided, defaults to the account in use
        :param pulumi.Input[_builtins.str] kms_instance_id: Instance ID for boot volume encryption
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels
        :param pulumi.Input[_builtins.str] operating_system: The operating system of the workers in the worker pool.
        :param pulumi.Input[_builtins.bool] orphan_on_delete: Orphan the workerpool resource instead of deleting it
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.str] secondary_storage: The secondary storage option for the workers in the worker pool.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: Allow user to set which security groups added to their workers
        :param pulumi.Input[Sequence[pulumi.Input['ContainerVpcWorkerPoolTaintArgs']]] taints: WorkerPool Taints
        """
        pulumi.set(__self__, "cluster", cluster)
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "worker_count", worker_count)
        pulumi.set(__self__, "worker_pool_name", worker_pool_name)
        pulumi.set(__self__, "zones", zones)
        if container_vpc_worker_pool_id is not None:
            pulumi.set(__self__, "container_vpc_worker_pool_id", container_vpc_worker_pool_id)
        if crk is not None:
            pulumi.set(__self__, "crk", crk)
        if entitlement is not None:
            pulumi.set(__self__, "entitlement", entitlement)
        if host_pool_id is not None:
            pulumi.set(__self__, "host_pool_id", host_pool_id)
        if import_on_create is not None:
            pulumi.set(__self__, "import_on_create", import_on_create)
        if kms_account_id is not None:
            pulumi.set(__self__, "kms_account_id", kms_account_id)
        if kms_instance_id is not None:
            pulumi.set(__self__, "kms_instance_id", kms_instance_id)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if operating_system is not None:
            pulumi.set(__self__, "operating_system", operating_system)
        if orphan_on_delete is not None:
            pulumi.set(__self__, "orphan_on_delete", orphan_on_delete)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if secondary_storage is not None:
            pulumi.set(__self__, "secondary_storage", secondary_storage)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> pulumi.Input[_builtins.str]:
        """
        Cluster name
        """
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster", value)

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> pulumi.Input[_builtins.str]:
        """
        cluster node falvor
        """
        return pulumi.get(self, "flavor")

    @flavor.setter
    def flavor(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "flavor", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[_builtins.str]:
        """
        The vpc id where the cluster is
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vpc_id", value)

    @_builtins.property
    @pulumi.getter(name="workerCount")
    def worker_count(self) -> pulumi.Input[_builtins.float]:
        """
        The number of workers
        """
        return pulumi.get(self, "worker_count")

    @worker_count.setter
    def worker_count(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "worker_count", value)

    @_builtins.property
    @pulumi.getter(name="workerPoolName")
    def worker_pool_name(self) -> pulumi.Input[_builtins.str]:
        """
        worker pool name
        """
        return pulumi.get(self, "worker_pool_name")

    @worker_pool_name.setter
    def worker_pool_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "worker_pool_name", value)

    @_builtins.property
    @pulumi.getter
    def zones(self) -> pulumi.Input[Sequence[pulumi.Input['ContainerVpcWorkerPoolZoneArgs']]]:
        """
        Zones info
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: pulumi.Input[Sequence[pulumi.Input['ContainerVpcWorkerPoolZoneArgs']]]):
        pulumi.set(self, "zones", value)

    @_builtins.property
    @pulumi.getter(name="containerVpcWorkerPoolId")
    def container_vpc_worker_pool_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_vpc_worker_pool_id")

    @container_vpc_worker_pool_id.setter
    def container_vpc_worker_pool_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_vpc_worker_pool_id", value)

    @_builtins.property
    @pulumi.getter
    def crk(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Root Key ID for boot volume encryption
        """
        return pulumi.get(self, "crk")

    @crk.setter
    def crk(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crk", value)

    @_builtins.property
    @pulumi.getter
    def entitlement(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        """
        return pulumi.get(self, "entitlement")

    @entitlement.setter
    def entitlement(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entitlement", value)

    @_builtins.property
    @pulumi.getter(name="hostPoolId")
    def host_pool_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the dedicated host pool associated with the worker pool
        """
        return pulumi.get(self, "host_pool_id")

    @host_pool_id.setter
    def host_pool_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_pool_id", value)

    @_builtins.property
    @pulumi.getter(name="importOnCreate")
    def import_on_create(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Import an existing workerpool from the cluster instead of creating a new
        """
        return pulumi.get(self, "import_on_create")

    @import_on_create.setter
    def import_on_create(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "import_on_create", value)

    @_builtins.property
    @pulumi.getter(name="kmsAccountId")
    def kms_account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Account ID of kms instance holder - if not provided, defaults to the account in use
        """
        return pulumi.get(self, "kms_account_id")

    @kms_account_id.setter
    def kms_account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kms_account_id", value)

    @_builtins.property
    @pulumi.getter(name="kmsInstanceId")
    def kms_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Instance ID for boot volume encryption
        """
        return pulumi.get(self, "kms_instance_id")

    @kms_instance_id.setter
    def kms_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kms_instance_id", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Labels
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The operating system of the workers in the worker pool.
        """
        return pulumi.get(self, "operating_system")

    @operating_system.setter
    def operating_system(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "operating_system", value)

    @_builtins.property
    @pulumi.getter(name="orphanOnDelete")
    def orphan_on_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Orphan the workerpool resource instead of deleting it
        """
        return pulumi.get(self, "orphan_on_delete")

    @orphan_on_delete.setter
    def orphan_on_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "orphan_on_delete", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter(name="secondaryStorage")
    def secondary_storage(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The secondary storage option for the workers in the worker pool.
        """
        return pulumi.get(self, "secondary_storage")

    @secondary_storage.setter
    def secondary_storage(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secondary_storage", value)

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Allow user to set which security groups added to their workers
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_groups", value)

    @_builtins.property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerVpcWorkerPoolTaintArgs']]]]:
        """
        WorkerPool Taints
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerVpcWorkerPoolTaintArgs']]]]):
        pulumi.set(self, "taints", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ContainerVpcWorkerPoolTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ContainerVpcWorkerPoolTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _ContainerVpcWorkerPoolState:
    def __init__(__self__, *,
                 autoscale_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 container_vpc_worker_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 crk: Optional[pulumi.Input[_builtins.str]] = None,
                 entitlement: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor: Optional[pulumi.Input[_builtins.str]] = None,
                 host_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 import_on_create: Optional[pulumi.Input[_builtins.bool]] = None,
                 kms_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 kms_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 operating_system: Optional[pulumi.Input[_builtins.str]] = None,
                 orphan_on_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 resource_controller_url: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 secondary_storage: Optional[pulumi.Input[_builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerVpcWorkerPoolTaintArgs']]]] = None,
                 timeouts: Optional[pulumi.Input['ContainerVpcWorkerPoolTimeoutsArgs']] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 worker_count: Optional[pulumi.Input[_builtins.float]] = None,
                 worker_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 worker_pool_name: Optional[pulumi.Input[_builtins.str]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerVpcWorkerPoolZoneArgs']]]] = None):
        """
        Input properties used for looking up and filtering ContainerVpcWorkerPool resources.
        :param pulumi.Input[_builtins.bool] autoscale_enabled: Autoscaling is enabled on the workerpool
        :param pulumi.Input[_builtins.str] cluster: Cluster name
        :param pulumi.Input[_builtins.str] crk: Root Key ID for boot volume encryption
        :param pulumi.Input[_builtins.str] entitlement: Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        :param pulumi.Input[_builtins.str] flavor: cluster node falvor
        :param pulumi.Input[_builtins.str] host_pool_id: The ID of the dedicated host pool associated with the worker pool
        :param pulumi.Input[_builtins.bool] import_on_create: Import an existing workerpool from the cluster instead of creating a new
        :param pulumi.Input[_builtins.str] kms_account_id: Account ID of kms instance holder - if not provided, defaults to the account in use
        :param pulumi.Input[_builtins.str] kms_instance_id: Instance ID for boot volume encryption
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels
        :param pulumi.Input[_builtins.str] operating_system: The operating system of the workers in the worker pool.
        :param pulumi.Input[_builtins.bool] orphan_on_delete: Orphan the workerpool resource instead of deleting it
        :param pulumi.Input[_builtins.str] resource_controller_url: Resource Controller URL
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.str] secondary_storage: The secondary storage option for the workers in the worker pool.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: Allow user to set which security groups added to their workers
        :param pulumi.Input[Sequence[pulumi.Input['ContainerVpcWorkerPoolTaintArgs']]] taints: WorkerPool Taints
        :param pulumi.Input[_builtins.str] vpc_id: The vpc id where the cluster is
        :param pulumi.Input[_builtins.float] worker_count: The number of workers
        :param pulumi.Input[_builtins.str] worker_pool_name: worker pool name
        :param pulumi.Input[Sequence[pulumi.Input['ContainerVpcWorkerPoolZoneArgs']]] zones: Zones info
        """
        if autoscale_enabled is not None:
            pulumi.set(__self__, "autoscale_enabled", autoscale_enabled)
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if container_vpc_worker_pool_id is not None:
            pulumi.set(__self__, "container_vpc_worker_pool_id", container_vpc_worker_pool_id)
        if crk is not None:
            pulumi.set(__self__, "crk", crk)
        if entitlement is not None:
            pulumi.set(__self__, "entitlement", entitlement)
        if flavor is not None:
            pulumi.set(__self__, "flavor", flavor)
        if host_pool_id is not None:
            pulumi.set(__self__, "host_pool_id", host_pool_id)
        if import_on_create is not None:
            pulumi.set(__self__, "import_on_create", import_on_create)
        if kms_account_id is not None:
            pulumi.set(__self__, "kms_account_id", kms_account_id)
        if kms_instance_id is not None:
            pulumi.set(__self__, "kms_instance_id", kms_instance_id)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if operating_system is not None:
            pulumi.set(__self__, "operating_system", operating_system)
        if orphan_on_delete is not None:
            pulumi.set(__self__, "orphan_on_delete", orphan_on_delete)
        if resource_controller_url is not None:
            pulumi.set(__self__, "resource_controller_url", resource_controller_url)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if secondary_storage is not None:
            pulumi.set(__self__, "secondary_storage", secondary_storage)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if worker_count is not None:
            pulumi.set(__self__, "worker_count", worker_count)
        if worker_pool_id is not None:
            pulumi.set(__self__, "worker_pool_id", worker_pool_id)
        if worker_pool_name is not None:
            pulumi.set(__self__, "worker_pool_name", worker_pool_name)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @_builtins.property
    @pulumi.getter(name="autoscaleEnabled")
    def autoscale_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Autoscaling is enabled on the workerpool
        """
        return pulumi.get(self, "autoscale_enabled")

    @autoscale_enabled.setter
    def autoscale_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "autoscale_enabled", value)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cluster name
        """
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster", value)

    @_builtins.property
    @pulumi.getter(name="containerVpcWorkerPoolId")
    def container_vpc_worker_pool_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_vpc_worker_pool_id")

    @container_vpc_worker_pool_id.setter
    def container_vpc_worker_pool_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_vpc_worker_pool_id", value)

    @_builtins.property
    @pulumi.getter
    def crk(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Root Key ID for boot volume encryption
        """
        return pulumi.get(self, "crk")

    @crk.setter
    def crk(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crk", value)

    @_builtins.property
    @pulumi.getter
    def entitlement(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        """
        return pulumi.get(self, "entitlement")

    @entitlement.setter
    def entitlement(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entitlement", value)

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        cluster node falvor
        """
        return pulumi.get(self, "flavor")

    @flavor.setter
    def flavor(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "flavor", value)

    @_builtins.property
    @pulumi.getter(name="hostPoolId")
    def host_pool_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the dedicated host pool associated with the worker pool
        """
        return pulumi.get(self, "host_pool_id")

    @host_pool_id.setter
    def host_pool_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_pool_id", value)

    @_builtins.property
    @pulumi.getter(name="importOnCreate")
    def import_on_create(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Import an existing workerpool from the cluster instead of creating a new
        """
        return pulumi.get(self, "import_on_create")

    @import_on_create.setter
    def import_on_create(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "import_on_create", value)

    @_builtins.property
    @pulumi.getter(name="kmsAccountId")
    def kms_account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Account ID of kms instance holder - if not provided, defaults to the account in use
        """
        return pulumi.get(self, "kms_account_id")

    @kms_account_id.setter
    def kms_account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kms_account_id", value)

    @_builtins.property
    @pulumi.getter(name="kmsInstanceId")
    def kms_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Instance ID for boot volume encryption
        """
        return pulumi.get(self, "kms_instance_id")

    @kms_instance_id.setter
    def kms_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kms_instance_id", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Labels
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The operating system of the workers in the worker pool.
        """
        return pulumi.get(self, "operating_system")

    @operating_system.setter
    def operating_system(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "operating_system", value)

    @_builtins.property
    @pulumi.getter(name="orphanOnDelete")
    def orphan_on_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Orphan the workerpool resource instead of deleting it
        """
        return pulumi.get(self, "orphan_on_delete")

    @orphan_on_delete.setter
    def orphan_on_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "orphan_on_delete", value)

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource Controller URL
        """
        return pulumi.get(self, "resource_controller_url")

    @resource_controller_url.setter
    def resource_controller_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_controller_url", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter(name="secondaryStorage")
    def secondary_storage(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The secondary storage option for the workers in the worker pool.
        """
        return pulumi.get(self, "secondary_storage")

    @secondary_storage.setter
    def secondary_storage(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secondary_storage", value)

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Allow user to set which security groups added to their workers
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_groups", value)

    @_builtins.property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerVpcWorkerPoolTaintArgs']]]]:
        """
        WorkerPool Taints
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerVpcWorkerPoolTaintArgs']]]]):
        pulumi.set(self, "taints", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ContainerVpcWorkerPoolTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ContainerVpcWorkerPoolTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The vpc id where the cluster is
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_id", value)

    @_builtins.property
    @pulumi.getter(name="workerCount")
    def worker_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The number of workers
        """
        return pulumi.get(self, "worker_count")

    @worker_count.setter
    def worker_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "worker_count", value)

    @_builtins.property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "worker_pool_id")

    @worker_pool_id.setter
    def worker_pool_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "worker_pool_id", value)

    @_builtins.property
    @pulumi.getter(name="workerPoolName")
    def worker_pool_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        worker pool name
        """
        return pulumi.get(self, "worker_pool_name")

    @worker_pool_name.setter
    def worker_pool_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "worker_pool_name", value)

    @_builtins.property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerVpcWorkerPoolZoneArgs']]]]:
        """
        Zones info
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerVpcWorkerPoolZoneArgs']]]]):
        pulumi.set(self, "zones", value)


@pulumi.type_token("ibm:index/containerVpcWorkerPool:ContainerVpcWorkerPool")
class ContainerVpcWorkerPool(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 container_vpc_worker_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 crk: Optional[pulumi.Input[_builtins.str]] = None,
                 entitlement: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor: Optional[pulumi.Input[_builtins.str]] = None,
                 host_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 import_on_create: Optional[pulumi.Input[_builtins.bool]] = None,
                 kms_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 kms_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 operating_system: Optional[pulumi.Input[_builtins.str]] = None,
                 orphan_on_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 secondary_storage: Optional[pulumi.Input[_builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerVpcWorkerPoolTaintArgs', 'ContainerVpcWorkerPoolTaintArgsDict']]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['ContainerVpcWorkerPoolTimeoutsArgs', 'ContainerVpcWorkerPoolTimeoutsArgsDict']]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 worker_count: Optional[pulumi.Input[_builtins.float]] = None,
                 worker_pool_name: Optional[pulumi.Input[_builtins.str]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerVpcWorkerPoolZoneArgs', 'ContainerVpcWorkerPoolZoneArgsDict']]]]] = None,
                 __props__=None):
        """
        Create a ContainerVpcWorkerPool resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster: Cluster name
        :param pulumi.Input[_builtins.str] crk: Root Key ID for boot volume encryption
        :param pulumi.Input[_builtins.str] entitlement: Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        :param pulumi.Input[_builtins.str] flavor: cluster node falvor
        :param pulumi.Input[_builtins.str] host_pool_id: The ID of the dedicated host pool associated with the worker pool
        :param pulumi.Input[_builtins.bool] import_on_create: Import an existing workerpool from the cluster instead of creating a new
        :param pulumi.Input[_builtins.str] kms_account_id: Account ID of kms instance holder - if not provided, defaults to the account in use
        :param pulumi.Input[_builtins.str] kms_instance_id: Instance ID for boot volume encryption
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels
        :param pulumi.Input[_builtins.str] operating_system: The operating system of the workers in the worker pool.
        :param pulumi.Input[_builtins.bool] orphan_on_delete: Orphan the workerpool resource instead of deleting it
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.str] secondary_storage: The secondary storage option for the workers in the worker pool.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: Allow user to set which security groups added to their workers
        :param pulumi.Input[Sequence[pulumi.Input[Union['ContainerVpcWorkerPoolTaintArgs', 'ContainerVpcWorkerPoolTaintArgsDict']]]] taints: WorkerPool Taints
        :param pulumi.Input[_builtins.str] vpc_id: The vpc id where the cluster is
        :param pulumi.Input[_builtins.float] worker_count: The number of workers
        :param pulumi.Input[_builtins.str] worker_pool_name: worker pool name
        :param pulumi.Input[Sequence[pulumi.Input[Union['ContainerVpcWorkerPoolZoneArgs', 'ContainerVpcWorkerPoolZoneArgsDict']]]] zones: Zones info
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ContainerVpcWorkerPoolArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ContainerVpcWorkerPool resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ContainerVpcWorkerPoolArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ContainerVpcWorkerPoolArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 container_vpc_worker_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 crk: Optional[pulumi.Input[_builtins.str]] = None,
                 entitlement: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor: Optional[pulumi.Input[_builtins.str]] = None,
                 host_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 import_on_create: Optional[pulumi.Input[_builtins.bool]] = None,
                 kms_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 kms_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 operating_system: Optional[pulumi.Input[_builtins.str]] = None,
                 orphan_on_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 secondary_storage: Optional[pulumi.Input[_builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerVpcWorkerPoolTaintArgs', 'ContainerVpcWorkerPoolTaintArgsDict']]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['ContainerVpcWorkerPoolTimeoutsArgs', 'ContainerVpcWorkerPoolTimeoutsArgsDict']]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 worker_count: Optional[pulumi.Input[_builtins.float]] = None,
                 worker_pool_name: Optional[pulumi.Input[_builtins.str]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerVpcWorkerPoolZoneArgs', 'ContainerVpcWorkerPoolZoneArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ContainerVpcWorkerPoolArgs.__new__(ContainerVpcWorkerPoolArgs)

            if cluster is None and not opts.urn:
                raise TypeError("Missing required property 'cluster'")
            __props__.__dict__["cluster"] = cluster
            __props__.__dict__["container_vpc_worker_pool_id"] = container_vpc_worker_pool_id
            __props__.__dict__["crk"] = crk
            __props__.__dict__["entitlement"] = entitlement
            if flavor is None and not opts.urn:
                raise TypeError("Missing required property 'flavor'")
            __props__.__dict__["flavor"] = flavor
            __props__.__dict__["host_pool_id"] = host_pool_id
            __props__.__dict__["import_on_create"] = import_on_create
            __props__.__dict__["kms_account_id"] = kms_account_id
            __props__.__dict__["kms_instance_id"] = kms_instance_id
            __props__.__dict__["labels"] = labels
            __props__.__dict__["operating_system"] = operating_system
            __props__.__dict__["orphan_on_delete"] = orphan_on_delete
            __props__.__dict__["resource_group_id"] = resource_group_id
            __props__.__dict__["secondary_storage"] = secondary_storage
            __props__.__dict__["security_groups"] = security_groups
            __props__.__dict__["taints"] = taints
            __props__.__dict__["timeouts"] = timeouts
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            if worker_count is None and not opts.urn:
                raise TypeError("Missing required property 'worker_count'")
            __props__.__dict__["worker_count"] = worker_count
            if worker_pool_name is None and not opts.urn:
                raise TypeError("Missing required property 'worker_pool_name'")
            __props__.__dict__["worker_pool_name"] = worker_pool_name
            if zones is None and not opts.urn:
                raise TypeError("Missing required property 'zones'")
            __props__.__dict__["zones"] = zones
            __props__.__dict__["autoscale_enabled"] = None
            __props__.__dict__["resource_controller_url"] = None
            __props__.__dict__["worker_pool_id"] = None
        super(ContainerVpcWorkerPool, __self__).__init__(
            'ibm:index/containerVpcWorkerPool:ContainerVpcWorkerPool',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            autoscale_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            cluster: Optional[pulumi.Input[_builtins.str]] = None,
            container_vpc_worker_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
            crk: Optional[pulumi.Input[_builtins.str]] = None,
            entitlement: Optional[pulumi.Input[_builtins.str]] = None,
            flavor: Optional[pulumi.Input[_builtins.str]] = None,
            host_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
            import_on_create: Optional[pulumi.Input[_builtins.bool]] = None,
            kms_account_id: Optional[pulumi.Input[_builtins.str]] = None,
            kms_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            operating_system: Optional[pulumi.Input[_builtins.str]] = None,
            orphan_on_delete: Optional[pulumi.Input[_builtins.bool]] = None,
            resource_controller_url: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            secondary_storage: Optional[pulumi.Input[_builtins.str]] = None,
            security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            taints: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerVpcWorkerPoolTaintArgs', 'ContainerVpcWorkerPoolTaintArgsDict']]]]] = None,
            timeouts: Optional[pulumi.Input[Union['ContainerVpcWorkerPoolTimeoutsArgs', 'ContainerVpcWorkerPoolTimeoutsArgsDict']]] = None,
            vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
            worker_count: Optional[pulumi.Input[_builtins.float]] = None,
            worker_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
            worker_pool_name: Optional[pulumi.Input[_builtins.str]] = None,
            zones: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerVpcWorkerPoolZoneArgs', 'ContainerVpcWorkerPoolZoneArgsDict']]]]] = None) -> 'ContainerVpcWorkerPool':
        """
        Get an existing ContainerVpcWorkerPool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] autoscale_enabled: Autoscaling is enabled on the workerpool
        :param pulumi.Input[_builtins.str] cluster: Cluster name
        :param pulumi.Input[_builtins.str] crk: Root Key ID for boot volume encryption
        :param pulumi.Input[_builtins.str] entitlement: Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        :param pulumi.Input[_builtins.str] flavor: cluster node falvor
        :param pulumi.Input[_builtins.str] host_pool_id: The ID of the dedicated host pool associated with the worker pool
        :param pulumi.Input[_builtins.bool] import_on_create: Import an existing workerpool from the cluster instead of creating a new
        :param pulumi.Input[_builtins.str] kms_account_id: Account ID of kms instance holder - if not provided, defaults to the account in use
        :param pulumi.Input[_builtins.str] kms_instance_id: Instance ID for boot volume encryption
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels
        :param pulumi.Input[_builtins.str] operating_system: The operating system of the workers in the worker pool.
        :param pulumi.Input[_builtins.bool] orphan_on_delete: Orphan the workerpool resource instead of deleting it
        :param pulumi.Input[_builtins.str] resource_controller_url: Resource Controller URL
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.str] secondary_storage: The secondary storage option for the workers in the worker pool.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: Allow user to set which security groups added to their workers
        :param pulumi.Input[Sequence[pulumi.Input[Union['ContainerVpcWorkerPoolTaintArgs', 'ContainerVpcWorkerPoolTaintArgsDict']]]] taints: WorkerPool Taints
        :param pulumi.Input[_builtins.str] vpc_id: The vpc id where the cluster is
        :param pulumi.Input[_builtins.float] worker_count: The number of workers
        :param pulumi.Input[_builtins.str] worker_pool_name: worker pool name
        :param pulumi.Input[Sequence[pulumi.Input[Union['ContainerVpcWorkerPoolZoneArgs', 'ContainerVpcWorkerPoolZoneArgsDict']]]] zones: Zones info
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ContainerVpcWorkerPoolState.__new__(_ContainerVpcWorkerPoolState)

        __props__.__dict__["autoscale_enabled"] = autoscale_enabled
        __props__.__dict__["cluster"] = cluster
        __props__.__dict__["container_vpc_worker_pool_id"] = container_vpc_worker_pool_id
        __props__.__dict__["crk"] = crk
        __props__.__dict__["entitlement"] = entitlement
        __props__.__dict__["flavor"] = flavor
        __props__.__dict__["host_pool_id"] = host_pool_id
        __props__.__dict__["import_on_create"] = import_on_create
        __props__.__dict__["kms_account_id"] = kms_account_id
        __props__.__dict__["kms_instance_id"] = kms_instance_id
        __props__.__dict__["labels"] = labels
        __props__.__dict__["operating_system"] = operating_system
        __props__.__dict__["orphan_on_delete"] = orphan_on_delete
        __props__.__dict__["resource_controller_url"] = resource_controller_url
        __props__.__dict__["resource_group_id"] = resource_group_id
        __props__.__dict__["secondary_storage"] = secondary_storage
        __props__.__dict__["security_groups"] = security_groups
        __props__.__dict__["taints"] = taints
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["worker_count"] = worker_count
        __props__.__dict__["worker_pool_id"] = worker_pool_id
        __props__.__dict__["worker_pool_name"] = worker_pool_name
        __props__.__dict__["zones"] = zones
        return ContainerVpcWorkerPool(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="autoscaleEnabled")
    def autoscale_enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        Autoscaling is enabled on the workerpool
        """
        return pulumi.get(self, "autoscale_enabled")

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> pulumi.Output[_builtins.str]:
        """
        Cluster name
        """
        return pulumi.get(self, "cluster")

    @_builtins.property
    @pulumi.getter(name="containerVpcWorkerPoolId")
    def container_vpc_worker_pool_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "container_vpc_worker_pool_id")

    @_builtins.property
    @pulumi.getter
    def crk(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Root Key ID for boot volume encryption
        """
        return pulumi.get(self, "crk")

    @_builtins.property
    @pulumi.getter
    def entitlement(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        """
        return pulumi.get(self, "entitlement")

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> pulumi.Output[_builtins.str]:
        """
        cluster node falvor
        """
        return pulumi.get(self, "flavor")

    @_builtins.property
    @pulumi.getter(name="hostPoolId")
    def host_pool_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The ID of the dedicated host pool associated with the worker pool
        """
        return pulumi.get(self, "host_pool_id")

    @_builtins.property
    @pulumi.getter(name="importOnCreate")
    def import_on_create(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Import an existing workerpool from the cluster instead of creating a new
        """
        return pulumi.get(self, "import_on_create")

    @_builtins.property
    @pulumi.getter(name="kmsAccountId")
    def kms_account_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Account ID of kms instance holder - if not provided, defaults to the account in use
        """
        return pulumi.get(self, "kms_account_id")

    @_builtins.property
    @pulumi.getter(name="kmsInstanceId")
    def kms_instance_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Instance ID for boot volume encryption
        """
        return pulumi.get(self, "kms_instance_id")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Labels
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> pulumi.Output[_builtins.str]:
        """
        The operating system of the workers in the worker pool.
        """
        return pulumi.get(self, "operating_system")

    @_builtins.property
    @pulumi.getter(name="orphanOnDelete")
    def orphan_on_delete(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Orphan the workerpool resource instead of deleting it
        """
        return pulumi.get(self, "orphan_on_delete")

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> pulumi.Output[_builtins.str]:
        """
        Resource Controller URL
        """
        return pulumi.get(self, "resource_controller_url")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter(name="secondaryStorage")
    def secondary_storage(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The secondary storage option for the workers in the worker pool.
        """
        return pulumi.get(self, "secondary_storage")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Allow user to set which security groups added to their workers
        """
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter
    def taints(self) -> pulumi.Output[Optional[Sequence['outputs.ContainerVpcWorkerPoolTaint']]]:
        """
        WorkerPool Taints
        """
        return pulumi.get(self, "taints")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.ContainerVpcWorkerPoolTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[_builtins.str]:
        """
        The vpc id where the cluster is
        """
        return pulumi.get(self, "vpc_id")

    @_builtins.property
    @pulumi.getter(name="workerCount")
    def worker_count(self) -> pulumi.Output[_builtins.float]:
        """
        The number of workers
        """
        return pulumi.get(self, "worker_count")

    @_builtins.property
    @pulumi.getter(name="workerPoolId")
    def worker_pool_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "worker_pool_id")

    @_builtins.property
    @pulumi.getter(name="workerPoolName")
    def worker_pool_name(self) -> pulumi.Output[_builtins.str]:
        """
        worker pool name
        """
        return pulumi.get(self, "worker_pool_name")

    @_builtins.property
    @pulumi.getter
    def zones(self) -> pulumi.Output[Sequence['outputs.ContainerVpcWorkerPoolZone']]:
        """
        Zones info
        """
        return pulumi.get(self, "zones")

