# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsSnapshotConsistencyGroupArgs', 'IsSnapshotConsistencyGroup']

@pulumi.input_type
class IsSnapshotConsistencyGroupArgs:
    def __init__(__self__, *,
                 snapshots: pulumi.Input[Sequence[pulumi.Input['IsSnapshotConsistencyGroupSnapshotArgs']]],
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 delete_snapshots_on_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_snapshot_consistency_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a IsSnapshotConsistencyGroup resource.
        :param pulumi.Input[Sequence[pulumi.Input['IsSnapshotConsistencyGroupSnapshotArgs']]] snapshots: The member snapshots that are data-consistent with respect to captured time. (may
               be[deleted](https://cloud.ibm.com/apidocs/vpc#deleted-resources)).
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.bool] delete_snapshots_on_delete: Indicates whether deleting the snapshot consistency group will also delete the snapshots in the group.
        :param pulumi.Input[_builtins.str] name: The name for this snapshot consistency group. The name is unique across all snapshot consistency groups in the region.
        :param pulumi.Input[_builtins.str] resource_group: Resource group Id
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Snapshot Consistency Group tags list
        """
        pulumi.set(__self__, "snapshots", snapshots)
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if delete_snapshots_on_delete is not None:
            pulumi.set(__self__, "delete_snapshots_on_delete", delete_snapshots_on_delete)
        if is_snapshot_consistency_group_id is not None:
            pulumi.set(__self__, "is_snapshot_consistency_group_id", is_snapshot_consistency_group_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def snapshots(self) -> pulumi.Input[Sequence[pulumi.Input['IsSnapshotConsistencyGroupSnapshotArgs']]]:
        """
        The member snapshots that are data-consistent with respect to captured time. (may
        be[deleted](https://cloud.ibm.com/apidocs/vpc#deleted-resources)).
        """
        return pulumi.get(self, "snapshots")

    @snapshots.setter
    def snapshots(self, value: pulumi.Input[Sequence[pulumi.Input['IsSnapshotConsistencyGroupSnapshotArgs']]]):
        pulumi.set(self, "snapshots", value)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter(name="deleteSnapshotsOnDelete")
    def delete_snapshots_on_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether deleting the snapshot consistency group will also delete the snapshots in the group.
        """
        return pulumi.get(self, "delete_snapshots_on_delete")

    @delete_snapshots_on_delete.setter
    def delete_snapshots_on_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_snapshots_on_delete", value)

    @_builtins.property
    @pulumi.getter(name="isSnapshotConsistencyGroupId")
    def is_snapshot_consistency_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_snapshot_consistency_group_id")

    @is_snapshot_consistency_group_id.setter
    def is_snapshot_consistency_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_snapshot_consistency_group_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name for this snapshot consistency group. The name is unique across all snapshot consistency groups in the region.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource group Id
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Snapshot Consistency Group tags list
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _IsSnapshotConsistencyGroupState:
    def __init__(__self__, *,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 backup_policy_plans: Optional[pulumi.Input[Sequence[pulumi.Input['IsSnapshotConsistencyGroupBackupPolicyPlanArgs']]]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_snapshots_on_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 is_snapshot_consistency_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 service_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 snapshot_references: Optional[pulumi.Input[Sequence[pulumi.Input['IsSnapshotConsistencyGroupSnapshotReferenceArgs']]]] = None,
                 snapshots: Optional[pulumi.Input[Sequence[pulumi.Input['IsSnapshotConsistencyGroupSnapshotArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering IsSnapshotConsistencyGroup resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[Sequence[pulumi.Input['IsSnapshotConsistencyGroupBackupPolicyPlanArgs']]] backup_policy_plans: If present, the backup policy plan which created this snapshot consistency group.
        :param pulumi.Input[_builtins.str] created_at: The date and time that this snapshot consistency group was created.
        :param pulumi.Input[_builtins.str] crn: The CRN of this snapshot consistency group.
        :param pulumi.Input[_builtins.bool] delete_snapshots_on_delete: Indicates whether deleting the snapshot consistency group will also delete the snapshots in the group.
        :param pulumi.Input[_builtins.str] href: The URL for this snapshot consistency group.
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of this snapshot consistency group.
        :param pulumi.Input[_builtins.str] name: The name for this snapshot consistency group. The name is unique across all snapshot consistency groups in the region.
        :param pulumi.Input[_builtins.str] resource_group: Resource group Id
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] service_tags: The [service tags](https://cloud.ibm.com/apidocs/tagging#types-of-tags)[`is.instance:`
               prefix](https://cloud.ibm.com/docs/vpc?topic=vpc-snapshots-vpc-faqs) associated with this snapshot consistency group.
        :param pulumi.Input[Sequence[pulumi.Input['IsSnapshotConsistencyGroupSnapshotReferenceArgs']]] snapshot_references: The member snapshots that are data-consistent with respect to captured time. (may
               be[deleted](https://cloud.ibm.com/apidocs/vpc#deleted-resources)).
        :param pulumi.Input[Sequence[pulumi.Input['IsSnapshotConsistencyGroupSnapshotArgs']]] snapshots: The member snapshots that are data-consistent with respect to captured time. (may
               be[deleted](https://cloud.ibm.com/apidocs/vpc#deleted-resources)).
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Snapshot Consistency Group tags list
        """
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if backup_policy_plans is not None:
            pulumi.set(__self__, "backup_policy_plans", backup_policy_plans)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if delete_snapshots_on_delete is not None:
            pulumi.set(__self__, "delete_snapshots_on_delete", delete_snapshots_on_delete)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if is_snapshot_consistency_group_id is not None:
            pulumi.set(__self__, "is_snapshot_consistency_group_id", is_snapshot_consistency_group_id)
        if lifecycle_state is not None:
            pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if service_tags is not None:
            pulumi.set(__self__, "service_tags", service_tags)
        if snapshot_references is not None:
            pulumi.set(__self__, "snapshot_references", snapshot_references)
        if snapshots is not None:
            pulumi.set(__self__, "snapshots", snapshots)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter(name="backupPolicyPlans")
    def backup_policy_plans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsSnapshotConsistencyGroupBackupPolicyPlanArgs']]]]:
        """
        If present, the backup policy plan which created this snapshot consistency group.
        """
        return pulumi.get(self, "backup_policy_plans")

    @backup_policy_plans.setter
    def backup_policy_plans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsSnapshotConsistencyGroupBackupPolicyPlanArgs']]]]):
        pulumi.set(self, "backup_policy_plans", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time that this snapshot consistency group was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN of this snapshot consistency group.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="deleteSnapshotsOnDelete")
    def delete_snapshots_on_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether deleting the snapshot consistency group will also delete the snapshots in the group.
        """
        return pulumi.get(self, "delete_snapshots_on_delete")

    @delete_snapshots_on_delete.setter
    def delete_snapshots_on_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_snapshots_on_delete", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL for this snapshot consistency group.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="isSnapshotConsistencyGroupId")
    def is_snapshot_consistency_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_snapshot_consistency_group_id")

    @is_snapshot_consistency_group_id.setter
    def is_snapshot_consistency_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_snapshot_consistency_group_id", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The lifecycle state of this snapshot consistency group.
        """
        return pulumi.get(self, "lifecycle_state")

    @lifecycle_state.setter
    def lifecycle_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lifecycle_state", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name for this snapshot consistency group. The name is unique across all snapshot consistency groups in the region.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource group Id
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter(name="serviceTags")
    def service_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The [service tags](https://cloud.ibm.com/apidocs/tagging#types-of-tags)[`is.instance:`
        prefix](https://cloud.ibm.com/docs/vpc?topic=vpc-snapshots-vpc-faqs) associated with this snapshot consistency group.
        """
        return pulumi.get(self, "service_tags")

    @service_tags.setter
    def service_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "service_tags", value)

    @_builtins.property
    @pulumi.getter(name="snapshotReferences")
    def snapshot_references(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsSnapshotConsistencyGroupSnapshotReferenceArgs']]]]:
        """
        The member snapshots that are data-consistent with respect to captured time. (may
        be[deleted](https://cloud.ibm.com/apidocs/vpc#deleted-resources)).
        """
        return pulumi.get(self, "snapshot_references")

    @snapshot_references.setter
    def snapshot_references(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsSnapshotConsistencyGroupSnapshotReferenceArgs']]]]):
        pulumi.set(self, "snapshot_references", value)

    @_builtins.property
    @pulumi.getter
    def snapshots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsSnapshotConsistencyGroupSnapshotArgs']]]]:
        """
        The member snapshots that are data-consistent with respect to captured time. (may
        be[deleted](https://cloud.ibm.com/apidocs/vpc#deleted-resources)).
        """
        return pulumi.get(self, "snapshots")

    @snapshots.setter
    def snapshots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsSnapshotConsistencyGroupSnapshotArgs']]]]):
        pulumi.set(self, "snapshots", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Snapshot Consistency Group tags list
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("ibm:index/isSnapshotConsistencyGroup:IsSnapshotConsistencyGroup")
class IsSnapshotConsistencyGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 delete_snapshots_on_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_snapshot_consistency_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 snapshots: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsSnapshotConsistencyGroupSnapshotArgs', 'IsSnapshotConsistencyGroupSnapshotArgsDict']]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Create a IsSnapshotConsistencyGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.bool] delete_snapshots_on_delete: Indicates whether deleting the snapshot consistency group will also delete the snapshots in the group.
        :param pulumi.Input[_builtins.str] name: The name for this snapshot consistency group. The name is unique across all snapshot consistency groups in the region.
        :param pulumi.Input[_builtins.str] resource_group: Resource group Id
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsSnapshotConsistencyGroupSnapshotArgs', 'IsSnapshotConsistencyGroupSnapshotArgsDict']]]] snapshots: The member snapshots that are data-consistent with respect to captured time. (may
               be[deleted](https://cloud.ibm.com/apidocs/vpc#deleted-resources)).
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Snapshot Consistency Group tags list
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsSnapshotConsistencyGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsSnapshotConsistencyGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsSnapshotConsistencyGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsSnapshotConsistencyGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 delete_snapshots_on_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_snapshot_consistency_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 snapshots: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsSnapshotConsistencyGroupSnapshotArgs', 'IsSnapshotConsistencyGroupSnapshotArgsDict']]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsSnapshotConsistencyGroupArgs.__new__(IsSnapshotConsistencyGroupArgs)

            __props__.__dict__["access_tags"] = access_tags
            __props__.__dict__["delete_snapshots_on_delete"] = delete_snapshots_on_delete
            __props__.__dict__["is_snapshot_consistency_group_id"] = is_snapshot_consistency_group_id
            __props__.__dict__["name"] = name
            __props__.__dict__["resource_group"] = resource_group
            if snapshots is None and not opts.urn:
                raise TypeError("Missing required property 'snapshots'")
            __props__.__dict__["snapshots"] = snapshots
            __props__.__dict__["tags"] = tags
            __props__.__dict__["backup_policy_plans"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["lifecycle_state"] = None
            __props__.__dict__["resource_type"] = None
            __props__.__dict__["service_tags"] = None
            __props__.__dict__["snapshot_references"] = None
        super(IsSnapshotConsistencyGroup, __self__).__init__(
            'ibm:index/isSnapshotConsistencyGroup:IsSnapshotConsistencyGroup',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            backup_policy_plans: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsSnapshotConsistencyGroupBackupPolicyPlanArgs', 'IsSnapshotConsistencyGroupBackupPolicyPlanArgsDict']]]]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            delete_snapshots_on_delete: Optional[pulumi.Input[_builtins.bool]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            is_snapshot_consistency_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group: Optional[pulumi.Input[_builtins.str]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            service_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            snapshot_references: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsSnapshotConsistencyGroupSnapshotReferenceArgs', 'IsSnapshotConsistencyGroupSnapshotReferenceArgsDict']]]]] = None,
            snapshots: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsSnapshotConsistencyGroupSnapshotArgs', 'IsSnapshotConsistencyGroupSnapshotArgsDict']]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'IsSnapshotConsistencyGroup':
        """
        Get an existing IsSnapshotConsistencyGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsSnapshotConsistencyGroupBackupPolicyPlanArgs', 'IsSnapshotConsistencyGroupBackupPolicyPlanArgsDict']]]] backup_policy_plans: If present, the backup policy plan which created this snapshot consistency group.
        :param pulumi.Input[_builtins.str] created_at: The date and time that this snapshot consistency group was created.
        :param pulumi.Input[_builtins.str] crn: The CRN of this snapshot consistency group.
        :param pulumi.Input[_builtins.bool] delete_snapshots_on_delete: Indicates whether deleting the snapshot consistency group will also delete the snapshots in the group.
        :param pulumi.Input[_builtins.str] href: The URL for this snapshot consistency group.
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of this snapshot consistency group.
        :param pulumi.Input[_builtins.str] name: The name for this snapshot consistency group. The name is unique across all snapshot consistency groups in the region.
        :param pulumi.Input[_builtins.str] resource_group: Resource group Id
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] service_tags: The [service tags](https://cloud.ibm.com/apidocs/tagging#types-of-tags)[`is.instance:`
               prefix](https://cloud.ibm.com/docs/vpc?topic=vpc-snapshots-vpc-faqs) associated with this snapshot consistency group.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsSnapshotConsistencyGroupSnapshotReferenceArgs', 'IsSnapshotConsistencyGroupSnapshotReferenceArgsDict']]]] snapshot_references: The member snapshots that are data-consistent with respect to captured time. (may
               be[deleted](https://cloud.ibm.com/apidocs/vpc#deleted-resources)).
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsSnapshotConsistencyGroupSnapshotArgs', 'IsSnapshotConsistencyGroupSnapshotArgsDict']]]] snapshots: The member snapshots that are data-consistent with respect to captured time. (may
               be[deleted](https://cloud.ibm.com/apidocs/vpc#deleted-resources)).
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Snapshot Consistency Group tags list
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsSnapshotConsistencyGroupState.__new__(_IsSnapshotConsistencyGroupState)

        __props__.__dict__["access_tags"] = access_tags
        __props__.__dict__["backup_policy_plans"] = backup_policy_plans
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["crn"] = crn
        __props__.__dict__["delete_snapshots_on_delete"] = delete_snapshots_on_delete
        __props__.__dict__["href"] = href
        __props__.__dict__["is_snapshot_consistency_group_id"] = is_snapshot_consistency_group_id
        __props__.__dict__["lifecycle_state"] = lifecycle_state
        __props__.__dict__["name"] = name
        __props__.__dict__["resource_group"] = resource_group
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["service_tags"] = service_tags
        __props__.__dict__["snapshot_references"] = snapshot_references
        __props__.__dict__["snapshots"] = snapshots
        __props__.__dict__["tags"] = tags
        return IsSnapshotConsistencyGroup(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter(name="backupPolicyPlans")
    def backup_policy_plans(self) -> pulumi.Output[Sequence['outputs.IsSnapshotConsistencyGroupBackupPolicyPlan']]:
        """
        If present, the backup policy plan which created this snapshot consistency group.
        """
        return pulumi.get(self, "backup_policy_plans")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time that this snapshot consistency group was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The CRN of this snapshot consistency group.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="deleteSnapshotsOnDelete")
    def delete_snapshots_on_delete(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Indicates whether deleting the snapshot consistency group will also delete the snapshots in the group.
        """
        return pulumi.get(self, "delete_snapshots_on_delete")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        The URL for this snapshot consistency group.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="isSnapshotConsistencyGroupId")
    def is_snapshot_consistency_group_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_snapshot_consistency_group_id")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> pulumi.Output[_builtins.str]:
        """
        The lifecycle state of this snapshot consistency group.
        """
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name for this snapshot consistency group. The name is unique across all snapshot consistency groups in the region.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Output[_builtins.str]:
        """
        Resource group Id
        """
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="serviceTags")
    def service_tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The [service tags](https://cloud.ibm.com/apidocs/tagging#types-of-tags)[`is.instance:`
        prefix](https://cloud.ibm.com/docs/vpc?topic=vpc-snapshots-vpc-faqs) associated with this snapshot consistency group.
        """
        return pulumi.get(self, "service_tags")

    @_builtins.property
    @pulumi.getter(name="snapshotReferences")
    def snapshot_references(self) -> pulumi.Output[Sequence['outputs.IsSnapshotConsistencyGroupSnapshotReference']]:
        """
        The member snapshots that are data-consistent with respect to captured time. (may
        be[deleted](https://cloud.ibm.com/apidocs/vpc#deleted-resources)).
        """
        return pulumi.get(self, "snapshot_references")

    @_builtins.property
    @pulumi.getter
    def snapshots(self) -> pulumi.Output[Sequence['outputs.IsSnapshotConsistencyGroupSnapshot']]:
        """
        The member snapshots that are data-consistent with respect to captured time. (may
        be[deleted](https://cloud.ibm.com/apidocs/vpc#deleted-resources)).
        """
        return pulumi.get(self, "snapshots")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Snapshot Consistency Group tags list
        """
        return pulumi.get(self, "tags")

