# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsClusterNetworkInterfacesResult',
    'AwaitableGetIsClusterNetworkInterfacesResult',
    'get_is_cluster_network_interfaces',
    'get_is_cluster_network_interfaces_output',
]

@pulumi.output_type
class GetIsClusterNetworkInterfacesResult:
    """
    A collection of values returned by getIsClusterNetworkInterfaces.
    """
    def __init__(__self__, cluster_network_id=None, id=None, interfaces=None, name=None, sort=None):
        if cluster_network_id and not isinstance(cluster_network_id, str):
            raise TypeError("Expected argument 'cluster_network_id' to be a str")
        pulumi.set(__self__, "cluster_network_id", cluster_network_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interfaces and not isinstance(interfaces, list):
            raise TypeError("Expected argument 'interfaces' to be a list")
        pulumi.set(__self__, "interfaces", interfaces)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if sort and not isinstance(sort, str):
            raise TypeError("Expected argument 'sort' to be a str")
        pulumi.set(__self__, "sort", sort)

    @_builtins.property
    @pulumi.getter(name="clusterNetworkId")
    def cluster_network_id(self) -> _builtins.str:
        return pulumi.get(self, "cluster_network_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def interfaces(self) -> Sequence['outputs.GetIsClusterNetworkInterfacesInterfaceResult']:
        return pulumi.get(self, "interfaces")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def sort(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort")


class AwaitableGetIsClusterNetworkInterfacesResult(GetIsClusterNetworkInterfacesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsClusterNetworkInterfacesResult(
            cluster_network_id=self.cluster_network_id,
            id=self.id,
            interfaces=self.interfaces,
            name=self.name,
            sort=self.sort)


def get_is_cluster_network_interfaces(cluster_network_id: Optional[_builtins.str] = None,
                                      id: Optional[_builtins.str] = None,
                                      name: Optional[_builtins.str] = None,
                                      sort: Optional[_builtins.str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsClusterNetworkInterfacesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clusterNetworkId'] = cluster_network_id
    __args__['id'] = id
    __args__['name'] = name
    __args__['sort'] = sort
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsClusterNetworkInterfaces:getIsClusterNetworkInterfaces', __args__, opts=opts, typ=GetIsClusterNetworkInterfacesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsClusterNetworkInterfacesResult(
        cluster_network_id=pulumi.get(__ret__, 'cluster_network_id'),
        id=pulumi.get(__ret__, 'id'),
        interfaces=pulumi.get(__ret__, 'interfaces'),
        name=pulumi.get(__ret__, 'name'),
        sort=pulumi.get(__ret__, 'sort'))
def get_is_cluster_network_interfaces_output(cluster_network_id: Optional[pulumi.Input[_builtins.str]] = None,
                                             id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             sort: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsClusterNetworkInterfacesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clusterNetworkId'] = cluster_network_id
    __args__['id'] = id
    __args__['name'] = name
    __args__['sort'] = sort
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsClusterNetworkInterfaces:getIsClusterNetworkInterfaces', __args__, opts=opts, typ=GetIsClusterNetworkInterfacesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsClusterNetworkInterfacesResult(
        cluster_network_id=pulumi.get(__response__, 'cluster_network_id'),
        id=pulumi.get(__response__, 'id'),
        interfaces=pulumi.get(__response__, 'interfaces'),
        name=pulumi.get(__response__, 'name'),
        sort=pulumi.get(__response__, 'sort')))
