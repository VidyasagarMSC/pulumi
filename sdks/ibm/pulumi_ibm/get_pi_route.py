# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetPiRouteResult',
    'AwaitableGetPiRouteResult',
    'get_pi_route',
    'get_pi_route_output',
]

@pulumi.output_type
class GetPiRouteResult:
    """
    A collection of values returned by getPiRoute.
    """
    def __init__(__self__, action=None, advertise=None, crn=None, destination=None, destination_type=None, enabled=None, id=None, name=None, next_hop=None, next_hop_type=None, pi_cloud_instance_id=None, pi_route_id=None, state=None, user_tags=None):
        if action and not isinstance(action, str):
            raise TypeError("Expected argument 'action' to be a str")
        pulumi.set(__self__, "action", action)
        if advertise and not isinstance(advertise, str):
            raise TypeError("Expected argument 'advertise' to be a str")
        pulumi.set(__self__, "advertise", advertise)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if destination and not isinstance(destination, str):
            raise TypeError("Expected argument 'destination' to be a str")
        pulumi.set(__self__, "destination", destination)
        if destination_type and not isinstance(destination_type, str):
            raise TypeError("Expected argument 'destination_type' to be a str")
        pulumi.set(__self__, "destination_type", destination_type)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if next_hop and not isinstance(next_hop, str):
            raise TypeError("Expected argument 'next_hop' to be a str")
        pulumi.set(__self__, "next_hop", next_hop)
        if next_hop_type and not isinstance(next_hop_type, str):
            raise TypeError("Expected argument 'next_hop_type' to be a str")
        pulumi.set(__self__, "next_hop_type", next_hop_type)
        if pi_cloud_instance_id and not isinstance(pi_cloud_instance_id, str):
            raise TypeError("Expected argument 'pi_cloud_instance_id' to be a str")
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_route_id and not isinstance(pi_route_id, str):
            raise TypeError("Expected argument 'pi_route_id' to be a str")
        pulumi.set(__self__, "pi_route_id", pi_route_id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if user_tags and not isinstance(user_tags, list):
            raise TypeError("Expected argument 'user_tags' to be a list")
        pulumi.set(__self__, "user_tags", user_tags)

    @_builtins.property
    @pulumi.getter
    def action(self) -> _builtins.str:
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter
    def advertise(self) -> _builtins.str:
        return pulumi.get(self, "advertise")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def destination(self) -> _builtins.str:
        return pulumi.get(self, "destination")

    @_builtins.property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> _builtins.str:
        return pulumi.get(self, "destination_type")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> _builtins.str:
        return pulumi.get(self, "next_hop")

    @_builtins.property
    @pulumi.getter(name="nextHopType")
    def next_hop_type(self) -> _builtins.str:
        return pulumi.get(self, "next_hop_type")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piRouteId")
    def pi_route_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_route_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="userTags")
    def user_tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "user_tags")


class AwaitableGetPiRouteResult(GetPiRouteResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPiRouteResult(
            action=self.action,
            advertise=self.advertise,
            crn=self.crn,
            destination=self.destination,
            destination_type=self.destination_type,
            enabled=self.enabled,
            id=self.id,
            name=self.name,
            next_hop=self.next_hop,
            next_hop_type=self.next_hop_type,
            pi_cloud_instance_id=self.pi_cloud_instance_id,
            pi_route_id=self.pi_route_id,
            state=self.state,
            user_tags=self.user_tags)


def get_pi_route(id: Optional[_builtins.str] = None,
                 pi_cloud_instance_id: Optional[_builtins.str] = None,
                 pi_route_id: Optional[_builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPiRouteResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piRouteId'] = pi_route_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getPiRoute:getPiRoute', __args__, opts=opts, typ=GetPiRouteResult, package_ref=_utilities.get_package()).value

    return AwaitableGetPiRouteResult(
        action=pulumi.get(__ret__, 'action'),
        advertise=pulumi.get(__ret__, 'advertise'),
        crn=pulumi.get(__ret__, 'crn'),
        destination=pulumi.get(__ret__, 'destination'),
        destination_type=pulumi.get(__ret__, 'destination_type'),
        enabled=pulumi.get(__ret__, 'enabled'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        next_hop=pulumi.get(__ret__, 'next_hop'),
        next_hop_type=pulumi.get(__ret__, 'next_hop_type'),
        pi_cloud_instance_id=pulumi.get(__ret__, 'pi_cloud_instance_id'),
        pi_route_id=pulumi.get(__ret__, 'pi_route_id'),
        state=pulumi.get(__ret__, 'state'),
        user_tags=pulumi.get(__ret__, 'user_tags'))
def get_pi_route_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                        pi_route_id: Optional[pulumi.Input[_builtins.str]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPiRouteResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piRouteId'] = pi_route_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getPiRoute:getPiRoute', __args__, opts=opts, typ=GetPiRouteResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetPiRouteResult(
        action=pulumi.get(__response__, 'action'),
        advertise=pulumi.get(__response__, 'advertise'),
        crn=pulumi.get(__response__, 'crn'),
        destination=pulumi.get(__response__, 'destination'),
        destination_type=pulumi.get(__response__, 'destination_type'),
        enabled=pulumi.get(__response__, 'enabled'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        next_hop=pulumi.get(__response__, 'next_hop'),
        next_hop_type=pulumi.get(__response__, 'next_hop_type'),
        pi_cloud_instance_id=pulumi.get(__response__, 'pi_cloud_instance_id'),
        pi_route_id=pulumi.get(__response__, 'pi_route_id'),
        state=pulumi.get(__response__, 'state'),
        user_tags=pulumi.get(__response__, 'user_tags')))
