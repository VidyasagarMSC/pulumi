# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetPiStoragePoolCapacityResult',
    'AwaitableGetPiStoragePoolCapacityResult',
    'get_pi_storage_pool_capacity',
    'get_pi_storage_pool_capacity_output',
]

@pulumi.output_type
class GetPiStoragePoolCapacityResult:
    """
    A collection of values returned by getPiStoragePoolCapacity.
    """
    def __init__(__self__, id=None, max_allocation_size=None, pi_cloud_instance_id=None, pi_storage_pool=None, replication_enabled=None, storage_type=None, total_capacity=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if max_allocation_size and not isinstance(max_allocation_size, float):
            raise TypeError("Expected argument 'max_allocation_size' to be a float")
        pulumi.set(__self__, "max_allocation_size", max_allocation_size)
        if pi_cloud_instance_id and not isinstance(pi_cloud_instance_id, str):
            raise TypeError("Expected argument 'pi_cloud_instance_id' to be a str")
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_storage_pool and not isinstance(pi_storage_pool, str):
            raise TypeError("Expected argument 'pi_storage_pool' to be a str")
        pulumi.set(__self__, "pi_storage_pool", pi_storage_pool)
        if replication_enabled and not isinstance(replication_enabled, bool):
            raise TypeError("Expected argument 'replication_enabled' to be a bool")
        pulumi.set(__self__, "replication_enabled", replication_enabled)
        if storage_type and not isinstance(storage_type, str):
            raise TypeError("Expected argument 'storage_type' to be a str")
        pulumi.set(__self__, "storage_type", storage_type)
        if total_capacity and not isinstance(total_capacity, float):
            raise TypeError("Expected argument 'total_capacity' to be a float")
        pulumi.set(__self__, "total_capacity", total_capacity)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="maxAllocationSize")
    def max_allocation_size(self) -> _builtins.float:
        return pulumi.get(self, "max_allocation_size")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piStoragePool")
    def pi_storage_pool(self) -> _builtins.str:
        return pulumi.get(self, "pi_storage_pool")

    @_builtins.property
    @pulumi.getter(name="replicationEnabled")
    def replication_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "replication_enabled")

    @_builtins.property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> _builtins.str:
        return pulumi.get(self, "storage_type")

    @_builtins.property
    @pulumi.getter(name="totalCapacity")
    def total_capacity(self) -> _builtins.float:
        return pulumi.get(self, "total_capacity")


class AwaitableGetPiStoragePoolCapacityResult(GetPiStoragePoolCapacityResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPiStoragePoolCapacityResult(
            id=self.id,
            max_allocation_size=self.max_allocation_size,
            pi_cloud_instance_id=self.pi_cloud_instance_id,
            pi_storage_pool=self.pi_storage_pool,
            replication_enabled=self.replication_enabled,
            storage_type=self.storage_type,
            total_capacity=self.total_capacity)


def get_pi_storage_pool_capacity(id: Optional[_builtins.str] = None,
                                 pi_cloud_instance_id: Optional[_builtins.str] = None,
                                 pi_storage_pool: Optional[_builtins.str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPiStoragePoolCapacityResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piStoragePool'] = pi_storage_pool
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getPiStoragePoolCapacity:getPiStoragePoolCapacity', __args__, opts=opts, typ=GetPiStoragePoolCapacityResult, package_ref=_utilities.get_package()).value

    return AwaitableGetPiStoragePoolCapacityResult(
        id=pulumi.get(__ret__, 'id'),
        max_allocation_size=pulumi.get(__ret__, 'max_allocation_size'),
        pi_cloud_instance_id=pulumi.get(__ret__, 'pi_cloud_instance_id'),
        pi_storage_pool=pulumi.get(__ret__, 'pi_storage_pool'),
        replication_enabled=pulumi.get(__ret__, 'replication_enabled'),
        storage_type=pulumi.get(__ret__, 'storage_type'),
        total_capacity=pulumi.get(__ret__, 'total_capacity'))
def get_pi_storage_pool_capacity_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                        pi_storage_pool: Optional[pulumi.Input[_builtins.str]] = None,
                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPiStoragePoolCapacityResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piStoragePool'] = pi_storage_pool
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getPiStoragePoolCapacity:getPiStoragePoolCapacity', __args__, opts=opts, typ=GetPiStoragePoolCapacityResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetPiStoragePoolCapacityResult(
        id=pulumi.get(__response__, 'id'),
        max_allocation_size=pulumi.get(__response__, 'max_allocation_size'),
        pi_cloud_instance_id=pulumi.get(__response__, 'pi_cloud_instance_id'),
        pi_storage_pool=pulumi.get(__response__, 'pi_storage_pool'),
        replication_enabled=pulumi.get(__response__, 'replication_enabled'),
        storage_type=pulumi.get(__response__, 'storage_type'),
        total_capacity=pulumi.get(__response__, 'total_capacity')))
