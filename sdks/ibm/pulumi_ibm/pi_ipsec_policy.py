# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PiIpsecPolicyArgs', 'PiIpsecPolicy']

@pulumi.input_type
class PiIpsecPolicyArgs:
    def __init__(__self__, *,
                 pi_cloud_instance_id: pulumi.Input[_builtins.str],
                 pi_policy_dh_group: pulumi.Input[_builtins.float],
                 pi_policy_encryption: pulumi.Input[_builtins.str],
                 pi_policy_key_lifetime: pulumi.Input[_builtins.float],
                 pi_policy_name: pulumi.Input[_builtins.str],
                 pi_policy_pfs: pulumi.Input[_builtins.bool],
                 pi_ipsec_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_policy_authentication: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['PiIpsecPolicyTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a PiIpsecPolicy resource.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: PI cloud instance ID
        :param pulumi.Input[_builtins.float] pi_policy_dh_group: DH group of the IPSec Policy
        :param pulumi.Input[_builtins.str] pi_policy_encryption: Encryption of the IPSec Policy
        :param pulumi.Input[_builtins.float] pi_policy_key_lifetime: Policy key lifetime
        :param pulumi.Input[_builtins.str] pi_policy_name: Name of the IPSec Policy
        :param pulumi.Input[_builtins.bool] pi_policy_pfs: Perfect Forward Secrecy
        :param pulumi.Input[_builtins.str] pi_policy_authentication: Authentication for the IPSec Policy
        """
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        pulumi.set(__self__, "pi_policy_dh_group", pi_policy_dh_group)
        pulumi.set(__self__, "pi_policy_encryption", pi_policy_encryption)
        pulumi.set(__self__, "pi_policy_key_lifetime", pi_policy_key_lifetime)
        pulumi.set(__self__, "pi_policy_name", pi_policy_name)
        pulumi.set(__self__, "pi_policy_pfs", pi_policy_pfs)
        if pi_ipsec_policy_id is not None:
            pulumi.set(__self__, "pi_ipsec_policy_id", pi_ipsec_policy_id)
        if pi_policy_authentication is not None:
            pulumi.set(__self__, "pi_policy_authentication", pi_policy_authentication)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        PI cloud instance ID
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piPolicyDhGroup")
    def pi_policy_dh_group(self) -> pulumi.Input[_builtins.float]:
        """
        DH group of the IPSec Policy
        """
        return pulumi.get(self, "pi_policy_dh_group")

    @pi_policy_dh_group.setter
    def pi_policy_dh_group(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "pi_policy_dh_group", value)

    @_builtins.property
    @pulumi.getter(name="piPolicyEncryption")
    def pi_policy_encryption(self) -> pulumi.Input[_builtins.str]:
        """
        Encryption of the IPSec Policy
        """
        return pulumi.get(self, "pi_policy_encryption")

    @pi_policy_encryption.setter
    def pi_policy_encryption(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_policy_encryption", value)

    @_builtins.property
    @pulumi.getter(name="piPolicyKeyLifetime")
    def pi_policy_key_lifetime(self) -> pulumi.Input[_builtins.float]:
        """
        Policy key lifetime
        """
        return pulumi.get(self, "pi_policy_key_lifetime")

    @pi_policy_key_lifetime.setter
    def pi_policy_key_lifetime(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "pi_policy_key_lifetime", value)

    @_builtins.property
    @pulumi.getter(name="piPolicyName")
    def pi_policy_name(self) -> pulumi.Input[_builtins.str]:
        """
        Name of the IPSec Policy
        """
        return pulumi.get(self, "pi_policy_name")

    @pi_policy_name.setter
    def pi_policy_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_policy_name", value)

    @_builtins.property
    @pulumi.getter(name="piPolicyPfs")
    def pi_policy_pfs(self) -> pulumi.Input[_builtins.bool]:
        """
        Perfect Forward Secrecy
        """
        return pulumi.get(self, "pi_policy_pfs")

    @pi_policy_pfs.setter
    def pi_policy_pfs(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "pi_policy_pfs", value)

    @_builtins.property
    @pulumi.getter(name="piIpsecPolicyId")
    def pi_ipsec_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_ipsec_policy_id")

    @pi_ipsec_policy_id.setter
    def pi_ipsec_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_ipsec_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="piPolicyAuthentication")
    def pi_policy_authentication(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Authentication for the IPSec Policy
        """
        return pulumi.get(self, "pi_policy_authentication")

    @pi_policy_authentication.setter
    def pi_policy_authentication(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_policy_authentication", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiIpsecPolicyTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiIpsecPolicyTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _PiIpsecPolicyState:
    def __init__(__self__, *,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_ipsec_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_policy_authentication: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_policy_dh_group: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_policy_encryption: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_policy_key_lifetime: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_policy_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_policy_pfs: Optional[pulumi.Input[_builtins.bool]] = None,
                 policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['PiIpsecPolicyTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering PiIpsecPolicy resources.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: PI cloud instance ID
        :param pulumi.Input[_builtins.str] pi_policy_authentication: Authentication for the IPSec Policy
        :param pulumi.Input[_builtins.float] pi_policy_dh_group: DH group of the IPSec Policy
        :param pulumi.Input[_builtins.str] pi_policy_encryption: Encryption of the IPSec Policy
        :param pulumi.Input[_builtins.float] pi_policy_key_lifetime: Policy key lifetime
        :param pulumi.Input[_builtins.str] pi_policy_name: Name of the IPSec Policy
        :param pulumi.Input[_builtins.bool] pi_policy_pfs: Perfect Forward Secrecy
        :param pulumi.Input[_builtins.str] policy_id: IPSec policy ID
        """
        if pi_cloud_instance_id is not None:
            pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_ipsec_policy_id is not None:
            pulumi.set(__self__, "pi_ipsec_policy_id", pi_ipsec_policy_id)
        if pi_policy_authentication is not None:
            pulumi.set(__self__, "pi_policy_authentication", pi_policy_authentication)
        if pi_policy_dh_group is not None:
            pulumi.set(__self__, "pi_policy_dh_group", pi_policy_dh_group)
        if pi_policy_encryption is not None:
            pulumi.set(__self__, "pi_policy_encryption", pi_policy_encryption)
        if pi_policy_key_lifetime is not None:
            pulumi.set(__self__, "pi_policy_key_lifetime", pi_policy_key_lifetime)
        if pi_policy_name is not None:
            pulumi.set(__self__, "pi_policy_name", pi_policy_name)
        if pi_policy_pfs is not None:
            pulumi.set(__self__, "pi_policy_pfs", pi_policy_pfs)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        PI cloud instance ID
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piIpsecPolicyId")
    def pi_ipsec_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_ipsec_policy_id")

    @pi_ipsec_policy_id.setter
    def pi_ipsec_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_ipsec_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="piPolicyAuthentication")
    def pi_policy_authentication(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Authentication for the IPSec Policy
        """
        return pulumi.get(self, "pi_policy_authentication")

    @pi_policy_authentication.setter
    def pi_policy_authentication(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_policy_authentication", value)

    @_builtins.property
    @pulumi.getter(name="piPolicyDhGroup")
    def pi_policy_dh_group(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        DH group of the IPSec Policy
        """
        return pulumi.get(self, "pi_policy_dh_group")

    @pi_policy_dh_group.setter
    def pi_policy_dh_group(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "pi_policy_dh_group", value)

    @_builtins.property
    @pulumi.getter(name="piPolicyEncryption")
    def pi_policy_encryption(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Encryption of the IPSec Policy
        """
        return pulumi.get(self, "pi_policy_encryption")

    @pi_policy_encryption.setter
    def pi_policy_encryption(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_policy_encryption", value)

    @_builtins.property
    @pulumi.getter(name="piPolicyKeyLifetime")
    def pi_policy_key_lifetime(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Policy key lifetime
        """
        return pulumi.get(self, "pi_policy_key_lifetime")

    @pi_policy_key_lifetime.setter
    def pi_policy_key_lifetime(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "pi_policy_key_lifetime", value)

    @_builtins.property
    @pulumi.getter(name="piPolicyName")
    def pi_policy_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the IPSec Policy
        """
        return pulumi.get(self, "pi_policy_name")

    @pi_policy_name.setter
    def pi_policy_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_policy_name", value)

    @_builtins.property
    @pulumi.getter(name="piPolicyPfs")
    def pi_policy_pfs(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Perfect Forward Secrecy
        """
        return pulumi.get(self, "pi_policy_pfs")

    @pi_policy_pfs.setter
    def pi_policy_pfs(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pi_policy_pfs", value)

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPSec policy ID
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiIpsecPolicyTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiIpsecPolicyTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/piIpsecPolicy:PiIpsecPolicy")
class PiIpsecPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_ipsec_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_policy_authentication: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_policy_dh_group: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_policy_encryption: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_policy_key_lifetime: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_policy_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_policy_pfs: Optional[pulumi.Input[_builtins.bool]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiIpsecPolicyTimeoutsArgs', 'PiIpsecPolicyTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a PiIpsecPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: PI cloud instance ID
        :param pulumi.Input[_builtins.str] pi_policy_authentication: Authentication for the IPSec Policy
        :param pulumi.Input[_builtins.float] pi_policy_dh_group: DH group of the IPSec Policy
        :param pulumi.Input[_builtins.str] pi_policy_encryption: Encryption of the IPSec Policy
        :param pulumi.Input[_builtins.float] pi_policy_key_lifetime: Policy key lifetime
        :param pulumi.Input[_builtins.str] pi_policy_name: Name of the IPSec Policy
        :param pulumi.Input[_builtins.bool] pi_policy_pfs: Perfect Forward Secrecy
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PiIpsecPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PiIpsecPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PiIpsecPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PiIpsecPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_ipsec_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_policy_authentication: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_policy_dh_group: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_policy_encryption: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_policy_key_lifetime: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_policy_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_policy_pfs: Optional[pulumi.Input[_builtins.bool]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiIpsecPolicyTimeoutsArgs', 'PiIpsecPolicyTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PiIpsecPolicyArgs.__new__(PiIpsecPolicyArgs)

            if pi_cloud_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'pi_cloud_instance_id'")
            __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
            __props__.__dict__["pi_ipsec_policy_id"] = pi_ipsec_policy_id
            __props__.__dict__["pi_policy_authentication"] = pi_policy_authentication
            if pi_policy_dh_group is None and not opts.urn:
                raise TypeError("Missing required property 'pi_policy_dh_group'")
            __props__.__dict__["pi_policy_dh_group"] = pi_policy_dh_group
            if pi_policy_encryption is None and not opts.urn:
                raise TypeError("Missing required property 'pi_policy_encryption'")
            __props__.__dict__["pi_policy_encryption"] = pi_policy_encryption
            if pi_policy_key_lifetime is None and not opts.urn:
                raise TypeError("Missing required property 'pi_policy_key_lifetime'")
            __props__.__dict__["pi_policy_key_lifetime"] = pi_policy_key_lifetime
            if pi_policy_name is None and not opts.urn:
                raise TypeError("Missing required property 'pi_policy_name'")
            __props__.__dict__["pi_policy_name"] = pi_policy_name
            if pi_policy_pfs is None and not opts.urn:
                raise TypeError("Missing required property 'pi_policy_pfs'")
            __props__.__dict__["pi_policy_pfs"] = pi_policy_pfs
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["policy_id"] = None
        super(PiIpsecPolicy, __self__).__init__(
            'ibm:index/piIpsecPolicy:PiIpsecPolicy',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_ipsec_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_policy_authentication: Optional[pulumi.Input[_builtins.str]] = None,
            pi_policy_dh_group: Optional[pulumi.Input[_builtins.float]] = None,
            pi_policy_encryption: Optional[pulumi.Input[_builtins.str]] = None,
            pi_policy_key_lifetime: Optional[pulumi.Input[_builtins.float]] = None,
            pi_policy_name: Optional[pulumi.Input[_builtins.str]] = None,
            pi_policy_pfs: Optional[pulumi.Input[_builtins.bool]] = None,
            policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['PiIpsecPolicyTimeoutsArgs', 'PiIpsecPolicyTimeoutsArgsDict']]] = None) -> 'PiIpsecPolicy':
        """
        Get an existing PiIpsecPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: PI cloud instance ID
        :param pulumi.Input[_builtins.str] pi_policy_authentication: Authentication for the IPSec Policy
        :param pulumi.Input[_builtins.float] pi_policy_dh_group: DH group of the IPSec Policy
        :param pulumi.Input[_builtins.str] pi_policy_encryption: Encryption of the IPSec Policy
        :param pulumi.Input[_builtins.float] pi_policy_key_lifetime: Policy key lifetime
        :param pulumi.Input[_builtins.str] pi_policy_name: Name of the IPSec Policy
        :param pulumi.Input[_builtins.bool] pi_policy_pfs: Perfect Forward Secrecy
        :param pulumi.Input[_builtins.str] policy_id: IPSec policy ID
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PiIpsecPolicyState.__new__(_PiIpsecPolicyState)

        __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
        __props__.__dict__["pi_ipsec_policy_id"] = pi_ipsec_policy_id
        __props__.__dict__["pi_policy_authentication"] = pi_policy_authentication
        __props__.__dict__["pi_policy_dh_group"] = pi_policy_dh_group
        __props__.__dict__["pi_policy_encryption"] = pi_policy_encryption
        __props__.__dict__["pi_policy_key_lifetime"] = pi_policy_key_lifetime
        __props__.__dict__["pi_policy_name"] = pi_policy_name
        __props__.__dict__["pi_policy_pfs"] = pi_policy_pfs
        __props__.__dict__["policy_id"] = policy_id
        __props__.__dict__["timeouts"] = timeouts
        return PiIpsecPolicy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        PI cloud instance ID
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piIpsecPolicyId")
    def pi_ipsec_policy_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "pi_ipsec_policy_id")

    @_builtins.property
    @pulumi.getter(name="piPolicyAuthentication")
    def pi_policy_authentication(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Authentication for the IPSec Policy
        """
        return pulumi.get(self, "pi_policy_authentication")

    @_builtins.property
    @pulumi.getter(name="piPolicyDhGroup")
    def pi_policy_dh_group(self) -> pulumi.Output[_builtins.float]:
        """
        DH group of the IPSec Policy
        """
        return pulumi.get(self, "pi_policy_dh_group")

    @_builtins.property
    @pulumi.getter(name="piPolicyEncryption")
    def pi_policy_encryption(self) -> pulumi.Output[_builtins.str]:
        """
        Encryption of the IPSec Policy
        """
        return pulumi.get(self, "pi_policy_encryption")

    @_builtins.property
    @pulumi.getter(name="piPolicyKeyLifetime")
    def pi_policy_key_lifetime(self) -> pulumi.Output[_builtins.float]:
        """
        Policy key lifetime
        """
        return pulumi.get(self, "pi_policy_key_lifetime")

    @_builtins.property
    @pulumi.getter(name="piPolicyName")
    def pi_policy_name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the IPSec Policy
        """
        return pulumi.get(self, "pi_policy_name")

    @_builtins.property
    @pulumi.getter(name="piPolicyPfs")
    def pi_policy_pfs(self) -> pulumi.Output[_builtins.bool]:
        """
        Perfect Forward Secrecy
        """
        return pulumi.get(self, "pi_policy_pfs")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Output[_builtins.str]:
        """
        IPSec policy ID
        """
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.PiIpsecPolicyTimeouts']]:
        return pulumi.get(self, "timeouts")

