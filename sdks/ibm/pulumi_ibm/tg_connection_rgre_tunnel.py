# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TgConnectionRgreTunnelArgs', 'TgConnectionRgreTunnel']

@pulumi.input_type
class TgConnectionRgreTunnelArgs:
    def __init__(__self__, *,
                 connection_id: pulumi.Input[_builtins.str],
                 gateway: pulumi.Input[_builtins.str],
                 local_gateway_ip: pulumi.Input[_builtins.str],
                 local_tunnel_ip: pulumi.Input[_builtins.str],
                 remote_gateway_ip: pulumi.Input[_builtins.str],
                 remote_tunnel_ip: pulumi.Input[_builtins.str],
                 zone: pulumi.Input[_builtins.str],
                 base_network_type: Optional[pulumi.Input[_builtins.str]] = None,
                 local_bgp_asn: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_bgp_asn: Optional[pulumi.Input[_builtins.float]] = None,
                 tg_connection_rgre_tunnel_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['TgConnectionRgreTunnelTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a TgConnectionRgreTunnel resource.
        :param pulumi.Input[_builtins.str] connection_id: The Transit Gateway Connection identifier
        :param pulumi.Input[_builtins.str] gateway: The Transit Gateway identifier
        :param pulumi.Input[_builtins.str] local_gateway_ip: The local gateway IP address.
        :param pulumi.Input[_builtins.str] local_tunnel_ip: The local tunnel IP address.
        :param pulumi.Input[_builtins.str] remote_gateway_ip: The remote gateway IP address.
        :param pulumi.Input[_builtins.str] remote_tunnel_ip: The remote tunnel IP address.
        :param pulumi.Input[_builtins.str] zone: Location of GRE tunnel.
        :param pulumi.Input[_builtins.str] base_network_type: The type of the base network for the RGRE. It should be i.e classic or VPC
        :param pulumi.Input[_builtins.float] local_bgp_asn: The local network BGP ASN.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this tunnel connection.
        :param pulumi.Input[_builtins.str] network_account_id: The ID of the account which owns the network that is being connected. Generally only used if the network is in a
               different account than the gateway. This field is required for type 'unbound_gre_tunnel' when the
               associated_network_type is 'classic' and the GRE tunnel is in a different account than the gateway.
        :param pulumi.Input[_builtins.str] network_id: The ID of the network being connected via this connection. This field is required for some types, such as 'vpc' or
               'directlink' or 'power_virtual_server'. The value of this is the CRN of the VPC or direct link or power_virtual_server
               gateway to be connected. This field is required to be unspecified for network type 'classic', 'gre_tunnel', and
               'unbound_gre_tunnel'.
        :param pulumi.Input[_builtins.float] remote_bgp_asn: The remote network BGP ASN.
        """
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "local_gateway_ip", local_gateway_ip)
        pulumi.set(__self__, "local_tunnel_ip", local_tunnel_ip)
        pulumi.set(__self__, "remote_gateway_ip", remote_gateway_ip)
        pulumi.set(__self__, "remote_tunnel_ip", remote_tunnel_ip)
        pulumi.set(__self__, "zone", zone)
        if base_network_type is not None:
            pulumi.set(__self__, "base_network_type", base_network_type)
        if local_bgp_asn is not None:
            pulumi.set(__self__, "local_bgp_asn", local_bgp_asn)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_account_id is not None:
            pulumi.set(__self__, "network_account_id", network_account_id)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if remote_bgp_asn is not None:
            pulumi.set(__self__, "remote_bgp_asn", remote_bgp_asn)
        if tg_connection_rgre_tunnel_id is not None:
            pulumi.set(__self__, "tg_connection_rgre_tunnel_id", tg_connection_rgre_tunnel_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> pulumi.Input[_builtins.str]:
        """
        The Transit Gateway Connection identifier
        """
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "connection_id", value)

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> pulumi.Input[_builtins.str]:
        """
        The Transit Gateway identifier
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "gateway", value)

    @_builtins.property
    @pulumi.getter(name="localGatewayIp")
    def local_gateway_ip(self) -> pulumi.Input[_builtins.str]:
        """
        The local gateway IP address.
        """
        return pulumi.get(self, "local_gateway_ip")

    @local_gateway_ip.setter
    def local_gateway_ip(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "local_gateway_ip", value)

    @_builtins.property
    @pulumi.getter(name="localTunnelIp")
    def local_tunnel_ip(self) -> pulumi.Input[_builtins.str]:
        """
        The local tunnel IP address.
        """
        return pulumi.get(self, "local_tunnel_ip")

    @local_tunnel_ip.setter
    def local_tunnel_ip(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "local_tunnel_ip", value)

    @_builtins.property
    @pulumi.getter(name="remoteGatewayIp")
    def remote_gateway_ip(self) -> pulumi.Input[_builtins.str]:
        """
        The remote gateway IP address.
        """
        return pulumi.get(self, "remote_gateway_ip")

    @remote_gateway_ip.setter
    def remote_gateway_ip(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "remote_gateway_ip", value)

    @_builtins.property
    @pulumi.getter(name="remoteTunnelIp")
    def remote_tunnel_ip(self) -> pulumi.Input[_builtins.str]:
        """
        The remote tunnel IP address.
        """
        return pulumi.get(self, "remote_tunnel_ip")

    @remote_tunnel_ip.setter
    def remote_tunnel_ip(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "remote_tunnel_ip", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> pulumi.Input[_builtins.str]:
        """
        Location of GRE tunnel.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "zone", value)

    @_builtins.property
    @pulumi.getter(name="baseNetworkType")
    def base_network_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the base network for the RGRE. It should be i.e classic or VPC
        """
        return pulumi.get(self, "base_network_type")

    @base_network_type.setter
    def base_network_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "base_network_type", value)

    @_builtins.property
    @pulumi.getter(name="localBgpAsn")
    def local_bgp_asn(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The local network BGP ASN.
        """
        return pulumi.get(self, "local_bgp_asn")

    @local_bgp_asn.setter
    def local_bgp_asn(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "local_bgp_asn", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user-defined name for this tunnel connection.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="networkAccountId")
    def network_account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the account which owns the network that is being connected. Generally only used if the network is in a
        different account than the gateway. This field is required for type 'unbound_gre_tunnel' when the
        associated_network_type is 'classic' and the GRE tunnel is in a different account than the gateway.
        """
        return pulumi.get(self, "network_account_id")

    @network_account_id.setter
    def network_account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_account_id", value)

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the network being connected via this connection. This field is required for some types, such as 'vpc' or
        'directlink' or 'power_virtual_server'. The value of this is the CRN of the VPC or direct link or power_virtual_server
        gateway to be connected. This field is required to be unspecified for network type 'classic', 'gre_tunnel', and
        'unbound_gre_tunnel'.
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_id", value)

    @_builtins.property
    @pulumi.getter(name="remoteBgpAsn")
    def remote_bgp_asn(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The remote network BGP ASN.
        """
        return pulumi.get(self, "remote_bgp_asn")

    @remote_bgp_asn.setter
    def remote_bgp_asn(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "remote_bgp_asn", value)

    @_builtins.property
    @pulumi.getter(name="tgConnectionRgreTunnelId")
    def tg_connection_rgre_tunnel_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tg_connection_rgre_tunnel_id")

    @tg_connection_rgre_tunnel_id.setter
    def tg_connection_rgre_tunnel_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tg_connection_rgre_tunnel_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['TgConnectionRgreTunnelTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['TgConnectionRgreTunnelTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _TgConnectionRgreTunnelState:
    def __init__(__self__, *,
                 base_network_type: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 local_bgp_asn: Optional[pulumi.Input[_builtins.float]] = None,
                 local_gateway_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 local_tunnel_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 mtu: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_bgp_asn: Optional[pulumi.Input[_builtins.float]] = None,
                 remote_gateway_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_tunnel_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tg_connection_rgre_tunnel_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['TgConnectionRgreTunnelTimeoutsArgs']] = None,
                 tunnel_id: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering TgConnectionRgreTunnel resources.
        :param pulumi.Input[_builtins.str] base_network_type: The type of the base network for the RGRE. It should be i.e classic or VPC
        :param pulumi.Input[_builtins.str] connection_id: The Transit Gateway Connection identifier
        :param pulumi.Input[_builtins.str] created_at: The date and time that this tunnel was created
        :param pulumi.Input[_builtins.str] gateway: The Transit Gateway identifier
        :param pulumi.Input[_builtins.float] local_bgp_asn: The local network BGP ASN.
        :param pulumi.Input[_builtins.str] local_gateway_ip: The local gateway IP address.
        :param pulumi.Input[_builtins.str] local_tunnel_ip: The local tunnel IP address.
        :param pulumi.Input[_builtins.float] mtu: Only visible for cross account connections, this field represents the status of the request to connect the given network
               between accounts.Possible values: [pending,approved,rejected,expired,detached]
        :param pulumi.Input[_builtins.str] name: The user-defined name for this tunnel connection.
        :param pulumi.Input[_builtins.str] network_account_id: The ID of the account which owns the network that is being connected. Generally only used if the network is in a
               different account than the gateway. This field is required for type 'unbound_gre_tunnel' when the
               associated_network_type is 'classic' and the GRE tunnel is in a different account than the gateway.
        :param pulumi.Input[_builtins.str] network_id: The ID of the network being connected via this connection. This field is required for some types, such as 'vpc' or
               'directlink' or 'power_virtual_server'. The value of this is the CRN of the VPC or direct link or power_virtual_server
               gateway to be connected. This field is required to be unspecified for network type 'classic', 'gre_tunnel', and
               'unbound_gre_tunnel'.
        :param pulumi.Input[_builtins.float] remote_bgp_asn: The remote network BGP ASN.
        :param pulumi.Input[_builtins.str] remote_gateway_ip: The remote gateway IP address.
        :param pulumi.Input[_builtins.str] remote_tunnel_ip: The remote tunnel IP address.
        :param pulumi.Input[_builtins.str] status: What is the current configuration state of this tunnel. Possible values:
               [attached,failed,pending,deleting,detaching,detached]
        :param pulumi.Input[_builtins.str] tunnel_id: The Transit Gateway tunnel identifier
        :param pulumi.Input[_builtins.str] updated_at: The date and time that this tunnel was last updated
        :param pulumi.Input[_builtins.str] zone: Location of GRE tunnel.
        """
        if base_network_type is not None:
            pulumi.set(__self__, "base_network_type", base_network_type)
        if connection_id is not None:
            pulumi.set(__self__, "connection_id", connection_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if local_bgp_asn is not None:
            pulumi.set(__self__, "local_bgp_asn", local_bgp_asn)
        if local_gateway_ip is not None:
            pulumi.set(__self__, "local_gateway_ip", local_gateway_ip)
        if local_tunnel_ip is not None:
            pulumi.set(__self__, "local_tunnel_ip", local_tunnel_ip)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_account_id is not None:
            pulumi.set(__self__, "network_account_id", network_account_id)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if remote_bgp_asn is not None:
            pulumi.set(__self__, "remote_bgp_asn", remote_bgp_asn)
        if remote_gateway_ip is not None:
            pulumi.set(__self__, "remote_gateway_ip", remote_gateway_ip)
        if remote_tunnel_ip is not None:
            pulumi.set(__self__, "remote_tunnel_ip", remote_tunnel_ip)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tg_connection_rgre_tunnel_id is not None:
            pulumi.set(__self__, "tg_connection_rgre_tunnel_id", tg_connection_rgre_tunnel_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if tunnel_id is not None:
            pulumi.set(__self__, "tunnel_id", tunnel_id)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter(name="baseNetworkType")
    def base_network_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the base network for the RGRE. It should be i.e classic or VPC
        """
        return pulumi.get(self, "base_network_type")

    @base_network_type.setter
    def base_network_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "base_network_type", value)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Transit Gateway Connection identifier
        """
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connection_id", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time that this tunnel was created
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Transit Gateway identifier
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gateway", value)

    @_builtins.property
    @pulumi.getter(name="localBgpAsn")
    def local_bgp_asn(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The local network BGP ASN.
        """
        return pulumi.get(self, "local_bgp_asn")

    @local_bgp_asn.setter
    def local_bgp_asn(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "local_bgp_asn", value)

    @_builtins.property
    @pulumi.getter(name="localGatewayIp")
    def local_gateway_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The local gateway IP address.
        """
        return pulumi.get(self, "local_gateway_ip")

    @local_gateway_ip.setter
    def local_gateway_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local_gateway_ip", value)

    @_builtins.property
    @pulumi.getter(name="localTunnelIp")
    def local_tunnel_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The local tunnel IP address.
        """
        return pulumi.get(self, "local_tunnel_ip")

    @local_tunnel_ip.setter
    def local_tunnel_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local_tunnel_ip", value)

    @_builtins.property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Only visible for cross account connections, this field represents the status of the request to connect the given network
        between accounts.Possible values: [pending,approved,rejected,expired,detached]
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "mtu", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user-defined name for this tunnel connection.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="networkAccountId")
    def network_account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the account which owns the network that is being connected. Generally only used if the network is in a
        different account than the gateway. This field is required for type 'unbound_gre_tunnel' when the
        associated_network_type is 'classic' and the GRE tunnel is in a different account than the gateway.
        """
        return pulumi.get(self, "network_account_id")

    @network_account_id.setter
    def network_account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_account_id", value)

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the network being connected via this connection. This field is required for some types, such as 'vpc' or
        'directlink' or 'power_virtual_server'. The value of this is the CRN of the VPC or direct link or power_virtual_server
        gateway to be connected. This field is required to be unspecified for network type 'classic', 'gre_tunnel', and
        'unbound_gre_tunnel'.
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_id", value)

    @_builtins.property
    @pulumi.getter(name="remoteBgpAsn")
    def remote_bgp_asn(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The remote network BGP ASN.
        """
        return pulumi.get(self, "remote_bgp_asn")

    @remote_bgp_asn.setter
    def remote_bgp_asn(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "remote_bgp_asn", value)

    @_builtins.property
    @pulumi.getter(name="remoteGatewayIp")
    def remote_gateway_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The remote gateway IP address.
        """
        return pulumi.get(self, "remote_gateway_ip")

    @remote_gateway_ip.setter
    def remote_gateway_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "remote_gateway_ip", value)

    @_builtins.property
    @pulumi.getter(name="remoteTunnelIp")
    def remote_tunnel_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The remote tunnel IP address.
        """
        return pulumi.get(self, "remote_tunnel_ip")

    @remote_tunnel_ip.setter
    def remote_tunnel_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "remote_tunnel_ip", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        What is the current configuration state of this tunnel. Possible values:
        [attached,failed,pending,deleting,detaching,detached]
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="tgConnectionRgreTunnelId")
    def tg_connection_rgre_tunnel_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tg_connection_rgre_tunnel_id")

    @tg_connection_rgre_tunnel_id.setter
    def tg_connection_rgre_tunnel_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tg_connection_rgre_tunnel_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['TgConnectionRgreTunnelTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['TgConnectionRgreTunnelTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="tunnelId")
    def tunnel_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Transit Gateway tunnel identifier
        """
        return pulumi.get(self, "tunnel_id")

    @tunnel_id.setter
    def tunnel_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tunnel_id", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time that this tunnel was last updated
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Location of GRE tunnel.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zone", value)


@pulumi.type_token("ibm:index/tgConnectionRgreTunnel:TgConnectionRgreTunnel")
class TgConnectionRgreTunnel(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 base_network_type: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 local_bgp_asn: Optional[pulumi.Input[_builtins.float]] = None,
                 local_gateway_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 local_tunnel_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_bgp_asn: Optional[pulumi.Input[_builtins.float]] = None,
                 remote_gateway_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_tunnel_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 tg_connection_rgre_tunnel_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['TgConnectionRgreTunnelTimeoutsArgs', 'TgConnectionRgreTunnelTimeoutsArgsDict']]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a TgConnectionRgreTunnel resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] base_network_type: The type of the base network for the RGRE. It should be i.e classic or VPC
        :param pulumi.Input[_builtins.str] connection_id: The Transit Gateway Connection identifier
        :param pulumi.Input[_builtins.str] gateway: The Transit Gateway identifier
        :param pulumi.Input[_builtins.float] local_bgp_asn: The local network BGP ASN.
        :param pulumi.Input[_builtins.str] local_gateway_ip: The local gateway IP address.
        :param pulumi.Input[_builtins.str] local_tunnel_ip: The local tunnel IP address.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this tunnel connection.
        :param pulumi.Input[_builtins.str] network_account_id: The ID of the account which owns the network that is being connected. Generally only used if the network is in a
               different account than the gateway. This field is required for type 'unbound_gre_tunnel' when the
               associated_network_type is 'classic' and the GRE tunnel is in a different account than the gateway.
        :param pulumi.Input[_builtins.str] network_id: The ID of the network being connected via this connection. This field is required for some types, such as 'vpc' or
               'directlink' or 'power_virtual_server'. The value of this is the CRN of the VPC or direct link or power_virtual_server
               gateway to be connected. This field is required to be unspecified for network type 'classic', 'gre_tunnel', and
               'unbound_gre_tunnel'.
        :param pulumi.Input[_builtins.float] remote_bgp_asn: The remote network BGP ASN.
        :param pulumi.Input[_builtins.str] remote_gateway_ip: The remote gateway IP address.
        :param pulumi.Input[_builtins.str] remote_tunnel_ip: The remote tunnel IP address.
        :param pulumi.Input[_builtins.str] zone: Location of GRE tunnel.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TgConnectionRgreTunnelArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a TgConnectionRgreTunnel resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param TgConnectionRgreTunnelArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TgConnectionRgreTunnelArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 base_network_type: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 local_bgp_asn: Optional[pulumi.Input[_builtins.float]] = None,
                 local_gateway_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 local_tunnel_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_bgp_asn: Optional[pulumi.Input[_builtins.float]] = None,
                 remote_gateway_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_tunnel_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 tg_connection_rgre_tunnel_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['TgConnectionRgreTunnelTimeoutsArgs', 'TgConnectionRgreTunnelTimeoutsArgsDict']]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TgConnectionRgreTunnelArgs.__new__(TgConnectionRgreTunnelArgs)

            __props__.__dict__["base_network_type"] = base_network_type
            if connection_id is None and not opts.urn:
                raise TypeError("Missing required property 'connection_id'")
            __props__.__dict__["connection_id"] = connection_id
            if gateway is None and not opts.urn:
                raise TypeError("Missing required property 'gateway'")
            __props__.__dict__["gateway"] = gateway
            __props__.__dict__["local_bgp_asn"] = local_bgp_asn
            if local_gateway_ip is None and not opts.urn:
                raise TypeError("Missing required property 'local_gateway_ip'")
            __props__.__dict__["local_gateway_ip"] = local_gateway_ip
            if local_tunnel_ip is None and not opts.urn:
                raise TypeError("Missing required property 'local_tunnel_ip'")
            __props__.__dict__["local_tunnel_ip"] = local_tunnel_ip
            __props__.__dict__["name"] = name
            __props__.__dict__["network_account_id"] = network_account_id
            __props__.__dict__["network_id"] = network_id
            __props__.__dict__["remote_bgp_asn"] = remote_bgp_asn
            if remote_gateway_ip is None and not opts.urn:
                raise TypeError("Missing required property 'remote_gateway_ip'")
            __props__.__dict__["remote_gateway_ip"] = remote_gateway_ip
            if remote_tunnel_ip is None and not opts.urn:
                raise TypeError("Missing required property 'remote_tunnel_ip'")
            __props__.__dict__["remote_tunnel_ip"] = remote_tunnel_ip
            __props__.__dict__["tg_connection_rgre_tunnel_id"] = tg_connection_rgre_tunnel_id
            __props__.__dict__["timeouts"] = timeouts
            if zone is None and not opts.urn:
                raise TypeError("Missing required property 'zone'")
            __props__.__dict__["zone"] = zone
            __props__.__dict__["created_at"] = None
            __props__.__dict__["mtu"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["tunnel_id"] = None
            __props__.__dict__["updated_at"] = None
        super(TgConnectionRgreTunnel, __self__).__init__(
            'ibm:index/tgConnectionRgreTunnel:TgConnectionRgreTunnel',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            base_network_type: Optional[pulumi.Input[_builtins.str]] = None,
            connection_id: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            gateway: Optional[pulumi.Input[_builtins.str]] = None,
            local_bgp_asn: Optional[pulumi.Input[_builtins.float]] = None,
            local_gateway_ip: Optional[pulumi.Input[_builtins.str]] = None,
            local_tunnel_ip: Optional[pulumi.Input[_builtins.str]] = None,
            mtu: Optional[pulumi.Input[_builtins.float]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            network_account_id: Optional[pulumi.Input[_builtins.str]] = None,
            network_id: Optional[pulumi.Input[_builtins.str]] = None,
            remote_bgp_asn: Optional[pulumi.Input[_builtins.float]] = None,
            remote_gateway_ip: Optional[pulumi.Input[_builtins.str]] = None,
            remote_tunnel_ip: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            tg_connection_rgre_tunnel_id: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['TgConnectionRgreTunnelTimeoutsArgs', 'TgConnectionRgreTunnelTimeoutsArgsDict']]] = None,
            tunnel_id: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            zone: Optional[pulumi.Input[_builtins.str]] = None) -> 'TgConnectionRgreTunnel':
        """
        Get an existing TgConnectionRgreTunnel resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] base_network_type: The type of the base network for the RGRE. It should be i.e classic or VPC
        :param pulumi.Input[_builtins.str] connection_id: The Transit Gateway Connection identifier
        :param pulumi.Input[_builtins.str] created_at: The date and time that this tunnel was created
        :param pulumi.Input[_builtins.str] gateway: The Transit Gateway identifier
        :param pulumi.Input[_builtins.float] local_bgp_asn: The local network BGP ASN.
        :param pulumi.Input[_builtins.str] local_gateway_ip: The local gateway IP address.
        :param pulumi.Input[_builtins.str] local_tunnel_ip: The local tunnel IP address.
        :param pulumi.Input[_builtins.float] mtu: Only visible for cross account connections, this field represents the status of the request to connect the given network
               between accounts.Possible values: [pending,approved,rejected,expired,detached]
        :param pulumi.Input[_builtins.str] name: The user-defined name for this tunnel connection.
        :param pulumi.Input[_builtins.str] network_account_id: The ID of the account which owns the network that is being connected. Generally only used if the network is in a
               different account than the gateway. This field is required for type 'unbound_gre_tunnel' when the
               associated_network_type is 'classic' and the GRE tunnel is in a different account than the gateway.
        :param pulumi.Input[_builtins.str] network_id: The ID of the network being connected via this connection. This field is required for some types, such as 'vpc' or
               'directlink' or 'power_virtual_server'. The value of this is the CRN of the VPC or direct link or power_virtual_server
               gateway to be connected. This field is required to be unspecified for network type 'classic', 'gre_tunnel', and
               'unbound_gre_tunnel'.
        :param pulumi.Input[_builtins.float] remote_bgp_asn: The remote network BGP ASN.
        :param pulumi.Input[_builtins.str] remote_gateway_ip: The remote gateway IP address.
        :param pulumi.Input[_builtins.str] remote_tunnel_ip: The remote tunnel IP address.
        :param pulumi.Input[_builtins.str] status: What is the current configuration state of this tunnel. Possible values:
               [attached,failed,pending,deleting,detaching,detached]
        :param pulumi.Input[_builtins.str] tunnel_id: The Transit Gateway tunnel identifier
        :param pulumi.Input[_builtins.str] updated_at: The date and time that this tunnel was last updated
        :param pulumi.Input[_builtins.str] zone: Location of GRE tunnel.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TgConnectionRgreTunnelState.__new__(_TgConnectionRgreTunnelState)

        __props__.__dict__["base_network_type"] = base_network_type
        __props__.__dict__["connection_id"] = connection_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["gateway"] = gateway
        __props__.__dict__["local_bgp_asn"] = local_bgp_asn
        __props__.__dict__["local_gateway_ip"] = local_gateway_ip
        __props__.__dict__["local_tunnel_ip"] = local_tunnel_ip
        __props__.__dict__["mtu"] = mtu
        __props__.__dict__["name"] = name
        __props__.__dict__["network_account_id"] = network_account_id
        __props__.__dict__["network_id"] = network_id
        __props__.__dict__["remote_bgp_asn"] = remote_bgp_asn
        __props__.__dict__["remote_gateway_ip"] = remote_gateway_ip
        __props__.__dict__["remote_tunnel_ip"] = remote_tunnel_ip
        __props__.__dict__["status"] = status
        __props__.__dict__["tg_connection_rgre_tunnel_id"] = tg_connection_rgre_tunnel_id
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["tunnel_id"] = tunnel_id
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["zone"] = zone
        return TgConnectionRgreTunnel(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="baseNetworkType")
    def base_network_type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of the base network for the RGRE. It should be i.e classic or VPC
        """
        return pulumi.get(self, "base_network_type")

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> pulumi.Output[_builtins.str]:
        """
        The Transit Gateway Connection identifier
        """
        return pulumi.get(self, "connection_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time that this tunnel was created
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> pulumi.Output[_builtins.str]:
        """
        The Transit Gateway identifier
        """
        return pulumi.get(self, "gateway")

    @_builtins.property
    @pulumi.getter(name="localBgpAsn")
    def local_bgp_asn(self) -> pulumi.Output[_builtins.float]:
        """
        The local network BGP ASN.
        """
        return pulumi.get(self, "local_bgp_asn")

    @_builtins.property
    @pulumi.getter(name="localGatewayIp")
    def local_gateway_ip(self) -> pulumi.Output[_builtins.str]:
        """
        The local gateway IP address.
        """
        return pulumi.get(self, "local_gateway_ip")

    @_builtins.property
    @pulumi.getter(name="localTunnelIp")
    def local_tunnel_ip(self) -> pulumi.Output[_builtins.str]:
        """
        The local tunnel IP address.
        """
        return pulumi.get(self, "local_tunnel_ip")

    @_builtins.property
    @pulumi.getter
    def mtu(self) -> pulumi.Output[_builtins.float]:
        """
        Only visible for cross account connections, this field represents the status of the request to connect the given network
        between accounts.Possible values: [pending,approved,rejected,expired,detached]
        """
        return pulumi.get(self, "mtu")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The user-defined name for this tunnel connection.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkAccountId")
    def network_account_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the account which owns the network that is being connected. Generally only used if the network is in a
        different account than the gateway. This field is required for type 'unbound_gre_tunnel' when the
        associated_network_type is 'classic' and the GRE tunnel is in a different account than the gateway.
        """
        return pulumi.get(self, "network_account_id")

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the network being connected via this connection. This field is required for some types, such as 'vpc' or
        'directlink' or 'power_virtual_server'. The value of this is the CRN of the VPC or direct link or power_virtual_server
        gateway to be connected. This field is required to be unspecified for network type 'classic', 'gre_tunnel', and
        'unbound_gre_tunnel'.
        """
        return pulumi.get(self, "network_id")

    @_builtins.property
    @pulumi.getter(name="remoteBgpAsn")
    def remote_bgp_asn(self) -> pulumi.Output[_builtins.float]:
        """
        The remote network BGP ASN.
        """
        return pulumi.get(self, "remote_bgp_asn")

    @_builtins.property
    @pulumi.getter(name="remoteGatewayIp")
    def remote_gateway_ip(self) -> pulumi.Output[_builtins.str]:
        """
        The remote gateway IP address.
        """
        return pulumi.get(self, "remote_gateway_ip")

    @_builtins.property
    @pulumi.getter(name="remoteTunnelIp")
    def remote_tunnel_ip(self) -> pulumi.Output[_builtins.str]:
        """
        The remote tunnel IP address.
        """
        return pulumi.get(self, "remote_tunnel_ip")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        What is the current configuration state of this tunnel. Possible values:
        [attached,failed,pending,deleting,detaching,detached]
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="tgConnectionRgreTunnelId")
    def tg_connection_rgre_tunnel_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "tg_connection_rgre_tunnel_id")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.TgConnectionRgreTunnelTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter(name="tunnelId")
    def tunnel_id(self) -> pulumi.Output[_builtins.str]:
        """
        The Transit Gateway tunnel identifier
        """
        return pulumi.get(self, "tunnel_id")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time that this tunnel was last updated
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> pulumi.Output[_builtins.str]:
        """
        Location of GRE tunnel.
        """
        return pulumi.get(self, "zone")

