# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsSnapshotArgs', 'IsSnapshot']

@pulumi.input_type
class IsSnapshotArgs:
    def __init__(__self__, *,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 allowed_use: Optional[pulumi.Input['IsSnapshotAllowedUseArgs']] = None,
                 clones: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 encryption_key: Optional[pulumi.Input[_builtins.str]] = None,
                 is_snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 source_snapshot_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 source_volume: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['IsSnapshotTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a IsSnapshot resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input['IsSnapshotAllowedUseArgs'] allowed_use: The usage constraints to match against the requested instance or bare metal server properties to determine
               compatibility. Can only be specified for bootable snapshots.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] clones: Zones for creating the snapshot clone
        :param pulumi.Input[_builtins.str] encryption_key: A reference to the root key used to wrap the data encryption key for the source volume.
        :param pulumi.Input[_builtins.str] name: Snapshot name
        :param pulumi.Input[_builtins.str] resource_group: Resource group info
        :param pulumi.Input[_builtins.str] source_snapshot_crn: Source Snapshot CRN
        :param pulumi.Input[_builtins.str] source_volume: Snapshot source volume
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: User Tags for the snapshot
        """
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if allowed_use is not None:
            pulumi.set(__self__, "allowed_use", allowed_use)
        if clones is not None:
            pulumi.set(__self__, "clones", clones)
        if encryption_key is not None:
            pulumi.set(__self__, "encryption_key", encryption_key)
        if is_snapshot_id is not None:
            pulumi.set(__self__, "is_snapshot_id", is_snapshot_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if source_snapshot_crn is not None:
            pulumi.set(__self__, "source_snapshot_crn", source_snapshot_crn)
        if source_volume is not None:
            pulumi.set(__self__, "source_volume", source_volume)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter(name="allowedUse")
    def allowed_use(self) -> Optional[pulumi.Input['IsSnapshotAllowedUseArgs']]:
        """
        The usage constraints to match against the requested instance or bare metal server properties to determine
        compatibility. Can only be specified for bootable snapshots.
        """
        return pulumi.get(self, "allowed_use")

    @allowed_use.setter
    def allowed_use(self, value: Optional[pulumi.Input['IsSnapshotAllowedUseArgs']]):
        pulumi.set(self, "allowed_use", value)

    @_builtins.property
    @pulumi.getter
    def clones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Zones for creating the snapshot clone
        """
        return pulumi.get(self, "clones")

    @clones.setter
    def clones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "clones", value)

    @_builtins.property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A reference to the root key used to wrap the data encryption key for the source volume.
        """
        return pulumi.get(self, "encryption_key")

    @encryption_key.setter
    def encryption_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encryption_key", value)

    @_builtins.property
    @pulumi.getter(name="isSnapshotId")
    def is_snapshot_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_snapshot_id")

    @is_snapshot_id.setter
    def is_snapshot_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_snapshot_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Snapshot name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource group info
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="sourceSnapshotCrn")
    def source_snapshot_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source Snapshot CRN
        """
        return pulumi.get(self, "source_snapshot_crn")

    @source_snapshot_crn.setter
    def source_snapshot_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_snapshot_crn", value)

    @_builtins.property
    @pulumi.getter(name="sourceVolume")
    def source_volume(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Snapshot source volume
        """
        return pulumi.get(self, "source_volume")

    @source_volume.setter
    def source_volume(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_volume", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        User Tags for the snapshot
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsSnapshotTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsSnapshotTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _IsSnapshotState:
    def __init__(__self__, *,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 allowed_use: Optional[pulumi.Input['IsSnapshotAllowedUseArgs']] = None,
                 backup_policy_plans: Optional[pulumi.Input[Sequence[pulumi.Input['IsSnapshotBackupPolicyPlanArgs']]]] = None,
                 bootable: Optional[pulumi.Input[_builtins.bool]] = None,
                 catalog_offerings: Optional[pulumi.Input[Sequence[pulumi.Input['IsSnapshotCatalogOfferingArgs']]]] = None,
                 clones: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 copies: Optional[pulumi.Input[Sequence[pulumi.Input['IsSnapshotCopyArgs']]]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 encryption: Optional[pulumi.Input[_builtins.str]] = None,
                 encryption_key: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 is_snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
                 minimum_capacity: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 operating_system: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 service_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 size: Optional[pulumi.Input[_builtins.float]] = None,
                 snapshot_consistency_groups: Optional[pulumi.Input[Sequence[pulumi.Input['IsSnapshotSnapshotConsistencyGroupArgs']]]] = None,
                 source_image: Optional[pulumi.Input[_builtins.str]] = None,
                 source_snapshot_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 source_snapshots: Optional[pulumi.Input[Sequence[pulumi.Input['IsSnapshotSourceSnapshotArgs']]]] = None,
                 source_volume: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['IsSnapshotTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering IsSnapshot resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input['IsSnapshotAllowedUseArgs'] allowed_use: The usage constraints to match against the requested instance or bare metal server properties to determine
               compatibility. Can only be specified for bootable snapshots.
        :param pulumi.Input[Sequence[pulumi.Input['IsSnapshotBackupPolicyPlanArgs']]] backup_policy_plans: If present, the backup policy plan which created this snapshot.
        :param pulumi.Input[_builtins.bool] bootable: Indicates if a boot volume attachment can be created with a volume created from this snapshot
        :param pulumi.Input[Sequence[pulumi.Input['IsSnapshotCatalogOfferingArgs']]] catalog_offerings: The catalog offering inherited from the snapshot's source. If a virtual server instance is provisioned with a
               source_snapshot specifying this snapshot, the virtual server instance will use this snapshot's catalog offering,
               including its pricing plan.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] clones: Zones for creating the snapshot clone
        :param pulumi.Input[Sequence[pulumi.Input['IsSnapshotCopyArgs']]] copies: The copies of this snapshot in other regions.
        :param pulumi.Input[_builtins.str] crn: The crn of the resource
        :param pulumi.Input[_builtins.str] encryption: Encryption type of the snapshot
        :param pulumi.Input[_builtins.str] encryption_key: A reference to the root key used to wrap the data encryption key for the source volume.
        :param pulumi.Input[_builtins.str] href: URL for the snapshot
        :param pulumi.Input[_builtins.str] lifecycle_state: Snapshot lifecycle state
        :param pulumi.Input[_builtins.float] minimum_capacity: Minimum capacity of the snapshot
        :param pulumi.Input[_builtins.str] name: Snapshot name
        :param pulumi.Input[_builtins.str] operating_system: The globally unique name for the operating system included in this image
        :param pulumi.Input[_builtins.str] resource_group: Resource group info
        :param pulumi.Input[_builtins.str] resource_type: The resource type of the snapshot
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] service_tags: The [service tags](https://cloud.ibm.com/apidocs/tagging#types-of-tags) prefixed with `is.snapshot:` associated with
               this snapshot.
        :param pulumi.Input[_builtins.float] size: The size of the snapshot
        :param pulumi.Input[Sequence[pulumi.Input['IsSnapshotSnapshotConsistencyGroupArgs']]] snapshot_consistency_groups: The snapshot consistency group which created this snapshot.
        :param pulumi.Input[_builtins.str] source_image: If present, the image id from which the data on this volume was most directly provisioned.
        :param pulumi.Input[_builtins.str] source_snapshot_crn: Source Snapshot CRN
        :param pulumi.Input[Sequence[pulumi.Input['IsSnapshotSourceSnapshotArgs']]] source_snapshots: If present, the source snapshot this snapshot was created from.
        :param pulumi.Input[_builtins.str] source_volume: Snapshot source volume
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: User Tags for the snapshot
        """
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if allowed_use is not None:
            pulumi.set(__self__, "allowed_use", allowed_use)
        if backup_policy_plans is not None:
            pulumi.set(__self__, "backup_policy_plans", backup_policy_plans)
        if bootable is not None:
            pulumi.set(__self__, "bootable", bootable)
        if catalog_offerings is not None:
            pulumi.set(__self__, "catalog_offerings", catalog_offerings)
        if clones is not None:
            pulumi.set(__self__, "clones", clones)
        if copies is not None:
            pulumi.set(__self__, "copies", copies)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if encryption_key is not None:
            pulumi.set(__self__, "encryption_key", encryption_key)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if is_snapshot_id is not None:
            pulumi.set(__self__, "is_snapshot_id", is_snapshot_id)
        if lifecycle_state is not None:
            pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if minimum_capacity is not None:
            pulumi.set(__self__, "minimum_capacity", minimum_capacity)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operating_system is not None:
            pulumi.set(__self__, "operating_system", operating_system)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if service_tags is not None:
            pulumi.set(__self__, "service_tags", service_tags)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if snapshot_consistency_groups is not None:
            pulumi.set(__self__, "snapshot_consistency_groups", snapshot_consistency_groups)
        if source_image is not None:
            pulumi.set(__self__, "source_image", source_image)
        if source_snapshot_crn is not None:
            pulumi.set(__self__, "source_snapshot_crn", source_snapshot_crn)
        if source_snapshots is not None:
            pulumi.set(__self__, "source_snapshots", source_snapshots)
        if source_volume is not None:
            pulumi.set(__self__, "source_volume", source_volume)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter(name="allowedUse")
    def allowed_use(self) -> Optional[pulumi.Input['IsSnapshotAllowedUseArgs']]:
        """
        The usage constraints to match against the requested instance or bare metal server properties to determine
        compatibility. Can only be specified for bootable snapshots.
        """
        return pulumi.get(self, "allowed_use")

    @allowed_use.setter
    def allowed_use(self, value: Optional[pulumi.Input['IsSnapshotAllowedUseArgs']]):
        pulumi.set(self, "allowed_use", value)

    @_builtins.property
    @pulumi.getter(name="backupPolicyPlans")
    def backup_policy_plans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsSnapshotBackupPolicyPlanArgs']]]]:
        """
        If present, the backup policy plan which created this snapshot.
        """
        return pulumi.get(self, "backup_policy_plans")

    @backup_policy_plans.setter
    def backup_policy_plans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsSnapshotBackupPolicyPlanArgs']]]]):
        pulumi.set(self, "backup_policy_plans", value)

    @_builtins.property
    @pulumi.getter
    def bootable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if a boot volume attachment can be created with a volume created from this snapshot
        """
        return pulumi.get(self, "bootable")

    @bootable.setter
    def bootable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "bootable", value)

    @_builtins.property
    @pulumi.getter(name="catalogOfferings")
    def catalog_offerings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsSnapshotCatalogOfferingArgs']]]]:
        """
        The catalog offering inherited from the snapshot's source. If a virtual server instance is provisioned with a
        source_snapshot specifying this snapshot, the virtual server instance will use this snapshot's catalog offering,
        including its pricing plan.
        """
        return pulumi.get(self, "catalog_offerings")

    @catalog_offerings.setter
    def catalog_offerings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsSnapshotCatalogOfferingArgs']]]]):
        pulumi.set(self, "catalog_offerings", value)

    @_builtins.property
    @pulumi.getter
    def clones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Zones for creating the snapshot clone
        """
        return pulumi.get(self, "clones")

    @clones.setter
    def clones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "clones", value)

    @_builtins.property
    @pulumi.getter
    def copies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsSnapshotCopyArgs']]]]:
        """
        The copies of this snapshot in other regions.
        """
        return pulumi.get(self, "copies")

    @copies.setter
    def copies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsSnapshotCopyArgs']]]]):
        pulumi.set(self, "copies", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The crn of the resource
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Encryption type of the snapshot
        """
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encryption", value)

    @_builtins.property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A reference to the root key used to wrap the data encryption key for the source volume.
        """
        return pulumi.get(self, "encryption_key")

    @encryption_key.setter
    def encryption_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encryption_key", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        URL for the snapshot
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="isSnapshotId")
    def is_snapshot_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_snapshot_id")

    @is_snapshot_id.setter
    def is_snapshot_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_snapshot_id", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Snapshot lifecycle state
        """
        return pulumi.get(self, "lifecycle_state")

    @lifecycle_state.setter
    def lifecycle_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lifecycle_state", value)

    @_builtins.property
    @pulumi.getter(name="minimumCapacity")
    def minimum_capacity(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Minimum capacity of the snapshot
        """
        return pulumi.get(self, "minimum_capacity")

    @minimum_capacity.setter
    def minimum_capacity(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "minimum_capacity", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Snapshot name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The globally unique name for the operating system included in this image
        """
        return pulumi.get(self, "operating_system")

    @operating_system.setter
    def operating_system(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "operating_system", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource group info
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource type of the snapshot
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter(name="serviceTags")
    def service_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The [service tags](https://cloud.ibm.com/apidocs/tagging#types-of-tags) prefixed with `is.snapshot:` associated with
        this snapshot.
        """
        return pulumi.get(self, "service_tags")

    @service_tags.setter
    def service_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "service_tags", value)

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The size of the snapshot
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter(name="snapshotConsistencyGroups")
    def snapshot_consistency_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsSnapshotSnapshotConsistencyGroupArgs']]]]:
        """
        The snapshot consistency group which created this snapshot.
        """
        return pulumi.get(self, "snapshot_consistency_groups")

    @snapshot_consistency_groups.setter
    def snapshot_consistency_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsSnapshotSnapshotConsistencyGroupArgs']]]]):
        pulumi.set(self, "snapshot_consistency_groups", value)

    @_builtins.property
    @pulumi.getter(name="sourceImage")
    def source_image(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        If present, the image id from which the data on this volume was most directly provisioned.
        """
        return pulumi.get(self, "source_image")

    @source_image.setter
    def source_image(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_image", value)

    @_builtins.property
    @pulumi.getter(name="sourceSnapshotCrn")
    def source_snapshot_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Source Snapshot CRN
        """
        return pulumi.get(self, "source_snapshot_crn")

    @source_snapshot_crn.setter
    def source_snapshot_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_snapshot_crn", value)

    @_builtins.property
    @pulumi.getter(name="sourceSnapshots")
    def source_snapshots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsSnapshotSourceSnapshotArgs']]]]:
        """
        If present, the source snapshot this snapshot was created from.
        """
        return pulumi.get(self, "source_snapshots")

    @source_snapshots.setter
    def source_snapshots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsSnapshotSourceSnapshotArgs']]]]):
        pulumi.set(self, "source_snapshots", value)

    @_builtins.property
    @pulumi.getter(name="sourceVolume")
    def source_volume(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Snapshot source volume
        """
        return pulumi.get(self, "source_volume")

    @source_volume.setter
    def source_volume(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_volume", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        User Tags for the snapshot
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsSnapshotTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsSnapshotTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/isSnapshot:IsSnapshot")
class IsSnapshot(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 allowed_use: Optional[pulumi.Input[Union['IsSnapshotAllowedUseArgs', 'IsSnapshotAllowedUseArgsDict']]] = None,
                 clones: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 encryption_key: Optional[pulumi.Input[_builtins.str]] = None,
                 is_snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 source_snapshot_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 source_volume: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsSnapshotTimeoutsArgs', 'IsSnapshotTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a IsSnapshot resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[Union['IsSnapshotAllowedUseArgs', 'IsSnapshotAllowedUseArgsDict']] allowed_use: The usage constraints to match against the requested instance or bare metal server properties to determine
               compatibility. Can only be specified for bootable snapshots.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] clones: Zones for creating the snapshot clone
        :param pulumi.Input[_builtins.str] encryption_key: A reference to the root key used to wrap the data encryption key for the source volume.
        :param pulumi.Input[_builtins.str] name: Snapshot name
        :param pulumi.Input[_builtins.str] resource_group: Resource group info
        :param pulumi.Input[_builtins.str] source_snapshot_crn: Source Snapshot CRN
        :param pulumi.Input[_builtins.str] source_volume: Snapshot source volume
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: User Tags for the snapshot
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[IsSnapshotArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsSnapshot resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsSnapshotArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsSnapshotArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 allowed_use: Optional[pulumi.Input[Union['IsSnapshotAllowedUseArgs', 'IsSnapshotAllowedUseArgsDict']]] = None,
                 clones: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 encryption_key: Optional[pulumi.Input[_builtins.str]] = None,
                 is_snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 source_snapshot_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 source_volume: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsSnapshotTimeoutsArgs', 'IsSnapshotTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsSnapshotArgs.__new__(IsSnapshotArgs)

            __props__.__dict__["access_tags"] = access_tags
            __props__.__dict__["allowed_use"] = allowed_use
            __props__.__dict__["clones"] = clones
            __props__.__dict__["encryption_key"] = encryption_key
            __props__.__dict__["is_snapshot_id"] = is_snapshot_id
            __props__.__dict__["name"] = name
            __props__.__dict__["resource_group"] = resource_group
            __props__.__dict__["source_snapshot_crn"] = source_snapshot_crn
            __props__.__dict__["source_volume"] = source_volume
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["backup_policy_plans"] = None
            __props__.__dict__["bootable"] = None
            __props__.__dict__["catalog_offerings"] = None
            __props__.__dict__["copies"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["encryption"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["lifecycle_state"] = None
            __props__.__dict__["minimum_capacity"] = None
            __props__.__dict__["operating_system"] = None
            __props__.__dict__["resource_type"] = None
            __props__.__dict__["service_tags"] = None
            __props__.__dict__["size"] = None
            __props__.__dict__["snapshot_consistency_groups"] = None
            __props__.__dict__["source_image"] = None
            __props__.__dict__["source_snapshots"] = None
        super(IsSnapshot, __self__).__init__(
            'ibm:index/isSnapshot:IsSnapshot',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            allowed_use: Optional[pulumi.Input[Union['IsSnapshotAllowedUseArgs', 'IsSnapshotAllowedUseArgsDict']]] = None,
            backup_policy_plans: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsSnapshotBackupPolicyPlanArgs', 'IsSnapshotBackupPolicyPlanArgsDict']]]]] = None,
            bootable: Optional[pulumi.Input[_builtins.bool]] = None,
            catalog_offerings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsSnapshotCatalogOfferingArgs', 'IsSnapshotCatalogOfferingArgsDict']]]]] = None,
            clones: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            copies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsSnapshotCopyArgs', 'IsSnapshotCopyArgsDict']]]]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            encryption: Optional[pulumi.Input[_builtins.str]] = None,
            encryption_key: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            is_snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
            lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
            minimum_capacity: Optional[pulumi.Input[_builtins.float]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            operating_system: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group: Optional[pulumi.Input[_builtins.str]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            service_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            size: Optional[pulumi.Input[_builtins.float]] = None,
            snapshot_consistency_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsSnapshotSnapshotConsistencyGroupArgs', 'IsSnapshotSnapshotConsistencyGroupArgsDict']]]]] = None,
            source_image: Optional[pulumi.Input[_builtins.str]] = None,
            source_snapshot_crn: Optional[pulumi.Input[_builtins.str]] = None,
            source_snapshots: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsSnapshotSourceSnapshotArgs', 'IsSnapshotSourceSnapshotArgsDict']]]]] = None,
            source_volume: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            timeouts: Optional[pulumi.Input[Union['IsSnapshotTimeoutsArgs', 'IsSnapshotTimeoutsArgsDict']]] = None) -> 'IsSnapshot':
        """
        Get an existing IsSnapshot resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[Union['IsSnapshotAllowedUseArgs', 'IsSnapshotAllowedUseArgsDict']] allowed_use: The usage constraints to match against the requested instance or bare metal server properties to determine
               compatibility. Can only be specified for bootable snapshots.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsSnapshotBackupPolicyPlanArgs', 'IsSnapshotBackupPolicyPlanArgsDict']]]] backup_policy_plans: If present, the backup policy plan which created this snapshot.
        :param pulumi.Input[_builtins.bool] bootable: Indicates if a boot volume attachment can be created with a volume created from this snapshot
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsSnapshotCatalogOfferingArgs', 'IsSnapshotCatalogOfferingArgsDict']]]] catalog_offerings: The catalog offering inherited from the snapshot's source. If a virtual server instance is provisioned with a
               source_snapshot specifying this snapshot, the virtual server instance will use this snapshot's catalog offering,
               including its pricing plan.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] clones: Zones for creating the snapshot clone
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsSnapshotCopyArgs', 'IsSnapshotCopyArgsDict']]]] copies: The copies of this snapshot in other regions.
        :param pulumi.Input[_builtins.str] crn: The crn of the resource
        :param pulumi.Input[_builtins.str] encryption: Encryption type of the snapshot
        :param pulumi.Input[_builtins.str] encryption_key: A reference to the root key used to wrap the data encryption key for the source volume.
        :param pulumi.Input[_builtins.str] href: URL for the snapshot
        :param pulumi.Input[_builtins.str] lifecycle_state: Snapshot lifecycle state
        :param pulumi.Input[_builtins.float] minimum_capacity: Minimum capacity of the snapshot
        :param pulumi.Input[_builtins.str] name: Snapshot name
        :param pulumi.Input[_builtins.str] operating_system: The globally unique name for the operating system included in this image
        :param pulumi.Input[_builtins.str] resource_group: Resource group info
        :param pulumi.Input[_builtins.str] resource_type: The resource type of the snapshot
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] service_tags: The [service tags](https://cloud.ibm.com/apidocs/tagging#types-of-tags) prefixed with `is.snapshot:` associated with
               this snapshot.
        :param pulumi.Input[_builtins.float] size: The size of the snapshot
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsSnapshotSnapshotConsistencyGroupArgs', 'IsSnapshotSnapshotConsistencyGroupArgsDict']]]] snapshot_consistency_groups: The snapshot consistency group which created this snapshot.
        :param pulumi.Input[_builtins.str] source_image: If present, the image id from which the data on this volume was most directly provisioned.
        :param pulumi.Input[_builtins.str] source_snapshot_crn: Source Snapshot CRN
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsSnapshotSourceSnapshotArgs', 'IsSnapshotSourceSnapshotArgsDict']]]] source_snapshots: If present, the source snapshot this snapshot was created from.
        :param pulumi.Input[_builtins.str] source_volume: Snapshot source volume
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: User Tags for the snapshot
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsSnapshotState.__new__(_IsSnapshotState)

        __props__.__dict__["access_tags"] = access_tags
        __props__.__dict__["allowed_use"] = allowed_use
        __props__.__dict__["backup_policy_plans"] = backup_policy_plans
        __props__.__dict__["bootable"] = bootable
        __props__.__dict__["catalog_offerings"] = catalog_offerings
        __props__.__dict__["clones"] = clones
        __props__.__dict__["copies"] = copies
        __props__.__dict__["crn"] = crn
        __props__.__dict__["encryption"] = encryption
        __props__.__dict__["encryption_key"] = encryption_key
        __props__.__dict__["href"] = href
        __props__.__dict__["is_snapshot_id"] = is_snapshot_id
        __props__.__dict__["lifecycle_state"] = lifecycle_state
        __props__.__dict__["minimum_capacity"] = minimum_capacity
        __props__.__dict__["name"] = name
        __props__.__dict__["operating_system"] = operating_system
        __props__.__dict__["resource_group"] = resource_group
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["service_tags"] = service_tags
        __props__.__dict__["size"] = size
        __props__.__dict__["snapshot_consistency_groups"] = snapshot_consistency_groups
        __props__.__dict__["source_image"] = source_image
        __props__.__dict__["source_snapshot_crn"] = source_snapshot_crn
        __props__.__dict__["source_snapshots"] = source_snapshots
        __props__.__dict__["source_volume"] = source_volume
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timeouts"] = timeouts
        return IsSnapshot(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter(name="allowedUse")
    def allowed_use(self) -> pulumi.Output[Optional['outputs.IsSnapshotAllowedUse']]:
        """
        The usage constraints to match against the requested instance or bare metal server properties to determine
        compatibility. Can only be specified for bootable snapshots.
        """
        return pulumi.get(self, "allowed_use")

    @_builtins.property
    @pulumi.getter(name="backupPolicyPlans")
    def backup_policy_plans(self) -> pulumi.Output[Sequence['outputs.IsSnapshotBackupPolicyPlan']]:
        """
        If present, the backup policy plan which created this snapshot.
        """
        return pulumi.get(self, "backup_policy_plans")

    @_builtins.property
    @pulumi.getter
    def bootable(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates if a boot volume attachment can be created with a volume created from this snapshot
        """
        return pulumi.get(self, "bootable")

    @_builtins.property
    @pulumi.getter(name="catalogOfferings")
    def catalog_offerings(self) -> pulumi.Output[Sequence['outputs.IsSnapshotCatalogOffering']]:
        """
        The catalog offering inherited from the snapshot's source. If a virtual server instance is provisioned with a
        source_snapshot specifying this snapshot, the virtual server instance will use this snapshot's catalog offering,
        including its pricing plan.
        """
        return pulumi.get(self, "catalog_offerings")

    @_builtins.property
    @pulumi.getter
    def clones(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Zones for creating the snapshot clone
        """
        return pulumi.get(self, "clones")

    @_builtins.property
    @pulumi.getter
    def copies(self) -> pulumi.Output[Sequence['outputs.IsSnapshotCopy']]:
        """
        The copies of this snapshot in other regions.
        """
        return pulumi.get(self, "copies")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The crn of the resource
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def encryption(self) -> pulumi.Output[_builtins.str]:
        """
        Encryption type of the snapshot
        """
        return pulumi.get(self, "encryption")

    @_builtins.property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> pulumi.Output[_builtins.str]:
        """
        A reference to the root key used to wrap the data encryption key for the source volume.
        """
        return pulumi.get(self, "encryption_key")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        URL for the snapshot
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="isSnapshotId")
    def is_snapshot_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_snapshot_id")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> pulumi.Output[_builtins.str]:
        """
        Snapshot lifecycle state
        """
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter(name="minimumCapacity")
    def minimum_capacity(self) -> pulumi.Output[_builtins.float]:
        """
        Minimum capacity of the snapshot
        """
        return pulumi.get(self, "minimum_capacity")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Snapshot name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> pulumi.Output[_builtins.str]:
        """
        The globally unique name for the operating system included in this image
        """
        return pulumi.get(self, "operating_system")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Output[_builtins.str]:
        """
        Resource group info
        """
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        The resource type of the snapshot
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="serviceTags")
    def service_tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The [service tags](https://cloud.ibm.com/apidocs/tagging#types-of-tags) prefixed with `is.snapshot:` associated with
        this snapshot.
        """
        return pulumi.get(self, "service_tags")

    @_builtins.property
    @pulumi.getter
    def size(self) -> pulumi.Output[_builtins.float]:
        """
        The size of the snapshot
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="snapshotConsistencyGroups")
    def snapshot_consistency_groups(self) -> pulumi.Output[Sequence['outputs.IsSnapshotSnapshotConsistencyGroup']]:
        """
        The snapshot consistency group which created this snapshot.
        """
        return pulumi.get(self, "snapshot_consistency_groups")

    @_builtins.property
    @pulumi.getter(name="sourceImage")
    def source_image(self) -> pulumi.Output[_builtins.str]:
        """
        If present, the image id from which the data on this volume was most directly provisioned.
        """
        return pulumi.get(self, "source_image")

    @_builtins.property
    @pulumi.getter(name="sourceSnapshotCrn")
    def source_snapshot_crn(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Source Snapshot CRN
        """
        return pulumi.get(self, "source_snapshot_crn")

    @_builtins.property
    @pulumi.getter(name="sourceSnapshots")
    def source_snapshots(self) -> pulumi.Output[Sequence['outputs.IsSnapshotSourceSnapshot']]:
        """
        If present, the source snapshot this snapshot was created from.
        """
        return pulumi.get(self, "source_snapshots")

    @_builtins.property
    @pulumi.getter(name="sourceVolume")
    def source_volume(self) -> pulumi.Output[_builtins.str]:
        """
        Snapshot source volume
        """
        return pulumi.get(self, "source_volume")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        User Tags for the snapshot
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IsSnapshotTimeouts']]:
        return pulumi.get(self, "timeouts")

