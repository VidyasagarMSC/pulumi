# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetBackupRecoverySearchProtectedObjectsResult',
    'AwaitableGetBackupRecoverySearchProtectedObjectsResult',
    'get_backup_recovery_search_protected_objects',
    'get_backup_recovery_search_protected_objects_output',
]

@pulumi.output_type
class GetBackupRecoverySearchProtectedObjectsResult:
    """
    A collection of values returned by getBackupRecoverySearchProtectedObjects.
    """
    def __init__(__self__, cdp_protected_only=None, environments=None, filter_snapshot_from_usecs=None, filter_snapshot_to_usecs=None, id=None, metadatas=None, num_results=None, object_action_key=None, object_ids=None, objects=None, os_types=None, protection_group_ids=None, request_initiator_type=None, run_instance_ids=None, search_string=None, snapshot_actions=None, source_ids=None, sub_result_size=None, use_cached_data=None, x_ibm_tenant_id=None):
        if cdp_protected_only and not isinstance(cdp_protected_only, bool):
            raise TypeError("Expected argument 'cdp_protected_only' to be a bool")
        pulumi.set(__self__, "cdp_protected_only", cdp_protected_only)
        if environments and not isinstance(environments, list):
            raise TypeError("Expected argument 'environments' to be a list")
        pulumi.set(__self__, "environments", environments)
        if filter_snapshot_from_usecs and not isinstance(filter_snapshot_from_usecs, float):
            raise TypeError("Expected argument 'filter_snapshot_from_usecs' to be a float")
        pulumi.set(__self__, "filter_snapshot_from_usecs", filter_snapshot_from_usecs)
        if filter_snapshot_to_usecs and not isinstance(filter_snapshot_to_usecs, float):
            raise TypeError("Expected argument 'filter_snapshot_to_usecs' to be a float")
        pulumi.set(__self__, "filter_snapshot_to_usecs", filter_snapshot_to_usecs)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if metadatas and not isinstance(metadatas, list):
            raise TypeError("Expected argument 'metadatas' to be a list")
        pulumi.set(__self__, "metadatas", metadatas)
        if num_results and not isinstance(num_results, float):
            raise TypeError("Expected argument 'num_results' to be a float")
        pulumi.set(__self__, "num_results", num_results)
        if object_action_key and not isinstance(object_action_key, str):
            raise TypeError("Expected argument 'object_action_key' to be a str")
        pulumi.set(__self__, "object_action_key", object_action_key)
        if object_ids and not isinstance(object_ids, list):
            raise TypeError("Expected argument 'object_ids' to be a list")
        pulumi.set(__self__, "object_ids", object_ids)
        if objects and not isinstance(objects, list):
            raise TypeError("Expected argument 'objects' to be a list")
        pulumi.set(__self__, "objects", objects)
        if os_types and not isinstance(os_types, list):
            raise TypeError("Expected argument 'os_types' to be a list")
        pulumi.set(__self__, "os_types", os_types)
        if protection_group_ids and not isinstance(protection_group_ids, list):
            raise TypeError("Expected argument 'protection_group_ids' to be a list")
        pulumi.set(__self__, "protection_group_ids", protection_group_ids)
        if request_initiator_type and not isinstance(request_initiator_type, str):
            raise TypeError("Expected argument 'request_initiator_type' to be a str")
        pulumi.set(__self__, "request_initiator_type", request_initiator_type)
        if run_instance_ids and not isinstance(run_instance_ids, list):
            raise TypeError("Expected argument 'run_instance_ids' to be a list")
        pulumi.set(__self__, "run_instance_ids", run_instance_ids)
        if search_string and not isinstance(search_string, str):
            raise TypeError("Expected argument 'search_string' to be a str")
        pulumi.set(__self__, "search_string", search_string)
        if snapshot_actions and not isinstance(snapshot_actions, list):
            raise TypeError("Expected argument 'snapshot_actions' to be a list")
        pulumi.set(__self__, "snapshot_actions", snapshot_actions)
        if source_ids and not isinstance(source_ids, list):
            raise TypeError("Expected argument 'source_ids' to be a list")
        pulumi.set(__self__, "source_ids", source_ids)
        if sub_result_size and not isinstance(sub_result_size, float):
            raise TypeError("Expected argument 'sub_result_size' to be a float")
        pulumi.set(__self__, "sub_result_size", sub_result_size)
        if use_cached_data and not isinstance(use_cached_data, bool):
            raise TypeError("Expected argument 'use_cached_data' to be a bool")
        pulumi.set(__self__, "use_cached_data", use_cached_data)
        if x_ibm_tenant_id and not isinstance(x_ibm_tenant_id, str):
            raise TypeError("Expected argument 'x_ibm_tenant_id' to be a str")
        pulumi.set(__self__, "x_ibm_tenant_id", x_ibm_tenant_id)

    @_builtins.property
    @pulumi.getter(name="cdpProtectedOnly")
    def cdp_protected_only(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "cdp_protected_only")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="filterSnapshotFromUsecs")
    def filter_snapshot_from_usecs(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "filter_snapshot_from_usecs")

    @_builtins.property
    @pulumi.getter(name="filterSnapshotToUsecs")
    def filter_snapshot_to_usecs(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "filter_snapshot_to_usecs")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetBackupRecoverySearchProtectedObjectsMetadataResult']:
        return pulumi.get(self, "metadatas")

    @_builtins.property
    @pulumi.getter(name="numResults")
    def num_results(self) -> _builtins.float:
        return pulumi.get(self, "num_results")

    @_builtins.property
    @pulumi.getter(name="objectActionKey")
    def object_action_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "object_action_key")

    @_builtins.property
    @pulumi.getter(name="objectIds")
    def object_ids(self) -> Optional[Sequence[_builtins.float]]:
        return pulumi.get(self, "object_ids")

    @_builtins.property
    @pulumi.getter
    def objects(self) -> Sequence['outputs.GetBackupRecoverySearchProtectedObjectsObjectResult']:
        return pulumi.get(self, "objects")

    @_builtins.property
    @pulumi.getter(name="osTypes")
    def os_types(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "os_types")

    @_builtins.property
    @pulumi.getter(name="protectionGroupIds")
    def protection_group_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "protection_group_ids")

    @_builtins.property
    @pulumi.getter(name="requestInitiatorType")
    def request_initiator_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "request_initiator_type")

    @_builtins.property
    @pulumi.getter(name="runInstanceIds")
    def run_instance_ids(self) -> Optional[Sequence[_builtins.float]]:
        return pulumi.get(self, "run_instance_ids")

    @_builtins.property
    @pulumi.getter(name="searchString")
    def search_string(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "search_string")

    @_builtins.property
    @pulumi.getter(name="snapshotActions")
    def snapshot_actions(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "snapshot_actions")

    @_builtins.property
    @pulumi.getter(name="sourceIds")
    def source_ids(self) -> Optional[Sequence[_builtins.float]]:
        return pulumi.get(self, "source_ids")

    @_builtins.property
    @pulumi.getter(name="subResultSize")
    def sub_result_size(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "sub_result_size")

    @_builtins.property
    @pulumi.getter(name="useCachedData")
    def use_cached_data(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "use_cached_data")

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> _builtins.str:
        return pulumi.get(self, "x_ibm_tenant_id")


class AwaitableGetBackupRecoverySearchProtectedObjectsResult(GetBackupRecoverySearchProtectedObjectsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupRecoverySearchProtectedObjectsResult(
            cdp_protected_only=self.cdp_protected_only,
            environments=self.environments,
            filter_snapshot_from_usecs=self.filter_snapshot_from_usecs,
            filter_snapshot_to_usecs=self.filter_snapshot_to_usecs,
            id=self.id,
            metadatas=self.metadatas,
            num_results=self.num_results,
            object_action_key=self.object_action_key,
            object_ids=self.object_ids,
            objects=self.objects,
            os_types=self.os_types,
            protection_group_ids=self.protection_group_ids,
            request_initiator_type=self.request_initiator_type,
            run_instance_ids=self.run_instance_ids,
            search_string=self.search_string,
            snapshot_actions=self.snapshot_actions,
            source_ids=self.source_ids,
            sub_result_size=self.sub_result_size,
            use_cached_data=self.use_cached_data,
            x_ibm_tenant_id=self.x_ibm_tenant_id)


def get_backup_recovery_search_protected_objects(cdp_protected_only: Optional[_builtins.bool] = None,
                                                 environments: Optional[Sequence[_builtins.str]] = None,
                                                 filter_snapshot_from_usecs: Optional[_builtins.float] = None,
                                                 filter_snapshot_to_usecs: Optional[_builtins.float] = None,
                                                 id: Optional[_builtins.str] = None,
                                                 object_action_key: Optional[_builtins.str] = None,
                                                 object_ids: Optional[Sequence[_builtins.float]] = None,
                                                 os_types: Optional[Sequence[_builtins.str]] = None,
                                                 protection_group_ids: Optional[Sequence[_builtins.str]] = None,
                                                 request_initiator_type: Optional[_builtins.str] = None,
                                                 run_instance_ids: Optional[Sequence[_builtins.float]] = None,
                                                 search_string: Optional[_builtins.str] = None,
                                                 snapshot_actions: Optional[Sequence[_builtins.str]] = None,
                                                 source_ids: Optional[Sequence[_builtins.float]] = None,
                                                 sub_result_size: Optional[_builtins.float] = None,
                                                 use_cached_data: Optional[_builtins.bool] = None,
                                                 x_ibm_tenant_id: Optional[_builtins.str] = None,
                                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupRecoverySearchProtectedObjectsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cdpProtectedOnly'] = cdp_protected_only
    __args__['environments'] = environments
    __args__['filterSnapshotFromUsecs'] = filter_snapshot_from_usecs
    __args__['filterSnapshotToUsecs'] = filter_snapshot_to_usecs
    __args__['id'] = id
    __args__['objectActionKey'] = object_action_key
    __args__['objectIds'] = object_ids
    __args__['osTypes'] = os_types
    __args__['protectionGroupIds'] = protection_group_ids
    __args__['requestInitiatorType'] = request_initiator_type
    __args__['runInstanceIds'] = run_instance_ids
    __args__['searchString'] = search_string
    __args__['snapshotActions'] = snapshot_actions
    __args__['sourceIds'] = source_ids
    __args__['subResultSize'] = sub_result_size
    __args__['useCachedData'] = use_cached_data
    __args__['xIbmTenantId'] = x_ibm_tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getBackupRecoverySearchProtectedObjects:getBackupRecoverySearchProtectedObjects', __args__, opts=opts, typ=GetBackupRecoverySearchProtectedObjectsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetBackupRecoverySearchProtectedObjectsResult(
        cdp_protected_only=pulumi.get(__ret__, 'cdp_protected_only'),
        environments=pulumi.get(__ret__, 'environments'),
        filter_snapshot_from_usecs=pulumi.get(__ret__, 'filter_snapshot_from_usecs'),
        filter_snapshot_to_usecs=pulumi.get(__ret__, 'filter_snapshot_to_usecs'),
        id=pulumi.get(__ret__, 'id'),
        metadatas=pulumi.get(__ret__, 'metadatas'),
        num_results=pulumi.get(__ret__, 'num_results'),
        object_action_key=pulumi.get(__ret__, 'object_action_key'),
        object_ids=pulumi.get(__ret__, 'object_ids'),
        objects=pulumi.get(__ret__, 'objects'),
        os_types=pulumi.get(__ret__, 'os_types'),
        protection_group_ids=pulumi.get(__ret__, 'protection_group_ids'),
        request_initiator_type=pulumi.get(__ret__, 'request_initiator_type'),
        run_instance_ids=pulumi.get(__ret__, 'run_instance_ids'),
        search_string=pulumi.get(__ret__, 'search_string'),
        snapshot_actions=pulumi.get(__ret__, 'snapshot_actions'),
        source_ids=pulumi.get(__ret__, 'source_ids'),
        sub_result_size=pulumi.get(__ret__, 'sub_result_size'),
        use_cached_data=pulumi.get(__ret__, 'use_cached_data'),
        x_ibm_tenant_id=pulumi.get(__ret__, 'x_ibm_tenant_id'))
def get_backup_recovery_search_protected_objects_output(cdp_protected_only: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                                        environments: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                        filter_snapshot_from_usecs: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                                                        filter_snapshot_to_usecs: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                                                        id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                        object_action_key: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                        object_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.float]]]] = None,
                                                        os_types: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                        protection_group_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                        request_initiator_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                        run_instance_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.float]]]] = None,
                                                        search_string: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                        snapshot_actions: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                        source_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.float]]]] = None,
                                                        sub_result_size: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                                                        use_cached_data: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                                        x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBackupRecoverySearchProtectedObjectsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cdpProtectedOnly'] = cdp_protected_only
    __args__['environments'] = environments
    __args__['filterSnapshotFromUsecs'] = filter_snapshot_from_usecs
    __args__['filterSnapshotToUsecs'] = filter_snapshot_to_usecs
    __args__['id'] = id
    __args__['objectActionKey'] = object_action_key
    __args__['objectIds'] = object_ids
    __args__['osTypes'] = os_types
    __args__['protectionGroupIds'] = protection_group_ids
    __args__['requestInitiatorType'] = request_initiator_type
    __args__['runInstanceIds'] = run_instance_ids
    __args__['searchString'] = search_string
    __args__['snapshotActions'] = snapshot_actions
    __args__['sourceIds'] = source_ids
    __args__['subResultSize'] = sub_result_size
    __args__['useCachedData'] = use_cached_data
    __args__['xIbmTenantId'] = x_ibm_tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getBackupRecoverySearchProtectedObjects:getBackupRecoverySearchProtectedObjects', __args__, opts=opts, typ=GetBackupRecoverySearchProtectedObjectsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetBackupRecoverySearchProtectedObjectsResult(
        cdp_protected_only=pulumi.get(__response__, 'cdp_protected_only'),
        environments=pulumi.get(__response__, 'environments'),
        filter_snapshot_from_usecs=pulumi.get(__response__, 'filter_snapshot_from_usecs'),
        filter_snapshot_to_usecs=pulumi.get(__response__, 'filter_snapshot_to_usecs'),
        id=pulumi.get(__response__, 'id'),
        metadatas=pulumi.get(__response__, 'metadatas'),
        num_results=pulumi.get(__response__, 'num_results'),
        object_action_key=pulumi.get(__response__, 'object_action_key'),
        object_ids=pulumi.get(__response__, 'object_ids'),
        objects=pulumi.get(__response__, 'objects'),
        os_types=pulumi.get(__response__, 'os_types'),
        protection_group_ids=pulumi.get(__response__, 'protection_group_ids'),
        request_initiator_type=pulumi.get(__response__, 'request_initiator_type'),
        run_instance_ids=pulumi.get(__response__, 'run_instance_ids'),
        search_string=pulumi.get(__response__, 'search_string'),
        snapshot_actions=pulumi.get(__response__, 'snapshot_actions'),
        source_ids=pulumi.get(__response__, 'source_ids'),
        sub_result_size=pulumi.get(__response__, 'sub_result_size'),
        use_cached_data=pulumi.get(__response__, 'use_cached_data'),
        x_ibm_tenant_id=pulumi.get(__response__, 'x_ibm_tenant_id')))
