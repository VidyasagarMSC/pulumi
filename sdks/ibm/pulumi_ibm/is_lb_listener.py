# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsLbListenerArgs', 'IsLbListener']

@pulumi.input_type
class IsLbListenerArgs:
    def __init__(__self__, *,
                 lb: pulumi.Input[_builtins.str],
                 protocol: pulumi.Input[_builtins.str],
                 accept_proxy_protocol: Optional[pulumi.Input[_builtins.bool]] = None,
                 certificate_instance: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_limit: Optional[pulumi.Input[_builtins.float]] = None,
                 default_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 https_redirect: Optional[pulumi.Input['IsLbListenerHttpsRedirectArgs']] = None,
                 https_redirect_listener: Optional[pulumi.Input[_builtins.str]] = None,
                 https_redirect_status_code: Optional[pulumi.Input[_builtins.float]] = None,
                 https_redirect_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 idle_connection_timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 is_lb_listener_id: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 port_max: Optional[pulumi.Input[_builtins.float]] = None,
                 port_min: Optional[pulumi.Input[_builtins.float]] = None,
                 timeouts: Optional[pulumi.Input['IsLbListenerTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a IsLbListener resource.
        :param pulumi.Input[_builtins.str] lb: Loadbalancer listener ID
        :param pulumi.Input[_builtins.str] protocol: Loadbalancer protocol
        :param pulumi.Input[_builtins.bool] accept_proxy_protocol: Listener will forward proxy protocol
        :param pulumi.Input[_builtins.str] certificate_instance: certificate instance for the Loadbalancer
        :param pulumi.Input[_builtins.float] connection_limit: Connection limit for Loadbalancer
        :param pulumi.Input[_builtins.str] default_pool: Loadbalancer default pool info
        :param pulumi.Input['IsLbListenerHttpsRedirectArgs'] https_redirect: If present, the target listener that requests are redirected to.
        :param pulumi.Input[_builtins.str] https_redirect_listener: ID of the listener that will be set as http redirect target
        :param pulumi.Input[_builtins.float] https_redirect_status_code: The HTTP status code to be returned in the redirect response
        :param pulumi.Input[_builtins.str] https_redirect_uri: Target URI where traffic will be redirected
        :param pulumi.Input[_builtins.float] idle_connection_timeout: idle connection timeout of listener
        :param pulumi.Input[_builtins.float] port: Loadbalancer listener port
        :param pulumi.Input[_builtins.float] port_max: The inclusive upper bound of the range of ports used by this listener. Only load balancers in the `network` family
               support more than one port per listener
        :param pulumi.Input[_builtins.float] port_min: The inclusive lower bound of the range of ports used by this listener. Only load balancers in the `network` family
               support more than one port per listener.
        """
        pulumi.set(__self__, "lb", lb)
        pulumi.set(__self__, "protocol", protocol)
        if accept_proxy_protocol is not None:
            pulumi.set(__self__, "accept_proxy_protocol", accept_proxy_protocol)
        if certificate_instance is not None:
            pulumi.set(__self__, "certificate_instance", certificate_instance)
        if connection_limit is not None:
            pulumi.set(__self__, "connection_limit", connection_limit)
        if default_pool is not None:
            pulumi.set(__self__, "default_pool", default_pool)
        if https_redirect is not None:
            pulumi.set(__self__, "https_redirect", https_redirect)
        if https_redirect_listener is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""https_redirect_listener is deprecated: Deprecated""")
        if https_redirect_listener is not None:
            pulumi.set(__self__, "https_redirect_listener", https_redirect_listener)
        if https_redirect_status_code is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""https_redirect_status_code is deprecated: Deprecated""")
        if https_redirect_status_code is not None:
            pulumi.set(__self__, "https_redirect_status_code", https_redirect_status_code)
        if https_redirect_uri is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""https_redirect_uri is deprecated: Deprecated""")
        if https_redirect_uri is not None:
            pulumi.set(__self__, "https_redirect_uri", https_redirect_uri)
        if idle_connection_timeout is not None:
            pulumi.set(__self__, "idle_connection_timeout", idle_connection_timeout)
        if is_lb_listener_id is not None:
            pulumi.set(__self__, "is_lb_listener_id", is_lb_listener_id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_max is not None:
            pulumi.set(__self__, "port_max", port_max)
        if port_min is not None:
            pulumi.set(__self__, "port_min", port_min)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def lb(self) -> pulumi.Input[_builtins.str]:
        """
        Loadbalancer listener ID
        """
        return pulumi.get(self, "lb")

    @lb.setter
    def lb(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "lb", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[_builtins.str]:
        """
        Loadbalancer protocol
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="acceptProxyProtocol")
    def accept_proxy_protocol(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Listener will forward proxy protocol
        """
        return pulumi.get(self, "accept_proxy_protocol")

    @accept_proxy_protocol.setter
    def accept_proxy_protocol(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "accept_proxy_protocol", value)

    @_builtins.property
    @pulumi.getter(name="certificateInstance")
    def certificate_instance(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        certificate instance for the Loadbalancer
        """
        return pulumi.get(self, "certificate_instance")

    @certificate_instance.setter
    def certificate_instance(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate_instance", value)

    @_builtins.property
    @pulumi.getter(name="connectionLimit")
    def connection_limit(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Connection limit for Loadbalancer
        """
        return pulumi.get(self, "connection_limit")

    @connection_limit.setter
    def connection_limit(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "connection_limit", value)

    @_builtins.property
    @pulumi.getter(name="defaultPool")
    def default_pool(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Loadbalancer default pool info
        """
        return pulumi.get(self, "default_pool")

    @default_pool.setter
    def default_pool(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_pool", value)

    @_builtins.property
    @pulumi.getter(name="httpsRedirect")
    def https_redirect(self) -> Optional[pulumi.Input['IsLbListenerHttpsRedirectArgs']]:
        """
        If present, the target listener that requests are redirected to.
        """
        return pulumi.get(self, "https_redirect")

    @https_redirect.setter
    def https_redirect(self, value: Optional[pulumi.Input['IsLbListenerHttpsRedirectArgs']]):
        pulumi.set(self, "https_redirect", value)

    @_builtins.property
    @pulumi.getter(name="httpsRedirectListener")
    @_utilities.deprecated("""Deprecated""")
    def https_redirect_listener(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the listener that will be set as http redirect target
        """
        return pulumi.get(self, "https_redirect_listener")

    @https_redirect_listener.setter
    def https_redirect_listener(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "https_redirect_listener", value)

    @_builtins.property
    @pulumi.getter(name="httpsRedirectStatusCode")
    @_utilities.deprecated("""Deprecated""")
    def https_redirect_status_code(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The HTTP status code to be returned in the redirect response
        """
        return pulumi.get(self, "https_redirect_status_code")

    @https_redirect_status_code.setter
    def https_redirect_status_code(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "https_redirect_status_code", value)

    @_builtins.property
    @pulumi.getter(name="httpsRedirectUri")
    @_utilities.deprecated("""Deprecated""")
    def https_redirect_uri(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Target URI where traffic will be redirected
        """
        return pulumi.get(self, "https_redirect_uri")

    @https_redirect_uri.setter
    def https_redirect_uri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "https_redirect_uri", value)

    @_builtins.property
    @pulumi.getter(name="idleConnectionTimeout")
    def idle_connection_timeout(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        idle connection timeout of listener
        """
        return pulumi.get(self, "idle_connection_timeout")

    @idle_connection_timeout.setter
    def idle_connection_timeout(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "idle_connection_timeout", value)

    @_builtins.property
    @pulumi.getter(name="isLbListenerId")
    def is_lb_listener_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_lb_listener_id")

    @is_lb_listener_id.setter
    def is_lb_listener_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_lb_listener_id", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Loadbalancer listener port
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter(name="portMax")
    def port_max(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The inclusive upper bound of the range of ports used by this listener. Only load balancers in the `network` family
        support more than one port per listener
        """
        return pulumi.get(self, "port_max")

    @port_max.setter
    def port_max(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port_max", value)

    @_builtins.property
    @pulumi.getter(name="portMin")
    def port_min(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The inclusive lower bound of the range of ports used by this listener. Only load balancers in the `network` family
        support more than one port per listener.
        """
        return pulumi.get(self, "port_min")

    @port_min.setter
    def port_min(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port_min", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsLbListenerTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsLbListenerTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _IsLbListenerState:
    def __init__(__self__, *,
                 accept_proxy_protocol: Optional[pulumi.Input[_builtins.bool]] = None,
                 certificate_instance: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_limit: Optional[pulumi.Input[_builtins.float]] = None,
                 default_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 https_redirect: Optional[pulumi.Input['IsLbListenerHttpsRedirectArgs']] = None,
                 https_redirect_listener: Optional[pulumi.Input[_builtins.str]] = None,
                 https_redirect_status_code: Optional[pulumi.Input[_builtins.float]] = None,
                 https_redirect_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 idle_connection_timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 is_lb_listener_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lb: Optional[pulumi.Input[_builtins.str]] = None,
                 listener_id: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 port_max: Optional[pulumi.Input[_builtins.float]] = None,
                 port_min: Optional[pulumi.Input[_builtins.float]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 related_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['IsLbListenerTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering IsLbListener resources.
        :param pulumi.Input[_builtins.bool] accept_proxy_protocol: Listener will forward proxy protocol
        :param pulumi.Input[_builtins.str] certificate_instance: certificate instance for the Loadbalancer
        :param pulumi.Input[_builtins.float] connection_limit: Connection limit for Loadbalancer
        :param pulumi.Input[_builtins.str] default_pool: Loadbalancer default pool info
        :param pulumi.Input['IsLbListenerHttpsRedirectArgs'] https_redirect: If present, the target listener that requests are redirected to.
        :param pulumi.Input[_builtins.str] https_redirect_listener: ID of the listener that will be set as http redirect target
        :param pulumi.Input[_builtins.float] https_redirect_status_code: The HTTP status code to be returned in the redirect response
        :param pulumi.Input[_builtins.str] https_redirect_uri: Target URI where traffic will be redirected
        :param pulumi.Input[_builtins.float] idle_connection_timeout: idle connection timeout of listener
        :param pulumi.Input[_builtins.str] lb: Loadbalancer listener ID
        :param pulumi.Input[_builtins.float] port: Loadbalancer listener port
        :param pulumi.Input[_builtins.float] port_max: The inclusive upper bound of the range of ports used by this listener. Only load balancers in the `network` family
               support more than one port per listener
        :param pulumi.Input[_builtins.float] port_min: The inclusive lower bound of the range of ports used by this listener. Only load balancers in the `network` family
               support more than one port per listener.
        :param pulumi.Input[_builtins.str] protocol: Loadbalancer protocol
        :param pulumi.Input[_builtins.str] related_crn: The crn of the LB resource
        :param pulumi.Input[_builtins.str] status: Loadbalancer listener status
        """
        if accept_proxy_protocol is not None:
            pulumi.set(__self__, "accept_proxy_protocol", accept_proxy_protocol)
        if certificate_instance is not None:
            pulumi.set(__self__, "certificate_instance", certificate_instance)
        if connection_limit is not None:
            pulumi.set(__self__, "connection_limit", connection_limit)
        if default_pool is not None:
            pulumi.set(__self__, "default_pool", default_pool)
        if https_redirect is not None:
            pulumi.set(__self__, "https_redirect", https_redirect)
        if https_redirect_listener is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""https_redirect_listener is deprecated: Deprecated""")
        if https_redirect_listener is not None:
            pulumi.set(__self__, "https_redirect_listener", https_redirect_listener)
        if https_redirect_status_code is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""https_redirect_status_code is deprecated: Deprecated""")
        if https_redirect_status_code is not None:
            pulumi.set(__self__, "https_redirect_status_code", https_redirect_status_code)
        if https_redirect_uri is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""https_redirect_uri is deprecated: Deprecated""")
        if https_redirect_uri is not None:
            pulumi.set(__self__, "https_redirect_uri", https_redirect_uri)
        if idle_connection_timeout is not None:
            pulumi.set(__self__, "idle_connection_timeout", idle_connection_timeout)
        if is_lb_listener_id is not None:
            pulumi.set(__self__, "is_lb_listener_id", is_lb_listener_id)
        if lb is not None:
            pulumi.set(__self__, "lb", lb)
        if listener_id is not None:
            pulumi.set(__self__, "listener_id", listener_id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_max is not None:
            pulumi.set(__self__, "port_max", port_max)
        if port_min is not None:
            pulumi.set(__self__, "port_min", port_min)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if related_crn is not None:
            pulumi.set(__self__, "related_crn", related_crn)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="acceptProxyProtocol")
    def accept_proxy_protocol(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Listener will forward proxy protocol
        """
        return pulumi.get(self, "accept_proxy_protocol")

    @accept_proxy_protocol.setter
    def accept_proxy_protocol(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "accept_proxy_protocol", value)

    @_builtins.property
    @pulumi.getter(name="certificateInstance")
    def certificate_instance(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        certificate instance for the Loadbalancer
        """
        return pulumi.get(self, "certificate_instance")

    @certificate_instance.setter
    def certificate_instance(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate_instance", value)

    @_builtins.property
    @pulumi.getter(name="connectionLimit")
    def connection_limit(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Connection limit for Loadbalancer
        """
        return pulumi.get(self, "connection_limit")

    @connection_limit.setter
    def connection_limit(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "connection_limit", value)

    @_builtins.property
    @pulumi.getter(name="defaultPool")
    def default_pool(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Loadbalancer default pool info
        """
        return pulumi.get(self, "default_pool")

    @default_pool.setter
    def default_pool(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_pool", value)

    @_builtins.property
    @pulumi.getter(name="httpsRedirect")
    def https_redirect(self) -> Optional[pulumi.Input['IsLbListenerHttpsRedirectArgs']]:
        """
        If present, the target listener that requests are redirected to.
        """
        return pulumi.get(self, "https_redirect")

    @https_redirect.setter
    def https_redirect(self, value: Optional[pulumi.Input['IsLbListenerHttpsRedirectArgs']]):
        pulumi.set(self, "https_redirect", value)

    @_builtins.property
    @pulumi.getter(name="httpsRedirectListener")
    @_utilities.deprecated("""Deprecated""")
    def https_redirect_listener(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the listener that will be set as http redirect target
        """
        return pulumi.get(self, "https_redirect_listener")

    @https_redirect_listener.setter
    def https_redirect_listener(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "https_redirect_listener", value)

    @_builtins.property
    @pulumi.getter(name="httpsRedirectStatusCode")
    @_utilities.deprecated("""Deprecated""")
    def https_redirect_status_code(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The HTTP status code to be returned in the redirect response
        """
        return pulumi.get(self, "https_redirect_status_code")

    @https_redirect_status_code.setter
    def https_redirect_status_code(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "https_redirect_status_code", value)

    @_builtins.property
    @pulumi.getter(name="httpsRedirectUri")
    @_utilities.deprecated("""Deprecated""")
    def https_redirect_uri(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Target URI where traffic will be redirected
        """
        return pulumi.get(self, "https_redirect_uri")

    @https_redirect_uri.setter
    def https_redirect_uri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "https_redirect_uri", value)

    @_builtins.property
    @pulumi.getter(name="idleConnectionTimeout")
    def idle_connection_timeout(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        idle connection timeout of listener
        """
        return pulumi.get(self, "idle_connection_timeout")

    @idle_connection_timeout.setter
    def idle_connection_timeout(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "idle_connection_timeout", value)

    @_builtins.property
    @pulumi.getter(name="isLbListenerId")
    def is_lb_listener_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_lb_listener_id")

    @is_lb_listener_id.setter
    def is_lb_listener_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_lb_listener_id", value)

    @_builtins.property
    @pulumi.getter
    def lb(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Loadbalancer listener ID
        """
        return pulumi.get(self, "lb")

    @lb.setter
    def lb(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lb", value)

    @_builtins.property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "listener_id")

    @listener_id.setter
    def listener_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "listener_id", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Loadbalancer listener port
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter(name="portMax")
    def port_max(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The inclusive upper bound of the range of ports used by this listener. Only load balancers in the `network` family
        support more than one port per listener
        """
        return pulumi.get(self, "port_max")

    @port_max.setter
    def port_max(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port_max", value)

    @_builtins.property
    @pulumi.getter(name="portMin")
    def port_min(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The inclusive lower bound of the range of ports used by this listener. Only load balancers in the `network` family
        support more than one port per listener.
        """
        return pulumi.get(self, "port_min")

    @port_min.setter
    def port_min(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port_min", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Loadbalancer protocol
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="relatedCrn")
    def related_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The crn of the LB resource
        """
        return pulumi.get(self, "related_crn")

    @related_crn.setter
    def related_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "related_crn", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Loadbalancer listener status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsLbListenerTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsLbListenerTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/isLbListener:IsLbListener")
class IsLbListener(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accept_proxy_protocol: Optional[pulumi.Input[_builtins.bool]] = None,
                 certificate_instance: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_limit: Optional[pulumi.Input[_builtins.float]] = None,
                 default_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 https_redirect: Optional[pulumi.Input[Union['IsLbListenerHttpsRedirectArgs', 'IsLbListenerHttpsRedirectArgsDict']]] = None,
                 https_redirect_listener: Optional[pulumi.Input[_builtins.str]] = None,
                 https_redirect_status_code: Optional[pulumi.Input[_builtins.float]] = None,
                 https_redirect_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 idle_connection_timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 is_lb_listener_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lb: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 port_max: Optional[pulumi.Input[_builtins.float]] = None,
                 port_min: Optional[pulumi.Input[_builtins.float]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsLbListenerTimeoutsArgs', 'IsLbListenerTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a IsLbListener resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] accept_proxy_protocol: Listener will forward proxy protocol
        :param pulumi.Input[_builtins.str] certificate_instance: certificate instance for the Loadbalancer
        :param pulumi.Input[_builtins.float] connection_limit: Connection limit for Loadbalancer
        :param pulumi.Input[_builtins.str] default_pool: Loadbalancer default pool info
        :param pulumi.Input[Union['IsLbListenerHttpsRedirectArgs', 'IsLbListenerHttpsRedirectArgsDict']] https_redirect: If present, the target listener that requests are redirected to.
        :param pulumi.Input[_builtins.str] https_redirect_listener: ID of the listener that will be set as http redirect target
        :param pulumi.Input[_builtins.float] https_redirect_status_code: The HTTP status code to be returned in the redirect response
        :param pulumi.Input[_builtins.str] https_redirect_uri: Target URI where traffic will be redirected
        :param pulumi.Input[_builtins.float] idle_connection_timeout: idle connection timeout of listener
        :param pulumi.Input[_builtins.str] lb: Loadbalancer listener ID
        :param pulumi.Input[_builtins.float] port: Loadbalancer listener port
        :param pulumi.Input[_builtins.float] port_max: The inclusive upper bound of the range of ports used by this listener. Only load balancers in the `network` family
               support more than one port per listener
        :param pulumi.Input[_builtins.float] port_min: The inclusive lower bound of the range of ports used by this listener. Only load balancers in the `network` family
               support more than one port per listener.
        :param pulumi.Input[_builtins.str] protocol: Loadbalancer protocol
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsLbListenerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsLbListener resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsLbListenerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsLbListenerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accept_proxy_protocol: Optional[pulumi.Input[_builtins.bool]] = None,
                 certificate_instance: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_limit: Optional[pulumi.Input[_builtins.float]] = None,
                 default_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 https_redirect: Optional[pulumi.Input[Union['IsLbListenerHttpsRedirectArgs', 'IsLbListenerHttpsRedirectArgsDict']]] = None,
                 https_redirect_listener: Optional[pulumi.Input[_builtins.str]] = None,
                 https_redirect_status_code: Optional[pulumi.Input[_builtins.float]] = None,
                 https_redirect_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 idle_connection_timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 is_lb_listener_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lb: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 port_max: Optional[pulumi.Input[_builtins.float]] = None,
                 port_min: Optional[pulumi.Input[_builtins.float]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsLbListenerTimeoutsArgs', 'IsLbListenerTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsLbListenerArgs.__new__(IsLbListenerArgs)

            __props__.__dict__["accept_proxy_protocol"] = accept_proxy_protocol
            __props__.__dict__["certificate_instance"] = certificate_instance
            __props__.__dict__["connection_limit"] = connection_limit
            __props__.__dict__["default_pool"] = default_pool
            __props__.__dict__["https_redirect"] = https_redirect
            __props__.__dict__["https_redirect_listener"] = https_redirect_listener
            __props__.__dict__["https_redirect_status_code"] = https_redirect_status_code
            __props__.__dict__["https_redirect_uri"] = https_redirect_uri
            __props__.__dict__["idle_connection_timeout"] = idle_connection_timeout
            __props__.__dict__["is_lb_listener_id"] = is_lb_listener_id
            if lb is None and not opts.urn:
                raise TypeError("Missing required property 'lb'")
            __props__.__dict__["lb"] = lb
            __props__.__dict__["port"] = port
            __props__.__dict__["port_max"] = port_max
            __props__.__dict__["port_min"] = port_min
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["listener_id"] = None
            __props__.__dict__["related_crn"] = None
            __props__.__dict__["status"] = None
        super(IsLbListener, __self__).__init__(
            'ibm:index/isLbListener:IsLbListener',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accept_proxy_protocol: Optional[pulumi.Input[_builtins.bool]] = None,
            certificate_instance: Optional[pulumi.Input[_builtins.str]] = None,
            connection_limit: Optional[pulumi.Input[_builtins.float]] = None,
            default_pool: Optional[pulumi.Input[_builtins.str]] = None,
            https_redirect: Optional[pulumi.Input[Union['IsLbListenerHttpsRedirectArgs', 'IsLbListenerHttpsRedirectArgsDict']]] = None,
            https_redirect_listener: Optional[pulumi.Input[_builtins.str]] = None,
            https_redirect_status_code: Optional[pulumi.Input[_builtins.float]] = None,
            https_redirect_uri: Optional[pulumi.Input[_builtins.str]] = None,
            idle_connection_timeout: Optional[pulumi.Input[_builtins.float]] = None,
            is_lb_listener_id: Optional[pulumi.Input[_builtins.str]] = None,
            lb: Optional[pulumi.Input[_builtins.str]] = None,
            listener_id: Optional[pulumi.Input[_builtins.str]] = None,
            port: Optional[pulumi.Input[_builtins.float]] = None,
            port_max: Optional[pulumi.Input[_builtins.float]] = None,
            port_min: Optional[pulumi.Input[_builtins.float]] = None,
            protocol: Optional[pulumi.Input[_builtins.str]] = None,
            related_crn: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['IsLbListenerTimeoutsArgs', 'IsLbListenerTimeoutsArgsDict']]] = None) -> 'IsLbListener':
        """
        Get an existing IsLbListener resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] accept_proxy_protocol: Listener will forward proxy protocol
        :param pulumi.Input[_builtins.str] certificate_instance: certificate instance for the Loadbalancer
        :param pulumi.Input[_builtins.float] connection_limit: Connection limit for Loadbalancer
        :param pulumi.Input[_builtins.str] default_pool: Loadbalancer default pool info
        :param pulumi.Input[Union['IsLbListenerHttpsRedirectArgs', 'IsLbListenerHttpsRedirectArgsDict']] https_redirect: If present, the target listener that requests are redirected to.
        :param pulumi.Input[_builtins.str] https_redirect_listener: ID of the listener that will be set as http redirect target
        :param pulumi.Input[_builtins.float] https_redirect_status_code: The HTTP status code to be returned in the redirect response
        :param pulumi.Input[_builtins.str] https_redirect_uri: Target URI where traffic will be redirected
        :param pulumi.Input[_builtins.float] idle_connection_timeout: idle connection timeout of listener
        :param pulumi.Input[_builtins.str] lb: Loadbalancer listener ID
        :param pulumi.Input[_builtins.float] port: Loadbalancer listener port
        :param pulumi.Input[_builtins.float] port_max: The inclusive upper bound of the range of ports used by this listener. Only load balancers in the `network` family
               support more than one port per listener
        :param pulumi.Input[_builtins.float] port_min: The inclusive lower bound of the range of ports used by this listener. Only load balancers in the `network` family
               support more than one port per listener.
        :param pulumi.Input[_builtins.str] protocol: Loadbalancer protocol
        :param pulumi.Input[_builtins.str] related_crn: The crn of the LB resource
        :param pulumi.Input[_builtins.str] status: Loadbalancer listener status
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsLbListenerState.__new__(_IsLbListenerState)

        __props__.__dict__["accept_proxy_protocol"] = accept_proxy_protocol
        __props__.__dict__["certificate_instance"] = certificate_instance
        __props__.__dict__["connection_limit"] = connection_limit
        __props__.__dict__["default_pool"] = default_pool
        __props__.__dict__["https_redirect"] = https_redirect
        __props__.__dict__["https_redirect_listener"] = https_redirect_listener
        __props__.__dict__["https_redirect_status_code"] = https_redirect_status_code
        __props__.__dict__["https_redirect_uri"] = https_redirect_uri
        __props__.__dict__["idle_connection_timeout"] = idle_connection_timeout
        __props__.__dict__["is_lb_listener_id"] = is_lb_listener_id
        __props__.__dict__["lb"] = lb
        __props__.__dict__["listener_id"] = listener_id
        __props__.__dict__["port"] = port
        __props__.__dict__["port_max"] = port_max
        __props__.__dict__["port_min"] = port_min
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["related_crn"] = related_crn
        __props__.__dict__["status"] = status
        __props__.__dict__["timeouts"] = timeouts
        return IsLbListener(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="acceptProxyProtocol")
    def accept_proxy_protocol(self) -> pulumi.Output[_builtins.bool]:
        """
        Listener will forward proxy protocol
        """
        return pulumi.get(self, "accept_proxy_protocol")

    @_builtins.property
    @pulumi.getter(name="certificateInstance")
    def certificate_instance(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        certificate instance for the Loadbalancer
        """
        return pulumi.get(self, "certificate_instance")

    @_builtins.property
    @pulumi.getter(name="connectionLimit")
    def connection_limit(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Connection limit for Loadbalancer
        """
        return pulumi.get(self, "connection_limit")

    @_builtins.property
    @pulumi.getter(name="defaultPool")
    def default_pool(self) -> pulumi.Output[_builtins.str]:
        """
        Loadbalancer default pool info
        """
        return pulumi.get(self, "default_pool")

    @_builtins.property
    @pulumi.getter(name="httpsRedirect")
    def https_redirect(self) -> pulumi.Output[Optional['outputs.IsLbListenerHttpsRedirect']]:
        """
        If present, the target listener that requests are redirected to.
        """
        return pulumi.get(self, "https_redirect")

    @_builtins.property
    @pulumi.getter(name="httpsRedirectListener")
    @_utilities.deprecated("""Deprecated""")
    def https_redirect_listener(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        ID of the listener that will be set as http redirect target
        """
        return pulumi.get(self, "https_redirect_listener")

    @_builtins.property
    @pulumi.getter(name="httpsRedirectStatusCode")
    @_utilities.deprecated("""Deprecated""")
    def https_redirect_status_code(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        The HTTP status code to be returned in the redirect response
        """
        return pulumi.get(self, "https_redirect_status_code")

    @_builtins.property
    @pulumi.getter(name="httpsRedirectUri")
    @_utilities.deprecated("""Deprecated""")
    def https_redirect_uri(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Target URI where traffic will be redirected
        """
        return pulumi.get(self, "https_redirect_uri")

    @_builtins.property
    @pulumi.getter(name="idleConnectionTimeout")
    def idle_connection_timeout(self) -> pulumi.Output[_builtins.float]:
        """
        idle connection timeout of listener
        """
        return pulumi.get(self, "idle_connection_timeout")

    @_builtins.property
    @pulumi.getter(name="isLbListenerId")
    def is_lb_listener_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_lb_listener_id")

    @_builtins.property
    @pulumi.getter
    def lb(self) -> pulumi.Output[_builtins.str]:
        """
        Loadbalancer listener ID
        """
        return pulumi.get(self, "lb")

    @_builtins.property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "listener_id")

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Output[_builtins.float]:
        """
        Loadbalancer listener port
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="portMax")
    def port_max(self) -> pulumi.Output[_builtins.float]:
        """
        The inclusive upper bound of the range of ports used by this listener. Only load balancers in the `network` family
        support more than one port per listener
        """
        return pulumi.get(self, "port_max")

    @_builtins.property
    @pulumi.getter(name="portMin")
    def port_min(self) -> pulumi.Output[_builtins.float]:
        """
        The inclusive lower bound of the range of ports used by this listener. Only load balancers in the `network` family
        support more than one port per listener.
        """
        return pulumi.get(self, "port_min")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[_builtins.str]:
        """
        Loadbalancer protocol
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="relatedCrn")
    def related_crn(self) -> pulumi.Output[_builtins.str]:
        """
        The crn of the LB resource
        """
        return pulumi.get(self, "related_crn")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Loadbalancer listener status
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IsLbListenerTimeouts']]:
        return pulumi.get(self, "timeouts")

