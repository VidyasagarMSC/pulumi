# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetBackupRecoveryObjectSnapshotsResult',
    'AwaitableGetBackupRecoveryObjectSnapshotsResult',
    'get_backup_recovery_object_snapshots',
    'get_backup_recovery_object_snapshots_output',
]

@pulumi.output_type
class GetBackupRecoveryObjectSnapshotsResult:
    """
    A collection of values returned by getBackupRecoveryObjectSnapshots.
    """
    def __init__(__self__, from_time_usecs=None, id=None, object_action_keys=None, object_id=None, protection_group_ids=None, region_ids=None, run_instance_ids=None, run_start_from_time_usecs=None, run_start_to_time_usecs=None, run_types=None, snapshot_actions=None, snapshots=None, to_time_usecs=None, x_ibm_tenant_id=None):
        if from_time_usecs and not isinstance(from_time_usecs, float):
            raise TypeError("Expected argument 'from_time_usecs' to be a float")
        pulumi.set(__self__, "from_time_usecs", from_time_usecs)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if object_action_keys and not isinstance(object_action_keys, list):
            raise TypeError("Expected argument 'object_action_keys' to be a list")
        pulumi.set(__self__, "object_action_keys", object_action_keys)
        if object_id and not isinstance(object_id, float):
            raise TypeError("Expected argument 'object_id' to be a float")
        pulumi.set(__self__, "object_id", object_id)
        if protection_group_ids and not isinstance(protection_group_ids, list):
            raise TypeError("Expected argument 'protection_group_ids' to be a list")
        pulumi.set(__self__, "protection_group_ids", protection_group_ids)
        if region_ids and not isinstance(region_ids, list):
            raise TypeError("Expected argument 'region_ids' to be a list")
        pulumi.set(__self__, "region_ids", region_ids)
        if run_instance_ids and not isinstance(run_instance_ids, list):
            raise TypeError("Expected argument 'run_instance_ids' to be a list")
        pulumi.set(__self__, "run_instance_ids", run_instance_ids)
        if run_start_from_time_usecs and not isinstance(run_start_from_time_usecs, float):
            raise TypeError("Expected argument 'run_start_from_time_usecs' to be a float")
        pulumi.set(__self__, "run_start_from_time_usecs", run_start_from_time_usecs)
        if run_start_to_time_usecs and not isinstance(run_start_to_time_usecs, float):
            raise TypeError("Expected argument 'run_start_to_time_usecs' to be a float")
        pulumi.set(__self__, "run_start_to_time_usecs", run_start_to_time_usecs)
        if run_types and not isinstance(run_types, list):
            raise TypeError("Expected argument 'run_types' to be a list")
        pulumi.set(__self__, "run_types", run_types)
        if snapshot_actions and not isinstance(snapshot_actions, list):
            raise TypeError("Expected argument 'snapshot_actions' to be a list")
        pulumi.set(__self__, "snapshot_actions", snapshot_actions)
        if snapshots and not isinstance(snapshots, list):
            raise TypeError("Expected argument 'snapshots' to be a list")
        pulumi.set(__self__, "snapshots", snapshots)
        if to_time_usecs and not isinstance(to_time_usecs, float):
            raise TypeError("Expected argument 'to_time_usecs' to be a float")
        pulumi.set(__self__, "to_time_usecs", to_time_usecs)
        if x_ibm_tenant_id and not isinstance(x_ibm_tenant_id, str):
            raise TypeError("Expected argument 'x_ibm_tenant_id' to be a str")
        pulumi.set(__self__, "x_ibm_tenant_id", x_ibm_tenant_id)

    @_builtins.property
    @pulumi.getter(name="fromTimeUsecs")
    def from_time_usecs(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "from_time_usecs")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="objectActionKeys")
    def object_action_keys(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "object_action_keys")

    @_builtins.property
    @pulumi.getter(name="objectId")
    def object_id(self) -> _builtins.float:
        return pulumi.get(self, "object_id")

    @_builtins.property
    @pulumi.getter(name="protectionGroupIds")
    def protection_group_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "protection_group_ids")

    @_builtins.property
    @pulumi.getter(name="regionIds")
    def region_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "region_ids")

    @_builtins.property
    @pulumi.getter(name="runInstanceIds")
    def run_instance_ids(self) -> Optional[Sequence[_builtins.float]]:
        return pulumi.get(self, "run_instance_ids")

    @_builtins.property
    @pulumi.getter(name="runStartFromTimeUsecs")
    def run_start_from_time_usecs(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "run_start_from_time_usecs")

    @_builtins.property
    @pulumi.getter(name="runStartToTimeUsecs")
    def run_start_to_time_usecs(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "run_start_to_time_usecs")

    @_builtins.property
    @pulumi.getter(name="runTypes")
    def run_types(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "run_types")

    @_builtins.property
    @pulumi.getter(name="snapshotActions")
    def snapshot_actions(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "snapshot_actions")

    @_builtins.property
    @pulumi.getter
    def snapshots(self) -> Sequence['outputs.GetBackupRecoveryObjectSnapshotsSnapshotResult']:
        return pulumi.get(self, "snapshots")

    @_builtins.property
    @pulumi.getter(name="toTimeUsecs")
    def to_time_usecs(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "to_time_usecs")

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> _builtins.str:
        return pulumi.get(self, "x_ibm_tenant_id")


class AwaitableGetBackupRecoveryObjectSnapshotsResult(GetBackupRecoveryObjectSnapshotsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupRecoveryObjectSnapshotsResult(
            from_time_usecs=self.from_time_usecs,
            id=self.id,
            object_action_keys=self.object_action_keys,
            object_id=self.object_id,
            protection_group_ids=self.protection_group_ids,
            region_ids=self.region_ids,
            run_instance_ids=self.run_instance_ids,
            run_start_from_time_usecs=self.run_start_from_time_usecs,
            run_start_to_time_usecs=self.run_start_to_time_usecs,
            run_types=self.run_types,
            snapshot_actions=self.snapshot_actions,
            snapshots=self.snapshots,
            to_time_usecs=self.to_time_usecs,
            x_ibm_tenant_id=self.x_ibm_tenant_id)


def get_backup_recovery_object_snapshots(from_time_usecs: Optional[_builtins.float] = None,
                                         id: Optional[_builtins.str] = None,
                                         object_action_keys: Optional[Sequence[_builtins.str]] = None,
                                         object_id: Optional[_builtins.float] = None,
                                         protection_group_ids: Optional[Sequence[_builtins.str]] = None,
                                         region_ids: Optional[Sequence[_builtins.str]] = None,
                                         run_instance_ids: Optional[Sequence[_builtins.float]] = None,
                                         run_start_from_time_usecs: Optional[_builtins.float] = None,
                                         run_start_to_time_usecs: Optional[_builtins.float] = None,
                                         run_types: Optional[Sequence[_builtins.str]] = None,
                                         snapshot_actions: Optional[Sequence[_builtins.str]] = None,
                                         to_time_usecs: Optional[_builtins.float] = None,
                                         x_ibm_tenant_id: Optional[_builtins.str] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupRecoveryObjectSnapshotsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['fromTimeUsecs'] = from_time_usecs
    __args__['id'] = id
    __args__['objectActionKeys'] = object_action_keys
    __args__['objectId'] = object_id
    __args__['protectionGroupIds'] = protection_group_ids
    __args__['regionIds'] = region_ids
    __args__['runInstanceIds'] = run_instance_ids
    __args__['runStartFromTimeUsecs'] = run_start_from_time_usecs
    __args__['runStartToTimeUsecs'] = run_start_to_time_usecs
    __args__['runTypes'] = run_types
    __args__['snapshotActions'] = snapshot_actions
    __args__['toTimeUsecs'] = to_time_usecs
    __args__['xIbmTenantId'] = x_ibm_tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getBackupRecoveryObjectSnapshots:getBackupRecoveryObjectSnapshots', __args__, opts=opts, typ=GetBackupRecoveryObjectSnapshotsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetBackupRecoveryObjectSnapshotsResult(
        from_time_usecs=pulumi.get(__ret__, 'from_time_usecs'),
        id=pulumi.get(__ret__, 'id'),
        object_action_keys=pulumi.get(__ret__, 'object_action_keys'),
        object_id=pulumi.get(__ret__, 'object_id'),
        protection_group_ids=pulumi.get(__ret__, 'protection_group_ids'),
        region_ids=pulumi.get(__ret__, 'region_ids'),
        run_instance_ids=pulumi.get(__ret__, 'run_instance_ids'),
        run_start_from_time_usecs=pulumi.get(__ret__, 'run_start_from_time_usecs'),
        run_start_to_time_usecs=pulumi.get(__ret__, 'run_start_to_time_usecs'),
        run_types=pulumi.get(__ret__, 'run_types'),
        snapshot_actions=pulumi.get(__ret__, 'snapshot_actions'),
        snapshots=pulumi.get(__ret__, 'snapshots'),
        to_time_usecs=pulumi.get(__ret__, 'to_time_usecs'),
        x_ibm_tenant_id=pulumi.get(__ret__, 'x_ibm_tenant_id'))
def get_backup_recovery_object_snapshots_output(from_time_usecs: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                                                id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                object_action_keys: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                object_id: Optional[pulumi.Input[_builtins.float]] = None,
                                                protection_group_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                region_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                run_instance_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.float]]]] = None,
                                                run_start_from_time_usecs: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                                                run_start_to_time_usecs: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                                                run_types: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                snapshot_actions: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                to_time_usecs: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                                                x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBackupRecoveryObjectSnapshotsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['fromTimeUsecs'] = from_time_usecs
    __args__['id'] = id
    __args__['objectActionKeys'] = object_action_keys
    __args__['objectId'] = object_id
    __args__['protectionGroupIds'] = protection_group_ids
    __args__['regionIds'] = region_ids
    __args__['runInstanceIds'] = run_instance_ids
    __args__['runStartFromTimeUsecs'] = run_start_from_time_usecs
    __args__['runStartToTimeUsecs'] = run_start_to_time_usecs
    __args__['runTypes'] = run_types
    __args__['snapshotActions'] = snapshot_actions
    __args__['toTimeUsecs'] = to_time_usecs
    __args__['xIbmTenantId'] = x_ibm_tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getBackupRecoveryObjectSnapshots:getBackupRecoveryObjectSnapshots', __args__, opts=opts, typ=GetBackupRecoveryObjectSnapshotsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetBackupRecoveryObjectSnapshotsResult(
        from_time_usecs=pulumi.get(__response__, 'from_time_usecs'),
        id=pulumi.get(__response__, 'id'),
        object_action_keys=pulumi.get(__response__, 'object_action_keys'),
        object_id=pulumi.get(__response__, 'object_id'),
        protection_group_ids=pulumi.get(__response__, 'protection_group_ids'),
        region_ids=pulumi.get(__response__, 'region_ids'),
        run_instance_ids=pulumi.get(__response__, 'run_instance_ids'),
        run_start_from_time_usecs=pulumi.get(__response__, 'run_start_from_time_usecs'),
        run_start_to_time_usecs=pulumi.get(__response__, 'run_start_to_time_usecs'),
        run_types=pulumi.get(__response__, 'run_types'),
        snapshot_actions=pulumi.get(__response__, 'snapshot_actions'),
        snapshots=pulumi.get(__response__, 'snapshots'),
        to_time_usecs=pulumi.get(__response__, 'to_time_usecs'),
        x_ibm_tenant_id=pulumi.get(__response__, 'x_ibm_tenant_id')))
