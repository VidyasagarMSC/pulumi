# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetBackupRecoveryConnectorLogsResult',
    'AwaitableGetBackupRecoveryConnectorLogsResult',
    'get_backup_recovery_connector_logs',
    'get_backup_recovery_connector_logs_output',
]

@pulumi.output_type
class GetBackupRecoveryConnectorLogsResult:
    """
    A collection of values returned by getBackupRecoveryConnectorLogs.
    """
    def __init__(__self__, access_token=None, connector_logs=None, id=None):
        if access_token and not isinstance(access_token, str):
            raise TypeError("Expected argument 'access_token' to be a str")
        pulumi.set(__self__, "access_token", access_token)
        if connector_logs and not isinstance(connector_logs, list):
            raise TypeError("Expected argument 'connector_logs' to be a list")
        pulumi.set(__self__, "connector_logs", connector_logs)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> _builtins.str:
        return pulumi.get(self, "access_token")

    @_builtins.property
    @pulumi.getter(name="connectorLogs")
    def connector_logs(self) -> Sequence['outputs.GetBackupRecoveryConnectorLogsConnectorLogResult']:
        return pulumi.get(self, "connector_logs")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")


class AwaitableGetBackupRecoveryConnectorLogsResult(GetBackupRecoveryConnectorLogsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupRecoveryConnectorLogsResult(
            access_token=self.access_token,
            connector_logs=self.connector_logs,
            id=self.id)


def get_backup_recovery_connector_logs(access_token: Optional[_builtins.str] = None,
                                       id: Optional[_builtins.str] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupRecoveryConnectorLogsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accessToken'] = access_token
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getBackupRecoveryConnectorLogs:getBackupRecoveryConnectorLogs', __args__, opts=opts, typ=GetBackupRecoveryConnectorLogsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetBackupRecoveryConnectorLogsResult(
        access_token=pulumi.get(__ret__, 'access_token'),
        connector_logs=pulumi.get(__ret__, 'connector_logs'),
        id=pulumi.get(__ret__, 'id'))
def get_backup_recovery_connector_logs_output(access_token: Optional[pulumi.Input[_builtins.str]] = None,
                                              id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBackupRecoveryConnectorLogsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accessToken'] = access_token
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getBackupRecoveryConnectorLogs:getBackupRecoveryConnectorLogs', __args__, opts=opts, typ=GetBackupRecoveryConnectorLogsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetBackupRecoveryConnectorLogsResult(
        access_token=pulumi.get(__response__, 'access_token'),
        connector_logs=pulumi.get(__response__, 'connector_logs'),
        id=pulumi.get(__response__, 'id')))
