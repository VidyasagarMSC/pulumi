# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SmImportedCertificateArgs', 'SmImportedCertificate']

@pulumi.input_type
class SmImportedCertificateArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 certificate: Optional[pulumi.Input[_builtins.str]] = None,
                 custom_metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 intermediate: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 managed_csr: Optional[pulumi.Input['SmImportedCertificateManagedCsrArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 private_key: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 sm_imported_certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
                 version_custom_metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a SmImportedCertificate resource.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] certificate: The PEM-encoded contents of your certificate.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] custom_metadata: The secret metadata that a user can customize.
        :param pulumi.Input[_builtins.str] description: An extended description of your secret.To protect your privacy, do not use personal data, such as your name or location,
               as a description for your secret group.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.str] intermediate: (Optional) The PEM-encoded intermediate certificate to associate with the root certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] labels: Labels that you can use to search for secrets in your instance.Up to 30 labels can be created.
        :param pulumi.Input['SmImportedCertificateManagedCsrArgs'] managed_csr: The data specified to create the CSR and the private key.
        :param pulumi.Input[_builtins.str] name: A human-readable name to assign to your secret.To protect your privacy, do not use personal data, such as your name or
               location, as a name for your secret.
        :param pulumi.Input[_builtins.str] private_key: (Optional for non managed CSR secrets) The PEM-encoded private key to associate with the certificate.
        :param pulumi.Input[_builtins.str] region: The region of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] secret_group_id: A UUID identifier, or `default` secret group.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] version_custom_metadata: The secret version metadata that a user can customize.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if custom_metadata is not None:
            pulumi.set(__self__, "custom_metadata", custom_metadata)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if intermediate is not None:
            pulumi.set(__self__, "intermediate", intermediate)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if managed_csr is not None:
            pulumi.set(__self__, "managed_csr", managed_csr)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_group_id is not None:
            pulumi.set(__self__, "secret_group_id", secret_group_id)
        if sm_imported_certificate_id is not None:
            pulumi.set(__self__, "sm_imported_certificate_id", sm_imported_certificate_id)
        if version_custom_metadata is not None:
            pulumi.set(__self__, "version_custom_metadata", version_custom_metadata)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the Secrets Manager instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The PEM-encoded contents of your certificate.
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate", value)

    @_builtins.property
    @pulumi.getter(name="customMetadata")
    def custom_metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        The secret metadata that a user can customize.
        """
        return pulumi.get(self, "custom_metadata")

    @custom_metadata.setter
    def custom_metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "custom_metadata", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        An extended description of your secret.To protect your privacy, do not use personal data, such as your name or location,
        as a description for your secret group.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter
    def intermediate(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        (Optional) The PEM-encoded intermediate certificate to associate with the root certificate.
        """
        return pulumi.get(self, "intermediate")

    @intermediate.setter
    def intermediate(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "intermediate", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Labels that you can use to search for secrets in your instance.Up to 30 labels can be created.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter(name="managedCsr")
    def managed_csr(self) -> Optional[pulumi.Input['SmImportedCertificateManagedCsrArgs']]:
        """
        The data specified to create the CSR and the private key.
        """
        return pulumi.get(self, "managed_csr")

    @managed_csr.setter
    def managed_csr(self, value: Optional[pulumi.Input['SmImportedCertificateManagedCsrArgs']]):
        pulumi.set(self, "managed_csr", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A human-readable name to assign to your secret.To protect your privacy, do not use personal data, such as your name or
        location, as a name for your secret.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        (Optional for non managed CSR secrets) The PEM-encoded private key to associate with the certificate.
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_key", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the Secrets Manager instance.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="secretGroupId")
    def secret_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A UUID identifier, or `default` secret group.
        """
        return pulumi.get(self, "secret_group_id")

    @secret_group_id.setter
    def secret_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_group_id", value)

    @_builtins.property
    @pulumi.getter(name="smImportedCertificateId")
    def sm_imported_certificate_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "sm_imported_certificate_id")

    @sm_imported_certificate_id.setter
    def sm_imported_certificate_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sm_imported_certificate_id", value)

    @_builtins.property
    @pulumi.getter(name="versionCustomMetadata")
    def version_custom_metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        The secret version metadata that a user can customize.
        """
        return pulumi.get(self, "version_custom_metadata")

    @version_custom_metadata.setter
    def version_custom_metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "version_custom_metadata", value)


@pulumi.input_type
class _SmImportedCertificateState:
    def __init__(__self__, *,
                 certificate: Optional[pulumi.Input[_builtins.str]] = None,
                 common_name: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 csr: Optional[pulumi.Input[_builtins.str]] = None,
                 custom_metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 downloaded: Optional[pulumi.Input[_builtins.bool]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 expiration_date: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 intermediate: Optional[pulumi.Input[_builtins.str]] = None,
                 intermediate_included: Optional[pulumi.Input[_builtins.bool]] = None,
                 issuer: Optional[pulumi.Input[_builtins.str]] = None,
                 key_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 locks_total: Optional[pulumi.Input[_builtins.float]] = None,
                 managed_csr: Optional[pulumi.Input['SmImportedCertificateManagedCsrArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 private_key: Optional[pulumi.Input[_builtins.str]] = None,
                 private_key_included: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_id: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_type: Optional[pulumi.Input[_builtins.str]] = None,
                 serial_number: Optional[pulumi.Input[_builtins.str]] = None,
                 signing_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 sm_imported_certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.float]] = None,
                 state_description: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 validities: Optional[pulumi.Input[Sequence[pulumi.Input['SmImportedCertificateValidityArgs']]]] = None,
                 version_custom_metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 versions_total: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering SmImportedCertificate resources.
        :param pulumi.Input[_builtins.str] certificate: The PEM-encoded contents of your certificate.
        :param pulumi.Input[_builtins.str] common_name: The Common Name (AKA CN) represents the server name that is protected by the SSL certificate.
        :param pulumi.Input[_builtins.str] created_at: The date when a resource was created. The date format follows RFC 3339.
        :param pulumi.Input[_builtins.str] created_by: The unique identifier that is associated with the entity that created the secret.
        :param pulumi.Input[_builtins.str] crn: A CRN that uniquely identifies an IBM Cloud resource.
        :param pulumi.Input[_builtins.str] csr: The certificate signing request.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] custom_metadata: The secret metadata that a user can customize.
        :param pulumi.Input[_builtins.str] description: An extended description of your secret.To protect your privacy, do not use personal data, such as your name or location,
               as a description for your secret group.
        :param pulumi.Input[_builtins.bool] downloaded: Indicates whether the secret data that is associated with a secret version was retrieved in a call to the service API.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.str] expiration_date: The date a secret is expired. The date format follows RFC 3339.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] intermediate: (Optional) The PEM-encoded intermediate certificate to associate with the root certificate.
        :param pulumi.Input[_builtins.bool] intermediate_included: Indicates whether the certificate was imported with an associated intermediate certificate.
        :param pulumi.Input[_builtins.str] issuer: The distinguished name that identifies the entity that signed and issued the certificate.
        :param pulumi.Input[_builtins.str] key_algorithm: The identifier for the cryptographic algorithm to be used to generate the public key that is associated with the
               certificate.The algorithm that you select determines the encryption algorithm (`RSA` or `ECDSA`) and key size to be used
               to generate keys and sign certificates. For longer living certificates, it is recommended to use longer keys to provide
               more encryption protection. Allowed values: RSA2048, RSA4096, EC256, EC384.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] labels: Labels that you can use to search for secrets in your instance.Up to 30 labels can be created.
        :param pulumi.Input[_builtins.float] locks_total: The number of locks of the secret.
        :param pulumi.Input['SmImportedCertificateManagedCsrArgs'] managed_csr: The data specified to create the CSR and the private key.
        :param pulumi.Input[_builtins.str] name: A human-readable name to assign to your secret.To protect your privacy, do not use personal data, such as your name or
               location, as a name for your secret.
        :param pulumi.Input[_builtins.str] private_key: (Optional for non managed CSR secrets) The PEM-encoded private key to associate with the certificate.
        :param pulumi.Input[_builtins.bool] private_key_included: Indicates whether the certificate was imported with an associated private key.
        :param pulumi.Input[_builtins.str] region: The region of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] secret_group_id: A UUID identifier, or `default` secret group.
        :param pulumi.Input[_builtins.str] secret_id: A UUID identifier.
        :param pulumi.Input[_builtins.str] secret_type: The secret type. Supported types are arbitrary, certificates (imported, public, and private), IAM credentials,
               key-value, and user credentials.
        :param pulumi.Input[_builtins.str] serial_number: The unique serial number that was assigned to a certificate by the issuing certificate authority.
        :param pulumi.Input[_builtins.str] signing_algorithm: The identifier for the cryptographic algorithm that was used by the issuing certificate authority to sign a certificate.
        :param pulumi.Input[_builtins.float] state: The secret state that is based on NIST SP 800-57. States are integers and correspond to the `Pre-activation = 0`,
               `Active = 1`, `Suspended = 2`, `Deactivated = 3`, and `Destroyed = 5` values.
        :param pulumi.Input[_builtins.str] state_description: A text representation of the secret state.
        :param pulumi.Input[_builtins.str] updated_at: The date when a resource was recently modified. The date format follows RFC 3339.
        :param pulumi.Input[Sequence[pulumi.Input['SmImportedCertificateValidityArgs']]] validities: The date and time that the certificate validity period begins and ends.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] version_custom_metadata: The secret version metadata that a user can customize.
        :param pulumi.Input[_builtins.float] versions_total: The number of versions of the secret.
        """
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if csr is not None:
            pulumi.set(__self__, "csr", csr)
        if custom_metadata is not None:
            pulumi.set(__self__, "custom_metadata", custom_metadata)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if downloaded is not None:
            pulumi.set(__self__, "downloaded", downloaded)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if expiration_date is not None:
            pulumi.set(__self__, "expiration_date", expiration_date)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if intermediate is not None:
            pulumi.set(__self__, "intermediate", intermediate)
        if intermediate_included is not None:
            pulumi.set(__self__, "intermediate_included", intermediate_included)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if key_algorithm is not None:
            pulumi.set(__self__, "key_algorithm", key_algorithm)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if locks_total is not None:
            pulumi.set(__self__, "locks_total", locks_total)
        if managed_csr is not None:
            pulumi.set(__self__, "managed_csr", managed_csr)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if private_key_included is not None:
            pulumi.set(__self__, "private_key_included", private_key_included)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_group_id is not None:
            pulumi.set(__self__, "secret_group_id", secret_group_id)
        if secret_id is not None:
            pulumi.set(__self__, "secret_id", secret_id)
        if secret_type is not None:
            pulumi.set(__self__, "secret_type", secret_type)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if signing_algorithm is not None:
            pulumi.set(__self__, "signing_algorithm", signing_algorithm)
        if sm_imported_certificate_id is not None:
            pulumi.set(__self__, "sm_imported_certificate_id", sm_imported_certificate_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if state_description is not None:
            pulumi.set(__self__, "state_description", state_description)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if validities is not None:
            pulumi.set(__self__, "validities", validities)
        if version_custom_metadata is not None:
            pulumi.set(__self__, "version_custom_metadata", version_custom_metadata)
        if versions_total is not None:
            pulumi.set(__self__, "versions_total", versions_total)

    @_builtins.property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The PEM-encoded contents of your certificate.
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate", value)

    @_builtins.property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Common Name (AKA CN) represents the server name that is protected by the SSL certificate.
        """
        return pulumi.get(self, "common_name")

    @common_name.setter
    def common_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "common_name", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date when a resource was created. The date format follows RFC 3339.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier that is associated with the entity that created the secret.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A CRN that uniquely identifies an IBM Cloud resource.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter
    def csr(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The certificate signing request.
        """
        return pulumi.get(self, "csr")

    @csr.setter
    def csr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "csr", value)

    @_builtins.property
    @pulumi.getter(name="customMetadata")
    def custom_metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        The secret metadata that a user can customize.
        """
        return pulumi.get(self, "custom_metadata")

    @custom_metadata.setter
    def custom_metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "custom_metadata", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        An extended description of your secret.To protect your privacy, do not use personal data, such as your name or location,
        as a description for your secret group.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def downloaded(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the secret data that is associated with a secret version was retrieved in a call to the service API.
        """
        return pulumi.get(self, "downloaded")

    @downloaded.setter
    def downloaded(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "downloaded", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date a secret is expired. The date format follows RFC 3339.
        """
        return pulumi.get(self, "expiration_date")

    @expiration_date.setter
    def expiration_date(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expiration_date", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the Secrets Manager instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def intermediate(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        (Optional) The PEM-encoded intermediate certificate to associate with the root certificate.
        """
        return pulumi.get(self, "intermediate")

    @intermediate.setter
    def intermediate(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "intermediate", value)

    @_builtins.property
    @pulumi.getter(name="intermediateIncluded")
    def intermediate_included(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the certificate was imported with an associated intermediate certificate.
        """
        return pulumi.get(self, "intermediate_included")

    @intermediate_included.setter
    def intermediate_included(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "intermediate_included", value)

    @_builtins.property
    @pulumi.getter
    def issuer(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The distinguished name that identifies the entity that signed and issued the certificate.
        """
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "issuer", value)

    @_builtins.property
    @pulumi.getter(name="keyAlgorithm")
    def key_algorithm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The identifier for the cryptographic algorithm to be used to generate the public key that is associated with the
        certificate.The algorithm that you select determines the encryption algorithm (`RSA` or `ECDSA`) and key size to be used
        to generate keys and sign certificates. For longer living certificates, it is recommended to use longer keys to provide
        more encryption protection. Allowed values: RSA2048, RSA4096, EC256, EC384.
        """
        return pulumi.get(self, "key_algorithm")

    @key_algorithm.setter
    def key_algorithm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_algorithm", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Labels that you can use to search for secrets in your instance.Up to 30 labels can be created.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter(name="locksTotal")
    def locks_total(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The number of locks of the secret.
        """
        return pulumi.get(self, "locks_total")

    @locks_total.setter
    def locks_total(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "locks_total", value)

    @_builtins.property
    @pulumi.getter(name="managedCsr")
    def managed_csr(self) -> Optional[pulumi.Input['SmImportedCertificateManagedCsrArgs']]:
        """
        The data specified to create the CSR and the private key.
        """
        return pulumi.get(self, "managed_csr")

    @managed_csr.setter
    def managed_csr(self, value: Optional[pulumi.Input['SmImportedCertificateManagedCsrArgs']]):
        pulumi.set(self, "managed_csr", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A human-readable name to assign to your secret.To protect your privacy, do not use personal data, such as your name or
        location, as a name for your secret.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        (Optional for non managed CSR secrets) The PEM-encoded private key to associate with the certificate.
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_key", value)

    @_builtins.property
    @pulumi.getter(name="privateKeyIncluded")
    def private_key_included(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the certificate was imported with an associated private key.
        """
        return pulumi.get(self, "private_key_included")

    @private_key_included.setter
    def private_key_included(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "private_key_included", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the Secrets Manager instance.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="secretGroupId")
    def secret_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A UUID identifier, or `default` secret group.
        """
        return pulumi.get(self, "secret_group_id")

    @secret_group_id.setter
    def secret_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_group_id", value)

    @_builtins.property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A UUID identifier.
        """
        return pulumi.get(self, "secret_id")

    @secret_id.setter
    def secret_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_id", value)

    @_builtins.property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The secret type. Supported types are arbitrary, certificates (imported, public, and private), IAM credentials,
        key-value, and user credentials.
        """
        return pulumi.get(self, "secret_type")

    @secret_type.setter
    def secret_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_type", value)

    @_builtins.property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique serial number that was assigned to a certificate by the issuing certificate authority.
        """
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "serial_number", value)

    @_builtins.property
    @pulumi.getter(name="signingAlgorithm")
    def signing_algorithm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The identifier for the cryptographic algorithm that was used by the issuing certificate authority to sign a certificate.
        """
        return pulumi.get(self, "signing_algorithm")

    @signing_algorithm.setter
    def signing_algorithm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "signing_algorithm", value)

    @_builtins.property
    @pulumi.getter(name="smImportedCertificateId")
    def sm_imported_certificate_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "sm_imported_certificate_id")

    @sm_imported_certificate_id.setter
    def sm_imported_certificate_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sm_imported_certificate_id", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The secret state that is based on NIST SP 800-57. States are integers and correspond to the `Pre-activation = 0`,
        `Active = 1`, `Suspended = 2`, `Deactivated = 3`, and `Destroyed = 5` values.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "state", value)

    @_builtins.property
    @pulumi.getter(name="stateDescription")
    def state_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A text representation of the secret state.
        """
        return pulumi.get(self, "state_description")

    @state_description.setter
    def state_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state_description", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date when a resource was recently modified. The date format follows RFC 3339.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter
    def validities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SmImportedCertificateValidityArgs']]]]:
        """
        The date and time that the certificate validity period begins and ends.
        """
        return pulumi.get(self, "validities")

    @validities.setter
    def validities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SmImportedCertificateValidityArgs']]]]):
        pulumi.set(self, "validities", value)

    @_builtins.property
    @pulumi.getter(name="versionCustomMetadata")
    def version_custom_metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        The secret version metadata that a user can customize.
        """
        return pulumi.get(self, "version_custom_metadata")

    @version_custom_metadata.setter
    def version_custom_metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "version_custom_metadata", value)

    @_builtins.property
    @pulumi.getter(name="versionsTotal")
    def versions_total(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The number of versions of the secret.
        """
        return pulumi.get(self, "versions_total")

    @versions_total.setter
    def versions_total(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "versions_total", value)


@pulumi.type_token("ibm:index/smImportedCertificate:SmImportedCertificate")
class SmImportedCertificate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate: Optional[pulumi.Input[_builtins.str]] = None,
                 custom_metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 intermediate: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 managed_csr: Optional[pulumi.Input[Union['SmImportedCertificateManagedCsrArgs', 'SmImportedCertificateManagedCsrArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 private_key: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 sm_imported_certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
                 version_custom_metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Create a SmImportedCertificate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] certificate: The PEM-encoded contents of your certificate.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] custom_metadata: The secret metadata that a user can customize.
        :param pulumi.Input[_builtins.str] description: An extended description of your secret.To protect your privacy, do not use personal data, such as your name or location,
               as a description for your secret group.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] intermediate: (Optional) The PEM-encoded intermediate certificate to associate with the root certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] labels: Labels that you can use to search for secrets in your instance.Up to 30 labels can be created.
        :param pulumi.Input[Union['SmImportedCertificateManagedCsrArgs', 'SmImportedCertificateManagedCsrArgsDict']] managed_csr: The data specified to create the CSR and the private key.
        :param pulumi.Input[_builtins.str] name: A human-readable name to assign to your secret.To protect your privacy, do not use personal data, such as your name or
               location, as a name for your secret.
        :param pulumi.Input[_builtins.str] private_key: (Optional for non managed CSR secrets) The PEM-encoded private key to associate with the certificate.
        :param pulumi.Input[_builtins.str] region: The region of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] secret_group_id: A UUID identifier, or `default` secret group.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] version_custom_metadata: The secret version metadata that a user can customize.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SmImportedCertificateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SmImportedCertificate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SmImportedCertificateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SmImportedCertificateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate: Optional[pulumi.Input[_builtins.str]] = None,
                 custom_metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 intermediate: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 managed_csr: Optional[pulumi.Input[Union['SmImportedCertificateManagedCsrArgs', 'SmImportedCertificateManagedCsrArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 private_key: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 sm_imported_certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
                 version_custom_metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SmImportedCertificateArgs.__new__(SmImportedCertificateArgs)

            __props__.__dict__["certificate"] = None if certificate is None else pulumi.Output.secret(certificate)
            __props__.__dict__["custom_metadata"] = custom_metadata
            __props__.__dict__["description"] = description
            __props__.__dict__["endpoint_type"] = endpoint_type
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["intermediate"] = None if intermediate is None else pulumi.Output.secret(intermediate)
            __props__.__dict__["labels"] = labels
            __props__.__dict__["managed_csr"] = managed_csr
            __props__.__dict__["name"] = name
            __props__.__dict__["private_key"] = None if private_key is None else pulumi.Output.secret(private_key)
            __props__.__dict__["region"] = region
            __props__.__dict__["secret_group_id"] = secret_group_id
            __props__.__dict__["sm_imported_certificate_id"] = sm_imported_certificate_id
            __props__.__dict__["version_custom_metadata"] = version_custom_metadata
            __props__.__dict__["common_name"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["csr"] = None
            __props__.__dict__["downloaded"] = None
            __props__.__dict__["expiration_date"] = None
            __props__.__dict__["intermediate_included"] = None
            __props__.__dict__["issuer"] = None
            __props__.__dict__["key_algorithm"] = None
            __props__.__dict__["locks_total"] = None
            __props__.__dict__["private_key_included"] = None
            __props__.__dict__["secret_id"] = None
            __props__.__dict__["secret_type"] = None
            __props__.__dict__["serial_number"] = None
            __props__.__dict__["signing_algorithm"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["state_description"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["validities"] = None
            __props__.__dict__["versions_total"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["certificate", "intermediate", "privateKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(SmImportedCertificate, __self__).__init__(
            'ibm:index/smImportedCertificate:SmImportedCertificate',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            certificate: Optional[pulumi.Input[_builtins.str]] = None,
            common_name: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            created_by: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            csr: Optional[pulumi.Input[_builtins.str]] = None,
            custom_metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            downloaded: Optional[pulumi.Input[_builtins.bool]] = None,
            endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
            expiration_date: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            intermediate: Optional[pulumi.Input[_builtins.str]] = None,
            intermediate_included: Optional[pulumi.Input[_builtins.bool]] = None,
            issuer: Optional[pulumi.Input[_builtins.str]] = None,
            key_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
            labels: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            locks_total: Optional[pulumi.Input[_builtins.float]] = None,
            managed_csr: Optional[pulumi.Input[Union['SmImportedCertificateManagedCsrArgs', 'SmImportedCertificateManagedCsrArgsDict']]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            private_key: Optional[pulumi.Input[_builtins.str]] = None,
            private_key_included: Optional[pulumi.Input[_builtins.bool]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            secret_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            secret_id: Optional[pulumi.Input[_builtins.str]] = None,
            secret_type: Optional[pulumi.Input[_builtins.str]] = None,
            serial_number: Optional[pulumi.Input[_builtins.str]] = None,
            signing_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
            sm_imported_certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
            state: Optional[pulumi.Input[_builtins.float]] = None,
            state_description: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            validities: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SmImportedCertificateValidityArgs', 'SmImportedCertificateValidityArgsDict']]]]] = None,
            version_custom_metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            versions_total: Optional[pulumi.Input[_builtins.float]] = None) -> 'SmImportedCertificate':
        """
        Get an existing SmImportedCertificate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] certificate: The PEM-encoded contents of your certificate.
        :param pulumi.Input[_builtins.str] common_name: The Common Name (AKA CN) represents the server name that is protected by the SSL certificate.
        :param pulumi.Input[_builtins.str] created_at: The date when a resource was created. The date format follows RFC 3339.
        :param pulumi.Input[_builtins.str] created_by: The unique identifier that is associated with the entity that created the secret.
        :param pulumi.Input[_builtins.str] crn: A CRN that uniquely identifies an IBM Cloud resource.
        :param pulumi.Input[_builtins.str] csr: The certificate signing request.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] custom_metadata: The secret metadata that a user can customize.
        :param pulumi.Input[_builtins.str] description: An extended description of your secret.To protect your privacy, do not use personal data, such as your name or location,
               as a description for your secret group.
        :param pulumi.Input[_builtins.bool] downloaded: Indicates whether the secret data that is associated with a secret version was retrieved in a call to the service API.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.str] expiration_date: The date a secret is expired. The date format follows RFC 3339.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] intermediate: (Optional) The PEM-encoded intermediate certificate to associate with the root certificate.
        :param pulumi.Input[_builtins.bool] intermediate_included: Indicates whether the certificate was imported with an associated intermediate certificate.
        :param pulumi.Input[_builtins.str] issuer: The distinguished name that identifies the entity that signed and issued the certificate.
        :param pulumi.Input[_builtins.str] key_algorithm: The identifier for the cryptographic algorithm to be used to generate the public key that is associated with the
               certificate.The algorithm that you select determines the encryption algorithm (`RSA` or `ECDSA`) and key size to be used
               to generate keys and sign certificates. For longer living certificates, it is recommended to use longer keys to provide
               more encryption protection. Allowed values: RSA2048, RSA4096, EC256, EC384.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] labels: Labels that you can use to search for secrets in your instance.Up to 30 labels can be created.
        :param pulumi.Input[_builtins.float] locks_total: The number of locks of the secret.
        :param pulumi.Input[Union['SmImportedCertificateManagedCsrArgs', 'SmImportedCertificateManagedCsrArgsDict']] managed_csr: The data specified to create the CSR and the private key.
        :param pulumi.Input[_builtins.str] name: A human-readable name to assign to your secret.To protect your privacy, do not use personal data, such as your name or
               location, as a name for your secret.
        :param pulumi.Input[_builtins.str] private_key: (Optional for non managed CSR secrets) The PEM-encoded private key to associate with the certificate.
        :param pulumi.Input[_builtins.bool] private_key_included: Indicates whether the certificate was imported with an associated private key.
        :param pulumi.Input[_builtins.str] region: The region of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] secret_group_id: A UUID identifier, or `default` secret group.
        :param pulumi.Input[_builtins.str] secret_id: A UUID identifier.
        :param pulumi.Input[_builtins.str] secret_type: The secret type. Supported types are arbitrary, certificates (imported, public, and private), IAM credentials,
               key-value, and user credentials.
        :param pulumi.Input[_builtins.str] serial_number: The unique serial number that was assigned to a certificate by the issuing certificate authority.
        :param pulumi.Input[_builtins.str] signing_algorithm: The identifier for the cryptographic algorithm that was used by the issuing certificate authority to sign a certificate.
        :param pulumi.Input[_builtins.float] state: The secret state that is based on NIST SP 800-57. States are integers and correspond to the `Pre-activation = 0`,
               `Active = 1`, `Suspended = 2`, `Deactivated = 3`, and `Destroyed = 5` values.
        :param pulumi.Input[_builtins.str] state_description: A text representation of the secret state.
        :param pulumi.Input[_builtins.str] updated_at: The date when a resource was recently modified. The date format follows RFC 3339.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SmImportedCertificateValidityArgs', 'SmImportedCertificateValidityArgsDict']]]] validities: The date and time that the certificate validity period begins and ends.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] version_custom_metadata: The secret version metadata that a user can customize.
        :param pulumi.Input[_builtins.float] versions_total: The number of versions of the secret.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SmImportedCertificateState.__new__(_SmImportedCertificateState)

        __props__.__dict__["certificate"] = certificate
        __props__.__dict__["common_name"] = common_name
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["crn"] = crn
        __props__.__dict__["csr"] = csr
        __props__.__dict__["custom_metadata"] = custom_metadata
        __props__.__dict__["description"] = description
        __props__.__dict__["downloaded"] = downloaded
        __props__.__dict__["endpoint_type"] = endpoint_type
        __props__.__dict__["expiration_date"] = expiration_date
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["intermediate"] = intermediate
        __props__.__dict__["intermediate_included"] = intermediate_included
        __props__.__dict__["issuer"] = issuer
        __props__.__dict__["key_algorithm"] = key_algorithm
        __props__.__dict__["labels"] = labels
        __props__.__dict__["locks_total"] = locks_total
        __props__.__dict__["managed_csr"] = managed_csr
        __props__.__dict__["name"] = name
        __props__.__dict__["private_key"] = private_key
        __props__.__dict__["private_key_included"] = private_key_included
        __props__.__dict__["region"] = region
        __props__.__dict__["secret_group_id"] = secret_group_id
        __props__.__dict__["secret_id"] = secret_id
        __props__.__dict__["secret_type"] = secret_type
        __props__.__dict__["serial_number"] = serial_number
        __props__.__dict__["signing_algorithm"] = signing_algorithm
        __props__.__dict__["sm_imported_certificate_id"] = sm_imported_certificate_id
        __props__.__dict__["state"] = state
        __props__.__dict__["state_description"] = state_description
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["validities"] = validities
        __props__.__dict__["version_custom_metadata"] = version_custom_metadata
        __props__.__dict__["versions_total"] = versions_total
        return SmImportedCertificate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def certificate(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The PEM-encoded contents of your certificate.
        """
        return pulumi.get(self, "certificate")

    @_builtins.property
    @pulumi.getter(name="commonName")
    def common_name(self) -> pulumi.Output[_builtins.str]:
        """
        The Common Name (AKA CN) represents the server name that is protected by the SSL certificate.
        """
        return pulumi.get(self, "common_name")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date when a resource was created. The date format follows RFC 3339.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier that is associated with the entity that created the secret.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        A CRN that uniquely identifies an IBM Cloud resource.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def csr(self) -> pulumi.Output[_builtins.str]:
        """
        The certificate signing request.
        """
        return pulumi.get(self, "csr")

    @_builtins.property
    @pulumi.getter(name="customMetadata")
    def custom_metadata(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        The secret metadata that a user can customize.
        """
        return pulumi.get(self, "custom_metadata")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        An extended description of your secret.To protect your privacy, do not use personal data, such as your name or location,
        as a description for your secret group.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def downloaded(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether the secret data that is associated with a secret version was retrieved in a call to the service API.
        """
        return pulumi.get(self, "downloaded")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> pulumi.Output[_builtins.str]:
        """
        The date a secret is expired. The date format follows RFC 3339.
        """
        return pulumi.get(self, "expiration_date")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the Secrets Manager instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def intermediate(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        (Optional) The PEM-encoded intermediate certificate to associate with the root certificate.
        """
        return pulumi.get(self, "intermediate")

    @_builtins.property
    @pulumi.getter(name="intermediateIncluded")
    def intermediate_included(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether the certificate was imported with an associated intermediate certificate.
        """
        return pulumi.get(self, "intermediate_included")

    @_builtins.property
    @pulumi.getter
    def issuer(self) -> pulumi.Output[_builtins.str]:
        """
        The distinguished name that identifies the entity that signed and issued the certificate.
        """
        return pulumi.get(self, "issuer")

    @_builtins.property
    @pulumi.getter(name="keyAlgorithm")
    def key_algorithm(self) -> pulumi.Output[_builtins.str]:
        """
        The identifier for the cryptographic algorithm to be used to generate the public key that is associated with the
        certificate.The algorithm that you select determines the encryption algorithm (`RSA` or `ECDSA`) and key size to be used
        to generate keys and sign certificates. For longer living certificates, it is recommended to use longer keys to provide
        more encryption protection. Allowed values: RSA2048, RSA4096, EC256, EC384.
        """
        return pulumi.get(self, "key_algorithm")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Labels that you can use to search for secrets in your instance.Up to 30 labels can be created.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="locksTotal")
    def locks_total(self) -> pulumi.Output[_builtins.float]:
        """
        The number of locks of the secret.
        """
        return pulumi.get(self, "locks_total")

    @_builtins.property
    @pulumi.getter(name="managedCsr")
    def managed_csr(self) -> pulumi.Output[Optional['outputs.SmImportedCertificateManagedCsr']]:
        """
        The data specified to create the CSR and the private key.
        """
        return pulumi.get(self, "managed_csr")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        A human-readable name to assign to your secret.To protect your privacy, do not use personal data, such as your name or
        location, as a name for your secret.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        (Optional for non managed CSR secrets) The PEM-encoded private key to associate with the certificate.
        """
        return pulumi.get(self, "private_key")

    @_builtins.property
    @pulumi.getter(name="privateKeyIncluded")
    def private_key_included(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether the certificate was imported with an associated private key.
        """
        return pulumi.get(self, "private_key_included")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region of the Secrets Manager instance.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="secretGroupId")
    def secret_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        A UUID identifier, or `default` secret group.
        """
        return pulumi.get(self, "secret_group_id")

    @_builtins.property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> pulumi.Output[_builtins.str]:
        """
        A UUID identifier.
        """
        return pulumi.get(self, "secret_id")

    @_builtins.property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> pulumi.Output[_builtins.str]:
        """
        The secret type. Supported types are arbitrary, certificates (imported, public, and private), IAM credentials,
        key-value, and user credentials.
        """
        return pulumi.get(self, "secret_type")

    @_builtins.property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> pulumi.Output[_builtins.str]:
        """
        The unique serial number that was assigned to a certificate by the issuing certificate authority.
        """
        return pulumi.get(self, "serial_number")

    @_builtins.property
    @pulumi.getter(name="signingAlgorithm")
    def signing_algorithm(self) -> pulumi.Output[_builtins.str]:
        """
        The identifier for the cryptographic algorithm that was used by the issuing certificate authority to sign a certificate.
        """
        return pulumi.get(self, "signing_algorithm")

    @_builtins.property
    @pulumi.getter(name="smImportedCertificateId")
    def sm_imported_certificate_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "sm_imported_certificate_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> pulumi.Output[_builtins.float]:
        """
        The secret state that is based on NIST SP 800-57. States are integers and correspond to the `Pre-activation = 0`,
        `Active = 1`, `Suspended = 2`, `Deactivated = 3`, and `Destroyed = 5` values.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="stateDescription")
    def state_description(self) -> pulumi.Output[_builtins.str]:
        """
        A text representation of the secret state.
        """
        return pulumi.get(self, "state_description")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date when a resource was recently modified. The date format follows RFC 3339.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def validities(self) -> pulumi.Output[Sequence['outputs.SmImportedCertificateValidity']]:
        """
        The date and time that the certificate validity period begins and ends.
        """
        return pulumi.get(self, "validities")

    @_builtins.property
    @pulumi.getter(name="versionCustomMetadata")
    def version_custom_metadata(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        The secret version metadata that a user can customize.
        """
        return pulumi.get(self, "version_custom_metadata")

    @_builtins.property
    @pulumi.getter(name="versionsTotal")
    def versions_total(self) -> pulumi.Output[_builtins.float]:
        """
        The number of versions of the secret.
        """
        return pulumi.get(self, "versions_total")

