# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSccControlLibrariesResult',
    'AwaitableGetSccControlLibrariesResult',
    'get_scc_control_libraries',
    'get_scc_control_libraries_output',
]

@pulumi.output_type
class GetSccControlLibrariesResult:
    """
    A collection of values returned by getSccControlLibraries.
    """
    def __init__(__self__, control_libraries=None, control_library_type=None, id=None, instance_id=None):
        if control_libraries and not isinstance(control_libraries, list):
            raise TypeError("Expected argument 'control_libraries' to be a list")
        pulumi.set(__self__, "control_libraries", control_libraries)
        if control_library_type and not isinstance(control_library_type, str):
            raise TypeError("Expected argument 'control_library_type' to be a str")
        pulumi.set(__self__, "control_library_type", control_library_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)

    @_builtins.property
    @pulumi.getter(name="controlLibraries")
    def control_libraries(self) -> Sequence['outputs.GetSccControlLibrariesControlLibraryResult']:
        return pulumi.get(self, "control_libraries")

    @_builtins.property
    @pulumi.getter(name="controlLibraryType")
    def control_library_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "control_library_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")


class AwaitableGetSccControlLibrariesResult(GetSccControlLibrariesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSccControlLibrariesResult(
            control_libraries=self.control_libraries,
            control_library_type=self.control_library_type,
            id=self.id,
            instance_id=self.instance_id)


def get_scc_control_libraries(control_library_type: Optional[_builtins.str] = None,
                              id: Optional[_builtins.str] = None,
                              instance_id: Optional[_builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSccControlLibrariesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['controlLibraryType'] = control_library_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSccControlLibraries:getSccControlLibraries', __args__, opts=opts, typ=GetSccControlLibrariesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSccControlLibrariesResult(
        control_libraries=pulumi.get(__ret__, 'control_libraries'),
        control_library_type=pulumi.get(__ret__, 'control_library_type'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'))
def get_scc_control_libraries_output(control_library_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSccControlLibrariesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['controlLibraryType'] = control_library_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSccControlLibraries:getSccControlLibraries', __args__, opts=opts, typ=GetSccControlLibrariesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSccControlLibrariesResult(
        control_libraries=pulumi.get(__response__, 'control_libraries'),
        control_library_type=pulumi.get(__response__, 'control_library_type'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id')))
