# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['AppidIdpCloudDirectoryArgs', 'AppidIdpCloudDirectory']

@pulumi.input_type
class AppidIdpCloudDirectoryArgs:
    def __init__(__self__, *,
                 is_active: pulumi.Input[_builtins.bool],
                 tenant_id: pulumi.Input[_builtins.str],
                 appid_idp_cloud_directory_id: Optional[pulumi.Input[_builtins.str]] = None,
                 identity_confirm_access_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 identity_confirm_methods: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 identity_field: Optional[pulumi.Input[_builtins.str]] = None,
                 reset_password_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 reset_password_notification_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 self_service_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 signup_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 welcome_enabled: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a AppidIdpCloudDirectory resource.
        """
        pulumi.set(__self__, "is_active", is_active)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if appid_idp_cloud_directory_id is not None:
            pulumi.set(__self__, "appid_idp_cloud_directory_id", appid_idp_cloud_directory_id)
        if identity_confirm_access_mode is not None:
            pulumi.set(__self__, "identity_confirm_access_mode", identity_confirm_access_mode)
        if identity_confirm_methods is not None:
            pulumi.set(__self__, "identity_confirm_methods", identity_confirm_methods)
        if identity_field is not None:
            pulumi.set(__self__, "identity_field", identity_field)
        if reset_password_enabled is not None:
            pulumi.set(__self__, "reset_password_enabled", reset_password_enabled)
        if reset_password_notification_enabled is not None:
            pulumi.set(__self__, "reset_password_notification_enabled", reset_password_notification_enabled)
        if self_service_enabled is not None:
            pulumi.set(__self__, "self_service_enabled", self_service_enabled)
        if signup_enabled is not None:
            pulumi.set(__self__, "signup_enabled", signup_enabled)
        if welcome_enabled is not None:
            pulumi.set(__self__, "welcome_enabled", welcome_enabled)

    @_builtins.property
    @pulumi.getter(name="isActive")
    def is_active(self) -> pulumi.Input[_builtins.bool]:
        return pulumi.get(self, "is_active")

    @is_active.setter
    def is_active(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "is_active", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "tenant_id", value)

    @_builtins.property
    @pulumi.getter(name="appidIdpCloudDirectoryId")
    def appid_idp_cloud_directory_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "appid_idp_cloud_directory_id")

    @appid_idp_cloud_directory_id.setter
    def appid_idp_cloud_directory_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "appid_idp_cloud_directory_id", value)

    @_builtins.property
    @pulumi.getter(name="identityConfirmAccessMode")
    def identity_confirm_access_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "identity_confirm_access_mode")

    @identity_confirm_access_mode.setter
    def identity_confirm_access_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "identity_confirm_access_mode", value)

    @_builtins.property
    @pulumi.getter(name="identityConfirmMethods")
    def identity_confirm_methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "identity_confirm_methods")

    @identity_confirm_methods.setter
    def identity_confirm_methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "identity_confirm_methods", value)

    @_builtins.property
    @pulumi.getter(name="identityField")
    def identity_field(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "identity_field")

    @identity_field.setter
    def identity_field(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "identity_field", value)

    @_builtins.property
    @pulumi.getter(name="resetPasswordEnabled")
    def reset_password_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "reset_password_enabled")

    @reset_password_enabled.setter
    def reset_password_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "reset_password_enabled", value)

    @_builtins.property
    @pulumi.getter(name="resetPasswordNotificationEnabled")
    def reset_password_notification_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "reset_password_notification_enabled")

    @reset_password_notification_enabled.setter
    def reset_password_notification_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "reset_password_notification_enabled", value)

    @_builtins.property
    @pulumi.getter(name="selfServiceEnabled")
    def self_service_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "self_service_enabled")

    @self_service_enabled.setter
    def self_service_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "self_service_enabled", value)

    @_builtins.property
    @pulumi.getter(name="signupEnabled")
    def signup_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "signup_enabled")

    @signup_enabled.setter
    def signup_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "signup_enabled", value)

    @_builtins.property
    @pulumi.getter(name="welcomeEnabled")
    def welcome_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "welcome_enabled")

    @welcome_enabled.setter
    def welcome_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "welcome_enabled", value)


@pulumi.input_type
class _AppidIdpCloudDirectoryState:
    def __init__(__self__, *,
                 appid_idp_cloud_directory_id: Optional[pulumi.Input[_builtins.str]] = None,
                 identity_confirm_access_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 identity_confirm_methods: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 identity_field: Optional[pulumi.Input[_builtins.str]] = None,
                 is_active: Optional[pulumi.Input[_builtins.bool]] = None,
                 reset_password_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 reset_password_notification_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 self_service_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 signup_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 welcome_enabled: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        Input properties used for looking up and filtering AppidIdpCloudDirectory resources.
        """
        if appid_idp_cloud_directory_id is not None:
            pulumi.set(__self__, "appid_idp_cloud_directory_id", appid_idp_cloud_directory_id)
        if identity_confirm_access_mode is not None:
            pulumi.set(__self__, "identity_confirm_access_mode", identity_confirm_access_mode)
        if identity_confirm_methods is not None:
            pulumi.set(__self__, "identity_confirm_methods", identity_confirm_methods)
        if identity_field is not None:
            pulumi.set(__self__, "identity_field", identity_field)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if reset_password_enabled is not None:
            pulumi.set(__self__, "reset_password_enabled", reset_password_enabled)
        if reset_password_notification_enabled is not None:
            pulumi.set(__self__, "reset_password_notification_enabled", reset_password_notification_enabled)
        if self_service_enabled is not None:
            pulumi.set(__self__, "self_service_enabled", self_service_enabled)
        if signup_enabled is not None:
            pulumi.set(__self__, "signup_enabled", signup_enabled)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if welcome_enabled is not None:
            pulumi.set(__self__, "welcome_enabled", welcome_enabled)

    @_builtins.property
    @pulumi.getter(name="appidIdpCloudDirectoryId")
    def appid_idp_cloud_directory_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "appid_idp_cloud_directory_id")

    @appid_idp_cloud_directory_id.setter
    def appid_idp_cloud_directory_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "appid_idp_cloud_directory_id", value)

    @_builtins.property
    @pulumi.getter(name="identityConfirmAccessMode")
    def identity_confirm_access_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "identity_confirm_access_mode")

    @identity_confirm_access_mode.setter
    def identity_confirm_access_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "identity_confirm_access_mode", value)

    @_builtins.property
    @pulumi.getter(name="identityConfirmMethods")
    def identity_confirm_methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "identity_confirm_methods")

    @identity_confirm_methods.setter
    def identity_confirm_methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "identity_confirm_methods", value)

    @_builtins.property
    @pulumi.getter(name="identityField")
    def identity_field(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "identity_field")

    @identity_field.setter
    def identity_field(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "identity_field", value)

    @_builtins.property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "is_active")

    @is_active.setter
    def is_active(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_active", value)

    @_builtins.property
    @pulumi.getter(name="resetPasswordEnabled")
    def reset_password_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "reset_password_enabled")

    @reset_password_enabled.setter
    def reset_password_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "reset_password_enabled", value)

    @_builtins.property
    @pulumi.getter(name="resetPasswordNotificationEnabled")
    def reset_password_notification_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "reset_password_notification_enabled")

    @reset_password_notification_enabled.setter
    def reset_password_notification_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "reset_password_notification_enabled", value)

    @_builtins.property
    @pulumi.getter(name="selfServiceEnabled")
    def self_service_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "self_service_enabled")

    @self_service_enabled.setter
    def self_service_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "self_service_enabled", value)

    @_builtins.property
    @pulumi.getter(name="signupEnabled")
    def signup_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "signup_enabled")

    @signup_enabled.setter
    def signup_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "signup_enabled", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tenant_id", value)

    @_builtins.property
    @pulumi.getter(name="welcomeEnabled")
    def welcome_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "welcome_enabled")

    @welcome_enabled.setter
    def welcome_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "welcome_enabled", value)


@pulumi.type_token("ibm:index/appidIdpCloudDirectory:AppidIdpCloudDirectory")
class AppidIdpCloudDirectory(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 appid_idp_cloud_directory_id: Optional[pulumi.Input[_builtins.str]] = None,
                 identity_confirm_access_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 identity_confirm_methods: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 identity_field: Optional[pulumi.Input[_builtins.str]] = None,
                 is_active: Optional[pulumi.Input[_builtins.bool]] = None,
                 reset_password_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 reset_password_notification_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 self_service_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 signup_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 welcome_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        """
        Create a AppidIdpCloudDirectory resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppidIdpCloudDirectoryArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AppidIdpCloudDirectory resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AppidIdpCloudDirectoryArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppidIdpCloudDirectoryArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 appid_idp_cloud_directory_id: Optional[pulumi.Input[_builtins.str]] = None,
                 identity_confirm_access_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 identity_confirm_methods: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 identity_field: Optional[pulumi.Input[_builtins.str]] = None,
                 is_active: Optional[pulumi.Input[_builtins.bool]] = None,
                 reset_password_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 reset_password_notification_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 self_service_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 signup_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 welcome_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppidIdpCloudDirectoryArgs.__new__(AppidIdpCloudDirectoryArgs)

            __props__.__dict__["appid_idp_cloud_directory_id"] = appid_idp_cloud_directory_id
            __props__.__dict__["identity_confirm_access_mode"] = identity_confirm_access_mode
            __props__.__dict__["identity_confirm_methods"] = identity_confirm_methods
            __props__.__dict__["identity_field"] = identity_field
            if is_active is None and not opts.urn:
                raise TypeError("Missing required property 'is_active'")
            __props__.__dict__["is_active"] = is_active
            __props__.__dict__["reset_password_enabled"] = reset_password_enabled
            __props__.__dict__["reset_password_notification_enabled"] = reset_password_notification_enabled
            __props__.__dict__["self_service_enabled"] = self_service_enabled
            __props__.__dict__["signup_enabled"] = signup_enabled
            if tenant_id is None and not opts.urn:
                raise TypeError("Missing required property 'tenant_id'")
            __props__.__dict__["tenant_id"] = tenant_id
            __props__.__dict__["welcome_enabled"] = welcome_enabled
        super(AppidIdpCloudDirectory, __self__).__init__(
            'ibm:index/appidIdpCloudDirectory:AppidIdpCloudDirectory',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            appid_idp_cloud_directory_id: Optional[pulumi.Input[_builtins.str]] = None,
            identity_confirm_access_mode: Optional[pulumi.Input[_builtins.str]] = None,
            identity_confirm_methods: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            identity_field: Optional[pulumi.Input[_builtins.str]] = None,
            is_active: Optional[pulumi.Input[_builtins.bool]] = None,
            reset_password_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            reset_password_notification_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            self_service_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            signup_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
            welcome_enabled: Optional[pulumi.Input[_builtins.bool]] = None) -> 'AppidIdpCloudDirectory':
        """
        Get an existing AppidIdpCloudDirectory resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppidIdpCloudDirectoryState.__new__(_AppidIdpCloudDirectoryState)

        __props__.__dict__["appid_idp_cloud_directory_id"] = appid_idp_cloud_directory_id
        __props__.__dict__["identity_confirm_access_mode"] = identity_confirm_access_mode
        __props__.__dict__["identity_confirm_methods"] = identity_confirm_methods
        __props__.__dict__["identity_field"] = identity_field
        __props__.__dict__["is_active"] = is_active
        __props__.__dict__["reset_password_enabled"] = reset_password_enabled
        __props__.__dict__["reset_password_notification_enabled"] = reset_password_notification_enabled
        __props__.__dict__["self_service_enabled"] = self_service_enabled
        __props__.__dict__["signup_enabled"] = signup_enabled
        __props__.__dict__["tenant_id"] = tenant_id
        __props__.__dict__["welcome_enabled"] = welcome_enabled
        return AppidIdpCloudDirectory(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="appidIdpCloudDirectoryId")
    def appid_idp_cloud_directory_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "appid_idp_cloud_directory_id")

    @_builtins.property
    @pulumi.getter(name="identityConfirmAccessMode")
    def identity_confirm_access_mode(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "identity_confirm_access_mode")

    @_builtins.property
    @pulumi.getter(name="identityConfirmMethods")
    def identity_confirm_methods(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        return pulumi.get(self, "identity_confirm_methods")

    @_builtins.property
    @pulumi.getter(name="identityField")
    def identity_field(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "identity_field")

    @_builtins.property
    @pulumi.getter(name="isActive")
    def is_active(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "is_active")

    @_builtins.property
    @pulumi.getter(name="resetPasswordEnabled")
    def reset_password_enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        return pulumi.get(self, "reset_password_enabled")

    @_builtins.property
    @pulumi.getter(name="resetPasswordNotificationEnabled")
    def reset_password_notification_enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        return pulumi.get(self, "reset_password_notification_enabled")

    @_builtins.property
    @pulumi.getter(name="selfServiceEnabled")
    def self_service_enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        return pulumi.get(self, "self_service_enabled")

    @_builtins.property
    @pulumi.getter(name="signupEnabled")
    def signup_enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        return pulumi.get(self, "signup_enabled")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter(name="welcomeEnabled")
    def welcome_enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        return pulumi.get(self, "welcome_enabled")

