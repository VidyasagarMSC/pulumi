# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['CisWebhookArgs', 'CisWebhook']

@pulumi.input_type
class CisWebhookArgs:
    def __init__(__self__, *,
                 cis_id: pulumi.Input[_builtins.str],
                 cis_webhook_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 secret: Optional[pulumi.Input[_builtins.str]] = None,
                 url: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CisWebhook resource.
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] name: Webhook Name
        :param pulumi.Input[_builtins.str] secret: API key needed to use the webhook
        :param pulumi.Input[_builtins.str] url: Webhook URL
        """
        pulumi.set(__self__, "cis_id", cis_id)
        if cis_webhook_id is not None:
            pulumi.set(__self__, "cis_webhook_id", cis_webhook_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Input[_builtins.str]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter(name="cisWebhookId")
    def cis_webhook_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_webhook_id")

    @cis_webhook_id.setter
    def cis_webhook_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_webhook_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Webhook Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        API key needed to use the webhook
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret", value)

    @_builtins.property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Webhook URL
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class _CisWebhookState:
    def __init__(__self__, *,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_webhook_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 secret: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 url: Optional[pulumi.Input[_builtins.str]] = None,
                 webhook_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CisWebhook resources.
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] name: Webhook Name
        :param pulumi.Input[_builtins.str] secret: API key needed to use the webhook
        :param pulumi.Input[_builtins.str] type: Webhook Type
        :param pulumi.Input[_builtins.str] url: Webhook URL
        :param pulumi.Input[_builtins.str] webhook_id: Webhook ID
        """
        if cis_id is not None:
            pulumi.set(__self__, "cis_id", cis_id)
        if cis_webhook_id is not None:
            pulumi.set(__self__, "cis_webhook_id", cis_webhook_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if webhook_id is not None:
            pulumi.set(__self__, "webhook_id", webhook_id)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter(name="cisWebhookId")
    def cis_webhook_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_webhook_id")

    @cis_webhook_id.setter
    def cis_webhook_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_webhook_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Webhook Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        API key needed to use the webhook
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Webhook Type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Webhook URL
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "url", value)

    @_builtins.property
    @pulumi.getter(name="webhookId")
    def webhook_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Webhook ID
        """
        return pulumi.get(self, "webhook_id")

    @webhook_id.setter
    def webhook_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "webhook_id", value)


@pulumi.type_token("ibm:index/cisWebhook:CisWebhook")
class CisWebhook(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_webhook_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 secret: Optional[pulumi.Input[_builtins.str]] = None,
                 url: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a CisWebhook resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] name: Webhook Name
        :param pulumi.Input[_builtins.str] secret: API key needed to use the webhook
        :param pulumi.Input[_builtins.str] url: Webhook URL
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CisWebhookArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CisWebhook resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CisWebhookArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CisWebhookArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_webhook_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 secret: Optional[pulumi.Input[_builtins.str]] = None,
                 url: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CisWebhookArgs.__new__(CisWebhookArgs)

            if cis_id is None and not opts.urn:
                raise TypeError("Missing required property 'cis_id'")
            __props__.__dict__["cis_id"] = cis_id
            __props__.__dict__["cis_webhook_id"] = cis_webhook_id
            __props__.__dict__["name"] = name
            __props__.__dict__["secret"] = None if secret is None else pulumi.Output.secret(secret)
            __props__.__dict__["url"] = url
            __props__.__dict__["type"] = None
            __props__.__dict__["webhook_id"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["secret"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(CisWebhook, __self__).__init__(
            'ibm:index/cisWebhook:CisWebhook',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cis_id: Optional[pulumi.Input[_builtins.str]] = None,
            cis_webhook_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            secret: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            url: Optional[pulumi.Input[_builtins.str]] = None,
            webhook_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'CisWebhook':
        """
        Get an existing CisWebhook resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] name: Webhook Name
        :param pulumi.Input[_builtins.str] secret: API key needed to use the webhook
        :param pulumi.Input[_builtins.str] type: Webhook Type
        :param pulumi.Input[_builtins.str] url: Webhook URL
        :param pulumi.Input[_builtins.str] webhook_id: Webhook ID
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CisWebhookState.__new__(_CisWebhookState)

        __props__.__dict__["cis_id"] = cis_id
        __props__.__dict__["cis_webhook_id"] = cis_webhook_id
        __props__.__dict__["name"] = name
        __props__.__dict__["secret"] = secret
        __props__.__dict__["type"] = type
        __props__.__dict__["url"] = url
        __props__.__dict__["webhook_id"] = webhook_id
        return CisWebhook(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Output[_builtins.str]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @_builtins.property
    @pulumi.getter(name="cisWebhookId")
    def cis_webhook_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cis_webhook_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Webhook Name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def secret(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        API key needed to use the webhook
        """
        return pulumi.get(self, "secret")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Webhook Type
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def url(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Webhook URL
        """
        return pulumi.get(self, "url")

    @_builtins.property
    @pulumi.getter(name="webhookId")
    def webhook_id(self) -> pulumi.Output[_builtins.str]:
        """
        Webhook ID
        """
        return pulumi.get(self, "webhook_id")

