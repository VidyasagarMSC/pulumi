# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsBareMetalServerResult',
    'AwaitableGetIsBareMetalServerResult',
    'get_is_bare_metal_server',
    'get_is_bare_metal_server_output',
]

@pulumi.output_type
class GetIsBareMetalServerResult:
    """
    A collection of values returned by getIsBareMetalServer.
    """
    def __init__(__self__, access_tags=None, bandwidth=None, boot_target=None, cpus=None, created_at=None, crn=None, disks=None, enable_secure_boot=None, firmware_update_type_available=None, health_reasons=None, health_state=None, href=None, id=None, identifier=None, image=None, keys=None, memory=None, name=None, network_attachments=None, network_interfaces=None, primary_network_attachments=None, primary_network_interfaces=None, profile=None, reservation_affinities=None, reservations=None, resource_group=None, resource_type=None, status=None, status_reasons=None, tags=None, trusted_platform_modules=None, vpc=None, zone=None):
        if access_tags and not isinstance(access_tags, list):
            raise TypeError("Expected argument 'access_tags' to be a list")
        pulumi.set(__self__, "access_tags", access_tags)
        if bandwidth and not isinstance(bandwidth, float):
            raise TypeError("Expected argument 'bandwidth' to be a float")
        pulumi.set(__self__, "bandwidth", bandwidth)
        if boot_target and not isinstance(boot_target, str):
            raise TypeError("Expected argument 'boot_target' to be a str")
        pulumi.set(__self__, "boot_target", boot_target)
        if cpus and not isinstance(cpus, list):
            raise TypeError("Expected argument 'cpus' to be a list")
        pulumi.set(__self__, "cpus", cpus)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if disks and not isinstance(disks, list):
            raise TypeError("Expected argument 'disks' to be a list")
        pulumi.set(__self__, "disks", disks)
        if enable_secure_boot and not isinstance(enable_secure_boot, bool):
            raise TypeError("Expected argument 'enable_secure_boot' to be a bool")
        pulumi.set(__self__, "enable_secure_boot", enable_secure_boot)
        if firmware_update_type_available and not isinstance(firmware_update_type_available, str):
            raise TypeError("Expected argument 'firmware_update_type_available' to be a str")
        pulumi.set(__self__, "firmware_update_type_available", firmware_update_type_available)
        if health_reasons and not isinstance(health_reasons, list):
            raise TypeError("Expected argument 'health_reasons' to be a list")
        pulumi.set(__self__, "health_reasons", health_reasons)
        if health_state and not isinstance(health_state, str):
            raise TypeError("Expected argument 'health_state' to be a str")
        pulumi.set(__self__, "health_state", health_state)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identifier and not isinstance(identifier, str):
            raise TypeError("Expected argument 'identifier' to be a str")
        pulumi.set(__self__, "identifier", identifier)
        if image and not isinstance(image, str):
            raise TypeError("Expected argument 'image' to be a str")
        pulumi.set(__self__, "image", image)
        if keys and not isinstance(keys, list):
            raise TypeError("Expected argument 'keys' to be a list")
        pulumi.set(__self__, "keys", keys)
        if memory and not isinstance(memory, float):
            raise TypeError("Expected argument 'memory' to be a float")
        pulumi.set(__self__, "memory", memory)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_attachments and not isinstance(network_attachments, list):
            raise TypeError("Expected argument 'network_attachments' to be a list")
        pulumi.set(__self__, "network_attachments", network_attachments)
        if network_interfaces and not isinstance(network_interfaces, list):
            raise TypeError("Expected argument 'network_interfaces' to be a list")
        pulumi.set(__self__, "network_interfaces", network_interfaces)
        if primary_network_attachments and not isinstance(primary_network_attachments, list):
            raise TypeError("Expected argument 'primary_network_attachments' to be a list")
        pulumi.set(__self__, "primary_network_attachments", primary_network_attachments)
        if primary_network_interfaces and not isinstance(primary_network_interfaces, list):
            raise TypeError("Expected argument 'primary_network_interfaces' to be a list")
        pulumi.set(__self__, "primary_network_interfaces", primary_network_interfaces)
        if profile and not isinstance(profile, str):
            raise TypeError("Expected argument 'profile' to be a str")
        pulumi.set(__self__, "profile", profile)
        if reservation_affinities and not isinstance(reservation_affinities, list):
            raise TypeError("Expected argument 'reservation_affinities' to be a list")
        pulumi.set(__self__, "reservation_affinities", reservation_affinities)
        if reservations and not isinstance(reservations, list):
            raise TypeError("Expected argument 'reservations' to be a list")
        pulumi.set(__self__, "reservations", reservations)
        if resource_group and not isinstance(resource_group, str):
            raise TypeError("Expected argument 'resource_group' to be a str")
        pulumi.set(__self__, "resource_group", resource_group)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if status_reasons and not isinstance(status_reasons, list):
            raise TypeError("Expected argument 'status_reasons' to be a list")
        pulumi.set(__self__, "status_reasons", status_reasons)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if trusted_platform_modules and not isinstance(trusted_platform_modules, list):
            raise TypeError("Expected argument 'trusted_platform_modules' to be a list")
        pulumi.set(__self__, "trusted_platform_modules", trusted_platform_modules)
        if vpc and not isinstance(vpc, str):
            raise TypeError("Expected argument 'vpc' to be a str")
        pulumi.set(__self__, "vpc", vpc)
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> _builtins.float:
        return pulumi.get(self, "bandwidth")

    @_builtins.property
    @pulumi.getter(name="bootTarget")
    def boot_target(self) -> _builtins.str:
        return pulumi.get(self, "boot_target")

    @_builtins.property
    @pulumi.getter
    def cpus(self) -> Sequence['outputs.GetIsBareMetalServerCpusResult']:
        return pulumi.get(self, "cpus")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def disks(self) -> Sequence['outputs.GetIsBareMetalServerDiskResult']:
        return pulumi.get(self, "disks")

    @_builtins.property
    @pulumi.getter(name="enableSecureBoot")
    def enable_secure_boot(self) -> _builtins.bool:
        return pulumi.get(self, "enable_secure_boot")

    @_builtins.property
    @pulumi.getter(name="firmwareUpdateTypeAvailable")
    def firmware_update_type_available(self) -> _builtins.str:
        return pulumi.get(self, "firmware_update_type_available")

    @_builtins.property
    @pulumi.getter(name="healthReasons")
    def health_reasons(self) -> Sequence['outputs.GetIsBareMetalServerHealthReasonResult']:
        return pulumi.get(self, "health_reasons")

    @_builtins.property
    @pulumi.getter(name="healthState")
    def health_state(self) -> _builtins.str:
        return pulumi.get(self, "health_state")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def identifier(self) -> _builtins.str:
        return pulumi.get(self, "identifier")

    @_builtins.property
    @pulumi.getter
    def image(self) -> _builtins.str:
        return pulumi.get(self, "image")

    @_builtins.property
    @pulumi.getter
    def keys(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "keys")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.float:
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkAttachments")
    def network_attachments(self) -> Sequence['outputs.GetIsBareMetalServerNetworkAttachmentResult']:
        return pulumi.get(self, "network_attachments")

    @_builtins.property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Sequence['outputs.GetIsBareMetalServerNetworkInterfaceResult']:
        return pulumi.get(self, "network_interfaces")

    @_builtins.property
    @pulumi.getter(name="primaryNetworkAttachments")
    def primary_network_attachments(self) -> Sequence['outputs.GetIsBareMetalServerPrimaryNetworkAttachmentResult']:
        return pulumi.get(self, "primary_network_attachments")

    @_builtins.property
    @pulumi.getter(name="primaryNetworkInterfaces")
    def primary_network_interfaces(self) -> Sequence['outputs.GetIsBareMetalServerPrimaryNetworkInterfaceResult']:
        return pulumi.get(self, "primary_network_interfaces")

    @_builtins.property
    @pulumi.getter
    def profile(self) -> _builtins.str:
        return pulumi.get(self, "profile")

    @_builtins.property
    @pulumi.getter(name="reservationAffinities")
    def reservation_affinities(self) -> Sequence['outputs.GetIsBareMetalServerReservationAffinityResult']:
        return pulumi.get(self, "reservation_affinities")

    @_builtins.property
    @pulumi.getter
    def reservations(self) -> Sequence['outputs.GetIsBareMetalServerReservationResult']:
        return pulumi.get(self, "reservations")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> _builtins.str:
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> Sequence['outputs.GetIsBareMetalServerStatusReasonResult']:
        return pulumi.get(self, "status_reasons")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="trustedPlatformModules")
    def trusted_platform_modules(self) -> Sequence['outputs.GetIsBareMetalServerTrustedPlatformModuleResult']:
        return pulumi.get(self, "trusted_platform_modules")

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> _builtins.str:
        return pulumi.get(self, "vpc")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> _builtins.str:
        return pulumi.get(self, "zone")


class AwaitableGetIsBareMetalServerResult(GetIsBareMetalServerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsBareMetalServerResult(
            access_tags=self.access_tags,
            bandwidth=self.bandwidth,
            boot_target=self.boot_target,
            cpus=self.cpus,
            created_at=self.created_at,
            crn=self.crn,
            disks=self.disks,
            enable_secure_boot=self.enable_secure_boot,
            firmware_update_type_available=self.firmware_update_type_available,
            health_reasons=self.health_reasons,
            health_state=self.health_state,
            href=self.href,
            id=self.id,
            identifier=self.identifier,
            image=self.image,
            keys=self.keys,
            memory=self.memory,
            name=self.name,
            network_attachments=self.network_attachments,
            network_interfaces=self.network_interfaces,
            primary_network_attachments=self.primary_network_attachments,
            primary_network_interfaces=self.primary_network_interfaces,
            profile=self.profile,
            reservation_affinities=self.reservation_affinities,
            reservations=self.reservations,
            resource_group=self.resource_group,
            resource_type=self.resource_type,
            status=self.status,
            status_reasons=self.status_reasons,
            tags=self.tags,
            trusted_platform_modules=self.trusted_platform_modules,
            vpc=self.vpc,
            zone=self.zone)


def get_is_bare_metal_server(id: Optional[_builtins.str] = None,
                             identifier: Optional[_builtins.str] = None,
                             name: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsBareMetalServerResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['identifier'] = identifier
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsBareMetalServer:getIsBareMetalServer', __args__, opts=opts, typ=GetIsBareMetalServerResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsBareMetalServerResult(
        access_tags=pulumi.get(__ret__, 'access_tags'),
        bandwidth=pulumi.get(__ret__, 'bandwidth'),
        boot_target=pulumi.get(__ret__, 'boot_target'),
        cpus=pulumi.get(__ret__, 'cpus'),
        created_at=pulumi.get(__ret__, 'created_at'),
        crn=pulumi.get(__ret__, 'crn'),
        disks=pulumi.get(__ret__, 'disks'),
        enable_secure_boot=pulumi.get(__ret__, 'enable_secure_boot'),
        firmware_update_type_available=pulumi.get(__ret__, 'firmware_update_type_available'),
        health_reasons=pulumi.get(__ret__, 'health_reasons'),
        health_state=pulumi.get(__ret__, 'health_state'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        identifier=pulumi.get(__ret__, 'identifier'),
        image=pulumi.get(__ret__, 'image'),
        keys=pulumi.get(__ret__, 'keys'),
        memory=pulumi.get(__ret__, 'memory'),
        name=pulumi.get(__ret__, 'name'),
        network_attachments=pulumi.get(__ret__, 'network_attachments'),
        network_interfaces=pulumi.get(__ret__, 'network_interfaces'),
        primary_network_attachments=pulumi.get(__ret__, 'primary_network_attachments'),
        primary_network_interfaces=pulumi.get(__ret__, 'primary_network_interfaces'),
        profile=pulumi.get(__ret__, 'profile'),
        reservation_affinities=pulumi.get(__ret__, 'reservation_affinities'),
        reservations=pulumi.get(__ret__, 'reservations'),
        resource_group=pulumi.get(__ret__, 'resource_group'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        status=pulumi.get(__ret__, 'status'),
        status_reasons=pulumi.get(__ret__, 'status_reasons'),
        tags=pulumi.get(__ret__, 'tags'),
        trusted_platform_modules=pulumi.get(__ret__, 'trusted_platform_modules'),
        vpc=pulumi.get(__ret__, 'vpc'),
        zone=pulumi.get(__ret__, 'zone'))
def get_is_bare_metal_server_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    identifier: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsBareMetalServerResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['identifier'] = identifier
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsBareMetalServer:getIsBareMetalServer', __args__, opts=opts, typ=GetIsBareMetalServerResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsBareMetalServerResult(
        access_tags=pulumi.get(__response__, 'access_tags'),
        bandwidth=pulumi.get(__response__, 'bandwidth'),
        boot_target=pulumi.get(__response__, 'boot_target'),
        cpus=pulumi.get(__response__, 'cpus'),
        created_at=pulumi.get(__response__, 'created_at'),
        crn=pulumi.get(__response__, 'crn'),
        disks=pulumi.get(__response__, 'disks'),
        enable_secure_boot=pulumi.get(__response__, 'enable_secure_boot'),
        firmware_update_type_available=pulumi.get(__response__, 'firmware_update_type_available'),
        health_reasons=pulumi.get(__response__, 'health_reasons'),
        health_state=pulumi.get(__response__, 'health_state'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        identifier=pulumi.get(__response__, 'identifier'),
        image=pulumi.get(__response__, 'image'),
        keys=pulumi.get(__response__, 'keys'),
        memory=pulumi.get(__response__, 'memory'),
        name=pulumi.get(__response__, 'name'),
        network_attachments=pulumi.get(__response__, 'network_attachments'),
        network_interfaces=pulumi.get(__response__, 'network_interfaces'),
        primary_network_attachments=pulumi.get(__response__, 'primary_network_attachments'),
        primary_network_interfaces=pulumi.get(__response__, 'primary_network_interfaces'),
        profile=pulumi.get(__response__, 'profile'),
        reservation_affinities=pulumi.get(__response__, 'reservation_affinities'),
        reservations=pulumi.get(__response__, 'reservations'),
        resource_group=pulumi.get(__response__, 'resource_group'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        status=pulumi.get(__response__, 'status'),
        status_reasons=pulumi.get(__response__, 'status_reasons'),
        tags=pulumi.get(__response__, 'tags'),
        trusted_platform_modules=pulumi.get(__response__, 'trusted_platform_modules'),
        vpc=pulumi.get(__response__, 'vpc'),
        zone=pulumi.get(__response__, 'zone')))
