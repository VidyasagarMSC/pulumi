# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetAppConfigPropertyResult',
    'AwaitableGetAppConfigPropertyResult',
    'get_app_config_property',
    'get_app_config_property_output',
]

@pulumi.output_type
class GetAppConfigPropertyResult:
    """
    A collection of values returned by getAppConfigProperty.
    """
    def __init__(__self__, collections=None, created_time=None, description=None, environment_id=None, format=None, guid=None, href=None, id=None, include=None, name=None, property_id=None, segment_exists=None, segment_rules=None, tags=None, type=None, updated_time=None, value=None):
        if collections and not isinstance(collections, list):
            raise TypeError("Expected argument 'collections' to be a list")
        pulumi.set(__self__, "collections", collections)
        if created_time and not isinstance(created_time, str):
            raise TypeError("Expected argument 'created_time' to be a str")
        pulumi.set(__self__, "created_time", created_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if environment_id and not isinstance(environment_id, str):
            raise TypeError("Expected argument 'environment_id' to be a str")
        pulumi.set(__self__, "environment_id", environment_id)
        if format and not isinstance(format, str):
            raise TypeError("Expected argument 'format' to be a str")
        pulumi.set(__self__, "format", format)
        if guid and not isinstance(guid, str):
            raise TypeError("Expected argument 'guid' to be a str")
        pulumi.set(__self__, "guid", guid)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if include and not isinstance(include, str):
            raise TypeError("Expected argument 'include' to be a str")
        pulumi.set(__self__, "include", include)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if property_id and not isinstance(property_id, str):
            raise TypeError("Expected argument 'property_id' to be a str")
        pulumi.set(__self__, "property_id", property_id)
        if segment_exists and not isinstance(segment_exists, bool):
            raise TypeError("Expected argument 'segment_exists' to be a bool")
        pulumi.set(__self__, "segment_exists", segment_exists)
        if segment_rules and not isinstance(segment_rules, list):
            raise TypeError("Expected argument 'segment_rules' to be a list")
        pulumi.set(__self__, "segment_rules", segment_rules)
        if tags and not isinstance(tags, str):
            raise TypeError("Expected argument 'tags' to be a str")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if updated_time and not isinstance(updated_time, str):
            raise TypeError("Expected argument 'updated_time' to be a str")
        pulumi.set(__self__, "updated_time", updated_time)
        if value and not isinstance(value, str):
            raise TypeError("Expected argument 'value' to be a str")
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def collections(self) -> Sequence['outputs.GetAppConfigPropertyCollectionResult']:
        return pulumi.get(self, "collections")

    @_builtins.property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> _builtins.str:
        return pulumi.get(self, "created_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> _builtins.str:
        return pulumi.get(self, "environment_id")

    @_builtins.property
    @pulumi.getter
    def format(self) -> _builtins.str:
        return pulumi.get(self, "format")

    @_builtins.property
    @pulumi.getter
    def guid(self) -> _builtins.str:
        return pulumi.get(self, "guid")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def include(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "include")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="propertyId")
    def property_id(self) -> _builtins.str:
        return pulumi.get(self, "property_id")

    @_builtins.property
    @pulumi.getter(name="segmentExists")
    def segment_exists(self) -> _builtins.bool:
        return pulumi.get(self, "segment_exists")

    @_builtins.property
    @pulumi.getter(name="segmentRules")
    def segment_rules(self) -> Sequence['outputs.GetAppConfigPropertySegmentRuleResult']:
        return pulumi.get(self, "segment_rules")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> _builtins.str:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> _builtins.str:
        return pulumi.get(self, "updated_time")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


class AwaitableGetAppConfigPropertyResult(GetAppConfigPropertyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppConfigPropertyResult(
            collections=self.collections,
            created_time=self.created_time,
            description=self.description,
            environment_id=self.environment_id,
            format=self.format,
            guid=self.guid,
            href=self.href,
            id=self.id,
            include=self.include,
            name=self.name,
            property_id=self.property_id,
            segment_exists=self.segment_exists,
            segment_rules=self.segment_rules,
            tags=self.tags,
            type=self.type,
            updated_time=self.updated_time,
            value=self.value)


def get_app_config_property(environment_id: Optional[_builtins.str] = None,
                            guid: Optional[_builtins.str] = None,
                            id: Optional[_builtins.str] = None,
                            include: Optional[_builtins.str] = None,
                            property_id: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppConfigPropertyResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['environmentId'] = environment_id
    __args__['guid'] = guid
    __args__['id'] = id
    __args__['include'] = include
    __args__['propertyId'] = property_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getAppConfigProperty:getAppConfigProperty', __args__, opts=opts, typ=GetAppConfigPropertyResult, package_ref=_utilities.get_package()).value

    return AwaitableGetAppConfigPropertyResult(
        collections=pulumi.get(__ret__, 'collections'),
        created_time=pulumi.get(__ret__, 'created_time'),
        description=pulumi.get(__ret__, 'description'),
        environment_id=pulumi.get(__ret__, 'environment_id'),
        format=pulumi.get(__ret__, 'format'),
        guid=pulumi.get(__ret__, 'guid'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        include=pulumi.get(__ret__, 'include'),
        name=pulumi.get(__ret__, 'name'),
        property_id=pulumi.get(__ret__, 'property_id'),
        segment_exists=pulumi.get(__ret__, 'segment_exists'),
        segment_rules=pulumi.get(__ret__, 'segment_rules'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'),
        updated_time=pulumi.get(__ret__, 'updated_time'),
        value=pulumi.get(__ret__, 'value'))
def get_app_config_property_output(environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   guid: Optional[pulumi.Input[_builtins.str]] = None,
                                   id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   include: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   property_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppConfigPropertyResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['environmentId'] = environment_id
    __args__['guid'] = guid
    __args__['id'] = id
    __args__['include'] = include
    __args__['propertyId'] = property_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getAppConfigProperty:getAppConfigProperty', __args__, opts=opts, typ=GetAppConfigPropertyResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetAppConfigPropertyResult(
        collections=pulumi.get(__response__, 'collections'),
        created_time=pulumi.get(__response__, 'created_time'),
        description=pulumi.get(__response__, 'description'),
        environment_id=pulumi.get(__response__, 'environment_id'),
        format=pulumi.get(__response__, 'format'),
        guid=pulumi.get(__response__, 'guid'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        include=pulumi.get(__response__, 'include'),
        name=pulumi.get(__response__, 'name'),
        property_id=pulumi.get(__response__, 'property_id'),
        segment_exists=pulumi.get(__response__, 'segment_exists'),
        segment_rules=pulumi.get(__response__, 'segment_rules'),
        tags=pulumi.get(__response__, 'tags'),
        type=pulumi.get(__response__, 'type'),
        updated_time=pulumi.get(__response__, 'updated_time'),
        value=pulumi.get(__response__, 'value')))
