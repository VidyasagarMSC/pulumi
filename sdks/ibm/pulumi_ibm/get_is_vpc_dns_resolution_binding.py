# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsVpcDnsResolutionBindingResult',
    'AwaitableGetIsVpcDnsResolutionBindingResult',
    'get_is_vpc_dns_resolution_binding',
    'get_is_vpc_dns_resolution_binding_output',
]

@pulumi.output_type
class GetIsVpcDnsResolutionBindingResult:
    """
    A collection of values returned by getIsVpcDnsResolutionBinding.
    """
    def __init__(__self__, created_at=None, endpoint_gateways=None, health_reasons=None, health_state=None, href=None, id=None, identifier=None, lifecycle_state=None, name=None, resource_type=None, vpc_id=None, vpcs=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if endpoint_gateways and not isinstance(endpoint_gateways, list):
            raise TypeError("Expected argument 'endpoint_gateways' to be a list")
        pulumi.set(__self__, "endpoint_gateways", endpoint_gateways)
        if health_reasons and not isinstance(health_reasons, list):
            raise TypeError("Expected argument 'health_reasons' to be a list")
        pulumi.set(__self__, "health_reasons", health_reasons)
        if health_state and not isinstance(health_state, str):
            raise TypeError("Expected argument 'health_state' to be a str")
        pulumi.set(__self__, "health_state", health_state)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identifier and not isinstance(identifier, str):
            raise TypeError("Expected argument 'identifier' to be a str")
        pulumi.set(__self__, "identifier", identifier)
        if lifecycle_state and not isinstance(lifecycle_state, str):
            raise TypeError("Expected argument 'lifecycle_state' to be a str")
        pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)
        if vpcs and not isinstance(vpcs, list):
            raise TypeError("Expected argument 'vpcs' to be a list")
        pulumi.set(__self__, "vpcs", vpcs)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="endpointGateways")
    def endpoint_gateways(self) -> Sequence['outputs.GetIsVpcDnsResolutionBindingEndpointGatewayResult']:
        return pulumi.get(self, "endpoint_gateways")

    @_builtins.property
    @pulumi.getter(name="healthReasons")
    def health_reasons(self) -> Sequence['outputs.GetIsVpcDnsResolutionBindingHealthReasonResult']:
        return pulumi.get(self, "health_reasons")

    @_builtins.property
    @pulumi.getter(name="healthState")
    def health_state(self) -> _builtins.str:
        return pulumi.get(self, "health_state")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def identifier(self) -> _builtins.str:
        return pulumi.get(self, "identifier")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> _builtins.str:
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        return pulumi.get(self, "vpc_id")

    @_builtins.property
    @pulumi.getter
    def vpcs(self) -> Sequence['outputs.GetIsVpcDnsResolutionBindingVpcResult']:
        return pulumi.get(self, "vpcs")


class AwaitableGetIsVpcDnsResolutionBindingResult(GetIsVpcDnsResolutionBindingResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsVpcDnsResolutionBindingResult(
            created_at=self.created_at,
            endpoint_gateways=self.endpoint_gateways,
            health_reasons=self.health_reasons,
            health_state=self.health_state,
            href=self.href,
            id=self.id,
            identifier=self.identifier,
            lifecycle_state=self.lifecycle_state,
            name=self.name,
            resource_type=self.resource_type,
            vpc_id=self.vpc_id,
            vpcs=self.vpcs)


def get_is_vpc_dns_resolution_binding(id: Optional[_builtins.str] = None,
                                      identifier: Optional[_builtins.str] = None,
                                      vpc_id: Optional[_builtins.str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsVpcDnsResolutionBindingResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['identifier'] = identifier
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsVpcDnsResolutionBinding:getIsVpcDnsResolutionBinding', __args__, opts=opts, typ=GetIsVpcDnsResolutionBindingResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsVpcDnsResolutionBindingResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        endpoint_gateways=pulumi.get(__ret__, 'endpoint_gateways'),
        health_reasons=pulumi.get(__ret__, 'health_reasons'),
        health_state=pulumi.get(__ret__, 'health_state'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        identifier=pulumi.get(__ret__, 'identifier'),
        lifecycle_state=pulumi.get(__ret__, 'lifecycle_state'),
        name=pulumi.get(__ret__, 'name'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        vpc_id=pulumi.get(__ret__, 'vpc_id'),
        vpcs=pulumi.get(__ret__, 'vpcs'))
def get_is_vpc_dns_resolution_binding_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             identifier: Optional[pulumi.Input[_builtins.str]] = None,
                                             vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsVpcDnsResolutionBindingResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['identifier'] = identifier
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsVpcDnsResolutionBinding:getIsVpcDnsResolutionBinding', __args__, opts=opts, typ=GetIsVpcDnsResolutionBindingResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsVpcDnsResolutionBindingResult(
        created_at=pulumi.get(__response__, 'created_at'),
        endpoint_gateways=pulumi.get(__response__, 'endpoint_gateways'),
        health_reasons=pulumi.get(__response__, 'health_reasons'),
        health_state=pulumi.get(__response__, 'health_state'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        identifier=pulumi.get(__response__, 'identifier'),
        lifecycle_state=pulumi.get(__response__, 'lifecycle_state'),
        name=pulumi.get(__response__, 'name'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        vpc_id=pulumi.get(__response__, 'vpc_id'),
        vpcs=pulumi.get(__response__, 'vpcs')))
