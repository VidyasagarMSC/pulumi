# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IamUserInviteArgs', 'IamUserInvite']

@pulumi.input_type
class IamUserInviteArgs:
    def __init__(__self__, *,
                 users: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 access_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 classic_infra_roles: Optional[pulumi.Input[Sequence[pulumi.Input['IamUserInviteClassicInfraRoleArgs']]]] = None,
                 cloud_foundry_roles: Optional[pulumi.Input[Sequence[pulumi.Input['IamUserInviteCloudFoundryRoleArgs']]]] = None,
                 iam_policies: Optional[pulumi.Input[Sequence[pulumi.Input['IamUserInviteIamPolicyArgs']]]] = None,
                 iam_user_invite_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a IamUserInvite resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] users: List of ibm id or email of user
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_groups: access group ids to associate the inviting user
        """
        pulumi.set(__self__, "users", users)
        if access_groups is not None:
            pulumi.set(__self__, "access_groups", access_groups)
        if classic_infra_roles is not None:
            pulumi.set(__self__, "classic_infra_roles", classic_infra_roles)
        if cloud_foundry_roles is not None:
            pulumi.set(__self__, "cloud_foundry_roles", cloud_foundry_roles)
        if iam_policies is not None:
            pulumi.set(__self__, "iam_policies", iam_policies)
        if iam_user_invite_id is not None:
            pulumi.set(__self__, "iam_user_invite_id", iam_user_invite_id)

    @_builtins.property
    @pulumi.getter
    def users(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        List of ibm id or email of user
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "users", value)

    @_builtins.property
    @pulumi.getter(name="accessGroups")
    def access_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        access group ids to associate the inviting user
        """
        return pulumi.get(self, "access_groups")

    @access_groups.setter
    def access_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_groups", value)

    @_builtins.property
    @pulumi.getter(name="classicInfraRoles")
    def classic_infra_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IamUserInviteClassicInfraRoleArgs']]]]:
        return pulumi.get(self, "classic_infra_roles")

    @classic_infra_roles.setter
    def classic_infra_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IamUserInviteClassicInfraRoleArgs']]]]):
        pulumi.set(self, "classic_infra_roles", value)

    @_builtins.property
    @pulumi.getter(name="cloudFoundryRoles")
    def cloud_foundry_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IamUserInviteCloudFoundryRoleArgs']]]]:
        return pulumi.get(self, "cloud_foundry_roles")

    @cloud_foundry_roles.setter
    def cloud_foundry_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IamUserInviteCloudFoundryRoleArgs']]]]):
        pulumi.set(self, "cloud_foundry_roles", value)

    @_builtins.property
    @pulumi.getter(name="iamPolicies")
    def iam_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IamUserInviteIamPolicyArgs']]]]:
        return pulumi.get(self, "iam_policies")

    @iam_policies.setter
    def iam_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IamUserInviteIamPolicyArgs']]]]):
        pulumi.set(self, "iam_policies", value)

    @_builtins.property
    @pulumi.getter(name="iamUserInviteId")
    def iam_user_invite_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "iam_user_invite_id")

    @iam_user_invite_id.setter
    def iam_user_invite_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_user_invite_id", value)


@pulumi.input_type
class _IamUserInviteState:
    def __init__(__self__, *,
                 access_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 classic_infra_roles: Optional[pulumi.Input[Sequence[pulumi.Input['IamUserInviteClassicInfraRoleArgs']]]] = None,
                 cloud_foundry_roles: Optional[pulumi.Input[Sequence[pulumi.Input['IamUserInviteCloudFoundryRoleArgs']]]] = None,
                 iam_policies: Optional[pulumi.Input[Sequence[pulumi.Input['IamUserInviteIamPolicyArgs']]]] = None,
                 iam_user_invite_id: Optional[pulumi.Input[_builtins.str]] = None,
                 invited_users: Optional[pulumi.Input[Sequence[pulumi.Input['IamUserInviteInvitedUserArgs']]]] = None,
                 number_of_invited_users: Optional[pulumi.Input[_builtins.float]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering IamUserInvite resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_groups: access group ids to associate the inviting user
        :param pulumi.Input[_builtins.float] number_of_invited_users: Number of users invited to an account
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] users: List of ibm id or email of user
        """
        if access_groups is not None:
            pulumi.set(__self__, "access_groups", access_groups)
        if classic_infra_roles is not None:
            pulumi.set(__self__, "classic_infra_roles", classic_infra_roles)
        if cloud_foundry_roles is not None:
            pulumi.set(__self__, "cloud_foundry_roles", cloud_foundry_roles)
        if iam_policies is not None:
            pulumi.set(__self__, "iam_policies", iam_policies)
        if iam_user_invite_id is not None:
            pulumi.set(__self__, "iam_user_invite_id", iam_user_invite_id)
        if invited_users is not None:
            pulumi.set(__self__, "invited_users", invited_users)
        if number_of_invited_users is not None:
            pulumi.set(__self__, "number_of_invited_users", number_of_invited_users)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @_builtins.property
    @pulumi.getter(name="accessGroups")
    def access_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        access group ids to associate the inviting user
        """
        return pulumi.get(self, "access_groups")

    @access_groups.setter
    def access_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_groups", value)

    @_builtins.property
    @pulumi.getter(name="classicInfraRoles")
    def classic_infra_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IamUserInviteClassicInfraRoleArgs']]]]:
        return pulumi.get(self, "classic_infra_roles")

    @classic_infra_roles.setter
    def classic_infra_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IamUserInviteClassicInfraRoleArgs']]]]):
        pulumi.set(self, "classic_infra_roles", value)

    @_builtins.property
    @pulumi.getter(name="cloudFoundryRoles")
    def cloud_foundry_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IamUserInviteCloudFoundryRoleArgs']]]]:
        return pulumi.get(self, "cloud_foundry_roles")

    @cloud_foundry_roles.setter
    def cloud_foundry_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IamUserInviteCloudFoundryRoleArgs']]]]):
        pulumi.set(self, "cloud_foundry_roles", value)

    @_builtins.property
    @pulumi.getter(name="iamPolicies")
    def iam_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IamUserInviteIamPolicyArgs']]]]:
        return pulumi.get(self, "iam_policies")

    @iam_policies.setter
    def iam_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IamUserInviteIamPolicyArgs']]]]):
        pulumi.set(self, "iam_policies", value)

    @_builtins.property
    @pulumi.getter(name="iamUserInviteId")
    def iam_user_invite_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "iam_user_invite_id")

    @iam_user_invite_id.setter
    def iam_user_invite_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_user_invite_id", value)

    @_builtins.property
    @pulumi.getter(name="invitedUsers")
    def invited_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IamUserInviteInvitedUserArgs']]]]:
        return pulumi.get(self, "invited_users")

    @invited_users.setter
    def invited_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IamUserInviteInvitedUserArgs']]]]):
        pulumi.set(self, "invited_users", value)

    @_builtins.property
    @pulumi.getter(name="numberOfInvitedUsers")
    def number_of_invited_users(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Number of users invited to an account
        """
        return pulumi.get(self, "number_of_invited_users")

    @number_of_invited_users.setter
    def number_of_invited_users(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "number_of_invited_users", value)

    @_builtins.property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of ibm id or email of user
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "users", value)


@pulumi.type_token("ibm:index/iamUserInvite:IamUserInvite")
class IamUserInvite(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 classic_infra_roles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamUserInviteClassicInfraRoleArgs', 'IamUserInviteClassicInfraRoleArgsDict']]]]] = None,
                 cloud_foundry_roles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamUserInviteCloudFoundryRoleArgs', 'IamUserInviteCloudFoundryRoleArgsDict']]]]] = None,
                 iam_policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamUserInviteIamPolicyArgs', 'IamUserInviteIamPolicyArgsDict']]]]] = None,
                 iam_user_invite_id: Optional[pulumi.Input[_builtins.str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Create a IamUserInvite resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_groups: access group ids to associate the inviting user
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] users: List of ibm id or email of user
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IamUserInviteArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IamUserInvite resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IamUserInviteArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IamUserInviteArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 classic_infra_roles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamUserInviteClassicInfraRoleArgs', 'IamUserInviteClassicInfraRoleArgsDict']]]]] = None,
                 cloud_foundry_roles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamUserInviteCloudFoundryRoleArgs', 'IamUserInviteCloudFoundryRoleArgsDict']]]]] = None,
                 iam_policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamUserInviteIamPolicyArgs', 'IamUserInviteIamPolicyArgsDict']]]]] = None,
                 iam_user_invite_id: Optional[pulumi.Input[_builtins.str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IamUserInviteArgs.__new__(IamUserInviteArgs)

            __props__.__dict__["access_groups"] = access_groups
            __props__.__dict__["classic_infra_roles"] = classic_infra_roles
            __props__.__dict__["cloud_foundry_roles"] = cloud_foundry_roles
            __props__.__dict__["iam_policies"] = iam_policies
            __props__.__dict__["iam_user_invite_id"] = iam_user_invite_id
            if users is None and not opts.urn:
                raise TypeError("Missing required property 'users'")
            __props__.__dict__["users"] = users
            __props__.__dict__["invited_users"] = None
            __props__.__dict__["number_of_invited_users"] = None
        super(IamUserInvite, __self__).__init__(
            'ibm:index/iamUserInvite:IamUserInvite',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            classic_infra_roles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamUserInviteClassicInfraRoleArgs', 'IamUserInviteClassicInfraRoleArgsDict']]]]] = None,
            cloud_foundry_roles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamUserInviteCloudFoundryRoleArgs', 'IamUserInviteCloudFoundryRoleArgsDict']]]]] = None,
            iam_policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamUserInviteIamPolicyArgs', 'IamUserInviteIamPolicyArgsDict']]]]] = None,
            iam_user_invite_id: Optional[pulumi.Input[_builtins.str]] = None,
            invited_users: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamUserInviteInvitedUserArgs', 'IamUserInviteInvitedUserArgsDict']]]]] = None,
            number_of_invited_users: Optional[pulumi.Input[_builtins.float]] = None,
            users: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'IamUserInvite':
        """
        Get an existing IamUserInvite resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_groups: access group ids to associate the inviting user
        :param pulumi.Input[_builtins.float] number_of_invited_users: Number of users invited to an account
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] users: List of ibm id or email of user
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IamUserInviteState.__new__(_IamUserInviteState)

        __props__.__dict__["access_groups"] = access_groups
        __props__.__dict__["classic_infra_roles"] = classic_infra_roles
        __props__.__dict__["cloud_foundry_roles"] = cloud_foundry_roles
        __props__.__dict__["iam_policies"] = iam_policies
        __props__.__dict__["iam_user_invite_id"] = iam_user_invite_id
        __props__.__dict__["invited_users"] = invited_users
        __props__.__dict__["number_of_invited_users"] = number_of_invited_users
        __props__.__dict__["users"] = users
        return IamUserInvite(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessGroups")
    def access_groups(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        access group ids to associate the inviting user
        """
        return pulumi.get(self, "access_groups")

    @_builtins.property
    @pulumi.getter(name="classicInfraRoles")
    def classic_infra_roles(self) -> pulumi.Output[Optional[Sequence['outputs.IamUserInviteClassicInfraRole']]]:
        return pulumi.get(self, "classic_infra_roles")

    @_builtins.property
    @pulumi.getter(name="cloudFoundryRoles")
    def cloud_foundry_roles(self) -> pulumi.Output[Optional[Sequence['outputs.IamUserInviteCloudFoundryRole']]]:
        return pulumi.get(self, "cloud_foundry_roles")

    @_builtins.property
    @pulumi.getter(name="iamPolicies")
    def iam_policies(self) -> pulumi.Output[Optional[Sequence['outputs.IamUserInviteIamPolicy']]]:
        return pulumi.get(self, "iam_policies")

    @_builtins.property
    @pulumi.getter(name="iamUserInviteId")
    def iam_user_invite_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "iam_user_invite_id")

    @_builtins.property
    @pulumi.getter(name="invitedUsers")
    def invited_users(self) -> pulumi.Output[Sequence['outputs.IamUserInviteInvitedUser']]:
        return pulumi.get(self, "invited_users")

    @_builtins.property
    @pulumi.getter(name="numberOfInvitedUsers")
    def number_of_invited_users(self) -> pulumi.Output[_builtins.float]:
        """
        Number of users invited to an account
        """
        return pulumi.get(self, "number_of_invited_users")

    @_builtins.property
    @pulumi.getter
    def users(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of ibm id or email of user
        """
        return pulumi.get(self, "users")

