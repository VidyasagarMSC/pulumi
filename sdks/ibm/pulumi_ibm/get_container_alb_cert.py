# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetContainerAlbCertResult',
    'AwaitableGetContainerAlbCertResult',
    'get_container_alb_cert',
    'get_container_alb_cert_output',
]

@pulumi.output_type
class GetContainerAlbCertResult:
    """
    A collection of values returned by getContainerAlbCert.
    """
    def __init__(__self__, cert_crn=None, cloud_cert_instance_id=None, cluster_crn=None, cluster_id=None, domain_name=None, expires_on=None, id=None, issuer_name=None, namespace=None, persistence=None, secret_name=None, status=None):
        if cert_crn and not isinstance(cert_crn, str):
            raise TypeError("Expected argument 'cert_crn' to be a str")
        pulumi.set(__self__, "cert_crn", cert_crn)
        if cloud_cert_instance_id and not isinstance(cloud_cert_instance_id, str):
            raise TypeError("Expected argument 'cloud_cert_instance_id' to be a str")
        pulumi.set(__self__, "cloud_cert_instance_id", cloud_cert_instance_id)
        if cluster_crn and not isinstance(cluster_crn, str):
            raise TypeError("Expected argument 'cluster_crn' to be a str")
        pulumi.set(__self__, "cluster_crn", cluster_crn)
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if domain_name and not isinstance(domain_name, str):
            raise TypeError("Expected argument 'domain_name' to be a str")
        pulumi.set(__self__, "domain_name", domain_name)
        if expires_on and not isinstance(expires_on, str):
            raise TypeError("Expected argument 'expires_on' to be a str")
        pulumi.set(__self__, "expires_on", expires_on)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if issuer_name and not isinstance(issuer_name, str):
            raise TypeError("Expected argument 'issuer_name' to be a str")
        pulumi.set(__self__, "issuer_name", issuer_name)
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        pulumi.set(__self__, "namespace", namespace)
        if persistence and not isinstance(persistence, bool):
            raise TypeError("Expected argument 'persistence' to be a bool")
        pulumi.set(__self__, "persistence", persistence)
        if secret_name and not isinstance(secret_name, str):
            raise TypeError("Expected argument 'secret_name' to be a str")
        pulumi.set(__self__, "secret_name", secret_name)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="certCrn")
    def cert_crn(self) -> _builtins.str:
        return pulumi.get(self, "cert_crn")

    @_builtins.property
    @pulumi.getter(name="cloudCertInstanceId")
    def cloud_cert_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "cloud_cert_instance_id")

    @_builtins.property
    @pulumi.getter(name="clusterCrn")
    @_utilities.deprecated("""Deprecated""")
    def cluster_crn(self) -> _builtins.str:
        return pulumi.get(self, "cluster_crn")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> _builtins.str:
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> _builtins.str:
        return pulumi.get(self, "expires_on")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="issuerName")
    @_utilities.deprecated("""Deprecated""")
    def issuer_name(self) -> _builtins.str:
        return pulumi.get(self, "issuer_name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def persistence(self) -> _builtins.bool:
        return pulumi.get(self, "persistence")

    @_builtins.property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> _builtins.str:
        return pulumi.get(self, "secret_name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")


class AwaitableGetContainerAlbCertResult(GetContainerAlbCertResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetContainerAlbCertResult(
            cert_crn=self.cert_crn,
            cloud_cert_instance_id=self.cloud_cert_instance_id,
            cluster_crn=self.cluster_crn,
            cluster_id=self.cluster_id,
            domain_name=self.domain_name,
            expires_on=self.expires_on,
            id=self.id,
            issuer_name=self.issuer_name,
            namespace=self.namespace,
            persistence=self.persistence,
            secret_name=self.secret_name,
            status=self.status)


def get_container_alb_cert(cluster_id: Optional[_builtins.str] = None,
                           id: Optional[_builtins.str] = None,
                           namespace: Optional[_builtins.str] = None,
                           secret_name: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetContainerAlbCertResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['id'] = id
    __args__['namespace'] = namespace
    __args__['secretName'] = secret_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getContainerAlbCert:getContainerAlbCert', __args__, opts=opts, typ=GetContainerAlbCertResult, package_ref=_utilities.get_package()).value

    return AwaitableGetContainerAlbCertResult(
        cert_crn=pulumi.get(__ret__, 'cert_crn'),
        cloud_cert_instance_id=pulumi.get(__ret__, 'cloud_cert_instance_id'),
        cluster_crn=pulumi.get(__ret__, 'cluster_crn'),
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        domain_name=pulumi.get(__ret__, 'domain_name'),
        expires_on=pulumi.get(__ret__, 'expires_on'),
        id=pulumi.get(__ret__, 'id'),
        issuer_name=pulumi.get(__ret__, 'issuer_name'),
        namespace=pulumi.get(__ret__, 'namespace'),
        persistence=pulumi.get(__ret__, 'persistence'),
        secret_name=pulumi.get(__ret__, 'secret_name'),
        status=pulumi.get(__ret__, 'status'))
def get_container_alb_cert_output(cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  namespace: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  secret_name: Optional[pulumi.Input[_builtins.str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetContainerAlbCertResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['id'] = id
    __args__['namespace'] = namespace
    __args__['secretName'] = secret_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getContainerAlbCert:getContainerAlbCert', __args__, opts=opts, typ=GetContainerAlbCertResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetContainerAlbCertResult(
        cert_crn=pulumi.get(__response__, 'cert_crn'),
        cloud_cert_instance_id=pulumi.get(__response__, 'cloud_cert_instance_id'),
        cluster_crn=pulumi.get(__response__, 'cluster_crn'),
        cluster_id=pulumi.get(__response__, 'cluster_id'),
        domain_name=pulumi.get(__response__, 'domain_name'),
        expires_on=pulumi.get(__response__, 'expires_on'),
        id=pulumi.get(__response__, 'id'),
        issuer_name=pulumi.get(__response__, 'issuer_name'),
        namespace=pulumi.get(__response__, 'namespace'),
        persistence=pulumi.get(__response__, 'persistence'),
        secret_name=pulumi.get(__response__, 'secret_name'),
        status=pulumi.get(__response__, 'status')))
