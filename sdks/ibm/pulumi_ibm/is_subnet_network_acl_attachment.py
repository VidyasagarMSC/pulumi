# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsSubnetNetworkAclAttachmentArgs', 'IsSubnetNetworkAclAttachment']

@pulumi.input_type
class IsSubnetNetworkAclAttachmentArgs:
    def __init__(__self__, *,
                 network_acl: pulumi.Input[_builtins.str],
                 subnet: pulumi.Input[_builtins.str],
                 is_subnet_network_acl_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['IsSubnetNetworkAclAttachmentTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a IsSubnetNetworkAclAttachment resource.
        :param pulumi.Input[_builtins.str] network_acl: The unique identifier of network ACL
        :param pulumi.Input[_builtins.str] subnet: The subnet identifier
        """
        pulumi.set(__self__, "network_acl", network_acl)
        pulumi.set(__self__, "subnet", subnet)
        if is_subnet_network_acl_attachment_id is not None:
            pulumi.set(__self__, "is_subnet_network_acl_attachment_id", is_subnet_network_acl_attachment_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="networkAcl")
    def network_acl(self) -> pulumi.Input[_builtins.str]:
        """
        The unique identifier of network ACL
        """
        return pulumi.get(self, "network_acl")

    @network_acl.setter
    def network_acl(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "network_acl", value)

    @_builtins.property
    @pulumi.getter
    def subnet(self) -> pulumi.Input[_builtins.str]:
        """
        The subnet identifier
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "subnet", value)

    @_builtins.property
    @pulumi.getter(name="isSubnetNetworkAclAttachmentId")
    def is_subnet_network_acl_attachment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_subnet_network_acl_attachment_id")

    @is_subnet_network_acl_attachment_id.setter
    def is_subnet_network_acl_attachment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_subnet_network_acl_attachment_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsSubnetNetworkAclAttachmentTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsSubnetNetworkAclAttachmentTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _IsSubnetNetworkAclAttachmentState:
    def __init__(__self__, *,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 is_subnet_network_acl_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_acl: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['IsSubnetNetworkAclAttachmentRuleArgs']]]] = None,
                 subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['IsSubnetNetworkAclAttachmentTimeoutsArgs']] = None,
                 vpc: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsSubnetNetworkAclAttachment resources.
        :param pulumi.Input[_builtins.str] crn: The crn for this Network ACL
        :param pulumi.Input[_builtins.str] name: Network ACL name
        :param pulumi.Input[_builtins.str] network_acl: The unique identifier of network ACL
        :param pulumi.Input[_builtins.str] resource_group: Resource group ID for the network ACL
        :param pulumi.Input[_builtins.str] subnet: The subnet identifier
        :param pulumi.Input[_builtins.str] vpc: Network ACL VPC
        """
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if is_subnet_network_acl_attachment_id is not None:
            pulumi.set(__self__, "is_subnet_network_acl_attachment_id", is_subnet_network_acl_attachment_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_acl is not None:
            pulumi.set(__self__, "network_acl", network_acl)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if vpc is not None:
            pulumi.set(__self__, "vpc", vpc)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The crn for this Network ACL
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="isSubnetNetworkAclAttachmentId")
    def is_subnet_network_acl_attachment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_subnet_network_acl_attachment_id")

    @is_subnet_network_acl_attachment_id.setter
    def is_subnet_network_acl_attachment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_subnet_network_acl_attachment_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Network ACL name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="networkAcl")
    def network_acl(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier of network ACL
        """
        return pulumi.get(self, "network_acl")

    @network_acl.setter
    def network_acl(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_acl", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource group ID for the network ACL
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsSubnetNetworkAclAttachmentRuleArgs']]]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsSubnetNetworkAclAttachmentRuleArgs']]]]):
        pulumi.set(self, "rules", value)

    @_builtins.property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The subnet identifier
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsSubnetNetworkAclAttachmentTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsSubnetNetworkAclAttachmentTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Network ACL VPC
        """
        return pulumi.get(self, "vpc")

    @vpc.setter
    def vpc(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc", value)


@pulumi.type_token("ibm:index/isSubnetNetworkAclAttachment:IsSubnetNetworkAclAttachment")
class IsSubnetNetworkAclAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 is_subnet_network_acl_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 network_acl: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsSubnetNetworkAclAttachmentTimeoutsArgs', 'IsSubnetNetworkAclAttachmentTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a IsSubnetNetworkAclAttachment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] network_acl: The unique identifier of network ACL
        :param pulumi.Input[_builtins.str] subnet: The subnet identifier
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsSubnetNetworkAclAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsSubnetNetworkAclAttachment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsSubnetNetworkAclAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsSubnetNetworkAclAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 is_subnet_network_acl_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 network_acl: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsSubnetNetworkAclAttachmentTimeoutsArgs', 'IsSubnetNetworkAclAttachmentTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsSubnetNetworkAclAttachmentArgs.__new__(IsSubnetNetworkAclAttachmentArgs)

            __props__.__dict__["is_subnet_network_acl_attachment_id"] = is_subnet_network_acl_attachment_id
            if network_acl is None and not opts.urn:
                raise TypeError("Missing required property 'network_acl'")
            __props__.__dict__["network_acl"] = network_acl
            if subnet is None and not opts.urn:
                raise TypeError("Missing required property 'subnet'")
            __props__.__dict__["subnet"] = subnet
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["crn"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["resource_group"] = None
            __props__.__dict__["rules"] = None
            __props__.__dict__["vpc"] = None
        super(IsSubnetNetworkAclAttachment, __self__).__init__(
            'ibm:index/isSubnetNetworkAclAttachment:IsSubnetNetworkAclAttachment',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            is_subnet_network_acl_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            network_acl: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group: Optional[pulumi.Input[_builtins.str]] = None,
            rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsSubnetNetworkAclAttachmentRuleArgs', 'IsSubnetNetworkAclAttachmentRuleArgsDict']]]]] = None,
            subnet: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['IsSubnetNetworkAclAttachmentTimeoutsArgs', 'IsSubnetNetworkAclAttachmentTimeoutsArgsDict']]] = None,
            vpc: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsSubnetNetworkAclAttachment':
        """
        Get an existing IsSubnetNetworkAclAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] crn: The crn for this Network ACL
        :param pulumi.Input[_builtins.str] name: Network ACL name
        :param pulumi.Input[_builtins.str] network_acl: The unique identifier of network ACL
        :param pulumi.Input[_builtins.str] resource_group: Resource group ID for the network ACL
        :param pulumi.Input[_builtins.str] subnet: The subnet identifier
        :param pulumi.Input[_builtins.str] vpc: Network ACL VPC
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsSubnetNetworkAclAttachmentState.__new__(_IsSubnetNetworkAclAttachmentState)

        __props__.__dict__["crn"] = crn
        __props__.__dict__["is_subnet_network_acl_attachment_id"] = is_subnet_network_acl_attachment_id
        __props__.__dict__["name"] = name
        __props__.__dict__["network_acl"] = network_acl
        __props__.__dict__["resource_group"] = resource_group
        __props__.__dict__["rules"] = rules
        __props__.__dict__["subnet"] = subnet
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["vpc"] = vpc
        return IsSubnetNetworkAclAttachment(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The crn for this Network ACL
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="isSubnetNetworkAclAttachmentId")
    def is_subnet_network_acl_attachment_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_subnet_network_acl_attachment_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Network ACL name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkAcl")
    def network_acl(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier of network ACL
        """
        return pulumi.get(self, "network_acl")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Output[_builtins.str]:
        """
        Resource group ID for the network ACL
        """
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter
    def rules(self) -> pulumi.Output[Sequence['outputs.IsSubnetNetworkAclAttachmentRule']]:
        return pulumi.get(self, "rules")

    @_builtins.property
    @pulumi.getter
    def subnet(self) -> pulumi.Output[_builtins.str]:
        """
        The subnet identifier
        """
        return pulumi.get(self, "subnet")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IsSubnetNetworkAclAttachmentTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> pulumi.Output[_builtins.str]:
        """
        Network ACL VPC
        """
        return pulumi.get(self, "vpc")

