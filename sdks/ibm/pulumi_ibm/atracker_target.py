# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AtrackerTargetArgs', 'AtrackerTarget']

@pulumi.input_type
class AtrackerTargetArgs:
    def __init__(__self__, *,
                 target_type: pulumi.Input[_builtins.str],
                 atracker_target_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cloudlogs_endpoint: Optional[pulumi.Input['AtrackerTargetCloudlogsEndpointArgs']] = None,
                 cos_endpoint: Optional[pulumi.Input['AtrackerTargetCosEndpointArgs']] = None,
                 eventstreams_endpoint: Optional[pulumi.Input['AtrackerTargetEventstreamsEndpointArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AtrackerTarget resource.
        :param pulumi.Input[_builtins.str] target_type: The type of the target. It can be cloud_object_storage, event_streams, or cloud_logs. Based on this type you must
               include cos_endpoint, eventstreams_endpoint or cloudlogs_endpoint.
        :param pulumi.Input['AtrackerTargetCloudlogsEndpointArgs'] cloudlogs_endpoint: Property values for the IBM Cloud Logs endpoint.
        :param pulumi.Input['AtrackerTargetCosEndpointArgs'] cos_endpoint: Property values for a Cloud Object Storage endpoint.
        :param pulumi.Input['AtrackerTargetEventstreamsEndpointArgs'] eventstreams_endpoint: Property values for the Event Streams endpoint.
        :param pulumi.Input[_builtins.str] name: The name of the target. The name must be 1000 characters or less, and cannot include any special characters other than
               `(space) - . _ :`.
        :param pulumi.Input[_builtins.str] region: Include this optional field if you want to create a target in a different region other than the one you are connected.
        """
        pulumi.set(__self__, "target_type", target_type)
        if atracker_target_id is not None:
            pulumi.set(__self__, "atracker_target_id", atracker_target_id)
        if cloudlogs_endpoint is not None:
            pulumi.set(__self__, "cloudlogs_endpoint", cloudlogs_endpoint)
        if cos_endpoint is not None:
            pulumi.set(__self__, "cos_endpoint", cos_endpoint)
        if eventstreams_endpoint is not None:
            pulumi.set(__self__, "eventstreams_endpoint", eventstreams_endpoint)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="targetType")
    def target_type(self) -> pulumi.Input[_builtins.str]:
        """
        The type of the target. It can be cloud_object_storage, event_streams, or cloud_logs. Based on this type you must
        include cos_endpoint, eventstreams_endpoint or cloudlogs_endpoint.
        """
        return pulumi.get(self, "target_type")

    @target_type.setter
    def target_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "target_type", value)

    @_builtins.property
    @pulumi.getter(name="atrackerTargetId")
    def atracker_target_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "atracker_target_id")

    @atracker_target_id.setter
    def atracker_target_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "atracker_target_id", value)

    @_builtins.property
    @pulumi.getter(name="cloudlogsEndpoint")
    def cloudlogs_endpoint(self) -> Optional[pulumi.Input['AtrackerTargetCloudlogsEndpointArgs']]:
        """
        Property values for the IBM Cloud Logs endpoint.
        """
        return pulumi.get(self, "cloudlogs_endpoint")

    @cloudlogs_endpoint.setter
    def cloudlogs_endpoint(self, value: Optional[pulumi.Input['AtrackerTargetCloudlogsEndpointArgs']]):
        pulumi.set(self, "cloudlogs_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="cosEndpoint")
    def cos_endpoint(self) -> Optional[pulumi.Input['AtrackerTargetCosEndpointArgs']]:
        """
        Property values for a Cloud Object Storage endpoint.
        """
        return pulumi.get(self, "cos_endpoint")

    @cos_endpoint.setter
    def cos_endpoint(self, value: Optional[pulumi.Input['AtrackerTargetCosEndpointArgs']]):
        pulumi.set(self, "cos_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="eventstreamsEndpoint")
    def eventstreams_endpoint(self) -> Optional[pulumi.Input['AtrackerTargetEventstreamsEndpointArgs']]:
        """
        Property values for the Event Streams endpoint.
        """
        return pulumi.get(self, "eventstreams_endpoint")

    @eventstreams_endpoint.setter
    def eventstreams_endpoint(self, value: Optional[pulumi.Input['AtrackerTargetEventstreamsEndpointArgs']]):
        pulumi.set(self, "eventstreams_endpoint", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the target. The name must be 1000 characters or less, and cannot include any special characters other than
        `(space) - . _ :`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Include this optional field if you want to create a target in a different region other than the one you are connected.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _AtrackerTargetState:
    def __init__(__self__, *,
                 api_version: Optional[pulumi.Input[_builtins.float]] = None,
                 atracker_target_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cloudlogs_endpoint: Optional[pulumi.Input['AtrackerTargetCloudlogsEndpointArgs']] = None,
                 cos_endpoint: Optional[pulumi.Input['AtrackerTargetCosEndpointArgs']] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 eventstreams_endpoint: Optional[pulumi.Input['AtrackerTargetEventstreamsEndpointArgs']] = None,
                 message: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 target_type: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 write_statuses: Optional[pulumi.Input[Sequence[pulumi.Input['AtrackerTargetWriteStatusArgs']]]] = None):
        """
        Input properties used for looking up and filtering AtrackerTarget resources.
        :param pulumi.Input[_builtins.float] api_version: The API version of the target.
        :param pulumi.Input['AtrackerTargetCloudlogsEndpointArgs'] cloudlogs_endpoint: Property values for the IBM Cloud Logs endpoint.
        :param pulumi.Input['AtrackerTargetCosEndpointArgs'] cos_endpoint: Property values for a Cloud Object Storage endpoint.
        :param pulumi.Input[_builtins.str] created_at: The timestamp of the target creation time.
        :param pulumi.Input[_builtins.str] crn: The crn of the target resource.
        :param pulumi.Input['AtrackerTargetEventstreamsEndpointArgs'] eventstreams_endpoint: Property values for the Event Streams endpoint.
        :param pulumi.Input[_builtins.str] message: An optional message containing information about the target.
        :param pulumi.Input[_builtins.str] name: The name of the target. The name must be 1000 characters or less, and cannot include any special characters other than
               `(space) - . _ :`.
        :param pulumi.Input[_builtins.str] region: Include this optional field if you want to create a target in a different region other than the one you are connected.
        :param pulumi.Input[_builtins.str] target_type: The type of the target. It can be cloud_object_storage, event_streams, or cloud_logs. Based on this type you must
               include cos_endpoint, eventstreams_endpoint or cloudlogs_endpoint.
        :param pulumi.Input[_builtins.str] updated_at: The timestamp of the target last updated time.
        :param pulumi.Input[Sequence[pulumi.Input['AtrackerTargetWriteStatusArgs']]] write_statuses: The status of the write attempt to the target with the provided endpoint parameters.
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if atracker_target_id is not None:
            pulumi.set(__self__, "atracker_target_id", atracker_target_id)
        if cloudlogs_endpoint is not None:
            pulumi.set(__self__, "cloudlogs_endpoint", cloudlogs_endpoint)
        if cos_endpoint is not None:
            pulumi.set(__self__, "cos_endpoint", cos_endpoint)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if eventstreams_endpoint is not None:
            pulumi.set(__self__, "eventstreams_endpoint", eventstreams_endpoint)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if target_type is not None:
            pulumi.set(__self__, "target_type", target_type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if write_statuses is not None:
            pulumi.set(__self__, "write_statuses", write_statuses)

    @_builtins.property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The API version of the target.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "api_version", value)

    @_builtins.property
    @pulumi.getter(name="atrackerTargetId")
    def atracker_target_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "atracker_target_id")

    @atracker_target_id.setter
    def atracker_target_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "atracker_target_id", value)

    @_builtins.property
    @pulumi.getter(name="cloudlogsEndpoint")
    def cloudlogs_endpoint(self) -> Optional[pulumi.Input['AtrackerTargetCloudlogsEndpointArgs']]:
        """
        Property values for the IBM Cloud Logs endpoint.
        """
        return pulumi.get(self, "cloudlogs_endpoint")

    @cloudlogs_endpoint.setter
    def cloudlogs_endpoint(self, value: Optional[pulumi.Input['AtrackerTargetCloudlogsEndpointArgs']]):
        pulumi.set(self, "cloudlogs_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="cosEndpoint")
    def cos_endpoint(self) -> Optional[pulumi.Input['AtrackerTargetCosEndpointArgs']]:
        """
        Property values for a Cloud Object Storage endpoint.
        """
        return pulumi.get(self, "cos_endpoint")

    @cos_endpoint.setter
    def cos_endpoint(self, value: Optional[pulumi.Input['AtrackerTargetCosEndpointArgs']]):
        pulumi.set(self, "cos_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The timestamp of the target creation time.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The crn of the target resource.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="eventstreamsEndpoint")
    def eventstreams_endpoint(self) -> Optional[pulumi.Input['AtrackerTargetEventstreamsEndpointArgs']]:
        """
        Property values for the Event Streams endpoint.
        """
        return pulumi.get(self, "eventstreams_endpoint")

    @eventstreams_endpoint.setter
    def eventstreams_endpoint(self, value: Optional[pulumi.Input['AtrackerTargetEventstreamsEndpointArgs']]):
        pulumi.set(self, "eventstreams_endpoint", value)

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        An optional message containing information about the target.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the target. The name must be 1000 characters or less, and cannot include any special characters other than
        `(space) - . _ :`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Include this optional field if you want to create a target in a different region other than the one you are connected.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="targetType")
    def target_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the target. It can be cloud_object_storage, event_streams, or cloud_logs. Based on this type you must
        include cos_endpoint, eventstreams_endpoint or cloudlogs_endpoint.
        """
        return pulumi.get(self, "target_type")

    @target_type.setter
    def target_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_type", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The timestamp of the target last updated time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="writeStatuses")
    def write_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AtrackerTargetWriteStatusArgs']]]]:
        """
        The status of the write attempt to the target with the provided endpoint parameters.
        """
        return pulumi.get(self, "write_statuses")

    @write_statuses.setter
    def write_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AtrackerTargetWriteStatusArgs']]]]):
        pulumi.set(self, "write_statuses", value)


@pulumi.type_token("ibm:index/atrackerTarget:AtrackerTarget")
class AtrackerTarget(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 atracker_target_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cloudlogs_endpoint: Optional[pulumi.Input[Union['AtrackerTargetCloudlogsEndpointArgs', 'AtrackerTargetCloudlogsEndpointArgsDict']]] = None,
                 cos_endpoint: Optional[pulumi.Input[Union['AtrackerTargetCosEndpointArgs', 'AtrackerTargetCosEndpointArgsDict']]] = None,
                 eventstreams_endpoint: Optional[pulumi.Input[Union['AtrackerTargetEventstreamsEndpointArgs', 'AtrackerTargetEventstreamsEndpointArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 target_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a AtrackerTarget resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['AtrackerTargetCloudlogsEndpointArgs', 'AtrackerTargetCloudlogsEndpointArgsDict']] cloudlogs_endpoint: Property values for the IBM Cloud Logs endpoint.
        :param pulumi.Input[Union['AtrackerTargetCosEndpointArgs', 'AtrackerTargetCosEndpointArgsDict']] cos_endpoint: Property values for a Cloud Object Storage endpoint.
        :param pulumi.Input[Union['AtrackerTargetEventstreamsEndpointArgs', 'AtrackerTargetEventstreamsEndpointArgsDict']] eventstreams_endpoint: Property values for the Event Streams endpoint.
        :param pulumi.Input[_builtins.str] name: The name of the target. The name must be 1000 characters or less, and cannot include any special characters other than
               `(space) - . _ :`.
        :param pulumi.Input[_builtins.str] region: Include this optional field if you want to create a target in a different region other than the one you are connected.
        :param pulumi.Input[_builtins.str] target_type: The type of the target. It can be cloud_object_storage, event_streams, or cloud_logs. Based on this type you must
               include cos_endpoint, eventstreams_endpoint or cloudlogs_endpoint.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AtrackerTargetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AtrackerTarget resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AtrackerTargetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AtrackerTargetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 atracker_target_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cloudlogs_endpoint: Optional[pulumi.Input[Union['AtrackerTargetCloudlogsEndpointArgs', 'AtrackerTargetCloudlogsEndpointArgsDict']]] = None,
                 cos_endpoint: Optional[pulumi.Input[Union['AtrackerTargetCosEndpointArgs', 'AtrackerTargetCosEndpointArgsDict']]] = None,
                 eventstreams_endpoint: Optional[pulumi.Input[Union['AtrackerTargetEventstreamsEndpointArgs', 'AtrackerTargetEventstreamsEndpointArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 target_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AtrackerTargetArgs.__new__(AtrackerTargetArgs)

            __props__.__dict__["atracker_target_id"] = atracker_target_id
            __props__.__dict__["cloudlogs_endpoint"] = cloudlogs_endpoint
            __props__.__dict__["cos_endpoint"] = cos_endpoint
            __props__.__dict__["eventstreams_endpoint"] = eventstreams_endpoint
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            if target_type is None and not opts.urn:
                raise TypeError("Missing required property 'target_type'")
            __props__.__dict__["target_type"] = target_type
            __props__.__dict__["api_version"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["message"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["write_statuses"] = None
        super(AtrackerTarget, __self__).__init__(
            'ibm:index/atrackerTarget:AtrackerTarget',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            api_version: Optional[pulumi.Input[_builtins.float]] = None,
            atracker_target_id: Optional[pulumi.Input[_builtins.str]] = None,
            cloudlogs_endpoint: Optional[pulumi.Input[Union['AtrackerTargetCloudlogsEndpointArgs', 'AtrackerTargetCloudlogsEndpointArgsDict']]] = None,
            cos_endpoint: Optional[pulumi.Input[Union['AtrackerTargetCosEndpointArgs', 'AtrackerTargetCosEndpointArgsDict']]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            eventstreams_endpoint: Optional[pulumi.Input[Union['AtrackerTargetEventstreamsEndpointArgs', 'AtrackerTargetEventstreamsEndpointArgsDict']]] = None,
            message: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            target_type: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            write_statuses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AtrackerTargetWriteStatusArgs', 'AtrackerTargetWriteStatusArgsDict']]]]] = None) -> 'AtrackerTarget':
        """
        Get an existing AtrackerTarget resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] api_version: The API version of the target.
        :param pulumi.Input[Union['AtrackerTargetCloudlogsEndpointArgs', 'AtrackerTargetCloudlogsEndpointArgsDict']] cloudlogs_endpoint: Property values for the IBM Cloud Logs endpoint.
        :param pulumi.Input[Union['AtrackerTargetCosEndpointArgs', 'AtrackerTargetCosEndpointArgsDict']] cos_endpoint: Property values for a Cloud Object Storage endpoint.
        :param pulumi.Input[_builtins.str] created_at: The timestamp of the target creation time.
        :param pulumi.Input[_builtins.str] crn: The crn of the target resource.
        :param pulumi.Input[Union['AtrackerTargetEventstreamsEndpointArgs', 'AtrackerTargetEventstreamsEndpointArgsDict']] eventstreams_endpoint: Property values for the Event Streams endpoint.
        :param pulumi.Input[_builtins.str] message: An optional message containing information about the target.
        :param pulumi.Input[_builtins.str] name: The name of the target. The name must be 1000 characters or less, and cannot include any special characters other than
               `(space) - . _ :`.
        :param pulumi.Input[_builtins.str] region: Include this optional field if you want to create a target in a different region other than the one you are connected.
        :param pulumi.Input[_builtins.str] target_type: The type of the target. It can be cloud_object_storage, event_streams, or cloud_logs. Based on this type you must
               include cos_endpoint, eventstreams_endpoint or cloudlogs_endpoint.
        :param pulumi.Input[_builtins.str] updated_at: The timestamp of the target last updated time.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AtrackerTargetWriteStatusArgs', 'AtrackerTargetWriteStatusArgsDict']]]] write_statuses: The status of the write attempt to the target with the provided endpoint parameters.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AtrackerTargetState.__new__(_AtrackerTargetState)

        __props__.__dict__["api_version"] = api_version
        __props__.__dict__["atracker_target_id"] = atracker_target_id
        __props__.__dict__["cloudlogs_endpoint"] = cloudlogs_endpoint
        __props__.__dict__["cos_endpoint"] = cos_endpoint
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["crn"] = crn
        __props__.__dict__["eventstreams_endpoint"] = eventstreams_endpoint
        __props__.__dict__["message"] = message
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["target_type"] = target_type
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["write_statuses"] = write_statuses
        return AtrackerTarget(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> pulumi.Output[_builtins.float]:
        """
        The API version of the target.
        """
        return pulumi.get(self, "api_version")

    @_builtins.property
    @pulumi.getter(name="atrackerTargetId")
    def atracker_target_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "atracker_target_id")

    @_builtins.property
    @pulumi.getter(name="cloudlogsEndpoint")
    def cloudlogs_endpoint(self) -> pulumi.Output[Optional['outputs.AtrackerTargetCloudlogsEndpoint']]:
        """
        Property values for the IBM Cloud Logs endpoint.
        """
        return pulumi.get(self, "cloudlogs_endpoint")

    @_builtins.property
    @pulumi.getter(name="cosEndpoint")
    def cos_endpoint(self) -> pulumi.Output[Optional['outputs.AtrackerTargetCosEndpoint']]:
        """
        Property values for a Cloud Object Storage endpoint.
        """
        return pulumi.get(self, "cos_endpoint")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The timestamp of the target creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The crn of the target resource.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="eventstreamsEndpoint")
    def eventstreams_endpoint(self) -> pulumi.Output[Optional['outputs.AtrackerTargetEventstreamsEndpoint']]:
        """
        Property values for the Event Streams endpoint.
        """
        return pulumi.get(self, "eventstreams_endpoint")

    @_builtins.property
    @pulumi.getter
    def message(self) -> pulumi.Output[_builtins.str]:
        """
        An optional message containing information about the target.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the target. The name must be 1000 characters or less, and cannot include any special characters other than
        `(space) - . _ :`.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Include this optional field if you want to create a target in a different region other than the one you are connected.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="targetType")
    def target_type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of the target. It can be cloud_object_storage, event_streams, or cloud_logs. Based on this type you must
        include cos_endpoint, eventstreams_endpoint or cloudlogs_endpoint.
        """
        return pulumi.get(self, "target_type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The timestamp of the target last updated time.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="writeStatuses")
    def write_statuses(self) -> pulumi.Output[Sequence['outputs.AtrackerTargetWriteStatus']]:
        """
        The status of the write attempt to the target with the provided endpoint parameters.
        """
        return pulumi.get(self, "write_statuses")

