# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DlGatewayMacsecCakArgs', 'DlGatewayMacsecCak']

@pulumi.input_type
class DlGatewayMacsecCakArgs:
    def __init__(__self__, *,
                 gateway: pulumi.Input[_builtins.str],
                 keys: pulumi.Input[Sequence[pulumi.Input['DlGatewayMacsecCakKeyArgs']]],
                 session: pulumi.Input[_builtins.str],
                 dl_gateway_macsec_cak_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DlGatewayMacsecCak resource.
        :param pulumi.Input[_builtins.str] gateway: Gateway ID
        :param pulumi.Input[Sequence[pulumi.Input['DlGatewayMacsecCakKeyArgs']]] keys: HPCS Key
        :param pulumi.Input[_builtins.str] session: The intended session the key will be used to secure.
        :param pulumi.Input[_builtins.str] name: The name identifies the connectivity association key (CAK) within the MACsec key chain.
        """
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "keys", keys)
        pulumi.set(__self__, "session", session)
        if dl_gateway_macsec_cak_id is not None:
            pulumi.set(__self__, "dl_gateway_macsec_cak_id", dl_gateway_macsec_cak_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> pulumi.Input[_builtins.str]:
        """
        Gateway ID
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "gateway", value)

    @_builtins.property
    @pulumi.getter
    def keys(self) -> pulumi.Input[Sequence[pulumi.Input['DlGatewayMacsecCakKeyArgs']]]:
        """
        HPCS Key
        """
        return pulumi.get(self, "keys")

    @keys.setter
    def keys(self, value: pulumi.Input[Sequence[pulumi.Input['DlGatewayMacsecCakKeyArgs']]]):
        pulumi.set(self, "keys", value)

    @_builtins.property
    @pulumi.getter
    def session(self) -> pulumi.Input[_builtins.str]:
        """
        The intended session the key will be used to secure.
        """
        return pulumi.get(self, "session")

    @session.setter
    def session(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "session", value)

    @_builtins.property
    @pulumi.getter(name="dlGatewayMacsecCakId")
    def dl_gateway_macsec_cak_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dl_gateway_macsec_cak_id")

    @dl_gateway_macsec_cak_id.setter
    def dl_gateway_macsec_cak_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dl_gateway_macsec_cak_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name identifies the connectivity association key (CAK) within the MACsec key chain.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _DlGatewayMacsecCakState:
    def __init__(__self__, *,
                 cak_id: Optional[pulumi.Input[_builtins.str]] = None,
                 caks: Optional[pulumi.Input[Sequence[pulumi.Input['DlGatewayMacsecCakCakArgs']]]] = None,
                 dl_gateway_macsec_cak_id: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input['DlGatewayMacsecCakKeyArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 session: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DlGatewayMacsecCak resources.
        :param pulumi.Input[_builtins.str] cak_id: CAK ID
        :param pulumi.Input[Sequence[pulumi.Input['DlGatewayMacsecCakCakArgs']]] caks: Determines how SAK rekeying occurs.
        :param pulumi.Input[_builtins.str] gateway: Gateway ID
        :param pulumi.Input[Sequence[pulumi.Input['DlGatewayMacsecCakKeyArgs']]] keys: HPCS Key
        :param pulumi.Input[_builtins.str] name: The name identifies the connectivity association key (CAK) within the MACsec key chain.
        :param pulumi.Input[_builtins.str] session: The intended session the key will be used to secure.
        """
        if cak_id is not None:
            pulumi.set(__self__, "cak_id", cak_id)
        if caks is not None:
            pulumi.set(__self__, "caks", caks)
        if dl_gateway_macsec_cak_id is not None:
            pulumi.set(__self__, "dl_gateway_macsec_cak_id", dl_gateway_macsec_cak_id)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if session is not None:
            pulumi.set(__self__, "session", session)

    @_builtins.property
    @pulumi.getter(name="cakId")
    def cak_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CAK ID
        """
        return pulumi.get(self, "cak_id")

    @cak_id.setter
    def cak_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cak_id", value)

    @_builtins.property
    @pulumi.getter
    def caks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DlGatewayMacsecCakCakArgs']]]]:
        """
        Determines how SAK rekeying occurs.
        """
        return pulumi.get(self, "caks")

    @caks.setter
    def caks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DlGatewayMacsecCakCakArgs']]]]):
        pulumi.set(self, "caks", value)

    @_builtins.property
    @pulumi.getter(name="dlGatewayMacsecCakId")
    def dl_gateway_macsec_cak_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dl_gateway_macsec_cak_id")

    @dl_gateway_macsec_cak_id.setter
    def dl_gateway_macsec_cak_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dl_gateway_macsec_cak_id", value)

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Gateway ID
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gateway", value)

    @_builtins.property
    @pulumi.getter
    def keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DlGatewayMacsecCakKeyArgs']]]]:
        """
        HPCS Key
        """
        return pulumi.get(self, "keys")

    @keys.setter
    def keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DlGatewayMacsecCakKeyArgs']]]]):
        pulumi.set(self, "keys", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name identifies the connectivity association key (CAK) within the MACsec key chain.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def session(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The intended session the key will be used to secure.
        """
        return pulumi.get(self, "session")

    @session.setter
    def session(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "session", value)


@pulumi.type_token("ibm:index/dlGatewayMacsecCak:DlGatewayMacsecCak")
class DlGatewayMacsecCak(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dl_gateway_macsec_cak_id: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DlGatewayMacsecCakKeyArgs', 'DlGatewayMacsecCakKeyArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 session: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a DlGatewayMacsecCak resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] gateway: Gateway ID
        :param pulumi.Input[Sequence[pulumi.Input[Union['DlGatewayMacsecCakKeyArgs', 'DlGatewayMacsecCakKeyArgsDict']]]] keys: HPCS Key
        :param pulumi.Input[_builtins.str] name: The name identifies the connectivity association key (CAK) within the MACsec key chain.
        :param pulumi.Input[_builtins.str] session: The intended session the key will be used to secure.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DlGatewayMacsecCakArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DlGatewayMacsecCak resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DlGatewayMacsecCakArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DlGatewayMacsecCakArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dl_gateway_macsec_cak_id: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DlGatewayMacsecCakKeyArgs', 'DlGatewayMacsecCakKeyArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 session: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DlGatewayMacsecCakArgs.__new__(DlGatewayMacsecCakArgs)

            __props__.__dict__["dl_gateway_macsec_cak_id"] = dl_gateway_macsec_cak_id
            if gateway is None and not opts.urn:
                raise TypeError("Missing required property 'gateway'")
            __props__.__dict__["gateway"] = gateway
            if keys is None and not opts.urn:
                raise TypeError("Missing required property 'keys'")
            __props__.__dict__["keys"] = keys
            __props__.__dict__["name"] = name
            if session is None and not opts.urn:
                raise TypeError("Missing required property 'session'")
            __props__.__dict__["session"] = session
            __props__.__dict__["cak_id"] = None
            __props__.__dict__["caks"] = None
        super(DlGatewayMacsecCak, __self__).__init__(
            'ibm:index/dlGatewayMacsecCak:DlGatewayMacsecCak',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cak_id: Optional[pulumi.Input[_builtins.str]] = None,
            caks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DlGatewayMacsecCakCakArgs', 'DlGatewayMacsecCakCakArgsDict']]]]] = None,
            dl_gateway_macsec_cak_id: Optional[pulumi.Input[_builtins.str]] = None,
            gateway: Optional[pulumi.Input[_builtins.str]] = None,
            keys: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DlGatewayMacsecCakKeyArgs', 'DlGatewayMacsecCakKeyArgsDict']]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            session: Optional[pulumi.Input[_builtins.str]] = None) -> 'DlGatewayMacsecCak':
        """
        Get an existing DlGatewayMacsecCak resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cak_id: CAK ID
        :param pulumi.Input[Sequence[pulumi.Input[Union['DlGatewayMacsecCakCakArgs', 'DlGatewayMacsecCakCakArgsDict']]]] caks: Determines how SAK rekeying occurs.
        :param pulumi.Input[_builtins.str] gateway: Gateway ID
        :param pulumi.Input[Sequence[pulumi.Input[Union['DlGatewayMacsecCakKeyArgs', 'DlGatewayMacsecCakKeyArgsDict']]]] keys: HPCS Key
        :param pulumi.Input[_builtins.str] name: The name identifies the connectivity association key (CAK) within the MACsec key chain.
        :param pulumi.Input[_builtins.str] session: The intended session the key will be used to secure.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DlGatewayMacsecCakState.__new__(_DlGatewayMacsecCakState)

        __props__.__dict__["cak_id"] = cak_id
        __props__.__dict__["caks"] = caks
        __props__.__dict__["dl_gateway_macsec_cak_id"] = dl_gateway_macsec_cak_id
        __props__.__dict__["gateway"] = gateway
        __props__.__dict__["keys"] = keys
        __props__.__dict__["name"] = name
        __props__.__dict__["session"] = session
        return DlGatewayMacsecCak(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="cakId")
    def cak_id(self) -> pulumi.Output[_builtins.str]:
        """
        CAK ID
        """
        return pulumi.get(self, "cak_id")

    @_builtins.property
    @pulumi.getter
    def caks(self) -> pulumi.Output[Sequence['outputs.DlGatewayMacsecCakCak']]:
        """
        Determines how SAK rekeying occurs.
        """
        return pulumi.get(self, "caks")

    @_builtins.property
    @pulumi.getter(name="dlGatewayMacsecCakId")
    def dl_gateway_macsec_cak_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "dl_gateway_macsec_cak_id")

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> pulumi.Output[_builtins.str]:
        """
        Gateway ID
        """
        return pulumi.get(self, "gateway")

    @_builtins.property
    @pulumi.getter
    def keys(self) -> pulumi.Output[Sequence['outputs.DlGatewayMacsecCakKey']]:
        """
        HPCS Key
        """
        return pulumi.get(self, "keys")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name identifies the connectivity association key (CAK) within the MACsec key chain.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def session(self) -> pulumi.Output[_builtins.str]:
        """
        The intended session the key will be used to secure.
        """
        return pulumi.get(self, "session")

