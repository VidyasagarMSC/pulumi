# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ComputeSslCertificateArgs', 'ComputeSslCertificate']

@pulumi.input_type
class ComputeSslCertificateArgs:
    def __init__(__self__, *,
                 certificate: pulumi.Input[_builtins.str],
                 private_key: pulumi.Input[_builtins.str],
                 compute_ssl_certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
                 intermediate_certificate: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a ComputeSslCertificate resource.
        :param pulumi.Input[_builtins.str] certificate: SSL Certifcate
        :param pulumi.Input[_builtins.str] private_key: SSL Private Key
        :param pulumi.Input[_builtins.str] intermediate_certificate: Intermediate certificate value
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags set for resource
        """
        pulumi.set(__self__, "certificate", certificate)
        pulumi.set(__self__, "private_key", private_key)
        if compute_ssl_certificate_id is not None:
            pulumi.set(__self__, "compute_ssl_certificate_id", compute_ssl_certificate_id)
        if intermediate_certificate is not None:
            pulumi.set(__self__, "intermediate_certificate", intermediate_certificate)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def certificate(self) -> pulumi.Input[_builtins.str]:
        """
        SSL Certifcate
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "certificate", value)

    @_builtins.property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Input[_builtins.str]:
        """
        SSL Private Key
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "private_key", value)

    @_builtins.property
    @pulumi.getter(name="computeSslCertificateId")
    def compute_ssl_certificate_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compute_ssl_certificate_id")

    @compute_ssl_certificate_id.setter
    def compute_ssl_certificate_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_ssl_certificate_id", value)

    @_builtins.property
    @pulumi.getter(name="intermediateCertificate")
    def intermediate_certificate(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Intermediate certificate value
        """
        return pulumi.get(self, "intermediate_certificate")

    @intermediate_certificate.setter
    def intermediate_certificate(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "intermediate_certificate", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Tags set for resource
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _ComputeSslCertificateState:
    def __init__(__self__, *,
                 certificate: Optional[pulumi.Input[_builtins.str]] = None,
                 common_name: Optional[pulumi.Input[_builtins.str]] = None,
                 compute_ssl_certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
                 create_date: Optional[pulumi.Input[_builtins.str]] = None,
                 intermediate_certificate: Optional[pulumi.Input[_builtins.str]] = None,
                 key_size: Optional[pulumi.Input[_builtins.float]] = None,
                 modify_date: Optional[pulumi.Input[_builtins.str]] = None,
                 organization_name: Optional[pulumi.Input[_builtins.str]] = None,
                 private_key: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 validity_begin: Optional[pulumi.Input[_builtins.str]] = None,
                 validity_days: Optional[pulumi.Input[_builtins.float]] = None,
                 validity_end: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ComputeSslCertificate resources.
        :param pulumi.Input[_builtins.str] certificate: SSL Certifcate
        :param pulumi.Input[_builtins.str] common_name: Common name
        :param pulumi.Input[_builtins.str] create_date: certificate creation date
        :param pulumi.Input[_builtins.str] intermediate_certificate: Intermediate certificate value
        :param pulumi.Input[_builtins.float] key_size: SSL key size
        :param pulumi.Input[_builtins.str] modify_date: certificate modificatiob date
        :param pulumi.Input[_builtins.str] organization_name: Organization name
        :param pulumi.Input[_builtins.str] private_key: SSL Private Key
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags set for resource
        :param pulumi.Input[_builtins.str] validity_begin: Validity begins from
        :param pulumi.Input[_builtins.float] validity_days: Validity days
        :param pulumi.Input[_builtins.str] validity_end: Validity ends before
        """
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if compute_ssl_certificate_id is not None:
            pulumi.set(__self__, "compute_ssl_certificate_id", compute_ssl_certificate_id)
        if create_date is not None:
            pulumi.set(__self__, "create_date", create_date)
        if intermediate_certificate is not None:
            pulumi.set(__self__, "intermediate_certificate", intermediate_certificate)
        if key_size is not None:
            pulumi.set(__self__, "key_size", key_size)
        if modify_date is not None:
            pulumi.set(__self__, "modify_date", modify_date)
        if organization_name is not None:
            pulumi.set(__self__, "organization_name", organization_name)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if validity_begin is not None:
            pulumi.set(__self__, "validity_begin", validity_begin)
        if validity_days is not None:
            pulumi.set(__self__, "validity_days", validity_days)
        if validity_end is not None:
            pulumi.set(__self__, "validity_end", validity_end)

    @_builtins.property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        SSL Certifcate
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate", value)

    @_builtins.property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Common name
        """
        return pulumi.get(self, "common_name")

    @common_name.setter
    def common_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "common_name", value)

    @_builtins.property
    @pulumi.getter(name="computeSslCertificateId")
    def compute_ssl_certificate_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compute_ssl_certificate_id")

    @compute_ssl_certificate_id.setter
    def compute_ssl_certificate_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_ssl_certificate_id", value)

    @_builtins.property
    @pulumi.getter(name="createDate")
    def create_date(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        certificate creation date
        """
        return pulumi.get(self, "create_date")

    @create_date.setter
    def create_date(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "create_date", value)

    @_builtins.property
    @pulumi.getter(name="intermediateCertificate")
    def intermediate_certificate(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Intermediate certificate value
        """
        return pulumi.get(self, "intermediate_certificate")

    @intermediate_certificate.setter
    def intermediate_certificate(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "intermediate_certificate", value)

    @_builtins.property
    @pulumi.getter(name="keySize")
    def key_size(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        SSL key size
        """
        return pulumi.get(self, "key_size")

    @key_size.setter
    def key_size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "key_size", value)

    @_builtins.property
    @pulumi.getter(name="modifyDate")
    def modify_date(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        certificate modificatiob date
        """
        return pulumi.get(self, "modify_date")

    @modify_date.setter
    def modify_date(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "modify_date", value)

    @_builtins.property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Organization name
        """
        return pulumi.get(self, "organization_name")

    @organization_name.setter
    def organization_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organization_name", value)

    @_builtins.property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        SSL Private Key
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_key", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Tags set for resource
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="validityBegin")
    def validity_begin(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Validity begins from
        """
        return pulumi.get(self, "validity_begin")

    @validity_begin.setter
    def validity_begin(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "validity_begin", value)

    @_builtins.property
    @pulumi.getter(name="validityDays")
    def validity_days(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Validity days
        """
        return pulumi.get(self, "validity_days")

    @validity_days.setter
    def validity_days(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "validity_days", value)

    @_builtins.property
    @pulumi.getter(name="validityEnd")
    def validity_end(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Validity ends before
        """
        return pulumi.get(self, "validity_end")

    @validity_end.setter
    def validity_end(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "validity_end", value)


@pulumi.type_token("ibm:index/computeSslCertificate:ComputeSslCertificate")
class ComputeSslCertificate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate: Optional[pulumi.Input[_builtins.str]] = None,
                 compute_ssl_certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
                 intermediate_certificate: Optional[pulumi.Input[_builtins.str]] = None,
                 private_key: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Create a ComputeSslCertificate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] certificate: SSL Certifcate
        :param pulumi.Input[_builtins.str] intermediate_certificate: Intermediate certificate value
        :param pulumi.Input[_builtins.str] private_key: SSL Private Key
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags set for resource
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ComputeSslCertificateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ComputeSslCertificate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ComputeSslCertificateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ComputeSslCertificateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate: Optional[pulumi.Input[_builtins.str]] = None,
                 compute_ssl_certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
                 intermediate_certificate: Optional[pulumi.Input[_builtins.str]] = None,
                 private_key: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ComputeSslCertificateArgs.__new__(ComputeSslCertificateArgs)

            if certificate is None and not opts.urn:
                raise TypeError("Missing required property 'certificate'")
            __props__.__dict__["certificate"] = certificate
            __props__.__dict__["compute_ssl_certificate_id"] = compute_ssl_certificate_id
            __props__.__dict__["intermediate_certificate"] = intermediate_certificate
            if private_key is None and not opts.urn:
                raise TypeError("Missing required property 'private_key'")
            __props__.__dict__["private_key"] = None if private_key is None else pulumi.Output.secret(private_key)
            __props__.__dict__["tags"] = tags
            __props__.__dict__["common_name"] = None
            __props__.__dict__["create_date"] = None
            __props__.__dict__["key_size"] = None
            __props__.__dict__["modify_date"] = None
            __props__.__dict__["organization_name"] = None
            __props__.__dict__["validity_begin"] = None
            __props__.__dict__["validity_days"] = None
            __props__.__dict__["validity_end"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["privateKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ComputeSslCertificate, __self__).__init__(
            'ibm:index/computeSslCertificate:ComputeSslCertificate',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            certificate: Optional[pulumi.Input[_builtins.str]] = None,
            common_name: Optional[pulumi.Input[_builtins.str]] = None,
            compute_ssl_certificate_id: Optional[pulumi.Input[_builtins.str]] = None,
            create_date: Optional[pulumi.Input[_builtins.str]] = None,
            intermediate_certificate: Optional[pulumi.Input[_builtins.str]] = None,
            key_size: Optional[pulumi.Input[_builtins.float]] = None,
            modify_date: Optional[pulumi.Input[_builtins.str]] = None,
            organization_name: Optional[pulumi.Input[_builtins.str]] = None,
            private_key: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            validity_begin: Optional[pulumi.Input[_builtins.str]] = None,
            validity_days: Optional[pulumi.Input[_builtins.float]] = None,
            validity_end: Optional[pulumi.Input[_builtins.str]] = None) -> 'ComputeSslCertificate':
        """
        Get an existing ComputeSslCertificate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] certificate: SSL Certifcate
        :param pulumi.Input[_builtins.str] common_name: Common name
        :param pulumi.Input[_builtins.str] create_date: certificate creation date
        :param pulumi.Input[_builtins.str] intermediate_certificate: Intermediate certificate value
        :param pulumi.Input[_builtins.float] key_size: SSL key size
        :param pulumi.Input[_builtins.str] modify_date: certificate modificatiob date
        :param pulumi.Input[_builtins.str] organization_name: Organization name
        :param pulumi.Input[_builtins.str] private_key: SSL Private Key
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags set for resource
        :param pulumi.Input[_builtins.str] validity_begin: Validity begins from
        :param pulumi.Input[_builtins.float] validity_days: Validity days
        :param pulumi.Input[_builtins.str] validity_end: Validity ends before
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ComputeSslCertificateState.__new__(_ComputeSslCertificateState)

        __props__.__dict__["certificate"] = certificate
        __props__.__dict__["common_name"] = common_name
        __props__.__dict__["compute_ssl_certificate_id"] = compute_ssl_certificate_id
        __props__.__dict__["create_date"] = create_date
        __props__.__dict__["intermediate_certificate"] = intermediate_certificate
        __props__.__dict__["key_size"] = key_size
        __props__.__dict__["modify_date"] = modify_date
        __props__.__dict__["organization_name"] = organization_name
        __props__.__dict__["private_key"] = private_key
        __props__.__dict__["tags"] = tags
        __props__.__dict__["validity_begin"] = validity_begin
        __props__.__dict__["validity_days"] = validity_days
        __props__.__dict__["validity_end"] = validity_end
        return ComputeSslCertificate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def certificate(self) -> pulumi.Output[_builtins.str]:
        """
        SSL Certifcate
        """
        return pulumi.get(self, "certificate")

    @_builtins.property
    @pulumi.getter(name="commonName")
    def common_name(self) -> pulumi.Output[_builtins.str]:
        """
        Common name
        """
        return pulumi.get(self, "common_name")

    @_builtins.property
    @pulumi.getter(name="computeSslCertificateId")
    def compute_ssl_certificate_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "compute_ssl_certificate_id")

    @_builtins.property
    @pulumi.getter(name="createDate")
    def create_date(self) -> pulumi.Output[_builtins.str]:
        """
        certificate creation date
        """
        return pulumi.get(self, "create_date")

    @_builtins.property
    @pulumi.getter(name="intermediateCertificate")
    def intermediate_certificate(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Intermediate certificate value
        """
        return pulumi.get(self, "intermediate_certificate")

    @_builtins.property
    @pulumi.getter(name="keySize")
    def key_size(self) -> pulumi.Output[_builtins.float]:
        """
        SSL key size
        """
        return pulumi.get(self, "key_size")

    @_builtins.property
    @pulumi.getter(name="modifyDate")
    def modify_date(self) -> pulumi.Output[_builtins.str]:
        """
        certificate modificatiob date
        """
        return pulumi.get(self, "modify_date")

    @_builtins.property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> pulumi.Output[_builtins.str]:
        """
        Organization name
        """
        return pulumi.get(self, "organization_name")

    @_builtins.property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Output[_builtins.str]:
        """
        SSL Private Key
        """
        return pulumi.get(self, "private_key")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Tags set for resource
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="validityBegin")
    def validity_begin(self) -> pulumi.Output[_builtins.str]:
        """
        Validity begins from
        """
        return pulumi.get(self, "validity_begin")

    @_builtins.property
    @pulumi.getter(name="validityDays")
    def validity_days(self) -> pulumi.Output[_builtins.float]:
        """
        Validity days
        """
        return pulumi.get(self, "validity_days")

    @_builtins.property
    @pulumi.getter(name="validityEnd")
    def validity_end(self) -> pulumi.Output[_builtins.str]:
        """
        Validity ends before
        """
        return pulumi.get(self, "validity_end")

