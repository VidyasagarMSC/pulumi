# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCmObjectResult',
    'AwaitableGetCmObjectResult',
    'get_cm_object',
    'get_cm_object_output',
]

@pulumi.output_type
class GetCmObjectResult:
    """
    A collection of values returned by getCmObject.
    """
    def __init__(__self__, catalog_id=None, catalog_name=None, catalog_object_id=None, created=None, crn=None, data=None, id=None, kind=None, label=None, label_i18n=None, name=None, object_id=None, parent_id=None, publishes=None, rev=None, short_description=None, short_description_i18n=None, states=None, tags=None, updated=None, url=None):
        if catalog_id and not isinstance(catalog_id, str):
            raise TypeError("Expected argument 'catalog_id' to be a str")
        pulumi.set(__self__, "catalog_id", catalog_id)
        if catalog_name and not isinstance(catalog_name, str):
            raise TypeError("Expected argument 'catalog_name' to be a str")
        pulumi.set(__self__, "catalog_name", catalog_name)
        if catalog_object_id and not isinstance(catalog_object_id, str):
            raise TypeError("Expected argument 'catalog_object_id' to be a str")
        pulumi.set(__self__, "catalog_object_id", catalog_object_id)
        if created and not isinstance(created, str):
            raise TypeError("Expected argument 'created' to be a str")
        pulumi.set(__self__, "created", created)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if data and not isinstance(data, str):
            raise TypeError("Expected argument 'data' to be a str")
        pulumi.set(__self__, "data", data)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        pulumi.set(__self__, "kind", kind)
        if label and not isinstance(label, str):
            raise TypeError("Expected argument 'label' to be a str")
        pulumi.set(__self__, "label", label)
        if label_i18n and not isinstance(label_i18n, dict):
            raise TypeError("Expected argument 'label_i18n' to be a dict")
        pulumi.set(__self__, "label_i18n", label_i18n)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if object_id and not isinstance(object_id, str):
            raise TypeError("Expected argument 'object_id' to be a str")
        pulumi.set(__self__, "object_id", object_id)
        if parent_id and not isinstance(parent_id, str):
            raise TypeError("Expected argument 'parent_id' to be a str")
        pulumi.set(__self__, "parent_id", parent_id)
        if publishes and not isinstance(publishes, list):
            raise TypeError("Expected argument 'publishes' to be a list")
        pulumi.set(__self__, "publishes", publishes)
        if rev and not isinstance(rev, str):
            raise TypeError("Expected argument 'rev' to be a str")
        pulumi.set(__self__, "rev", rev)
        if short_description and not isinstance(short_description, str):
            raise TypeError("Expected argument 'short_description' to be a str")
        pulumi.set(__self__, "short_description", short_description)
        if short_description_i18n and not isinstance(short_description_i18n, dict):
            raise TypeError("Expected argument 'short_description_i18n' to be a dict")
        pulumi.set(__self__, "short_description_i18n", short_description_i18n)
        if states and not isinstance(states, list):
            raise TypeError("Expected argument 'states' to be a list")
        pulumi.set(__self__, "states", states)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if updated and not isinstance(updated, str):
            raise TypeError("Expected argument 'updated' to be a str")
        pulumi.set(__self__, "updated", updated)
        if url and not isinstance(url, str):
            raise TypeError("Expected argument 'url' to be a str")
        pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> _builtins.str:
        return pulumi.get(self, "catalog_id")

    @_builtins.property
    @pulumi.getter(name="catalogName")
    def catalog_name(self) -> _builtins.str:
        return pulumi.get(self, "catalog_name")

    @_builtins.property
    @pulumi.getter(name="catalogObjectId")
    def catalog_object_id(self) -> _builtins.str:
        return pulumi.get(self, "catalog_object_id")

    @_builtins.property
    @pulumi.getter
    def created(self) -> _builtins.str:
        return pulumi.get(self, "created")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def data(self) -> _builtins.str:
        return pulumi.get(self, "data")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def kind(self) -> _builtins.str:
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter
    def label(self) -> _builtins.str:
        return pulumi.get(self, "label")

    @_builtins.property
    @pulumi.getter(name="labelI18n")
    def label_i18n(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "label_i18n")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="objectId")
    def object_id(self) -> _builtins.str:
        return pulumi.get(self, "object_id")

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> _builtins.str:
        return pulumi.get(self, "parent_id")

    @_builtins.property
    @pulumi.getter
    def publishes(self) -> Sequence['outputs.GetCmObjectPublishResult']:
        return pulumi.get(self, "publishes")

    @_builtins.property
    @pulumi.getter
    def rev(self) -> _builtins.str:
        return pulumi.get(self, "rev")

    @_builtins.property
    @pulumi.getter(name="shortDescription")
    def short_description(self) -> _builtins.str:
        return pulumi.get(self, "short_description")

    @_builtins.property
    @pulumi.getter(name="shortDescriptionI18n")
    def short_description_i18n(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "short_description_i18n")

    @_builtins.property
    @pulumi.getter
    def states(self) -> Sequence['outputs.GetCmObjectStateResult']:
        return pulumi.get(self, "states")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def updated(self) -> _builtins.str:
        return pulumi.get(self, "updated")

    @_builtins.property
    @pulumi.getter
    def url(self) -> _builtins.str:
        return pulumi.get(self, "url")


class AwaitableGetCmObjectResult(GetCmObjectResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCmObjectResult(
            catalog_id=self.catalog_id,
            catalog_name=self.catalog_name,
            catalog_object_id=self.catalog_object_id,
            created=self.created,
            crn=self.crn,
            data=self.data,
            id=self.id,
            kind=self.kind,
            label=self.label,
            label_i18n=self.label_i18n,
            name=self.name,
            object_id=self.object_id,
            parent_id=self.parent_id,
            publishes=self.publishes,
            rev=self.rev,
            short_description=self.short_description,
            short_description_i18n=self.short_description_i18n,
            states=self.states,
            tags=self.tags,
            updated=self.updated,
            url=self.url)


def get_cm_object(catalog_id: Optional[_builtins.str] = None,
                  id: Optional[_builtins.str] = None,
                  object_id: Optional[_builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCmObjectResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['catalogId'] = catalog_id
    __args__['id'] = id
    __args__['objectId'] = object_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCmObject:getCmObject', __args__, opts=opts, typ=GetCmObjectResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCmObjectResult(
        catalog_id=pulumi.get(__ret__, 'catalog_id'),
        catalog_name=pulumi.get(__ret__, 'catalog_name'),
        catalog_object_id=pulumi.get(__ret__, 'catalog_object_id'),
        created=pulumi.get(__ret__, 'created'),
        crn=pulumi.get(__ret__, 'crn'),
        data=pulumi.get(__ret__, 'data'),
        id=pulumi.get(__ret__, 'id'),
        kind=pulumi.get(__ret__, 'kind'),
        label=pulumi.get(__ret__, 'label'),
        label_i18n=pulumi.get(__ret__, 'label_i18n'),
        name=pulumi.get(__ret__, 'name'),
        object_id=pulumi.get(__ret__, 'object_id'),
        parent_id=pulumi.get(__ret__, 'parent_id'),
        publishes=pulumi.get(__ret__, 'publishes'),
        rev=pulumi.get(__ret__, 'rev'),
        short_description=pulumi.get(__ret__, 'short_description'),
        short_description_i18n=pulumi.get(__ret__, 'short_description_i18n'),
        states=pulumi.get(__ret__, 'states'),
        tags=pulumi.get(__ret__, 'tags'),
        updated=pulumi.get(__ret__, 'updated'),
        url=pulumi.get(__ret__, 'url'))
def get_cm_object_output(catalog_id: Optional[pulumi.Input[_builtins.str]] = None,
                         id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         object_id: Optional[pulumi.Input[_builtins.str]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCmObjectResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['catalogId'] = catalog_id
    __args__['id'] = id
    __args__['objectId'] = object_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCmObject:getCmObject', __args__, opts=opts, typ=GetCmObjectResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCmObjectResult(
        catalog_id=pulumi.get(__response__, 'catalog_id'),
        catalog_name=pulumi.get(__response__, 'catalog_name'),
        catalog_object_id=pulumi.get(__response__, 'catalog_object_id'),
        created=pulumi.get(__response__, 'created'),
        crn=pulumi.get(__response__, 'crn'),
        data=pulumi.get(__response__, 'data'),
        id=pulumi.get(__response__, 'id'),
        kind=pulumi.get(__response__, 'kind'),
        label=pulumi.get(__response__, 'label'),
        label_i18n=pulumi.get(__response__, 'label_i18n'),
        name=pulumi.get(__response__, 'name'),
        object_id=pulumi.get(__response__, 'object_id'),
        parent_id=pulumi.get(__response__, 'parent_id'),
        publishes=pulumi.get(__response__, 'publishes'),
        rev=pulumi.get(__response__, 'rev'),
        short_description=pulumi.get(__response__, 'short_description'),
        short_description_i18n=pulumi.get(__response__, 'short_description_i18n'),
        states=pulumi.get(__response__, 'states'),
        tags=pulumi.get(__response__, 'tags'),
        updated=pulumi.get(__response__, 'updated'),
        url=pulumi.get(__response__, 'url')))
