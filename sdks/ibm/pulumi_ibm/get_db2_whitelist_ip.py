# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetDb2WhitelistIpResult',
    'AwaitableGetDb2WhitelistIpResult',
    'get_db2_whitelist_ip',
    'get_db2_whitelist_ip_output',
]

@pulumi.output_type
class GetDb2WhitelistIpResult:
    """
    A collection of values returned by getDb2WhitelistIp.
    """
    def __init__(__self__, id=None, ip_addresses=None, x_deployment_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_addresses and not isinstance(ip_addresses, list):
            raise TypeError("Expected argument 'ip_addresses' to be a list")
        pulumi.set(__self__, "ip_addresses", ip_addresses)
        if x_deployment_id and not isinstance(x_deployment_id, str):
            raise TypeError("Expected argument 'x_deployment_id' to be a str")
        pulumi.set(__self__, "x_deployment_id", x_deployment_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Sequence['outputs.GetDb2WhitelistIpIpAddressResult']:
        return pulumi.get(self, "ip_addresses")

    @_builtins.property
    @pulumi.getter(name="xDeploymentId")
    def x_deployment_id(self) -> _builtins.str:
        return pulumi.get(self, "x_deployment_id")


class AwaitableGetDb2WhitelistIpResult(GetDb2WhitelistIpResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDb2WhitelistIpResult(
            id=self.id,
            ip_addresses=self.ip_addresses,
            x_deployment_id=self.x_deployment_id)


def get_db2_whitelist_ip(id: Optional[_builtins.str] = None,
                         x_deployment_id: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDb2WhitelistIpResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['xDeploymentId'] = x_deployment_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getDb2WhitelistIp:getDb2WhitelistIp', __args__, opts=opts, typ=GetDb2WhitelistIpResult, package_ref=_utilities.get_package()).value

    return AwaitableGetDb2WhitelistIpResult(
        id=pulumi.get(__ret__, 'id'),
        ip_addresses=pulumi.get(__ret__, 'ip_addresses'),
        x_deployment_id=pulumi.get(__ret__, 'x_deployment_id'))
def get_db2_whitelist_ip_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                x_deployment_id: Optional[pulumi.Input[_builtins.str]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDb2WhitelistIpResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['xDeploymentId'] = x_deployment_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getDb2WhitelistIp:getDb2WhitelistIp', __args__, opts=opts, typ=GetDb2WhitelistIpResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetDb2WhitelistIpResult(
        id=pulumi.get(__response__, 'id'),
        ip_addresses=pulumi.get(__response__, 'ip_addresses'),
        x_deployment_id=pulumi.get(__response__, 'x_deployment_id')))
