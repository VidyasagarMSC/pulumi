# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NetworkInterfaceSgAttachmentArgs', 'NetworkInterfaceSgAttachment']

@pulumi.input_type
class NetworkInterfaceSgAttachmentArgs:
    def __init__(__self__, *,
                 network_interface_id: pulumi.Input[_builtins.float],
                 security_group_id: pulumi.Input[_builtins.float],
                 network_interface_sg_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 soft_reboot: Optional[pulumi.Input[_builtins.bool]] = None,
                 timeouts: Optional[pulumi.Input['NetworkInterfaceSgAttachmentTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a NetworkInterfaceSgAttachment resource.
        :param pulumi.Input[_builtins.float] network_interface_id: Network interface ID
        :param pulumi.Input[_builtins.float] security_group_id: Security group ID
        :param pulumi.Input[_builtins.bool] soft_reboot: Boolean value set to true, if soft reboot needs to be done.
        """
        pulumi.set(__self__, "network_interface_id", network_interface_id)
        pulumi.set(__self__, "security_group_id", security_group_id)
        if network_interface_sg_attachment_id is not None:
            pulumi.set(__self__, "network_interface_sg_attachment_id", network_interface_sg_attachment_id)
        if soft_reboot is not None:
            pulumi.set(__self__, "soft_reboot", soft_reboot)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="networkInterfaceId")
    def network_interface_id(self) -> pulumi.Input[_builtins.float]:
        """
        Network interface ID
        """
        return pulumi.get(self, "network_interface_id")

    @network_interface_id.setter
    def network_interface_id(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "network_interface_id", value)

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> pulumi.Input[_builtins.float]:
        """
        Security group ID
        """
        return pulumi.get(self, "security_group_id")

    @security_group_id.setter
    def security_group_id(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "security_group_id", value)

    @_builtins.property
    @pulumi.getter(name="networkInterfaceSgAttachmentId")
    def network_interface_sg_attachment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "network_interface_sg_attachment_id")

    @network_interface_sg_attachment_id.setter
    def network_interface_sg_attachment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_interface_sg_attachment_id", value)

    @_builtins.property
    @pulumi.getter(name="softReboot")
    def soft_reboot(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Boolean value set to true, if soft reboot needs to be done.
        """
        return pulumi.get(self, "soft_reboot")

    @soft_reboot.setter
    def soft_reboot(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "soft_reboot", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['NetworkInterfaceSgAttachmentTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['NetworkInterfaceSgAttachmentTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _NetworkInterfaceSgAttachmentState:
    def __init__(__self__, *,
                 network_interface_id: Optional[pulumi.Input[_builtins.float]] = None,
                 network_interface_sg_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_id: Optional[pulumi.Input[_builtins.float]] = None,
                 soft_reboot: Optional[pulumi.Input[_builtins.bool]] = None,
                 timeouts: Optional[pulumi.Input['NetworkInterfaceSgAttachmentTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering NetworkInterfaceSgAttachment resources.
        :param pulumi.Input[_builtins.float] network_interface_id: Network interface ID
        :param pulumi.Input[_builtins.float] security_group_id: Security group ID
        :param pulumi.Input[_builtins.bool] soft_reboot: Boolean value set to true, if soft reboot needs to be done.
        """
        if network_interface_id is not None:
            pulumi.set(__self__, "network_interface_id", network_interface_id)
        if network_interface_sg_attachment_id is not None:
            pulumi.set(__self__, "network_interface_sg_attachment_id", network_interface_sg_attachment_id)
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)
        if soft_reboot is not None:
            pulumi.set(__self__, "soft_reboot", soft_reboot)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="networkInterfaceId")
    def network_interface_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Network interface ID
        """
        return pulumi.get(self, "network_interface_id")

    @network_interface_id.setter
    def network_interface_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "network_interface_id", value)

    @_builtins.property
    @pulumi.getter(name="networkInterfaceSgAttachmentId")
    def network_interface_sg_attachment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "network_interface_sg_attachment_id")

    @network_interface_sg_attachment_id.setter
    def network_interface_sg_attachment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_interface_sg_attachment_id", value)

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Security group ID
        """
        return pulumi.get(self, "security_group_id")

    @security_group_id.setter
    def security_group_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "security_group_id", value)

    @_builtins.property
    @pulumi.getter(name="softReboot")
    def soft_reboot(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Boolean value set to true, if soft reboot needs to be done.
        """
        return pulumi.get(self, "soft_reboot")

    @soft_reboot.setter
    def soft_reboot(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "soft_reboot", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['NetworkInterfaceSgAttachmentTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['NetworkInterfaceSgAttachmentTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/networkInterfaceSgAttachment:NetworkInterfaceSgAttachment")
class NetworkInterfaceSgAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 network_interface_id: Optional[pulumi.Input[_builtins.float]] = None,
                 network_interface_sg_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_id: Optional[pulumi.Input[_builtins.float]] = None,
                 soft_reboot: Optional[pulumi.Input[_builtins.bool]] = None,
                 timeouts: Optional[pulumi.Input[Union['NetworkInterfaceSgAttachmentTimeoutsArgs', 'NetworkInterfaceSgAttachmentTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a NetworkInterfaceSgAttachment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] network_interface_id: Network interface ID
        :param pulumi.Input[_builtins.float] security_group_id: Security group ID
        :param pulumi.Input[_builtins.bool] soft_reboot: Boolean value set to true, if soft reboot needs to be done.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NetworkInterfaceSgAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NetworkInterfaceSgAttachment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NetworkInterfaceSgAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NetworkInterfaceSgAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 network_interface_id: Optional[pulumi.Input[_builtins.float]] = None,
                 network_interface_sg_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_id: Optional[pulumi.Input[_builtins.float]] = None,
                 soft_reboot: Optional[pulumi.Input[_builtins.bool]] = None,
                 timeouts: Optional[pulumi.Input[Union['NetworkInterfaceSgAttachmentTimeoutsArgs', 'NetworkInterfaceSgAttachmentTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NetworkInterfaceSgAttachmentArgs.__new__(NetworkInterfaceSgAttachmentArgs)

            if network_interface_id is None and not opts.urn:
                raise TypeError("Missing required property 'network_interface_id'")
            __props__.__dict__["network_interface_id"] = network_interface_id
            __props__.__dict__["network_interface_sg_attachment_id"] = network_interface_sg_attachment_id
            if security_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'security_group_id'")
            __props__.__dict__["security_group_id"] = security_group_id
            __props__.__dict__["soft_reboot"] = soft_reboot
            __props__.__dict__["timeouts"] = timeouts
        super(NetworkInterfaceSgAttachment, __self__).__init__(
            'ibm:index/networkInterfaceSgAttachment:NetworkInterfaceSgAttachment',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            network_interface_id: Optional[pulumi.Input[_builtins.float]] = None,
            network_interface_sg_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
            security_group_id: Optional[pulumi.Input[_builtins.float]] = None,
            soft_reboot: Optional[pulumi.Input[_builtins.bool]] = None,
            timeouts: Optional[pulumi.Input[Union['NetworkInterfaceSgAttachmentTimeoutsArgs', 'NetworkInterfaceSgAttachmentTimeoutsArgsDict']]] = None) -> 'NetworkInterfaceSgAttachment':
        """
        Get an existing NetworkInterfaceSgAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] network_interface_id: Network interface ID
        :param pulumi.Input[_builtins.float] security_group_id: Security group ID
        :param pulumi.Input[_builtins.bool] soft_reboot: Boolean value set to true, if soft reboot needs to be done.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NetworkInterfaceSgAttachmentState.__new__(_NetworkInterfaceSgAttachmentState)

        __props__.__dict__["network_interface_id"] = network_interface_id
        __props__.__dict__["network_interface_sg_attachment_id"] = network_interface_sg_attachment_id
        __props__.__dict__["security_group_id"] = security_group_id
        __props__.__dict__["soft_reboot"] = soft_reboot
        __props__.__dict__["timeouts"] = timeouts
        return NetworkInterfaceSgAttachment(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="networkInterfaceId")
    def network_interface_id(self) -> pulumi.Output[_builtins.float]:
        """
        Network interface ID
        """
        return pulumi.get(self, "network_interface_id")

    @_builtins.property
    @pulumi.getter(name="networkInterfaceSgAttachmentId")
    def network_interface_sg_attachment_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "network_interface_sg_attachment_id")

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> pulumi.Output[_builtins.float]:
        """
        Security group ID
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter(name="softReboot")
    def soft_reboot(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Boolean value set to true, if soft reboot needs to be done.
        """
        return pulumi.get(self, "soft_reboot")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.NetworkInterfaceSgAttachmentTimeouts']]:
        return pulumi.get(self, "timeouts")

