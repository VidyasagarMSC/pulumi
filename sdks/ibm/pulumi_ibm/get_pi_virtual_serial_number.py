# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetPiVirtualSerialNumberResult',
    'AwaitableGetPiVirtualSerialNumberResult',
    'get_pi_virtual_serial_number',
    'get_pi_virtual_serial_number_output',
]

@pulumi.output_type
class GetPiVirtualSerialNumberResult:
    """
    A collection of values returned by getPiVirtualSerialNumber.
    """
    def __init__(__self__, description=None, id=None, instance_id=None, pi_cloud_instance_id=None, pi_serial=None, software_tier=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if pi_cloud_instance_id and not isinstance(pi_cloud_instance_id, str):
            raise TypeError("Expected argument 'pi_cloud_instance_id' to be a str")
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_serial and not isinstance(pi_serial, str):
            raise TypeError("Expected argument 'pi_serial' to be a str")
        pulumi.set(__self__, "pi_serial", pi_serial)
        if software_tier and not isinstance(software_tier, str):
            raise TypeError("Expected argument 'software_tier' to be a str")
        pulumi.set(__self__, "software_tier", software_tier)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piSerial")
    def pi_serial(self) -> _builtins.str:
        return pulumi.get(self, "pi_serial")

    @_builtins.property
    @pulumi.getter(name="softwareTier")
    def software_tier(self) -> _builtins.str:
        return pulumi.get(self, "software_tier")


class AwaitableGetPiVirtualSerialNumberResult(GetPiVirtualSerialNumberResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPiVirtualSerialNumberResult(
            description=self.description,
            id=self.id,
            instance_id=self.instance_id,
            pi_cloud_instance_id=self.pi_cloud_instance_id,
            pi_serial=self.pi_serial,
            software_tier=self.software_tier)


def get_pi_virtual_serial_number(id: Optional[_builtins.str] = None,
                                 pi_cloud_instance_id: Optional[_builtins.str] = None,
                                 pi_serial: Optional[_builtins.str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPiVirtualSerialNumberResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piSerial'] = pi_serial
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getPiVirtualSerialNumber:getPiVirtualSerialNumber', __args__, opts=opts, typ=GetPiVirtualSerialNumberResult, package_ref=_utilities.get_package()).value

    return AwaitableGetPiVirtualSerialNumberResult(
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        pi_cloud_instance_id=pulumi.get(__ret__, 'pi_cloud_instance_id'),
        pi_serial=pulumi.get(__ret__, 'pi_serial'),
        software_tier=pulumi.get(__ret__, 'software_tier'))
def get_pi_virtual_serial_number_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                        pi_serial: Optional[pulumi.Input[_builtins.str]] = None,
                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPiVirtualSerialNumberResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piSerial'] = pi_serial
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getPiVirtualSerialNumber:getPiVirtualSerialNumber', __args__, opts=opts, typ=GetPiVirtualSerialNumberResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetPiVirtualSerialNumberResult(
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        pi_cloud_instance_id=pulumi.get(__response__, 'pi_cloud_instance_id'),
        pi_serial=pulumi.get(__response__, 'pi_serial'),
        software_tier=pulumi.get(__response__, 'software_tier')))
