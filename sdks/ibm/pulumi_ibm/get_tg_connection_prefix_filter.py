# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetTgConnectionPrefixFilterResult',
    'AwaitableGetTgConnectionPrefixFilterResult',
    'get_tg_connection_prefix_filter',
    'get_tg_connection_prefix_filter_output',
]

@pulumi.output_type
class GetTgConnectionPrefixFilterResult:
    """
    A collection of values returned by getTgConnectionPrefixFilter.
    """
    def __init__(__self__, action=None, before=None, connection_id=None, created_at=None, filter_id=None, gateway=None, ge=None, id=None, le=None, prefix=None, updated_at=None):
        if action and not isinstance(action, str):
            raise TypeError("Expected argument 'action' to be a str")
        pulumi.set(__self__, "action", action)
        if before and not isinstance(before, str):
            raise TypeError("Expected argument 'before' to be a str")
        pulumi.set(__self__, "before", before)
        if connection_id and not isinstance(connection_id, str):
            raise TypeError("Expected argument 'connection_id' to be a str")
        pulumi.set(__self__, "connection_id", connection_id)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if filter_id and not isinstance(filter_id, str):
            raise TypeError("Expected argument 'filter_id' to be a str")
        pulumi.set(__self__, "filter_id", filter_id)
        if gateway and not isinstance(gateway, str):
            raise TypeError("Expected argument 'gateway' to be a str")
        pulumi.set(__self__, "gateway", gateway)
        if ge and not isinstance(ge, float):
            raise TypeError("Expected argument 'ge' to be a float")
        pulumi.set(__self__, "ge", ge)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if le and not isinstance(le, float):
            raise TypeError("Expected argument 'le' to be a float")
        pulumi.set(__self__, "le", le)
        if prefix and not isinstance(prefix, str):
            raise TypeError("Expected argument 'prefix' to be a str")
        pulumi.set(__self__, "prefix", prefix)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def action(self) -> _builtins.str:
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter
    def before(self) -> _builtins.str:
        return pulumi.get(self, "before")

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> _builtins.str:
        return pulumi.get(self, "connection_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> _builtins.str:
        return pulumi.get(self, "filter_id")

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> _builtins.str:
        return pulumi.get(self, "gateway")

    @_builtins.property
    @pulumi.getter
    def ge(self) -> _builtins.float:
        return pulumi.get(self, "ge")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def le(self) -> _builtins.float:
        return pulumi.get(self, "le")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> _builtins.str:
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")


class AwaitableGetTgConnectionPrefixFilterResult(GetTgConnectionPrefixFilterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTgConnectionPrefixFilterResult(
            action=self.action,
            before=self.before,
            connection_id=self.connection_id,
            created_at=self.created_at,
            filter_id=self.filter_id,
            gateway=self.gateway,
            ge=self.ge,
            id=self.id,
            le=self.le,
            prefix=self.prefix,
            updated_at=self.updated_at)


def get_tg_connection_prefix_filter(connection_id: Optional[_builtins.str] = None,
                                    filter_id: Optional[_builtins.str] = None,
                                    gateway: Optional[_builtins.str] = None,
                                    id: Optional[_builtins.str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTgConnectionPrefixFilterResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['connectionId'] = connection_id
    __args__['filterId'] = filter_id
    __args__['gateway'] = gateway
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getTgConnectionPrefixFilter:getTgConnectionPrefixFilter', __args__, opts=opts, typ=GetTgConnectionPrefixFilterResult, package_ref=_utilities.get_package()).value

    return AwaitableGetTgConnectionPrefixFilterResult(
        action=pulumi.get(__ret__, 'action'),
        before=pulumi.get(__ret__, 'before'),
        connection_id=pulumi.get(__ret__, 'connection_id'),
        created_at=pulumi.get(__ret__, 'created_at'),
        filter_id=pulumi.get(__ret__, 'filter_id'),
        gateway=pulumi.get(__ret__, 'gateway'),
        ge=pulumi.get(__ret__, 'ge'),
        id=pulumi.get(__ret__, 'id'),
        le=pulumi.get(__ret__, 'le'),
        prefix=pulumi.get(__ret__, 'prefix'),
        updated_at=pulumi.get(__ret__, 'updated_at'))
def get_tg_connection_prefix_filter_output(connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                                           filter_id: Optional[pulumi.Input[_builtins.str]] = None,
                                           gateway: Optional[pulumi.Input[_builtins.str]] = None,
                                           id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTgConnectionPrefixFilterResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['connectionId'] = connection_id
    __args__['filterId'] = filter_id
    __args__['gateway'] = gateway
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getTgConnectionPrefixFilter:getTgConnectionPrefixFilter', __args__, opts=opts, typ=GetTgConnectionPrefixFilterResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetTgConnectionPrefixFilterResult(
        action=pulumi.get(__response__, 'action'),
        before=pulumi.get(__response__, 'before'),
        connection_id=pulumi.get(__response__, 'connection_id'),
        created_at=pulumi.get(__response__, 'created_at'),
        filter_id=pulumi.get(__response__, 'filter_id'),
        gateway=pulumi.get(__response__, 'gateway'),
        ge=pulumi.get(__response__, 'ge'),
        id=pulumi.get(__response__, 'id'),
        le=pulumi.get(__response__, 'le'),
        prefix=pulumi.get(__response__, 'prefix'),
        updated_at=pulumi.get(__response__, 'updated_at')))
