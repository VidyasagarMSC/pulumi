# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetBackupRecoveryResult',
    'AwaitableGetBackupRecoveryResult',
    'get_backup_recovery',
    'get_backup_recovery_output',
]

@pulumi.output_type
class GetBackupRecoveryResult:
    """
    A collection of values returned by getBackupRecovery.
    """
    def __init__(__self__, can_tear_down=None, creation_infos=None, end_time_usecs=None, id=None, is_multi_stage_restore=None, is_parent_recovery=None, messages=None, mssql_params=None, name=None, parent_recovery_id=None, permissions=None, physical_params=None, progress_task_id=None, recovery_action=None, recovery_id=None, retrieve_archive_tasks=None, snapshot_environment=None, start_time_usecs=None, status=None, tear_down_message=None, tear_down_status=None, x_ibm_tenant_id=None):
        if can_tear_down and not isinstance(can_tear_down, bool):
            raise TypeError("Expected argument 'can_tear_down' to be a bool")
        pulumi.set(__self__, "can_tear_down", can_tear_down)
        if creation_infos and not isinstance(creation_infos, list):
            raise TypeError("Expected argument 'creation_infos' to be a list")
        pulumi.set(__self__, "creation_infos", creation_infos)
        if end_time_usecs and not isinstance(end_time_usecs, float):
            raise TypeError("Expected argument 'end_time_usecs' to be a float")
        pulumi.set(__self__, "end_time_usecs", end_time_usecs)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_multi_stage_restore and not isinstance(is_multi_stage_restore, bool):
            raise TypeError("Expected argument 'is_multi_stage_restore' to be a bool")
        pulumi.set(__self__, "is_multi_stage_restore", is_multi_stage_restore)
        if is_parent_recovery and not isinstance(is_parent_recovery, bool):
            raise TypeError("Expected argument 'is_parent_recovery' to be a bool")
        pulumi.set(__self__, "is_parent_recovery", is_parent_recovery)
        if messages and not isinstance(messages, list):
            raise TypeError("Expected argument 'messages' to be a list")
        pulumi.set(__self__, "messages", messages)
        if mssql_params and not isinstance(mssql_params, list):
            raise TypeError("Expected argument 'mssql_params' to be a list")
        pulumi.set(__self__, "mssql_params", mssql_params)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if parent_recovery_id and not isinstance(parent_recovery_id, str):
            raise TypeError("Expected argument 'parent_recovery_id' to be a str")
        pulumi.set(__self__, "parent_recovery_id", parent_recovery_id)
        if permissions and not isinstance(permissions, list):
            raise TypeError("Expected argument 'permissions' to be a list")
        pulumi.set(__self__, "permissions", permissions)
        if physical_params and not isinstance(physical_params, list):
            raise TypeError("Expected argument 'physical_params' to be a list")
        pulumi.set(__self__, "physical_params", physical_params)
        if progress_task_id and not isinstance(progress_task_id, str):
            raise TypeError("Expected argument 'progress_task_id' to be a str")
        pulumi.set(__self__, "progress_task_id", progress_task_id)
        if recovery_action and not isinstance(recovery_action, str):
            raise TypeError("Expected argument 'recovery_action' to be a str")
        pulumi.set(__self__, "recovery_action", recovery_action)
        if recovery_id and not isinstance(recovery_id, str):
            raise TypeError("Expected argument 'recovery_id' to be a str")
        pulumi.set(__self__, "recovery_id", recovery_id)
        if retrieve_archive_tasks and not isinstance(retrieve_archive_tasks, list):
            raise TypeError("Expected argument 'retrieve_archive_tasks' to be a list")
        pulumi.set(__self__, "retrieve_archive_tasks", retrieve_archive_tasks)
        if snapshot_environment and not isinstance(snapshot_environment, str):
            raise TypeError("Expected argument 'snapshot_environment' to be a str")
        pulumi.set(__self__, "snapshot_environment", snapshot_environment)
        if start_time_usecs and not isinstance(start_time_usecs, float):
            raise TypeError("Expected argument 'start_time_usecs' to be a float")
        pulumi.set(__self__, "start_time_usecs", start_time_usecs)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tear_down_message and not isinstance(tear_down_message, str):
            raise TypeError("Expected argument 'tear_down_message' to be a str")
        pulumi.set(__self__, "tear_down_message", tear_down_message)
        if tear_down_status and not isinstance(tear_down_status, str):
            raise TypeError("Expected argument 'tear_down_status' to be a str")
        pulumi.set(__self__, "tear_down_status", tear_down_status)
        if x_ibm_tenant_id and not isinstance(x_ibm_tenant_id, str):
            raise TypeError("Expected argument 'x_ibm_tenant_id' to be a str")
        pulumi.set(__self__, "x_ibm_tenant_id", x_ibm_tenant_id)

    @_builtins.property
    @pulumi.getter(name="canTearDown")
    def can_tear_down(self) -> _builtins.bool:
        return pulumi.get(self, "can_tear_down")

    @_builtins.property
    @pulumi.getter(name="creationInfos")
    def creation_infos(self) -> Sequence['outputs.GetBackupRecoveryCreationInfoResult']:
        return pulumi.get(self, "creation_infos")

    @_builtins.property
    @pulumi.getter(name="endTimeUsecs")
    def end_time_usecs(self) -> _builtins.float:
        return pulumi.get(self, "end_time_usecs")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isMultiStageRestore")
    def is_multi_stage_restore(self) -> _builtins.bool:
        return pulumi.get(self, "is_multi_stage_restore")

    @_builtins.property
    @pulumi.getter(name="isParentRecovery")
    def is_parent_recovery(self) -> _builtins.bool:
        return pulumi.get(self, "is_parent_recovery")

    @_builtins.property
    @pulumi.getter
    def messages(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "messages")

    @_builtins.property
    @pulumi.getter(name="mssqlParams")
    def mssql_params(self) -> Sequence['outputs.GetBackupRecoveryMssqlParamResult']:
        return pulumi.get(self, "mssql_params")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="parentRecoveryId")
    def parent_recovery_id(self) -> _builtins.str:
        return pulumi.get(self, "parent_recovery_id")

    @_builtins.property
    @pulumi.getter
    def permissions(self) -> Sequence['outputs.GetBackupRecoveryPermissionResult']:
        return pulumi.get(self, "permissions")

    @_builtins.property
    @pulumi.getter(name="physicalParams")
    def physical_params(self) -> Sequence['outputs.GetBackupRecoveryPhysicalParamResult']:
        return pulumi.get(self, "physical_params")

    @_builtins.property
    @pulumi.getter(name="progressTaskId")
    def progress_task_id(self) -> _builtins.str:
        return pulumi.get(self, "progress_task_id")

    @_builtins.property
    @pulumi.getter(name="recoveryAction")
    def recovery_action(self) -> _builtins.str:
        return pulumi.get(self, "recovery_action")

    @_builtins.property
    @pulumi.getter(name="recoveryId")
    def recovery_id(self) -> _builtins.str:
        return pulumi.get(self, "recovery_id")

    @_builtins.property
    @pulumi.getter(name="retrieveArchiveTasks")
    def retrieve_archive_tasks(self) -> Sequence['outputs.GetBackupRecoveryRetrieveArchiveTaskResult']:
        return pulumi.get(self, "retrieve_archive_tasks")

    @_builtins.property
    @pulumi.getter(name="snapshotEnvironment")
    def snapshot_environment(self) -> _builtins.str:
        return pulumi.get(self, "snapshot_environment")

    @_builtins.property
    @pulumi.getter(name="startTimeUsecs")
    def start_time_usecs(self) -> _builtins.float:
        return pulumi.get(self, "start_time_usecs")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="tearDownMessage")
    def tear_down_message(self) -> _builtins.str:
        return pulumi.get(self, "tear_down_message")

    @_builtins.property
    @pulumi.getter(name="tearDownStatus")
    def tear_down_status(self) -> _builtins.str:
        return pulumi.get(self, "tear_down_status")

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> _builtins.str:
        return pulumi.get(self, "x_ibm_tenant_id")


class AwaitableGetBackupRecoveryResult(GetBackupRecoveryResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupRecoveryResult(
            can_tear_down=self.can_tear_down,
            creation_infos=self.creation_infos,
            end_time_usecs=self.end_time_usecs,
            id=self.id,
            is_multi_stage_restore=self.is_multi_stage_restore,
            is_parent_recovery=self.is_parent_recovery,
            messages=self.messages,
            mssql_params=self.mssql_params,
            name=self.name,
            parent_recovery_id=self.parent_recovery_id,
            permissions=self.permissions,
            physical_params=self.physical_params,
            progress_task_id=self.progress_task_id,
            recovery_action=self.recovery_action,
            recovery_id=self.recovery_id,
            retrieve_archive_tasks=self.retrieve_archive_tasks,
            snapshot_environment=self.snapshot_environment,
            start_time_usecs=self.start_time_usecs,
            status=self.status,
            tear_down_message=self.tear_down_message,
            tear_down_status=self.tear_down_status,
            x_ibm_tenant_id=self.x_ibm_tenant_id)


def get_backup_recovery(id: Optional[_builtins.str] = None,
                        recovery_id: Optional[_builtins.str] = None,
                        x_ibm_tenant_id: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupRecoveryResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['recoveryId'] = recovery_id
    __args__['xIbmTenantId'] = x_ibm_tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getBackupRecovery:getBackupRecovery', __args__, opts=opts, typ=GetBackupRecoveryResult, package_ref=_utilities.get_package()).value

    return AwaitableGetBackupRecoveryResult(
        can_tear_down=pulumi.get(__ret__, 'can_tear_down'),
        creation_infos=pulumi.get(__ret__, 'creation_infos'),
        end_time_usecs=pulumi.get(__ret__, 'end_time_usecs'),
        id=pulumi.get(__ret__, 'id'),
        is_multi_stage_restore=pulumi.get(__ret__, 'is_multi_stage_restore'),
        is_parent_recovery=pulumi.get(__ret__, 'is_parent_recovery'),
        messages=pulumi.get(__ret__, 'messages'),
        mssql_params=pulumi.get(__ret__, 'mssql_params'),
        name=pulumi.get(__ret__, 'name'),
        parent_recovery_id=pulumi.get(__ret__, 'parent_recovery_id'),
        permissions=pulumi.get(__ret__, 'permissions'),
        physical_params=pulumi.get(__ret__, 'physical_params'),
        progress_task_id=pulumi.get(__ret__, 'progress_task_id'),
        recovery_action=pulumi.get(__ret__, 'recovery_action'),
        recovery_id=pulumi.get(__ret__, 'recovery_id'),
        retrieve_archive_tasks=pulumi.get(__ret__, 'retrieve_archive_tasks'),
        snapshot_environment=pulumi.get(__ret__, 'snapshot_environment'),
        start_time_usecs=pulumi.get(__ret__, 'start_time_usecs'),
        status=pulumi.get(__ret__, 'status'),
        tear_down_message=pulumi.get(__ret__, 'tear_down_message'),
        tear_down_status=pulumi.get(__ret__, 'tear_down_status'),
        x_ibm_tenant_id=pulumi.get(__ret__, 'x_ibm_tenant_id'))
def get_backup_recovery_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               recovery_id: Optional[pulumi.Input[_builtins.str]] = None,
                               x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBackupRecoveryResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['recoveryId'] = recovery_id
    __args__['xIbmTenantId'] = x_ibm_tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getBackupRecovery:getBackupRecovery', __args__, opts=opts, typ=GetBackupRecoveryResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetBackupRecoveryResult(
        can_tear_down=pulumi.get(__response__, 'can_tear_down'),
        creation_infos=pulumi.get(__response__, 'creation_infos'),
        end_time_usecs=pulumi.get(__response__, 'end_time_usecs'),
        id=pulumi.get(__response__, 'id'),
        is_multi_stage_restore=pulumi.get(__response__, 'is_multi_stage_restore'),
        is_parent_recovery=pulumi.get(__response__, 'is_parent_recovery'),
        messages=pulumi.get(__response__, 'messages'),
        mssql_params=pulumi.get(__response__, 'mssql_params'),
        name=pulumi.get(__response__, 'name'),
        parent_recovery_id=pulumi.get(__response__, 'parent_recovery_id'),
        permissions=pulumi.get(__response__, 'permissions'),
        physical_params=pulumi.get(__response__, 'physical_params'),
        progress_task_id=pulumi.get(__response__, 'progress_task_id'),
        recovery_action=pulumi.get(__response__, 'recovery_action'),
        recovery_id=pulumi.get(__response__, 'recovery_id'),
        retrieve_archive_tasks=pulumi.get(__response__, 'retrieve_archive_tasks'),
        snapshot_environment=pulumi.get(__response__, 'snapshot_environment'),
        start_time_usecs=pulumi.get(__response__, 'start_time_usecs'),
        status=pulumi.get(__response__, 'status'),
        tear_down_message=pulumi.get(__response__, 'tear_down_message'),
        tear_down_status=pulumi.get(__response__, 'tear_down_status'),
        x_ibm_tenant_id=pulumi.get(__response__, 'x_ibm_tenant_id')))
