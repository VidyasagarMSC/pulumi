# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsVpnServerRouteResult',
    'AwaitableGetIsVpnServerRouteResult',
    'get_is_vpn_server_route',
    'get_is_vpn_server_route_output',
]

@pulumi.output_type
class GetIsVpnServerRouteResult:
    """
    A collection of values returned by getIsVpnServerRoute.
    """
    def __init__(__self__, action=None, created_at=None, destination=None, health_reasons=None, health_state=None, href=None, id=None, identifier=None, lifecycle_reasons=None, lifecycle_state=None, name=None, resource_type=None, vpn_server=None):
        if action and not isinstance(action, str):
            raise TypeError("Expected argument 'action' to be a str")
        pulumi.set(__self__, "action", action)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if destination and not isinstance(destination, str):
            raise TypeError("Expected argument 'destination' to be a str")
        pulumi.set(__self__, "destination", destination)
        if health_reasons and not isinstance(health_reasons, list):
            raise TypeError("Expected argument 'health_reasons' to be a list")
        pulumi.set(__self__, "health_reasons", health_reasons)
        if health_state and not isinstance(health_state, str):
            raise TypeError("Expected argument 'health_state' to be a str")
        pulumi.set(__self__, "health_state", health_state)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identifier and not isinstance(identifier, str):
            raise TypeError("Expected argument 'identifier' to be a str")
        pulumi.set(__self__, "identifier", identifier)
        if lifecycle_reasons and not isinstance(lifecycle_reasons, list):
            raise TypeError("Expected argument 'lifecycle_reasons' to be a list")
        pulumi.set(__self__, "lifecycle_reasons", lifecycle_reasons)
        if lifecycle_state and not isinstance(lifecycle_state, str):
            raise TypeError("Expected argument 'lifecycle_state' to be a str")
        pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if vpn_server and not isinstance(vpn_server, str):
            raise TypeError("Expected argument 'vpn_server' to be a str")
        pulumi.set(__self__, "vpn_server", vpn_server)

    @_builtins.property
    @pulumi.getter
    def action(self) -> _builtins.str:
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def destination(self) -> _builtins.str:
        return pulumi.get(self, "destination")

    @_builtins.property
    @pulumi.getter(name="healthReasons")
    def health_reasons(self) -> Sequence['outputs.GetIsVpnServerRouteHealthReasonResult']:
        return pulumi.get(self, "health_reasons")

    @_builtins.property
    @pulumi.getter(name="healthState")
    def health_state(self) -> _builtins.str:
        return pulumi.get(self, "health_state")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def identifier(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "identifier")

    @_builtins.property
    @pulumi.getter(name="lifecycleReasons")
    def lifecycle_reasons(self) -> Sequence['outputs.GetIsVpnServerRouteLifecycleReasonResult']:
        return pulumi.get(self, "lifecycle_reasons")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> _builtins.str:
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="vpnServer")
    def vpn_server(self) -> _builtins.str:
        return pulumi.get(self, "vpn_server")


class AwaitableGetIsVpnServerRouteResult(GetIsVpnServerRouteResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsVpnServerRouteResult(
            action=self.action,
            created_at=self.created_at,
            destination=self.destination,
            health_reasons=self.health_reasons,
            health_state=self.health_state,
            href=self.href,
            id=self.id,
            identifier=self.identifier,
            lifecycle_reasons=self.lifecycle_reasons,
            lifecycle_state=self.lifecycle_state,
            name=self.name,
            resource_type=self.resource_type,
            vpn_server=self.vpn_server)


def get_is_vpn_server_route(id: Optional[_builtins.str] = None,
                            identifier: Optional[_builtins.str] = None,
                            name: Optional[_builtins.str] = None,
                            vpn_server: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsVpnServerRouteResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['identifier'] = identifier
    __args__['name'] = name
    __args__['vpnServer'] = vpn_server
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsVpnServerRoute:getIsVpnServerRoute', __args__, opts=opts, typ=GetIsVpnServerRouteResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsVpnServerRouteResult(
        action=pulumi.get(__ret__, 'action'),
        created_at=pulumi.get(__ret__, 'created_at'),
        destination=pulumi.get(__ret__, 'destination'),
        health_reasons=pulumi.get(__ret__, 'health_reasons'),
        health_state=pulumi.get(__ret__, 'health_state'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        identifier=pulumi.get(__ret__, 'identifier'),
        lifecycle_reasons=pulumi.get(__ret__, 'lifecycle_reasons'),
        lifecycle_state=pulumi.get(__ret__, 'lifecycle_state'),
        name=pulumi.get(__ret__, 'name'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        vpn_server=pulumi.get(__ret__, 'vpn_server'))
def get_is_vpn_server_route_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   identifier: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   vpn_server: Optional[pulumi.Input[_builtins.str]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsVpnServerRouteResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['identifier'] = identifier
    __args__['name'] = name
    __args__['vpnServer'] = vpn_server
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsVpnServerRoute:getIsVpnServerRoute', __args__, opts=opts, typ=GetIsVpnServerRouteResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsVpnServerRouteResult(
        action=pulumi.get(__response__, 'action'),
        created_at=pulumi.get(__response__, 'created_at'),
        destination=pulumi.get(__response__, 'destination'),
        health_reasons=pulumi.get(__response__, 'health_reasons'),
        health_state=pulumi.get(__response__, 'health_state'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        identifier=pulumi.get(__response__, 'identifier'),
        lifecycle_reasons=pulumi.get(__response__, 'lifecycle_reasons'),
        lifecycle_state=pulumi.get(__response__, 'lifecycle_state'),
        name=pulumi.get(__response__, 'name'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        vpn_server=pulumi.get(__response__, 'vpn_server')))
