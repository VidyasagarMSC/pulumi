# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetAppidCloudDirectoryUserResult',
    'AwaitableGetAppidCloudDirectoryUserResult',
    'get_appid_cloud_directory_user',
    'get_appid_cloud_directory_user_output',
]

@pulumi.output_type
class GetAppidCloudDirectoryUserResult:
    """
    A collection of values returned by getAppidCloudDirectoryUser.
    """
    def __init__(__self__, active=None, display_name=None, emails=None, id=None, locked_until=None, metas=None, status=None, subject=None, tenant_id=None, user_id=None, user_name=None):
        if active and not isinstance(active, bool):
            raise TypeError("Expected argument 'active' to be a bool")
        pulumi.set(__self__, "active", active)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if emails and not isinstance(emails, list):
            raise TypeError("Expected argument 'emails' to be a list")
        pulumi.set(__self__, "emails", emails)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if locked_until and not isinstance(locked_until, float):
            raise TypeError("Expected argument 'locked_until' to be a float")
        pulumi.set(__self__, "locked_until", locked_until)
        if metas and not isinstance(metas, list):
            raise TypeError("Expected argument 'metas' to be a list")
        pulumi.set(__self__, "metas", metas)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if subject and not isinstance(subject, str):
            raise TypeError("Expected argument 'subject' to be a str")
        pulumi.set(__self__, "subject", subject)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)
        if user_id and not isinstance(user_id, str):
            raise TypeError("Expected argument 'user_id' to be a str")
        pulumi.set(__self__, "user_id", user_id)
        if user_name and not isinstance(user_name, str):
            raise TypeError("Expected argument 'user_name' to be a str")
        pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter
    def active(self) -> _builtins.bool:
        return pulumi.get(self, "active")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def emails(self) -> Sequence['outputs.GetAppidCloudDirectoryUserEmailResult']:
        return pulumi.get(self, "emails")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lockedUntil")
    def locked_until(self) -> _builtins.float:
        return pulumi.get(self, "locked_until")

    @_builtins.property
    @pulumi.getter
    def metas(self) -> Sequence['outputs.GetAppidCloudDirectoryUserMetaResult']:
        return pulumi.get(self, "metas")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def subject(self) -> _builtins.str:
        return pulumi.get(self, "subject")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.str:
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> _builtins.str:
        return pulumi.get(self, "user_id")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        return pulumi.get(self, "user_name")


class AwaitableGetAppidCloudDirectoryUserResult(GetAppidCloudDirectoryUserResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppidCloudDirectoryUserResult(
            active=self.active,
            display_name=self.display_name,
            emails=self.emails,
            id=self.id,
            locked_until=self.locked_until,
            metas=self.metas,
            status=self.status,
            subject=self.subject,
            tenant_id=self.tenant_id,
            user_id=self.user_id,
            user_name=self.user_name)


def get_appid_cloud_directory_user(id: Optional[_builtins.str] = None,
                                   tenant_id: Optional[_builtins.str] = None,
                                   user_id: Optional[_builtins.str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppidCloudDirectoryUserResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['tenantId'] = tenant_id
    __args__['userId'] = user_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getAppidCloudDirectoryUser:getAppidCloudDirectoryUser', __args__, opts=opts, typ=GetAppidCloudDirectoryUserResult, package_ref=_utilities.get_package()).value

    return AwaitableGetAppidCloudDirectoryUserResult(
        active=pulumi.get(__ret__, 'active'),
        display_name=pulumi.get(__ret__, 'display_name'),
        emails=pulumi.get(__ret__, 'emails'),
        id=pulumi.get(__ret__, 'id'),
        locked_until=pulumi.get(__ret__, 'locked_until'),
        metas=pulumi.get(__ret__, 'metas'),
        status=pulumi.get(__ret__, 'status'),
        subject=pulumi.get(__ret__, 'subject'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'),
        user_id=pulumi.get(__ret__, 'user_id'),
        user_name=pulumi.get(__ret__, 'user_name'))
def get_appid_cloud_directory_user_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                                          user_id: Optional[pulumi.Input[_builtins.str]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppidCloudDirectoryUserResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['tenantId'] = tenant_id
    __args__['userId'] = user_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getAppidCloudDirectoryUser:getAppidCloudDirectoryUser', __args__, opts=opts, typ=GetAppidCloudDirectoryUserResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetAppidCloudDirectoryUserResult(
        active=pulumi.get(__response__, 'active'),
        display_name=pulumi.get(__response__, 'display_name'),
        emails=pulumi.get(__response__, 'emails'),
        id=pulumi.get(__response__, 'id'),
        locked_until=pulumi.get(__response__, 'locked_until'),
        metas=pulumi.get(__response__, 'metas'),
        status=pulumi.get(__response__, 'status'),
        subject=pulumi.get(__response__, 'subject'),
        tenant_id=pulumi.get(__response__, 'tenant_id'),
        user_id=pulumi.get(__response__, 'user_id'),
        user_name=pulumi.get(__response__, 'user_name')))
