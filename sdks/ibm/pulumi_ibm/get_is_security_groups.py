# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsSecurityGroupsResult',
    'AwaitableGetIsSecurityGroupsResult',
    'get_is_security_groups',
    'get_is_security_groups_output',
]

@pulumi.output_type
class GetIsSecurityGroupsResult:
    """
    A collection of values returned by getIsSecurityGroups.
    """
    def __init__(__self__, id=None, resource_group=None, security_groups=None, vpc_crn=None, vpc_id=None, vpc_name=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if resource_group and not isinstance(resource_group, str):
            raise TypeError("Expected argument 'resource_group' to be a str")
        pulumi.set(__self__, "resource_group", resource_group)
        if security_groups and not isinstance(security_groups, list):
            raise TypeError("Expected argument 'security_groups' to be a list")
        pulumi.set(__self__, "security_groups", security_groups)
        if vpc_crn and not isinstance(vpc_crn, str):
            raise TypeError("Expected argument 'vpc_crn' to be a str")
        pulumi.set(__self__, "vpc_crn", vpc_crn)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)
        if vpc_name and not isinstance(vpc_name, str):
            raise TypeError("Expected argument 'vpc_name' to be a str")
        pulumi.set(__self__, "vpc_name", vpc_name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence['outputs.GetIsSecurityGroupsSecurityGroupResult']:
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter(name="vpcCrn")
    def vpc_crn(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vpc_crn")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vpc_id")

    @_builtins.property
    @pulumi.getter(name="vpcName")
    def vpc_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vpc_name")


class AwaitableGetIsSecurityGroupsResult(GetIsSecurityGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsSecurityGroupsResult(
            id=self.id,
            resource_group=self.resource_group,
            security_groups=self.security_groups,
            vpc_crn=self.vpc_crn,
            vpc_id=self.vpc_id,
            vpc_name=self.vpc_name)


def get_is_security_groups(id: Optional[_builtins.str] = None,
                           resource_group: Optional[_builtins.str] = None,
                           vpc_crn: Optional[_builtins.str] = None,
                           vpc_id: Optional[_builtins.str] = None,
                           vpc_name: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsSecurityGroupsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['resourceGroup'] = resource_group
    __args__['vpcCrn'] = vpc_crn
    __args__['vpcId'] = vpc_id
    __args__['vpcName'] = vpc_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsSecurityGroups:getIsSecurityGroups', __args__, opts=opts, typ=GetIsSecurityGroupsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsSecurityGroupsResult(
        id=pulumi.get(__ret__, 'id'),
        resource_group=pulumi.get(__ret__, 'resource_group'),
        security_groups=pulumi.get(__ret__, 'security_groups'),
        vpc_crn=pulumi.get(__ret__, 'vpc_crn'),
        vpc_id=pulumi.get(__ret__, 'vpc_id'),
        vpc_name=pulumi.get(__ret__, 'vpc_name'))
def get_is_security_groups_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  resource_group: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  vpc_crn: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  vpc_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  vpc_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsSecurityGroupsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['resourceGroup'] = resource_group
    __args__['vpcCrn'] = vpc_crn
    __args__['vpcId'] = vpc_id
    __args__['vpcName'] = vpc_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsSecurityGroups:getIsSecurityGroups', __args__, opts=opts, typ=GetIsSecurityGroupsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsSecurityGroupsResult(
        id=pulumi.get(__response__, 'id'),
        resource_group=pulumi.get(__response__, 'resource_group'),
        security_groups=pulumi.get(__response__, 'security_groups'),
        vpc_crn=pulumi.get(__response__, 'vpc_crn'),
        vpc_id=pulumi.get(__response__, 'vpc_id'),
        vpc_name=pulumi.get(__response__, 'vpc_name')))
