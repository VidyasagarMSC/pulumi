# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSccScopeResult',
    'AwaitableGetSccScopeResult',
    'get_scc_scope',
    'get_scc_scope_output',
]

@pulumi.output_type
class GetSccScopeResult:
    """
    A collection of values returned by getSccScope.
    """
    def __init__(__self__, account_id=None, attachment_count=None, created_by=None, created_on=None, description=None, environment=None, exclusions=None, id=None, instance_id=None, name=None, properties=None, scope_id=None, updated_by=None, updated_on=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if attachment_count and not isinstance(attachment_count, float):
            raise TypeError("Expected argument 'attachment_count' to be a float")
        pulumi.set(__self__, "attachment_count", attachment_count)
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if created_on and not isinstance(created_on, str):
            raise TypeError("Expected argument 'created_on' to be a str")
        pulumi.set(__self__, "created_on", created_on)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if environment and not isinstance(environment, str):
            raise TypeError("Expected argument 'environment' to be a str")
        pulumi.set(__self__, "environment", environment)
        if exclusions and not isinstance(exclusions, list):
            raise TypeError("Expected argument 'exclusions' to be a list")
        pulumi.set(__self__, "exclusions", exclusions)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if properties and not isinstance(properties, dict):
            raise TypeError("Expected argument 'properties' to be a dict")
        pulumi.set(__self__, "properties", properties)
        if scope_id and not isinstance(scope_id, str):
            raise TypeError("Expected argument 'scope_id' to be a str")
        pulumi.set(__self__, "scope_id", scope_id)
        if updated_by and not isinstance(updated_by, str):
            raise TypeError("Expected argument 'updated_by' to be a str")
        pulumi.set(__self__, "updated_by", updated_by)
        if updated_on and not isinstance(updated_on, str):
            raise TypeError("Expected argument 'updated_on' to be a str")
        pulumi.set(__self__, "updated_on", updated_on)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="attachmentCount")
    def attachment_count(self) -> _builtins.float:
        return pulumi.get(self, "attachment_count")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> _builtins.str:
        return pulumi.get(self, "created_on")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def environment(self) -> _builtins.str:
        return pulumi.get(self, "environment")

    @_builtins.property
    @pulumi.getter
    def exclusions(self) -> Sequence['outputs.GetSccScopeExclusionResult']:
        return pulumi.get(self, "exclusions")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "properties")

    @_builtins.property
    @pulumi.getter(name="scopeId")
    def scope_id(self) -> _builtins.str:
        return pulumi.get(self, "scope_id")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> _builtins.str:
        return pulumi.get(self, "updated_by")

    @_builtins.property
    @pulumi.getter(name="updatedOn")
    def updated_on(self) -> _builtins.str:
        return pulumi.get(self, "updated_on")


class AwaitableGetSccScopeResult(GetSccScopeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSccScopeResult(
            account_id=self.account_id,
            attachment_count=self.attachment_count,
            created_by=self.created_by,
            created_on=self.created_on,
            description=self.description,
            environment=self.environment,
            exclusions=self.exclusions,
            id=self.id,
            instance_id=self.instance_id,
            name=self.name,
            properties=self.properties,
            scope_id=self.scope_id,
            updated_by=self.updated_by,
            updated_on=self.updated_on)


def get_scc_scope(id: Optional[_builtins.str] = None,
                  instance_id: Optional[_builtins.str] = None,
                  scope_id: Optional[_builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSccScopeResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['scopeId'] = scope_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSccScope:getSccScope', __args__, opts=opts, typ=GetSccScopeResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSccScopeResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        attachment_count=pulumi.get(__ret__, 'attachment_count'),
        created_by=pulumi.get(__ret__, 'created_by'),
        created_on=pulumi.get(__ret__, 'created_on'),
        description=pulumi.get(__ret__, 'description'),
        environment=pulumi.get(__ret__, 'environment'),
        exclusions=pulumi.get(__ret__, 'exclusions'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        name=pulumi.get(__ret__, 'name'),
        properties=pulumi.get(__ret__, 'properties'),
        scope_id=pulumi.get(__ret__, 'scope_id'),
        updated_by=pulumi.get(__ret__, 'updated_by'),
        updated_on=pulumi.get(__ret__, 'updated_on'))
def get_scc_scope_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                         scope_id: Optional[pulumi.Input[_builtins.str]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSccScopeResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['scopeId'] = scope_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSccScope:getSccScope', __args__, opts=opts, typ=GetSccScopeResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSccScopeResult(
        account_id=pulumi.get(__response__, 'account_id'),
        attachment_count=pulumi.get(__response__, 'attachment_count'),
        created_by=pulumi.get(__response__, 'created_by'),
        created_on=pulumi.get(__response__, 'created_on'),
        description=pulumi.get(__response__, 'description'),
        environment=pulumi.get(__response__, 'environment'),
        exclusions=pulumi.get(__response__, 'exclusions'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        name=pulumi.get(__response__, 'name'),
        properties=pulumi.get(__response__, 'properties'),
        scope_id=pulumi.get(__response__, 'scope_id'),
        updated_by=pulumi.get(__response__, 'updated_by'),
        updated_on=pulumi.get(__response__, 'updated_on')))
