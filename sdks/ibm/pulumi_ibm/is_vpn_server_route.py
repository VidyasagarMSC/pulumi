# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsVpnServerRouteArgs', 'IsVpnServerRoute']

@pulumi.input_type
class IsVpnServerRouteArgs:
    def __init__(__self__, *,
                 destination: pulumi.Input[_builtins.str],
                 vpn_server: pulumi.Input[_builtins.str],
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 is_vpn_server_route_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['IsVpnServerRouteTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a IsVpnServerRoute resource.
        :param pulumi.Input[_builtins.str] destination: The destination to use for this VPN route in the VPN server. Must be unique within the VPN server. If an incoming packet
               does not match any destination, it will be dropped.
        :param pulumi.Input[_builtins.str] vpn_server: The VPN server identifier.
        :param pulumi.Input[_builtins.str] action: The action to perform with a packet matching the VPN route:- `translate`: translate the source IP address to one of the
               private IP addresses of the VPN server, then deliver the packet to target.- `deliver`: deliver the packet to the
               target.- `drop`: drop the packetThe enumerated values for this property are expected to expand in the future. When
               processing this property, check for and log unknown values. Optionally halt processing and surface the error, or bypass
               the VPN route on which the unexpected property value was encountered.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this VPN route. If unspecified, the name will be a hyphenated list of randomly-selected words.
               Names must be unique within the VPN server the VPN route resides in.
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "vpn_server", vpn_server)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if is_vpn_server_route_id is not None:
            pulumi.set(__self__, "is_vpn_server_route_id", is_vpn_server_route_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def destination(self) -> pulumi.Input[_builtins.str]:
        """
        The destination to use for this VPN route in the VPN server. Must be unique within the VPN server. If an incoming packet
        does not match any destination, it will be dropped.
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "destination", value)

    @_builtins.property
    @pulumi.getter(name="vpnServer")
    def vpn_server(self) -> pulumi.Input[_builtins.str]:
        """
        The VPN server identifier.
        """
        return pulumi.get(self, "vpn_server")

    @vpn_server.setter
    def vpn_server(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vpn_server", value)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The action to perform with a packet matching the VPN route:- `translate`: translate the source IP address to one of the
        private IP addresses of the VPN server, then deliver the packet to target.- `deliver`: deliver the packet to the
        target.- `drop`: drop the packetThe enumerated values for this property are expected to expand in the future. When
        processing this property, check for and log unknown values. Optionally halt processing and surface the error, or bypass
        the VPN route on which the unexpected property value was encountered.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="isVpnServerRouteId")
    def is_vpn_server_route_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_vpn_server_route_id")

    @is_vpn_server_route_id.setter
    def is_vpn_server_route_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_vpn_server_route_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user-defined name for this VPN route. If unspecified, the name will be a hyphenated list of randomly-selected words.
        Names must be unique within the VPN server the VPN route resides in.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsVpnServerRouteTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsVpnServerRouteTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _IsVpnServerRouteState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 destination: Optional[pulumi.Input[_builtins.str]] = None,
                 health_reasons: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnServerRouteHealthReasonArgs']]]] = None,
                 health_state: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 is_vpn_server_route_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lifecycle_reasons: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnServerRouteLifecycleReasonArgs']]]] = None,
                 lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['IsVpnServerRouteTimeoutsArgs']] = None,
                 vpn_route: Optional[pulumi.Input[_builtins.str]] = None,
                 vpn_server: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsVpnServerRoute resources.
        :param pulumi.Input[_builtins.str] action: The action to perform with a packet matching the VPN route:- `translate`: translate the source IP address to one of the
               private IP addresses of the VPN server, then deliver the packet to target.- `deliver`: deliver the packet to the
               target.- `drop`: drop the packetThe enumerated values for this property are expected to expand in the future. When
               processing this property, check for and log unknown values. Optionally halt processing and surface the error, or bypass
               the VPN route on which the unexpected property value was encountered.
        :param pulumi.Input[_builtins.str] created_at: The date and time that the VPN route was created.
        :param pulumi.Input[_builtins.str] destination: The destination to use for this VPN route in the VPN server. Must be unique within the VPN server. If an incoming packet
               does not match any destination, it will be dropped.
        :param pulumi.Input[_builtins.str] health_state: The health of this resource.- `ok`: Healthy- `degraded`: Suffering from compromised performance, capacity, or
               connectivity- `faulted`: Completely unreachable, inoperative, or otherwise entirely incapacitated- `inapplicable`: The
               health state does not apply because of the current lifecycle state. A resource with a lifecycle state of `failed` or
               `deleting` will have a health state of `inapplicable`. A `pending` resource may also have this state.
        :param pulumi.Input[_builtins.str] href: The URL for this VPN route.
        :param pulumi.Input[Sequence[pulumi.Input['IsVpnServerRouteLifecycleReasonArgs']]] lifecycle_reasons: The reasons for the current lifecycle_state (if any).
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of the VPN route.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this VPN route. If unspecified, the name will be a hyphenated list of randomly-selected words.
               Names must be unique within the VPN server the VPN route resides in.
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input[_builtins.str] vpn_route: The VPN route identifier.
        :param pulumi.Input[_builtins.str] vpn_server: The VPN server identifier.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if health_reasons is not None:
            pulumi.set(__self__, "health_reasons", health_reasons)
        if health_state is not None:
            pulumi.set(__self__, "health_state", health_state)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if is_vpn_server_route_id is not None:
            pulumi.set(__self__, "is_vpn_server_route_id", is_vpn_server_route_id)
        if lifecycle_reasons is not None:
            pulumi.set(__self__, "lifecycle_reasons", lifecycle_reasons)
        if lifecycle_state is not None:
            pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if vpn_route is not None:
            pulumi.set(__self__, "vpn_route", vpn_route)
        if vpn_server is not None:
            pulumi.set(__self__, "vpn_server", vpn_server)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The action to perform with a packet matching the VPN route:- `translate`: translate the source IP address to one of the
        private IP addresses of the VPN server, then deliver the packet to target.- `deliver`: deliver the packet to the
        target.- `drop`: drop the packetThe enumerated values for this property are expected to expand in the future. When
        processing this property, check for and log unknown values. Optionally halt processing and surface the error, or bypass
        the VPN route on which the unexpected property value was encountered.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time that the VPN route was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def destination(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The destination to use for this VPN route in the VPN server. Must be unique within the VPN server. If an incoming packet
        does not match any destination, it will be dropped.
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination", value)

    @_builtins.property
    @pulumi.getter(name="healthReasons")
    def health_reasons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnServerRouteHealthReasonArgs']]]]:
        return pulumi.get(self, "health_reasons")

    @health_reasons.setter
    def health_reasons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnServerRouteHealthReasonArgs']]]]):
        pulumi.set(self, "health_reasons", value)

    @_builtins.property
    @pulumi.getter(name="healthState")
    def health_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The health of this resource.- `ok`: Healthy- `degraded`: Suffering from compromised performance, capacity, or
        connectivity- `faulted`: Completely unreachable, inoperative, or otherwise entirely incapacitated- `inapplicable`: The
        health state does not apply because of the current lifecycle state. A resource with a lifecycle state of `failed` or
        `deleting` will have a health state of `inapplicable`. A `pending` resource may also have this state.
        """
        return pulumi.get(self, "health_state")

    @health_state.setter
    def health_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "health_state", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL for this VPN route.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="isVpnServerRouteId")
    def is_vpn_server_route_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_vpn_server_route_id")

    @is_vpn_server_route_id.setter
    def is_vpn_server_route_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_vpn_server_route_id", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleReasons")
    def lifecycle_reasons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnServerRouteLifecycleReasonArgs']]]]:
        """
        The reasons for the current lifecycle_state (if any).
        """
        return pulumi.get(self, "lifecycle_reasons")

    @lifecycle_reasons.setter
    def lifecycle_reasons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpnServerRouteLifecycleReasonArgs']]]]):
        pulumi.set(self, "lifecycle_reasons", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The lifecycle state of the VPN route.
        """
        return pulumi.get(self, "lifecycle_state")

    @lifecycle_state.setter
    def lifecycle_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lifecycle_state", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user-defined name for this VPN route. If unspecified, the name will be a hyphenated list of randomly-selected words.
        Names must be unique within the VPN server the VPN route resides in.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsVpnServerRouteTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsVpnServerRouteTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="vpnRoute")
    def vpn_route(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The VPN route identifier.
        """
        return pulumi.get(self, "vpn_route")

    @vpn_route.setter
    def vpn_route(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpn_route", value)

    @_builtins.property
    @pulumi.getter(name="vpnServer")
    def vpn_server(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The VPN server identifier.
        """
        return pulumi.get(self, "vpn_server")

    @vpn_server.setter
    def vpn_server(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpn_server", value)


@pulumi.type_token("ibm:index/isVpnServerRoute:IsVpnServerRoute")
class IsVpnServerRoute(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 destination: Optional[pulumi.Input[_builtins.str]] = None,
                 is_vpn_server_route_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsVpnServerRouteTimeoutsArgs', 'IsVpnServerRouteTimeoutsArgsDict']]] = None,
                 vpn_server: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IsVpnServerRoute resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: The action to perform with a packet matching the VPN route:- `translate`: translate the source IP address to one of the
               private IP addresses of the VPN server, then deliver the packet to target.- `deliver`: deliver the packet to the
               target.- `drop`: drop the packetThe enumerated values for this property are expected to expand in the future. When
               processing this property, check for and log unknown values. Optionally halt processing and surface the error, or bypass
               the VPN route on which the unexpected property value was encountered.
        :param pulumi.Input[_builtins.str] destination: The destination to use for this VPN route in the VPN server. Must be unique within the VPN server. If an incoming packet
               does not match any destination, it will be dropped.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this VPN route. If unspecified, the name will be a hyphenated list of randomly-selected words.
               Names must be unique within the VPN server the VPN route resides in.
        :param pulumi.Input[_builtins.str] vpn_server: The VPN server identifier.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsVpnServerRouteArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsVpnServerRoute resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsVpnServerRouteArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsVpnServerRouteArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 destination: Optional[pulumi.Input[_builtins.str]] = None,
                 is_vpn_server_route_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsVpnServerRouteTimeoutsArgs', 'IsVpnServerRouteTimeoutsArgsDict']]] = None,
                 vpn_server: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsVpnServerRouteArgs.__new__(IsVpnServerRouteArgs)

            __props__.__dict__["action"] = action
            if destination is None and not opts.urn:
                raise TypeError("Missing required property 'destination'")
            __props__.__dict__["destination"] = destination
            __props__.__dict__["is_vpn_server_route_id"] = is_vpn_server_route_id
            __props__.__dict__["name"] = name
            __props__.__dict__["timeouts"] = timeouts
            if vpn_server is None and not opts.urn:
                raise TypeError("Missing required property 'vpn_server'")
            __props__.__dict__["vpn_server"] = vpn_server
            __props__.__dict__["created_at"] = None
            __props__.__dict__["health_reasons"] = None
            __props__.__dict__["health_state"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["lifecycle_reasons"] = None
            __props__.__dict__["lifecycle_state"] = None
            __props__.__dict__["resource_type"] = None
            __props__.__dict__["vpn_route"] = None
        super(IsVpnServerRoute, __self__).__init__(
            'ibm:index/isVpnServerRoute:IsVpnServerRoute',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            destination: Optional[pulumi.Input[_builtins.str]] = None,
            health_reasons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVpnServerRouteHealthReasonArgs', 'IsVpnServerRouteHealthReasonArgsDict']]]]] = None,
            health_state: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            is_vpn_server_route_id: Optional[pulumi.Input[_builtins.str]] = None,
            lifecycle_reasons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVpnServerRouteLifecycleReasonArgs', 'IsVpnServerRouteLifecycleReasonArgsDict']]]]] = None,
            lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['IsVpnServerRouteTimeoutsArgs', 'IsVpnServerRouteTimeoutsArgsDict']]] = None,
            vpn_route: Optional[pulumi.Input[_builtins.str]] = None,
            vpn_server: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsVpnServerRoute':
        """
        Get an existing IsVpnServerRoute resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: The action to perform with a packet matching the VPN route:- `translate`: translate the source IP address to one of the
               private IP addresses of the VPN server, then deliver the packet to target.- `deliver`: deliver the packet to the
               target.- `drop`: drop the packetThe enumerated values for this property are expected to expand in the future. When
               processing this property, check for and log unknown values. Optionally halt processing and surface the error, or bypass
               the VPN route on which the unexpected property value was encountered.
        :param pulumi.Input[_builtins.str] created_at: The date and time that the VPN route was created.
        :param pulumi.Input[_builtins.str] destination: The destination to use for this VPN route in the VPN server. Must be unique within the VPN server. If an incoming packet
               does not match any destination, it will be dropped.
        :param pulumi.Input[_builtins.str] health_state: The health of this resource.- `ok`: Healthy- `degraded`: Suffering from compromised performance, capacity, or
               connectivity- `faulted`: Completely unreachable, inoperative, or otherwise entirely incapacitated- `inapplicable`: The
               health state does not apply because of the current lifecycle state. A resource with a lifecycle state of `failed` or
               `deleting` will have a health state of `inapplicable`. A `pending` resource may also have this state.
        :param pulumi.Input[_builtins.str] href: The URL for this VPN route.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsVpnServerRouteLifecycleReasonArgs', 'IsVpnServerRouteLifecycleReasonArgsDict']]]] lifecycle_reasons: The reasons for the current lifecycle_state (if any).
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of the VPN route.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this VPN route. If unspecified, the name will be a hyphenated list of randomly-selected words.
               Names must be unique within the VPN server the VPN route resides in.
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input[_builtins.str] vpn_route: The VPN route identifier.
        :param pulumi.Input[_builtins.str] vpn_server: The VPN server identifier.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsVpnServerRouteState.__new__(_IsVpnServerRouteState)

        __props__.__dict__["action"] = action
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["destination"] = destination
        __props__.__dict__["health_reasons"] = health_reasons
        __props__.__dict__["health_state"] = health_state
        __props__.__dict__["href"] = href
        __props__.__dict__["is_vpn_server_route_id"] = is_vpn_server_route_id
        __props__.__dict__["lifecycle_reasons"] = lifecycle_reasons
        __props__.__dict__["lifecycle_state"] = lifecycle_state
        __props__.__dict__["name"] = name
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["vpn_route"] = vpn_route
        __props__.__dict__["vpn_server"] = vpn_server
        return IsVpnServerRoute(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The action to perform with a packet matching the VPN route:- `translate`: translate the source IP address to one of the
        private IP addresses of the VPN server, then deliver the packet to target.- `deliver`: deliver the packet to the
        target.- `drop`: drop the packetThe enumerated values for this property are expected to expand in the future. When
        processing this property, check for and log unknown values. Optionally halt processing and surface the error, or bypass
        the VPN route on which the unexpected property value was encountered.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time that the VPN route was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def destination(self) -> pulumi.Output[_builtins.str]:
        """
        The destination to use for this VPN route in the VPN server. Must be unique within the VPN server. If an incoming packet
        does not match any destination, it will be dropped.
        """
        return pulumi.get(self, "destination")

    @_builtins.property
    @pulumi.getter(name="healthReasons")
    def health_reasons(self) -> pulumi.Output[Sequence['outputs.IsVpnServerRouteHealthReason']]:
        return pulumi.get(self, "health_reasons")

    @_builtins.property
    @pulumi.getter(name="healthState")
    def health_state(self) -> pulumi.Output[_builtins.str]:
        """
        The health of this resource.- `ok`: Healthy- `degraded`: Suffering from compromised performance, capacity, or
        connectivity- `faulted`: Completely unreachable, inoperative, or otherwise entirely incapacitated- `inapplicable`: The
        health state does not apply because of the current lifecycle state. A resource with a lifecycle state of `failed` or
        `deleting` will have a health state of `inapplicable`. A `pending` resource may also have this state.
        """
        return pulumi.get(self, "health_state")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        The URL for this VPN route.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="isVpnServerRouteId")
    def is_vpn_server_route_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_vpn_server_route_id")

    @_builtins.property
    @pulumi.getter(name="lifecycleReasons")
    def lifecycle_reasons(self) -> pulumi.Output[Sequence['outputs.IsVpnServerRouteLifecycleReason']]:
        """
        The reasons for the current lifecycle_state (if any).
        """
        return pulumi.get(self, "lifecycle_reasons")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> pulumi.Output[_builtins.str]:
        """
        The lifecycle state of the VPN route.
        """
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The user-defined name for this VPN route. If unspecified, the name will be a hyphenated list of randomly-selected words.
        Names must be unique within the VPN server the VPN route resides in.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IsVpnServerRouteTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter(name="vpnRoute")
    def vpn_route(self) -> pulumi.Output[_builtins.str]:
        """
        The VPN route identifier.
        """
        return pulumi.get(self, "vpn_route")

    @_builtins.property
    @pulumi.getter(name="vpnServer")
    def vpn_server(self) -> pulumi.Output[_builtins.str]:
        """
        The VPN server identifier.
        """
        return pulumi.get(self, "vpn_server")

