# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['EventStreamsTopicArgs', 'EventStreamsTopic']

@pulumi.input_type
class EventStreamsTopicArgs:
    def __init__(__self__, *,
                 resource_instance_id: pulumi.Input[_builtins.str],
                 config: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 event_streams_topic_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 partitions: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a EventStreamsTopic resource.
        :param pulumi.Input[_builtins.str] resource_instance_id: The CRN of the Event Streams instance
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] config: The configuration parameters of a topic
        :param pulumi.Input[_builtins.str] name: The name of the topic
        :param pulumi.Input[_builtins.float] partitions: The number of partitions
        """
        pulumi.set(__self__, "resource_instance_id", resource_instance_id)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if event_streams_topic_id is not None:
            pulumi.set(__self__, "event_streams_topic_id", event_streams_topic_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if partitions is not None:
            pulumi.set(__self__, "partitions", partitions)

    @_builtins.property
    @pulumi.getter(name="resourceInstanceId")
    def resource_instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The CRN of the Event Streams instance
        """
        return pulumi.get(self, "resource_instance_id")

    @resource_instance_id.setter
    def resource_instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_instance_id", value)

    @_builtins.property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        The configuration parameters of a topic
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "config", value)

    @_builtins.property
    @pulumi.getter(name="eventStreamsTopicId")
    def event_streams_topic_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "event_streams_topic_id")

    @event_streams_topic_id.setter
    def event_streams_topic_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "event_streams_topic_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the topic
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def partitions(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The number of partitions
        """
        return pulumi.get(self, "partitions")

    @partitions.setter
    def partitions(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "partitions", value)


@pulumi.input_type
class _EventStreamsTopicState:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 event_streams_topic_id: Optional[pulumi.Input[_builtins.str]] = None,
                 kafka_brokers_sasls: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 kafka_http_url: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 partitions: Optional[pulumi.Input[_builtins.float]] = None,
                 resource_instance_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering EventStreamsTopic resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] config: The configuration parameters of a topic
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] kafka_brokers_sasls: Kafka brokers addresses for interacting with Kafka native API
        :param pulumi.Input[_builtins.str] kafka_http_url: API endpoint for interacting with Event Streams REST API
        :param pulumi.Input[_builtins.str] name: The name of the topic
        :param pulumi.Input[_builtins.float] partitions: The number of partitions
        :param pulumi.Input[_builtins.str] resource_instance_id: The CRN of the Event Streams instance
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if event_streams_topic_id is not None:
            pulumi.set(__self__, "event_streams_topic_id", event_streams_topic_id)
        if kafka_brokers_sasls is not None:
            pulumi.set(__self__, "kafka_brokers_sasls", kafka_brokers_sasls)
        if kafka_http_url is not None:
            pulumi.set(__self__, "kafka_http_url", kafka_http_url)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if partitions is not None:
            pulumi.set(__self__, "partitions", partitions)
        if resource_instance_id is not None:
            pulumi.set(__self__, "resource_instance_id", resource_instance_id)

    @_builtins.property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        The configuration parameters of a topic
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "config", value)

    @_builtins.property
    @pulumi.getter(name="eventStreamsTopicId")
    def event_streams_topic_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "event_streams_topic_id")

    @event_streams_topic_id.setter
    def event_streams_topic_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "event_streams_topic_id", value)

    @_builtins.property
    @pulumi.getter(name="kafkaBrokersSasls")
    def kafka_brokers_sasls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Kafka brokers addresses for interacting with Kafka native API
        """
        return pulumi.get(self, "kafka_brokers_sasls")

    @kafka_brokers_sasls.setter
    def kafka_brokers_sasls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "kafka_brokers_sasls", value)

    @_builtins.property
    @pulumi.getter(name="kafkaHttpUrl")
    def kafka_http_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        API endpoint for interacting with Event Streams REST API
        """
        return pulumi.get(self, "kafka_http_url")

    @kafka_http_url.setter
    def kafka_http_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kafka_http_url", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the topic
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def partitions(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The number of partitions
        """
        return pulumi.get(self, "partitions")

    @partitions.setter
    def partitions(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "partitions", value)

    @_builtins.property
    @pulumi.getter(name="resourceInstanceId")
    def resource_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN of the Event Streams instance
        """
        return pulumi.get(self, "resource_instance_id")

    @resource_instance_id.setter
    def resource_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_instance_id", value)


@pulumi.type_token("ibm:index/eventStreamsTopic:EventStreamsTopic")
class EventStreamsTopic(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 event_streams_topic_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 partitions: Optional[pulumi.Input[_builtins.float]] = None,
                 resource_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a EventStreamsTopic resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] config: The configuration parameters of a topic
        :param pulumi.Input[_builtins.str] name: The name of the topic
        :param pulumi.Input[_builtins.float] partitions: The number of partitions
        :param pulumi.Input[_builtins.str] resource_instance_id: The CRN of the Event Streams instance
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EventStreamsTopicArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a EventStreamsTopic resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param EventStreamsTopicArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EventStreamsTopicArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 event_streams_topic_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 partitions: Optional[pulumi.Input[_builtins.float]] = None,
                 resource_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EventStreamsTopicArgs.__new__(EventStreamsTopicArgs)

            __props__.__dict__["config"] = config
            __props__.__dict__["event_streams_topic_id"] = event_streams_topic_id
            __props__.__dict__["name"] = name
            __props__.__dict__["partitions"] = partitions
            if resource_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'resource_instance_id'")
            __props__.__dict__["resource_instance_id"] = resource_instance_id
            __props__.__dict__["kafka_brokers_sasls"] = None
            __props__.__dict__["kafka_http_url"] = None
        super(EventStreamsTopic, __self__).__init__(
            'ibm:index/eventStreamsTopic:EventStreamsTopic',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            config: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            event_streams_topic_id: Optional[pulumi.Input[_builtins.str]] = None,
            kafka_brokers_sasls: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            kafka_http_url: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            partitions: Optional[pulumi.Input[_builtins.float]] = None,
            resource_instance_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'EventStreamsTopic':
        """
        Get an existing EventStreamsTopic resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] config: The configuration parameters of a topic
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] kafka_brokers_sasls: Kafka brokers addresses for interacting with Kafka native API
        :param pulumi.Input[_builtins.str] kafka_http_url: API endpoint for interacting with Event Streams REST API
        :param pulumi.Input[_builtins.str] name: The name of the topic
        :param pulumi.Input[_builtins.float] partitions: The number of partitions
        :param pulumi.Input[_builtins.str] resource_instance_id: The CRN of the Event Streams instance
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EventStreamsTopicState.__new__(_EventStreamsTopicState)

        __props__.__dict__["config"] = config
        __props__.__dict__["event_streams_topic_id"] = event_streams_topic_id
        __props__.__dict__["kafka_brokers_sasls"] = kafka_brokers_sasls
        __props__.__dict__["kafka_http_url"] = kafka_http_url
        __props__.__dict__["name"] = name
        __props__.__dict__["partitions"] = partitions
        __props__.__dict__["resource_instance_id"] = resource_instance_id
        return EventStreamsTopic(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def config(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        The configuration parameters of a topic
        """
        return pulumi.get(self, "config")

    @_builtins.property
    @pulumi.getter(name="eventStreamsTopicId")
    def event_streams_topic_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "event_streams_topic_id")

    @_builtins.property
    @pulumi.getter(name="kafkaBrokersSasls")
    def kafka_brokers_sasls(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Kafka brokers addresses for interacting with Kafka native API
        """
        return pulumi.get(self, "kafka_brokers_sasls")

    @_builtins.property
    @pulumi.getter(name="kafkaHttpUrl")
    def kafka_http_url(self) -> pulumi.Output[_builtins.str]:
        """
        API endpoint for interacting with Event Streams REST API
        """
        return pulumi.get(self, "kafka_http_url")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the topic
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def partitions(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        The number of partitions
        """
        return pulumi.get(self, "partitions")

    @_builtins.property
    @pulumi.getter(name="resourceInstanceId")
    def resource_instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The CRN of the Event Streams instance
        """
        return pulumi.get(self, "resource_instance_id")

