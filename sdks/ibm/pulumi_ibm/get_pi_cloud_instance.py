# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetPiCloudInstanceResult',
    'AwaitableGetPiCloudInstanceResult',
    'get_pi_cloud_instance',
    'get_pi_cloud_instance_output',
]

@pulumi.output_type
class GetPiCloudInstanceResult:
    """
    A collection of values returned by getPiCloudInstance.
    """
    def __init__(__self__, capabilities=None, enabled=None, id=None, pi_cloud_instance_id=None, pvm_instances=None, region=None, tenant_id=None, total_instances=None, total_memory_consumed=None, total_processors_consumed=None, total_ssd_storage_consumed=None, total_standard_storage_consumed=None):
        if capabilities and not isinstance(capabilities, list):
            raise TypeError("Expected argument 'capabilities' to be a list")
        pulumi.set(__self__, "capabilities", capabilities)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if pi_cloud_instance_id and not isinstance(pi_cloud_instance_id, str):
            raise TypeError("Expected argument 'pi_cloud_instance_id' to be a str")
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pvm_instances and not isinstance(pvm_instances, list):
            raise TypeError("Expected argument 'pvm_instances' to be a list")
        pulumi.set(__self__, "pvm_instances", pvm_instances)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)
        if total_instances and not isinstance(total_instances, float):
            raise TypeError("Expected argument 'total_instances' to be a float")
        pulumi.set(__self__, "total_instances", total_instances)
        if total_memory_consumed and not isinstance(total_memory_consumed, float):
            raise TypeError("Expected argument 'total_memory_consumed' to be a float")
        pulumi.set(__self__, "total_memory_consumed", total_memory_consumed)
        if total_processors_consumed and not isinstance(total_processors_consumed, float):
            raise TypeError("Expected argument 'total_processors_consumed' to be a float")
        pulumi.set(__self__, "total_processors_consumed", total_processors_consumed)
        if total_ssd_storage_consumed and not isinstance(total_ssd_storage_consumed, float):
            raise TypeError("Expected argument 'total_ssd_storage_consumed' to be a float")
        pulumi.set(__self__, "total_ssd_storage_consumed", total_ssd_storage_consumed)
        if total_standard_storage_consumed and not isinstance(total_standard_storage_consumed, float):
            raise TypeError("Expected argument 'total_standard_storage_consumed' to be a float")
        pulumi.set(__self__, "total_standard_storage_consumed", total_standard_storage_consumed)

    @_builtins.property
    @pulumi.getter
    def capabilities(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "capabilities")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="pvmInstances")
    def pvm_instances(self) -> Sequence['outputs.GetPiCloudInstancePvmInstanceResult']:
        return pulumi.get(self, "pvm_instances")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.str:
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter(name="totalInstances")
    def total_instances(self) -> _builtins.float:
        return pulumi.get(self, "total_instances")

    @_builtins.property
    @pulumi.getter(name="totalMemoryConsumed")
    def total_memory_consumed(self) -> _builtins.float:
        return pulumi.get(self, "total_memory_consumed")

    @_builtins.property
    @pulumi.getter(name="totalProcessorsConsumed")
    def total_processors_consumed(self) -> _builtins.float:
        return pulumi.get(self, "total_processors_consumed")

    @_builtins.property
    @pulumi.getter(name="totalSsdStorageConsumed")
    def total_ssd_storage_consumed(self) -> _builtins.float:
        return pulumi.get(self, "total_ssd_storage_consumed")

    @_builtins.property
    @pulumi.getter(name="totalStandardStorageConsumed")
    def total_standard_storage_consumed(self) -> _builtins.float:
        return pulumi.get(self, "total_standard_storage_consumed")


class AwaitableGetPiCloudInstanceResult(GetPiCloudInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPiCloudInstanceResult(
            capabilities=self.capabilities,
            enabled=self.enabled,
            id=self.id,
            pi_cloud_instance_id=self.pi_cloud_instance_id,
            pvm_instances=self.pvm_instances,
            region=self.region,
            tenant_id=self.tenant_id,
            total_instances=self.total_instances,
            total_memory_consumed=self.total_memory_consumed,
            total_processors_consumed=self.total_processors_consumed,
            total_ssd_storage_consumed=self.total_ssd_storage_consumed,
            total_standard_storage_consumed=self.total_standard_storage_consumed)


def get_pi_cloud_instance(id: Optional[_builtins.str] = None,
                          pi_cloud_instance_id: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPiCloudInstanceResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getPiCloudInstance:getPiCloudInstance', __args__, opts=opts, typ=GetPiCloudInstanceResult, package_ref=_utilities.get_package()).value

    return AwaitableGetPiCloudInstanceResult(
        capabilities=pulumi.get(__ret__, 'capabilities'),
        enabled=pulumi.get(__ret__, 'enabled'),
        id=pulumi.get(__ret__, 'id'),
        pi_cloud_instance_id=pulumi.get(__ret__, 'pi_cloud_instance_id'),
        pvm_instances=pulumi.get(__ret__, 'pvm_instances'),
        region=pulumi.get(__ret__, 'region'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'),
        total_instances=pulumi.get(__ret__, 'total_instances'),
        total_memory_consumed=pulumi.get(__ret__, 'total_memory_consumed'),
        total_processors_consumed=pulumi.get(__ret__, 'total_processors_consumed'),
        total_ssd_storage_consumed=pulumi.get(__ret__, 'total_ssd_storage_consumed'),
        total_standard_storage_consumed=pulumi.get(__ret__, 'total_standard_storage_consumed'))
def get_pi_cloud_instance_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPiCloudInstanceResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getPiCloudInstance:getPiCloudInstance', __args__, opts=opts, typ=GetPiCloudInstanceResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetPiCloudInstanceResult(
        capabilities=pulumi.get(__response__, 'capabilities'),
        enabled=pulumi.get(__response__, 'enabled'),
        id=pulumi.get(__response__, 'id'),
        pi_cloud_instance_id=pulumi.get(__response__, 'pi_cloud_instance_id'),
        pvm_instances=pulumi.get(__response__, 'pvm_instances'),
        region=pulumi.get(__response__, 'region'),
        tenant_id=pulumi.get(__response__, 'tenant_id'),
        total_instances=pulumi.get(__response__, 'total_instances'),
        total_memory_consumed=pulumi.get(__response__, 'total_memory_consumed'),
        total_processors_consumed=pulumi.get(__response__, 'total_processors_consumed'),
        total_ssd_storage_consumed=pulumi.get(__response__, 'total_ssd_storage_consumed'),
        total_standard_storage_consumed=pulumi.get(__response__, 'total_standard_storage_consumed')))
