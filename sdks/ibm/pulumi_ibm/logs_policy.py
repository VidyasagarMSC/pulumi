# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LogsPolicyArgs', 'LogsPolicy']

@pulumi.input_type
class LogsPolicyArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 priority: pulumi.Input[_builtins.str],
                 application_rule: Optional[pulumi.Input['LogsPolicyApplicationRuleArgs']] = None,
                 archive_retention: Optional[pulumi.Input['LogsPolicyArchiveRetentionArgs']] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 log_rules: Optional[pulumi.Input['LogsPolicyLogRulesArgs']] = None,
                 logs_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 subsystem_rule: Optional[pulumi.Input['LogsPolicySubsystemRuleArgs']] = None):
        """
        The set of arguments for constructing a LogsPolicy resource.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the logs instance.
        :param pulumi.Input[_builtins.str] priority: The data pipeline sources that match the policy rules will go through.
        :param pulumi.Input['LogsPolicyApplicationRuleArgs'] application_rule: Rule for matching with application.
        :param pulumi.Input['LogsPolicyArchiveRetentionArgs'] archive_retention: Archive retention definition.
        :param pulumi.Input[_builtins.str] description: Description of policy.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input['LogsPolicyLogRulesArgs'] log_rules: Log rules.
        :param pulumi.Input[_builtins.str] name: Name of policy.
        :param pulumi.Input[_builtins.str] region: The region of the logs instance.
        :param pulumi.Input['LogsPolicySubsystemRuleArgs'] subsystem_rule: Rule for matching with application.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "priority", priority)
        if application_rule is not None:
            pulumi.set(__self__, "application_rule", application_rule)
        if archive_retention is not None:
            pulumi.set(__self__, "archive_retention", archive_retention)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if log_rules is not None:
            pulumi.set(__self__, "log_rules", log_rules)
        if logs_policy_id is not None:
            pulumi.set(__self__, "logs_policy_id", logs_policy_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if subsystem_rule is not None:
            pulumi.set(__self__, "subsystem_rule", subsystem_rule)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the logs instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> pulumi.Input[_builtins.str]:
        """
        The data pipeline sources that match the policy rules will go through.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "priority", value)

    @_builtins.property
    @pulumi.getter(name="applicationRule")
    def application_rule(self) -> Optional[pulumi.Input['LogsPolicyApplicationRuleArgs']]:
        """
        Rule for matching with application.
        """
        return pulumi.get(self, "application_rule")

    @application_rule.setter
    def application_rule(self, value: Optional[pulumi.Input['LogsPolicyApplicationRuleArgs']]):
        pulumi.set(self, "application_rule", value)

    @_builtins.property
    @pulumi.getter(name="archiveRetention")
    def archive_retention(self) -> Optional[pulumi.Input['LogsPolicyArchiveRetentionArgs']]:
        """
        Archive retention definition.
        """
        return pulumi.get(self, "archive_retention")

    @archive_retention.setter
    def archive_retention(self, value: Optional[pulumi.Input['LogsPolicyArchiveRetentionArgs']]):
        pulumi.set(self, "archive_retention", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter(name="logRules")
    def log_rules(self) -> Optional[pulumi.Input['LogsPolicyLogRulesArgs']]:
        """
        Log rules.
        """
        return pulumi.get(self, "log_rules")

    @log_rules.setter
    def log_rules(self, value: Optional[pulumi.Input['LogsPolicyLogRulesArgs']]):
        pulumi.set(self, "log_rules", value)

    @_builtins.property
    @pulumi.getter(name="logsPolicyId")
    def logs_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "logs_policy_id")

    @logs_policy_id.setter
    def logs_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logs_policy_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of policy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the logs instance.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="subsystemRule")
    def subsystem_rule(self) -> Optional[pulumi.Input['LogsPolicySubsystemRuleArgs']]:
        """
        Rule for matching with application.
        """
        return pulumi.get(self, "subsystem_rule")

    @subsystem_rule.setter
    def subsystem_rule(self, value: Optional[pulumi.Input['LogsPolicySubsystemRuleArgs']]):
        pulumi.set(self, "subsystem_rule", value)


@pulumi.input_type
class _LogsPolicyState:
    def __init__(__self__, *,
                 application_rule: Optional[pulumi.Input['LogsPolicyApplicationRuleArgs']] = None,
                 archive_retention: Optional[pulumi.Input['LogsPolicyArchiveRetentionArgs']] = None,
                 company_id: Optional[pulumi.Input[_builtins.float]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 deleted: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_rules: Optional[pulumi.Input['LogsPolicyLogRulesArgs']] = None,
                 logs_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 order: Optional[pulumi.Input[_builtins.float]] = None,
                 policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 priority: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 subsystem_rule: Optional[pulumi.Input['LogsPolicySubsystemRuleArgs']] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering LogsPolicy resources.
        :param pulumi.Input['LogsPolicyApplicationRuleArgs'] application_rule: Rule for matching with application.
        :param pulumi.Input['LogsPolicyArchiveRetentionArgs'] archive_retention: Archive retention definition.
        :param pulumi.Input[_builtins.float] company_id: Company ID.
        :param pulumi.Input[_builtins.str] created_at: Created at date at utc+0.
        :param pulumi.Input[_builtins.bool] deleted: Soft deletion flag.
        :param pulumi.Input[_builtins.str] description: Description of policy.
        :param pulumi.Input[_builtins.bool] enabled: Enabled flag.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the logs instance.
        :param pulumi.Input['LogsPolicyLogRulesArgs'] log_rules: Log rules.
        :param pulumi.Input[_builtins.str] name: Name of policy.
        :param pulumi.Input[_builtins.float] order: Order of policy in relation to other policies.
        :param pulumi.Input[_builtins.str] policy_id: Policy Id.
        :param pulumi.Input[_builtins.str] priority: The data pipeline sources that match the policy rules will go through.
        :param pulumi.Input[_builtins.str] region: The region of the logs instance.
        :param pulumi.Input['LogsPolicySubsystemRuleArgs'] subsystem_rule: Rule for matching with application.
        :param pulumi.Input[_builtins.str] updated_at: Updated at date at utc+0.
        """
        if application_rule is not None:
            pulumi.set(__self__, "application_rule", application_rule)
        if archive_retention is not None:
            pulumi.set(__self__, "archive_retention", archive_retention)
        if company_id is not None:
            pulumi.set(__self__, "company_id", company_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if deleted is not None:
            pulumi.set(__self__, "deleted", deleted)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if log_rules is not None:
            pulumi.set(__self__, "log_rules", log_rules)
        if logs_policy_id is not None:
            pulumi.set(__self__, "logs_policy_id", logs_policy_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if subsystem_rule is not None:
            pulumi.set(__self__, "subsystem_rule", subsystem_rule)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="applicationRule")
    def application_rule(self) -> Optional[pulumi.Input['LogsPolicyApplicationRuleArgs']]:
        """
        Rule for matching with application.
        """
        return pulumi.get(self, "application_rule")

    @application_rule.setter
    def application_rule(self, value: Optional[pulumi.Input['LogsPolicyApplicationRuleArgs']]):
        pulumi.set(self, "application_rule", value)

    @_builtins.property
    @pulumi.getter(name="archiveRetention")
    def archive_retention(self) -> Optional[pulumi.Input['LogsPolicyArchiveRetentionArgs']]:
        """
        Archive retention definition.
        """
        return pulumi.get(self, "archive_retention")

    @archive_retention.setter
    def archive_retention(self, value: Optional[pulumi.Input['LogsPolicyArchiveRetentionArgs']]):
        pulumi.set(self, "archive_retention", value)

    @_builtins.property
    @pulumi.getter(name="companyId")
    def company_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Company ID.
        """
        return pulumi.get(self, "company_id")

    @company_id.setter
    def company_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "company_id", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Created at date at utc+0.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def deleted(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Soft deletion flag.
        """
        return pulumi.get(self, "deleted")

    @deleted.setter
    def deleted(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "deleted", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enabled flag.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the logs instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="logRules")
    def log_rules(self) -> Optional[pulumi.Input['LogsPolicyLogRulesArgs']]:
        """
        Log rules.
        """
        return pulumi.get(self, "log_rules")

    @log_rules.setter
    def log_rules(self, value: Optional[pulumi.Input['LogsPolicyLogRulesArgs']]):
        pulumi.set(self, "log_rules", value)

    @_builtins.property
    @pulumi.getter(name="logsPolicyId")
    def logs_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "logs_policy_id")

    @logs_policy_id.setter
    def logs_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logs_policy_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of policy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Order of policy in relation to other policies.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "order", value)

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Policy Id.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "policy_id", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The data pipeline sources that match the policy rules will go through.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "priority", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the logs instance.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="subsystemRule")
    def subsystem_rule(self) -> Optional[pulumi.Input['LogsPolicySubsystemRuleArgs']]:
        """
        Rule for matching with application.
        """
        return pulumi.get(self, "subsystem_rule")

    @subsystem_rule.setter
    def subsystem_rule(self, value: Optional[pulumi.Input['LogsPolicySubsystemRuleArgs']]):
        pulumi.set(self, "subsystem_rule", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Updated at date at utc+0.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("ibm:index/logsPolicy:LogsPolicy")
class LogsPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_rule: Optional[pulumi.Input[Union['LogsPolicyApplicationRuleArgs', 'LogsPolicyApplicationRuleArgsDict']]] = None,
                 archive_retention: Optional[pulumi.Input[Union['LogsPolicyArchiveRetentionArgs', 'LogsPolicyArchiveRetentionArgsDict']]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_rules: Optional[pulumi.Input[Union['LogsPolicyLogRulesArgs', 'LogsPolicyLogRulesArgsDict']]] = None,
                 logs_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 priority: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 subsystem_rule: Optional[pulumi.Input[Union['LogsPolicySubsystemRuleArgs', 'LogsPolicySubsystemRuleArgsDict']]] = None,
                 __props__=None):
        """
        Create a LogsPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['LogsPolicyApplicationRuleArgs', 'LogsPolicyApplicationRuleArgsDict']] application_rule: Rule for matching with application.
        :param pulumi.Input[Union['LogsPolicyArchiveRetentionArgs', 'LogsPolicyArchiveRetentionArgsDict']] archive_retention: Archive retention definition.
        :param pulumi.Input[_builtins.str] description: Description of policy.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the logs instance.
        :param pulumi.Input[Union['LogsPolicyLogRulesArgs', 'LogsPolicyLogRulesArgsDict']] log_rules: Log rules.
        :param pulumi.Input[_builtins.str] name: Name of policy.
        :param pulumi.Input[_builtins.str] priority: The data pipeline sources that match the policy rules will go through.
        :param pulumi.Input[_builtins.str] region: The region of the logs instance.
        :param pulumi.Input[Union['LogsPolicySubsystemRuleArgs', 'LogsPolicySubsystemRuleArgsDict']] subsystem_rule: Rule for matching with application.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LogsPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a LogsPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LogsPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LogsPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_rule: Optional[pulumi.Input[Union['LogsPolicyApplicationRuleArgs', 'LogsPolicyApplicationRuleArgsDict']]] = None,
                 archive_retention: Optional[pulumi.Input[Union['LogsPolicyArchiveRetentionArgs', 'LogsPolicyArchiveRetentionArgsDict']]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_rules: Optional[pulumi.Input[Union['LogsPolicyLogRulesArgs', 'LogsPolicyLogRulesArgsDict']]] = None,
                 logs_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 priority: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 subsystem_rule: Optional[pulumi.Input[Union['LogsPolicySubsystemRuleArgs', 'LogsPolicySubsystemRuleArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LogsPolicyArgs.__new__(LogsPolicyArgs)

            __props__.__dict__["application_rule"] = application_rule
            __props__.__dict__["archive_retention"] = archive_retention
            __props__.__dict__["description"] = description
            __props__.__dict__["endpoint_type"] = endpoint_type
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["log_rules"] = log_rules
            __props__.__dict__["logs_policy_id"] = logs_policy_id
            __props__.__dict__["name"] = name
            if priority is None and not opts.urn:
                raise TypeError("Missing required property 'priority'")
            __props__.__dict__["priority"] = priority
            __props__.__dict__["region"] = region
            __props__.__dict__["subsystem_rule"] = subsystem_rule
            __props__.__dict__["company_id"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["deleted"] = None
            __props__.__dict__["enabled"] = None
            __props__.__dict__["order"] = None
            __props__.__dict__["policy_id"] = None
            __props__.__dict__["updated_at"] = None
        super(LogsPolicy, __self__).__init__(
            'ibm:index/logsPolicy:LogsPolicy',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            application_rule: Optional[pulumi.Input[Union['LogsPolicyApplicationRuleArgs', 'LogsPolicyApplicationRuleArgsDict']]] = None,
            archive_retention: Optional[pulumi.Input[Union['LogsPolicyArchiveRetentionArgs', 'LogsPolicyArchiveRetentionArgsDict']]] = None,
            company_id: Optional[pulumi.Input[_builtins.float]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            deleted: Optional[pulumi.Input[_builtins.bool]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            log_rules: Optional[pulumi.Input[Union['LogsPolicyLogRulesArgs', 'LogsPolicyLogRulesArgsDict']]] = None,
            logs_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            order: Optional[pulumi.Input[_builtins.float]] = None,
            policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            priority: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            subsystem_rule: Optional[pulumi.Input[Union['LogsPolicySubsystemRuleArgs', 'LogsPolicySubsystemRuleArgsDict']]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'LogsPolicy':
        """
        Get an existing LogsPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['LogsPolicyApplicationRuleArgs', 'LogsPolicyApplicationRuleArgsDict']] application_rule: Rule for matching with application.
        :param pulumi.Input[Union['LogsPolicyArchiveRetentionArgs', 'LogsPolicyArchiveRetentionArgsDict']] archive_retention: Archive retention definition.
        :param pulumi.Input[_builtins.float] company_id: Company ID.
        :param pulumi.Input[_builtins.str] created_at: Created at date at utc+0.
        :param pulumi.Input[_builtins.bool] deleted: Soft deletion flag.
        :param pulumi.Input[_builtins.str] description: Description of policy.
        :param pulumi.Input[_builtins.bool] enabled: Enabled flag.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the logs instance.
        :param pulumi.Input[Union['LogsPolicyLogRulesArgs', 'LogsPolicyLogRulesArgsDict']] log_rules: Log rules.
        :param pulumi.Input[_builtins.str] name: Name of policy.
        :param pulumi.Input[_builtins.float] order: Order of policy in relation to other policies.
        :param pulumi.Input[_builtins.str] policy_id: Policy Id.
        :param pulumi.Input[_builtins.str] priority: The data pipeline sources that match the policy rules will go through.
        :param pulumi.Input[_builtins.str] region: The region of the logs instance.
        :param pulumi.Input[Union['LogsPolicySubsystemRuleArgs', 'LogsPolicySubsystemRuleArgsDict']] subsystem_rule: Rule for matching with application.
        :param pulumi.Input[_builtins.str] updated_at: Updated at date at utc+0.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LogsPolicyState.__new__(_LogsPolicyState)

        __props__.__dict__["application_rule"] = application_rule
        __props__.__dict__["archive_retention"] = archive_retention
        __props__.__dict__["company_id"] = company_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["deleted"] = deleted
        __props__.__dict__["description"] = description
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["endpoint_type"] = endpoint_type
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["log_rules"] = log_rules
        __props__.__dict__["logs_policy_id"] = logs_policy_id
        __props__.__dict__["name"] = name
        __props__.__dict__["order"] = order
        __props__.__dict__["policy_id"] = policy_id
        __props__.__dict__["priority"] = priority
        __props__.__dict__["region"] = region
        __props__.__dict__["subsystem_rule"] = subsystem_rule
        __props__.__dict__["updated_at"] = updated_at
        return LogsPolicy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="applicationRule")
    def application_rule(self) -> pulumi.Output[Optional['outputs.LogsPolicyApplicationRule']]:
        """
        Rule for matching with application.
        """
        return pulumi.get(self, "application_rule")

    @_builtins.property
    @pulumi.getter(name="archiveRetention")
    def archive_retention(self) -> pulumi.Output[Optional['outputs.LogsPolicyArchiveRetention']]:
        """
        Archive retention definition.
        """
        return pulumi.get(self, "archive_retention")

    @_builtins.property
    @pulumi.getter(name="companyId")
    def company_id(self) -> pulumi.Output[_builtins.float]:
        """
        Company ID.
        """
        return pulumi.get(self, "company_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Created at date at utc+0.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def deleted(self) -> pulumi.Output[_builtins.bool]:
        """
        Soft deletion flag.
        """
        return pulumi.get(self, "deleted")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Description of policy.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        Enabled flag.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the logs instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="logRules")
    def log_rules(self) -> pulumi.Output[Optional['outputs.LogsPolicyLogRules']]:
        """
        Log rules.
        """
        return pulumi.get(self, "log_rules")

    @_builtins.property
    @pulumi.getter(name="logsPolicyId")
    def logs_policy_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "logs_policy_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of policy.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def order(self) -> pulumi.Output[_builtins.float]:
        """
        Order of policy in relation to other policies.
        """
        return pulumi.get(self, "order")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Output[_builtins.str]:
        """
        Policy Id.
        """
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> pulumi.Output[_builtins.str]:
        """
        The data pipeline sources that match the policy rules will go through.
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region of the logs instance.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="subsystemRule")
    def subsystem_rule(self) -> pulumi.Output[Optional['outputs.LogsPolicySubsystemRule']]:
        """
        Rule for matching with application.
        """
        return pulumi.get(self, "subsystem_rule")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Updated at date at utc+0.
        """
        return pulumi.get(self, "updated_at")

