# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['SchematicsAgentHealthArgs', 'SchematicsAgentHealth']

@pulumi.input_type
class SchematicsAgentHealthArgs:
    def __init__(__self__, *,
                 agent_id: pulumi.Input[_builtins.str],
                 force: Optional[pulumi.Input[_builtins.bool]] = None,
                 schematics_agent_health_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a SchematicsAgentHealth resource.
        :param pulumi.Input[_builtins.str] agent_id: Agent ID to get the details of agent.
        :param pulumi.Input[_builtins.bool] force: Equivalent to -force options in the command line, default is false.
        """
        pulumi.set(__self__, "agent_id", agent_id)
        if force is not None:
            pulumi.set(__self__, "force", force)
        if schematics_agent_health_id is not None:
            pulumi.set(__self__, "schematics_agent_health_id", schematics_agent_health_id)

    @_builtins.property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> pulumi.Input[_builtins.str]:
        """
        Agent ID to get the details of agent.
        """
        return pulumi.get(self, "agent_id")

    @agent_id.setter
    def agent_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "agent_id", value)

    @_builtins.property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Equivalent to -force options in the command line, default is false.
        """
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "force", value)

    @_builtins.property
    @pulumi.getter(name="schematicsAgentHealthId")
    def schematics_agent_health_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "schematics_agent_health_id")

    @schematics_agent_health_id.setter
    def schematics_agent_health_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "schematics_agent_health_id", value)


@pulumi.input_type
class _SchematicsAgentHealthState:
    def __init__(__self__, *,
                 agent_id: Optional[pulumi.Input[_builtins.str]] = None,
                 agent_version: Optional[pulumi.Input[_builtins.str]] = None,
                 force: Optional[pulumi.Input[_builtins.bool]] = None,
                 job_id: Optional[pulumi.Input[_builtins.str]] = None,
                 log_url: Optional[pulumi.Input[_builtins.str]] = None,
                 schematics_agent_health_id: Optional[pulumi.Input[_builtins.str]] = None,
                 status_code: Optional[pulumi.Input[_builtins.str]] = None,
                 status_message: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_by: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SchematicsAgentHealth resources.
        :param pulumi.Input[_builtins.str] agent_id: Agent ID to get the details of agent.
        :param pulumi.Input[_builtins.str] agent_version: Agent version.
        :param pulumi.Input[_builtins.bool] force: Equivalent to -force options in the command line, default is false.
        :param pulumi.Input[_builtins.str] job_id: Job Id.
        :param pulumi.Input[_builtins.str] log_url: URL to the full health-check job logs.
        :param pulumi.Input[_builtins.str] status_code: Final result of the health-check job.
        :param pulumi.Input[_builtins.str] status_message: The outcome of the health-check job, in a formatted log string.
        :param pulumi.Input[_builtins.str] updated_at: The agent health check job updation time.
        :param pulumi.Input[_builtins.str] updated_by: Email address of user who ran the agent health check job.
        """
        if agent_id is not None:
            pulumi.set(__self__, "agent_id", agent_id)
        if agent_version is not None:
            pulumi.set(__self__, "agent_version", agent_version)
        if force is not None:
            pulumi.set(__self__, "force", force)
        if job_id is not None:
            pulumi.set(__self__, "job_id", job_id)
        if log_url is not None:
            pulumi.set(__self__, "log_url", log_url)
        if schematics_agent_health_id is not None:
            pulumi.set(__self__, "schematics_agent_health_id", schematics_agent_health_id)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)
        if status_message is not None:
            pulumi.set(__self__, "status_message", status_message)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)

    @_builtins.property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Agent ID to get the details of agent.
        """
        return pulumi.get(self, "agent_id")

    @agent_id.setter
    def agent_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "agent_id", value)

    @_builtins.property
    @pulumi.getter(name="agentVersion")
    def agent_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Agent version.
        """
        return pulumi.get(self, "agent_version")

    @agent_version.setter
    def agent_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "agent_version", value)

    @_builtins.property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Equivalent to -force options in the command line, default is false.
        """
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "force", value)

    @_builtins.property
    @pulumi.getter(name="jobId")
    def job_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Job Id.
        """
        return pulumi.get(self, "job_id")

    @job_id.setter
    def job_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "job_id", value)

    @_builtins.property
    @pulumi.getter(name="logUrl")
    def log_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        URL to the full health-check job logs.
        """
        return pulumi.get(self, "log_url")

    @log_url.setter
    def log_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_url", value)

    @_builtins.property
    @pulumi.getter(name="schematicsAgentHealthId")
    def schematics_agent_health_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "schematics_agent_health_id")

    @schematics_agent_health_id.setter
    def schematics_agent_health_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "schematics_agent_health_id", value)

    @_builtins.property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Final result of the health-check job.
        """
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status_code", value)

    @_builtins.property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The outcome of the health-check job, in a formatted log string.
        """
        return pulumi.get(self, "status_message")

    @status_message.setter
    def status_message(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status_message", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The agent health check job updation time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Email address of user who ran the agent health check job.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_by", value)


@pulumi.type_token("ibm:index/schematicsAgentHealth:SchematicsAgentHealth")
class SchematicsAgentHealth(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agent_id: Optional[pulumi.Input[_builtins.str]] = None,
                 force: Optional[pulumi.Input[_builtins.bool]] = None,
                 schematics_agent_health_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a SchematicsAgentHealth resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] agent_id: Agent ID to get the details of agent.
        :param pulumi.Input[_builtins.bool] force: Equivalent to -force options in the command line, default is false.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SchematicsAgentHealthArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SchematicsAgentHealth resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SchematicsAgentHealthArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SchematicsAgentHealthArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agent_id: Optional[pulumi.Input[_builtins.str]] = None,
                 force: Optional[pulumi.Input[_builtins.bool]] = None,
                 schematics_agent_health_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SchematicsAgentHealthArgs.__new__(SchematicsAgentHealthArgs)

            if agent_id is None and not opts.urn:
                raise TypeError("Missing required property 'agent_id'")
            __props__.__dict__["agent_id"] = agent_id
            __props__.__dict__["force"] = force
            __props__.__dict__["schematics_agent_health_id"] = schematics_agent_health_id
            __props__.__dict__["agent_version"] = None
            __props__.__dict__["job_id"] = None
            __props__.__dict__["log_url"] = None
            __props__.__dict__["status_code"] = None
            __props__.__dict__["status_message"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["updated_by"] = None
        super(SchematicsAgentHealth, __self__).__init__(
            'ibm:index/schematicsAgentHealth:SchematicsAgentHealth',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            agent_id: Optional[pulumi.Input[_builtins.str]] = None,
            agent_version: Optional[pulumi.Input[_builtins.str]] = None,
            force: Optional[pulumi.Input[_builtins.bool]] = None,
            job_id: Optional[pulumi.Input[_builtins.str]] = None,
            log_url: Optional[pulumi.Input[_builtins.str]] = None,
            schematics_agent_health_id: Optional[pulumi.Input[_builtins.str]] = None,
            status_code: Optional[pulumi.Input[_builtins.str]] = None,
            status_message: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            updated_by: Optional[pulumi.Input[_builtins.str]] = None) -> 'SchematicsAgentHealth':
        """
        Get an existing SchematicsAgentHealth resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] agent_id: Agent ID to get the details of agent.
        :param pulumi.Input[_builtins.str] agent_version: Agent version.
        :param pulumi.Input[_builtins.bool] force: Equivalent to -force options in the command line, default is false.
        :param pulumi.Input[_builtins.str] job_id: Job Id.
        :param pulumi.Input[_builtins.str] log_url: URL to the full health-check job logs.
        :param pulumi.Input[_builtins.str] status_code: Final result of the health-check job.
        :param pulumi.Input[_builtins.str] status_message: The outcome of the health-check job, in a formatted log string.
        :param pulumi.Input[_builtins.str] updated_at: The agent health check job updation time.
        :param pulumi.Input[_builtins.str] updated_by: Email address of user who ran the agent health check job.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SchematicsAgentHealthState.__new__(_SchematicsAgentHealthState)

        __props__.__dict__["agent_id"] = agent_id
        __props__.__dict__["agent_version"] = agent_version
        __props__.__dict__["force"] = force
        __props__.__dict__["job_id"] = job_id
        __props__.__dict__["log_url"] = log_url
        __props__.__dict__["schematics_agent_health_id"] = schematics_agent_health_id
        __props__.__dict__["status_code"] = status_code
        __props__.__dict__["status_message"] = status_message
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["updated_by"] = updated_by
        return SchematicsAgentHealth(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> pulumi.Output[_builtins.str]:
        """
        Agent ID to get the details of agent.
        """
        return pulumi.get(self, "agent_id")

    @_builtins.property
    @pulumi.getter(name="agentVersion")
    def agent_version(self) -> pulumi.Output[_builtins.str]:
        """
        Agent version.
        """
        return pulumi.get(self, "agent_version")

    @_builtins.property
    @pulumi.getter
    def force(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Equivalent to -force options in the command line, default is false.
        """
        return pulumi.get(self, "force")

    @_builtins.property
    @pulumi.getter(name="jobId")
    def job_id(self) -> pulumi.Output[_builtins.str]:
        """
        Job Id.
        """
        return pulumi.get(self, "job_id")

    @_builtins.property
    @pulumi.getter(name="logUrl")
    def log_url(self) -> pulumi.Output[_builtins.str]:
        """
        URL to the full health-check job logs.
        """
        return pulumi.get(self, "log_url")

    @_builtins.property
    @pulumi.getter(name="schematicsAgentHealthId")
    def schematics_agent_health_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "schematics_agent_health_id")

    @_builtins.property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> pulumi.Output[_builtins.str]:
        """
        Final result of the health-check job.
        """
        return pulumi.get(self, "status_code")

    @_builtins.property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> pulumi.Output[_builtins.str]:
        """
        The outcome of the health-check job, in a formatted log string.
        """
        return pulumi.get(self, "status_message")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The agent health check job updation time.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> pulumi.Output[_builtins.str]:
        """
        Email address of user who ran the agent health check job.
        """
        return pulumi.get(self, "updated_by")

