# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetPiDisasterRecoveryLocationsResult',
    'AwaitableGetPiDisasterRecoveryLocationsResult',
    'get_pi_disaster_recovery_locations',
    'get_pi_disaster_recovery_locations_output',
]

@pulumi.output_type
class GetPiDisasterRecoveryLocationsResult:
    """
    A collection of values returned by getPiDisasterRecoveryLocations.
    """
    def __init__(__self__, disaster_recovery_locations=None, id=None):
        if disaster_recovery_locations and not isinstance(disaster_recovery_locations, list):
            raise TypeError("Expected argument 'disaster_recovery_locations' to be a list")
        pulumi.set(__self__, "disaster_recovery_locations", disaster_recovery_locations)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter(name="disasterRecoveryLocations")
    def disaster_recovery_locations(self) -> Sequence['outputs.GetPiDisasterRecoveryLocationsDisasterRecoveryLocationResult']:
        return pulumi.get(self, "disaster_recovery_locations")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")


class AwaitableGetPiDisasterRecoveryLocationsResult(GetPiDisasterRecoveryLocationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPiDisasterRecoveryLocationsResult(
            disaster_recovery_locations=self.disaster_recovery_locations,
            id=self.id)


def get_pi_disaster_recovery_locations(id: Optional[_builtins.str] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPiDisasterRecoveryLocationsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getPiDisasterRecoveryLocations:getPiDisasterRecoveryLocations', __args__, opts=opts, typ=GetPiDisasterRecoveryLocationsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetPiDisasterRecoveryLocationsResult(
        disaster_recovery_locations=pulumi.get(__ret__, 'disaster_recovery_locations'),
        id=pulumi.get(__ret__, 'id'))
def get_pi_disaster_recovery_locations_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPiDisasterRecoveryLocationsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getPiDisasterRecoveryLocations:getPiDisasterRecoveryLocations', __args__, opts=opts, typ=GetPiDisasterRecoveryLocationsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetPiDisasterRecoveryLocationsResult(
        disaster_recovery_locations=pulumi.get(__response__, 'disaster_recovery_locations'),
        id=pulumi.get(__response__, 'id')))
