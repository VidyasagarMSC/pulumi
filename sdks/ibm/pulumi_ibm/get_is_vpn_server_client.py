# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsVpnServerClientResult',
    'AwaitableGetIsVpnServerClientResult',
    'get_is_vpn_server_client',
    'get_is_vpn_server_client_output',
]

@pulumi.output_type
class GetIsVpnServerClientResult:
    """
    A collection of values returned by getIsVpnServerClient.
    """
    def __init__(__self__, client_ips=None, common_name=None, created_at=None, disconnected_at=None, href=None, id=None, identifier=None, remote_ips=None, remote_port=None, resource_type=None, status=None, username=None, vpn_server=None):
        if client_ips and not isinstance(client_ips, list):
            raise TypeError("Expected argument 'client_ips' to be a list")
        pulumi.set(__self__, "client_ips", client_ips)
        if common_name and not isinstance(common_name, str):
            raise TypeError("Expected argument 'common_name' to be a str")
        pulumi.set(__self__, "common_name", common_name)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if disconnected_at and not isinstance(disconnected_at, str):
            raise TypeError("Expected argument 'disconnected_at' to be a str")
        pulumi.set(__self__, "disconnected_at", disconnected_at)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identifier and not isinstance(identifier, str):
            raise TypeError("Expected argument 'identifier' to be a str")
        pulumi.set(__self__, "identifier", identifier)
        if remote_ips and not isinstance(remote_ips, list):
            raise TypeError("Expected argument 'remote_ips' to be a list")
        pulumi.set(__self__, "remote_ips", remote_ips)
        if remote_port and not isinstance(remote_port, float):
            raise TypeError("Expected argument 'remote_port' to be a float")
        pulumi.set(__self__, "remote_port", remote_port)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)
        if vpn_server and not isinstance(vpn_server, str):
            raise TypeError("Expected argument 'vpn_server' to be a str")
        pulumi.set(__self__, "vpn_server", vpn_server)

    @_builtins.property
    @pulumi.getter(name="clientIps")
    def client_ips(self) -> Sequence['outputs.GetIsVpnServerClientClientIpResult']:
        return pulumi.get(self, "client_ips")

    @_builtins.property
    @pulumi.getter(name="commonName")
    def common_name(self) -> _builtins.str:
        return pulumi.get(self, "common_name")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="disconnectedAt")
    def disconnected_at(self) -> _builtins.str:
        return pulumi.get(self, "disconnected_at")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def identifier(self) -> _builtins.str:
        return pulumi.get(self, "identifier")

    @_builtins.property
    @pulumi.getter(name="remoteIps")
    def remote_ips(self) -> Sequence['outputs.GetIsVpnServerClientRemoteIpResult']:
        return pulumi.get(self, "remote_ips")

    @_builtins.property
    @pulumi.getter(name="remotePort")
    def remote_port(self) -> _builtins.float:
        return pulumi.get(self, "remote_port")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def username(self) -> _builtins.str:
        return pulumi.get(self, "username")

    @_builtins.property
    @pulumi.getter(name="vpnServer")
    def vpn_server(self) -> _builtins.str:
        return pulumi.get(self, "vpn_server")


class AwaitableGetIsVpnServerClientResult(GetIsVpnServerClientResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsVpnServerClientResult(
            client_ips=self.client_ips,
            common_name=self.common_name,
            created_at=self.created_at,
            disconnected_at=self.disconnected_at,
            href=self.href,
            id=self.id,
            identifier=self.identifier,
            remote_ips=self.remote_ips,
            remote_port=self.remote_port,
            resource_type=self.resource_type,
            status=self.status,
            username=self.username,
            vpn_server=self.vpn_server)


def get_is_vpn_server_client(id: Optional[_builtins.str] = None,
                             identifier: Optional[_builtins.str] = None,
                             vpn_server: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsVpnServerClientResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['identifier'] = identifier
    __args__['vpnServer'] = vpn_server
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsVpnServerClient:getIsVpnServerClient', __args__, opts=opts, typ=GetIsVpnServerClientResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsVpnServerClientResult(
        client_ips=pulumi.get(__ret__, 'client_ips'),
        common_name=pulumi.get(__ret__, 'common_name'),
        created_at=pulumi.get(__ret__, 'created_at'),
        disconnected_at=pulumi.get(__ret__, 'disconnected_at'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        identifier=pulumi.get(__ret__, 'identifier'),
        remote_ips=pulumi.get(__ret__, 'remote_ips'),
        remote_port=pulumi.get(__ret__, 'remote_port'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        status=pulumi.get(__ret__, 'status'),
        username=pulumi.get(__ret__, 'username'),
        vpn_server=pulumi.get(__ret__, 'vpn_server'))
def get_is_vpn_server_client_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    identifier: Optional[pulumi.Input[_builtins.str]] = None,
                                    vpn_server: Optional[pulumi.Input[_builtins.str]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsVpnServerClientResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['identifier'] = identifier
    __args__['vpnServer'] = vpn_server
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsVpnServerClient:getIsVpnServerClient', __args__, opts=opts, typ=GetIsVpnServerClientResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsVpnServerClientResult(
        client_ips=pulumi.get(__response__, 'client_ips'),
        common_name=pulumi.get(__response__, 'common_name'),
        created_at=pulumi.get(__response__, 'created_at'),
        disconnected_at=pulumi.get(__response__, 'disconnected_at'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        identifier=pulumi.get(__response__, 'identifier'),
        remote_ips=pulumi.get(__response__, 'remote_ips'),
        remote_port=pulumi.get(__response__, 'remote_port'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        status=pulumi.get(__response__, 'status'),
        username=pulumi.get(__response__, 'username'),
        vpn_server=pulumi.get(__response__, 'vpn_server')))
