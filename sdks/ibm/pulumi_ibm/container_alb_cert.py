# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ContainerAlbCertArgs', 'ContainerAlbCert']

@pulumi.input_type
class ContainerAlbCertArgs:
    def __init__(__self__, *,
                 cert_crn: pulumi.Input[_builtins.str],
                 cluster_id: pulumi.Input[_builtins.str],
                 secret_name: pulumi.Input[_builtins.str],
                 container_alb_cert_id: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 persistence: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['ContainerAlbCertTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a ContainerAlbCert resource.
        :param pulumi.Input[_builtins.str] cert_crn: Certificate CRN id
        :param pulumi.Input[_builtins.str] cluster_id: Cluster ID
        :param pulumi.Input[_builtins.str] secret_name: Secret name
        :param pulumi.Input[_builtins.str] namespace: Namespace of the secret
        :param pulumi.Input[_builtins.bool] persistence: Persistence of secret
        :param pulumi.Input[_builtins.str] region: region name
        """
        pulumi.set(__self__, "cert_crn", cert_crn)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "secret_name", secret_name)
        if container_alb_cert_id is not None:
            pulumi.set(__self__, "container_alb_cert_id", container_alb_cert_id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)
        if region is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""region is deprecated: Deprecated""")
        if region is not None:
            pulumi.set(__self__, "region", region)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="certCrn")
    def cert_crn(self) -> pulumi.Input[_builtins.str]:
        """
        Certificate CRN id
        """
        return pulumi.get(self, "cert_crn")

    @cert_crn.setter
    def cert_crn(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cert_crn", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        Cluster ID
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[_builtins.str]:
        """
        Secret name
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "secret_name", value)

    @_builtins.property
    @pulumi.getter(name="containerAlbCertId")
    def container_alb_cert_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_alb_cert_id")

    @container_alb_cert_id.setter
    def container_alb_cert_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_alb_cert_id", value)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Namespace of the secret
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter
    def persistence(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Persistence of secret
        """
        return pulumi.get(self, "persistence")

    @persistence.setter
    def persistence(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "persistence", value)

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        region name
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ContainerAlbCertTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ContainerAlbCertTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _ContainerAlbCertState:
    def __init__(__self__, *,
                 cert_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 cloud_cert_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 container_alb_cert_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 expires_on: Optional[pulumi.Input[_builtins.str]] = None,
                 issuer_name: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 persistence: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_name: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['ContainerAlbCertTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering ContainerAlbCert resources.
        :param pulumi.Input[_builtins.str] cert_crn: Certificate CRN id
        :param pulumi.Input[_builtins.str] cloud_cert_instance_id: cloud cert instance ID
        :param pulumi.Input[_builtins.str] cluster_id: Cluster ID
        :param pulumi.Input[_builtins.str] domain_name: Domain name
        :param pulumi.Input[_builtins.str] expires_on: Certificate expaire on date
        :param pulumi.Input[_builtins.str] issuer_name: certificate issuer name
        :param pulumi.Input[_builtins.str] namespace: Namespace of the secret
        :param pulumi.Input[_builtins.bool] persistence: Persistence of secret
        :param pulumi.Input[_builtins.str] region: region name
        :param pulumi.Input[_builtins.str] secret_name: Secret name
        :param pulumi.Input[_builtins.str] status: Secret Status
        """
        if cert_crn is not None:
            pulumi.set(__self__, "cert_crn", cert_crn)
        if cloud_cert_instance_id is not None:
            pulumi.set(__self__, "cloud_cert_instance_id", cloud_cert_instance_id)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if container_alb_cert_id is not None:
            pulumi.set(__self__, "container_alb_cert_id", container_alb_cert_id)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if expires_on is not None:
            pulumi.set(__self__, "expires_on", expires_on)
        if issuer_name is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""issuer_name is deprecated: Deprecated""")
        if issuer_name is not None:
            pulumi.set(__self__, "issuer_name", issuer_name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)
        if region is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""region is deprecated: Deprecated""")
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="certCrn")
    def cert_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Certificate CRN id
        """
        return pulumi.get(self, "cert_crn")

    @cert_crn.setter
    def cert_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cert_crn", value)

    @_builtins.property
    @pulumi.getter(name="cloudCertInstanceId")
    def cloud_cert_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        cloud cert instance ID
        """
        return pulumi.get(self, "cloud_cert_instance_id")

    @cloud_cert_instance_id.setter
    def cloud_cert_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cloud_cert_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cluster ID
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="containerAlbCertId")
    def container_alb_cert_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_alb_cert_id")

    @container_alb_cert_id.setter
    def container_alb_cert_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_alb_cert_id", value)

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Domain name
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_name", value)

    @_builtins.property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Certificate expaire on date
        """
        return pulumi.get(self, "expires_on")

    @expires_on.setter
    def expires_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expires_on", value)

    @_builtins.property
    @pulumi.getter(name="issuerName")
    @_utilities.deprecated("""Deprecated""")
    def issuer_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        certificate issuer name
        """
        return pulumi.get(self, "issuer_name")

    @issuer_name.setter
    def issuer_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "issuer_name", value)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Namespace of the secret
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter
    def persistence(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Persistence of secret
        """
        return pulumi.get(self, "persistence")

    @persistence.setter
    def persistence(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "persistence", value)

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        region name
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Secret name
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_name", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Secret Status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ContainerAlbCertTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ContainerAlbCertTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/containerAlbCert:ContainerAlbCert")
class ContainerAlbCert(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cert_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 container_alb_cert_id: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 persistence: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_name: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['ContainerAlbCertTimeoutsArgs', 'ContainerAlbCertTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a ContainerAlbCert resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cert_crn: Certificate CRN id
        :param pulumi.Input[_builtins.str] cluster_id: Cluster ID
        :param pulumi.Input[_builtins.str] namespace: Namespace of the secret
        :param pulumi.Input[_builtins.bool] persistence: Persistence of secret
        :param pulumi.Input[_builtins.str] region: region name
        :param pulumi.Input[_builtins.str] secret_name: Secret name
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ContainerAlbCertArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ContainerAlbCert resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ContainerAlbCertArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ContainerAlbCertArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cert_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 container_alb_cert_id: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 persistence: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_name: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['ContainerAlbCertTimeoutsArgs', 'ContainerAlbCertTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ContainerAlbCertArgs.__new__(ContainerAlbCertArgs)

            if cert_crn is None and not opts.urn:
                raise TypeError("Missing required property 'cert_crn'")
            __props__.__dict__["cert_crn"] = cert_crn
            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["container_alb_cert_id"] = container_alb_cert_id
            __props__.__dict__["namespace"] = namespace
            __props__.__dict__["persistence"] = persistence
            __props__.__dict__["region"] = region
            if secret_name is None and not opts.urn:
                raise TypeError("Missing required property 'secret_name'")
            __props__.__dict__["secret_name"] = secret_name
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["cloud_cert_instance_id"] = None
            __props__.__dict__["domain_name"] = None
            __props__.__dict__["expires_on"] = None
            __props__.__dict__["issuer_name"] = None
            __props__.__dict__["status"] = None
        super(ContainerAlbCert, __self__).__init__(
            'ibm:index/containerAlbCert:ContainerAlbCert',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cert_crn: Optional[pulumi.Input[_builtins.str]] = None,
            cloud_cert_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            container_alb_cert_id: Optional[pulumi.Input[_builtins.str]] = None,
            domain_name: Optional[pulumi.Input[_builtins.str]] = None,
            expires_on: Optional[pulumi.Input[_builtins.str]] = None,
            issuer_name: Optional[pulumi.Input[_builtins.str]] = None,
            namespace: Optional[pulumi.Input[_builtins.str]] = None,
            persistence: Optional[pulumi.Input[_builtins.bool]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            secret_name: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['ContainerAlbCertTimeoutsArgs', 'ContainerAlbCertTimeoutsArgsDict']]] = None) -> 'ContainerAlbCert':
        """
        Get an existing ContainerAlbCert resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cert_crn: Certificate CRN id
        :param pulumi.Input[_builtins.str] cloud_cert_instance_id: cloud cert instance ID
        :param pulumi.Input[_builtins.str] cluster_id: Cluster ID
        :param pulumi.Input[_builtins.str] domain_name: Domain name
        :param pulumi.Input[_builtins.str] expires_on: Certificate expaire on date
        :param pulumi.Input[_builtins.str] issuer_name: certificate issuer name
        :param pulumi.Input[_builtins.str] namespace: Namespace of the secret
        :param pulumi.Input[_builtins.bool] persistence: Persistence of secret
        :param pulumi.Input[_builtins.str] region: region name
        :param pulumi.Input[_builtins.str] secret_name: Secret name
        :param pulumi.Input[_builtins.str] status: Secret Status
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ContainerAlbCertState.__new__(_ContainerAlbCertState)

        __props__.__dict__["cert_crn"] = cert_crn
        __props__.__dict__["cloud_cert_instance_id"] = cloud_cert_instance_id
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["container_alb_cert_id"] = container_alb_cert_id
        __props__.__dict__["domain_name"] = domain_name
        __props__.__dict__["expires_on"] = expires_on
        __props__.__dict__["issuer_name"] = issuer_name
        __props__.__dict__["namespace"] = namespace
        __props__.__dict__["persistence"] = persistence
        __props__.__dict__["region"] = region
        __props__.__dict__["secret_name"] = secret_name
        __props__.__dict__["status"] = status
        __props__.__dict__["timeouts"] = timeouts
        return ContainerAlbCert(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="certCrn")
    def cert_crn(self) -> pulumi.Output[_builtins.str]:
        """
        Certificate CRN id
        """
        return pulumi.get(self, "cert_crn")

    @_builtins.property
    @pulumi.getter(name="cloudCertInstanceId")
    def cloud_cert_instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        cloud cert instance ID
        """
        return pulumi.get(self, "cloud_cert_instance_id")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        Cluster ID
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="containerAlbCertId")
    def container_alb_cert_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "container_alb_cert_id")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Output[_builtins.str]:
        """
        Domain name
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> pulumi.Output[_builtins.str]:
        """
        Certificate expaire on date
        """
        return pulumi.get(self, "expires_on")

    @_builtins.property
    @pulumi.getter(name="issuerName")
    @_utilities.deprecated("""Deprecated""")
    def issuer_name(self) -> pulumi.Output[_builtins.str]:
        """
        certificate issuer name
        """
        return pulumi.get(self, "issuer_name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Namespace of the secret
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def persistence(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Persistence of secret
        """
        return pulumi.get(self, "persistence")

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        region name
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Output[_builtins.str]:
        """
        Secret name
        """
        return pulumi.get(self, "secret_name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Secret Status
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.ContainerAlbCertTimeouts']]:
        return pulumi.get(self, "timeouts")

