# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['CisWafPackageArgs', 'CisWafPackage']

@pulumi.input_type
class CisWafPackageArgs:
    def __init__(__self__, *,
                 action_mode: pulumi.Input[_builtins.str],
                 cis_id: pulumi.Input[_builtins.str],
                 domain_id: pulumi.Input[_builtins.str],
                 package_id: pulumi.Input[_builtins.str],
                 sensitivity: pulumi.Input[_builtins.str],
                 cis_waf_package_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CisWafPackage resource.
        :param pulumi.Input[_builtins.str] action_mode: WAF pakcage action mode
        :param pulumi.Input[_builtins.str] cis_id: CIS Intance CRN
        :param pulumi.Input[_builtins.str] domain_id: CIS Domain ID
        :param pulumi.Input[_builtins.str] package_id: WAF pakcage ID
        :param pulumi.Input[_builtins.str] sensitivity: WAF pakcage sensitivity
        """
        pulumi.set(__self__, "action_mode", action_mode)
        pulumi.set(__self__, "cis_id", cis_id)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "package_id", package_id)
        pulumi.set(__self__, "sensitivity", sensitivity)
        if cis_waf_package_id is not None:
            pulumi.set(__self__, "cis_waf_package_id", cis_waf_package_id)

    @_builtins.property
    @pulumi.getter(name="actionMode")
    def action_mode(self) -> pulumi.Input[_builtins.str]:
        """
        WAF pakcage action mode
        """
        return pulumi.get(self, "action_mode")

    @action_mode.setter
    def action_mode(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "action_mode", value)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Input[_builtins.str]:
        """
        CIS Intance CRN
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Input[_builtins.str]:
        """
        CIS Domain ID
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[_builtins.str]:
        """
        WAF pakcage ID
        """
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "package_id", value)

    @_builtins.property
    @pulumi.getter
    def sensitivity(self) -> pulumi.Input[_builtins.str]:
        """
        WAF pakcage sensitivity
        """
        return pulumi.get(self, "sensitivity")

    @sensitivity.setter
    def sensitivity(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "sensitivity", value)

    @_builtins.property
    @pulumi.getter(name="cisWafPackageId")
    def cis_waf_package_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_waf_package_id")

    @cis_waf_package_id.setter
    def cis_waf_package_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_waf_package_id", value)


@pulumi.input_type
class _CisWafPackageState:
    def __init__(__self__, *,
                 action_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_waf_package_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 detection_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 package_id: Optional[pulumi.Input[_builtins.str]] = None,
                 sensitivity: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CisWafPackage resources.
        :param pulumi.Input[_builtins.str] action_mode: WAF pakcage action mode
        :param pulumi.Input[_builtins.str] cis_id: CIS Intance CRN
        :param pulumi.Input[_builtins.str] description: WAF package description
        :param pulumi.Input[_builtins.str] detection_mode: WAF pakcage detection mode
        :param pulumi.Input[_builtins.str] domain_id: CIS Domain ID
        :param pulumi.Input[_builtins.str] name: WAF pakcage name
        :param pulumi.Input[_builtins.str] package_id: WAF pakcage ID
        :param pulumi.Input[_builtins.str] sensitivity: WAF pakcage sensitivity
        """
        if action_mode is not None:
            pulumi.set(__self__, "action_mode", action_mode)
        if cis_id is not None:
            pulumi.set(__self__, "cis_id", cis_id)
        if cis_waf_package_id is not None:
            pulumi.set(__self__, "cis_waf_package_id", cis_waf_package_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if package_id is not None:
            pulumi.set(__self__, "package_id", package_id)
        if sensitivity is not None:
            pulumi.set(__self__, "sensitivity", sensitivity)

    @_builtins.property
    @pulumi.getter(name="actionMode")
    def action_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        WAF pakcage action mode
        """
        return pulumi.get(self, "action_mode")

    @action_mode.setter
    def action_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action_mode", value)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CIS Intance CRN
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter(name="cisWafPackageId")
    def cis_waf_package_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_waf_package_id")

    @cis_waf_package_id.setter
    def cis_waf_package_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_waf_package_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        WAF package description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        WAF pakcage detection mode
        """
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "detection_mode", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CIS Domain ID
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        WAF pakcage name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="packageId")
    def package_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        WAF pakcage ID
        """
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "package_id", value)

    @_builtins.property
    @pulumi.getter
    def sensitivity(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        WAF pakcage sensitivity
        """
        return pulumi.get(self, "sensitivity")

    @sensitivity.setter
    def sensitivity(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sensitivity", value)


@pulumi.type_token("ibm:index/cisWafPackage:CisWafPackage")
class CisWafPackage(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_waf_package_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 package_id: Optional[pulumi.Input[_builtins.str]] = None,
                 sensitivity: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a CisWafPackage resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action_mode: WAF pakcage action mode
        :param pulumi.Input[_builtins.str] cis_id: CIS Intance CRN
        :param pulumi.Input[_builtins.str] domain_id: CIS Domain ID
        :param pulumi.Input[_builtins.str] package_id: WAF pakcage ID
        :param pulumi.Input[_builtins.str] sensitivity: WAF pakcage sensitivity
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CisWafPackageArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CisWafPackage resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CisWafPackageArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CisWafPackageArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_waf_package_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 package_id: Optional[pulumi.Input[_builtins.str]] = None,
                 sensitivity: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CisWafPackageArgs.__new__(CisWafPackageArgs)

            if action_mode is None and not opts.urn:
                raise TypeError("Missing required property 'action_mode'")
            __props__.__dict__["action_mode"] = action_mode
            if cis_id is None and not opts.urn:
                raise TypeError("Missing required property 'cis_id'")
            __props__.__dict__["cis_id"] = cis_id
            __props__.__dict__["cis_waf_package_id"] = cis_waf_package_id
            if domain_id is None and not opts.urn:
                raise TypeError("Missing required property 'domain_id'")
            __props__.__dict__["domain_id"] = domain_id
            if package_id is None and not opts.urn:
                raise TypeError("Missing required property 'package_id'")
            __props__.__dict__["package_id"] = package_id
            if sensitivity is None and not opts.urn:
                raise TypeError("Missing required property 'sensitivity'")
            __props__.__dict__["sensitivity"] = sensitivity
            __props__.__dict__["description"] = None
            __props__.__dict__["detection_mode"] = None
            __props__.__dict__["name"] = None
        super(CisWafPackage, __self__).__init__(
            'ibm:index/cisWafPackage:CisWafPackage',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action_mode: Optional[pulumi.Input[_builtins.str]] = None,
            cis_id: Optional[pulumi.Input[_builtins.str]] = None,
            cis_waf_package_id: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            detection_mode: Optional[pulumi.Input[_builtins.str]] = None,
            domain_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            package_id: Optional[pulumi.Input[_builtins.str]] = None,
            sensitivity: Optional[pulumi.Input[_builtins.str]] = None) -> 'CisWafPackage':
        """
        Get an existing CisWafPackage resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action_mode: WAF pakcage action mode
        :param pulumi.Input[_builtins.str] cis_id: CIS Intance CRN
        :param pulumi.Input[_builtins.str] description: WAF package description
        :param pulumi.Input[_builtins.str] detection_mode: WAF pakcage detection mode
        :param pulumi.Input[_builtins.str] domain_id: CIS Domain ID
        :param pulumi.Input[_builtins.str] name: WAF pakcage name
        :param pulumi.Input[_builtins.str] package_id: WAF pakcage ID
        :param pulumi.Input[_builtins.str] sensitivity: WAF pakcage sensitivity
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CisWafPackageState.__new__(_CisWafPackageState)

        __props__.__dict__["action_mode"] = action_mode
        __props__.__dict__["cis_id"] = cis_id
        __props__.__dict__["cis_waf_package_id"] = cis_waf_package_id
        __props__.__dict__["description"] = description
        __props__.__dict__["detection_mode"] = detection_mode
        __props__.__dict__["domain_id"] = domain_id
        __props__.__dict__["name"] = name
        __props__.__dict__["package_id"] = package_id
        __props__.__dict__["sensitivity"] = sensitivity
        return CisWafPackage(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="actionMode")
    def action_mode(self) -> pulumi.Output[_builtins.str]:
        """
        WAF pakcage action mode
        """
        return pulumi.get(self, "action_mode")

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Output[_builtins.str]:
        """
        CIS Intance CRN
        """
        return pulumi.get(self, "cis_id")

    @_builtins.property
    @pulumi.getter(name="cisWafPackageId")
    def cis_waf_package_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cis_waf_package_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        WAF package description
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> pulumi.Output[_builtins.str]:
        """
        WAF pakcage detection mode
        """
        return pulumi.get(self, "detection_mode")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Output[_builtins.str]:
        """
        CIS Domain ID
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        WAF pakcage name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Output[_builtins.str]:
        """
        WAF pakcage ID
        """
        return pulumi.get(self, "package_id")

    @_builtins.property
    @pulumi.getter
    def sensitivity(self) -> pulumi.Output[_builtins.str]:
        """
        WAF pakcage sensitivity
        """
        return pulumi.get(self, "sensitivity")

