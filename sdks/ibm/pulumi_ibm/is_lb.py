# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsLbArgs', 'IsLb']

@pulumi.input_type
class IsLbArgs:
    def __init__(__self__, *,
                 subnets: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 dns: Optional[pulumi.Input['IsLbDnsArgs']] = None,
                 is_lb_id: Optional[pulumi.Input[_builtins.str]] = None,
                 logging: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 route_mode: Optional[pulumi.Input[_builtins.bool]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['IsLbTimeoutsArgs']] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a IsLb resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] subnets: Load Balancer subnets list
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input['IsLbDnsArgs'] dns: The DNS configuration for this load balancer.
        :param pulumi.Input[_builtins.bool] logging: Logging of Load Balancer
        :param pulumi.Input[_builtins.str] name: Load Balancer name
        :param pulumi.Input[_builtins.str] profile: The profile to use for this load balancer.
        :param pulumi.Input[_builtins.bool] route_mode: Indicates whether route mode is enabled for this load balancer
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: Load Balancer securitygroups list
        :param pulumi.Input[_builtins.str] type: Load Balancer type
        """
        pulumi.set(__self__, "subnets", subnets)
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if is_lb_id is not None:
            pulumi.set(__self__, "is_lb_id", is_lb_id)
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if route_mode is not None:
            pulumi.set(__self__, "route_mode", route_mode)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Load Balancer subnets list
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "subnets", value)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter
    def dns(self) -> Optional[pulumi.Input['IsLbDnsArgs']]:
        """
        The DNS configuration for this load balancer.
        """
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: Optional[pulumi.Input['IsLbDnsArgs']]):
        pulumi.set(self, "dns", value)

    @_builtins.property
    @pulumi.getter(name="isLbId")
    def is_lb_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_lb_id")

    @is_lb_id.setter
    def is_lb_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_lb_id", value)

    @_builtins.property
    @pulumi.getter
    def logging(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Logging of Load Balancer
        """
        return pulumi.get(self, "logging")

    @logging.setter
    def logging(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "logging", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Load Balancer name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The profile to use for this load balancer.
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "profile", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="routeMode")
    def route_mode(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether route mode is enabled for this load balancer
        """
        return pulumi.get(self, "route_mode")

    @route_mode.setter
    def route_mode(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "route_mode", value)

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Load Balancer securitygroups list
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_groups", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsLbTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsLbTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Load Balancer type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _IsLbState:
    def __init__(__self__, *,
                 access_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 attached_load_balancer_pool_members: Optional[pulumi.Input[Sequence[pulumi.Input['IsLbAttachedLoadBalancerPoolMemberArgs']]]] = None,
                 availability: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 dns: Optional[pulumi.Input['IsLbDnsArgs']] = None,
                 failsafe_policy_actions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_groups_supported: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_lb_id: Optional[pulumi.Input[_builtins.str]] = None,
                 logging: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 operating_status: Optional[pulumi.Input[_builtins.str]] = None,
                 private_ip: Optional[pulumi.Input[Sequence[pulumi.Input['IsLbPrivateIpArgs']]]] = None,
                 private_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 public_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 resource_controller_url: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_name: Optional[pulumi.Input[_builtins.str]] = None,
                 route_mode: Optional[pulumi.Input[_builtins.bool]] = None,
                 security_group_supported: Optional[pulumi.Input[_builtins.bool]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 source_ip_session_persistence_supported: Optional[pulumi.Input[_builtins.bool]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['IsLbTimeoutsArgs']] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 udp_supported: Optional[pulumi.Input[_builtins.bool]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsLb resources.
        :param pulumi.Input[_builtins.str] access_mode: The access mode of this load balancer
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[Sequence[pulumi.Input['IsLbAttachedLoadBalancerPoolMemberArgs']]] attached_load_balancer_pool_members: The load balancer pool members attached to this load balancer.
        :param pulumi.Input[_builtins.str] availability: The availability of this load balancer
        :param pulumi.Input[_builtins.str] crn: The CRN for this Load Balancer
        :param pulumi.Input['IsLbDnsArgs'] dns: The DNS configuration for this load balancer.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] failsafe_policy_actions: The supported `failsafe_policy.action` values for this load balancer's pools.
        :param pulumi.Input[_builtins.bool] instance_groups_supported: Indicates whether this load balancer supports instance groups.
        :param pulumi.Input[_builtins.bool] logging: Logging of Load Balancer
        :param pulumi.Input[_builtins.str] name: Load Balancer name
        :param pulumi.Input[Sequence[pulumi.Input['IsLbPrivateIpArgs']]] private_ip: The private IP addresses assigned to this load balancer.
        :param pulumi.Input[_builtins.str] profile: The profile to use for this load balancer.
        :param pulumi.Input[_builtins.str] resource_controller_url: The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        :param pulumi.Input[_builtins.str] resource_group_name: The resource group name in which resource is provisioned
        :param pulumi.Input[_builtins.str] resource_name: The name of the resource
        :param pulumi.Input[_builtins.bool] route_mode: Indicates whether route mode is enabled for this load balancer
        :param pulumi.Input[_builtins.bool] security_group_supported: Security Group Supported for this Load Balancer
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: Load Balancer securitygroups list
        :param pulumi.Input[_builtins.bool] source_ip_session_persistence_supported: Indicates whether this load balancer supports source IP session persistence.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] subnets: Load Balancer subnets list
        :param pulumi.Input[_builtins.str] type: Load Balancer type
        :param pulumi.Input[_builtins.bool] udp_supported: Indicates whether this load balancer supports UDP.
        """
        if access_mode is not None:
            pulumi.set(__self__, "access_mode", access_mode)
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if attached_load_balancer_pool_members is not None:
            pulumi.set(__self__, "attached_load_balancer_pool_members", attached_load_balancer_pool_members)
        if availability is not None:
            pulumi.set(__self__, "availability", availability)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if failsafe_policy_actions is not None:
            pulumi.set(__self__, "failsafe_policy_actions", failsafe_policy_actions)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if instance_groups_supported is not None:
            pulumi.set(__self__, "instance_groups_supported", instance_groups_supported)
        if is_lb_id is not None:
            pulumi.set(__self__, "is_lb_id", is_lb_id)
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operating_status is not None:
            pulumi.set(__self__, "operating_status", operating_status)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if private_ips is not None:
            pulumi.set(__self__, "private_ips", private_ips)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if public_ips is not None:
            pulumi.set(__self__, "public_ips", public_ips)
        if resource_controller_url is not None:
            pulumi.set(__self__, "resource_controller_url", resource_controller_url)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if route_mode is not None:
            pulumi.set(__self__, "route_mode", route_mode)
        if security_group_supported is not None:
            pulumi.set(__self__, "security_group_supported", security_group_supported)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if source_ip_session_persistence_supported is not None:
            pulumi.set(__self__, "source_ip_session_persistence_supported", source_ip_session_persistence_supported)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if udp_supported is not None:
            pulumi.set(__self__, "udp_supported", udp_supported)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="accessMode")
    def access_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The access mode of this load balancer
        """
        return pulumi.get(self, "access_mode")

    @access_mode.setter
    def access_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_mode", value)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter(name="attachedLoadBalancerPoolMembers")
    def attached_load_balancer_pool_members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsLbAttachedLoadBalancerPoolMemberArgs']]]]:
        """
        The load balancer pool members attached to this load balancer.
        """
        return pulumi.get(self, "attached_load_balancer_pool_members")

    @attached_load_balancer_pool_members.setter
    def attached_load_balancer_pool_members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsLbAttachedLoadBalancerPoolMemberArgs']]]]):
        pulumi.set(self, "attached_load_balancer_pool_members", value)

    @_builtins.property
    @pulumi.getter
    def availability(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The availability of this load balancer
        """
        return pulumi.get(self, "availability")

    @availability.setter
    def availability(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "availability", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN for this Load Balancer
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter
    def dns(self) -> Optional[pulumi.Input['IsLbDnsArgs']]:
        """
        The DNS configuration for this load balancer.
        """
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: Optional[pulumi.Input['IsLbDnsArgs']]):
        pulumi.set(self, "dns", value)

    @_builtins.property
    @pulumi.getter(name="failsafePolicyActions")
    def failsafe_policy_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The supported `failsafe_policy.action` values for this load balancer's pools.
        """
        return pulumi.get(self, "failsafe_policy_actions")

    @failsafe_policy_actions.setter
    def failsafe_policy_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "failsafe_policy_actions", value)

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hostname", value)

    @_builtins.property
    @pulumi.getter(name="instanceGroupsSupported")
    def instance_groups_supported(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether this load balancer supports instance groups.
        """
        return pulumi.get(self, "instance_groups_supported")

    @instance_groups_supported.setter
    def instance_groups_supported(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "instance_groups_supported", value)

    @_builtins.property
    @pulumi.getter(name="isLbId")
    def is_lb_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_lb_id")

    @is_lb_id.setter
    def is_lb_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_lb_id", value)

    @_builtins.property
    @pulumi.getter
    def logging(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Logging of Load Balancer
        """
        return pulumi.get(self, "logging")

    @logging.setter
    def logging(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "logging", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Load Balancer name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="operatingStatus")
    def operating_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "operating_status")

    @operating_status.setter
    def operating_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "operating_status", value)

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsLbPrivateIpArgs']]]]:
        """
        The private IP addresses assigned to this load balancer.
        """
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsLbPrivateIpArgs']]]]):
        pulumi.set(self, "private_ip", value)

    @_builtins.property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "private_ips")

    @private_ips.setter
    def private_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "private_ips", value)

    @_builtins.property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The profile to use for this load balancer.
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "profile", value)

    @_builtins.property
    @pulumi.getter(name="publicIps")
    def public_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "public_ips")

    @public_ips.setter
    def public_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "public_ips", value)

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        """
        return pulumi.get(self, "resource_controller_url")

    @resource_controller_url.setter
    def resource_controller_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_controller_url", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource group name in which resource is provisioned
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_name", value)

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_name", value)

    @_builtins.property
    @pulumi.getter(name="routeMode")
    def route_mode(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether route mode is enabled for this load balancer
        """
        return pulumi.get(self, "route_mode")

    @route_mode.setter
    def route_mode(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "route_mode", value)

    @_builtins.property
    @pulumi.getter(name="securityGroupSupported")
    def security_group_supported(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Security Group Supported for this Load Balancer
        """
        return pulumi.get(self, "security_group_supported")

    @security_group_supported.setter
    def security_group_supported(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "security_group_supported", value)

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Load Balancer securitygroups list
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_groups", value)

    @_builtins.property
    @pulumi.getter(name="sourceIpSessionPersistenceSupported")
    def source_ip_session_persistence_supported(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether this load balancer supports source IP session persistence.
        """
        return pulumi.get(self, "source_ip_session_persistence_supported")

    @source_ip_session_persistence_supported.setter
    def source_ip_session_persistence_supported(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "source_ip_session_persistence_supported", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Load Balancer subnets list
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "subnets", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsLbTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsLbTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Load Balancer type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="udpSupported")
    def udp_supported(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether this load balancer supports UDP.
        """
        return pulumi.get(self, "udp_supported")

    @udp_supported.setter
    def udp_supported(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "udp_supported", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


@pulumi.type_token("ibm:index/isLb:IsLb")
class IsLb(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 dns: Optional[pulumi.Input[Union['IsLbDnsArgs', 'IsLbDnsArgsDict']]] = None,
                 is_lb_id: Optional[pulumi.Input[_builtins.str]] = None,
                 logging: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 route_mode: Optional[pulumi.Input[_builtins.bool]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsLbTimeoutsArgs', 'IsLbTimeoutsArgsDict']]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IsLb resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[Union['IsLbDnsArgs', 'IsLbDnsArgsDict']] dns: The DNS configuration for this load balancer.
        :param pulumi.Input[_builtins.bool] logging: Logging of Load Balancer
        :param pulumi.Input[_builtins.str] name: Load Balancer name
        :param pulumi.Input[_builtins.str] profile: The profile to use for this load balancer.
        :param pulumi.Input[_builtins.bool] route_mode: Indicates whether route mode is enabled for this load balancer
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: Load Balancer securitygroups list
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] subnets: Load Balancer subnets list
        :param pulumi.Input[_builtins.str] type: Load Balancer type
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsLbArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsLb resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsLbArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsLbArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 dns: Optional[pulumi.Input[Union['IsLbDnsArgs', 'IsLbDnsArgsDict']]] = None,
                 is_lb_id: Optional[pulumi.Input[_builtins.str]] = None,
                 logging: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 route_mode: Optional[pulumi.Input[_builtins.bool]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsLbTimeoutsArgs', 'IsLbTimeoutsArgsDict']]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsLbArgs.__new__(IsLbArgs)

            __props__.__dict__["access_tags"] = access_tags
            __props__.__dict__["dns"] = dns
            __props__.__dict__["is_lb_id"] = is_lb_id
            __props__.__dict__["logging"] = logging
            __props__.__dict__["name"] = name
            __props__.__dict__["profile"] = profile
            __props__.__dict__["resource_group"] = resource_group
            __props__.__dict__["route_mode"] = route_mode
            __props__.__dict__["security_groups"] = security_groups
            if subnets is None and not opts.urn:
                raise TypeError("Missing required property 'subnets'")
            __props__.__dict__["subnets"] = subnets
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["type"] = type
            __props__.__dict__["access_mode"] = None
            __props__.__dict__["attached_load_balancer_pool_members"] = None
            __props__.__dict__["availability"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["failsafe_policy_actions"] = None
            __props__.__dict__["hostname"] = None
            __props__.__dict__["instance_groups_supported"] = None
            __props__.__dict__["operating_status"] = None
            __props__.__dict__["private_ip"] = None
            __props__.__dict__["private_ips"] = None
            __props__.__dict__["public_ips"] = None
            __props__.__dict__["resource_controller_url"] = None
            __props__.__dict__["resource_group_name"] = None
            __props__.__dict__["resource_name"] = None
            __props__.__dict__["security_group_supported"] = None
            __props__.__dict__["source_ip_session_persistence_supported"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["udp_supported"] = None
            __props__.__dict__["version"] = None
        super(IsLb, __self__).__init__(
            'ibm:index/isLb:IsLb',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_mode: Optional[pulumi.Input[_builtins.str]] = None,
            access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            attached_load_balancer_pool_members: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsLbAttachedLoadBalancerPoolMemberArgs', 'IsLbAttachedLoadBalancerPoolMemberArgsDict']]]]] = None,
            availability: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            dns: Optional[pulumi.Input[Union['IsLbDnsArgs', 'IsLbDnsArgsDict']]] = None,
            failsafe_policy_actions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            hostname: Optional[pulumi.Input[_builtins.str]] = None,
            instance_groups_supported: Optional[pulumi.Input[_builtins.bool]] = None,
            is_lb_id: Optional[pulumi.Input[_builtins.str]] = None,
            logging: Optional[pulumi.Input[_builtins.bool]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            operating_status: Optional[pulumi.Input[_builtins.str]] = None,
            private_ip: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsLbPrivateIpArgs', 'IsLbPrivateIpArgsDict']]]]] = None,
            private_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            profile: Optional[pulumi.Input[_builtins.str]] = None,
            public_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            resource_controller_url: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_name: Optional[pulumi.Input[_builtins.str]] = None,
            resource_name_: Optional[pulumi.Input[_builtins.str]] = None,
            route_mode: Optional[pulumi.Input[_builtins.bool]] = None,
            security_group_supported: Optional[pulumi.Input[_builtins.bool]] = None,
            security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            source_ip_session_persistence_supported: Optional[pulumi.Input[_builtins.bool]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            subnets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            timeouts: Optional[pulumi.Input[Union['IsLbTimeoutsArgs', 'IsLbTimeoutsArgsDict']]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            udp_supported: Optional[pulumi.Input[_builtins.bool]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsLb':
        """
        Get an existing IsLb resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] access_mode: The access mode of this load balancer
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsLbAttachedLoadBalancerPoolMemberArgs', 'IsLbAttachedLoadBalancerPoolMemberArgsDict']]]] attached_load_balancer_pool_members: The load balancer pool members attached to this load balancer.
        :param pulumi.Input[_builtins.str] availability: The availability of this load balancer
        :param pulumi.Input[_builtins.str] crn: The CRN for this Load Balancer
        :param pulumi.Input[Union['IsLbDnsArgs', 'IsLbDnsArgsDict']] dns: The DNS configuration for this load balancer.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] failsafe_policy_actions: The supported `failsafe_policy.action` values for this load balancer's pools.
        :param pulumi.Input[_builtins.bool] instance_groups_supported: Indicates whether this load balancer supports instance groups.
        :param pulumi.Input[_builtins.bool] logging: Logging of Load Balancer
        :param pulumi.Input[_builtins.str] name: Load Balancer name
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsLbPrivateIpArgs', 'IsLbPrivateIpArgsDict']]]] private_ip: The private IP addresses assigned to this load balancer.
        :param pulumi.Input[_builtins.str] profile: The profile to use for this load balancer.
        :param pulumi.Input[_builtins.str] resource_controller_url: The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        :param pulumi.Input[_builtins.str] resource_group_name: The resource group name in which resource is provisioned
        :param pulumi.Input[_builtins.str] resource_name_: The name of the resource
        :param pulumi.Input[_builtins.bool] route_mode: Indicates whether route mode is enabled for this load balancer
        :param pulumi.Input[_builtins.bool] security_group_supported: Security Group Supported for this Load Balancer
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: Load Balancer securitygroups list
        :param pulumi.Input[_builtins.bool] source_ip_session_persistence_supported: Indicates whether this load balancer supports source IP session persistence.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] subnets: Load Balancer subnets list
        :param pulumi.Input[_builtins.str] type: Load Balancer type
        :param pulumi.Input[_builtins.bool] udp_supported: Indicates whether this load balancer supports UDP.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsLbState.__new__(_IsLbState)

        __props__.__dict__["access_mode"] = access_mode
        __props__.__dict__["access_tags"] = access_tags
        __props__.__dict__["attached_load_balancer_pool_members"] = attached_load_balancer_pool_members
        __props__.__dict__["availability"] = availability
        __props__.__dict__["crn"] = crn
        __props__.__dict__["dns"] = dns
        __props__.__dict__["failsafe_policy_actions"] = failsafe_policy_actions
        __props__.__dict__["hostname"] = hostname
        __props__.__dict__["instance_groups_supported"] = instance_groups_supported
        __props__.__dict__["is_lb_id"] = is_lb_id
        __props__.__dict__["logging"] = logging
        __props__.__dict__["name"] = name
        __props__.__dict__["operating_status"] = operating_status
        __props__.__dict__["private_ip"] = private_ip
        __props__.__dict__["private_ips"] = private_ips
        __props__.__dict__["profile"] = profile
        __props__.__dict__["public_ips"] = public_ips
        __props__.__dict__["resource_controller_url"] = resource_controller_url
        __props__.__dict__["resource_group"] = resource_group
        __props__.__dict__["resource_group_name"] = resource_group_name
        __props__.__dict__["resource_name"] = resource_name_
        __props__.__dict__["route_mode"] = route_mode
        __props__.__dict__["security_group_supported"] = security_group_supported
        __props__.__dict__["security_groups"] = security_groups
        __props__.__dict__["source_ip_session_persistence_supported"] = source_ip_session_persistence_supported
        __props__.__dict__["status"] = status
        __props__.__dict__["subnets"] = subnets
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["type"] = type
        __props__.__dict__["udp_supported"] = udp_supported
        __props__.__dict__["version"] = version
        return IsLb(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessMode")
    def access_mode(self) -> pulumi.Output[_builtins.str]:
        """
        The access mode of this load balancer
        """
        return pulumi.get(self, "access_mode")

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter(name="attachedLoadBalancerPoolMembers")
    def attached_load_balancer_pool_members(self) -> pulumi.Output[Sequence['outputs.IsLbAttachedLoadBalancerPoolMember']]:
        """
        The load balancer pool members attached to this load balancer.
        """
        return pulumi.get(self, "attached_load_balancer_pool_members")

    @_builtins.property
    @pulumi.getter
    def availability(self) -> pulumi.Output[_builtins.str]:
        """
        The availability of this load balancer
        """
        return pulumi.get(self, "availability")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The CRN for this Load Balancer
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def dns(self) -> pulumi.Output[Optional['outputs.IsLbDns']]:
        """
        The DNS configuration for this load balancer.
        """
        return pulumi.get(self, "dns")

    @_builtins.property
    @pulumi.getter(name="failsafePolicyActions")
    def failsafe_policy_actions(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The supported `failsafe_policy.action` values for this load balancer's pools.
        """
        return pulumi.get(self, "failsafe_policy_actions")

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter(name="instanceGroupsSupported")
    def instance_groups_supported(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether this load balancer supports instance groups.
        """
        return pulumi.get(self, "instance_groups_supported")

    @_builtins.property
    @pulumi.getter(name="isLbId")
    def is_lb_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_lb_id")

    @_builtins.property
    @pulumi.getter
    def logging(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Logging of Load Balancer
        """
        return pulumi.get(self, "logging")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Load Balancer name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="operatingStatus")
    def operating_status(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "operating_status")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> pulumi.Output[Sequence['outputs.IsLbPrivateIp']]:
        """
        The private IP addresses assigned to this load balancer.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> pulumi.Output[Sequence[_builtins.str]]:
        return pulumi.get(self, "private_ips")

    @_builtins.property
    @pulumi.getter
    def profile(self) -> pulumi.Output[_builtins.str]:
        """
        The profile to use for this load balancer.
        """
        return pulumi.get(self, "profile")

    @_builtins.property
    @pulumi.getter(name="publicIps")
    def public_ips(self) -> pulumi.Output[Sequence[_builtins.str]]:
        return pulumi.get(self, "public_ips")

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> pulumi.Output[_builtins.str]:
        """
        The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        """
        return pulumi.get(self, "resource_controller_url")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Output[_builtins.str]:
        """
        The resource group name in which resource is provisioned
        """
        return pulumi.get(self, "resource_group_name")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="routeMode")
    def route_mode(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Indicates whether route mode is enabled for this load balancer
        """
        return pulumi.get(self, "route_mode")

    @_builtins.property
    @pulumi.getter(name="securityGroupSupported")
    def security_group_supported(self) -> pulumi.Output[_builtins.bool]:
        """
        Security Group Supported for this Load Balancer
        """
        return pulumi.get(self, "security_group_supported")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Load Balancer securitygroups list
        """
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter(name="sourceIpSessionPersistenceSupported")
    def source_ip_session_persistence_supported(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether this load balancer supports source IP session persistence.
        """
        return pulumi.get(self, "source_ip_session_persistence_supported")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Load Balancer subnets list
        """
        return pulumi.get(self, "subnets")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IsLbTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Load Balancer type
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="udpSupported")
    def udp_supported(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether this load balancer supports UDP.
        """
        return pulumi.get(self, "udp_supported")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "version")

