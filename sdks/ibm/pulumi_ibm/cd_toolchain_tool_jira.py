# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CdToolchainToolJiraArgs', 'CdToolchainToolJira']

@pulumi.input_type
class CdToolchainToolJiraArgs:
    def __init__(__self__, *,
                 parameters: pulumi.Input['CdToolchainToolJiraParametersArgs'],
                 toolchain_id: pulumi.Input[_builtins.str],
                 cd_toolchain_tool_jira_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CdToolchainToolJira resource.
        :param pulumi.Input['CdToolchainToolJiraParametersArgs'] parameters: Unique key-value pairs representing parameters to be used to create the tool. A list of parameters for each tool
               integration can be found in the <a
               href="https://cloud.ibm.com/docs/ContinuousDelivery?topic=ContinuousDelivery-integrations">Configuring tool integrations
               page</a>.
        :param pulumi.Input[_builtins.str] toolchain_id: ID of the toolchain to bind the tool to.
        :param pulumi.Input[_builtins.str] name: Name of the tool.
        """
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "toolchain_id", toolchain_id)
        if cd_toolchain_tool_jira_id is not None:
            pulumi.set(__self__, "cd_toolchain_tool_jira_id", cd_toolchain_tool_jira_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> pulumi.Input['CdToolchainToolJiraParametersArgs']:
        """
        Unique key-value pairs representing parameters to be used to create the tool. A list of parameters for each tool
        integration can be found in the <a
        href="https://cloud.ibm.com/docs/ContinuousDelivery?topic=ContinuousDelivery-integrations">Configuring tool integrations
        page</a>.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: pulumi.Input['CdToolchainToolJiraParametersArgs']):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter(name="toolchainId")
    def toolchain_id(self) -> pulumi.Input[_builtins.str]:
        """
        ID of the toolchain to bind the tool to.
        """
        return pulumi.get(self, "toolchain_id")

    @toolchain_id.setter
    def toolchain_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "toolchain_id", value)

    @_builtins.property
    @pulumi.getter(name="cdToolchainToolJiraId")
    def cd_toolchain_tool_jira_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cd_toolchain_tool_jira_id")

    @cd_toolchain_tool_jira_id.setter
    def cd_toolchain_tool_jira_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cd_toolchain_tool_jira_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the tool.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _CdToolchainToolJiraState:
    def __init__(__self__, *,
                 cd_toolchain_tool_jira_id: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input['CdToolchainToolJiraParametersArgs']] = None,
                 referents: Optional[pulumi.Input[Sequence[pulumi.Input['CdToolchainToolJiraReferentArgs']]]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 tool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 toolchain_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 toolchain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CdToolchainToolJira resources.
        :param pulumi.Input[_builtins.str] crn: Tool CRN.
        :param pulumi.Input[_builtins.str] href: URI representing the tool.
        :param pulumi.Input[_builtins.str] name: Name of the tool.
        :param pulumi.Input['CdToolchainToolJiraParametersArgs'] parameters: Unique key-value pairs representing parameters to be used to create the tool. A list of parameters for each tool
               integration can be found in the <a
               href="https://cloud.ibm.com/docs/ContinuousDelivery?topic=ContinuousDelivery-integrations">Configuring tool integrations
               page</a>.
        :param pulumi.Input[Sequence[pulumi.Input['CdToolchainToolJiraReferentArgs']]] referents: Information on URIs to access this resource through the UI or API.
        :param pulumi.Input[_builtins.str] resource_group_id: Resource group where the tool is located.
        :param pulumi.Input[_builtins.str] state: Current configuration state of the tool.
        :param pulumi.Input[_builtins.str] tool_id: Tool ID.
        :param pulumi.Input[_builtins.str] toolchain_crn: CRN of toolchain which the tool is bound to.
        :param pulumi.Input[_builtins.str] toolchain_id: ID of the toolchain to bind the tool to.
        :param pulumi.Input[_builtins.str] updated_at: Latest tool update timestamp.
        """
        if cd_toolchain_tool_jira_id is not None:
            pulumi.set(__self__, "cd_toolchain_tool_jira_id", cd_toolchain_tool_jira_id)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if referents is not None:
            pulumi.set(__self__, "referents", referents)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tool_id is not None:
            pulumi.set(__self__, "tool_id", tool_id)
        if toolchain_crn is not None:
            pulumi.set(__self__, "toolchain_crn", toolchain_crn)
        if toolchain_id is not None:
            pulumi.set(__self__, "toolchain_id", toolchain_id)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="cdToolchainToolJiraId")
    def cd_toolchain_tool_jira_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cd_toolchain_tool_jira_id")

    @cd_toolchain_tool_jira_id.setter
    def cd_toolchain_tool_jira_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cd_toolchain_tool_jira_id", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Tool CRN.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        URI representing the tool.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the tool.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input['CdToolchainToolJiraParametersArgs']]:
        """
        Unique key-value pairs representing parameters to be used to create the tool. A list of parameters for each tool
        integration can be found in the <a
        href="https://cloud.ibm.com/docs/ContinuousDelivery?topic=ContinuousDelivery-integrations">Configuring tool integrations
        page</a>.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input['CdToolchainToolJiraParametersArgs']]):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter
    def referents(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CdToolchainToolJiraReferentArgs']]]]:
        """
        Information on URIs to access this resource through the UI or API.
        """
        return pulumi.get(self, "referents")

    @referents.setter
    def referents(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CdToolchainToolJiraReferentArgs']]]]):
        pulumi.set(self, "referents", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource group where the tool is located.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Current configuration state of the tool.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)

    @_builtins.property
    @pulumi.getter(name="toolId")
    def tool_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Tool ID.
        """
        return pulumi.get(self, "tool_id")

    @tool_id.setter
    def tool_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tool_id", value)

    @_builtins.property
    @pulumi.getter(name="toolchainCrn")
    def toolchain_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CRN of toolchain which the tool is bound to.
        """
        return pulumi.get(self, "toolchain_crn")

    @toolchain_crn.setter
    def toolchain_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "toolchain_crn", value)

    @_builtins.property
    @pulumi.getter(name="toolchainId")
    def toolchain_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the toolchain to bind the tool to.
        """
        return pulumi.get(self, "toolchain_id")

    @toolchain_id.setter
    def toolchain_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "toolchain_id", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Latest tool update timestamp.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("ibm:index/cdToolchainToolJira:CdToolchainToolJira")
class CdToolchainToolJira(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cd_toolchain_tool_jira_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Union['CdToolchainToolJiraParametersArgs', 'CdToolchainToolJiraParametersArgsDict']]] = None,
                 toolchain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a CdToolchainToolJira resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: Name of the tool.
        :param pulumi.Input[Union['CdToolchainToolJiraParametersArgs', 'CdToolchainToolJiraParametersArgsDict']] parameters: Unique key-value pairs representing parameters to be used to create the tool. A list of parameters for each tool
               integration can be found in the <a
               href="https://cloud.ibm.com/docs/ContinuousDelivery?topic=ContinuousDelivery-integrations">Configuring tool integrations
               page</a>.
        :param pulumi.Input[_builtins.str] toolchain_id: ID of the toolchain to bind the tool to.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CdToolchainToolJiraArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CdToolchainToolJira resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CdToolchainToolJiraArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CdToolchainToolJiraArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cd_toolchain_tool_jira_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Union['CdToolchainToolJiraParametersArgs', 'CdToolchainToolJiraParametersArgsDict']]] = None,
                 toolchain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CdToolchainToolJiraArgs.__new__(CdToolchainToolJiraArgs)

            __props__.__dict__["cd_toolchain_tool_jira_id"] = cd_toolchain_tool_jira_id
            __props__.__dict__["name"] = name
            if parameters is None and not opts.urn:
                raise TypeError("Missing required property 'parameters'")
            __props__.__dict__["parameters"] = parameters
            if toolchain_id is None and not opts.urn:
                raise TypeError("Missing required property 'toolchain_id'")
            __props__.__dict__["toolchain_id"] = toolchain_id
            __props__.__dict__["crn"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["referents"] = None
            __props__.__dict__["resource_group_id"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["tool_id"] = None
            __props__.__dict__["toolchain_crn"] = None
            __props__.__dict__["updated_at"] = None
        super(CdToolchainToolJira, __self__).__init__(
            'ibm:index/cdToolchainToolJira:CdToolchainToolJira',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cd_toolchain_tool_jira_id: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            parameters: Optional[pulumi.Input[Union['CdToolchainToolJiraParametersArgs', 'CdToolchainToolJiraParametersArgsDict']]] = None,
            referents: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CdToolchainToolJiraReferentArgs', 'CdToolchainToolJiraReferentArgsDict']]]]] = None,
            resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            state: Optional[pulumi.Input[_builtins.str]] = None,
            tool_id: Optional[pulumi.Input[_builtins.str]] = None,
            toolchain_crn: Optional[pulumi.Input[_builtins.str]] = None,
            toolchain_id: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'CdToolchainToolJira':
        """
        Get an existing CdToolchainToolJira resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] crn: Tool CRN.
        :param pulumi.Input[_builtins.str] href: URI representing the tool.
        :param pulumi.Input[_builtins.str] name: Name of the tool.
        :param pulumi.Input[Union['CdToolchainToolJiraParametersArgs', 'CdToolchainToolJiraParametersArgsDict']] parameters: Unique key-value pairs representing parameters to be used to create the tool. A list of parameters for each tool
               integration can be found in the <a
               href="https://cloud.ibm.com/docs/ContinuousDelivery?topic=ContinuousDelivery-integrations">Configuring tool integrations
               page</a>.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CdToolchainToolJiraReferentArgs', 'CdToolchainToolJiraReferentArgsDict']]]] referents: Information on URIs to access this resource through the UI or API.
        :param pulumi.Input[_builtins.str] resource_group_id: Resource group where the tool is located.
        :param pulumi.Input[_builtins.str] state: Current configuration state of the tool.
        :param pulumi.Input[_builtins.str] tool_id: Tool ID.
        :param pulumi.Input[_builtins.str] toolchain_crn: CRN of toolchain which the tool is bound to.
        :param pulumi.Input[_builtins.str] toolchain_id: ID of the toolchain to bind the tool to.
        :param pulumi.Input[_builtins.str] updated_at: Latest tool update timestamp.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CdToolchainToolJiraState.__new__(_CdToolchainToolJiraState)

        __props__.__dict__["cd_toolchain_tool_jira_id"] = cd_toolchain_tool_jira_id
        __props__.__dict__["crn"] = crn
        __props__.__dict__["href"] = href
        __props__.__dict__["name"] = name
        __props__.__dict__["parameters"] = parameters
        __props__.__dict__["referents"] = referents
        __props__.__dict__["resource_group_id"] = resource_group_id
        __props__.__dict__["state"] = state
        __props__.__dict__["tool_id"] = tool_id
        __props__.__dict__["toolchain_crn"] = toolchain_crn
        __props__.__dict__["toolchain_id"] = toolchain_id
        __props__.__dict__["updated_at"] = updated_at
        return CdToolchainToolJira(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="cdToolchainToolJiraId")
    def cd_toolchain_tool_jira_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cd_toolchain_tool_jira_id")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        Tool CRN.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        URI representing the tool.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the tool.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> pulumi.Output['outputs.CdToolchainToolJiraParameters']:
        """
        Unique key-value pairs representing parameters to be used to create the tool. A list of parameters for each tool
        integration can be found in the <a
        href="https://cloud.ibm.com/docs/ContinuousDelivery?topic=ContinuousDelivery-integrations">Configuring tool integrations
        page</a>.
        """
        return pulumi.get(self, "parameters")

    @_builtins.property
    @pulumi.getter
    def referents(self) -> pulumi.Output[Sequence['outputs.CdToolchainToolJiraReferent']]:
        """
        Information on URIs to access this resource through the UI or API.
        """
        return pulumi.get(self, "referents")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        Resource group where the tool is located.
        """
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> pulumi.Output[_builtins.str]:
        """
        Current configuration state of the tool.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="toolId")
    def tool_id(self) -> pulumi.Output[_builtins.str]:
        """
        Tool ID.
        """
        return pulumi.get(self, "tool_id")

    @_builtins.property
    @pulumi.getter(name="toolchainCrn")
    def toolchain_crn(self) -> pulumi.Output[_builtins.str]:
        """
        CRN of toolchain which the tool is bound to.
        """
        return pulumi.get(self, "toolchain_crn")

    @_builtins.property
    @pulumi.getter(name="toolchainId")
    def toolchain_id(self) -> pulumi.Output[_builtins.str]:
        """
        ID of the toolchain to bind the tool to.
        """
        return pulumi.get(self, "toolchain_id")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Latest tool update timestamp.
        """
        return pulumi.get(self, "updated_at")

