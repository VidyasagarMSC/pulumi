# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetIsInstanceGroupResult',
    'AwaitableGetIsInstanceGroupResult',
    'get_is_instance_group',
    'get_is_instance_group_output',
]

@pulumi.output_type
class GetIsInstanceGroupResult:
    """
    A collection of values returned by getIsInstanceGroup.
    """
    def __init__(__self__, access_tags=None, application_port=None, crn=None, id=None, instance_template=None, load_balancer_pool=None, managers=None, membership_count=None, name=None, resource_group=None, status=None, subnets=None, vpc=None):
        if access_tags and not isinstance(access_tags, list):
            raise TypeError("Expected argument 'access_tags' to be a list")
        pulumi.set(__self__, "access_tags", access_tags)
        if application_port and not isinstance(application_port, float):
            raise TypeError("Expected argument 'application_port' to be a float")
        pulumi.set(__self__, "application_port", application_port)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_template and not isinstance(instance_template, str):
            raise TypeError("Expected argument 'instance_template' to be a str")
        pulumi.set(__self__, "instance_template", instance_template)
        if load_balancer_pool and not isinstance(load_balancer_pool, str):
            raise TypeError("Expected argument 'load_balancer_pool' to be a str")
        pulumi.set(__self__, "load_balancer_pool", load_balancer_pool)
        if managers and not isinstance(managers, list):
            raise TypeError("Expected argument 'managers' to be a list")
        pulumi.set(__self__, "managers", managers)
        if membership_count and not isinstance(membership_count, float):
            raise TypeError("Expected argument 'membership_count' to be a float")
        pulumi.set(__self__, "membership_count", membership_count)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resource_group and not isinstance(resource_group, str):
            raise TypeError("Expected argument 'resource_group' to be a str")
        pulumi.set(__self__, "resource_group", resource_group)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if subnets and not isinstance(subnets, list):
            raise TypeError("Expected argument 'subnets' to be a list")
        pulumi.set(__self__, "subnets", subnets)
        if vpc and not isinstance(vpc, str):
            raise TypeError("Expected argument 'vpc' to be a str")
        pulumi.set(__self__, "vpc", vpc)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter(name="applicationPort")
    def application_port(self) -> _builtins.float:
        return pulumi.get(self, "application_port")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceTemplate")
    def instance_template(self) -> _builtins.str:
        return pulumi.get(self, "instance_template")

    @_builtins.property
    @pulumi.getter(name="loadBalancerPool")
    def load_balancer_pool(self) -> _builtins.str:
        return pulumi.get(self, "load_balancer_pool")

    @_builtins.property
    @pulumi.getter
    def managers(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "managers")

    @_builtins.property
    @pulumi.getter(name="membershipCount")
    def membership_count(self) -> _builtins.float:
        return pulumi.get(self, "membership_count")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> _builtins.str:
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "subnets")

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> _builtins.str:
        return pulumi.get(self, "vpc")


class AwaitableGetIsInstanceGroupResult(GetIsInstanceGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsInstanceGroupResult(
            access_tags=self.access_tags,
            application_port=self.application_port,
            crn=self.crn,
            id=self.id,
            instance_template=self.instance_template,
            load_balancer_pool=self.load_balancer_pool,
            managers=self.managers,
            membership_count=self.membership_count,
            name=self.name,
            resource_group=self.resource_group,
            status=self.status,
            subnets=self.subnets,
            vpc=self.vpc)


def get_is_instance_group(id: Optional[_builtins.str] = None,
                          name: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsInstanceGroupResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsInstanceGroup:getIsInstanceGroup', __args__, opts=opts, typ=GetIsInstanceGroupResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsInstanceGroupResult(
        access_tags=pulumi.get(__ret__, 'access_tags'),
        application_port=pulumi.get(__ret__, 'application_port'),
        crn=pulumi.get(__ret__, 'crn'),
        id=pulumi.get(__ret__, 'id'),
        instance_template=pulumi.get(__ret__, 'instance_template'),
        load_balancer_pool=pulumi.get(__ret__, 'load_balancer_pool'),
        managers=pulumi.get(__ret__, 'managers'),
        membership_count=pulumi.get(__ret__, 'membership_count'),
        name=pulumi.get(__ret__, 'name'),
        resource_group=pulumi.get(__ret__, 'resource_group'),
        status=pulumi.get(__ret__, 'status'),
        subnets=pulumi.get(__ret__, 'subnets'),
        vpc=pulumi.get(__ret__, 'vpc'))
def get_is_instance_group_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 name: Optional[pulumi.Input[_builtins.str]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsInstanceGroupResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsInstanceGroup:getIsInstanceGroup', __args__, opts=opts, typ=GetIsInstanceGroupResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsInstanceGroupResult(
        access_tags=pulumi.get(__response__, 'access_tags'),
        application_port=pulumi.get(__response__, 'application_port'),
        crn=pulumi.get(__response__, 'crn'),
        id=pulumi.get(__response__, 'id'),
        instance_template=pulumi.get(__response__, 'instance_template'),
        load_balancer_pool=pulumi.get(__response__, 'load_balancer_pool'),
        managers=pulumi.get(__response__, 'managers'),
        membership_count=pulumi.get(__response__, 'membership_count'),
        name=pulumi.get(__response__, 'name'),
        resource_group=pulumi.get(__response__, 'resource_group'),
        status=pulumi.get(__response__, 'status'),
        subnets=pulumi.get(__response__, 'subnets'),
        vpc=pulumi.get(__response__, 'vpc')))
