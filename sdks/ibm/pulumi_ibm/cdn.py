# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['CdnArgs', 'Cdn']

@pulumi.input_type
class CdnArgs:
    def __init__(__self__, *,
                 host_name: pulumi.Input[_builtins.str],
                 origin_address: pulumi.Input[_builtins.str],
                 bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cache_key_query_rule: Optional[pulumi.Input[_builtins.str]] = None,
                 cdn_id: Optional[pulumi.Input[_builtins.str]] = None,
                 certificate_type: Optional[pulumi.Input[_builtins.str]] = None,
                 cname: Optional[pulumi.Input[_builtins.str]] = None,
                 file_extension: Optional[pulumi.Input[_builtins.str]] = None,
                 header: Optional[pulumi.Input[_builtins.str]] = None,
                 http_port: Optional[pulumi.Input[_builtins.float]] = None,
                 https_port: Optional[pulumi.Input[_builtins.float]] = None,
                 origin_type: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 performance_configuration: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 respect_headers: Optional[pulumi.Input[_builtins.bool]] = None,
                 vendor_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Cdn resource.
        :param pulumi.Input[_builtins.str] host_name: Host name
        :param pulumi.Input[_builtins.str] origin_address: origin address info
        :param pulumi.Input[_builtins.str] bucket_name: Bucket name
        :param pulumi.Input[_builtins.str] cache_key_query_rule: query rule info
        :param pulumi.Input[_builtins.str] certificate_type: Certificate type
        :param pulumi.Input[_builtins.str] cname: cname info
        :param pulumi.Input[_builtins.str] file_extension: File extension info
        :param pulumi.Input[_builtins.str] header: Header info
        :param pulumi.Input[_builtins.float] http_port: HTTP port number
        :param pulumi.Input[_builtins.float] https_port: HTTPS port number
        :param pulumi.Input[_builtins.str] origin_type: Origin type info
        :param pulumi.Input[_builtins.str] path: Path details
        :param pulumi.Input[_builtins.str] performance_configuration: performance configuration info
        :param pulumi.Input[_builtins.str] protocol: Protocol name
        :param pulumi.Input[_builtins.bool] respect_headers: respect headers info
        :param pulumi.Input[_builtins.str] vendor_name: Vendor name
        """
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "origin_address", origin_address)
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if cache_key_query_rule is not None:
            pulumi.set(__self__, "cache_key_query_rule", cache_key_query_rule)
        if cdn_id is not None:
            pulumi.set(__self__, "cdn_id", cdn_id)
        if certificate_type is not None:
            pulumi.set(__self__, "certificate_type", certificate_type)
        if cname is not None:
            pulumi.set(__self__, "cname", cname)
        if file_extension is not None:
            pulumi.set(__self__, "file_extension", file_extension)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if http_port is not None:
            pulumi.set(__self__, "http_port", http_port)
        if https_port is not None:
            pulumi.set(__self__, "https_port", https_port)
        if origin_type is not None:
            pulumi.set(__self__, "origin_type", origin_type)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if performance_configuration is not None:
            pulumi.set(__self__, "performance_configuration", performance_configuration)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if respect_headers is not None:
            pulumi.set(__self__, "respect_headers", respect_headers)
        if vendor_name is not None:
            pulumi.set(__self__, "vendor_name", vendor_name)

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> pulumi.Input[_builtins.str]:
        """
        Host name
        """
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "host_name", value)

    @_builtins.property
    @pulumi.getter(name="originAddress")
    def origin_address(self) -> pulumi.Input[_builtins.str]:
        """
        origin address info
        """
        return pulumi.get(self, "origin_address")

    @origin_address.setter
    def origin_address(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "origin_address", value)

    @_builtins.property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Bucket name
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bucket_name", value)

    @_builtins.property
    @pulumi.getter(name="cacheKeyQueryRule")
    def cache_key_query_rule(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        query rule info
        """
        return pulumi.get(self, "cache_key_query_rule")

    @cache_key_query_rule.setter
    def cache_key_query_rule(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cache_key_query_rule", value)

    @_builtins.property
    @pulumi.getter(name="cdnId")
    def cdn_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cdn_id")

    @cdn_id.setter
    def cdn_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cdn_id", value)

    @_builtins.property
    @pulumi.getter(name="certificateType")
    def certificate_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Certificate type
        """
        return pulumi.get(self, "certificate_type")

    @certificate_type.setter
    def certificate_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate_type", value)

    @_builtins.property
    @pulumi.getter
    def cname(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        cname info
        """
        return pulumi.get(self, "cname")

    @cname.setter
    def cname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cname", value)

    @_builtins.property
    @pulumi.getter(name="fileExtension")
    def file_extension(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        File extension info
        """
        return pulumi.get(self, "file_extension")

    @file_extension.setter
    def file_extension(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "file_extension", value)

    @_builtins.property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Header info
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "header", value)

    @_builtins.property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        HTTP port number
        """
        return pulumi.get(self, "http_port")

    @http_port.setter
    def http_port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "http_port", value)

    @_builtins.property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        HTTPS port number
        """
        return pulumi.get(self, "https_port")

    @https_port.setter
    def https_port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "https_port", value)

    @_builtins.property
    @pulumi.getter(name="originType")
    def origin_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Origin type info
        """
        return pulumi.get(self, "origin_type")

    @origin_type.setter
    def origin_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "origin_type", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Path details
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter(name="performanceConfiguration")
    def performance_configuration(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        performance configuration info
        """
        return pulumi.get(self, "performance_configuration")

    @performance_configuration.setter
    def performance_configuration(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "performance_configuration", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Protocol name
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="respectHeaders")
    def respect_headers(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        respect headers info
        """
        return pulumi.get(self, "respect_headers")

    @respect_headers.setter
    def respect_headers(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "respect_headers", value)

    @_builtins.property
    @pulumi.getter(name="vendorName")
    def vendor_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Vendor name
        """
        return pulumi.get(self, "vendor_name")

    @vendor_name.setter
    def vendor_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vendor_name", value)


@pulumi.input_type
class _CdnState:
    def __init__(__self__, *,
                 bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cache_key_query_rule: Optional[pulumi.Input[_builtins.str]] = None,
                 cdn_id: Optional[pulumi.Input[_builtins.str]] = None,
                 certificate_type: Optional[pulumi.Input[_builtins.str]] = None,
                 cname: Optional[pulumi.Input[_builtins.str]] = None,
                 file_extension: Optional[pulumi.Input[_builtins.str]] = None,
                 header: Optional[pulumi.Input[_builtins.str]] = None,
                 host_name: Optional[pulumi.Input[_builtins.str]] = None,
                 http_port: Optional[pulumi.Input[_builtins.float]] = None,
                 https_port: Optional[pulumi.Input[_builtins.float]] = None,
                 origin_address: Optional[pulumi.Input[_builtins.str]] = None,
                 origin_type: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 performance_configuration: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 respect_headers: Optional[pulumi.Input[_builtins.bool]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 vendor_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Cdn resources.
        :param pulumi.Input[_builtins.str] bucket_name: Bucket name
        :param pulumi.Input[_builtins.str] cache_key_query_rule: query rule info
        :param pulumi.Input[_builtins.str] certificate_type: Certificate type
        :param pulumi.Input[_builtins.str] cname: cname info
        :param pulumi.Input[_builtins.str] file_extension: File extension info
        :param pulumi.Input[_builtins.str] header: Header info
        :param pulumi.Input[_builtins.str] host_name: Host name
        :param pulumi.Input[_builtins.float] http_port: HTTP port number
        :param pulumi.Input[_builtins.float] https_port: HTTPS port number
        :param pulumi.Input[_builtins.str] origin_address: origin address info
        :param pulumi.Input[_builtins.str] origin_type: Origin type info
        :param pulumi.Input[_builtins.str] path: Path details
        :param pulumi.Input[_builtins.str] performance_configuration: performance configuration info
        :param pulumi.Input[_builtins.str] protocol: Protocol name
        :param pulumi.Input[_builtins.bool] respect_headers: respect headers info
        :param pulumi.Input[_builtins.str] status: Status info of the CDN instance
        :param pulumi.Input[_builtins.str] vendor_name: Vendor name
        """
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if cache_key_query_rule is not None:
            pulumi.set(__self__, "cache_key_query_rule", cache_key_query_rule)
        if cdn_id is not None:
            pulumi.set(__self__, "cdn_id", cdn_id)
        if certificate_type is not None:
            pulumi.set(__self__, "certificate_type", certificate_type)
        if cname is not None:
            pulumi.set(__self__, "cname", cname)
        if file_extension is not None:
            pulumi.set(__self__, "file_extension", file_extension)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if http_port is not None:
            pulumi.set(__self__, "http_port", http_port)
        if https_port is not None:
            pulumi.set(__self__, "https_port", https_port)
        if origin_address is not None:
            pulumi.set(__self__, "origin_address", origin_address)
        if origin_type is not None:
            pulumi.set(__self__, "origin_type", origin_type)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if performance_configuration is not None:
            pulumi.set(__self__, "performance_configuration", performance_configuration)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if respect_headers is not None:
            pulumi.set(__self__, "respect_headers", respect_headers)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vendor_name is not None:
            pulumi.set(__self__, "vendor_name", vendor_name)

    @_builtins.property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Bucket name
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bucket_name", value)

    @_builtins.property
    @pulumi.getter(name="cacheKeyQueryRule")
    def cache_key_query_rule(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        query rule info
        """
        return pulumi.get(self, "cache_key_query_rule")

    @cache_key_query_rule.setter
    def cache_key_query_rule(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cache_key_query_rule", value)

    @_builtins.property
    @pulumi.getter(name="cdnId")
    def cdn_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cdn_id")

    @cdn_id.setter
    def cdn_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cdn_id", value)

    @_builtins.property
    @pulumi.getter(name="certificateType")
    def certificate_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Certificate type
        """
        return pulumi.get(self, "certificate_type")

    @certificate_type.setter
    def certificate_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate_type", value)

    @_builtins.property
    @pulumi.getter
    def cname(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        cname info
        """
        return pulumi.get(self, "cname")

    @cname.setter
    def cname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cname", value)

    @_builtins.property
    @pulumi.getter(name="fileExtension")
    def file_extension(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        File extension info
        """
        return pulumi.get(self, "file_extension")

    @file_extension.setter
    def file_extension(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "file_extension", value)

    @_builtins.property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Header info
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "header", value)

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Host name
        """
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_name", value)

    @_builtins.property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        HTTP port number
        """
        return pulumi.get(self, "http_port")

    @http_port.setter
    def http_port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "http_port", value)

    @_builtins.property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        HTTPS port number
        """
        return pulumi.get(self, "https_port")

    @https_port.setter
    def https_port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "https_port", value)

    @_builtins.property
    @pulumi.getter(name="originAddress")
    def origin_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        origin address info
        """
        return pulumi.get(self, "origin_address")

    @origin_address.setter
    def origin_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "origin_address", value)

    @_builtins.property
    @pulumi.getter(name="originType")
    def origin_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Origin type info
        """
        return pulumi.get(self, "origin_type")

    @origin_type.setter
    def origin_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "origin_type", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Path details
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter(name="performanceConfiguration")
    def performance_configuration(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        performance configuration info
        """
        return pulumi.get(self, "performance_configuration")

    @performance_configuration.setter
    def performance_configuration(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "performance_configuration", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Protocol name
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="respectHeaders")
    def respect_headers(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        respect headers info
        """
        return pulumi.get(self, "respect_headers")

    @respect_headers.setter
    def respect_headers(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "respect_headers", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Status info of the CDN instance
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="vendorName")
    def vendor_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Vendor name
        """
        return pulumi.get(self, "vendor_name")

    @vendor_name.setter
    def vendor_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vendor_name", value)


@pulumi.type_token("ibm:index/cdn:Cdn")
class Cdn(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cache_key_query_rule: Optional[pulumi.Input[_builtins.str]] = None,
                 cdn_id: Optional[pulumi.Input[_builtins.str]] = None,
                 certificate_type: Optional[pulumi.Input[_builtins.str]] = None,
                 cname: Optional[pulumi.Input[_builtins.str]] = None,
                 file_extension: Optional[pulumi.Input[_builtins.str]] = None,
                 header: Optional[pulumi.Input[_builtins.str]] = None,
                 host_name: Optional[pulumi.Input[_builtins.str]] = None,
                 http_port: Optional[pulumi.Input[_builtins.float]] = None,
                 https_port: Optional[pulumi.Input[_builtins.float]] = None,
                 origin_address: Optional[pulumi.Input[_builtins.str]] = None,
                 origin_type: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 performance_configuration: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 respect_headers: Optional[pulumi.Input[_builtins.bool]] = None,
                 vendor_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a Cdn resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] bucket_name: Bucket name
        :param pulumi.Input[_builtins.str] cache_key_query_rule: query rule info
        :param pulumi.Input[_builtins.str] certificate_type: Certificate type
        :param pulumi.Input[_builtins.str] cname: cname info
        :param pulumi.Input[_builtins.str] file_extension: File extension info
        :param pulumi.Input[_builtins.str] header: Header info
        :param pulumi.Input[_builtins.str] host_name: Host name
        :param pulumi.Input[_builtins.float] http_port: HTTP port number
        :param pulumi.Input[_builtins.float] https_port: HTTPS port number
        :param pulumi.Input[_builtins.str] origin_address: origin address info
        :param pulumi.Input[_builtins.str] origin_type: Origin type info
        :param pulumi.Input[_builtins.str] path: Path details
        :param pulumi.Input[_builtins.str] performance_configuration: performance configuration info
        :param pulumi.Input[_builtins.str] protocol: Protocol name
        :param pulumi.Input[_builtins.bool] respect_headers: respect headers info
        :param pulumi.Input[_builtins.str] vendor_name: Vendor name
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CdnArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Cdn resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CdnArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CdnArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cache_key_query_rule: Optional[pulumi.Input[_builtins.str]] = None,
                 cdn_id: Optional[pulumi.Input[_builtins.str]] = None,
                 certificate_type: Optional[pulumi.Input[_builtins.str]] = None,
                 cname: Optional[pulumi.Input[_builtins.str]] = None,
                 file_extension: Optional[pulumi.Input[_builtins.str]] = None,
                 header: Optional[pulumi.Input[_builtins.str]] = None,
                 host_name: Optional[pulumi.Input[_builtins.str]] = None,
                 http_port: Optional[pulumi.Input[_builtins.float]] = None,
                 https_port: Optional[pulumi.Input[_builtins.float]] = None,
                 origin_address: Optional[pulumi.Input[_builtins.str]] = None,
                 origin_type: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 performance_configuration: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 respect_headers: Optional[pulumi.Input[_builtins.bool]] = None,
                 vendor_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CdnArgs.__new__(CdnArgs)

            __props__.__dict__["bucket_name"] = bucket_name
            __props__.__dict__["cache_key_query_rule"] = cache_key_query_rule
            __props__.__dict__["cdn_id"] = cdn_id
            __props__.__dict__["certificate_type"] = certificate_type
            __props__.__dict__["cname"] = cname
            __props__.__dict__["file_extension"] = file_extension
            __props__.__dict__["header"] = header
            if host_name is None and not opts.urn:
                raise TypeError("Missing required property 'host_name'")
            __props__.__dict__["host_name"] = host_name
            __props__.__dict__["http_port"] = http_port
            __props__.__dict__["https_port"] = https_port
            if origin_address is None and not opts.urn:
                raise TypeError("Missing required property 'origin_address'")
            __props__.__dict__["origin_address"] = origin_address
            __props__.__dict__["origin_type"] = origin_type
            __props__.__dict__["path"] = path
            __props__.__dict__["performance_configuration"] = performance_configuration
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["respect_headers"] = respect_headers
            __props__.__dict__["vendor_name"] = vendor_name
            __props__.__dict__["status"] = None
        super(Cdn, __self__).__init__(
            'ibm:index/cdn:Cdn',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
            cache_key_query_rule: Optional[pulumi.Input[_builtins.str]] = None,
            cdn_id: Optional[pulumi.Input[_builtins.str]] = None,
            certificate_type: Optional[pulumi.Input[_builtins.str]] = None,
            cname: Optional[pulumi.Input[_builtins.str]] = None,
            file_extension: Optional[pulumi.Input[_builtins.str]] = None,
            header: Optional[pulumi.Input[_builtins.str]] = None,
            host_name: Optional[pulumi.Input[_builtins.str]] = None,
            http_port: Optional[pulumi.Input[_builtins.float]] = None,
            https_port: Optional[pulumi.Input[_builtins.float]] = None,
            origin_address: Optional[pulumi.Input[_builtins.str]] = None,
            origin_type: Optional[pulumi.Input[_builtins.str]] = None,
            path: Optional[pulumi.Input[_builtins.str]] = None,
            performance_configuration: Optional[pulumi.Input[_builtins.str]] = None,
            protocol: Optional[pulumi.Input[_builtins.str]] = None,
            respect_headers: Optional[pulumi.Input[_builtins.bool]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            vendor_name: Optional[pulumi.Input[_builtins.str]] = None) -> 'Cdn':
        """
        Get an existing Cdn resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] bucket_name: Bucket name
        :param pulumi.Input[_builtins.str] cache_key_query_rule: query rule info
        :param pulumi.Input[_builtins.str] certificate_type: Certificate type
        :param pulumi.Input[_builtins.str] cname: cname info
        :param pulumi.Input[_builtins.str] file_extension: File extension info
        :param pulumi.Input[_builtins.str] header: Header info
        :param pulumi.Input[_builtins.str] host_name: Host name
        :param pulumi.Input[_builtins.float] http_port: HTTP port number
        :param pulumi.Input[_builtins.float] https_port: HTTPS port number
        :param pulumi.Input[_builtins.str] origin_address: origin address info
        :param pulumi.Input[_builtins.str] origin_type: Origin type info
        :param pulumi.Input[_builtins.str] path: Path details
        :param pulumi.Input[_builtins.str] performance_configuration: performance configuration info
        :param pulumi.Input[_builtins.str] protocol: Protocol name
        :param pulumi.Input[_builtins.bool] respect_headers: respect headers info
        :param pulumi.Input[_builtins.str] status: Status info of the CDN instance
        :param pulumi.Input[_builtins.str] vendor_name: Vendor name
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CdnState.__new__(_CdnState)

        __props__.__dict__["bucket_name"] = bucket_name
        __props__.__dict__["cache_key_query_rule"] = cache_key_query_rule
        __props__.__dict__["cdn_id"] = cdn_id
        __props__.__dict__["certificate_type"] = certificate_type
        __props__.__dict__["cname"] = cname
        __props__.__dict__["file_extension"] = file_extension
        __props__.__dict__["header"] = header
        __props__.__dict__["host_name"] = host_name
        __props__.__dict__["http_port"] = http_port
        __props__.__dict__["https_port"] = https_port
        __props__.__dict__["origin_address"] = origin_address
        __props__.__dict__["origin_type"] = origin_type
        __props__.__dict__["path"] = path
        __props__.__dict__["performance_configuration"] = performance_configuration
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["respect_headers"] = respect_headers
        __props__.__dict__["status"] = status
        __props__.__dict__["vendor_name"] = vendor_name
        return Cdn(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Bucket name
        """
        return pulumi.get(self, "bucket_name")

    @_builtins.property
    @pulumi.getter(name="cacheKeyQueryRule")
    def cache_key_query_rule(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        query rule info
        """
        return pulumi.get(self, "cache_key_query_rule")

    @_builtins.property
    @pulumi.getter(name="cdnId")
    def cdn_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cdn_id")

    @_builtins.property
    @pulumi.getter(name="certificateType")
    def certificate_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Certificate type
        """
        return pulumi.get(self, "certificate_type")

    @_builtins.property
    @pulumi.getter
    def cname(self) -> pulumi.Output[_builtins.str]:
        """
        cname info
        """
        return pulumi.get(self, "cname")

    @_builtins.property
    @pulumi.getter(name="fileExtension")
    def file_extension(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        File extension info
        """
        return pulumi.get(self, "file_extension")

    @_builtins.property
    @pulumi.getter
    def header(self) -> pulumi.Output[_builtins.str]:
        """
        Header info
        """
        return pulumi.get(self, "header")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> pulumi.Output[_builtins.str]:
        """
        Host name
        """
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        HTTP port number
        """
        return pulumi.get(self, "http_port")

    @_builtins.property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        HTTPS port number
        """
        return pulumi.get(self, "https_port")

    @_builtins.property
    @pulumi.getter(name="originAddress")
    def origin_address(self) -> pulumi.Output[_builtins.str]:
        """
        origin address info
        """
        return pulumi.get(self, "origin_address")

    @_builtins.property
    @pulumi.getter(name="originType")
    def origin_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Origin type info
        """
        return pulumi.get(self, "origin_type")

    @_builtins.property
    @pulumi.getter
    def path(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Path details
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="performanceConfiguration")
    def performance_configuration(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        performance configuration info
        """
        return pulumi.get(self, "performance_configuration")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Protocol name
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="respectHeaders")
    def respect_headers(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        respect headers info
        """
        return pulumi.get(self, "respect_headers")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Status info of the CDN instance
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="vendorName")
    def vendor_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Vendor name
        """
        return pulumi.get(self, "vendor_name")

