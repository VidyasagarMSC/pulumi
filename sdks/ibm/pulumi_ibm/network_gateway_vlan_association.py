# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['NetworkGatewayVlanAssociationArgs', 'NetworkGatewayVlanAssociation']

@pulumi.input_type
class NetworkGatewayVlanAssociationArgs:
    def __init__(__self__, *,
                 gateway_id: pulumi.Input[_builtins.float],
                 network_vlan_id: pulumi.Input[_builtins.float],
                 bypass: Optional[pulumi.Input[_builtins.bool]] = None,
                 network_gateway_vlan_association_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a NetworkGatewayVlanAssociation resource.
        :param pulumi.Input[_builtins.float] gateway_id: Gateway instance ID
        :param pulumi.Input[_builtins.float] network_vlan_id: The Identifier of the VLAN to be associated
        :param pulumi.Input[_builtins.bool] bypass: Indicates if the VLAN should be in bypass or routed modes
        """
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "network_vlan_id", network_vlan_id)
        if bypass is not None:
            pulumi.set(__self__, "bypass", bypass)
        if network_gateway_vlan_association_id is not None:
            pulumi.set(__self__, "network_gateway_vlan_association_id", network_gateway_vlan_association_id)

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> pulumi.Input[_builtins.float]:
        """
        Gateway instance ID
        """
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "gateway_id", value)

    @_builtins.property
    @pulumi.getter(name="networkVlanId")
    def network_vlan_id(self) -> pulumi.Input[_builtins.float]:
        """
        The Identifier of the VLAN to be associated
        """
        return pulumi.get(self, "network_vlan_id")

    @network_vlan_id.setter
    def network_vlan_id(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "network_vlan_id", value)

    @_builtins.property
    @pulumi.getter
    def bypass(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if the VLAN should be in bypass or routed modes
        """
        return pulumi.get(self, "bypass")

    @bypass.setter
    def bypass(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "bypass", value)

    @_builtins.property
    @pulumi.getter(name="networkGatewayVlanAssociationId")
    def network_gateway_vlan_association_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "network_gateway_vlan_association_id")

    @network_gateway_vlan_association_id.setter
    def network_gateway_vlan_association_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_gateway_vlan_association_id", value)


@pulumi.input_type
class _NetworkGatewayVlanAssociationState:
    def __init__(__self__, *,
                 bypass: Optional[pulumi.Input[_builtins.bool]] = None,
                 gateway_id: Optional[pulumi.Input[_builtins.float]] = None,
                 network_gateway_vlan_association_id: Optional[pulumi.Input[_builtins.str]] = None,
                 network_vlan_id: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering NetworkGatewayVlanAssociation resources.
        :param pulumi.Input[_builtins.bool] bypass: Indicates if the VLAN should be in bypass or routed modes
        :param pulumi.Input[_builtins.float] gateway_id: Gateway instance ID
        :param pulumi.Input[_builtins.float] network_vlan_id: The Identifier of the VLAN to be associated
        """
        if bypass is not None:
            pulumi.set(__self__, "bypass", bypass)
        if gateway_id is not None:
            pulumi.set(__self__, "gateway_id", gateway_id)
        if network_gateway_vlan_association_id is not None:
            pulumi.set(__self__, "network_gateway_vlan_association_id", network_gateway_vlan_association_id)
        if network_vlan_id is not None:
            pulumi.set(__self__, "network_vlan_id", network_vlan_id)

    @_builtins.property
    @pulumi.getter
    def bypass(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if the VLAN should be in bypass or routed modes
        """
        return pulumi.get(self, "bypass")

    @bypass.setter
    def bypass(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "bypass", value)

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Gateway instance ID
        """
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "gateway_id", value)

    @_builtins.property
    @pulumi.getter(name="networkGatewayVlanAssociationId")
    def network_gateway_vlan_association_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "network_gateway_vlan_association_id")

    @network_gateway_vlan_association_id.setter
    def network_gateway_vlan_association_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_gateway_vlan_association_id", value)

    @_builtins.property
    @pulumi.getter(name="networkVlanId")
    def network_vlan_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The Identifier of the VLAN to be associated
        """
        return pulumi.get(self, "network_vlan_id")

    @network_vlan_id.setter
    def network_vlan_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "network_vlan_id", value)


@pulumi.type_token("ibm:index/networkGatewayVlanAssociation:NetworkGatewayVlanAssociation")
class NetworkGatewayVlanAssociation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bypass: Optional[pulumi.Input[_builtins.bool]] = None,
                 gateway_id: Optional[pulumi.Input[_builtins.float]] = None,
                 network_gateway_vlan_association_id: Optional[pulumi.Input[_builtins.str]] = None,
                 network_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a NetworkGatewayVlanAssociation resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] bypass: Indicates if the VLAN should be in bypass or routed modes
        :param pulumi.Input[_builtins.float] gateway_id: Gateway instance ID
        :param pulumi.Input[_builtins.float] network_vlan_id: The Identifier of the VLAN to be associated
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NetworkGatewayVlanAssociationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NetworkGatewayVlanAssociation resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NetworkGatewayVlanAssociationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NetworkGatewayVlanAssociationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bypass: Optional[pulumi.Input[_builtins.bool]] = None,
                 gateway_id: Optional[pulumi.Input[_builtins.float]] = None,
                 network_gateway_vlan_association_id: Optional[pulumi.Input[_builtins.str]] = None,
                 network_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NetworkGatewayVlanAssociationArgs.__new__(NetworkGatewayVlanAssociationArgs)

            __props__.__dict__["bypass"] = bypass
            if gateway_id is None and not opts.urn:
                raise TypeError("Missing required property 'gateway_id'")
            __props__.__dict__["gateway_id"] = gateway_id
            __props__.__dict__["network_gateway_vlan_association_id"] = network_gateway_vlan_association_id
            if network_vlan_id is None and not opts.urn:
                raise TypeError("Missing required property 'network_vlan_id'")
            __props__.__dict__["network_vlan_id"] = network_vlan_id
        super(NetworkGatewayVlanAssociation, __self__).__init__(
            'ibm:index/networkGatewayVlanAssociation:NetworkGatewayVlanAssociation',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bypass: Optional[pulumi.Input[_builtins.bool]] = None,
            gateway_id: Optional[pulumi.Input[_builtins.float]] = None,
            network_gateway_vlan_association_id: Optional[pulumi.Input[_builtins.str]] = None,
            network_vlan_id: Optional[pulumi.Input[_builtins.float]] = None) -> 'NetworkGatewayVlanAssociation':
        """
        Get an existing NetworkGatewayVlanAssociation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] bypass: Indicates if the VLAN should be in bypass or routed modes
        :param pulumi.Input[_builtins.float] gateway_id: Gateway instance ID
        :param pulumi.Input[_builtins.float] network_vlan_id: The Identifier of the VLAN to be associated
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NetworkGatewayVlanAssociationState.__new__(_NetworkGatewayVlanAssociationState)

        __props__.__dict__["bypass"] = bypass
        __props__.__dict__["gateway_id"] = gateway_id
        __props__.__dict__["network_gateway_vlan_association_id"] = network_gateway_vlan_association_id
        __props__.__dict__["network_vlan_id"] = network_vlan_id
        return NetworkGatewayVlanAssociation(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def bypass(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Indicates if the VLAN should be in bypass or routed modes
        """
        return pulumi.get(self, "bypass")

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> pulumi.Output[_builtins.float]:
        """
        Gateway instance ID
        """
        return pulumi.get(self, "gateway_id")

    @_builtins.property
    @pulumi.getter(name="networkGatewayVlanAssociationId")
    def network_gateway_vlan_association_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "network_gateway_vlan_association_id")

    @_builtins.property
    @pulumi.getter(name="networkVlanId")
    def network_vlan_id(self) -> pulumi.Output[_builtins.float]:
        """
        The Identifier of the VLAN to be associated
        """
        return pulumi.get(self, "network_vlan_id")

