# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetContainerClusterWorkerResult',
    'AwaitableGetContainerClusterWorkerResult',
    'get_container_cluster_worker',
    'get_container_cluster_worker_output',
]

@pulumi.output_type
class GetContainerClusterWorkerResult:
    """
    A collection of values returned by getContainerClusterWorker.
    """
    def __init__(__self__, account_guid=None, id=None, org_guid=None, private_ip=None, private_vlan=None, public_ip=None, public_vlan=None, region=None, resource_controller_url=None, resource_group_id=None, space_guid=None, state=None, status=None, worker_id=None):
        if account_guid and not isinstance(account_guid, str):
            raise TypeError("Expected argument 'account_guid' to be a str")
        pulumi.set(__self__, "account_guid", account_guid)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if org_guid and not isinstance(org_guid, str):
            raise TypeError("Expected argument 'org_guid' to be a str")
        pulumi.set(__self__, "org_guid", org_guid)
        if private_ip and not isinstance(private_ip, str):
            raise TypeError("Expected argument 'private_ip' to be a str")
        pulumi.set(__self__, "private_ip", private_ip)
        if private_vlan and not isinstance(private_vlan, str):
            raise TypeError("Expected argument 'private_vlan' to be a str")
        pulumi.set(__self__, "private_vlan", private_vlan)
        if public_ip and not isinstance(public_ip, str):
            raise TypeError("Expected argument 'public_ip' to be a str")
        pulumi.set(__self__, "public_ip", public_ip)
        if public_vlan and not isinstance(public_vlan, str):
            raise TypeError("Expected argument 'public_vlan' to be a str")
        pulumi.set(__self__, "public_vlan", public_vlan)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_controller_url and not isinstance(resource_controller_url, str):
            raise TypeError("Expected argument 'resource_controller_url' to be a str")
        pulumi.set(__self__, "resource_controller_url", resource_controller_url)
        if resource_group_id and not isinstance(resource_group_id, str):
            raise TypeError("Expected argument 'resource_group_id' to be a str")
        pulumi.set(__self__, "resource_group_id", resource_group_id)
        if space_guid and not isinstance(space_guid, str):
            raise TypeError("Expected argument 'space_guid' to be a str")
        pulumi.set(__self__, "space_guid", space_guid)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if worker_id and not isinstance(worker_id, str):
            raise TypeError("Expected argument 'worker_id' to be a str")
        pulumi.set(__self__, "worker_id", worker_id)

    @_builtins.property
    @pulumi.getter(name="accountGuid")
    @_utilities.deprecated("""Deprecated""")
    def account_guid(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "account_guid")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="orgGuid")
    @_utilities.deprecated("""Deprecated""")
    def org_guid(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "org_guid")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> _builtins.str:
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="privateVlan")
    def private_vlan(self) -> _builtins.str:
        return pulumi.get(self, "private_vlan")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="publicVlan")
    def public_vlan(self) -> _builtins.str:
        return pulumi.get(self, "public_vlan")

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def region(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> _builtins.str:
        return pulumi.get(self, "resource_controller_url")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter(name="spaceGuid")
    @_utilities.deprecated("""Deprecated""")
    def space_guid(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "space_guid")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="workerId")
    def worker_id(self) -> _builtins.str:
        return pulumi.get(self, "worker_id")


class AwaitableGetContainerClusterWorkerResult(GetContainerClusterWorkerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetContainerClusterWorkerResult(
            account_guid=self.account_guid,
            id=self.id,
            org_guid=self.org_guid,
            private_ip=self.private_ip,
            private_vlan=self.private_vlan,
            public_ip=self.public_ip,
            public_vlan=self.public_vlan,
            region=self.region,
            resource_controller_url=self.resource_controller_url,
            resource_group_id=self.resource_group_id,
            space_guid=self.space_guid,
            state=self.state,
            status=self.status,
            worker_id=self.worker_id)


def get_container_cluster_worker(account_guid: Optional[_builtins.str] = None,
                                 id: Optional[_builtins.str] = None,
                                 org_guid: Optional[_builtins.str] = None,
                                 region: Optional[_builtins.str] = None,
                                 resource_group_id: Optional[_builtins.str] = None,
                                 space_guid: Optional[_builtins.str] = None,
                                 worker_id: Optional[_builtins.str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetContainerClusterWorkerResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountGuid'] = account_guid
    __args__['id'] = id
    __args__['orgGuid'] = org_guid
    __args__['region'] = region
    __args__['resourceGroupId'] = resource_group_id
    __args__['spaceGuid'] = space_guid
    __args__['workerId'] = worker_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getContainerClusterWorker:getContainerClusterWorker', __args__, opts=opts, typ=GetContainerClusterWorkerResult, package_ref=_utilities.get_package()).value

    return AwaitableGetContainerClusterWorkerResult(
        account_guid=pulumi.get(__ret__, 'account_guid'),
        id=pulumi.get(__ret__, 'id'),
        org_guid=pulumi.get(__ret__, 'org_guid'),
        private_ip=pulumi.get(__ret__, 'private_ip'),
        private_vlan=pulumi.get(__ret__, 'private_vlan'),
        public_ip=pulumi.get(__ret__, 'public_ip'),
        public_vlan=pulumi.get(__ret__, 'public_vlan'),
        region=pulumi.get(__ret__, 'region'),
        resource_controller_url=pulumi.get(__ret__, 'resource_controller_url'),
        resource_group_id=pulumi.get(__ret__, 'resource_group_id'),
        space_guid=pulumi.get(__ret__, 'space_guid'),
        state=pulumi.get(__ret__, 'state'),
        status=pulumi.get(__ret__, 'status'),
        worker_id=pulumi.get(__ret__, 'worker_id'))
def get_container_cluster_worker_output(account_guid: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        org_guid: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        resource_group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        space_guid: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        worker_id: Optional[pulumi.Input[_builtins.str]] = None,
                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetContainerClusterWorkerResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountGuid'] = account_guid
    __args__['id'] = id
    __args__['orgGuid'] = org_guid
    __args__['region'] = region
    __args__['resourceGroupId'] = resource_group_id
    __args__['spaceGuid'] = space_guid
    __args__['workerId'] = worker_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getContainerClusterWorker:getContainerClusterWorker', __args__, opts=opts, typ=GetContainerClusterWorkerResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetContainerClusterWorkerResult(
        account_guid=pulumi.get(__response__, 'account_guid'),
        id=pulumi.get(__response__, 'id'),
        org_guid=pulumi.get(__response__, 'org_guid'),
        private_ip=pulumi.get(__response__, 'private_ip'),
        private_vlan=pulumi.get(__response__, 'private_vlan'),
        public_ip=pulumi.get(__response__, 'public_ip'),
        public_vlan=pulumi.get(__response__, 'public_vlan'),
        region=pulumi.get(__response__, 'region'),
        resource_controller_url=pulumi.get(__response__, 'resource_controller_url'),
        resource_group_id=pulumi.get(__response__, 'resource_group_id'),
        space_guid=pulumi.get(__response__, 'space_guid'),
        state=pulumi.get(__response__, 'state'),
        status=pulumi.get(__response__, 'status'),
        worker_id=pulumi.get(__response__, 'worker_id')))
