# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIamPolicyTemplateVersionResult',
    'AwaitableGetIamPolicyTemplateVersionResult',
    'get_iam_policy_template_version',
    'get_iam_policy_template_version_output',
]

@pulumi.output_type
class GetIamPolicyTemplateVersionResult:
    """
    A collection of values returned by getIamPolicyTemplateVersion.
    """
    def __init__(__self__, account_id=None, committed=None, description=None, id=None, name=None, policies=None, policy_template_id=None, version=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if committed and not isinstance(committed, bool):
            raise TypeError("Expected argument 'committed' to be a bool")
        pulumi.set(__self__, "committed", committed)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if policies and not isinstance(policies, list):
            raise TypeError("Expected argument 'policies' to be a list")
        pulumi.set(__self__, "policies", policies)
        if policy_template_id and not isinstance(policy_template_id, str):
            raise TypeError("Expected argument 'policy_template_id' to be a str")
        pulumi.set(__self__, "policy_template_id", policy_template_id)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter
    def committed(self) -> _builtins.bool:
        return pulumi.get(self, "committed")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def policies(self) -> Sequence['outputs.GetIamPolicyTemplateVersionPolicyResult']:
        return pulumi.get(self, "policies")

    @_builtins.property
    @pulumi.getter(name="policyTemplateId")
    def policy_template_id(self) -> _builtins.str:
        return pulumi.get(self, "policy_template_id")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        return pulumi.get(self, "version")


class AwaitableGetIamPolicyTemplateVersionResult(GetIamPolicyTemplateVersionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamPolicyTemplateVersionResult(
            account_id=self.account_id,
            committed=self.committed,
            description=self.description,
            id=self.id,
            name=self.name,
            policies=self.policies,
            policy_template_id=self.policy_template_id,
            version=self.version)


def get_iam_policy_template_version(policy_template_id: Optional[_builtins.str] = None,
                                    version: Optional[_builtins.str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamPolicyTemplateVersionResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['policyTemplateId'] = policy_template_id
    __args__['version'] = version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIamPolicyTemplateVersion:getIamPolicyTemplateVersion', __args__, opts=opts, typ=GetIamPolicyTemplateVersionResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIamPolicyTemplateVersionResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        committed=pulumi.get(__ret__, 'committed'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        policies=pulumi.get(__ret__, 'policies'),
        policy_template_id=pulumi.get(__ret__, 'policy_template_id'),
        version=pulumi.get(__ret__, 'version'))
def get_iam_policy_template_version_output(policy_template_id: Optional[pulumi.Input[_builtins.str]] = None,
                                           version: Optional[pulumi.Input[_builtins.str]] = None,
                                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamPolicyTemplateVersionResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['policyTemplateId'] = policy_template_id
    __args__['version'] = version
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIamPolicyTemplateVersion:getIamPolicyTemplateVersion', __args__, opts=opts, typ=GetIamPolicyTemplateVersionResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIamPolicyTemplateVersionResult(
        account_id=pulumi.get(__response__, 'account_id'),
        committed=pulumi.get(__response__, 'committed'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        policies=pulumi.get(__response__, 'policies'),
        policy_template_id=pulumi.get(__response__, 'policy_template_id'),
        version=pulumi.get(__response__, 'version')))
