# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetIamTrustedProfileIdentityResult',
    'AwaitableGetIamTrustedProfileIdentityResult',
    'get_iam_trusted_profile_identity',
    'get_iam_trusted_profile_identity_output',
]

@pulumi.output_type
class GetIamTrustedProfileIdentityResult:
    """
    A collection of values returned by getIamTrustedProfileIdentity.
    """
    def __init__(__self__, accounts=None, description=None, iam_id=None, id=None, identifier=None, identifier_id=None, identity_type=None, profile_id=None, type=None):
        if accounts and not isinstance(accounts, list):
            raise TypeError("Expected argument 'accounts' to be a list")
        pulumi.set(__self__, "accounts", accounts)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if iam_id and not isinstance(iam_id, str):
            raise TypeError("Expected argument 'iam_id' to be a str")
        pulumi.set(__self__, "iam_id", iam_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identifier and not isinstance(identifier, str):
            raise TypeError("Expected argument 'identifier' to be a str")
        pulumi.set(__self__, "identifier", identifier)
        if identifier_id and not isinstance(identifier_id, str):
            raise TypeError("Expected argument 'identifier_id' to be a str")
        pulumi.set(__self__, "identifier_id", identifier_id)
        if identity_type and not isinstance(identity_type, str):
            raise TypeError("Expected argument 'identity_type' to be a str")
        pulumi.set(__self__, "identity_type", identity_type)
        if profile_id and not isinstance(profile_id, str):
            raise TypeError("Expected argument 'profile_id' to be a str")
        pulumi.set(__self__, "profile_id", profile_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def accounts(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "accounts")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="iamId")
    def iam_id(self) -> _builtins.str:
        return pulumi.get(self, "iam_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def identifier(self) -> _builtins.str:
        return pulumi.get(self, "identifier")

    @_builtins.property
    @pulumi.getter(name="identifierId")
    def identifier_id(self) -> _builtins.str:
        return pulumi.get(self, "identifier_id")

    @_builtins.property
    @pulumi.getter(name="identityType")
    def identity_type(self) -> _builtins.str:
        return pulumi.get(self, "identity_type")

    @_builtins.property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> _builtins.str:
        return pulumi.get(self, "profile_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")


class AwaitableGetIamTrustedProfileIdentityResult(GetIamTrustedProfileIdentityResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamTrustedProfileIdentityResult(
            accounts=self.accounts,
            description=self.description,
            iam_id=self.iam_id,
            id=self.id,
            identifier=self.identifier,
            identifier_id=self.identifier_id,
            identity_type=self.identity_type,
            profile_id=self.profile_id,
            type=self.type)


def get_iam_trusted_profile_identity(id: Optional[_builtins.str] = None,
                                     identifier_id: Optional[_builtins.str] = None,
                                     identity_type: Optional[_builtins.str] = None,
                                     profile_id: Optional[_builtins.str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamTrustedProfileIdentityResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['identifierId'] = identifier_id
    __args__['identityType'] = identity_type
    __args__['profileId'] = profile_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIamTrustedProfileIdentity:getIamTrustedProfileIdentity', __args__, opts=opts, typ=GetIamTrustedProfileIdentityResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIamTrustedProfileIdentityResult(
        accounts=pulumi.get(__ret__, 'accounts'),
        description=pulumi.get(__ret__, 'description'),
        iam_id=pulumi.get(__ret__, 'iam_id'),
        id=pulumi.get(__ret__, 'id'),
        identifier=pulumi.get(__ret__, 'identifier'),
        identifier_id=pulumi.get(__ret__, 'identifier_id'),
        identity_type=pulumi.get(__ret__, 'identity_type'),
        profile_id=pulumi.get(__ret__, 'profile_id'),
        type=pulumi.get(__ret__, 'type'))
def get_iam_trusted_profile_identity_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            identifier_id: Optional[pulumi.Input[_builtins.str]] = None,
                                            identity_type: Optional[pulumi.Input[_builtins.str]] = None,
                                            profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamTrustedProfileIdentityResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['identifierId'] = identifier_id
    __args__['identityType'] = identity_type
    __args__['profileId'] = profile_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIamTrustedProfileIdentity:getIamTrustedProfileIdentity', __args__, opts=opts, typ=GetIamTrustedProfileIdentityResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIamTrustedProfileIdentityResult(
        accounts=pulumi.get(__response__, 'accounts'),
        description=pulumi.get(__response__, 'description'),
        iam_id=pulumi.get(__response__, 'iam_id'),
        id=pulumi.get(__response__, 'id'),
        identifier=pulumi.get(__response__, 'identifier'),
        identifier_id=pulumi.get(__response__, 'identifier_id'),
        identity_type=pulumi.get(__response__, 'identity_type'),
        profile_id=pulumi.get(__response__, 'profile_id'),
        type=pulumi.get(__response__, 'type')))
