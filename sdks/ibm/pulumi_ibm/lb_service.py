# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['LbServiceArgs', 'LbService']

@pulumi.input_type
class LbServiceArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[_builtins.bool],
                 health_check_type: pulumi.Input[_builtins.str],
                 ip_address_id: pulumi.Input[_builtins.float],
                 port: pulumi.Input[_builtins.float],
                 service_group_id: pulumi.Input[_builtins.float],
                 weight: pulumi.Input[_builtins.float],
                 lb_service_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a LbService resource.
        :param pulumi.Input[_builtins.bool] enabled: Boolean value true, if enabled else false
        :param pulumi.Input[_builtins.str] health_check_type: health check type
        :param pulumi.Input[_builtins.float] ip_address_id: IP Address ID
        :param pulumi.Input[_builtins.float] port: Port number
        :param pulumi.Input[_builtins.float] service_group_id: service group ID
        :param pulumi.Input[_builtins.float] weight: Weight value
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags for the resource
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "health_check_type", health_check_type)
        pulumi.set(__self__, "ip_address_id", ip_address_id)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "service_group_id", service_group_id)
        pulumi.set(__self__, "weight", weight)
        if lb_service_id is not None:
            pulumi.set(__self__, "lb_service_id", lb_service_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[_builtins.bool]:
        """
        Boolean value true, if enabled else false
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="healthCheckType")
    def health_check_type(self) -> pulumi.Input[_builtins.str]:
        """
        health check type
        """
        return pulumi.get(self, "health_check_type")

    @health_check_type.setter
    def health_check_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "health_check_type", value)

    @_builtins.property
    @pulumi.getter(name="ipAddressId")
    def ip_address_id(self) -> pulumi.Input[_builtins.float]:
        """
        IP Address ID
        """
        return pulumi.get(self, "ip_address_id")

    @ip_address_id.setter
    def ip_address_id(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "ip_address_id", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Input[_builtins.float]:
        """
        Port number
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter(name="serviceGroupId")
    def service_group_id(self) -> pulumi.Input[_builtins.float]:
        """
        service group ID
        """
        return pulumi.get(self, "service_group_id")

    @service_group_id.setter
    def service_group_id(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "service_group_id", value)

    @_builtins.property
    @pulumi.getter
    def weight(self) -> pulumi.Input[_builtins.float]:
        """
        Weight value
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "weight", value)

    @_builtins.property
    @pulumi.getter(name="lbServiceId")
    def lb_service_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "lb_service_id")

    @lb_service_id.setter
    def lb_service_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lb_service_id", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Tags for the resource
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _LbServiceState:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 health_check_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address_id: Optional[pulumi.Input[_builtins.float]] = None,
                 lb_service_id: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 service_group_id: Optional[pulumi.Input[_builtins.float]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 weight: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering LbService resources.
        :param pulumi.Input[_builtins.bool] enabled: Boolean value true, if enabled else false
        :param pulumi.Input[_builtins.str] health_check_type: health check type
        :param pulumi.Input[_builtins.float] ip_address_id: IP Address ID
        :param pulumi.Input[_builtins.float] port: Port number
        :param pulumi.Input[_builtins.float] service_group_id: service group ID
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags for the resource
        :param pulumi.Input[_builtins.float] weight: Weight value
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if health_check_type is not None:
            pulumi.set(__self__, "health_check_type", health_check_type)
        if ip_address_id is not None:
            pulumi.set(__self__, "ip_address_id", ip_address_id)
        if lb_service_id is not None:
            pulumi.set(__self__, "lb_service_id", lb_service_id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if service_group_id is not None:
            pulumi.set(__self__, "service_group_id", service_group_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Boolean value true, if enabled else false
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="healthCheckType")
    def health_check_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        health check type
        """
        return pulumi.get(self, "health_check_type")

    @health_check_type.setter
    def health_check_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "health_check_type", value)

    @_builtins.property
    @pulumi.getter(name="ipAddressId")
    def ip_address_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        IP Address ID
        """
        return pulumi.get(self, "ip_address_id")

    @ip_address_id.setter
    def ip_address_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ip_address_id", value)

    @_builtins.property
    @pulumi.getter(name="lbServiceId")
    def lb_service_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "lb_service_id")

    @lb_service_id.setter
    def lb_service_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lb_service_id", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Port number
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter(name="serviceGroupId")
    def service_group_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        service group ID
        """
        return pulumi.get(self, "service_group_id")

    @service_group_id.setter
    def service_group_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "service_group_id", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Tags for the resource
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Weight value
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "weight", value)


@pulumi.type_token("ibm:index/lbService:LbService")
class LbService(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 health_check_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address_id: Optional[pulumi.Input[_builtins.float]] = None,
                 lb_service_id: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 service_group_id: Optional[pulumi.Input[_builtins.float]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 weight: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a LbService resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] enabled: Boolean value true, if enabled else false
        :param pulumi.Input[_builtins.str] health_check_type: health check type
        :param pulumi.Input[_builtins.float] ip_address_id: IP Address ID
        :param pulumi.Input[_builtins.float] port: Port number
        :param pulumi.Input[_builtins.float] service_group_id: service group ID
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags for the resource
        :param pulumi.Input[_builtins.float] weight: Weight value
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LbServiceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a LbService resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LbServiceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LbServiceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 health_check_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address_id: Optional[pulumi.Input[_builtins.float]] = None,
                 lb_service_id: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 service_group_id: Optional[pulumi.Input[_builtins.float]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 weight: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LbServiceArgs.__new__(LbServiceArgs)

            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
            if health_check_type is None and not opts.urn:
                raise TypeError("Missing required property 'health_check_type'")
            __props__.__dict__["health_check_type"] = health_check_type
            if ip_address_id is None and not opts.urn:
                raise TypeError("Missing required property 'ip_address_id'")
            __props__.__dict__["ip_address_id"] = ip_address_id
            __props__.__dict__["lb_service_id"] = lb_service_id
            if port is None and not opts.urn:
                raise TypeError("Missing required property 'port'")
            __props__.__dict__["port"] = port
            if service_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'service_group_id'")
            __props__.__dict__["service_group_id"] = service_group_id
            __props__.__dict__["tags"] = tags
            if weight is None and not opts.urn:
                raise TypeError("Missing required property 'weight'")
            __props__.__dict__["weight"] = weight
        super(LbService, __self__).__init__(
            'ibm:index/lbService:LbService',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            health_check_type: Optional[pulumi.Input[_builtins.str]] = None,
            ip_address_id: Optional[pulumi.Input[_builtins.float]] = None,
            lb_service_id: Optional[pulumi.Input[_builtins.str]] = None,
            port: Optional[pulumi.Input[_builtins.float]] = None,
            service_group_id: Optional[pulumi.Input[_builtins.float]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            weight: Optional[pulumi.Input[_builtins.float]] = None) -> 'LbService':
        """
        Get an existing LbService resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] enabled: Boolean value true, if enabled else false
        :param pulumi.Input[_builtins.str] health_check_type: health check type
        :param pulumi.Input[_builtins.float] ip_address_id: IP Address ID
        :param pulumi.Input[_builtins.float] port: Port number
        :param pulumi.Input[_builtins.float] service_group_id: service group ID
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags for the resource
        :param pulumi.Input[_builtins.float] weight: Weight value
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LbServiceState.__new__(_LbServiceState)

        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["health_check_type"] = health_check_type
        __props__.__dict__["ip_address_id"] = ip_address_id
        __props__.__dict__["lb_service_id"] = lb_service_id
        __props__.__dict__["port"] = port
        __props__.__dict__["service_group_id"] = service_group_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["weight"] = weight
        return LbService(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        Boolean value true, if enabled else false
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="healthCheckType")
    def health_check_type(self) -> pulumi.Output[_builtins.str]:
        """
        health check type
        """
        return pulumi.get(self, "health_check_type")

    @_builtins.property
    @pulumi.getter(name="ipAddressId")
    def ip_address_id(self) -> pulumi.Output[_builtins.float]:
        """
        IP Address ID
        """
        return pulumi.get(self, "ip_address_id")

    @_builtins.property
    @pulumi.getter(name="lbServiceId")
    def lb_service_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "lb_service_id")

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Output[_builtins.float]:
        """
        Port number
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="serviceGroupId")
    def service_group_id(self) -> pulumi.Output[_builtins.float]:
        """
        service group ID
        """
        return pulumi.get(self, "service_group_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Tags for the resource
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> pulumi.Output[_builtins.float]:
        """
        Weight value
        """
        return pulumi.get(self, "weight")

