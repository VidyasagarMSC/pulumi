# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetDlPortResult',
    'AwaitableGetDlPortResult',
    'get_dl_port',
    'get_dl_port_output',
]

@pulumi.output_type
class GetDlPortResult:
    """
    A collection of values returned by getDlPort.
    """
    def __init__(__self__, direct_link_count=None, id=None, label=None, location_display_name=None, location_name=None, port_id=None, provider_name=None, supported_link_speeds=None):
        if direct_link_count and not isinstance(direct_link_count, float):
            raise TypeError("Expected argument 'direct_link_count' to be a float")
        pulumi.set(__self__, "direct_link_count", direct_link_count)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if label and not isinstance(label, str):
            raise TypeError("Expected argument 'label' to be a str")
        pulumi.set(__self__, "label", label)
        if location_display_name and not isinstance(location_display_name, str):
            raise TypeError("Expected argument 'location_display_name' to be a str")
        pulumi.set(__self__, "location_display_name", location_display_name)
        if location_name and not isinstance(location_name, str):
            raise TypeError("Expected argument 'location_name' to be a str")
        pulumi.set(__self__, "location_name", location_name)
        if port_id and not isinstance(port_id, str):
            raise TypeError("Expected argument 'port_id' to be a str")
        pulumi.set(__self__, "port_id", port_id)
        if provider_name and not isinstance(provider_name, str):
            raise TypeError("Expected argument 'provider_name' to be a str")
        pulumi.set(__self__, "provider_name", provider_name)
        if supported_link_speeds and not isinstance(supported_link_speeds, list):
            raise TypeError("Expected argument 'supported_link_speeds' to be a list")
        pulumi.set(__self__, "supported_link_speeds", supported_link_speeds)

    @_builtins.property
    @pulumi.getter(name="directLinkCount")
    def direct_link_count(self) -> _builtins.float:
        return pulumi.get(self, "direct_link_count")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def label(self) -> _builtins.str:
        return pulumi.get(self, "label")

    @_builtins.property
    @pulumi.getter(name="locationDisplayName")
    def location_display_name(self) -> _builtins.str:
        return pulumi.get(self, "location_display_name")

    @_builtins.property
    @pulumi.getter(name="locationName")
    def location_name(self) -> _builtins.str:
        return pulumi.get(self, "location_name")

    @_builtins.property
    @pulumi.getter(name="portId")
    def port_id(self) -> _builtins.str:
        return pulumi.get(self, "port_id")

    @_builtins.property
    @pulumi.getter(name="providerName")
    def provider_name(self) -> _builtins.str:
        return pulumi.get(self, "provider_name")

    @_builtins.property
    @pulumi.getter(name="supportedLinkSpeeds")
    def supported_link_speeds(self) -> Sequence[_builtins.float]:
        return pulumi.get(self, "supported_link_speeds")


class AwaitableGetDlPortResult(GetDlPortResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDlPortResult(
            direct_link_count=self.direct_link_count,
            id=self.id,
            label=self.label,
            location_display_name=self.location_display_name,
            location_name=self.location_name,
            port_id=self.port_id,
            provider_name=self.provider_name,
            supported_link_speeds=self.supported_link_speeds)


def get_dl_port(id: Optional[_builtins.str] = None,
                port_id: Optional[_builtins.str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDlPortResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['portId'] = port_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getDlPort:getDlPort', __args__, opts=opts, typ=GetDlPortResult, package_ref=_utilities.get_package()).value

    return AwaitableGetDlPortResult(
        direct_link_count=pulumi.get(__ret__, 'direct_link_count'),
        id=pulumi.get(__ret__, 'id'),
        label=pulumi.get(__ret__, 'label'),
        location_display_name=pulumi.get(__ret__, 'location_display_name'),
        location_name=pulumi.get(__ret__, 'location_name'),
        port_id=pulumi.get(__ret__, 'port_id'),
        provider_name=pulumi.get(__ret__, 'provider_name'),
        supported_link_speeds=pulumi.get(__ret__, 'supported_link_speeds'))
def get_dl_port_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       port_id: Optional[pulumi.Input[_builtins.str]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDlPortResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['portId'] = port_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getDlPort:getDlPort', __args__, opts=opts, typ=GetDlPortResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetDlPortResult(
        direct_link_count=pulumi.get(__response__, 'direct_link_count'),
        id=pulumi.get(__response__, 'id'),
        label=pulumi.get(__response__, 'label'),
        location_display_name=pulumi.get(__response__, 'location_display_name'),
        location_name=pulumi.get(__response__, 'location_name'),
        port_id=pulumi.get(__response__, 'port_id'),
        provider_name=pulumi.get(__response__, 'provider_name'),
        supported_link_speeds=pulumi.get(__response__, 'supported_link_speeds')))
