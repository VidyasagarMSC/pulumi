# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetEnIntegrationCosResult',
    'AwaitableGetEnIntegrationCosResult',
    'get_en_integration_cos',
    'get_en_integration_cos_output',
]

@pulumi.output_type
class GetEnIntegrationCosResult:
    """
    A collection of values returned by getEnIntegrationCos.
    """
    def __init__(__self__, id=None, instance_guid=None, integration_id=None, metadatas=None, type=None, updated_at=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_guid and not isinstance(instance_guid, str):
            raise TypeError("Expected argument 'instance_guid' to be a str")
        pulumi.set(__self__, "instance_guid", instance_guid)
        if integration_id and not isinstance(integration_id, str):
            raise TypeError("Expected argument 'integration_id' to be a str")
        pulumi.set(__self__, "integration_id", integration_id)
        if metadatas and not isinstance(metadatas, list):
            raise TypeError("Expected argument 'metadatas' to be a list")
        pulumi.set(__self__, "metadatas", metadatas)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceGuid")
    def instance_guid(self) -> _builtins.str:
        return pulumi.get(self, "instance_guid")

    @_builtins.property
    @pulumi.getter(name="integrationId")
    def integration_id(self) -> _builtins.str:
        return pulumi.get(self, "integration_id")

    @_builtins.property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetEnIntegrationCosMetadataResult']:
        return pulumi.get(self, "metadatas")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")


class AwaitableGetEnIntegrationCosResult(GetEnIntegrationCosResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEnIntegrationCosResult(
            id=self.id,
            instance_guid=self.instance_guid,
            integration_id=self.integration_id,
            metadatas=self.metadatas,
            type=self.type,
            updated_at=self.updated_at)


def get_en_integration_cos(id: Optional[_builtins.str] = None,
                           instance_guid: Optional[_builtins.str] = None,
                           integration_id: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEnIntegrationCosResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceGuid'] = instance_guid
    __args__['integrationId'] = integration_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getEnIntegrationCos:getEnIntegrationCos', __args__, opts=opts, typ=GetEnIntegrationCosResult, package_ref=_utilities.get_package()).value

    return AwaitableGetEnIntegrationCosResult(
        id=pulumi.get(__ret__, 'id'),
        instance_guid=pulumi.get(__ret__, 'instance_guid'),
        integration_id=pulumi.get(__ret__, 'integration_id'),
        metadatas=pulumi.get(__ret__, 'metadatas'),
        type=pulumi.get(__ret__, 'type'),
        updated_at=pulumi.get(__ret__, 'updated_at'))
def get_en_integration_cos_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  instance_guid: Optional[pulumi.Input[_builtins.str]] = None,
                                  integration_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEnIntegrationCosResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceGuid'] = instance_guid
    __args__['integrationId'] = integration_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getEnIntegrationCos:getEnIntegrationCos', __args__, opts=opts, typ=GetEnIntegrationCosResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetEnIntegrationCosResult(
        id=pulumi.get(__response__, 'id'),
        instance_guid=pulumi.get(__response__, 'instance_guid'),
        integration_id=pulumi.get(__response__, 'integration_id'),
        metadatas=pulumi.get(__response__, 'metadatas'),
        type=pulumi.get(__response__, 'type'),
        updated_at=pulumi.get(__response__, 'updated_at')))
