# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SmPrivateCertificateConfigurationActionSignCsrArgs', 'SmPrivateCertificateConfigurationActionSignCsr']

@pulumi.input_type
class SmPrivateCertificateConfigurationActionSignCsrArgs:
    def __init__(__self__, *,
                 csr: pulumi.Input[_builtins.str],
                 instance_id: pulumi.Input[_builtins.str],
                 alt_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 common_name: Optional[pulumi.Input[_builtins.str]] = None,
                 countries: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 exclude_cn_from_sans: Optional[pulumi.Input[_builtins.bool]] = None,
                 format: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_sans: Optional[pulumi.Input[_builtins.str]] = None,
                 localities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 max_path_length: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organizations: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 other_sans: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 ous: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 permitted_dns_domains: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 postal_codes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 provinces: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 serial_number: Optional[pulumi.Input[_builtins.str]] = None,
                 sm_private_certificate_configuration_action_sign_csr_id: Optional[pulumi.Input[_builtins.str]] = None,
                 street_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 ttl: Optional[pulumi.Input[_builtins.str]] = None,
                 uri_sans: Optional[pulumi.Input[_builtins.str]] = None,
                 use_csr_values: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a SmPrivateCertificateConfigurationActionSignCsr resource.
        :param pulumi.Input[_builtins.str] csr: The certificate signing request.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Secrets Manager instance.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] alt_names: With the Subject Alternative Name field, you can specify additional host names to be protected by a single SSL
               certificate.
        :param pulumi.Input[_builtins.str] common_name: The Common Name (AKA CN) represents the server name that is protected by the SSL certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] countries: The Country (C) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.bool] exclude_cn_from_sans: Controls whether the common name is excluded from Subject Alternative Names (SANs).If the common name set to `true`, it
               is not included in DNS or Email SANs if they apply. This field can be useful if the common name is a human-readable
               identifier, instead of a hostname or an email address.
        :param pulumi.Input[_builtins.str] format: The format of the returned data.
        :param pulumi.Input[_builtins.str] ip_sans: The IP Subject Alternative Names to define for the CA certificate, in a comma-delimited list.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] localities: The Locality (L) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[_builtins.float] max_path_length: The maximum path length to encode in the generated certificate. `-1` means no limit.If the signing certificate has a
               maximum path length set, the path length is set to one less than that of the signing certificate. A limit of `0` means a
               literal path length of zero.
        :param pulumi.Input[_builtins.str] name: The name that uniquely identifies a configuration
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] organizations: The Organization (O) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] other_sans: The custom Object Identifier (OID) or UTF8-string Subject Alternative Names to define for the CA certificate.The
               alternative names must match the values that are specified in the `allowed_other_sans` field in the associated
               certificate template. The format is the same as OpenSSL: `<oid>:<type>:<value>` where the current valid type is `UTF8`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ous: The Organizational Unit (OU) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] permitted_dns_domains: The allowed DNS domains or subdomains for the certificates that are to be signed and issued by this CA certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] postal_codes: The postal code values to define in the subject field of the resulting certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] provinces: The Province (ST) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[_builtins.str] region: The region of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] serial_number: The serial number to assign to the generated certificate. To assign a random serial number, you can omit this field.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] street_addresses: The street address values to define in the subject field of the resulting certificate.
        :param pulumi.Input[_builtins.str] ttl: The requested time-to-live (TTL) for certificates that are created by this CA. This field's value cannot be longer than
               the `max_ttl` limit.The value can be supplied as a string representation of a duration in hours, for example '8760h'. In
               the API response, this value is returned in seconds (integer).
        :param pulumi.Input[_builtins.str] uri_sans: The URI Subject Alternative Names to define for the CA certificate, in a comma-delimited list.
        :param pulumi.Input[_builtins.bool] use_csr_values: Determines whether to use values from a certificate signing request (CSR) to complete a
               `private_cert_configuration_action_sign_csr` action.
        """
        pulumi.set(__self__, "csr", csr)
        pulumi.set(__self__, "instance_id", instance_id)
        if alt_names is not None:
            pulumi.set(__self__, "alt_names", alt_names)
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if countries is not None:
            pulumi.set(__self__, "countries", countries)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if exclude_cn_from_sans is not None:
            pulumi.set(__self__, "exclude_cn_from_sans", exclude_cn_from_sans)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if ip_sans is not None:
            pulumi.set(__self__, "ip_sans", ip_sans)
        if localities is not None:
            pulumi.set(__self__, "localities", localities)
        if max_path_length is not None:
            pulumi.set(__self__, "max_path_length", max_path_length)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organizations is not None:
            pulumi.set(__self__, "organizations", organizations)
        if other_sans is not None:
            pulumi.set(__self__, "other_sans", other_sans)
        if ous is not None:
            pulumi.set(__self__, "ous", ous)
        if permitted_dns_domains is not None:
            pulumi.set(__self__, "permitted_dns_domains", permitted_dns_domains)
        if postal_codes is not None:
            pulumi.set(__self__, "postal_codes", postal_codes)
        if provinces is not None:
            pulumi.set(__self__, "provinces", provinces)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if sm_private_certificate_configuration_action_sign_csr_id is not None:
            pulumi.set(__self__, "sm_private_certificate_configuration_action_sign_csr_id", sm_private_certificate_configuration_action_sign_csr_id)
        if street_addresses is not None:
            pulumi.set(__self__, "street_addresses", street_addresses)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if uri_sans is not None:
            pulumi.set(__self__, "uri_sans", uri_sans)
        if use_csr_values is not None:
            pulumi.set(__self__, "use_csr_values", use_csr_values)

    @_builtins.property
    @pulumi.getter
    def csr(self) -> pulumi.Input[_builtins.str]:
        """
        The certificate signing request.
        """
        return pulumi.get(self, "csr")

    @csr.setter
    def csr(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "csr", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the Secrets Manager instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="altNames")
    def alt_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        With the Subject Alternative Name field, you can specify additional host names to be protected by a single SSL
        certificate.
        """
        return pulumi.get(self, "alt_names")

    @alt_names.setter
    def alt_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "alt_names", value)

    @_builtins.property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Common Name (AKA CN) represents the server name that is protected by the SSL certificate.
        """
        return pulumi.get(self, "common_name")

    @common_name.setter
    def common_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "common_name", value)

    @_builtins.property
    @pulumi.getter
    def countries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Country (C) values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "countries")

    @countries.setter
    def countries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "countries", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter(name="excludeCnFromSans")
    def exclude_cn_from_sans(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Controls whether the common name is excluded from Subject Alternative Names (SANs).If the common name set to `true`, it
        is not included in DNS or Email SANs if they apply. This field can be useful if the common name is a human-readable
        identifier, instead of a hostname or an email address.
        """
        return pulumi.get(self, "exclude_cn_from_sans")

    @exclude_cn_from_sans.setter
    def exclude_cn_from_sans(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "exclude_cn_from_sans", value)

    @_builtins.property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The format of the returned data.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "format", value)

    @_builtins.property
    @pulumi.getter(name="ipSans")
    def ip_sans(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IP Subject Alternative Names to define for the CA certificate, in a comma-delimited list.
        """
        return pulumi.get(self, "ip_sans")

    @ip_sans.setter
    def ip_sans(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_sans", value)

    @_builtins.property
    @pulumi.getter
    def localities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Locality (L) values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "localities")

    @localities.setter
    def localities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "localities", value)

    @_builtins.property
    @pulumi.getter(name="maxPathLength")
    def max_path_length(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The maximum path length to encode in the generated certificate. `-1` means no limit.If the signing certificate has a
        maximum path length set, the path length is set to one less than that of the signing certificate. A limit of `0` means a
        literal path length of zero.
        """
        return pulumi.get(self, "max_path_length")

    @max_path_length.setter
    def max_path_length(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "max_path_length", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name that uniquely identifies a configuration
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def organizations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Organization (O) values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "organizations")

    @organizations.setter
    def organizations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "organizations", value)

    @_builtins.property
    @pulumi.getter(name="otherSans")
    def other_sans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The custom Object Identifier (OID) or UTF8-string Subject Alternative Names to define for the CA certificate.The
        alternative names must match the values that are specified in the `allowed_other_sans` field in the associated
        certificate template. The format is the same as OpenSSL: `<oid>:<type>:<value>` where the current valid type is `UTF8`.
        """
        return pulumi.get(self, "other_sans")

    @other_sans.setter
    def other_sans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "other_sans", value)

    @_builtins.property
    @pulumi.getter
    def ous(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Organizational Unit (OU) values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "ous")

    @ous.setter
    def ous(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "ous", value)

    @_builtins.property
    @pulumi.getter(name="permittedDnsDomains")
    def permitted_dns_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The allowed DNS domains or subdomains for the certificates that are to be signed and issued by this CA certificate.
        """
        return pulumi.get(self, "permitted_dns_domains")

    @permitted_dns_domains.setter
    def permitted_dns_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "permitted_dns_domains", value)

    @_builtins.property
    @pulumi.getter(name="postalCodes")
    def postal_codes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The postal code values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "postal_codes")

    @postal_codes.setter
    def postal_codes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "postal_codes", value)

    @_builtins.property
    @pulumi.getter
    def provinces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Province (ST) values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "provinces")

    @provinces.setter
    def provinces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "provinces", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the Secrets Manager instance.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The serial number to assign to the generated certificate. To assign a random serial number, you can omit this field.
        """
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "serial_number", value)

    @_builtins.property
    @pulumi.getter(name="smPrivateCertificateConfigurationActionSignCsrId")
    def sm_private_certificate_configuration_action_sign_csr_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "sm_private_certificate_configuration_action_sign_csr_id")

    @sm_private_certificate_configuration_action_sign_csr_id.setter
    def sm_private_certificate_configuration_action_sign_csr_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sm_private_certificate_configuration_action_sign_csr_id", value)

    @_builtins.property
    @pulumi.getter(name="streetAddresses")
    def street_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The street address values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "street_addresses")

    @street_addresses.setter
    def street_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "street_addresses", value)

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The requested time-to-live (TTL) for certificates that are created by this CA. This field's value cannot be longer than
        the `max_ttl` limit.The value can be supplied as a string representation of a duration in hours, for example '8760h'. In
        the API response, this value is returned in seconds (integer).
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ttl", value)

    @_builtins.property
    @pulumi.getter(name="uriSans")
    def uri_sans(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URI Subject Alternative Names to define for the CA certificate, in a comma-delimited list.
        """
        return pulumi.get(self, "uri_sans")

    @uri_sans.setter
    def uri_sans(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "uri_sans", value)

    @_builtins.property
    @pulumi.getter(name="useCsrValues")
    def use_csr_values(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Determines whether to use values from a certificate signing request (CSR) to complete a
        `private_cert_configuration_action_sign_csr` action.
        """
        return pulumi.get(self, "use_csr_values")

    @use_csr_values.setter
    def use_csr_values(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "use_csr_values", value)


@pulumi.input_type
class _SmPrivateCertificateConfigurationActionSignCsrState:
    def __init__(__self__, *,
                 alt_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 common_name: Optional[pulumi.Input[_builtins.str]] = None,
                 countries: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 csr: Optional[pulumi.Input[_builtins.str]] = None,
                 datas: Optional[pulumi.Input[Sequence[pulumi.Input['SmPrivateCertificateConfigurationActionSignCsrDataArgs']]]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 exclude_cn_from_sans: Optional[pulumi.Input[_builtins.bool]] = None,
                 format: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_sans: Optional[pulumi.Input[_builtins.str]] = None,
                 localities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 max_path_length: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organizations: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 other_sans: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 ous: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 permitted_dns_domains: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 postal_codes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 provinces: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 serial_number: Optional[pulumi.Input[_builtins.str]] = None,
                 sm_private_certificate_configuration_action_sign_csr_id: Optional[pulumi.Input[_builtins.str]] = None,
                 street_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 ttl: Optional[pulumi.Input[_builtins.str]] = None,
                 uri_sans: Optional[pulumi.Input[_builtins.str]] = None,
                 use_csr_values: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        Input properties used for looking up and filtering SmPrivateCertificateConfigurationActionSignCsr resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] alt_names: With the Subject Alternative Name field, you can specify additional host names to be protected by a single SSL
               certificate.
        :param pulumi.Input[_builtins.str] common_name: The Common Name (AKA CN) represents the server name that is protected by the SSL certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] countries: The Country (C) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[_builtins.str] csr: The certificate signing request.
        :param pulumi.Input[Sequence[pulumi.Input['SmPrivateCertificateConfigurationActionSignCsrDataArgs']]] datas: The configuration action data.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.bool] exclude_cn_from_sans: Controls whether the common name is excluded from Subject Alternative Names (SANs).If the common name set to `true`, it
               is not included in DNS or Email SANs if they apply. This field can be useful if the common name is a human-readable
               identifier, instead of a hostname or an email address.
        :param pulumi.Input[_builtins.str] format: The format of the returned data.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] ip_sans: The IP Subject Alternative Names to define for the CA certificate, in a comma-delimited list.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] localities: The Locality (L) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[_builtins.float] max_path_length: The maximum path length to encode in the generated certificate. `-1` means no limit.If the signing certificate has a
               maximum path length set, the path length is set to one less than that of the signing certificate. A limit of `0` means a
               literal path length of zero.
        :param pulumi.Input[_builtins.str] name: The name that uniquely identifies a configuration
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] organizations: The Organization (O) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] other_sans: The custom Object Identifier (OID) or UTF8-string Subject Alternative Names to define for the CA certificate.The
               alternative names must match the values that are specified in the `allowed_other_sans` field in the associated
               certificate template. The format is the same as OpenSSL: `<oid>:<type>:<value>` where the current valid type is `UTF8`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ous: The Organizational Unit (OU) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] permitted_dns_domains: The allowed DNS domains or subdomains for the certificates that are to be signed and issued by this CA certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] postal_codes: The postal code values to define in the subject field of the resulting certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] provinces: The Province (ST) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[_builtins.str] region: The region of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] serial_number: The serial number to assign to the generated certificate. To assign a random serial number, you can omit this field.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] street_addresses: The street address values to define in the subject field of the resulting certificate.
        :param pulumi.Input[_builtins.str] ttl: The requested time-to-live (TTL) for certificates that are created by this CA. This field's value cannot be longer than
               the `max_ttl` limit.The value can be supplied as a string representation of a duration in hours, for example '8760h'. In
               the API response, this value is returned in seconds (integer).
        :param pulumi.Input[_builtins.str] uri_sans: The URI Subject Alternative Names to define for the CA certificate, in a comma-delimited list.
        :param pulumi.Input[_builtins.bool] use_csr_values: Determines whether to use values from a certificate signing request (CSR) to complete a
               `private_cert_configuration_action_sign_csr` action.
        """
        if alt_names is not None:
            pulumi.set(__self__, "alt_names", alt_names)
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if countries is not None:
            pulumi.set(__self__, "countries", countries)
        if csr is not None:
            pulumi.set(__self__, "csr", csr)
        if datas is not None:
            pulumi.set(__self__, "datas", datas)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if exclude_cn_from_sans is not None:
            pulumi.set(__self__, "exclude_cn_from_sans", exclude_cn_from_sans)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if ip_sans is not None:
            pulumi.set(__self__, "ip_sans", ip_sans)
        if localities is not None:
            pulumi.set(__self__, "localities", localities)
        if max_path_length is not None:
            pulumi.set(__self__, "max_path_length", max_path_length)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organizations is not None:
            pulumi.set(__self__, "organizations", organizations)
        if other_sans is not None:
            pulumi.set(__self__, "other_sans", other_sans)
        if ous is not None:
            pulumi.set(__self__, "ous", ous)
        if permitted_dns_domains is not None:
            pulumi.set(__self__, "permitted_dns_domains", permitted_dns_domains)
        if postal_codes is not None:
            pulumi.set(__self__, "postal_codes", postal_codes)
        if provinces is not None:
            pulumi.set(__self__, "provinces", provinces)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if sm_private_certificate_configuration_action_sign_csr_id is not None:
            pulumi.set(__self__, "sm_private_certificate_configuration_action_sign_csr_id", sm_private_certificate_configuration_action_sign_csr_id)
        if street_addresses is not None:
            pulumi.set(__self__, "street_addresses", street_addresses)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if uri_sans is not None:
            pulumi.set(__self__, "uri_sans", uri_sans)
        if use_csr_values is not None:
            pulumi.set(__self__, "use_csr_values", use_csr_values)

    @_builtins.property
    @pulumi.getter(name="altNames")
    def alt_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        With the Subject Alternative Name field, you can specify additional host names to be protected by a single SSL
        certificate.
        """
        return pulumi.get(self, "alt_names")

    @alt_names.setter
    def alt_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "alt_names", value)

    @_builtins.property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Common Name (AKA CN) represents the server name that is protected by the SSL certificate.
        """
        return pulumi.get(self, "common_name")

    @common_name.setter
    def common_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "common_name", value)

    @_builtins.property
    @pulumi.getter
    def countries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Country (C) values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "countries")

    @countries.setter
    def countries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "countries", value)

    @_builtins.property
    @pulumi.getter
    def csr(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The certificate signing request.
        """
        return pulumi.get(self, "csr")

    @csr.setter
    def csr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "csr", value)

    @_builtins.property
    @pulumi.getter
    def datas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SmPrivateCertificateConfigurationActionSignCsrDataArgs']]]]:
        """
        The configuration action data.
        """
        return pulumi.get(self, "datas")

    @datas.setter
    def datas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SmPrivateCertificateConfigurationActionSignCsrDataArgs']]]]):
        pulumi.set(self, "datas", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter(name="excludeCnFromSans")
    def exclude_cn_from_sans(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Controls whether the common name is excluded from Subject Alternative Names (SANs).If the common name set to `true`, it
        is not included in DNS or Email SANs if they apply. This field can be useful if the common name is a human-readable
        identifier, instead of a hostname or an email address.
        """
        return pulumi.get(self, "exclude_cn_from_sans")

    @exclude_cn_from_sans.setter
    def exclude_cn_from_sans(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "exclude_cn_from_sans", value)

    @_builtins.property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The format of the returned data.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "format", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the Secrets Manager instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="ipSans")
    def ip_sans(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IP Subject Alternative Names to define for the CA certificate, in a comma-delimited list.
        """
        return pulumi.get(self, "ip_sans")

    @ip_sans.setter
    def ip_sans(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_sans", value)

    @_builtins.property
    @pulumi.getter
    def localities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Locality (L) values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "localities")

    @localities.setter
    def localities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "localities", value)

    @_builtins.property
    @pulumi.getter(name="maxPathLength")
    def max_path_length(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The maximum path length to encode in the generated certificate. `-1` means no limit.If the signing certificate has a
        maximum path length set, the path length is set to one less than that of the signing certificate. A limit of `0` means a
        literal path length of zero.
        """
        return pulumi.get(self, "max_path_length")

    @max_path_length.setter
    def max_path_length(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "max_path_length", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name that uniquely identifies a configuration
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def organizations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Organization (O) values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "organizations")

    @organizations.setter
    def organizations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "organizations", value)

    @_builtins.property
    @pulumi.getter(name="otherSans")
    def other_sans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The custom Object Identifier (OID) or UTF8-string Subject Alternative Names to define for the CA certificate.The
        alternative names must match the values that are specified in the `allowed_other_sans` field in the associated
        certificate template. The format is the same as OpenSSL: `<oid>:<type>:<value>` where the current valid type is `UTF8`.
        """
        return pulumi.get(self, "other_sans")

    @other_sans.setter
    def other_sans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "other_sans", value)

    @_builtins.property
    @pulumi.getter
    def ous(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Organizational Unit (OU) values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "ous")

    @ous.setter
    def ous(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "ous", value)

    @_builtins.property
    @pulumi.getter(name="permittedDnsDomains")
    def permitted_dns_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The allowed DNS domains or subdomains for the certificates that are to be signed and issued by this CA certificate.
        """
        return pulumi.get(self, "permitted_dns_domains")

    @permitted_dns_domains.setter
    def permitted_dns_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "permitted_dns_domains", value)

    @_builtins.property
    @pulumi.getter(name="postalCodes")
    def postal_codes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The postal code values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "postal_codes")

    @postal_codes.setter
    def postal_codes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "postal_codes", value)

    @_builtins.property
    @pulumi.getter
    def provinces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Province (ST) values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "provinces")

    @provinces.setter
    def provinces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "provinces", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the Secrets Manager instance.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The serial number to assign to the generated certificate. To assign a random serial number, you can omit this field.
        """
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "serial_number", value)

    @_builtins.property
    @pulumi.getter(name="smPrivateCertificateConfigurationActionSignCsrId")
    def sm_private_certificate_configuration_action_sign_csr_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "sm_private_certificate_configuration_action_sign_csr_id")

    @sm_private_certificate_configuration_action_sign_csr_id.setter
    def sm_private_certificate_configuration_action_sign_csr_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sm_private_certificate_configuration_action_sign_csr_id", value)

    @_builtins.property
    @pulumi.getter(name="streetAddresses")
    def street_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The street address values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "street_addresses")

    @street_addresses.setter
    def street_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "street_addresses", value)

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The requested time-to-live (TTL) for certificates that are created by this CA. This field's value cannot be longer than
        the `max_ttl` limit.The value can be supplied as a string representation of a duration in hours, for example '8760h'. In
        the API response, this value is returned in seconds (integer).
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ttl", value)

    @_builtins.property
    @pulumi.getter(name="uriSans")
    def uri_sans(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URI Subject Alternative Names to define for the CA certificate, in a comma-delimited list.
        """
        return pulumi.get(self, "uri_sans")

    @uri_sans.setter
    def uri_sans(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "uri_sans", value)

    @_builtins.property
    @pulumi.getter(name="useCsrValues")
    def use_csr_values(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Determines whether to use values from a certificate signing request (CSR) to complete a
        `private_cert_configuration_action_sign_csr` action.
        """
        return pulumi.get(self, "use_csr_values")

    @use_csr_values.setter
    def use_csr_values(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "use_csr_values", value)


@pulumi.type_token("ibm:index/smPrivateCertificateConfigurationActionSignCsr:SmPrivateCertificateConfigurationActionSignCsr")
class SmPrivateCertificateConfigurationActionSignCsr(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alt_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 common_name: Optional[pulumi.Input[_builtins.str]] = None,
                 countries: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 csr: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 exclude_cn_from_sans: Optional[pulumi.Input[_builtins.bool]] = None,
                 format: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_sans: Optional[pulumi.Input[_builtins.str]] = None,
                 localities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 max_path_length: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organizations: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 other_sans: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 ous: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 permitted_dns_domains: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 postal_codes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 provinces: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 serial_number: Optional[pulumi.Input[_builtins.str]] = None,
                 sm_private_certificate_configuration_action_sign_csr_id: Optional[pulumi.Input[_builtins.str]] = None,
                 street_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 ttl: Optional[pulumi.Input[_builtins.str]] = None,
                 uri_sans: Optional[pulumi.Input[_builtins.str]] = None,
                 use_csr_values: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        """
        Create a SmPrivateCertificateConfigurationActionSignCsr resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] alt_names: With the Subject Alternative Name field, you can specify additional host names to be protected by a single SSL
               certificate.
        :param pulumi.Input[_builtins.str] common_name: The Common Name (AKA CN) represents the server name that is protected by the SSL certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] countries: The Country (C) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[_builtins.str] csr: The certificate signing request.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.bool] exclude_cn_from_sans: Controls whether the common name is excluded from Subject Alternative Names (SANs).If the common name set to `true`, it
               is not included in DNS or Email SANs if they apply. This field can be useful if the common name is a human-readable
               identifier, instead of a hostname or an email address.
        :param pulumi.Input[_builtins.str] format: The format of the returned data.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] ip_sans: The IP Subject Alternative Names to define for the CA certificate, in a comma-delimited list.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] localities: The Locality (L) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[_builtins.float] max_path_length: The maximum path length to encode in the generated certificate. `-1` means no limit.If the signing certificate has a
               maximum path length set, the path length is set to one less than that of the signing certificate. A limit of `0` means a
               literal path length of zero.
        :param pulumi.Input[_builtins.str] name: The name that uniquely identifies a configuration
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] organizations: The Organization (O) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] other_sans: The custom Object Identifier (OID) or UTF8-string Subject Alternative Names to define for the CA certificate.The
               alternative names must match the values that are specified in the `allowed_other_sans` field in the associated
               certificate template. The format is the same as OpenSSL: `<oid>:<type>:<value>` where the current valid type is `UTF8`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ous: The Organizational Unit (OU) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] permitted_dns_domains: The allowed DNS domains or subdomains for the certificates that are to be signed and issued by this CA certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] postal_codes: The postal code values to define in the subject field of the resulting certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] provinces: The Province (ST) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[_builtins.str] region: The region of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] serial_number: The serial number to assign to the generated certificate. To assign a random serial number, you can omit this field.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] street_addresses: The street address values to define in the subject field of the resulting certificate.
        :param pulumi.Input[_builtins.str] ttl: The requested time-to-live (TTL) for certificates that are created by this CA. This field's value cannot be longer than
               the `max_ttl` limit.The value can be supplied as a string representation of a duration in hours, for example '8760h'. In
               the API response, this value is returned in seconds (integer).
        :param pulumi.Input[_builtins.str] uri_sans: The URI Subject Alternative Names to define for the CA certificate, in a comma-delimited list.
        :param pulumi.Input[_builtins.bool] use_csr_values: Determines whether to use values from a certificate signing request (CSR) to complete a
               `private_cert_configuration_action_sign_csr` action.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SmPrivateCertificateConfigurationActionSignCsrArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SmPrivateCertificateConfigurationActionSignCsr resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SmPrivateCertificateConfigurationActionSignCsrArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SmPrivateCertificateConfigurationActionSignCsrArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alt_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 common_name: Optional[pulumi.Input[_builtins.str]] = None,
                 countries: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 csr: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 exclude_cn_from_sans: Optional[pulumi.Input[_builtins.bool]] = None,
                 format: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_sans: Optional[pulumi.Input[_builtins.str]] = None,
                 localities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 max_path_length: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organizations: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 other_sans: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 ous: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 permitted_dns_domains: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 postal_codes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 provinces: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 serial_number: Optional[pulumi.Input[_builtins.str]] = None,
                 sm_private_certificate_configuration_action_sign_csr_id: Optional[pulumi.Input[_builtins.str]] = None,
                 street_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 ttl: Optional[pulumi.Input[_builtins.str]] = None,
                 uri_sans: Optional[pulumi.Input[_builtins.str]] = None,
                 use_csr_values: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SmPrivateCertificateConfigurationActionSignCsrArgs.__new__(SmPrivateCertificateConfigurationActionSignCsrArgs)

            __props__.__dict__["alt_names"] = alt_names
            __props__.__dict__["common_name"] = common_name
            __props__.__dict__["countries"] = countries
            if csr is None and not opts.urn:
                raise TypeError("Missing required property 'csr'")
            __props__.__dict__["csr"] = None if csr is None else pulumi.Output.secret(csr)
            __props__.__dict__["endpoint_type"] = endpoint_type
            __props__.__dict__["exclude_cn_from_sans"] = exclude_cn_from_sans
            __props__.__dict__["format"] = format
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["ip_sans"] = ip_sans
            __props__.__dict__["localities"] = localities
            __props__.__dict__["max_path_length"] = max_path_length
            __props__.__dict__["name"] = name
            __props__.__dict__["organizations"] = organizations
            __props__.__dict__["other_sans"] = other_sans
            __props__.__dict__["ous"] = ous
            __props__.__dict__["permitted_dns_domains"] = permitted_dns_domains
            __props__.__dict__["postal_codes"] = postal_codes
            __props__.__dict__["provinces"] = provinces
            __props__.__dict__["region"] = region
            __props__.__dict__["serial_number"] = serial_number
            __props__.__dict__["sm_private_certificate_configuration_action_sign_csr_id"] = sm_private_certificate_configuration_action_sign_csr_id
            __props__.__dict__["street_addresses"] = street_addresses
            __props__.__dict__["ttl"] = ttl
            __props__.__dict__["uri_sans"] = uri_sans
            __props__.__dict__["use_csr_values"] = use_csr_values
            __props__.__dict__["datas"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["csr", "datas"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(SmPrivateCertificateConfigurationActionSignCsr, __self__).__init__(
            'ibm:index/smPrivateCertificateConfigurationActionSignCsr:SmPrivateCertificateConfigurationActionSignCsr',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alt_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            common_name: Optional[pulumi.Input[_builtins.str]] = None,
            countries: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            csr: Optional[pulumi.Input[_builtins.str]] = None,
            datas: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SmPrivateCertificateConfigurationActionSignCsrDataArgs', 'SmPrivateCertificateConfigurationActionSignCsrDataArgsDict']]]]] = None,
            endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
            exclude_cn_from_sans: Optional[pulumi.Input[_builtins.bool]] = None,
            format: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            ip_sans: Optional[pulumi.Input[_builtins.str]] = None,
            localities: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            max_path_length: Optional[pulumi.Input[_builtins.float]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            organizations: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            other_sans: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            ous: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            permitted_dns_domains: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            postal_codes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            provinces: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            serial_number: Optional[pulumi.Input[_builtins.str]] = None,
            sm_private_certificate_configuration_action_sign_csr_id: Optional[pulumi.Input[_builtins.str]] = None,
            street_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            ttl: Optional[pulumi.Input[_builtins.str]] = None,
            uri_sans: Optional[pulumi.Input[_builtins.str]] = None,
            use_csr_values: Optional[pulumi.Input[_builtins.bool]] = None) -> 'SmPrivateCertificateConfigurationActionSignCsr':
        """
        Get an existing SmPrivateCertificateConfigurationActionSignCsr resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] alt_names: With the Subject Alternative Name field, you can specify additional host names to be protected by a single SSL
               certificate.
        :param pulumi.Input[_builtins.str] common_name: The Common Name (AKA CN) represents the server name that is protected by the SSL certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] countries: The Country (C) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[_builtins.str] csr: The certificate signing request.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SmPrivateCertificateConfigurationActionSignCsrDataArgs', 'SmPrivateCertificateConfigurationActionSignCsrDataArgsDict']]]] datas: The configuration action data.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.bool] exclude_cn_from_sans: Controls whether the common name is excluded from Subject Alternative Names (SANs).If the common name set to `true`, it
               is not included in DNS or Email SANs if they apply. This field can be useful if the common name is a human-readable
               identifier, instead of a hostname or an email address.
        :param pulumi.Input[_builtins.str] format: The format of the returned data.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] ip_sans: The IP Subject Alternative Names to define for the CA certificate, in a comma-delimited list.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] localities: The Locality (L) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[_builtins.float] max_path_length: The maximum path length to encode in the generated certificate. `-1` means no limit.If the signing certificate has a
               maximum path length set, the path length is set to one less than that of the signing certificate. A limit of `0` means a
               literal path length of zero.
        :param pulumi.Input[_builtins.str] name: The name that uniquely identifies a configuration
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] organizations: The Organization (O) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] other_sans: The custom Object Identifier (OID) or UTF8-string Subject Alternative Names to define for the CA certificate.The
               alternative names must match the values that are specified in the `allowed_other_sans` field in the associated
               certificate template. The format is the same as OpenSSL: `<oid>:<type>:<value>` where the current valid type is `UTF8`.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] ous: The Organizational Unit (OU) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] permitted_dns_domains: The allowed DNS domains or subdomains for the certificates that are to be signed and issued by this CA certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] postal_codes: The postal code values to define in the subject field of the resulting certificate.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] provinces: The Province (ST) values to define in the subject field of the resulting certificate.
        :param pulumi.Input[_builtins.str] region: The region of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] serial_number: The serial number to assign to the generated certificate. To assign a random serial number, you can omit this field.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] street_addresses: The street address values to define in the subject field of the resulting certificate.
        :param pulumi.Input[_builtins.str] ttl: The requested time-to-live (TTL) for certificates that are created by this CA. This field's value cannot be longer than
               the `max_ttl` limit.The value can be supplied as a string representation of a duration in hours, for example '8760h'. In
               the API response, this value is returned in seconds (integer).
        :param pulumi.Input[_builtins.str] uri_sans: The URI Subject Alternative Names to define for the CA certificate, in a comma-delimited list.
        :param pulumi.Input[_builtins.bool] use_csr_values: Determines whether to use values from a certificate signing request (CSR) to complete a
               `private_cert_configuration_action_sign_csr` action.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SmPrivateCertificateConfigurationActionSignCsrState.__new__(_SmPrivateCertificateConfigurationActionSignCsrState)

        __props__.__dict__["alt_names"] = alt_names
        __props__.__dict__["common_name"] = common_name
        __props__.__dict__["countries"] = countries
        __props__.__dict__["csr"] = csr
        __props__.__dict__["datas"] = datas
        __props__.__dict__["endpoint_type"] = endpoint_type
        __props__.__dict__["exclude_cn_from_sans"] = exclude_cn_from_sans
        __props__.__dict__["format"] = format
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["ip_sans"] = ip_sans
        __props__.__dict__["localities"] = localities
        __props__.__dict__["max_path_length"] = max_path_length
        __props__.__dict__["name"] = name
        __props__.__dict__["organizations"] = organizations
        __props__.__dict__["other_sans"] = other_sans
        __props__.__dict__["ous"] = ous
        __props__.__dict__["permitted_dns_domains"] = permitted_dns_domains
        __props__.__dict__["postal_codes"] = postal_codes
        __props__.__dict__["provinces"] = provinces
        __props__.__dict__["region"] = region
        __props__.__dict__["serial_number"] = serial_number
        __props__.__dict__["sm_private_certificate_configuration_action_sign_csr_id"] = sm_private_certificate_configuration_action_sign_csr_id
        __props__.__dict__["street_addresses"] = street_addresses
        __props__.__dict__["ttl"] = ttl
        __props__.__dict__["uri_sans"] = uri_sans
        __props__.__dict__["use_csr_values"] = use_csr_values
        return SmPrivateCertificateConfigurationActionSignCsr(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="altNames")
    def alt_names(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        With the Subject Alternative Name field, you can specify additional host names to be protected by a single SSL
        certificate.
        """
        return pulumi.get(self, "alt_names")

    @_builtins.property
    @pulumi.getter(name="commonName")
    def common_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The Common Name (AKA CN) represents the server name that is protected by the SSL certificate.
        """
        return pulumi.get(self, "common_name")

    @_builtins.property
    @pulumi.getter
    def countries(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        The Country (C) values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "countries")

    @_builtins.property
    @pulumi.getter
    def csr(self) -> pulumi.Output[_builtins.str]:
        """
        The certificate signing request.
        """
        return pulumi.get(self, "csr")

    @_builtins.property
    @pulumi.getter
    def datas(self) -> pulumi.Output[Sequence['outputs.SmPrivateCertificateConfigurationActionSignCsrData']]:
        """
        The configuration action data.
        """
        return pulumi.get(self, "datas")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter(name="excludeCnFromSans")
    def exclude_cn_from_sans(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Controls whether the common name is excluded from Subject Alternative Names (SANs).If the common name set to `true`, it
        is not included in DNS or Email SANs if they apply. This field can be useful if the common name is a human-readable
        identifier, instead of a hostname or an email address.
        """
        return pulumi.get(self, "exclude_cn_from_sans")

    @_builtins.property
    @pulumi.getter
    def format(self) -> pulumi.Output[_builtins.str]:
        """
        The format of the returned data.
        """
        return pulumi.get(self, "format")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the Secrets Manager instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="ipSans")
    def ip_sans(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The IP Subject Alternative Names to define for the CA certificate, in a comma-delimited list.
        """
        return pulumi.get(self, "ip_sans")

    @_builtins.property
    @pulumi.getter
    def localities(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        The Locality (L) values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "localities")

    @_builtins.property
    @pulumi.getter(name="maxPathLength")
    def max_path_length(self) -> pulumi.Output[_builtins.float]:
        """
        The maximum path length to encode in the generated certificate. `-1` means no limit.If the signing certificate has a
        maximum path length set, the path length is set to one less than that of the signing certificate. A limit of `0` means a
        literal path length of zero.
        """
        return pulumi.get(self, "max_path_length")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name that uniquely identifies a configuration
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def organizations(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        The Organization (O) values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "organizations")

    @_builtins.property
    @pulumi.getter(name="otherSans")
    def other_sans(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        The custom Object Identifier (OID) or UTF8-string Subject Alternative Names to define for the CA certificate.The
        alternative names must match the values that are specified in the `allowed_other_sans` field in the associated
        certificate template. The format is the same as OpenSSL: `<oid>:<type>:<value>` where the current valid type is `UTF8`.
        """
        return pulumi.get(self, "other_sans")

    @_builtins.property
    @pulumi.getter
    def ous(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        The Organizational Unit (OU) values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "ous")

    @_builtins.property
    @pulumi.getter(name="permittedDnsDomains")
    def permitted_dns_domains(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        The allowed DNS domains or subdomains for the certificates that are to be signed and issued by this CA certificate.
        """
        return pulumi.get(self, "permitted_dns_domains")

    @_builtins.property
    @pulumi.getter(name="postalCodes")
    def postal_codes(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        The postal code values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "postal_codes")

    @_builtins.property
    @pulumi.getter
    def provinces(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        The Province (ST) values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "provinces")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region of the Secrets Manager instance.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> pulumi.Output[_builtins.str]:
        """
        The serial number to assign to the generated certificate. To assign a random serial number, you can omit this field.
        """
        return pulumi.get(self, "serial_number")

    @_builtins.property
    @pulumi.getter(name="smPrivateCertificateConfigurationActionSignCsrId")
    def sm_private_certificate_configuration_action_sign_csr_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "sm_private_certificate_configuration_action_sign_csr_id")

    @_builtins.property
    @pulumi.getter(name="streetAddresses")
    def street_addresses(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        The street address values to define in the subject field of the resulting certificate.
        """
        return pulumi.get(self, "street_addresses")

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> pulumi.Output[_builtins.str]:
        """
        The requested time-to-live (TTL) for certificates that are created by this CA. This field's value cannot be longer than
        the `max_ttl` limit.The value can be supplied as a string representation of a duration in hours, for example '8760h'. In
        the API response, this value is returned in seconds (integer).
        """
        return pulumi.get(self, "ttl")

    @_builtins.property
    @pulumi.getter(name="uriSans")
    def uri_sans(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The URI Subject Alternative Names to define for the CA certificate, in a comma-delimited list.
        """
        return pulumi.get(self, "uri_sans")

    @_builtins.property
    @pulumi.getter(name="useCsrValues")
    def use_csr_values(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Determines whether to use values from a certificate signing request (CSR) to complete a
        `private_cert_configuration_action_sign_csr` action.
        """
        return pulumi.get(self, "use_csr_values")

