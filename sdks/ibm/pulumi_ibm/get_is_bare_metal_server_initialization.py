# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsBareMetalServerInitializationResult',
    'AwaitableGetIsBareMetalServerInitializationResult',
    'get_is_bare_metal_server_initialization',
    'get_is_bare_metal_server_initialization_output',
]

@pulumi.output_type
class GetIsBareMetalServerInitializationResult:
    """
    A collection of values returned by getIsBareMetalServerInitialization.
    """
    def __init__(__self__, bare_metal_server=None, id=None, image=None, image_name=None, keys=None, passphrase=None, private_key=None, user_accounts=None):
        if bare_metal_server and not isinstance(bare_metal_server, str):
            raise TypeError("Expected argument 'bare_metal_server' to be a str")
        pulumi.set(__self__, "bare_metal_server", bare_metal_server)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image and not isinstance(image, str):
            raise TypeError("Expected argument 'image' to be a str")
        pulumi.set(__self__, "image", image)
        if image_name and not isinstance(image_name, str):
            raise TypeError("Expected argument 'image_name' to be a str")
        pulumi.set(__self__, "image_name", image_name)
        if keys and not isinstance(keys, list):
            raise TypeError("Expected argument 'keys' to be a list")
        pulumi.set(__self__, "keys", keys)
        if passphrase and not isinstance(passphrase, str):
            raise TypeError("Expected argument 'passphrase' to be a str")
        pulumi.set(__self__, "passphrase", passphrase)
        if private_key and not isinstance(private_key, str):
            raise TypeError("Expected argument 'private_key' to be a str")
        pulumi.set(__self__, "private_key", private_key)
        if user_accounts and not isinstance(user_accounts, list):
            raise TypeError("Expected argument 'user_accounts' to be a list")
        pulumi.set(__self__, "user_accounts", user_accounts)

    @_builtins.property
    @pulumi.getter(name="bareMetalServer")
    def bare_metal_server(self) -> _builtins.str:
        return pulumi.get(self, "bare_metal_server")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def image(self) -> _builtins.str:
        return pulumi.get(self, "image")

    @_builtins.property
    @pulumi.getter(name="imageName")
    def image_name(self) -> _builtins.str:
        return pulumi.get(self, "image_name")

    @_builtins.property
    @pulumi.getter
    def keys(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "keys")

    @_builtins.property
    @pulumi.getter
    def passphrase(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "passphrase")

    @_builtins.property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "private_key")

    @_builtins.property
    @pulumi.getter(name="userAccounts")
    def user_accounts(self) -> Sequence['outputs.GetIsBareMetalServerInitializationUserAccountResult']:
        return pulumi.get(self, "user_accounts")


class AwaitableGetIsBareMetalServerInitializationResult(GetIsBareMetalServerInitializationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsBareMetalServerInitializationResult(
            bare_metal_server=self.bare_metal_server,
            id=self.id,
            image=self.image,
            image_name=self.image_name,
            keys=self.keys,
            passphrase=self.passphrase,
            private_key=self.private_key,
            user_accounts=self.user_accounts)


def get_is_bare_metal_server_initialization(bare_metal_server: Optional[_builtins.str] = None,
                                            id: Optional[_builtins.str] = None,
                                            passphrase: Optional[_builtins.str] = None,
                                            private_key: Optional[_builtins.str] = None,
                                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsBareMetalServerInitializationResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['bareMetalServer'] = bare_metal_server
    __args__['id'] = id
    __args__['passphrase'] = passphrase
    __args__['privateKey'] = private_key
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsBareMetalServerInitialization:getIsBareMetalServerInitialization', __args__, opts=opts, typ=GetIsBareMetalServerInitializationResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsBareMetalServerInitializationResult(
        bare_metal_server=pulumi.get(__ret__, 'bare_metal_server'),
        id=pulumi.get(__ret__, 'id'),
        image=pulumi.get(__ret__, 'image'),
        image_name=pulumi.get(__ret__, 'image_name'),
        keys=pulumi.get(__ret__, 'keys'),
        passphrase=pulumi.get(__ret__, 'passphrase'),
        private_key=pulumi.get(__ret__, 'private_key'),
        user_accounts=pulumi.get(__ret__, 'user_accounts'))
def get_is_bare_metal_server_initialization_output(bare_metal_server: Optional[pulumi.Input[_builtins.str]] = None,
                                                   id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                   passphrase: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                   private_key: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsBareMetalServerInitializationResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['bareMetalServer'] = bare_metal_server
    __args__['id'] = id
    __args__['passphrase'] = passphrase
    __args__['privateKey'] = private_key
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsBareMetalServerInitialization:getIsBareMetalServerInitialization', __args__, opts=opts, typ=GetIsBareMetalServerInitializationResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsBareMetalServerInitializationResult(
        bare_metal_server=pulumi.get(__response__, 'bare_metal_server'),
        id=pulumi.get(__response__, 'id'),
        image=pulumi.get(__response__, 'image'),
        image_name=pulumi.get(__response__, 'image_name'),
        keys=pulumi.get(__response__, 'keys'),
        passphrase=pulumi.get(__response__, 'passphrase'),
        private_key=pulumi.get(__response__, 'private_key'),
        user_accounts=pulumi.get(__response__, 'user_accounts')))
