# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ContainerNlbDnsArgs', 'ContainerNlbDns']

@pulumi.input_type
class ContainerNlbDnsArgs:
    def __init__(__self__, *,
                 cluster: pulumi.Input[_builtins.str],
                 nlb_host: pulumi.Input[_builtins.str],
                 nlb_ips: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 container_nlb_dns_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ContainerNlbDns resource.
        :param pulumi.Input[_builtins.str] cluster: The name or ID of the cluster. To list the clusters that you have access to, use the `GET /v1/clusters` API or run
               `ibmcloud ks cluster ls`.
        :param pulumi.Input[_builtins.str] resource_group_id: The ID of the resource group that the cluster is in. To check the resource group ID of the cluster, use the GET
               /v1/clusters/idOrName API. To list available resource group IDs, run ibmcloud resource groups.
        """
        pulumi.set(__self__, "cluster", cluster)
        pulumi.set(__self__, "nlb_host", nlb_host)
        pulumi.set(__self__, "nlb_ips", nlb_ips)
        if container_nlb_dns_id is not None:
            pulumi.set(__self__, "container_nlb_dns_id", container_nlb_dns_id)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> pulumi.Input[_builtins.str]:
        """
        The name or ID of the cluster. To list the clusters that you have access to, use the `GET /v1/clusters` API or run
        `ibmcloud ks cluster ls`.
        """
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster", value)

    @_builtins.property
    @pulumi.getter(name="nlbHost")
    def nlb_host(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "nlb_host")

    @nlb_host.setter
    def nlb_host(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "nlb_host", value)

    @_builtins.property
    @pulumi.getter(name="nlbIps")
    def nlb_ips(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        return pulumi.get(self, "nlb_ips")

    @nlb_ips.setter
    def nlb_ips(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "nlb_ips", value)

    @_builtins.property
    @pulumi.getter(name="containerNlbDnsId")
    def container_nlb_dns_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_nlb_dns_id")

    @container_nlb_dns_id.setter
    def container_nlb_dns_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_nlb_dns_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the resource group that the cluster is in. To check the resource group ID of the cluster, use the GET
        /v1/clusters/idOrName API. To list available resource group IDs, run ibmcloud resource groups.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)


@pulumi.input_type
class _ContainerNlbDnsState:
    def __init__(__self__, *,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 container_nlb_dns_id: Optional[pulumi.Input[_builtins.str]] = None,
                 nlb_dns_type: Optional[pulumi.Input[_builtins.str]] = None,
                 nlb_host: Optional[pulumi.Input[_builtins.str]] = None,
                 nlb_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 nlb_monitor_state: Optional[pulumi.Input[_builtins.str]] = None,
                 nlb_ssl_secret_name: Optional[pulumi.Input[_builtins.str]] = None,
                 nlb_ssl_secret_status: Optional[pulumi.Input[_builtins.str]] = None,
                 nlb_type: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_namespace: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ContainerNlbDns resources.
        :param pulumi.Input[_builtins.str] cluster: The name or ID of the cluster. To list the clusters that you have access to, use the `GET /v1/clusters` API or run
               `ibmcloud ks cluster ls`.
        :param pulumi.Input[_builtins.str] resource_group_id: The ID of the resource group that the cluster is in. To check the resource group ID of the cluster, use the GET
               /v1/clusters/idOrName API. To list available resource group IDs, run ibmcloud resource groups.
        """
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if container_nlb_dns_id is not None:
            pulumi.set(__self__, "container_nlb_dns_id", container_nlb_dns_id)
        if nlb_dns_type is not None:
            pulumi.set(__self__, "nlb_dns_type", nlb_dns_type)
        if nlb_host is not None:
            pulumi.set(__self__, "nlb_host", nlb_host)
        if nlb_ips is not None:
            pulumi.set(__self__, "nlb_ips", nlb_ips)
        if nlb_monitor_state is not None:
            pulumi.set(__self__, "nlb_monitor_state", nlb_monitor_state)
        if nlb_ssl_secret_name is not None:
            pulumi.set(__self__, "nlb_ssl_secret_name", nlb_ssl_secret_name)
        if nlb_ssl_secret_status is not None:
            pulumi.set(__self__, "nlb_ssl_secret_status", nlb_ssl_secret_status)
        if nlb_type is not None:
            pulumi.set(__self__, "nlb_type", nlb_type)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if secret_namespace is not None:
            pulumi.set(__self__, "secret_namespace", secret_namespace)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name or ID of the cluster. To list the clusters that you have access to, use the `GET /v1/clusters` API or run
        `ibmcloud ks cluster ls`.
        """
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster", value)

    @_builtins.property
    @pulumi.getter(name="containerNlbDnsId")
    def container_nlb_dns_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_nlb_dns_id")

    @container_nlb_dns_id.setter
    def container_nlb_dns_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_nlb_dns_id", value)

    @_builtins.property
    @pulumi.getter(name="nlbDnsType")
    def nlb_dns_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "nlb_dns_type")

    @nlb_dns_type.setter
    def nlb_dns_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nlb_dns_type", value)

    @_builtins.property
    @pulumi.getter(name="nlbHost")
    def nlb_host(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "nlb_host")

    @nlb_host.setter
    def nlb_host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nlb_host", value)

    @_builtins.property
    @pulumi.getter(name="nlbIps")
    def nlb_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "nlb_ips")

    @nlb_ips.setter
    def nlb_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "nlb_ips", value)

    @_builtins.property
    @pulumi.getter(name="nlbMonitorState")
    def nlb_monitor_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "nlb_monitor_state")

    @nlb_monitor_state.setter
    def nlb_monitor_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nlb_monitor_state", value)

    @_builtins.property
    @pulumi.getter(name="nlbSslSecretName")
    def nlb_ssl_secret_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "nlb_ssl_secret_name")

    @nlb_ssl_secret_name.setter
    def nlb_ssl_secret_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nlb_ssl_secret_name", value)

    @_builtins.property
    @pulumi.getter(name="nlbSslSecretStatus")
    def nlb_ssl_secret_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "nlb_ssl_secret_status")

    @nlb_ssl_secret_status.setter
    def nlb_ssl_secret_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nlb_ssl_secret_status", value)

    @_builtins.property
    @pulumi.getter(name="nlbType")
    def nlb_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "nlb_type")

    @nlb_type.setter
    def nlb_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nlb_type", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the resource group that the cluster is in. To check the resource group ID of the cluster, use the GET
        /v1/clusters/idOrName API. To list available resource group IDs, run ibmcloud resource groups.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter(name="secretNamespace")
    def secret_namespace(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "secret_namespace")

    @secret_namespace.setter
    def secret_namespace(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_namespace", value)


@pulumi.type_token("ibm:index/containerNlbDns:ContainerNlbDns")
class ContainerNlbDns(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 container_nlb_dns_id: Optional[pulumi.Input[_builtins.str]] = None,
                 nlb_host: Optional[pulumi.Input[_builtins.str]] = None,
                 nlb_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a ContainerNlbDns resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster: The name or ID of the cluster. To list the clusters that you have access to, use the `GET /v1/clusters` API or run
               `ibmcloud ks cluster ls`.
        :param pulumi.Input[_builtins.str] resource_group_id: The ID of the resource group that the cluster is in. To check the resource group ID of the cluster, use the GET
               /v1/clusters/idOrName API. To list available resource group IDs, run ibmcloud resource groups.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ContainerNlbDnsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ContainerNlbDns resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ContainerNlbDnsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ContainerNlbDnsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 container_nlb_dns_id: Optional[pulumi.Input[_builtins.str]] = None,
                 nlb_host: Optional[pulumi.Input[_builtins.str]] = None,
                 nlb_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ContainerNlbDnsArgs.__new__(ContainerNlbDnsArgs)

            if cluster is None and not opts.urn:
                raise TypeError("Missing required property 'cluster'")
            __props__.__dict__["cluster"] = cluster
            __props__.__dict__["container_nlb_dns_id"] = container_nlb_dns_id
            if nlb_host is None and not opts.urn:
                raise TypeError("Missing required property 'nlb_host'")
            __props__.__dict__["nlb_host"] = nlb_host
            if nlb_ips is None and not opts.urn:
                raise TypeError("Missing required property 'nlb_ips'")
            __props__.__dict__["nlb_ips"] = nlb_ips
            __props__.__dict__["resource_group_id"] = resource_group_id
            __props__.__dict__["nlb_dns_type"] = None
            __props__.__dict__["nlb_monitor_state"] = None
            __props__.__dict__["nlb_ssl_secret_name"] = None
            __props__.__dict__["nlb_ssl_secret_status"] = None
            __props__.__dict__["nlb_type"] = None
            __props__.__dict__["secret_namespace"] = None
        super(ContainerNlbDns, __self__).__init__(
            'ibm:index/containerNlbDns:ContainerNlbDns',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster: Optional[pulumi.Input[_builtins.str]] = None,
            container_nlb_dns_id: Optional[pulumi.Input[_builtins.str]] = None,
            nlb_dns_type: Optional[pulumi.Input[_builtins.str]] = None,
            nlb_host: Optional[pulumi.Input[_builtins.str]] = None,
            nlb_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            nlb_monitor_state: Optional[pulumi.Input[_builtins.str]] = None,
            nlb_ssl_secret_name: Optional[pulumi.Input[_builtins.str]] = None,
            nlb_ssl_secret_status: Optional[pulumi.Input[_builtins.str]] = None,
            nlb_type: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            secret_namespace: Optional[pulumi.Input[_builtins.str]] = None) -> 'ContainerNlbDns':
        """
        Get an existing ContainerNlbDns resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster: The name or ID of the cluster. To list the clusters that you have access to, use the `GET /v1/clusters` API or run
               `ibmcloud ks cluster ls`.
        :param pulumi.Input[_builtins.str] resource_group_id: The ID of the resource group that the cluster is in. To check the resource group ID of the cluster, use the GET
               /v1/clusters/idOrName API. To list available resource group IDs, run ibmcloud resource groups.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ContainerNlbDnsState.__new__(_ContainerNlbDnsState)

        __props__.__dict__["cluster"] = cluster
        __props__.__dict__["container_nlb_dns_id"] = container_nlb_dns_id
        __props__.__dict__["nlb_dns_type"] = nlb_dns_type
        __props__.__dict__["nlb_host"] = nlb_host
        __props__.__dict__["nlb_ips"] = nlb_ips
        __props__.__dict__["nlb_monitor_state"] = nlb_monitor_state
        __props__.__dict__["nlb_ssl_secret_name"] = nlb_ssl_secret_name
        __props__.__dict__["nlb_ssl_secret_status"] = nlb_ssl_secret_status
        __props__.__dict__["nlb_type"] = nlb_type
        __props__.__dict__["resource_group_id"] = resource_group_id
        __props__.__dict__["secret_namespace"] = secret_namespace
        return ContainerNlbDns(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> pulumi.Output[_builtins.str]:
        """
        The name or ID of the cluster. To list the clusters that you have access to, use the `GET /v1/clusters` API or run
        `ibmcloud ks cluster ls`.
        """
        return pulumi.get(self, "cluster")

    @_builtins.property
    @pulumi.getter(name="containerNlbDnsId")
    def container_nlb_dns_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "container_nlb_dns_id")

    @_builtins.property
    @pulumi.getter(name="nlbDnsType")
    def nlb_dns_type(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "nlb_dns_type")

    @_builtins.property
    @pulumi.getter(name="nlbHost")
    def nlb_host(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "nlb_host")

    @_builtins.property
    @pulumi.getter(name="nlbIps")
    def nlb_ips(self) -> pulumi.Output[Sequence[_builtins.str]]:
        return pulumi.get(self, "nlb_ips")

    @_builtins.property
    @pulumi.getter(name="nlbMonitorState")
    def nlb_monitor_state(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "nlb_monitor_state")

    @_builtins.property
    @pulumi.getter(name="nlbSslSecretName")
    def nlb_ssl_secret_name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "nlb_ssl_secret_name")

    @_builtins.property
    @pulumi.getter(name="nlbSslSecretStatus")
    def nlb_ssl_secret_status(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "nlb_ssl_secret_status")

    @_builtins.property
    @pulumi.getter(name="nlbType")
    def nlb_type(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "nlb_type")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The ID of the resource group that the cluster is in. To check the resource group ID of the cluster, use the GET
        /v1/clusters/idOrName API. To list available resource group IDs, run ibmcloud resource groups.
        """
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter(name="secretNamespace")
    def secret_namespace(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "secret_namespace")

