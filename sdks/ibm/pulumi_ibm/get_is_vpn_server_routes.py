# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsVpnServerRoutesResult',
    'AwaitableGetIsVpnServerRoutesResult',
    'get_is_vpn_server_routes',
    'get_is_vpn_server_routes_output',
]

@pulumi.output_type
class GetIsVpnServerRoutesResult:
    """
    A collection of values returned by getIsVpnServerRoutes.
    """
    def __init__(__self__, id=None, routes=None, vpn_server=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if routes and not isinstance(routes, list):
            raise TypeError("Expected argument 'routes' to be a list")
        pulumi.set(__self__, "routes", routes)
        if vpn_server and not isinstance(vpn_server, str):
            raise TypeError("Expected argument 'vpn_server' to be a str")
        pulumi.set(__self__, "vpn_server", vpn_server)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def routes(self) -> Sequence['outputs.GetIsVpnServerRoutesRouteResult']:
        return pulumi.get(self, "routes")

    @_builtins.property
    @pulumi.getter(name="vpnServer")
    def vpn_server(self) -> _builtins.str:
        return pulumi.get(self, "vpn_server")


class AwaitableGetIsVpnServerRoutesResult(GetIsVpnServerRoutesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsVpnServerRoutesResult(
            id=self.id,
            routes=self.routes,
            vpn_server=self.vpn_server)


def get_is_vpn_server_routes(id: Optional[_builtins.str] = None,
                             vpn_server: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsVpnServerRoutesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['vpnServer'] = vpn_server
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsVpnServerRoutes:getIsVpnServerRoutes', __args__, opts=opts, typ=GetIsVpnServerRoutesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsVpnServerRoutesResult(
        id=pulumi.get(__ret__, 'id'),
        routes=pulumi.get(__ret__, 'routes'),
        vpn_server=pulumi.get(__ret__, 'vpn_server'))
def get_is_vpn_server_routes_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    vpn_server: Optional[pulumi.Input[_builtins.str]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsVpnServerRoutesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['vpnServer'] = vpn_server
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsVpnServerRoutes:getIsVpnServerRoutes', __args__, opts=opts, typ=GetIsVpnServerRoutesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsVpnServerRoutesResult(
        id=pulumi.get(__response__, 'id'),
        routes=pulumi.get(__response__, 'routes'),
        vpn_server=pulumi.get(__response__, 'vpn_server')))
