# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['CdTektonPipelinePropertyInitArgs', 'CdTektonPipelineProperty']

@pulumi.input_type
class CdTektonPipelinePropertyInitArgs:
    def __init__(__self__, *,
                 pipeline_id: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 cd_tekton_pipeline_property_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enums: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 locked: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CdTektonPipelineProperty resource.
        :param pulumi.Input[_builtins.str] pipeline_id: The Tekton pipeline ID.
        :param pulumi.Input[_builtins.str] type: Property type.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] enums: Options for `single_select` property type. Only needed when using `single_select` property type.
        :param pulumi.Input[_builtins.bool] locked: When true, this property cannot be overridden by a trigger property or at runtime. Attempting to override it will result
               in run requests being rejected. The default is false.
        :param pulumi.Input[_builtins.str] name: Property name.
        :param pulumi.Input[_builtins.str] path: A dot notation path for `integration` type properties only, that selects a value from the tool integration. If left
               blank the full tool integration data will be used.
        :param pulumi.Input[_builtins.str] value: Property value. Any string value is valid.
        """
        pulumi.set(__self__, "pipeline_id", pipeline_id)
        pulumi.set(__self__, "type", type)
        if cd_tekton_pipeline_property_id is not None:
            pulumi.set(__self__, "cd_tekton_pipeline_property_id", cd_tekton_pipeline_property_id)
        if enums is not None:
            pulumi.set(__self__, "enums", enums)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> pulumi.Input[_builtins.str]:
        """
        The Tekton pipeline ID.
        """
        return pulumi.get(self, "pipeline_id")

    @pipeline_id.setter
    def pipeline_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pipeline_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Property type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="cdTektonPipelinePropertyId")
    def cd_tekton_pipeline_property_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cd_tekton_pipeline_property_id")

    @cd_tekton_pipeline_property_id.setter
    def cd_tekton_pipeline_property_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cd_tekton_pipeline_property_id", value)

    @_builtins.property
    @pulumi.getter
    def enums(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Options for `single_select` property type. Only needed when using `single_select` property type.
        """
        return pulumi.get(self, "enums")

    @enums.setter
    def enums(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "enums", value)

    @_builtins.property
    @pulumi.getter
    def locked(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        When true, this property cannot be overridden by a trigger property or at runtime. Attempting to override it will result
        in run requests being rejected. The default is false.
        """
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "locked", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Property name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A dot notation path for `integration` type properties only, that selects a value from the tool integration. If left
        blank the full tool integration data will be used.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Property value. Any string value is valid.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class _CdTektonPipelinePropertyState:
    def __init__(__self__, *,
                 cd_tekton_pipeline_property_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enums: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 locked: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CdTektonPipelineProperty resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] enums: Options for `single_select` property type. Only needed when using `single_select` property type.
        :param pulumi.Input[_builtins.str] href: API URL for interacting with the property.
        :param pulumi.Input[_builtins.bool] locked: When true, this property cannot be overridden by a trigger property or at runtime. Attempting to override it will result
               in run requests being rejected. The default is false.
        :param pulumi.Input[_builtins.str] name: Property name.
        :param pulumi.Input[_builtins.str] path: A dot notation path for `integration` type properties only, that selects a value from the tool integration. If left
               blank the full tool integration data will be used.
        :param pulumi.Input[_builtins.str] pipeline_id: The Tekton pipeline ID.
        :param pulumi.Input[_builtins.str] type: Property type.
        :param pulumi.Input[_builtins.str] value: Property value. Any string value is valid.
        """
        if cd_tekton_pipeline_property_id is not None:
            pulumi.set(__self__, "cd_tekton_pipeline_property_id", cd_tekton_pipeline_property_id)
        if enums is not None:
            pulumi.set(__self__, "enums", enums)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if pipeline_id is not None:
            pulumi.set(__self__, "pipeline_id", pipeline_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="cdTektonPipelinePropertyId")
    def cd_tekton_pipeline_property_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cd_tekton_pipeline_property_id")

    @cd_tekton_pipeline_property_id.setter
    def cd_tekton_pipeline_property_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cd_tekton_pipeline_property_id", value)

    @_builtins.property
    @pulumi.getter
    def enums(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Options for `single_select` property type. Only needed when using `single_select` property type.
        """
        return pulumi.get(self, "enums")

    @enums.setter
    def enums(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "enums", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        API URL for interacting with the property.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter
    def locked(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        When true, this property cannot be overridden by a trigger property or at runtime. Attempting to override it will result
        in run requests being rejected. The default is false.
        """
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "locked", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Property name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A dot notation path for `integration` type properties only, that selects a value from the tool integration. If left
        blank the full tool integration data will be used.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Tekton pipeline ID.
        """
        return pulumi.get(self, "pipeline_id")

    @pipeline_id.setter
    def pipeline_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pipeline_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Property type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Property value. Any string value is valid.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


@pulumi.type_token("ibm:index/cdTektonPipelineProperty:CdTektonPipelineProperty")
class CdTektonPipelineProperty(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cd_tekton_pipeline_property_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enums: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 locked: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a CdTektonPipelineProperty resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] enums: Options for `single_select` property type. Only needed when using `single_select` property type.
        :param pulumi.Input[_builtins.bool] locked: When true, this property cannot be overridden by a trigger property or at runtime. Attempting to override it will result
               in run requests being rejected. The default is false.
        :param pulumi.Input[_builtins.str] name: Property name.
        :param pulumi.Input[_builtins.str] path: A dot notation path for `integration` type properties only, that selects a value from the tool integration. If left
               blank the full tool integration data will be used.
        :param pulumi.Input[_builtins.str] pipeline_id: The Tekton pipeline ID.
        :param pulumi.Input[_builtins.str] type: Property type.
        :param pulumi.Input[_builtins.str] value: Property value. Any string value is valid.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CdTektonPipelinePropertyInitArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CdTektonPipelineProperty resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CdTektonPipelinePropertyInitArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CdTektonPipelinePropertyInitArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cd_tekton_pipeline_property_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enums: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 locked: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CdTektonPipelinePropertyInitArgs.__new__(CdTektonPipelinePropertyInitArgs)

            __props__.__dict__["cd_tekton_pipeline_property_id"] = cd_tekton_pipeline_property_id
            __props__.__dict__["enums"] = enums
            __props__.__dict__["locked"] = locked
            __props__.__dict__["name"] = name
            __props__.__dict__["path"] = path
            if pipeline_id is None and not opts.urn:
                raise TypeError("Missing required property 'pipeline_id'")
            __props__.__dict__["pipeline_id"] = pipeline_id
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["value"] = value
            __props__.__dict__["href"] = None
        super(CdTektonPipelineProperty, __self__).__init__(
            'ibm:index/cdTektonPipelineProperty:CdTektonPipelineProperty',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cd_tekton_pipeline_property_id: Optional[pulumi.Input[_builtins.str]] = None,
            enums: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            locked: Optional[pulumi.Input[_builtins.bool]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            path: Optional[pulumi.Input[_builtins.str]] = None,
            pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            value: Optional[pulumi.Input[_builtins.str]] = None) -> 'CdTektonPipelineProperty':
        """
        Get an existing CdTektonPipelineProperty resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] enums: Options for `single_select` property type. Only needed when using `single_select` property type.
        :param pulumi.Input[_builtins.str] href: API URL for interacting with the property.
        :param pulumi.Input[_builtins.bool] locked: When true, this property cannot be overridden by a trigger property or at runtime. Attempting to override it will result
               in run requests being rejected. The default is false.
        :param pulumi.Input[_builtins.str] name: Property name.
        :param pulumi.Input[_builtins.str] path: A dot notation path for `integration` type properties only, that selects a value from the tool integration. If left
               blank the full tool integration data will be used.
        :param pulumi.Input[_builtins.str] pipeline_id: The Tekton pipeline ID.
        :param pulumi.Input[_builtins.str] type: Property type.
        :param pulumi.Input[_builtins.str] value: Property value. Any string value is valid.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CdTektonPipelinePropertyState.__new__(_CdTektonPipelinePropertyState)

        __props__.__dict__["cd_tekton_pipeline_property_id"] = cd_tekton_pipeline_property_id
        __props__.__dict__["enums"] = enums
        __props__.__dict__["href"] = href
        __props__.__dict__["locked"] = locked
        __props__.__dict__["name"] = name
        __props__.__dict__["path"] = path
        __props__.__dict__["pipeline_id"] = pipeline_id
        __props__.__dict__["type"] = type
        __props__.__dict__["value"] = value
        return CdTektonPipelineProperty(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="cdTektonPipelinePropertyId")
    def cd_tekton_pipeline_property_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cd_tekton_pipeline_property_id")

    @_builtins.property
    @pulumi.getter
    def enums(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Options for `single_select` property type. Only needed when using `single_select` property type.
        """
        return pulumi.get(self, "enums")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        API URL for interacting with the property.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def locked(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        When true, this property cannot be overridden by a trigger property or at runtime. Attempting to override it will result
        in run requests being rejected. The default is false.
        """
        return pulumi.get(self, "locked")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Property name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def path(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        A dot notation path for `integration` type properties only, that selects a value from the tool integration. If left
        blank the full tool integration data will be used.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> pulumi.Output[_builtins.str]:
        """
        The Tekton pipeline ID.
        """
        return pulumi.get(self, "pipeline_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Property type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Property value. Any string value is valid.
        """
        return pulumi.get(self, "value")

