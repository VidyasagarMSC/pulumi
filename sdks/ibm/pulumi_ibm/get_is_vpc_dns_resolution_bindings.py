# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsVpcDnsResolutionBindingsResult',
    'AwaitableGetIsVpcDnsResolutionBindingsResult',
    'get_is_vpc_dns_resolution_bindings',
    'get_is_vpc_dns_resolution_bindings_output',
]

@pulumi.output_type
class GetIsVpcDnsResolutionBindingsResult:
    """
    A collection of values returned by getIsVpcDnsResolutionBindings.
    """
    def __init__(__self__, dns_resolution_bindings=None, id=None, vpc_id=None):
        if dns_resolution_bindings and not isinstance(dns_resolution_bindings, list):
            raise TypeError("Expected argument 'dns_resolution_bindings' to be a list")
        pulumi.set(__self__, "dns_resolution_bindings", dns_resolution_bindings)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="dnsResolutionBindings")
    def dns_resolution_bindings(self) -> Sequence['outputs.GetIsVpcDnsResolutionBindingsDnsResolutionBindingResult']:
        return pulumi.get(self, "dns_resolution_bindings")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        return pulumi.get(self, "vpc_id")


class AwaitableGetIsVpcDnsResolutionBindingsResult(GetIsVpcDnsResolutionBindingsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsVpcDnsResolutionBindingsResult(
            dns_resolution_bindings=self.dns_resolution_bindings,
            id=self.id,
            vpc_id=self.vpc_id)


def get_is_vpc_dns_resolution_bindings(id: Optional[_builtins.str] = None,
                                       vpc_id: Optional[_builtins.str] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsVpcDnsResolutionBindingsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsVpcDnsResolutionBindings:getIsVpcDnsResolutionBindings', __args__, opts=opts, typ=GetIsVpcDnsResolutionBindingsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsVpcDnsResolutionBindingsResult(
        dns_resolution_bindings=pulumi.get(__ret__, 'dns_resolution_bindings'),
        id=pulumi.get(__ret__, 'id'),
        vpc_id=pulumi.get(__ret__, 'vpc_id'))
def get_is_vpc_dns_resolution_bindings_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsVpcDnsResolutionBindingsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsVpcDnsResolutionBindings:getIsVpcDnsResolutionBindings', __args__, opts=opts, typ=GetIsVpcDnsResolutionBindingsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsVpcDnsResolutionBindingsResult(
        dns_resolution_bindings=pulumi.get(__response__, 'dns_resolution_bindings'),
        id=pulumi.get(__response__, 'id'),
        vpc_id=pulumi.get(__response__, 'vpc_id')))
