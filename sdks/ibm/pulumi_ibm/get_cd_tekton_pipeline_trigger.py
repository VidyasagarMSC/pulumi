# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCdTektonPipelineTriggerResult',
    'AwaitableGetCdTektonPipelineTriggerResult',
    'get_cd_tekton_pipeline_trigger',
    'get_cd_tekton_pipeline_trigger_output',
]

@pulumi.output_type
class GetCdTektonPipelineTriggerResult:
    """
    A collection of values returned by getCdTektonPipelineTrigger.
    """
    def __init__(__self__, cron=None, enable_events_from_forks=None, enabled=None, event_listener=None, events=None, favorite=None, filter=None, href=None, id=None, limit_waiting_runs=None, max_concurrent_runs=None, name=None, pipeline_id=None, properties=None, secrets=None, sources=None, tags=None, timezone=None, trigger_id=None, type=None, webhook_url=None, workers=None):
        if cron and not isinstance(cron, str):
            raise TypeError("Expected argument 'cron' to be a str")
        pulumi.set(__self__, "cron", cron)
        if enable_events_from_forks and not isinstance(enable_events_from_forks, bool):
            raise TypeError("Expected argument 'enable_events_from_forks' to be a bool")
        pulumi.set(__self__, "enable_events_from_forks", enable_events_from_forks)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if event_listener and not isinstance(event_listener, str):
            raise TypeError("Expected argument 'event_listener' to be a str")
        pulumi.set(__self__, "event_listener", event_listener)
        if events and not isinstance(events, list):
            raise TypeError("Expected argument 'events' to be a list")
        pulumi.set(__self__, "events", events)
        if favorite and not isinstance(favorite, bool):
            raise TypeError("Expected argument 'favorite' to be a bool")
        pulumi.set(__self__, "favorite", favorite)
        if filter and not isinstance(filter, str):
            raise TypeError("Expected argument 'filter' to be a str")
        pulumi.set(__self__, "filter", filter)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if limit_waiting_runs and not isinstance(limit_waiting_runs, bool):
            raise TypeError("Expected argument 'limit_waiting_runs' to be a bool")
        pulumi.set(__self__, "limit_waiting_runs", limit_waiting_runs)
        if max_concurrent_runs and not isinstance(max_concurrent_runs, float):
            raise TypeError("Expected argument 'max_concurrent_runs' to be a float")
        pulumi.set(__self__, "max_concurrent_runs", max_concurrent_runs)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if pipeline_id and not isinstance(pipeline_id, str):
            raise TypeError("Expected argument 'pipeline_id' to be a str")
        pulumi.set(__self__, "pipeline_id", pipeline_id)
        if properties and not isinstance(properties, list):
            raise TypeError("Expected argument 'properties' to be a list")
        pulumi.set(__self__, "properties", properties)
        if secrets and not isinstance(secrets, list):
            raise TypeError("Expected argument 'secrets' to be a list")
        pulumi.set(__self__, "secrets", secrets)
        if sources and not isinstance(sources, list):
            raise TypeError("Expected argument 'sources' to be a list")
        pulumi.set(__self__, "sources", sources)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if timezone and not isinstance(timezone, str):
            raise TypeError("Expected argument 'timezone' to be a str")
        pulumi.set(__self__, "timezone", timezone)
        if trigger_id and not isinstance(trigger_id, str):
            raise TypeError("Expected argument 'trigger_id' to be a str")
        pulumi.set(__self__, "trigger_id", trigger_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if webhook_url and not isinstance(webhook_url, str):
            raise TypeError("Expected argument 'webhook_url' to be a str")
        pulumi.set(__self__, "webhook_url", webhook_url)
        if workers and not isinstance(workers, list):
            raise TypeError("Expected argument 'workers' to be a list")
        pulumi.set(__self__, "workers", workers)

    @_builtins.property
    @pulumi.getter
    def cron(self) -> _builtins.str:
        return pulumi.get(self, "cron")

    @_builtins.property
    @pulumi.getter(name="enableEventsFromForks")
    def enable_events_from_forks(self) -> _builtins.bool:
        return pulumi.get(self, "enable_events_from_forks")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="eventListener")
    def event_listener(self) -> _builtins.str:
        return pulumi.get(self, "event_listener")

    @_builtins.property
    @pulumi.getter
    def events(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "events")

    @_builtins.property
    @pulumi.getter
    def favorite(self) -> _builtins.bool:
        return pulumi.get(self, "favorite")

    @_builtins.property
    @pulumi.getter
    def filter(self) -> _builtins.str:
        return pulumi.get(self, "filter")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="limitWaitingRuns")
    def limit_waiting_runs(self) -> _builtins.bool:
        return pulumi.get(self, "limit_waiting_runs")

    @_builtins.property
    @pulumi.getter(name="maxConcurrentRuns")
    def max_concurrent_runs(self) -> _builtins.float:
        return pulumi.get(self, "max_concurrent_runs")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> _builtins.str:
        return pulumi.get(self, "pipeline_id")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetCdTektonPipelineTriggerPropertyResult']:
        return pulumi.get(self, "properties")

    @_builtins.property
    @pulumi.getter
    def secrets(self) -> Sequence['outputs.GetCdTektonPipelineTriggerSecretResult']:
        return pulumi.get(self, "secrets")

    @_builtins.property
    @pulumi.getter
    def sources(self) -> Sequence['outputs.GetCdTektonPipelineTriggerSourceResult']:
        return pulumi.get(self, "sources")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def timezone(self) -> _builtins.str:
        return pulumi.get(self, "timezone")

    @_builtins.property
    @pulumi.getter(name="triggerId")
    def trigger_id(self) -> _builtins.str:
        return pulumi.get(self, "trigger_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="webhookUrl")
    def webhook_url(self) -> _builtins.str:
        return pulumi.get(self, "webhook_url")

    @_builtins.property
    @pulumi.getter
    def workers(self) -> Sequence['outputs.GetCdTektonPipelineTriggerWorkerResult']:
        return pulumi.get(self, "workers")


class AwaitableGetCdTektonPipelineTriggerResult(GetCdTektonPipelineTriggerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCdTektonPipelineTriggerResult(
            cron=self.cron,
            enable_events_from_forks=self.enable_events_from_forks,
            enabled=self.enabled,
            event_listener=self.event_listener,
            events=self.events,
            favorite=self.favorite,
            filter=self.filter,
            href=self.href,
            id=self.id,
            limit_waiting_runs=self.limit_waiting_runs,
            max_concurrent_runs=self.max_concurrent_runs,
            name=self.name,
            pipeline_id=self.pipeline_id,
            properties=self.properties,
            secrets=self.secrets,
            sources=self.sources,
            tags=self.tags,
            timezone=self.timezone,
            trigger_id=self.trigger_id,
            type=self.type,
            webhook_url=self.webhook_url,
            workers=self.workers)


def get_cd_tekton_pipeline_trigger(id: Optional[_builtins.str] = None,
                                   pipeline_id: Optional[_builtins.str] = None,
                                   trigger_id: Optional[_builtins.str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCdTektonPipelineTriggerResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['pipelineId'] = pipeline_id
    __args__['triggerId'] = trigger_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCdTektonPipelineTrigger:getCdTektonPipelineTrigger', __args__, opts=opts, typ=GetCdTektonPipelineTriggerResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCdTektonPipelineTriggerResult(
        cron=pulumi.get(__ret__, 'cron'),
        enable_events_from_forks=pulumi.get(__ret__, 'enable_events_from_forks'),
        enabled=pulumi.get(__ret__, 'enabled'),
        event_listener=pulumi.get(__ret__, 'event_listener'),
        events=pulumi.get(__ret__, 'events'),
        favorite=pulumi.get(__ret__, 'favorite'),
        filter=pulumi.get(__ret__, 'filter'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        limit_waiting_runs=pulumi.get(__ret__, 'limit_waiting_runs'),
        max_concurrent_runs=pulumi.get(__ret__, 'max_concurrent_runs'),
        name=pulumi.get(__ret__, 'name'),
        pipeline_id=pulumi.get(__ret__, 'pipeline_id'),
        properties=pulumi.get(__ret__, 'properties'),
        secrets=pulumi.get(__ret__, 'secrets'),
        sources=pulumi.get(__ret__, 'sources'),
        tags=pulumi.get(__ret__, 'tags'),
        timezone=pulumi.get(__ret__, 'timezone'),
        trigger_id=pulumi.get(__ret__, 'trigger_id'),
        type=pulumi.get(__ret__, 'type'),
        webhook_url=pulumi.get(__ret__, 'webhook_url'),
        workers=pulumi.get(__ret__, 'workers'))
def get_cd_tekton_pipeline_trigger_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
                                          trigger_id: Optional[pulumi.Input[_builtins.str]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCdTektonPipelineTriggerResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['pipelineId'] = pipeline_id
    __args__['triggerId'] = trigger_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCdTektonPipelineTrigger:getCdTektonPipelineTrigger', __args__, opts=opts, typ=GetCdTektonPipelineTriggerResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCdTektonPipelineTriggerResult(
        cron=pulumi.get(__response__, 'cron'),
        enable_events_from_forks=pulumi.get(__response__, 'enable_events_from_forks'),
        enabled=pulumi.get(__response__, 'enabled'),
        event_listener=pulumi.get(__response__, 'event_listener'),
        events=pulumi.get(__response__, 'events'),
        favorite=pulumi.get(__response__, 'favorite'),
        filter=pulumi.get(__response__, 'filter'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        limit_waiting_runs=pulumi.get(__response__, 'limit_waiting_runs'),
        max_concurrent_runs=pulumi.get(__response__, 'max_concurrent_runs'),
        name=pulumi.get(__response__, 'name'),
        pipeline_id=pulumi.get(__response__, 'pipeline_id'),
        properties=pulumi.get(__response__, 'properties'),
        secrets=pulumi.get(__response__, 'secrets'),
        sources=pulumi.get(__response__, 'sources'),
        tags=pulumi.get(__response__, 'tags'),
        timezone=pulumi.get(__response__, 'timezone'),
        trigger_id=pulumi.get(__response__, 'trigger_id'),
        type=pulumi.get(__response__, 'type'),
        webhook_url=pulumi.get(__response__, 'webhook_url'),
        workers=pulumi.get(__response__, 'workers')))
