# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetDatabaseBackupResult',
    'AwaitableGetDatabaseBackupResult',
    'get_database_backup',
    'get_database_backup_output',
]

@pulumi.output_type
class GetDatabaseBackupResult:
    """
    A collection of values returned by getDatabaseBackup.
    """
    def __init__(__self__, backup_id=None, created_at=None, deployment_id=None, download_link=None, id=None, is_downloadable=None, is_restorable=None, status=None, type=None):
        if backup_id and not isinstance(backup_id, str):
            raise TypeError("Expected argument 'backup_id' to be a str")
        pulumi.set(__self__, "backup_id", backup_id)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if deployment_id and not isinstance(deployment_id, str):
            raise TypeError("Expected argument 'deployment_id' to be a str")
        pulumi.set(__self__, "deployment_id", deployment_id)
        if download_link and not isinstance(download_link, str):
            raise TypeError("Expected argument 'download_link' to be a str")
        pulumi.set(__self__, "download_link", download_link)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_downloadable and not isinstance(is_downloadable, bool):
            raise TypeError("Expected argument 'is_downloadable' to be a bool")
        pulumi.set(__self__, "is_downloadable", is_downloadable)
        if is_restorable and not isinstance(is_restorable, bool):
            raise TypeError("Expected argument 'is_restorable' to be a bool")
        pulumi.set(__self__, "is_restorable", is_restorable)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> _builtins.str:
        return pulumi.get(self, "backup_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> _builtins.str:
        return pulumi.get(self, "deployment_id")

    @_builtins.property
    @pulumi.getter(name="downloadLink")
    def download_link(self) -> _builtins.str:
        return pulumi.get(self, "download_link")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isDownloadable")
    def is_downloadable(self) -> _builtins.bool:
        return pulumi.get(self, "is_downloadable")

    @_builtins.property
    @pulumi.getter(name="isRestorable")
    def is_restorable(self) -> _builtins.bool:
        return pulumi.get(self, "is_restorable")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")


class AwaitableGetDatabaseBackupResult(GetDatabaseBackupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDatabaseBackupResult(
            backup_id=self.backup_id,
            created_at=self.created_at,
            deployment_id=self.deployment_id,
            download_link=self.download_link,
            id=self.id,
            is_downloadable=self.is_downloadable,
            is_restorable=self.is_restorable,
            status=self.status,
            type=self.type)


def get_database_backup(backup_id: Optional[_builtins.str] = None,
                        id: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDatabaseBackupResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['backupId'] = backup_id
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getDatabaseBackup:getDatabaseBackup', __args__, opts=opts, typ=GetDatabaseBackupResult, package_ref=_utilities.get_package()).value

    return AwaitableGetDatabaseBackupResult(
        backup_id=pulumi.get(__ret__, 'backup_id'),
        created_at=pulumi.get(__ret__, 'created_at'),
        deployment_id=pulumi.get(__ret__, 'deployment_id'),
        download_link=pulumi.get(__ret__, 'download_link'),
        id=pulumi.get(__ret__, 'id'),
        is_downloadable=pulumi.get(__ret__, 'is_downloadable'),
        is_restorable=pulumi.get(__ret__, 'is_restorable'),
        status=pulumi.get(__ret__, 'status'),
        type=pulumi.get(__ret__, 'type'))
def get_database_backup_output(backup_id: Optional[pulumi.Input[_builtins.str]] = None,
                               id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDatabaseBackupResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['backupId'] = backup_id
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getDatabaseBackup:getDatabaseBackup', __args__, opts=opts, typ=GetDatabaseBackupResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetDatabaseBackupResult(
        backup_id=pulumi.get(__response__, 'backup_id'),
        created_at=pulumi.get(__response__, 'created_at'),
        deployment_id=pulumi.get(__response__, 'deployment_id'),
        download_link=pulumi.get(__response__, 'download_link'),
        id=pulumi.get(__response__, 'id'),
        is_downloadable=pulumi.get(__response__, 'is_downloadable'),
        is_restorable=pulumi.get(__response__, 'is_restorable'),
        status=pulumi.get(__response__, 'status'),
        type=pulumi.get(__response__, 'type')))
