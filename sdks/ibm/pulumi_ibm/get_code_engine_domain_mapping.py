# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCodeEngineDomainMappingResult',
    'AwaitableGetCodeEngineDomainMappingResult',
    'get_code_engine_domain_mapping',
    'get_code_engine_domain_mapping_output',
]

@pulumi.output_type
class GetCodeEngineDomainMappingResult:
    """
    A collection of values returned by getCodeEngineDomainMapping.
    """
    def __init__(__self__, cname_target=None, components=None, created_at=None, domain_mapping_id=None, entity_tag=None, href=None, id=None, name=None, project_id=None, region=None, resource_type=None, status=None, status_details=None, tls_secret=None, user_managed=None, visibility=None):
        if cname_target and not isinstance(cname_target, str):
            raise TypeError("Expected argument 'cname_target' to be a str")
        pulumi.set(__self__, "cname_target", cname_target)
        if components and not isinstance(components, list):
            raise TypeError("Expected argument 'components' to be a list")
        pulumi.set(__self__, "components", components)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if domain_mapping_id and not isinstance(domain_mapping_id, str):
            raise TypeError("Expected argument 'domain_mapping_id' to be a str")
        pulumi.set(__self__, "domain_mapping_id", domain_mapping_id)
        if entity_tag and not isinstance(entity_tag, str):
            raise TypeError("Expected argument 'entity_tag' to be a str")
        pulumi.set(__self__, "entity_tag", entity_tag)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if status_details and not isinstance(status_details, list):
            raise TypeError("Expected argument 'status_details' to be a list")
        pulumi.set(__self__, "status_details", status_details)
        if tls_secret and not isinstance(tls_secret, str):
            raise TypeError("Expected argument 'tls_secret' to be a str")
        pulumi.set(__self__, "tls_secret", tls_secret)
        if user_managed and not isinstance(user_managed, bool):
            raise TypeError("Expected argument 'user_managed' to be a bool")
        pulumi.set(__self__, "user_managed", user_managed)
        if visibility and not isinstance(visibility, str):
            raise TypeError("Expected argument 'visibility' to be a str")
        pulumi.set(__self__, "visibility", visibility)

    @_builtins.property
    @pulumi.getter(name="cnameTarget")
    def cname_target(self) -> _builtins.str:
        return pulumi.get(self, "cname_target")

    @_builtins.property
    @pulumi.getter
    def components(self) -> Sequence['outputs.GetCodeEngineDomainMappingComponentResult']:
        return pulumi.get(self, "components")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="domainMappingId")
    def domain_mapping_id(self) -> _builtins.str:
        return pulumi.get(self, "domain_mapping_id")

    @_builtins.property
    @pulumi.getter(name="entityTag")
    def entity_tag(self) -> _builtins.str:
        return pulumi.get(self, "entity_tag")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> Sequence['outputs.GetCodeEngineDomainMappingStatusDetailResult']:
        return pulumi.get(self, "status_details")

    @_builtins.property
    @pulumi.getter(name="tlsSecret")
    def tls_secret(self) -> _builtins.str:
        return pulumi.get(self, "tls_secret")

    @_builtins.property
    @pulumi.getter(name="userManaged")
    def user_managed(self) -> _builtins.bool:
        return pulumi.get(self, "user_managed")

    @_builtins.property
    @pulumi.getter
    def visibility(self) -> _builtins.str:
        return pulumi.get(self, "visibility")


class AwaitableGetCodeEngineDomainMappingResult(GetCodeEngineDomainMappingResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCodeEngineDomainMappingResult(
            cname_target=self.cname_target,
            components=self.components,
            created_at=self.created_at,
            domain_mapping_id=self.domain_mapping_id,
            entity_tag=self.entity_tag,
            href=self.href,
            id=self.id,
            name=self.name,
            project_id=self.project_id,
            region=self.region,
            resource_type=self.resource_type,
            status=self.status,
            status_details=self.status_details,
            tls_secret=self.tls_secret,
            user_managed=self.user_managed,
            visibility=self.visibility)


def get_code_engine_domain_mapping(id: Optional[_builtins.str] = None,
                                   name: Optional[_builtins.str] = None,
                                   project_id: Optional[_builtins.str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCodeEngineDomainMappingResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCodeEngineDomainMapping:getCodeEngineDomainMapping', __args__, opts=opts, typ=GetCodeEngineDomainMappingResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCodeEngineDomainMappingResult(
        cname_target=pulumi.get(__ret__, 'cname_target'),
        components=pulumi.get(__ret__, 'components'),
        created_at=pulumi.get(__ret__, 'created_at'),
        domain_mapping_id=pulumi.get(__ret__, 'domain_mapping_id'),
        entity_tag=pulumi.get(__ret__, 'entity_tag'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        project_id=pulumi.get(__ret__, 'project_id'),
        region=pulumi.get(__ret__, 'region'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        status=pulumi.get(__ret__, 'status'),
        status_details=pulumi.get(__ret__, 'status_details'),
        tls_secret=pulumi.get(__ret__, 'tls_secret'),
        user_managed=pulumi.get(__ret__, 'user_managed'),
        visibility=pulumi.get(__ret__, 'visibility'))
def get_code_engine_domain_mapping_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          name: Optional[pulumi.Input[_builtins.str]] = None,
                                          project_id: Optional[pulumi.Input[_builtins.str]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCodeEngineDomainMappingResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCodeEngineDomainMapping:getCodeEngineDomainMapping', __args__, opts=opts, typ=GetCodeEngineDomainMappingResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCodeEngineDomainMappingResult(
        cname_target=pulumi.get(__response__, 'cname_target'),
        components=pulumi.get(__response__, 'components'),
        created_at=pulumi.get(__response__, 'created_at'),
        domain_mapping_id=pulumi.get(__response__, 'domain_mapping_id'),
        entity_tag=pulumi.get(__response__, 'entity_tag'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        project_id=pulumi.get(__response__, 'project_id'),
        region=pulumi.get(__response__, 'region'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        status=pulumi.get(__response__, 'status'),
        status_details=pulumi.get(__response__, 'status_details'),
        tls_secret=pulumi.get(__response__, 'tls_secret'),
        user_managed=pulumi.get(__response__, 'user_managed'),
        visibility=pulumi.get(__response__, 'visibility')))
