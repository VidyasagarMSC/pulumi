# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSatelliteLocationNlbDnsResult',
    'AwaitableGetSatelliteLocationNlbDnsResult',
    'get_satellite_location_nlb_dns',
    'get_satellite_location_nlb_dns_output',
]

@pulumi.output_type
class GetSatelliteLocationNlbDnsResult:
    """
    A collection of values returned by getSatelliteLocationNlbDns.
    """
    def __init__(__self__, id=None, location=None, nlb_configs=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if nlb_configs and not isinstance(nlb_configs, list):
            raise TypeError("Expected argument 'nlb_configs' to be a list")
        pulumi.set(__self__, "nlb_configs", nlb_configs)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter(name="nlbConfigs")
    def nlb_configs(self) -> Sequence['outputs.GetSatelliteLocationNlbDnsNlbConfigResult']:
        return pulumi.get(self, "nlb_configs")


class AwaitableGetSatelliteLocationNlbDnsResult(GetSatelliteLocationNlbDnsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSatelliteLocationNlbDnsResult(
            id=self.id,
            location=self.location,
            nlb_configs=self.nlb_configs)


def get_satellite_location_nlb_dns(id: Optional[_builtins.str] = None,
                                   location: Optional[_builtins.str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSatelliteLocationNlbDnsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['location'] = location
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSatelliteLocationNlbDns:getSatelliteLocationNlbDns', __args__, opts=opts, typ=GetSatelliteLocationNlbDnsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSatelliteLocationNlbDnsResult(
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        nlb_configs=pulumi.get(__ret__, 'nlb_configs'))
def get_satellite_location_nlb_dns_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          location: Optional[pulumi.Input[_builtins.str]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSatelliteLocationNlbDnsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['location'] = location
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSatelliteLocationNlbDns:getSatelliteLocationNlbDns', __args__, opts=opts, typ=GetSatelliteLocationNlbDnsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSatelliteLocationNlbDnsResult(
        id=pulumi.get(__response__, 'id'),
        location=pulumi.get(__response__, 'location'),
        nlb_configs=pulumi.get(__response__, 'nlb_configs')))
