# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DnsGlbPoolArgs', 'DnsGlbPool']

@pulumi.input_type
class DnsGlbPoolArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 origins: pulumi.Input[Sequence[pulumi.Input['DnsGlbPoolOriginArgs']]],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_glb_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 healthcheck_region: Optional[pulumi.Input[_builtins.str]] = None,
                 healthcheck_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 healthy_origins_threshold: Optional[pulumi.Input[_builtins.float]] = None,
                 monitor: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_channel: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['DnsGlbPoolTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a DnsGlbPool resource.
        :param pulumi.Input[_builtins.str] instance_id: Instance Id
        :param pulumi.Input[Sequence[pulumi.Input['DnsGlbPoolOriginArgs']]] origins: Origins info
        :param pulumi.Input[_builtins.str] description: Descriptive text of the load balancer pool
        :param pulumi.Input[_builtins.bool] enabled: Whether the load balancer pool is enabled
        :param pulumi.Input[_builtins.str] healthcheck_region: Health check region of VSIs
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] healthcheck_subnets: Health check subnet crn of VSIs
        :param pulumi.Input[_builtins.float] healthy_origins_threshold: The minimum number of origins that must be healthy for this pool to serve traffic
        :param pulumi.Input[_builtins.str] monitor: The ID of the load balancer monitor to be associated to this pool
        :param pulumi.Input[_builtins.str] name: The unique identifier of a service instance.
        :param pulumi.Input[_builtins.str] notification_channel: The notification channel,It is a webhook url
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "origins", origins)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dns_glb_pool_id is not None:
            pulumi.set(__self__, "dns_glb_pool_id", dns_glb_pool_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if healthcheck_region is not None:
            pulumi.set(__self__, "healthcheck_region", healthcheck_region)
        if healthcheck_subnets is not None:
            pulumi.set(__self__, "healthcheck_subnets", healthcheck_subnets)
        if healthy_origins_threshold is not None:
            pulumi.set(__self__, "healthy_origins_threshold", healthy_origins_threshold)
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notification_channel is not None:
            pulumi.set(__self__, "notification_channel", notification_channel)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Instance Id
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def origins(self) -> pulumi.Input[Sequence[pulumi.Input['DnsGlbPoolOriginArgs']]]:
        """
        Origins info
        """
        return pulumi.get(self, "origins")

    @origins.setter
    def origins(self, value: pulumi.Input[Sequence[pulumi.Input['DnsGlbPoolOriginArgs']]]):
        pulumi.set(self, "origins", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Descriptive text of the load balancer pool
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="dnsGlbPoolId")
    def dns_glb_pool_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dns_glb_pool_id")

    @dns_glb_pool_id.setter
    def dns_glb_pool_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_glb_pool_id", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the load balancer pool is enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="healthcheckRegion")
    def healthcheck_region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Health check region of VSIs
        """
        return pulumi.get(self, "healthcheck_region")

    @healthcheck_region.setter
    def healthcheck_region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "healthcheck_region", value)

    @_builtins.property
    @pulumi.getter(name="healthcheckSubnets")
    def healthcheck_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Health check subnet crn of VSIs
        """
        return pulumi.get(self, "healthcheck_subnets")

    @healthcheck_subnets.setter
    def healthcheck_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "healthcheck_subnets", value)

    @_builtins.property
    @pulumi.getter(name="healthyOriginsThreshold")
    def healthy_origins_threshold(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The minimum number of origins that must be healthy for this pool to serve traffic
        """
        return pulumi.get(self, "healthy_origins_threshold")

    @healthy_origins_threshold.setter
    def healthy_origins_threshold(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "healthy_origins_threshold", value)

    @_builtins.property
    @pulumi.getter
    def monitor(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the load balancer monitor to be associated to this pool
        """
        return pulumi.get(self, "monitor")

    @monitor.setter
    def monitor(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "monitor", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier of a service instance.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="notificationChannel")
    def notification_channel(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The notification channel,It is a webhook url
        """
        return pulumi.get(self, "notification_channel")

    @notification_channel.setter
    def notification_channel(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "notification_channel", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['DnsGlbPoolTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['DnsGlbPoolTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _DnsGlbPoolState:
    def __init__(__self__, *,
                 created_on: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_glb_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 health: Optional[pulumi.Input[_builtins.str]] = None,
                 healthcheck_region: Optional[pulumi.Input[_builtins.str]] = None,
                 healthcheck_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 healthy_origins_threshold: Optional[pulumi.Input[_builtins.float]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 modified_on: Optional[pulumi.Input[_builtins.str]] = None,
                 monitor: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_channel: Optional[pulumi.Input[_builtins.str]] = None,
                 origins: Optional[pulumi.Input[Sequence[pulumi.Input['DnsGlbPoolOriginArgs']]]] = None,
                 pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['DnsGlbPoolTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering DnsGlbPool resources.
        :param pulumi.Input[_builtins.str] created_on: The time when a load balancer pool is created.
        :param pulumi.Input[_builtins.str] description: Descriptive text of the load balancer pool
        :param pulumi.Input[_builtins.bool] enabled: Whether the load balancer pool is enabled
        :param pulumi.Input[_builtins.str] health: Whether the load balancer pool is enabled
        :param pulumi.Input[_builtins.str] healthcheck_region: Health check region of VSIs
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] healthcheck_subnets: Health check subnet crn of VSIs
        :param pulumi.Input[_builtins.float] healthy_origins_threshold: The minimum number of origins that must be healthy for this pool to serve traffic
        :param pulumi.Input[_builtins.str] instance_id: Instance Id
        :param pulumi.Input[_builtins.str] modified_on: The recent time when a load balancer pool is modified.
        :param pulumi.Input[_builtins.str] monitor: The ID of the load balancer monitor to be associated to this pool
        :param pulumi.Input[_builtins.str] name: The unique identifier of a service instance.
        :param pulumi.Input[_builtins.str] notification_channel: The notification channel,It is a webhook url
        :param pulumi.Input[Sequence[pulumi.Input['DnsGlbPoolOriginArgs']]] origins: Origins info
        :param pulumi.Input[_builtins.str] pool_id: Pool Id
        """
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dns_glb_pool_id is not None:
            pulumi.set(__self__, "dns_glb_pool_id", dns_glb_pool_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if health is not None:
            pulumi.set(__self__, "health", health)
        if healthcheck_region is not None:
            pulumi.set(__self__, "healthcheck_region", healthcheck_region)
        if healthcheck_subnets is not None:
            pulumi.set(__self__, "healthcheck_subnets", healthcheck_subnets)
        if healthy_origins_threshold is not None:
            pulumi.set(__self__, "healthy_origins_threshold", healthy_origins_threshold)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if modified_on is not None:
            pulumi.set(__self__, "modified_on", modified_on)
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notification_channel is not None:
            pulumi.set(__self__, "notification_channel", notification_channel)
        if origins is not None:
            pulumi.set(__self__, "origins", origins)
        if pool_id is not None:
            pulumi.set(__self__, "pool_id", pool_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time when a load balancer pool is created.
        """
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_on", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Descriptive text of the load balancer pool
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="dnsGlbPoolId")
    def dns_glb_pool_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dns_glb_pool_id")

    @dns_glb_pool_id.setter
    def dns_glb_pool_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_glb_pool_id", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the load balancer pool is enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter
    def health(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Whether the load balancer pool is enabled
        """
        return pulumi.get(self, "health")

    @health.setter
    def health(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "health", value)

    @_builtins.property
    @pulumi.getter(name="healthcheckRegion")
    def healthcheck_region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Health check region of VSIs
        """
        return pulumi.get(self, "healthcheck_region")

    @healthcheck_region.setter
    def healthcheck_region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "healthcheck_region", value)

    @_builtins.property
    @pulumi.getter(name="healthcheckSubnets")
    def healthcheck_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Health check subnet crn of VSIs
        """
        return pulumi.get(self, "healthcheck_subnets")

    @healthcheck_subnets.setter
    def healthcheck_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "healthcheck_subnets", value)

    @_builtins.property
    @pulumi.getter(name="healthyOriginsThreshold")
    def healthy_origins_threshold(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The minimum number of origins that must be healthy for this pool to serve traffic
        """
        return pulumi.get(self, "healthy_origins_threshold")

    @healthy_origins_threshold.setter
    def healthy_origins_threshold(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "healthy_origins_threshold", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Instance Id
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The recent time when a load balancer pool is modified.
        """
        return pulumi.get(self, "modified_on")

    @modified_on.setter
    def modified_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "modified_on", value)

    @_builtins.property
    @pulumi.getter
    def monitor(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the load balancer monitor to be associated to this pool
        """
        return pulumi.get(self, "monitor")

    @monitor.setter
    def monitor(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "monitor", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier of a service instance.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="notificationChannel")
    def notification_channel(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The notification channel,It is a webhook url
        """
        return pulumi.get(self, "notification_channel")

    @notification_channel.setter
    def notification_channel(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "notification_channel", value)

    @_builtins.property
    @pulumi.getter
    def origins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DnsGlbPoolOriginArgs']]]]:
        """
        Origins info
        """
        return pulumi.get(self, "origins")

    @origins.setter
    def origins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DnsGlbPoolOriginArgs']]]]):
        pulumi.set(self, "origins", value)

    @_builtins.property
    @pulumi.getter(name="poolId")
    def pool_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Pool Id
        """
        return pulumi.get(self, "pool_id")

    @pool_id.setter
    def pool_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pool_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['DnsGlbPoolTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['DnsGlbPoolTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/dnsGlbPool:DnsGlbPool")
class DnsGlbPool(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_glb_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 healthcheck_region: Optional[pulumi.Input[_builtins.str]] = None,
                 healthcheck_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 healthy_origins_threshold: Optional[pulumi.Input[_builtins.float]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 monitor: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_channel: Optional[pulumi.Input[_builtins.str]] = None,
                 origins: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DnsGlbPoolOriginArgs', 'DnsGlbPoolOriginArgsDict']]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['DnsGlbPoolTimeoutsArgs', 'DnsGlbPoolTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a DnsGlbPool resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Descriptive text of the load balancer pool
        :param pulumi.Input[_builtins.bool] enabled: Whether the load balancer pool is enabled
        :param pulumi.Input[_builtins.str] healthcheck_region: Health check region of VSIs
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] healthcheck_subnets: Health check subnet crn of VSIs
        :param pulumi.Input[_builtins.float] healthy_origins_threshold: The minimum number of origins that must be healthy for this pool to serve traffic
        :param pulumi.Input[_builtins.str] instance_id: Instance Id
        :param pulumi.Input[_builtins.str] monitor: The ID of the load balancer monitor to be associated to this pool
        :param pulumi.Input[_builtins.str] name: The unique identifier of a service instance.
        :param pulumi.Input[_builtins.str] notification_channel: The notification channel,It is a webhook url
        :param pulumi.Input[Sequence[pulumi.Input[Union['DnsGlbPoolOriginArgs', 'DnsGlbPoolOriginArgsDict']]]] origins: Origins info
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DnsGlbPoolArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DnsGlbPool resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DnsGlbPoolArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DnsGlbPoolArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_glb_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 healthcheck_region: Optional[pulumi.Input[_builtins.str]] = None,
                 healthcheck_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 healthy_origins_threshold: Optional[pulumi.Input[_builtins.float]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 monitor: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_channel: Optional[pulumi.Input[_builtins.str]] = None,
                 origins: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DnsGlbPoolOriginArgs', 'DnsGlbPoolOriginArgsDict']]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['DnsGlbPoolTimeoutsArgs', 'DnsGlbPoolTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DnsGlbPoolArgs.__new__(DnsGlbPoolArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["dns_glb_pool_id"] = dns_glb_pool_id
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["healthcheck_region"] = healthcheck_region
            __props__.__dict__["healthcheck_subnets"] = healthcheck_subnets
            __props__.__dict__["healthy_origins_threshold"] = healthy_origins_threshold
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["monitor"] = monitor
            __props__.__dict__["name"] = name
            __props__.__dict__["notification_channel"] = notification_channel
            if origins is None and not opts.urn:
                raise TypeError("Missing required property 'origins'")
            __props__.__dict__["origins"] = origins
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["created_on"] = None
            __props__.__dict__["health"] = None
            __props__.__dict__["modified_on"] = None
            __props__.__dict__["pool_id"] = None
        super(DnsGlbPool, __self__).__init__(
            'ibm:index/dnsGlbPool:DnsGlbPool',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_on: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            dns_glb_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
            enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            health: Optional[pulumi.Input[_builtins.str]] = None,
            healthcheck_region: Optional[pulumi.Input[_builtins.str]] = None,
            healthcheck_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            healthy_origins_threshold: Optional[pulumi.Input[_builtins.float]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            modified_on: Optional[pulumi.Input[_builtins.str]] = None,
            monitor: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            notification_channel: Optional[pulumi.Input[_builtins.str]] = None,
            origins: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DnsGlbPoolOriginArgs', 'DnsGlbPoolOriginArgsDict']]]]] = None,
            pool_id: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['DnsGlbPoolTimeoutsArgs', 'DnsGlbPoolTimeoutsArgsDict']]] = None) -> 'DnsGlbPool':
        """
        Get an existing DnsGlbPool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_on: The time when a load balancer pool is created.
        :param pulumi.Input[_builtins.str] description: Descriptive text of the load balancer pool
        :param pulumi.Input[_builtins.bool] enabled: Whether the load balancer pool is enabled
        :param pulumi.Input[_builtins.str] health: Whether the load balancer pool is enabled
        :param pulumi.Input[_builtins.str] healthcheck_region: Health check region of VSIs
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] healthcheck_subnets: Health check subnet crn of VSIs
        :param pulumi.Input[_builtins.float] healthy_origins_threshold: The minimum number of origins that must be healthy for this pool to serve traffic
        :param pulumi.Input[_builtins.str] instance_id: Instance Id
        :param pulumi.Input[_builtins.str] modified_on: The recent time when a load balancer pool is modified.
        :param pulumi.Input[_builtins.str] monitor: The ID of the load balancer monitor to be associated to this pool
        :param pulumi.Input[_builtins.str] name: The unique identifier of a service instance.
        :param pulumi.Input[_builtins.str] notification_channel: The notification channel,It is a webhook url
        :param pulumi.Input[Sequence[pulumi.Input[Union['DnsGlbPoolOriginArgs', 'DnsGlbPoolOriginArgsDict']]]] origins: Origins info
        :param pulumi.Input[_builtins.str] pool_id: Pool Id
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DnsGlbPoolState.__new__(_DnsGlbPoolState)

        __props__.__dict__["created_on"] = created_on
        __props__.__dict__["description"] = description
        __props__.__dict__["dns_glb_pool_id"] = dns_glb_pool_id
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["health"] = health
        __props__.__dict__["healthcheck_region"] = healthcheck_region
        __props__.__dict__["healthcheck_subnets"] = healthcheck_subnets
        __props__.__dict__["healthy_origins_threshold"] = healthy_origins_threshold
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["modified_on"] = modified_on
        __props__.__dict__["monitor"] = monitor
        __props__.__dict__["name"] = name
        __props__.__dict__["notification_channel"] = notification_channel
        __props__.__dict__["origins"] = origins
        __props__.__dict__["pool_id"] = pool_id
        __props__.__dict__["timeouts"] = timeouts
        return DnsGlbPool(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> pulumi.Output[_builtins.str]:
        """
        The time when a load balancer pool is created.
        """
        return pulumi.get(self, "created_on")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Descriptive text of the load balancer pool
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="dnsGlbPoolId")
    def dns_glb_pool_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "dns_glb_pool_id")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Whether the load balancer pool is enabled
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def health(self) -> pulumi.Output[_builtins.str]:
        """
        Whether the load balancer pool is enabled
        """
        return pulumi.get(self, "health")

    @_builtins.property
    @pulumi.getter(name="healthcheckRegion")
    def healthcheck_region(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Health check region of VSIs
        """
        return pulumi.get(self, "healthcheck_region")

    @_builtins.property
    @pulumi.getter(name="healthcheckSubnets")
    def healthcheck_subnets(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Health check subnet crn of VSIs
        """
        return pulumi.get(self, "healthcheck_subnets")

    @_builtins.property
    @pulumi.getter(name="healthyOriginsThreshold")
    def healthy_origins_threshold(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        The minimum number of origins that must be healthy for this pool to serve traffic
        """
        return pulumi.get(self, "healthy_origins_threshold")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Instance Id
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> pulumi.Output[_builtins.str]:
        """
        The recent time when a load balancer pool is modified.
        """
        return pulumi.get(self, "modified_on")

    @_builtins.property
    @pulumi.getter
    def monitor(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The ID of the load balancer monitor to be associated to this pool
        """
        return pulumi.get(self, "monitor")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier of a service instance.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="notificationChannel")
    def notification_channel(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The notification channel,It is a webhook url
        """
        return pulumi.get(self, "notification_channel")

    @_builtins.property
    @pulumi.getter
    def origins(self) -> pulumi.Output[Sequence['outputs.DnsGlbPoolOrigin']]:
        """
        Origins info
        """
        return pulumi.get(self, "origins")

    @_builtins.property
    @pulumi.getter(name="poolId")
    def pool_id(self) -> pulumi.Output[_builtins.str]:
        """
        Pool Id
        """
        return pulumi.get(self, "pool_id")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.DnsGlbPoolTimeouts']]:
        return pulumi.get(self, "timeouts")

