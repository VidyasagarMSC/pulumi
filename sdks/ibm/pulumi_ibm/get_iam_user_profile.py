# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetIamUserProfileResult',
    'AwaitableGetIamUserProfileResult',
    'get_iam_user_profile',
    'get_iam_user_profile_output',
]

@pulumi.output_type
class GetIamUserProfileResult:
    """
    A collection of values returned by getIamUserProfile.
    """
    def __init__(__self__, account_id=None, allowed_ip_addresses=None, altphonenumber=None, email=None, firstname=None, iam_id=None, ibm_id=None, id=None, lastname=None, phonenumber=None, state=None, user_id=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if allowed_ip_addresses and not isinstance(allowed_ip_addresses, list):
            raise TypeError("Expected argument 'allowed_ip_addresses' to be a list")
        pulumi.set(__self__, "allowed_ip_addresses", allowed_ip_addresses)
        if altphonenumber and not isinstance(altphonenumber, str):
            raise TypeError("Expected argument 'altphonenumber' to be a str")
        pulumi.set(__self__, "altphonenumber", altphonenumber)
        if email and not isinstance(email, str):
            raise TypeError("Expected argument 'email' to be a str")
        pulumi.set(__self__, "email", email)
        if firstname and not isinstance(firstname, str):
            raise TypeError("Expected argument 'firstname' to be a str")
        pulumi.set(__self__, "firstname", firstname)
        if iam_id and not isinstance(iam_id, str):
            raise TypeError("Expected argument 'iam_id' to be a str")
        pulumi.set(__self__, "iam_id", iam_id)
        if ibm_id and not isinstance(ibm_id, str):
            raise TypeError("Expected argument 'ibm_id' to be a str")
        pulumi.set(__self__, "ibm_id", ibm_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lastname and not isinstance(lastname, str):
            raise TypeError("Expected argument 'lastname' to be a str")
        pulumi.set(__self__, "lastname", lastname)
        if phonenumber and not isinstance(phonenumber, str):
            raise TypeError("Expected argument 'phonenumber' to be a str")
        pulumi.set(__self__, "phonenumber", phonenumber)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if user_id and not isinstance(user_id, str):
            raise TypeError("Expected argument 'user_id' to be a str")
        pulumi.set(__self__, "user_id", user_id)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="allowedIpAddresses")
    def allowed_ip_addresses(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "allowed_ip_addresses")

    @_builtins.property
    @pulumi.getter
    def altphonenumber(self) -> _builtins.str:
        return pulumi.get(self, "altphonenumber")

    @_builtins.property
    @pulumi.getter
    def email(self) -> _builtins.str:
        return pulumi.get(self, "email")

    @_builtins.property
    @pulumi.getter
    def firstname(self) -> _builtins.str:
        return pulumi.get(self, "firstname")

    @_builtins.property
    @pulumi.getter(name="iamId")
    def iam_id(self) -> _builtins.str:
        return pulumi.get(self, "iam_id")

    @_builtins.property
    @pulumi.getter(name="ibmId")
    def ibm_id(self) -> _builtins.str:
        return pulumi.get(self, "ibm_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def lastname(self) -> _builtins.str:
        return pulumi.get(self, "lastname")

    @_builtins.property
    @pulumi.getter
    def phonenumber(self) -> _builtins.str:
        return pulumi.get(self, "phonenumber")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> _builtins.str:
        return pulumi.get(self, "user_id")


class AwaitableGetIamUserProfileResult(GetIamUserProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamUserProfileResult(
            account_id=self.account_id,
            allowed_ip_addresses=self.allowed_ip_addresses,
            altphonenumber=self.altphonenumber,
            email=self.email,
            firstname=self.firstname,
            iam_id=self.iam_id,
            ibm_id=self.ibm_id,
            id=self.id,
            lastname=self.lastname,
            phonenumber=self.phonenumber,
            state=self.state,
            user_id=self.user_id)


def get_iam_user_profile(iam_id: Optional[_builtins.str] = None,
                         id: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamUserProfileResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['iamId'] = iam_id
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIamUserProfile:getIamUserProfile', __args__, opts=opts, typ=GetIamUserProfileResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIamUserProfileResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        allowed_ip_addresses=pulumi.get(__ret__, 'allowed_ip_addresses'),
        altphonenumber=pulumi.get(__ret__, 'altphonenumber'),
        email=pulumi.get(__ret__, 'email'),
        firstname=pulumi.get(__ret__, 'firstname'),
        iam_id=pulumi.get(__ret__, 'iam_id'),
        ibm_id=pulumi.get(__ret__, 'ibm_id'),
        id=pulumi.get(__ret__, 'id'),
        lastname=pulumi.get(__ret__, 'lastname'),
        phonenumber=pulumi.get(__ret__, 'phonenumber'),
        state=pulumi.get(__ret__, 'state'),
        user_id=pulumi.get(__ret__, 'user_id'))
def get_iam_user_profile_output(iam_id: Optional[pulumi.Input[_builtins.str]] = None,
                                id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamUserProfileResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['iamId'] = iam_id
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIamUserProfile:getIamUserProfile', __args__, opts=opts, typ=GetIamUserProfileResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIamUserProfileResult(
        account_id=pulumi.get(__response__, 'account_id'),
        allowed_ip_addresses=pulumi.get(__response__, 'allowed_ip_addresses'),
        altphonenumber=pulumi.get(__response__, 'altphonenumber'),
        email=pulumi.get(__response__, 'email'),
        firstname=pulumi.get(__response__, 'firstname'),
        iam_id=pulumi.get(__response__, 'iam_id'),
        ibm_id=pulumi.get(__response__, 'ibm_id'),
        id=pulumi.get(__response__, 'id'),
        lastname=pulumi.get(__response__, 'lastname'),
        phonenumber=pulumi.get(__response__, 'phonenumber'),
        state=pulumi.get(__response__, 'state'),
        user_id=pulumi.get(__response__, 'user_id')))
