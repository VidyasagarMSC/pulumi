# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IamAuthorizationPolicyArgs', 'IamAuthorizationPolicy']

@pulumi.input_type
class IamAuthorizationPolicyArgs:
    def __init__(__self__, *,
                 roles: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_authorization_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_attributes: Optional[pulumi.Input[Sequence[pulumi.Input['IamAuthorizationPolicyResourceAttributeArgs']]]] = None,
                 source_resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_resource_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 source_service_account: Optional[pulumi.Input[_builtins.str]] = None,
                 source_service_name: Optional[pulumi.Input[_builtins.str]] = None,
                 subject_attributes: Optional[pulumi.Input[Sequence[pulumi.Input['IamAuthorizationPolicySubjectAttributeArgs']]]] = None,
                 target_resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target_resource_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target_resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 target_service_name: Optional[pulumi.Input[_builtins.str]] = None,
                 transaction_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a IamAuthorizationPolicy resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] roles: Role names of the policy definition
        :param pulumi.Input[_builtins.str] description: Description of the Policy
        :param pulumi.Input[Sequence[pulumi.Input['IamAuthorizationPolicyResourceAttributeArgs']]] resource_attributes: Set resource attributes.
        :param pulumi.Input[_builtins.str] source_resource_group_id: The source resource group Id
        :param pulumi.Input[_builtins.str] source_resource_instance_id: The source resource instance Id
        :param pulumi.Input[_builtins.str] source_resource_type: Resource type of source service
        :param pulumi.Input[_builtins.str] source_service_account: Account GUID of source service
        :param pulumi.Input[_builtins.str] source_service_name: The source service name
        :param pulumi.Input[Sequence[pulumi.Input['IamAuthorizationPolicySubjectAttributeArgs']]] subject_attributes: Set subject attributes.
        :param pulumi.Input[_builtins.str] target_resource_group_id: The target resource group Id
        :param pulumi.Input[_builtins.str] target_resource_instance_id: The target resource instance Id
        :param pulumi.Input[_builtins.str] target_resource_type: Resource type of target service
        :param pulumi.Input[_builtins.str] target_service_name: The target service name
        :param pulumi.Input[_builtins.str] transaction_id: Set transactionID for debug
        """
        pulumi.set(__self__, "roles", roles)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if iam_authorization_policy_id is not None:
            pulumi.set(__self__, "iam_authorization_policy_id", iam_authorization_policy_id)
        if resource_attributes is not None:
            pulumi.set(__self__, "resource_attributes", resource_attributes)
        if source_resource_group_id is not None:
            pulumi.set(__self__, "source_resource_group_id", source_resource_group_id)
        if source_resource_instance_id is not None:
            pulumi.set(__self__, "source_resource_instance_id", source_resource_instance_id)
        if source_resource_type is not None:
            pulumi.set(__self__, "source_resource_type", source_resource_type)
        if source_service_account is not None:
            pulumi.set(__self__, "source_service_account", source_service_account)
        if source_service_name is not None:
            pulumi.set(__self__, "source_service_name", source_service_name)
        if subject_attributes is not None:
            pulumi.set(__self__, "subject_attributes", subject_attributes)
        if target_resource_group_id is not None:
            pulumi.set(__self__, "target_resource_group_id", target_resource_group_id)
        if target_resource_instance_id is not None:
            pulumi.set(__self__, "target_resource_instance_id", target_resource_instance_id)
        if target_resource_type is not None:
            pulumi.set(__self__, "target_resource_type", target_resource_type)
        if target_service_name is not None:
            pulumi.set(__self__, "target_service_name", target_service_name)
        if transaction_id is not None:
            pulumi.set(__self__, "transaction_id", transaction_id)

    @_builtins.property
    @pulumi.getter
    def roles(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Role names of the policy definition
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "roles", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the Policy
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="iamAuthorizationPolicyId")
    def iam_authorization_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "iam_authorization_policy_id")

    @iam_authorization_policy_id.setter
    def iam_authorization_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_authorization_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceAttributes")
    def resource_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IamAuthorizationPolicyResourceAttributeArgs']]]]:
        """
        Set resource attributes.
        """
        return pulumi.get(self, "resource_attributes")

    @resource_attributes.setter
    def resource_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IamAuthorizationPolicyResourceAttributeArgs']]]]):
        pulumi.set(self, "resource_attributes", value)

    @_builtins.property
    @pulumi.getter(name="sourceResourceGroupId")
    def source_resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The source resource group Id
        """
        return pulumi.get(self, "source_resource_group_id")

    @source_resource_group_id.setter
    def source_resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_resource_group_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceResourceInstanceId")
    def source_resource_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The source resource instance Id
        """
        return pulumi.get(self, "source_resource_instance_id")

    @source_resource_instance_id.setter
    def source_resource_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_resource_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceResourceType")
    def source_resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource type of source service
        """
        return pulumi.get(self, "source_resource_type")

    @source_resource_type.setter
    def source_resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_resource_type", value)

    @_builtins.property
    @pulumi.getter(name="sourceServiceAccount")
    def source_service_account(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Account GUID of source service
        """
        return pulumi.get(self, "source_service_account")

    @source_service_account.setter
    def source_service_account(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_service_account", value)

    @_builtins.property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The source service name
        """
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_service_name", value)

    @_builtins.property
    @pulumi.getter(name="subjectAttributes")
    def subject_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IamAuthorizationPolicySubjectAttributeArgs']]]]:
        """
        Set subject attributes.
        """
        return pulumi.get(self, "subject_attributes")

    @subject_attributes.setter
    def subject_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IamAuthorizationPolicySubjectAttributeArgs']]]]):
        pulumi.set(self, "subject_attributes", value)

    @_builtins.property
    @pulumi.getter(name="targetResourceGroupId")
    def target_resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The target resource group Id
        """
        return pulumi.get(self, "target_resource_group_id")

    @target_resource_group_id.setter
    def target_resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_resource_group_id", value)

    @_builtins.property
    @pulumi.getter(name="targetResourceInstanceId")
    def target_resource_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The target resource instance Id
        """
        return pulumi.get(self, "target_resource_instance_id")

    @target_resource_instance_id.setter
    def target_resource_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_resource_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="targetResourceType")
    def target_resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource type of target service
        """
        return pulumi.get(self, "target_resource_type")

    @target_resource_type.setter
    def target_resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_resource_type", value)

    @_builtins.property
    @pulumi.getter(name="targetServiceName")
    def target_service_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The target service name
        """
        return pulumi.get(self, "target_service_name")

    @target_service_name.setter
    def target_service_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_service_name", value)

    @_builtins.property
    @pulumi.getter(name="transactionId")
    def transaction_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set transactionID for debug
        """
        return pulumi.get(self, "transaction_id")

    @transaction_id.setter
    def transaction_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "transaction_id", value)


@pulumi.input_type
class _IamAuthorizationPolicyState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_authorization_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_attributes: Optional[pulumi.Input[Sequence[pulumi.Input['IamAuthorizationPolicyResourceAttributeArgs']]]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 source_resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_resource_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 source_service_account: Optional[pulumi.Input[_builtins.str]] = None,
                 source_service_name: Optional[pulumi.Input[_builtins.str]] = None,
                 subject_attributes: Optional[pulumi.Input[Sequence[pulumi.Input['IamAuthorizationPolicySubjectAttributeArgs']]]] = None,
                 target_resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target_resource_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target_resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 target_service_name: Optional[pulumi.Input[_builtins.str]] = None,
                 transaction_id: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IamAuthorizationPolicy resources.
        :param pulumi.Input[_builtins.str] description: Description of the Policy
        :param pulumi.Input[Sequence[pulumi.Input['IamAuthorizationPolicyResourceAttributeArgs']]] resource_attributes: Set resource attributes.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] roles: Role names of the policy definition
        :param pulumi.Input[_builtins.str] source_resource_group_id: The source resource group Id
        :param pulumi.Input[_builtins.str] source_resource_instance_id: The source resource instance Id
        :param pulumi.Input[_builtins.str] source_resource_type: Resource type of source service
        :param pulumi.Input[_builtins.str] source_service_account: Account GUID of source service
        :param pulumi.Input[_builtins.str] source_service_name: The source service name
        :param pulumi.Input[Sequence[pulumi.Input['IamAuthorizationPolicySubjectAttributeArgs']]] subject_attributes: Set subject attributes.
        :param pulumi.Input[_builtins.str] target_resource_group_id: The target resource group Id
        :param pulumi.Input[_builtins.str] target_resource_instance_id: The target resource instance Id
        :param pulumi.Input[_builtins.str] target_resource_type: Resource type of target service
        :param pulumi.Input[_builtins.str] target_service_name: The target service name
        :param pulumi.Input[_builtins.str] transaction_id: Set transactionID for debug
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if iam_authorization_policy_id is not None:
            pulumi.set(__self__, "iam_authorization_policy_id", iam_authorization_policy_id)
        if resource_attributes is not None:
            pulumi.set(__self__, "resource_attributes", resource_attributes)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if source_resource_group_id is not None:
            pulumi.set(__self__, "source_resource_group_id", source_resource_group_id)
        if source_resource_instance_id is not None:
            pulumi.set(__self__, "source_resource_instance_id", source_resource_instance_id)
        if source_resource_type is not None:
            pulumi.set(__self__, "source_resource_type", source_resource_type)
        if source_service_account is not None:
            pulumi.set(__self__, "source_service_account", source_service_account)
        if source_service_name is not None:
            pulumi.set(__self__, "source_service_name", source_service_name)
        if subject_attributes is not None:
            pulumi.set(__self__, "subject_attributes", subject_attributes)
        if target_resource_group_id is not None:
            pulumi.set(__self__, "target_resource_group_id", target_resource_group_id)
        if target_resource_instance_id is not None:
            pulumi.set(__self__, "target_resource_instance_id", target_resource_instance_id)
        if target_resource_type is not None:
            pulumi.set(__self__, "target_resource_type", target_resource_type)
        if target_service_name is not None:
            pulumi.set(__self__, "target_service_name", target_service_name)
        if transaction_id is not None:
            pulumi.set(__self__, "transaction_id", transaction_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the Policy
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="iamAuthorizationPolicyId")
    def iam_authorization_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "iam_authorization_policy_id")

    @iam_authorization_policy_id.setter
    def iam_authorization_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_authorization_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceAttributes")
    def resource_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IamAuthorizationPolicyResourceAttributeArgs']]]]:
        """
        Set resource attributes.
        """
        return pulumi.get(self, "resource_attributes")

    @resource_attributes.setter
    def resource_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IamAuthorizationPolicyResourceAttributeArgs']]]]):
        pulumi.set(self, "resource_attributes", value)

    @_builtins.property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Role names of the policy definition
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "roles", value)

    @_builtins.property
    @pulumi.getter(name="sourceResourceGroupId")
    def source_resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The source resource group Id
        """
        return pulumi.get(self, "source_resource_group_id")

    @source_resource_group_id.setter
    def source_resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_resource_group_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceResourceInstanceId")
    def source_resource_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The source resource instance Id
        """
        return pulumi.get(self, "source_resource_instance_id")

    @source_resource_instance_id.setter
    def source_resource_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_resource_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceResourceType")
    def source_resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource type of source service
        """
        return pulumi.get(self, "source_resource_type")

    @source_resource_type.setter
    def source_resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_resource_type", value)

    @_builtins.property
    @pulumi.getter(name="sourceServiceAccount")
    def source_service_account(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Account GUID of source service
        """
        return pulumi.get(self, "source_service_account")

    @source_service_account.setter
    def source_service_account(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_service_account", value)

    @_builtins.property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The source service name
        """
        return pulumi.get(self, "source_service_name")

    @source_service_name.setter
    def source_service_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_service_name", value)

    @_builtins.property
    @pulumi.getter(name="subjectAttributes")
    def subject_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IamAuthorizationPolicySubjectAttributeArgs']]]]:
        """
        Set subject attributes.
        """
        return pulumi.get(self, "subject_attributes")

    @subject_attributes.setter
    def subject_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IamAuthorizationPolicySubjectAttributeArgs']]]]):
        pulumi.set(self, "subject_attributes", value)

    @_builtins.property
    @pulumi.getter(name="targetResourceGroupId")
    def target_resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The target resource group Id
        """
        return pulumi.get(self, "target_resource_group_id")

    @target_resource_group_id.setter
    def target_resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_resource_group_id", value)

    @_builtins.property
    @pulumi.getter(name="targetResourceInstanceId")
    def target_resource_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The target resource instance Id
        """
        return pulumi.get(self, "target_resource_instance_id")

    @target_resource_instance_id.setter
    def target_resource_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_resource_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="targetResourceType")
    def target_resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource type of target service
        """
        return pulumi.get(self, "target_resource_type")

    @target_resource_type.setter
    def target_resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_resource_type", value)

    @_builtins.property
    @pulumi.getter(name="targetServiceName")
    def target_service_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The target service name
        """
        return pulumi.get(self, "target_service_name")

    @target_service_name.setter
    def target_service_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_service_name", value)

    @_builtins.property
    @pulumi.getter(name="transactionId")
    def transaction_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set transactionID for debug
        """
        return pulumi.get(self, "transaction_id")

    @transaction_id.setter
    def transaction_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "transaction_id", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


@pulumi.type_token("ibm:index/iamAuthorizationPolicy:IamAuthorizationPolicy")
class IamAuthorizationPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_authorization_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamAuthorizationPolicyResourceAttributeArgs', 'IamAuthorizationPolicyResourceAttributeArgsDict']]]]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 source_resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_resource_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 source_service_account: Optional[pulumi.Input[_builtins.str]] = None,
                 source_service_name: Optional[pulumi.Input[_builtins.str]] = None,
                 subject_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamAuthorizationPolicySubjectAttributeArgs', 'IamAuthorizationPolicySubjectAttributeArgsDict']]]]] = None,
                 target_resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target_resource_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target_resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 target_service_name: Optional[pulumi.Input[_builtins.str]] = None,
                 transaction_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IamAuthorizationPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Description of the Policy
        :param pulumi.Input[Sequence[pulumi.Input[Union['IamAuthorizationPolicyResourceAttributeArgs', 'IamAuthorizationPolicyResourceAttributeArgsDict']]]] resource_attributes: Set resource attributes.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] roles: Role names of the policy definition
        :param pulumi.Input[_builtins.str] source_resource_group_id: The source resource group Id
        :param pulumi.Input[_builtins.str] source_resource_instance_id: The source resource instance Id
        :param pulumi.Input[_builtins.str] source_resource_type: Resource type of source service
        :param pulumi.Input[_builtins.str] source_service_account: Account GUID of source service
        :param pulumi.Input[_builtins.str] source_service_name: The source service name
        :param pulumi.Input[Sequence[pulumi.Input[Union['IamAuthorizationPolicySubjectAttributeArgs', 'IamAuthorizationPolicySubjectAttributeArgsDict']]]] subject_attributes: Set subject attributes.
        :param pulumi.Input[_builtins.str] target_resource_group_id: The target resource group Id
        :param pulumi.Input[_builtins.str] target_resource_instance_id: The target resource instance Id
        :param pulumi.Input[_builtins.str] target_resource_type: Resource type of target service
        :param pulumi.Input[_builtins.str] target_service_name: The target service name
        :param pulumi.Input[_builtins.str] transaction_id: Set transactionID for debug
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IamAuthorizationPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IamAuthorizationPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IamAuthorizationPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IamAuthorizationPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_authorization_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamAuthorizationPolicyResourceAttributeArgs', 'IamAuthorizationPolicyResourceAttributeArgsDict']]]]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 source_resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_resource_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 source_service_account: Optional[pulumi.Input[_builtins.str]] = None,
                 source_service_name: Optional[pulumi.Input[_builtins.str]] = None,
                 subject_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamAuthorizationPolicySubjectAttributeArgs', 'IamAuthorizationPolicySubjectAttributeArgsDict']]]]] = None,
                 target_resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target_resource_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 target_resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 target_service_name: Optional[pulumi.Input[_builtins.str]] = None,
                 transaction_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IamAuthorizationPolicyArgs.__new__(IamAuthorizationPolicyArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["iam_authorization_policy_id"] = iam_authorization_policy_id
            __props__.__dict__["resource_attributes"] = resource_attributes
            if roles is None and not opts.urn:
                raise TypeError("Missing required property 'roles'")
            __props__.__dict__["roles"] = roles
            __props__.__dict__["source_resource_group_id"] = source_resource_group_id
            __props__.__dict__["source_resource_instance_id"] = source_resource_instance_id
            __props__.__dict__["source_resource_type"] = source_resource_type
            __props__.__dict__["source_service_account"] = source_service_account
            __props__.__dict__["source_service_name"] = source_service_name
            __props__.__dict__["subject_attributes"] = subject_attributes
            __props__.__dict__["target_resource_group_id"] = target_resource_group_id
            __props__.__dict__["target_resource_instance_id"] = target_resource_instance_id
            __props__.__dict__["target_resource_type"] = target_resource_type
            __props__.__dict__["target_service_name"] = target_service_name
            __props__.__dict__["transaction_id"] = transaction_id
            __props__.__dict__["version"] = None
        super(IamAuthorizationPolicy, __self__).__init__(
            'ibm:index/iamAuthorizationPolicy:IamAuthorizationPolicy',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            iam_authorization_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            resource_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamAuthorizationPolicyResourceAttributeArgs', 'IamAuthorizationPolicyResourceAttributeArgsDict']]]]] = None,
            roles: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            source_resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            source_resource_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            source_resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            source_service_account: Optional[pulumi.Input[_builtins.str]] = None,
            source_service_name: Optional[pulumi.Input[_builtins.str]] = None,
            subject_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamAuthorizationPolicySubjectAttributeArgs', 'IamAuthorizationPolicySubjectAttributeArgsDict']]]]] = None,
            target_resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            target_resource_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            target_resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            target_service_name: Optional[pulumi.Input[_builtins.str]] = None,
            transaction_id: Optional[pulumi.Input[_builtins.str]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None) -> 'IamAuthorizationPolicy':
        """
        Get an existing IamAuthorizationPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Description of the Policy
        :param pulumi.Input[Sequence[pulumi.Input[Union['IamAuthorizationPolicyResourceAttributeArgs', 'IamAuthorizationPolicyResourceAttributeArgsDict']]]] resource_attributes: Set resource attributes.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] roles: Role names of the policy definition
        :param pulumi.Input[_builtins.str] source_resource_group_id: The source resource group Id
        :param pulumi.Input[_builtins.str] source_resource_instance_id: The source resource instance Id
        :param pulumi.Input[_builtins.str] source_resource_type: Resource type of source service
        :param pulumi.Input[_builtins.str] source_service_account: Account GUID of source service
        :param pulumi.Input[_builtins.str] source_service_name: The source service name
        :param pulumi.Input[Sequence[pulumi.Input[Union['IamAuthorizationPolicySubjectAttributeArgs', 'IamAuthorizationPolicySubjectAttributeArgsDict']]]] subject_attributes: Set subject attributes.
        :param pulumi.Input[_builtins.str] target_resource_group_id: The target resource group Id
        :param pulumi.Input[_builtins.str] target_resource_instance_id: The target resource instance Id
        :param pulumi.Input[_builtins.str] target_resource_type: Resource type of target service
        :param pulumi.Input[_builtins.str] target_service_name: The target service name
        :param pulumi.Input[_builtins.str] transaction_id: Set transactionID for debug
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IamAuthorizationPolicyState.__new__(_IamAuthorizationPolicyState)

        __props__.__dict__["description"] = description
        __props__.__dict__["iam_authorization_policy_id"] = iam_authorization_policy_id
        __props__.__dict__["resource_attributes"] = resource_attributes
        __props__.__dict__["roles"] = roles
        __props__.__dict__["source_resource_group_id"] = source_resource_group_id
        __props__.__dict__["source_resource_instance_id"] = source_resource_instance_id
        __props__.__dict__["source_resource_type"] = source_resource_type
        __props__.__dict__["source_service_account"] = source_service_account
        __props__.__dict__["source_service_name"] = source_service_name
        __props__.__dict__["subject_attributes"] = subject_attributes
        __props__.__dict__["target_resource_group_id"] = target_resource_group_id
        __props__.__dict__["target_resource_instance_id"] = target_resource_instance_id
        __props__.__dict__["target_resource_type"] = target_resource_type
        __props__.__dict__["target_service_name"] = target_service_name
        __props__.__dict__["transaction_id"] = transaction_id
        __props__.__dict__["version"] = version
        return IamAuthorizationPolicy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Description of the Policy
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="iamAuthorizationPolicyId")
    def iam_authorization_policy_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "iam_authorization_policy_id")

    @_builtins.property
    @pulumi.getter(name="resourceAttributes")
    def resource_attributes(self) -> pulumi.Output[Optional[Sequence['outputs.IamAuthorizationPolicyResourceAttribute']]]:
        """
        Set resource attributes.
        """
        return pulumi.get(self, "resource_attributes")

    @_builtins.property
    @pulumi.getter
    def roles(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Role names of the policy definition
        """
        return pulumi.get(self, "roles")

    @_builtins.property
    @pulumi.getter(name="sourceResourceGroupId")
    def source_resource_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        The source resource group Id
        """
        return pulumi.get(self, "source_resource_group_id")

    @_builtins.property
    @pulumi.getter(name="sourceResourceInstanceId")
    def source_resource_instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The source resource instance Id
        """
        return pulumi.get(self, "source_resource_instance_id")

    @_builtins.property
    @pulumi.getter(name="sourceResourceType")
    def source_resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        Resource type of source service
        """
        return pulumi.get(self, "source_resource_type")

    @_builtins.property
    @pulumi.getter(name="sourceServiceAccount")
    def source_service_account(self) -> pulumi.Output[_builtins.str]:
        """
        Account GUID of source service
        """
        return pulumi.get(self, "source_service_account")

    @_builtins.property
    @pulumi.getter(name="sourceServiceName")
    def source_service_name(self) -> pulumi.Output[_builtins.str]:
        """
        The source service name
        """
        return pulumi.get(self, "source_service_name")

    @_builtins.property
    @pulumi.getter(name="subjectAttributes")
    def subject_attributes(self) -> pulumi.Output[Optional[Sequence['outputs.IamAuthorizationPolicySubjectAttribute']]]:
        """
        Set subject attributes.
        """
        return pulumi.get(self, "subject_attributes")

    @_builtins.property
    @pulumi.getter(name="targetResourceGroupId")
    def target_resource_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        The target resource group Id
        """
        return pulumi.get(self, "target_resource_group_id")

    @_builtins.property
    @pulumi.getter(name="targetResourceInstanceId")
    def target_resource_instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The target resource instance Id
        """
        return pulumi.get(self, "target_resource_instance_id")

    @_builtins.property
    @pulumi.getter(name="targetResourceType")
    def target_resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        Resource type of target service
        """
        return pulumi.get(self, "target_resource_type")

    @_builtins.property
    @pulumi.getter(name="targetServiceName")
    def target_service_name(self) -> pulumi.Output[_builtins.str]:
        """
        The target service name
        """
        return pulumi.get(self, "target_service_name")

    @_builtins.property
    @pulumi.getter(name="transactionId")
    def transaction_id(self) -> pulumi.Output[_builtins.str]:
        """
        Set transactionID for debug
        """
        return pulumi.get(self, "transaction_id")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "version")

