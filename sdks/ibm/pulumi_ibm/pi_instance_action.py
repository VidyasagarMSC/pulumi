# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PiInstanceActionArgs', 'PiInstanceAction']

@pulumi.input_type
class PiInstanceActionArgs:
    def __init__(__self__, *,
                 pi_action: pulumi.Input[_builtins.str],
                 pi_cloud_instance_id: pulumi.Input[_builtins.str],
                 pi_instance_id: pulumi.Input[_builtins.str],
                 pi_health_status: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_instance_action_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['PiInstanceActionTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a PiInstanceAction resource.
        :param pulumi.Input[_builtins.str] pi_action: PVM instance action type
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: PI Cloud instance id
        :param pulumi.Input[_builtins.str] pi_instance_id: PVM instance ID
        :param pulumi.Input[_builtins.str] pi_health_status: Set the health status of the PVM instance to connect it faster
        """
        pulumi.set(__self__, "pi_action", pi_action)
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        pulumi.set(__self__, "pi_instance_id", pi_instance_id)
        if pi_health_status is not None:
            pulumi.set(__self__, "pi_health_status", pi_health_status)
        if pi_instance_action_id is not None:
            pulumi.set(__self__, "pi_instance_action_id", pi_instance_action_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="piAction")
    def pi_action(self) -> pulumi.Input[_builtins.str]:
        """
        PVM instance action type
        """
        return pulumi.get(self, "pi_action")

    @pi_action.setter
    def pi_action(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_action", value)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        PI Cloud instance id
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piInstanceId")
    def pi_instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        PVM instance ID
        """
        return pulumi.get(self, "pi_instance_id")

    @pi_instance_id.setter
    def pi_instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piHealthStatus")
    def pi_health_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the health status of the PVM instance to connect it faster
        """
        return pulumi.get(self, "pi_health_status")

    @pi_health_status.setter
    def pi_health_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_health_status", value)

    @_builtins.property
    @pulumi.getter(name="piInstanceActionId")
    def pi_instance_action_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_instance_action_id")

    @pi_instance_action_id.setter
    def pi_instance_action_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_instance_action_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiInstanceActionTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiInstanceActionTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _PiInstanceActionState:
    def __init__(__self__, *,
                 health_status: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_action: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_health_status: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_instance_action_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 progress: Optional[pulumi.Input[_builtins.float]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['PiInstanceActionTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering PiInstanceAction resources.
        :param pulumi.Input[_builtins.str] health_status: The PVM's health status value
        :param pulumi.Input[_builtins.str] pi_action: PVM instance action type
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: PI Cloud instance id
        :param pulumi.Input[_builtins.str] pi_health_status: Set the health status of the PVM instance to connect it faster
        :param pulumi.Input[_builtins.str] pi_instance_id: PVM instance ID
        :param pulumi.Input[_builtins.float] progress: The progress of an operation
        :param pulumi.Input[_builtins.str] status: The status of the PVM instance
        """
        if health_status is not None:
            pulumi.set(__self__, "health_status", health_status)
        if pi_action is not None:
            pulumi.set(__self__, "pi_action", pi_action)
        if pi_cloud_instance_id is not None:
            pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_health_status is not None:
            pulumi.set(__self__, "pi_health_status", pi_health_status)
        if pi_instance_action_id is not None:
            pulumi.set(__self__, "pi_instance_action_id", pi_instance_action_id)
        if pi_instance_id is not None:
            pulumi.set(__self__, "pi_instance_id", pi_instance_id)
        if progress is not None:
            pulumi.set(__self__, "progress", progress)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The PVM's health status value
        """
        return pulumi.get(self, "health_status")

    @health_status.setter
    def health_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "health_status", value)

    @_builtins.property
    @pulumi.getter(name="piAction")
    def pi_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        PVM instance action type
        """
        return pulumi.get(self, "pi_action")

    @pi_action.setter
    def pi_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_action", value)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        PI Cloud instance id
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piHealthStatus")
    def pi_health_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set the health status of the PVM instance to connect it faster
        """
        return pulumi.get(self, "pi_health_status")

    @pi_health_status.setter
    def pi_health_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_health_status", value)

    @_builtins.property
    @pulumi.getter(name="piInstanceActionId")
    def pi_instance_action_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_instance_action_id")

    @pi_instance_action_id.setter
    def pi_instance_action_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_instance_action_id", value)

    @_builtins.property
    @pulumi.getter(name="piInstanceId")
    def pi_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        PVM instance ID
        """
        return pulumi.get(self, "pi_instance_id")

    @pi_instance_id.setter
    def pi_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_instance_id", value)

    @_builtins.property
    @pulumi.getter
    def progress(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The progress of an operation
        """
        return pulumi.get(self, "progress")

    @progress.setter
    def progress(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "progress", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the PVM instance
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiInstanceActionTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiInstanceActionTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/piInstanceAction:PiInstanceAction")
class PiInstanceAction(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_action: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_health_status: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_instance_action_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiInstanceActionTimeoutsArgs', 'PiInstanceActionTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a PiInstanceAction resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] pi_action: PVM instance action type
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: PI Cloud instance id
        :param pulumi.Input[_builtins.str] pi_health_status: Set the health status of the PVM instance to connect it faster
        :param pulumi.Input[_builtins.str] pi_instance_id: PVM instance ID
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PiInstanceActionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PiInstanceAction resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PiInstanceActionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PiInstanceActionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_action: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_health_status: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_instance_action_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiInstanceActionTimeoutsArgs', 'PiInstanceActionTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PiInstanceActionArgs.__new__(PiInstanceActionArgs)

            if pi_action is None and not opts.urn:
                raise TypeError("Missing required property 'pi_action'")
            __props__.__dict__["pi_action"] = pi_action
            if pi_cloud_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'pi_cloud_instance_id'")
            __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
            __props__.__dict__["pi_health_status"] = pi_health_status
            __props__.__dict__["pi_instance_action_id"] = pi_instance_action_id
            if pi_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'pi_instance_id'")
            __props__.__dict__["pi_instance_id"] = pi_instance_id
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["health_status"] = None
            __props__.__dict__["progress"] = None
            __props__.__dict__["status"] = None
        super(PiInstanceAction, __self__).__init__(
            'ibm:index/piInstanceAction:PiInstanceAction',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            health_status: Optional[pulumi.Input[_builtins.str]] = None,
            pi_action: Optional[pulumi.Input[_builtins.str]] = None,
            pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_health_status: Optional[pulumi.Input[_builtins.str]] = None,
            pi_instance_action_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            progress: Optional[pulumi.Input[_builtins.float]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['PiInstanceActionTimeoutsArgs', 'PiInstanceActionTimeoutsArgsDict']]] = None) -> 'PiInstanceAction':
        """
        Get an existing PiInstanceAction resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] health_status: The PVM's health status value
        :param pulumi.Input[_builtins.str] pi_action: PVM instance action type
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: PI Cloud instance id
        :param pulumi.Input[_builtins.str] pi_health_status: Set the health status of the PVM instance to connect it faster
        :param pulumi.Input[_builtins.str] pi_instance_id: PVM instance ID
        :param pulumi.Input[_builtins.float] progress: The progress of an operation
        :param pulumi.Input[_builtins.str] status: The status of the PVM instance
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PiInstanceActionState.__new__(_PiInstanceActionState)

        __props__.__dict__["health_status"] = health_status
        __props__.__dict__["pi_action"] = pi_action
        __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
        __props__.__dict__["pi_health_status"] = pi_health_status
        __props__.__dict__["pi_instance_action_id"] = pi_instance_action_id
        __props__.__dict__["pi_instance_id"] = pi_instance_id
        __props__.__dict__["progress"] = progress
        __props__.__dict__["status"] = status
        __props__.__dict__["timeouts"] = timeouts
        return PiInstanceAction(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> pulumi.Output[_builtins.str]:
        """
        The PVM's health status value
        """
        return pulumi.get(self, "health_status")

    @_builtins.property
    @pulumi.getter(name="piAction")
    def pi_action(self) -> pulumi.Output[_builtins.str]:
        """
        PVM instance action type
        """
        return pulumi.get(self, "pi_action")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        PI Cloud instance id
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piHealthStatus")
    def pi_health_status(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Set the health status of the PVM instance to connect it faster
        """
        return pulumi.get(self, "pi_health_status")

    @_builtins.property
    @pulumi.getter(name="piInstanceActionId")
    def pi_instance_action_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "pi_instance_action_id")

    @_builtins.property
    @pulumi.getter(name="piInstanceId")
    def pi_instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        PVM instance ID
        """
        return pulumi.get(self, "pi_instance_id")

    @_builtins.property
    @pulumi.getter
    def progress(self) -> pulumi.Output[_builtins.float]:
        """
        The progress of an operation
        """
        return pulumi.get(self, "progress")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the PVM instance
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.PiInstanceActionTimeouts']]:
        return pulumi.get(self, "timeouts")

