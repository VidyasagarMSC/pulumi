# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PiWorkspaceArgs', 'PiWorkspace']

@pulumi.input_type
class PiWorkspaceArgs:
    def __init__(__self__, *,
                 pi_datacenter: pulumi.Input[_builtins.str],
                 pi_name: pulumi.Input[_builtins.str],
                 pi_resource_group_id: pulumi.Input[_builtins.str],
                 pi_plan: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['PiWorkspaceTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a PiWorkspace resource.
        :param pulumi.Input[_builtins.str] pi_datacenter: Target location or environment to create the resource instance.
        :param pulumi.Input[_builtins.str] pi_name: A descriptive name used to identify the workspace.
        :param pulumi.Input[_builtins.str] pi_resource_group_id: The ID of the resource group where you want to create the workspace. You can retrieve the value from data source
               ibm_resource_group.
        :param pulumi.Input[_builtins.str] pi_plan: Plan associated with the offering; Valid values are public or private.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: List of user tags attached to the resource.
        """
        pulumi.set(__self__, "pi_datacenter", pi_datacenter)
        pulumi.set(__self__, "pi_name", pi_name)
        pulumi.set(__self__, "pi_resource_group_id", pi_resource_group_id)
        if pi_plan is not None:
            pulumi.set(__self__, "pi_plan", pi_plan)
        if pi_user_tags is not None:
            pulumi.set(__self__, "pi_user_tags", pi_user_tags)
        if pi_workspace_id is not None:
            pulumi.set(__self__, "pi_workspace_id", pi_workspace_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="piDatacenter")
    def pi_datacenter(self) -> pulumi.Input[_builtins.str]:
        """
        Target location or environment to create the resource instance.
        """
        return pulumi.get(self, "pi_datacenter")

    @pi_datacenter.setter
    def pi_datacenter(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_datacenter", value)

    @_builtins.property
    @pulumi.getter(name="piName")
    def pi_name(self) -> pulumi.Input[_builtins.str]:
        """
        A descriptive name used to identify the workspace.
        """
        return pulumi.get(self, "pi_name")

    @pi_name.setter
    def pi_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_name", value)

    @_builtins.property
    @pulumi.getter(name="piResourceGroupId")
    def pi_resource_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the resource group where you want to create the workspace. You can retrieve the value from data source
        ibm_resource_group.
        """
        return pulumi.get(self, "pi_resource_group_id")

    @pi_resource_group_id.setter
    def pi_resource_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_resource_group_id", value)

    @_builtins.property
    @pulumi.getter(name="piPlan")
    def pi_plan(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Plan associated with the offering; Valid values are public or private.
        """
        return pulumi.get(self, "pi_plan")

    @pi_plan.setter
    def pi_plan(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_plan", value)

    @_builtins.property
    @pulumi.getter(name="piUserTags")
    def pi_user_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of user tags attached to the resource.
        """
        return pulumi.get(self, "pi_user_tags")

    @pi_user_tags.setter
    def pi_user_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_user_tags", value)

    @_builtins.property
    @pulumi.getter(name="piWorkspaceId")
    def pi_workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_workspace_id")

    @pi_workspace_id.setter
    def pi_workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_workspace_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiWorkspaceTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiWorkspaceTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _PiWorkspaceState:
    def __init__(__self__, *,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_plan: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_workspace_details: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 pi_workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['PiWorkspaceTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering PiWorkspace resources.
        :param pulumi.Input[_builtins.str] crn: The Workspace crn.
        :param pulumi.Input[_builtins.str] pi_datacenter: Target location or environment to create the resource instance.
        :param pulumi.Input[_builtins.str] pi_name: A descriptive name used to identify the workspace.
        :param pulumi.Input[_builtins.str] pi_plan: Plan associated with the offering; Valid values are public or private.
        :param pulumi.Input[_builtins.str] pi_resource_group_id: The ID of the resource group where you want to create the workspace. You can retrieve the value from data source
               ibm_resource_group.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: List of user tags attached to the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] pi_workspace_details: Workspace information.
        """
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if pi_datacenter is not None:
            pulumi.set(__self__, "pi_datacenter", pi_datacenter)
        if pi_name is not None:
            pulumi.set(__self__, "pi_name", pi_name)
        if pi_plan is not None:
            pulumi.set(__self__, "pi_plan", pi_plan)
        if pi_resource_group_id is not None:
            pulumi.set(__self__, "pi_resource_group_id", pi_resource_group_id)
        if pi_user_tags is not None:
            pulumi.set(__self__, "pi_user_tags", pi_user_tags)
        if pi_workspace_details is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""pi_workspace_details is deprecated: Deprecated""")
        if pi_workspace_details is not None:
            pulumi.set(__self__, "pi_workspace_details", pi_workspace_details)
        if pi_workspace_id is not None:
            pulumi.set(__self__, "pi_workspace_id", pi_workspace_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Workspace crn.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="piDatacenter")
    def pi_datacenter(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Target location or environment to create the resource instance.
        """
        return pulumi.get(self, "pi_datacenter")

    @pi_datacenter.setter
    def pi_datacenter(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_datacenter", value)

    @_builtins.property
    @pulumi.getter(name="piName")
    def pi_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A descriptive name used to identify the workspace.
        """
        return pulumi.get(self, "pi_name")

    @pi_name.setter
    def pi_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_name", value)

    @_builtins.property
    @pulumi.getter(name="piPlan")
    def pi_plan(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Plan associated with the offering; Valid values are public or private.
        """
        return pulumi.get(self, "pi_plan")

    @pi_plan.setter
    def pi_plan(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_plan", value)

    @_builtins.property
    @pulumi.getter(name="piResourceGroupId")
    def pi_resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the resource group where you want to create the workspace. You can retrieve the value from data source
        ibm_resource_group.
        """
        return pulumi.get(self, "pi_resource_group_id")

    @pi_resource_group_id.setter
    def pi_resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_resource_group_id", value)

    @_builtins.property
    @pulumi.getter(name="piUserTags")
    def pi_user_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of user tags attached to the resource.
        """
        return pulumi.get(self, "pi_user_tags")

    @pi_user_tags.setter
    def pi_user_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_user_tags", value)

    @_builtins.property
    @pulumi.getter(name="piWorkspaceDetails")
    @_utilities.deprecated("""Deprecated""")
    def pi_workspace_details(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Workspace information.
        """
        return pulumi.get(self, "pi_workspace_details")

    @pi_workspace_details.setter
    def pi_workspace_details(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_workspace_details", value)

    @_builtins.property
    @pulumi.getter(name="piWorkspaceId")
    def pi_workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_workspace_id")

    @pi_workspace_id.setter
    def pi_workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_workspace_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiWorkspaceTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiWorkspaceTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/piWorkspace:PiWorkspace")
class PiWorkspace(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_plan: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiWorkspaceTimeoutsArgs', 'PiWorkspaceTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a PiWorkspace resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] pi_datacenter: Target location or environment to create the resource instance.
        :param pulumi.Input[_builtins.str] pi_name: A descriptive name used to identify the workspace.
        :param pulumi.Input[_builtins.str] pi_plan: Plan associated with the offering; Valid values are public or private.
        :param pulumi.Input[_builtins.str] pi_resource_group_id: The ID of the resource group where you want to create the workspace. You can retrieve the value from data source
               ibm_resource_group.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: List of user tags attached to the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PiWorkspaceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PiWorkspace resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PiWorkspaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PiWorkspaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_plan: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiWorkspaceTimeoutsArgs', 'PiWorkspaceTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PiWorkspaceArgs.__new__(PiWorkspaceArgs)

            if pi_datacenter is None and not opts.urn:
                raise TypeError("Missing required property 'pi_datacenter'")
            __props__.__dict__["pi_datacenter"] = pi_datacenter
            if pi_name is None and not opts.urn:
                raise TypeError("Missing required property 'pi_name'")
            __props__.__dict__["pi_name"] = pi_name
            __props__.__dict__["pi_plan"] = pi_plan
            if pi_resource_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'pi_resource_group_id'")
            __props__.__dict__["pi_resource_group_id"] = pi_resource_group_id
            __props__.__dict__["pi_user_tags"] = pi_user_tags
            __props__.__dict__["pi_workspace_id"] = pi_workspace_id
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["crn"] = None
            __props__.__dict__["pi_workspace_details"] = None
        super(PiWorkspace, __self__).__init__(
            'ibm:index/piWorkspace:PiWorkspace',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            pi_datacenter: Optional[pulumi.Input[_builtins.str]] = None,
            pi_name: Optional[pulumi.Input[_builtins.str]] = None,
            pi_plan: Optional[pulumi.Input[_builtins.str]] = None,
            pi_resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            pi_workspace_details: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            pi_workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['PiWorkspaceTimeoutsArgs', 'PiWorkspaceTimeoutsArgsDict']]] = None) -> 'PiWorkspace':
        """
        Get an existing PiWorkspace resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] crn: The Workspace crn.
        :param pulumi.Input[_builtins.str] pi_datacenter: Target location or environment to create the resource instance.
        :param pulumi.Input[_builtins.str] pi_name: A descriptive name used to identify the workspace.
        :param pulumi.Input[_builtins.str] pi_plan: Plan associated with the offering; Valid values are public or private.
        :param pulumi.Input[_builtins.str] pi_resource_group_id: The ID of the resource group where you want to create the workspace. You can retrieve the value from data source
               ibm_resource_group.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: List of user tags attached to the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] pi_workspace_details: Workspace information.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PiWorkspaceState.__new__(_PiWorkspaceState)

        __props__.__dict__["crn"] = crn
        __props__.__dict__["pi_datacenter"] = pi_datacenter
        __props__.__dict__["pi_name"] = pi_name
        __props__.__dict__["pi_plan"] = pi_plan
        __props__.__dict__["pi_resource_group_id"] = pi_resource_group_id
        __props__.__dict__["pi_user_tags"] = pi_user_tags
        __props__.__dict__["pi_workspace_details"] = pi_workspace_details
        __props__.__dict__["pi_workspace_id"] = pi_workspace_id
        __props__.__dict__["timeouts"] = timeouts
        return PiWorkspace(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The Workspace crn.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="piDatacenter")
    def pi_datacenter(self) -> pulumi.Output[_builtins.str]:
        """
        Target location or environment to create the resource instance.
        """
        return pulumi.get(self, "pi_datacenter")

    @_builtins.property
    @pulumi.getter(name="piName")
    def pi_name(self) -> pulumi.Output[_builtins.str]:
        """
        A descriptive name used to identify the workspace.
        """
        return pulumi.get(self, "pi_name")

    @_builtins.property
    @pulumi.getter(name="piPlan")
    def pi_plan(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Plan associated with the offering; Valid values are public or private.
        """
        return pulumi.get(self, "pi_plan")

    @_builtins.property
    @pulumi.getter(name="piResourceGroupId")
    def pi_resource_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the resource group where you want to create the workspace. You can retrieve the value from data source
        ibm_resource_group.
        """
        return pulumi.get(self, "pi_resource_group_id")

    @_builtins.property
    @pulumi.getter(name="piUserTags")
    def pi_user_tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of user tags attached to the resource.
        """
        return pulumi.get(self, "pi_user_tags")

    @_builtins.property
    @pulumi.getter(name="piWorkspaceDetails")
    @_utilities.deprecated("""Deprecated""")
    def pi_workspace_details(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Workspace information.
        """
        return pulumi.get(self, "pi_workspace_details")

    @_builtins.property
    @pulumi.getter(name="piWorkspaceId")
    def pi_workspace_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "pi_workspace_id")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.PiWorkspaceTimeouts']]:
        return pulumi.get(self, "timeouts")

