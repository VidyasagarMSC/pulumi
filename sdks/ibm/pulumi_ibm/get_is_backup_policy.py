# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsBackupPolicyResult',
    'AwaitableGetIsBackupPolicyResult',
    'get_is_backup_policy',
    'get_is_backup_policy_output',
]

@pulumi.output_type
class GetIsBackupPolicyResult:
    """
    A collection of values returned by getIsBackupPolicy.
    """
    def __init__(__self__, created_at=None, crn=None, health_reasons=None, health_state=None, href=None, id=None, identifier=None, included_contents=None, last_job_completed_at=None, lifecycle_state=None, match_resource_type=None, match_resource_types=None, match_user_tags=None, name=None, plans=None, resource_groups=None, resource_type=None, scopes=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if health_reasons and not isinstance(health_reasons, list):
            raise TypeError("Expected argument 'health_reasons' to be a list")
        pulumi.set(__self__, "health_reasons", health_reasons)
        if health_state and not isinstance(health_state, str):
            raise TypeError("Expected argument 'health_state' to be a str")
        pulumi.set(__self__, "health_state", health_state)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identifier and not isinstance(identifier, str):
            raise TypeError("Expected argument 'identifier' to be a str")
        pulumi.set(__self__, "identifier", identifier)
        if included_contents and not isinstance(included_contents, list):
            raise TypeError("Expected argument 'included_contents' to be a list")
        pulumi.set(__self__, "included_contents", included_contents)
        if last_job_completed_at and not isinstance(last_job_completed_at, str):
            raise TypeError("Expected argument 'last_job_completed_at' to be a str")
        pulumi.set(__self__, "last_job_completed_at", last_job_completed_at)
        if lifecycle_state and not isinstance(lifecycle_state, str):
            raise TypeError("Expected argument 'lifecycle_state' to be a str")
        pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if match_resource_type and not isinstance(match_resource_type, str):
            raise TypeError("Expected argument 'match_resource_type' to be a str")
        pulumi.set(__self__, "match_resource_type", match_resource_type)
        if match_resource_types and not isinstance(match_resource_types, list):
            raise TypeError("Expected argument 'match_resource_types' to be a list")
        pulumi.set(__self__, "match_resource_types", match_resource_types)
        if match_user_tags and not isinstance(match_user_tags, list):
            raise TypeError("Expected argument 'match_user_tags' to be a list")
        pulumi.set(__self__, "match_user_tags", match_user_tags)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if plans and not isinstance(plans, list):
            raise TypeError("Expected argument 'plans' to be a list")
        pulumi.set(__self__, "plans", plans)
        if resource_groups and not isinstance(resource_groups, list):
            raise TypeError("Expected argument 'resource_groups' to be a list")
        pulumi.set(__self__, "resource_groups", resource_groups)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if scopes and not isinstance(scopes, list):
            raise TypeError("Expected argument 'scopes' to be a list")
        pulumi.set(__self__, "scopes", scopes)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="healthReasons")
    def health_reasons(self) -> Sequence['outputs.GetIsBackupPolicyHealthReasonResult']:
        return pulumi.get(self, "health_reasons")

    @_builtins.property
    @pulumi.getter(name="healthState")
    def health_state(self) -> _builtins.str:
        return pulumi.get(self, "health_state")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def identifier(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "identifier")

    @_builtins.property
    @pulumi.getter(name="includedContents")
    def included_contents(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "included_contents")

    @_builtins.property
    @pulumi.getter(name="lastJobCompletedAt")
    def last_job_completed_at(self) -> _builtins.str:
        return pulumi.get(self, "last_job_completed_at")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> _builtins.str:
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter(name="matchResourceType")
    def match_resource_type(self) -> _builtins.str:
        return pulumi.get(self, "match_resource_type")

    @_builtins.property
    @pulumi.getter(name="matchResourceTypes")
    def match_resource_types(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "match_resource_types")

    @_builtins.property
    @pulumi.getter(name="matchUserTags")
    def match_user_tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "match_user_tags")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def plans(self) -> Sequence['outputs.GetIsBackupPolicyPlanResult']:
        return pulumi.get(self, "plans")

    @_builtins.property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Sequence['outputs.GetIsBackupPolicyResourceGroupResult']:
        return pulumi.get(self, "resource_groups")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def scopes(self) -> Sequence['outputs.GetIsBackupPolicyScopeResult']:
        return pulumi.get(self, "scopes")


class AwaitableGetIsBackupPolicyResult(GetIsBackupPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsBackupPolicyResult(
            created_at=self.created_at,
            crn=self.crn,
            health_reasons=self.health_reasons,
            health_state=self.health_state,
            href=self.href,
            id=self.id,
            identifier=self.identifier,
            included_contents=self.included_contents,
            last_job_completed_at=self.last_job_completed_at,
            lifecycle_state=self.lifecycle_state,
            match_resource_type=self.match_resource_type,
            match_resource_types=self.match_resource_types,
            match_user_tags=self.match_user_tags,
            name=self.name,
            plans=self.plans,
            resource_groups=self.resource_groups,
            resource_type=self.resource_type,
            scopes=self.scopes)


def get_is_backup_policy(id: Optional[_builtins.str] = None,
                         identifier: Optional[_builtins.str] = None,
                         name: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsBackupPolicyResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['identifier'] = identifier
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsBackupPolicy:getIsBackupPolicy', __args__, opts=opts, typ=GetIsBackupPolicyResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsBackupPolicyResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        crn=pulumi.get(__ret__, 'crn'),
        health_reasons=pulumi.get(__ret__, 'health_reasons'),
        health_state=pulumi.get(__ret__, 'health_state'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        identifier=pulumi.get(__ret__, 'identifier'),
        included_contents=pulumi.get(__ret__, 'included_contents'),
        last_job_completed_at=pulumi.get(__ret__, 'last_job_completed_at'),
        lifecycle_state=pulumi.get(__ret__, 'lifecycle_state'),
        match_resource_type=pulumi.get(__ret__, 'match_resource_type'),
        match_resource_types=pulumi.get(__ret__, 'match_resource_types'),
        match_user_tags=pulumi.get(__ret__, 'match_user_tags'),
        name=pulumi.get(__ret__, 'name'),
        plans=pulumi.get(__ret__, 'plans'),
        resource_groups=pulumi.get(__ret__, 'resource_groups'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        scopes=pulumi.get(__ret__, 'scopes'))
def get_is_backup_policy_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                identifier: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsBackupPolicyResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['identifier'] = identifier
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsBackupPolicy:getIsBackupPolicy', __args__, opts=opts, typ=GetIsBackupPolicyResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsBackupPolicyResult(
        created_at=pulumi.get(__response__, 'created_at'),
        crn=pulumi.get(__response__, 'crn'),
        health_reasons=pulumi.get(__response__, 'health_reasons'),
        health_state=pulumi.get(__response__, 'health_state'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        identifier=pulumi.get(__response__, 'identifier'),
        included_contents=pulumi.get(__response__, 'included_contents'),
        last_job_completed_at=pulumi.get(__response__, 'last_job_completed_at'),
        lifecycle_state=pulumi.get(__response__, 'lifecycle_state'),
        match_resource_type=pulumi.get(__response__, 'match_resource_type'),
        match_resource_types=pulumi.get(__response__, 'match_resource_types'),
        match_user_tags=pulumi.get(__response__, 'match_user_tags'),
        name=pulumi.get(__response__, 'name'),
        plans=pulumi.get(__response__, 'plans'),
        resource_groups=pulumi.get(__response__, 'resource_groups'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        scopes=pulumi.get(__response__, 'scopes')))
