# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['KmsKeyPoliciesArgs', 'KmsKeyPolicies']

@pulumi.input_type
class KmsKeyPoliciesArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 alias: Optional[pulumi.Input[_builtins.str]] = None,
                 dual_auth_deletes: Optional[pulumi.Input[Sequence[pulumi.Input['KmsKeyPoliciesDualAuthDeleteArgs']]]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 kms_key_policies_id: Optional[pulumi.Input[_builtins.str]] = None,
                 rotations: Optional[pulumi.Input[Sequence[pulumi.Input['KmsKeyPoliciesRotationArgs']]]] = None,
                 timeouts: Optional[pulumi.Input['KmsKeyPoliciesTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a KmsKeyPolicies resource.
        :param pulumi.Input[_builtins.str] instance_id: Key protect or hpcs instance GUID
        :param pulumi.Input[Sequence[pulumi.Input['KmsKeyPoliciesDualAuthDeleteArgs']]] dual_auth_deletes: Data associated with the dual authorization delete policy.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private
        :param pulumi.Input[_builtins.str] key_id: Key ID
        :param pulumi.Input[Sequence[pulumi.Input['KmsKeyPoliciesRotationArgs']]] rotations: Specifies the key rotation time interval in months, with a minimum of 1, and a maximum of 12
        """
        pulumi.set(__self__, "instance_id", instance_id)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if dual_auth_deletes is not None:
            pulumi.set(__self__, "dual_auth_deletes", dual_auth_deletes)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if kms_key_policies_id is not None:
            pulumi.set(__self__, "kms_key_policies_id", kms_key_policies_id)
        if rotations is not None:
            pulumi.set(__self__, "rotations", rotations)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Key protect or hpcs instance GUID
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alias", value)

    @_builtins.property
    @pulumi.getter(name="dualAuthDeletes")
    def dual_auth_deletes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KmsKeyPoliciesDualAuthDeleteArgs']]]]:
        """
        Data associated with the dual authorization delete policy.
        """
        return pulumi.get(self, "dual_auth_deletes")

    @dual_auth_deletes.setter
    def dual_auth_deletes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KmsKeyPoliciesDualAuthDeleteArgs']]]]):
        pulumi.set(self, "dual_auth_deletes", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        public or private
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Key ID
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_id", value)

    @_builtins.property
    @pulumi.getter(name="kmsKeyPoliciesId")
    def kms_key_policies_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "kms_key_policies_id")

    @kms_key_policies_id.setter
    def kms_key_policies_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kms_key_policies_id", value)

    @_builtins.property
    @pulumi.getter
    def rotations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KmsKeyPoliciesRotationArgs']]]]:
        """
        Specifies the key rotation time interval in months, with a minimum of 1, and a maximum of 12
        """
        return pulumi.get(self, "rotations")

    @rotations.setter
    def rotations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KmsKeyPoliciesRotationArgs']]]]):
        pulumi.set(self, "rotations", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['KmsKeyPoliciesTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['KmsKeyPoliciesTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _KmsKeyPoliciesState:
    def __init__(__self__, *,
                 alias: Optional[pulumi.Input[_builtins.str]] = None,
                 dual_auth_deletes: Optional[pulumi.Input[Sequence[pulumi.Input['KmsKeyPoliciesDualAuthDeleteArgs']]]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 kms_key_policies_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_controller_url: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_status: Optional[pulumi.Input[_builtins.str]] = None,
                 rotations: Optional[pulumi.Input[Sequence[pulumi.Input['KmsKeyPoliciesRotationArgs']]]] = None,
                 timeouts: Optional[pulumi.Input['KmsKeyPoliciesTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering KmsKeyPolicies resources.
        :param pulumi.Input[Sequence[pulumi.Input['KmsKeyPoliciesDualAuthDeleteArgs']]] dual_auth_deletes: Data associated with the dual authorization delete policy.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private
        :param pulumi.Input[_builtins.str] instance_id: Key protect or hpcs instance GUID
        :param pulumi.Input[_builtins.str] key_id: Key ID
        :param pulumi.Input[_builtins.str] resource_controller_url: The URL of the IBM Cloud dashboard that can be used to explore and view details about the resource
        :param pulumi.Input[_builtins.str] resource_crn: The crn of the resource
        :param pulumi.Input[_builtins.str] resource_name: The name of the resource
        :param pulumi.Input[_builtins.str] resource_status: The status of the resource
        :param pulumi.Input[Sequence[pulumi.Input['KmsKeyPoliciesRotationArgs']]] rotations: Specifies the key rotation time interval in months, with a minimum of 1, and a maximum of 12
        """
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if dual_auth_deletes is not None:
            pulumi.set(__self__, "dual_auth_deletes", dual_auth_deletes)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if kms_key_policies_id is not None:
            pulumi.set(__self__, "kms_key_policies_id", kms_key_policies_id)
        if resource_controller_url is not None:
            pulumi.set(__self__, "resource_controller_url", resource_controller_url)
        if resource_crn is not None:
            pulumi.set(__self__, "resource_crn", resource_crn)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_status is not None:
            pulumi.set(__self__, "resource_status", resource_status)
        if rotations is not None:
            pulumi.set(__self__, "rotations", rotations)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alias", value)

    @_builtins.property
    @pulumi.getter(name="dualAuthDeletes")
    def dual_auth_deletes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KmsKeyPoliciesDualAuthDeleteArgs']]]]:
        """
        Data associated with the dual authorization delete policy.
        """
        return pulumi.get(self, "dual_auth_deletes")

    @dual_auth_deletes.setter
    def dual_auth_deletes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KmsKeyPoliciesDualAuthDeleteArgs']]]]):
        pulumi.set(self, "dual_auth_deletes", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        public or private
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Key protect or hpcs instance GUID
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Key ID
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_id", value)

    @_builtins.property
    @pulumi.getter(name="kmsKeyPoliciesId")
    def kms_key_policies_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "kms_key_policies_id")

    @kms_key_policies_id.setter
    def kms_key_policies_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kms_key_policies_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL of the IBM Cloud dashboard that can be used to explore and view details about the resource
        """
        return pulumi.get(self, "resource_controller_url")

    @resource_controller_url.setter
    def resource_controller_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_controller_url", value)

    @_builtins.property
    @pulumi.getter(name="resourceCrn")
    def resource_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The crn of the resource
        """
        return pulumi.get(self, "resource_crn")

    @resource_crn.setter
    def resource_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_crn", value)

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_name", value)

    @_builtins.property
    @pulumi.getter(name="resourceStatus")
    def resource_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the resource
        """
        return pulumi.get(self, "resource_status")

    @resource_status.setter
    def resource_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_status", value)

    @_builtins.property
    @pulumi.getter
    def rotations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KmsKeyPoliciesRotationArgs']]]]:
        """
        Specifies the key rotation time interval in months, with a minimum of 1, and a maximum of 12
        """
        return pulumi.get(self, "rotations")

    @rotations.setter
    def rotations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KmsKeyPoliciesRotationArgs']]]]):
        pulumi.set(self, "rotations", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['KmsKeyPoliciesTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['KmsKeyPoliciesTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/kmsKeyPolicies:KmsKeyPolicies")
class KmsKeyPolicies(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alias: Optional[pulumi.Input[_builtins.str]] = None,
                 dual_auth_deletes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['KmsKeyPoliciesDualAuthDeleteArgs', 'KmsKeyPoliciesDualAuthDeleteArgsDict']]]]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 kms_key_policies_id: Optional[pulumi.Input[_builtins.str]] = None,
                 rotations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['KmsKeyPoliciesRotationArgs', 'KmsKeyPoliciesRotationArgsDict']]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['KmsKeyPoliciesTimeoutsArgs', 'KmsKeyPoliciesTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a KmsKeyPolicies resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['KmsKeyPoliciesDualAuthDeleteArgs', 'KmsKeyPoliciesDualAuthDeleteArgsDict']]]] dual_auth_deletes: Data associated with the dual authorization delete policy.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private
        :param pulumi.Input[_builtins.str] instance_id: Key protect or hpcs instance GUID
        :param pulumi.Input[_builtins.str] key_id: Key ID
        :param pulumi.Input[Sequence[pulumi.Input[Union['KmsKeyPoliciesRotationArgs', 'KmsKeyPoliciesRotationArgsDict']]]] rotations: Specifies the key rotation time interval in months, with a minimum of 1, and a maximum of 12
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: KmsKeyPoliciesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a KmsKeyPolicies resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param KmsKeyPoliciesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KmsKeyPoliciesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alias: Optional[pulumi.Input[_builtins.str]] = None,
                 dual_auth_deletes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['KmsKeyPoliciesDualAuthDeleteArgs', 'KmsKeyPoliciesDualAuthDeleteArgsDict']]]]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 kms_key_policies_id: Optional[pulumi.Input[_builtins.str]] = None,
                 rotations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['KmsKeyPoliciesRotationArgs', 'KmsKeyPoliciesRotationArgsDict']]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['KmsKeyPoliciesTimeoutsArgs', 'KmsKeyPoliciesTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KmsKeyPoliciesArgs.__new__(KmsKeyPoliciesArgs)

            __props__.__dict__["alias"] = alias
            __props__.__dict__["dual_auth_deletes"] = dual_auth_deletes
            __props__.__dict__["endpoint_type"] = endpoint_type
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["key_id"] = key_id
            __props__.__dict__["kms_key_policies_id"] = kms_key_policies_id
            __props__.__dict__["rotations"] = rotations
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["resource_controller_url"] = None
            __props__.__dict__["resource_crn"] = None
            __props__.__dict__["resource_name"] = None
            __props__.__dict__["resource_status"] = None
        super(KmsKeyPolicies, __self__).__init__(
            'ibm:index/kmsKeyPolicies:KmsKeyPolicies',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alias: Optional[pulumi.Input[_builtins.str]] = None,
            dual_auth_deletes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['KmsKeyPoliciesDualAuthDeleteArgs', 'KmsKeyPoliciesDualAuthDeleteArgsDict']]]]] = None,
            endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            key_id: Optional[pulumi.Input[_builtins.str]] = None,
            kms_key_policies_id: Optional[pulumi.Input[_builtins.str]] = None,
            resource_controller_url: Optional[pulumi.Input[_builtins.str]] = None,
            resource_crn: Optional[pulumi.Input[_builtins.str]] = None,
            resource_name_: Optional[pulumi.Input[_builtins.str]] = None,
            resource_status: Optional[pulumi.Input[_builtins.str]] = None,
            rotations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['KmsKeyPoliciesRotationArgs', 'KmsKeyPoliciesRotationArgsDict']]]]] = None,
            timeouts: Optional[pulumi.Input[Union['KmsKeyPoliciesTimeoutsArgs', 'KmsKeyPoliciesTimeoutsArgsDict']]] = None) -> 'KmsKeyPolicies':
        """
        Get an existing KmsKeyPolicies resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['KmsKeyPoliciesDualAuthDeleteArgs', 'KmsKeyPoliciesDualAuthDeleteArgsDict']]]] dual_auth_deletes: Data associated with the dual authorization delete policy.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private
        :param pulumi.Input[_builtins.str] instance_id: Key protect or hpcs instance GUID
        :param pulumi.Input[_builtins.str] key_id: Key ID
        :param pulumi.Input[_builtins.str] resource_controller_url: The URL of the IBM Cloud dashboard that can be used to explore and view details about the resource
        :param pulumi.Input[_builtins.str] resource_crn: The crn of the resource
        :param pulumi.Input[_builtins.str] resource_name_: The name of the resource
        :param pulumi.Input[_builtins.str] resource_status: The status of the resource
        :param pulumi.Input[Sequence[pulumi.Input[Union['KmsKeyPoliciesRotationArgs', 'KmsKeyPoliciesRotationArgsDict']]]] rotations: Specifies the key rotation time interval in months, with a minimum of 1, and a maximum of 12
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _KmsKeyPoliciesState.__new__(_KmsKeyPoliciesState)

        __props__.__dict__["alias"] = alias
        __props__.__dict__["dual_auth_deletes"] = dual_auth_deletes
        __props__.__dict__["endpoint_type"] = endpoint_type
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["key_id"] = key_id
        __props__.__dict__["kms_key_policies_id"] = kms_key_policies_id
        __props__.__dict__["resource_controller_url"] = resource_controller_url
        __props__.__dict__["resource_crn"] = resource_crn
        __props__.__dict__["resource_name"] = resource_name_
        __props__.__dict__["resource_status"] = resource_status
        __props__.__dict__["rotations"] = rotations
        __props__.__dict__["timeouts"] = timeouts
        return KmsKeyPolicies(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def alias(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "alias")

    @_builtins.property
    @pulumi.getter(name="dualAuthDeletes")
    def dual_auth_deletes(self) -> pulumi.Output[Optional[Sequence['outputs.KmsKeyPoliciesDualAuthDelete']]]:
        """
        Data associated with the dual authorization delete policy.
        """
        return pulumi.get(self, "dual_auth_deletes")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        public or private
        """
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Key protect or hpcs instance GUID
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Key ID
        """
        return pulumi.get(self, "key_id")

    @_builtins.property
    @pulumi.getter(name="kmsKeyPoliciesId")
    def kms_key_policies_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "kms_key_policies_id")

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> pulumi.Output[_builtins.str]:
        """
        The URL of the IBM Cloud dashboard that can be used to explore and view details about the resource
        """
        return pulumi.get(self, "resource_controller_url")

    @_builtins.property
    @pulumi.getter(name="resourceCrn")
    def resource_crn(self) -> pulumi.Output[_builtins.str]:
        """
        The crn of the resource
        """
        return pulumi.get(self, "resource_crn")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceStatus")
    def resource_status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the resource
        """
        return pulumi.get(self, "resource_status")

    @_builtins.property
    @pulumi.getter
    def rotations(self) -> pulumi.Output[Optional[Sequence['outputs.KmsKeyPoliciesRotation']]]:
        """
        Specifies the key rotation time interval in months, with a minimum of 1, and a maximum of 12
        """
        return pulumi.get(self, "rotations")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.KmsKeyPoliciesTimeouts']]:
        return pulumi.get(self, "timeouts")

