# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetIsBareMetalServerNetworkInterfaceFloatingIpResult',
    'AwaitableGetIsBareMetalServerNetworkInterfaceFloatingIpResult',
    'get_is_bare_metal_server_network_interface_floating_ip',
    'get_is_bare_metal_server_network_interface_floating_ip_output',
]

@pulumi.output_type
class GetIsBareMetalServerNetworkInterfaceFloatingIpResult:
    """
    A collection of values returned by getIsBareMetalServerNetworkInterfaceFloatingIp.
    """
    def __init__(__self__, address=None, bare_metal_server=None, crn=None, floating_ip=None, id=None, name=None, network_interface=None, status=None, target=None, zone=None):
        if address and not isinstance(address, str):
            raise TypeError("Expected argument 'address' to be a str")
        pulumi.set(__self__, "address", address)
        if bare_metal_server and not isinstance(bare_metal_server, str):
            raise TypeError("Expected argument 'bare_metal_server' to be a str")
        pulumi.set(__self__, "bare_metal_server", bare_metal_server)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if floating_ip and not isinstance(floating_ip, str):
            raise TypeError("Expected argument 'floating_ip' to be a str")
        pulumi.set(__self__, "floating_ip", floating_ip)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_interface and not isinstance(network_interface, str):
            raise TypeError("Expected argument 'network_interface' to be a str")
        pulumi.set(__self__, "network_interface", network_interface)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if target and not isinstance(target, str):
            raise TypeError("Expected argument 'target' to be a str")
        pulumi.set(__self__, "target", target)
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="bareMetalServer")
    def bare_metal_server(self) -> _builtins.str:
        return pulumi.get(self, "bare_metal_server")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="floatingIp")
    def floating_ip(self) -> _builtins.str:
        return pulumi.get(self, "floating_ip")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkInterface")
    def network_interface(self) -> _builtins.str:
        return pulumi.get(self, "network_interface")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def target(self) -> _builtins.str:
        return pulumi.get(self, "target")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> _builtins.str:
        return pulumi.get(self, "zone")


class AwaitableGetIsBareMetalServerNetworkInterfaceFloatingIpResult(GetIsBareMetalServerNetworkInterfaceFloatingIpResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsBareMetalServerNetworkInterfaceFloatingIpResult(
            address=self.address,
            bare_metal_server=self.bare_metal_server,
            crn=self.crn,
            floating_ip=self.floating_ip,
            id=self.id,
            name=self.name,
            network_interface=self.network_interface,
            status=self.status,
            target=self.target,
            zone=self.zone)


def get_is_bare_metal_server_network_interface_floating_ip(bare_metal_server: Optional[_builtins.str] = None,
                                                           floating_ip: Optional[_builtins.str] = None,
                                                           id: Optional[_builtins.str] = None,
                                                           network_interface: Optional[_builtins.str] = None,
                                                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsBareMetalServerNetworkInterfaceFloatingIpResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['bareMetalServer'] = bare_metal_server
    __args__['floatingIp'] = floating_ip
    __args__['id'] = id
    __args__['networkInterface'] = network_interface
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsBareMetalServerNetworkInterfaceFloatingIp:getIsBareMetalServerNetworkInterfaceFloatingIp', __args__, opts=opts, typ=GetIsBareMetalServerNetworkInterfaceFloatingIpResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsBareMetalServerNetworkInterfaceFloatingIpResult(
        address=pulumi.get(__ret__, 'address'),
        bare_metal_server=pulumi.get(__ret__, 'bare_metal_server'),
        crn=pulumi.get(__ret__, 'crn'),
        floating_ip=pulumi.get(__ret__, 'floating_ip'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        network_interface=pulumi.get(__ret__, 'network_interface'),
        status=pulumi.get(__ret__, 'status'),
        target=pulumi.get(__ret__, 'target'),
        zone=pulumi.get(__ret__, 'zone'))
def get_is_bare_metal_server_network_interface_floating_ip_output(bare_metal_server: Optional[pulumi.Input[_builtins.str]] = None,
                                                                  floating_ip: Optional[pulumi.Input[_builtins.str]] = None,
                                                                  id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                                  network_interface: Optional[pulumi.Input[_builtins.str]] = None,
                                                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsBareMetalServerNetworkInterfaceFloatingIpResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['bareMetalServer'] = bare_metal_server
    __args__['floatingIp'] = floating_ip
    __args__['id'] = id
    __args__['networkInterface'] = network_interface
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsBareMetalServerNetworkInterfaceFloatingIp:getIsBareMetalServerNetworkInterfaceFloatingIp', __args__, opts=opts, typ=GetIsBareMetalServerNetworkInterfaceFloatingIpResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsBareMetalServerNetworkInterfaceFloatingIpResult(
        address=pulumi.get(__response__, 'address'),
        bare_metal_server=pulumi.get(__response__, 'bare_metal_server'),
        crn=pulumi.get(__response__, 'crn'),
        floating_ip=pulumi.get(__response__, 'floating_ip'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        network_interface=pulumi.get(__response__, 'network_interface'),
        status=pulumi.get(__response__, 'status'),
        target=pulumi.get(__response__, 'target'),
        zone=pulumi.get(__response__, 'zone')))
