# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCmVersionResult',
    'AwaitableGetCmVersionResult',
    'get_cm_version',
    'get_cm_version_output',
]

@pulumi.output_type
class GetCmVersionResult:
    """
    A collection of values returned by getCmVersion.
    """
    def __init__(__self__, catalog_id=None, configurations=None, created=None, crn=None, deprecate_pendings=None, deprecated=None, entitlements=None, flavors=None, iam_permissions=None, id=None, image_manifest_url=None, image_pull_key_name=None, installs=None, is_consumable=None, kind_id=None, licenses=None, long_description=None, long_description_i18n=None, metadatas=None, offering_id=None, outputs=None, package_version=None, pre_installs=None, repo_url=None, required_resources=None, rev=None, sha=None, single_instance=None, solution_infos=None, source_url=None, states=None, tags=None, tgz_url=None, updated=None, validations=None, version=None, version_id=None, version_loc_id=None, version_locator=None, whitelisted_accounts=None):
        if catalog_id and not isinstance(catalog_id, str):
            raise TypeError("Expected argument 'catalog_id' to be a str")
        pulumi.set(__self__, "catalog_id", catalog_id)
        if configurations and not isinstance(configurations, list):
            raise TypeError("Expected argument 'configurations' to be a list")
        pulumi.set(__self__, "configurations", configurations)
        if created and not isinstance(created, str):
            raise TypeError("Expected argument 'created' to be a str")
        pulumi.set(__self__, "created", created)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if deprecate_pendings and not isinstance(deprecate_pendings, list):
            raise TypeError("Expected argument 'deprecate_pendings' to be a list")
        pulumi.set(__self__, "deprecate_pendings", deprecate_pendings)
        if deprecated and not isinstance(deprecated, bool):
            raise TypeError("Expected argument 'deprecated' to be a bool")
        pulumi.set(__self__, "deprecated", deprecated)
        if entitlements and not isinstance(entitlements, list):
            raise TypeError("Expected argument 'entitlements' to be a list")
        pulumi.set(__self__, "entitlements", entitlements)
        if flavors and not isinstance(flavors, list):
            raise TypeError("Expected argument 'flavors' to be a list")
        pulumi.set(__self__, "flavors", flavors)
        if iam_permissions and not isinstance(iam_permissions, list):
            raise TypeError("Expected argument 'iam_permissions' to be a list")
        pulumi.set(__self__, "iam_permissions", iam_permissions)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image_manifest_url and not isinstance(image_manifest_url, str):
            raise TypeError("Expected argument 'image_manifest_url' to be a str")
        pulumi.set(__self__, "image_manifest_url", image_manifest_url)
        if image_pull_key_name and not isinstance(image_pull_key_name, str):
            raise TypeError("Expected argument 'image_pull_key_name' to be a str")
        pulumi.set(__self__, "image_pull_key_name", image_pull_key_name)
        if installs and not isinstance(installs, list):
            raise TypeError("Expected argument 'installs' to be a list")
        pulumi.set(__self__, "installs", installs)
        if is_consumable and not isinstance(is_consumable, bool):
            raise TypeError("Expected argument 'is_consumable' to be a bool")
        pulumi.set(__self__, "is_consumable", is_consumable)
        if kind_id and not isinstance(kind_id, str):
            raise TypeError("Expected argument 'kind_id' to be a str")
        pulumi.set(__self__, "kind_id", kind_id)
        if licenses and not isinstance(licenses, list):
            raise TypeError("Expected argument 'licenses' to be a list")
        pulumi.set(__self__, "licenses", licenses)
        if long_description and not isinstance(long_description, str):
            raise TypeError("Expected argument 'long_description' to be a str")
        pulumi.set(__self__, "long_description", long_description)
        if long_description_i18n and not isinstance(long_description_i18n, dict):
            raise TypeError("Expected argument 'long_description_i18n' to be a dict")
        pulumi.set(__self__, "long_description_i18n", long_description_i18n)
        if metadatas and not isinstance(metadatas, list):
            raise TypeError("Expected argument 'metadatas' to be a list")
        pulumi.set(__self__, "metadatas", metadatas)
        if offering_id and not isinstance(offering_id, str):
            raise TypeError("Expected argument 'offering_id' to be a str")
        pulumi.set(__self__, "offering_id", offering_id)
        if outputs and not isinstance(outputs, list):
            raise TypeError("Expected argument 'outputs' to be a list")
        pulumi.set(__self__, "outputs", outputs)
        if package_version and not isinstance(package_version, str):
            raise TypeError("Expected argument 'package_version' to be a str")
        pulumi.set(__self__, "package_version", package_version)
        if pre_installs and not isinstance(pre_installs, list):
            raise TypeError("Expected argument 'pre_installs' to be a list")
        pulumi.set(__self__, "pre_installs", pre_installs)
        if repo_url and not isinstance(repo_url, str):
            raise TypeError("Expected argument 'repo_url' to be a str")
        pulumi.set(__self__, "repo_url", repo_url)
        if required_resources and not isinstance(required_resources, list):
            raise TypeError("Expected argument 'required_resources' to be a list")
        pulumi.set(__self__, "required_resources", required_resources)
        if rev and not isinstance(rev, str):
            raise TypeError("Expected argument 'rev' to be a str")
        pulumi.set(__self__, "rev", rev)
        if sha and not isinstance(sha, str):
            raise TypeError("Expected argument 'sha' to be a str")
        pulumi.set(__self__, "sha", sha)
        if single_instance and not isinstance(single_instance, bool):
            raise TypeError("Expected argument 'single_instance' to be a bool")
        pulumi.set(__self__, "single_instance", single_instance)
        if solution_infos and not isinstance(solution_infos, list):
            raise TypeError("Expected argument 'solution_infos' to be a list")
        pulumi.set(__self__, "solution_infos", solution_infos)
        if source_url and not isinstance(source_url, str):
            raise TypeError("Expected argument 'source_url' to be a str")
        pulumi.set(__self__, "source_url", source_url)
        if states and not isinstance(states, list):
            raise TypeError("Expected argument 'states' to be a list")
        pulumi.set(__self__, "states", states)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if tgz_url and not isinstance(tgz_url, str):
            raise TypeError("Expected argument 'tgz_url' to be a str")
        pulumi.set(__self__, "tgz_url", tgz_url)
        if updated and not isinstance(updated, str):
            raise TypeError("Expected argument 'updated' to be a str")
        pulumi.set(__self__, "updated", updated)
        if validations and not isinstance(validations, list):
            raise TypeError("Expected argument 'validations' to be a list")
        pulumi.set(__self__, "validations", validations)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)
        if version_id and not isinstance(version_id, str):
            raise TypeError("Expected argument 'version_id' to be a str")
        pulumi.set(__self__, "version_id", version_id)
        if version_loc_id and not isinstance(version_loc_id, str):
            raise TypeError("Expected argument 'version_loc_id' to be a str")
        pulumi.set(__self__, "version_loc_id", version_loc_id)
        if version_locator and not isinstance(version_locator, str):
            raise TypeError("Expected argument 'version_locator' to be a str")
        pulumi.set(__self__, "version_locator", version_locator)
        if whitelisted_accounts and not isinstance(whitelisted_accounts, list):
            raise TypeError("Expected argument 'whitelisted_accounts' to be a list")
        pulumi.set(__self__, "whitelisted_accounts", whitelisted_accounts)

    @_builtins.property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> _builtins.str:
        return pulumi.get(self, "catalog_id")

    @_builtins.property
    @pulumi.getter
    def configurations(self) -> Sequence['outputs.GetCmVersionConfigurationResult']:
        return pulumi.get(self, "configurations")

    @_builtins.property
    @pulumi.getter
    def created(self) -> _builtins.str:
        return pulumi.get(self, "created")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="deprecatePendings")
    def deprecate_pendings(self) -> Sequence['outputs.GetCmVersionDeprecatePendingResult']:
        return pulumi.get(self, "deprecate_pendings")

    @_builtins.property
    @pulumi.getter
    def deprecated(self) -> _builtins.bool:
        return pulumi.get(self, "deprecated")

    @_builtins.property
    @pulumi.getter
    def entitlements(self) -> Sequence['outputs.GetCmVersionEntitlementResult']:
        return pulumi.get(self, "entitlements")

    @_builtins.property
    @pulumi.getter
    def flavors(self) -> Sequence['outputs.GetCmVersionFlavorResult']:
        return pulumi.get(self, "flavors")

    @_builtins.property
    @pulumi.getter(name="iamPermissions")
    def iam_permissions(self) -> Sequence['outputs.GetCmVersionIamPermissionResult']:
        return pulumi.get(self, "iam_permissions")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="imageManifestUrl")
    def image_manifest_url(self) -> _builtins.str:
        return pulumi.get(self, "image_manifest_url")

    @_builtins.property
    @pulumi.getter(name="imagePullKeyName")
    def image_pull_key_name(self) -> _builtins.str:
        return pulumi.get(self, "image_pull_key_name")

    @_builtins.property
    @pulumi.getter
    def installs(self) -> Sequence['outputs.GetCmVersionInstallResult']:
        return pulumi.get(self, "installs")

    @_builtins.property
    @pulumi.getter(name="isConsumable")
    def is_consumable(self) -> _builtins.bool:
        return pulumi.get(self, "is_consumable")

    @_builtins.property
    @pulumi.getter(name="kindId")
    def kind_id(self) -> _builtins.str:
        return pulumi.get(self, "kind_id")

    @_builtins.property
    @pulumi.getter
    def licenses(self) -> Sequence['outputs.GetCmVersionLicenseResult']:
        return pulumi.get(self, "licenses")

    @_builtins.property
    @pulumi.getter(name="longDescription")
    def long_description(self) -> _builtins.str:
        return pulumi.get(self, "long_description")

    @_builtins.property
    @pulumi.getter(name="longDescriptionI18n")
    def long_description_i18n(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "long_description_i18n")

    @_builtins.property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetCmVersionMetadataResult']:
        return pulumi.get(self, "metadatas")

    @_builtins.property
    @pulumi.getter(name="offeringId")
    def offering_id(self) -> _builtins.str:
        return pulumi.get(self, "offering_id")

    @_builtins.property
    @pulumi.getter
    def outputs(self) -> Sequence['outputs.GetCmVersionOutputResult']:
        return pulumi.get(self, "outputs")

    @_builtins.property
    @pulumi.getter(name="packageVersion")
    def package_version(self) -> _builtins.str:
        return pulumi.get(self, "package_version")

    @_builtins.property
    @pulumi.getter(name="preInstalls")
    def pre_installs(self) -> Sequence['outputs.GetCmVersionPreInstallResult']:
        return pulumi.get(self, "pre_installs")

    @_builtins.property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> _builtins.str:
        return pulumi.get(self, "repo_url")

    @_builtins.property
    @pulumi.getter(name="requiredResources")
    def required_resources(self) -> Sequence['outputs.GetCmVersionRequiredResourceResult']:
        return pulumi.get(self, "required_resources")

    @_builtins.property
    @pulumi.getter
    def rev(self) -> _builtins.str:
        return pulumi.get(self, "rev")

    @_builtins.property
    @pulumi.getter
    def sha(self) -> _builtins.str:
        return pulumi.get(self, "sha")

    @_builtins.property
    @pulumi.getter(name="singleInstance")
    def single_instance(self) -> _builtins.bool:
        return pulumi.get(self, "single_instance")

    @_builtins.property
    @pulumi.getter(name="solutionInfos")
    def solution_infos(self) -> Sequence['outputs.GetCmVersionSolutionInfoResult']:
        return pulumi.get(self, "solution_infos")

    @_builtins.property
    @pulumi.getter(name="sourceUrl")
    def source_url(self) -> _builtins.str:
        return pulumi.get(self, "source_url")

    @_builtins.property
    @pulumi.getter
    def states(self) -> Sequence['outputs.GetCmVersionStateResult']:
        return pulumi.get(self, "states")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="tgzUrl")
    def tgz_url(self) -> _builtins.str:
        return pulumi.get(self, "tgz_url")

    @_builtins.property
    @pulumi.getter
    def updated(self) -> _builtins.str:
        return pulumi.get(self, "updated")

    @_builtins.property
    @pulumi.getter
    def validations(self) -> Sequence['outputs.GetCmVersionValidationResult']:
        return pulumi.get(self, "validations")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="versionId")
    def version_id(self) -> _builtins.str:
        return pulumi.get(self, "version_id")

    @_builtins.property
    @pulumi.getter(name="versionLocId")
    def version_loc_id(self) -> _builtins.str:
        return pulumi.get(self, "version_loc_id")

    @_builtins.property
    @pulumi.getter(name="versionLocator")
    def version_locator(self) -> _builtins.str:
        return pulumi.get(self, "version_locator")

    @_builtins.property
    @pulumi.getter(name="whitelistedAccounts")
    def whitelisted_accounts(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "whitelisted_accounts")


class AwaitableGetCmVersionResult(GetCmVersionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCmVersionResult(
            catalog_id=self.catalog_id,
            configurations=self.configurations,
            created=self.created,
            crn=self.crn,
            deprecate_pendings=self.deprecate_pendings,
            deprecated=self.deprecated,
            entitlements=self.entitlements,
            flavors=self.flavors,
            iam_permissions=self.iam_permissions,
            id=self.id,
            image_manifest_url=self.image_manifest_url,
            image_pull_key_name=self.image_pull_key_name,
            installs=self.installs,
            is_consumable=self.is_consumable,
            kind_id=self.kind_id,
            licenses=self.licenses,
            long_description=self.long_description,
            long_description_i18n=self.long_description_i18n,
            metadatas=self.metadatas,
            offering_id=self.offering_id,
            outputs=self.outputs,
            package_version=self.package_version,
            pre_installs=self.pre_installs,
            repo_url=self.repo_url,
            required_resources=self.required_resources,
            rev=self.rev,
            sha=self.sha,
            single_instance=self.single_instance,
            solution_infos=self.solution_infos,
            source_url=self.source_url,
            states=self.states,
            tags=self.tags,
            tgz_url=self.tgz_url,
            updated=self.updated,
            validations=self.validations,
            version=self.version,
            version_id=self.version_id,
            version_loc_id=self.version_loc_id,
            version_locator=self.version_locator,
            whitelisted_accounts=self.whitelisted_accounts)


def get_cm_version(id: Optional[_builtins.str] = None,
                   version_loc_id: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCmVersionResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['versionLocId'] = version_loc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCmVersion:getCmVersion', __args__, opts=opts, typ=GetCmVersionResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCmVersionResult(
        catalog_id=pulumi.get(__ret__, 'catalog_id'),
        configurations=pulumi.get(__ret__, 'configurations'),
        created=pulumi.get(__ret__, 'created'),
        crn=pulumi.get(__ret__, 'crn'),
        deprecate_pendings=pulumi.get(__ret__, 'deprecate_pendings'),
        deprecated=pulumi.get(__ret__, 'deprecated'),
        entitlements=pulumi.get(__ret__, 'entitlements'),
        flavors=pulumi.get(__ret__, 'flavors'),
        iam_permissions=pulumi.get(__ret__, 'iam_permissions'),
        id=pulumi.get(__ret__, 'id'),
        image_manifest_url=pulumi.get(__ret__, 'image_manifest_url'),
        image_pull_key_name=pulumi.get(__ret__, 'image_pull_key_name'),
        installs=pulumi.get(__ret__, 'installs'),
        is_consumable=pulumi.get(__ret__, 'is_consumable'),
        kind_id=pulumi.get(__ret__, 'kind_id'),
        licenses=pulumi.get(__ret__, 'licenses'),
        long_description=pulumi.get(__ret__, 'long_description'),
        long_description_i18n=pulumi.get(__ret__, 'long_description_i18n'),
        metadatas=pulumi.get(__ret__, 'metadatas'),
        offering_id=pulumi.get(__ret__, 'offering_id'),
        outputs=pulumi.get(__ret__, 'outputs'),
        package_version=pulumi.get(__ret__, 'package_version'),
        pre_installs=pulumi.get(__ret__, 'pre_installs'),
        repo_url=pulumi.get(__ret__, 'repo_url'),
        required_resources=pulumi.get(__ret__, 'required_resources'),
        rev=pulumi.get(__ret__, 'rev'),
        sha=pulumi.get(__ret__, 'sha'),
        single_instance=pulumi.get(__ret__, 'single_instance'),
        solution_infos=pulumi.get(__ret__, 'solution_infos'),
        source_url=pulumi.get(__ret__, 'source_url'),
        states=pulumi.get(__ret__, 'states'),
        tags=pulumi.get(__ret__, 'tags'),
        tgz_url=pulumi.get(__ret__, 'tgz_url'),
        updated=pulumi.get(__ret__, 'updated'),
        validations=pulumi.get(__ret__, 'validations'),
        version=pulumi.get(__ret__, 'version'),
        version_id=pulumi.get(__ret__, 'version_id'),
        version_loc_id=pulumi.get(__ret__, 'version_loc_id'),
        version_locator=pulumi.get(__ret__, 'version_locator'),
        whitelisted_accounts=pulumi.get(__ret__, 'whitelisted_accounts'))
def get_cm_version_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          version_loc_id: Optional[pulumi.Input[_builtins.str]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCmVersionResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['versionLocId'] = version_loc_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCmVersion:getCmVersion', __args__, opts=opts, typ=GetCmVersionResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCmVersionResult(
        catalog_id=pulumi.get(__response__, 'catalog_id'),
        configurations=pulumi.get(__response__, 'configurations'),
        created=pulumi.get(__response__, 'created'),
        crn=pulumi.get(__response__, 'crn'),
        deprecate_pendings=pulumi.get(__response__, 'deprecate_pendings'),
        deprecated=pulumi.get(__response__, 'deprecated'),
        entitlements=pulumi.get(__response__, 'entitlements'),
        flavors=pulumi.get(__response__, 'flavors'),
        iam_permissions=pulumi.get(__response__, 'iam_permissions'),
        id=pulumi.get(__response__, 'id'),
        image_manifest_url=pulumi.get(__response__, 'image_manifest_url'),
        image_pull_key_name=pulumi.get(__response__, 'image_pull_key_name'),
        installs=pulumi.get(__response__, 'installs'),
        is_consumable=pulumi.get(__response__, 'is_consumable'),
        kind_id=pulumi.get(__response__, 'kind_id'),
        licenses=pulumi.get(__response__, 'licenses'),
        long_description=pulumi.get(__response__, 'long_description'),
        long_description_i18n=pulumi.get(__response__, 'long_description_i18n'),
        metadatas=pulumi.get(__response__, 'metadatas'),
        offering_id=pulumi.get(__response__, 'offering_id'),
        outputs=pulumi.get(__response__, 'outputs'),
        package_version=pulumi.get(__response__, 'package_version'),
        pre_installs=pulumi.get(__response__, 'pre_installs'),
        repo_url=pulumi.get(__response__, 'repo_url'),
        required_resources=pulumi.get(__response__, 'required_resources'),
        rev=pulumi.get(__response__, 'rev'),
        sha=pulumi.get(__response__, 'sha'),
        single_instance=pulumi.get(__response__, 'single_instance'),
        solution_infos=pulumi.get(__response__, 'solution_infos'),
        source_url=pulumi.get(__response__, 'source_url'),
        states=pulumi.get(__response__, 'states'),
        tags=pulumi.get(__response__, 'tags'),
        tgz_url=pulumi.get(__response__, 'tgz_url'),
        updated=pulumi.get(__response__, 'updated'),
        validations=pulumi.get(__response__, 'validations'),
        version=pulumi.get(__response__, 'version'),
        version_id=pulumi.get(__response__, 'version_id'),
        version_loc_id=pulumi.get(__response__, 'version_loc_id'),
        version_locator=pulumi.get(__response__, 'version_locator'),
        whitelisted_accounts=pulumi.get(__response__, 'whitelisted_accounts')))
