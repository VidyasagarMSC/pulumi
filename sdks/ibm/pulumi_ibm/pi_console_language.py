# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PiConsoleLanguageArgs', 'PiConsoleLanguage']

@pulumi.input_type
class PiConsoleLanguageArgs:
    def __init__(__self__, *,
                 pi_cloud_instance_id: pulumi.Input[_builtins.str],
                 pi_instance_name: pulumi.Input[_builtins.str],
                 pi_language_code: pulumi.Input[_builtins.str],
                 pi_console_language_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['PiConsoleLanguageTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a PiConsoleLanguage resource.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_instance_name: The unique identifier or name of the instance.
        :param pulumi.Input[_builtins.str] pi_language_code: Language code.
        """
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        pulumi.set(__self__, "pi_instance_name", pi_instance_name)
        pulumi.set(__self__, "pi_language_code", pi_language_code)
        if pi_console_language_id is not None:
            pulumi.set(__self__, "pi_console_language_id", pi_console_language_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piInstanceName")
    def pi_instance_name(self) -> pulumi.Input[_builtins.str]:
        """
        The unique identifier or name of the instance.
        """
        return pulumi.get(self, "pi_instance_name")

    @pi_instance_name.setter
    def pi_instance_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_instance_name", value)

    @_builtins.property
    @pulumi.getter(name="piLanguageCode")
    def pi_language_code(self) -> pulumi.Input[_builtins.str]:
        """
        Language code.
        """
        return pulumi.get(self, "pi_language_code")

    @pi_language_code.setter
    def pi_language_code(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_language_code", value)

    @_builtins.property
    @pulumi.getter(name="piConsoleLanguageId")
    def pi_console_language_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_console_language_id")

    @pi_console_language_id.setter
    def pi_console_language_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_console_language_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiConsoleLanguageTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiConsoleLanguageTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _PiConsoleLanguageState:
    def __init__(__self__, *,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_console_language_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_instance_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_language_code: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['PiConsoleLanguageTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering PiConsoleLanguage resources.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_instance_name: The unique identifier or name of the instance.
        :param pulumi.Input[_builtins.str] pi_language_code: Language code.
        """
        if pi_cloud_instance_id is not None:
            pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_console_language_id is not None:
            pulumi.set(__self__, "pi_console_language_id", pi_console_language_id)
        if pi_instance_name is not None:
            pulumi.set(__self__, "pi_instance_name", pi_instance_name)
        if pi_language_code is not None:
            pulumi.set(__self__, "pi_language_code", pi_language_code)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piConsoleLanguageId")
    def pi_console_language_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_console_language_id")

    @pi_console_language_id.setter
    def pi_console_language_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_console_language_id", value)

    @_builtins.property
    @pulumi.getter(name="piInstanceName")
    def pi_instance_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier or name of the instance.
        """
        return pulumi.get(self, "pi_instance_name")

    @pi_instance_name.setter
    def pi_instance_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_instance_name", value)

    @_builtins.property
    @pulumi.getter(name="piLanguageCode")
    def pi_language_code(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Language code.
        """
        return pulumi.get(self, "pi_language_code")

    @pi_language_code.setter
    def pi_language_code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_language_code", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiConsoleLanguageTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiConsoleLanguageTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/piConsoleLanguage:PiConsoleLanguage")
class PiConsoleLanguage(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_console_language_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_instance_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_language_code: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiConsoleLanguageTimeoutsArgs', 'PiConsoleLanguageTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a PiConsoleLanguage resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_instance_name: The unique identifier or name of the instance.
        :param pulumi.Input[_builtins.str] pi_language_code: Language code.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PiConsoleLanguageArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PiConsoleLanguage resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PiConsoleLanguageArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PiConsoleLanguageArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_console_language_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_instance_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_language_code: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiConsoleLanguageTimeoutsArgs', 'PiConsoleLanguageTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PiConsoleLanguageArgs.__new__(PiConsoleLanguageArgs)

            if pi_cloud_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'pi_cloud_instance_id'")
            __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
            __props__.__dict__["pi_console_language_id"] = pi_console_language_id
            if pi_instance_name is None and not opts.urn:
                raise TypeError("Missing required property 'pi_instance_name'")
            __props__.__dict__["pi_instance_name"] = pi_instance_name
            if pi_language_code is None and not opts.urn:
                raise TypeError("Missing required property 'pi_language_code'")
            __props__.__dict__["pi_language_code"] = pi_language_code
            __props__.__dict__["timeouts"] = timeouts
        super(PiConsoleLanguage, __self__).__init__(
            'ibm:index/piConsoleLanguage:PiConsoleLanguage',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_console_language_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_instance_name: Optional[pulumi.Input[_builtins.str]] = None,
            pi_language_code: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['PiConsoleLanguageTimeoutsArgs', 'PiConsoleLanguageTimeoutsArgsDict']]] = None) -> 'PiConsoleLanguage':
        """
        Get an existing PiConsoleLanguage resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_instance_name: The unique identifier or name of the instance.
        :param pulumi.Input[_builtins.str] pi_language_code: Language code.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PiConsoleLanguageState.__new__(_PiConsoleLanguageState)

        __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
        __props__.__dict__["pi_console_language_id"] = pi_console_language_id
        __props__.__dict__["pi_instance_name"] = pi_instance_name
        __props__.__dict__["pi_language_code"] = pi_language_code
        __props__.__dict__["timeouts"] = timeouts
        return PiConsoleLanguage(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piConsoleLanguageId")
    def pi_console_language_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "pi_console_language_id")

    @_builtins.property
    @pulumi.getter(name="piInstanceName")
    def pi_instance_name(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier or name of the instance.
        """
        return pulumi.get(self, "pi_instance_name")

    @_builtins.property
    @pulumi.getter(name="piLanguageCode")
    def pi_language_code(self) -> pulumi.Output[_builtins.str]:
        """
        Language code.
        """
        return pulumi.get(self, "pi_language_code")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.PiConsoleLanguageTimeouts']]:
        return pulumi.get(self, "timeouts")

