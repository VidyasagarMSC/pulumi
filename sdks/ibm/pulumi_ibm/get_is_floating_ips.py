# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsFloatingIpsResult',
    'AwaitableGetIsFloatingIpsResult',
    'get_is_floating_ips',
    'get_is_floating_ips_output',
]

@pulumi.output_type
class GetIsFloatingIpsResult:
    """
    A collection of values returned by getIsFloatingIps.
    """
    def __init__(__self__, floating_ips=None, id=None, name=None, resource_group=None):
        if floating_ips and not isinstance(floating_ips, list):
            raise TypeError("Expected argument 'floating_ips' to be a list")
        pulumi.set(__self__, "floating_ips", floating_ips)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resource_group and not isinstance(resource_group, str):
            raise TypeError("Expected argument 'resource_group' to be a str")
        pulumi.set(__self__, "resource_group", resource_group)

    @_builtins.property
    @pulumi.getter(name="floatingIps")
    def floating_ips(self) -> Sequence['outputs.GetIsFloatingIpsFloatingIpResult']:
        return pulumi.get(self, "floating_ips")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_group")


class AwaitableGetIsFloatingIpsResult(GetIsFloatingIpsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsFloatingIpsResult(
            floating_ips=self.floating_ips,
            id=self.id,
            name=self.name,
            resource_group=self.resource_group)


def get_is_floating_ips(id: Optional[_builtins.str] = None,
                        name: Optional[_builtins.str] = None,
                        resource_group: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsFloatingIpsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['resourceGroup'] = resource_group
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsFloatingIps:getIsFloatingIps', __args__, opts=opts, typ=GetIsFloatingIpsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsFloatingIpsResult(
        floating_ips=pulumi.get(__ret__, 'floating_ips'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        resource_group=pulumi.get(__ret__, 'resource_group'))
def get_is_floating_ips_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               resource_group: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsFloatingIpsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['resourceGroup'] = resource_group
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsFloatingIps:getIsFloatingIps', __args__, opts=opts, typ=GetIsFloatingIpsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsFloatingIpsResult(
        floating_ips=pulumi.get(__response__, 'floating_ips'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        resource_group=pulumi.get(__response__, 'resource_group')))
