# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IamAccountSettingsArgs', 'IamAccountSettings']

@pulumi.input_type
class IamAccountSettingsArgs:
    def __init__(__self__, *,
                 allowed_ip_addresses: Optional[pulumi.Input[_builtins.str]] = None,
                 entity_tag: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_account_settings_id: Optional[pulumi.Input[_builtins.str]] = None,
                 if_match: Optional[pulumi.Input[_builtins.str]] = None,
                 include_history: Optional[pulumi.Input[_builtins.bool]] = None,
                 max_sessions_per_identity: Optional[pulumi.Input[_builtins.str]] = None,
                 mfa: Optional[pulumi.Input[_builtins.str]] = None,
                 restrict_create_platform_apikey: Optional[pulumi.Input[_builtins.str]] = None,
                 restrict_create_service_id: Optional[pulumi.Input[_builtins.str]] = None,
                 session_expiration_in_seconds: Optional[pulumi.Input[_builtins.str]] = None,
                 session_invalidation_in_seconds: Optional[pulumi.Input[_builtins.str]] = None,
                 system_access_token_expiration_in_seconds: Optional[pulumi.Input[_builtins.str]] = None,
                 system_refresh_token_expiration_in_seconds: Optional[pulumi.Input[_builtins.str]] = None,
                 user_mfas: Optional[pulumi.Input[Sequence[pulumi.Input['IamAccountSettingsUserMfaArgs']]]] = None):
        """
        The set of arguments for constructing a IamAccountSettings resource.
        :param pulumi.Input[_builtins.str] allowed_ip_addresses: Defines the IP addresses and subnets from which IAM tokens can be created for the account.
        :param pulumi.Input[_builtins.str] entity_tag: Version of the account settings.
        :param pulumi.Input[_builtins.str] if_match: Version of the account settings to be updated. Specify the version that you retrieved as entity_tag (ETag header) when
               reading the account. This value helps identifying parallel usage of this API. Pass * to indicate to update any version
               available. This might result in stale updates.
        :param pulumi.Input[_builtins.bool] include_history: Defines if the entity history is included in the response.
        :param pulumi.Input[_builtins.str] max_sessions_per_identity: Defines the max allowed sessions per identity required by the account. Value values: * Any whole number greater than 0 *
               NOT_SET - To unset account setting and use service default.
        :param pulumi.Input[_builtins.str] mfa: Defines the MFA trait for the account. Valid values: * NONE - No MFA trait set * TOTP - For all non-federated IBMId
               users * TOTP4ALL - For all users * LEVEL1 - Email-based MFA for all users * LEVEL2 - TOTP-based MFA for all users *
               LEVEL3 - U2F MFA for all users.
        :param pulumi.Input[_builtins.str] restrict_create_platform_apikey: Defines whether or not creating platform API keys is access controlled. Valid values: * RESTRICTED - to apply access
               control * NOT_RESTRICTED - to remove access control * NOT_SET - to 'unset' a previous set value.
        :param pulumi.Input[_builtins.str] restrict_create_service_id: Defines whether or not creating a Service Id is access controlled. Valid values: * RESTRICTED - to apply access control
               * NOT_RESTRICTED - to remove access control * NOT_SET - to 'unset' a previous set value.
        :param pulumi.Input[_builtins.str] session_expiration_in_seconds: Defines the session expiration in seconds for the account. Valid values: * Any whole number between between '900' and
               '86400' * NOT_SET - To unset account setting and use service default.
        :param pulumi.Input[_builtins.str] session_invalidation_in_seconds: Defines the period of time in seconds in which a session will be invalidated due to inactivity. Valid values: * Any
               whole number between '900' and '7200' * NOT_SET - To unset account setting and use service default.
        :param pulumi.Input[_builtins.str] system_access_token_expiration_in_seconds: Defines the access token expiration in seconds. Valid values: * Any whole number between '900' and '3600' * NOT_SET - To
               unset account setting and use service default.
        :param pulumi.Input[_builtins.str] system_refresh_token_expiration_in_seconds: Defines the refresh token expiration in seconds. Valid values: * Any whole number between '900' and '2592000' * NOT_SET
               - To unset account setting and use service default.
        :param pulumi.Input[Sequence[pulumi.Input['IamAccountSettingsUserMfaArgs']]] user_mfas: List of users that are exempted from the MFA requirement of the account.
        """
        if allowed_ip_addresses is not None:
            pulumi.set(__self__, "allowed_ip_addresses", allowed_ip_addresses)
        if entity_tag is not None:
            pulumi.set(__self__, "entity_tag", entity_tag)
        if iam_account_settings_id is not None:
            pulumi.set(__self__, "iam_account_settings_id", iam_account_settings_id)
        if if_match is not None:
            pulumi.set(__self__, "if_match", if_match)
        if include_history is not None:
            pulumi.set(__self__, "include_history", include_history)
        if max_sessions_per_identity is not None:
            pulumi.set(__self__, "max_sessions_per_identity", max_sessions_per_identity)
        if mfa is not None:
            pulumi.set(__self__, "mfa", mfa)
        if restrict_create_platform_apikey is not None:
            pulumi.set(__self__, "restrict_create_platform_apikey", restrict_create_platform_apikey)
        if restrict_create_service_id is not None:
            pulumi.set(__self__, "restrict_create_service_id", restrict_create_service_id)
        if session_expiration_in_seconds is not None:
            pulumi.set(__self__, "session_expiration_in_seconds", session_expiration_in_seconds)
        if session_invalidation_in_seconds is not None:
            pulumi.set(__self__, "session_invalidation_in_seconds", session_invalidation_in_seconds)
        if system_access_token_expiration_in_seconds is not None:
            pulumi.set(__self__, "system_access_token_expiration_in_seconds", system_access_token_expiration_in_seconds)
        if system_refresh_token_expiration_in_seconds is not None:
            pulumi.set(__self__, "system_refresh_token_expiration_in_seconds", system_refresh_token_expiration_in_seconds)
        if user_mfas is not None:
            pulumi.set(__self__, "user_mfas", user_mfas)

    @_builtins.property
    @pulumi.getter(name="allowedIpAddresses")
    def allowed_ip_addresses(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Defines the IP addresses and subnets from which IAM tokens can be created for the account.
        """
        return pulumi.get(self, "allowed_ip_addresses")

    @allowed_ip_addresses.setter
    def allowed_ip_addresses(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "allowed_ip_addresses", value)

    @_builtins.property
    @pulumi.getter(name="entityTag")
    def entity_tag(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Version of the account settings.
        """
        return pulumi.get(self, "entity_tag")

    @entity_tag.setter
    def entity_tag(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entity_tag", value)

    @_builtins.property
    @pulumi.getter(name="iamAccountSettingsId")
    def iam_account_settings_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "iam_account_settings_id")

    @iam_account_settings_id.setter
    def iam_account_settings_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_account_settings_id", value)

    @_builtins.property
    @pulumi.getter(name="ifMatch")
    def if_match(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Version of the account settings to be updated. Specify the version that you retrieved as entity_tag (ETag header) when
        reading the account. This value helps identifying parallel usage of this API. Pass * to indicate to update any version
        available. This might result in stale updates.
        """
        return pulumi.get(self, "if_match")

    @if_match.setter
    def if_match(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "if_match", value)

    @_builtins.property
    @pulumi.getter(name="includeHistory")
    def include_history(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Defines if the entity history is included in the response.
        """
        return pulumi.get(self, "include_history")

    @include_history.setter
    def include_history(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "include_history", value)

    @_builtins.property
    @pulumi.getter(name="maxSessionsPerIdentity")
    def max_sessions_per_identity(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Defines the max allowed sessions per identity required by the account. Value values: * Any whole number greater than 0 *
        NOT_SET - To unset account setting and use service default.
        """
        return pulumi.get(self, "max_sessions_per_identity")

    @max_sessions_per_identity.setter
    def max_sessions_per_identity(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "max_sessions_per_identity", value)

    @_builtins.property
    @pulumi.getter
    def mfa(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Defines the MFA trait for the account. Valid values: * NONE - No MFA trait set * TOTP - For all non-federated IBMId
        users * TOTP4ALL - For all users * LEVEL1 - Email-based MFA for all users * LEVEL2 - TOTP-based MFA for all users *
        LEVEL3 - U2F MFA for all users.
        """
        return pulumi.get(self, "mfa")

    @mfa.setter
    def mfa(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mfa", value)

    @_builtins.property
    @pulumi.getter(name="restrictCreatePlatformApikey")
    def restrict_create_platform_apikey(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Defines whether or not creating platform API keys is access controlled. Valid values: * RESTRICTED - to apply access
        control * NOT_RESTRICTED - to remove access control * NOT_SET - to 'unset' a previous set value.
        """
        return pulumi.get(self, "restrict_create_platform_apikey")

    @restrict_create_platform_apikey.setter
    def restrict_create_platform_apikey(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "restrict_create_platform_apikey", value)

    @_builtins.property
    @pulumi.getter(name="restrictCreateServiceId")
    def restrict_create_service_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Defines whether or not creating a Service Id is access controlled. Valid values: * RESTRICTED - to apply access control
        * NOT_RESTRICTED - to remove access control * NOT_SET - to 'unset' a previous set value.
        """
        return pulumi.get(self, "restrict_create_service_id")

    @restrict_create_service_id.setter
    def restrict_create_service_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "restrict_create_service_id", value)

    @_builtins.property
    @pulumi.getter(name="sessionExpirationInSeconds")
    def session_expiration_in_seconds(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Defines the session expiration in seconds for the account. Valid values: * Any whole number between between '900' and
        '86400' * NOT_SET - To unset account setting and use service default.
        """
        return pulumi.get(self, "session_expiration_in_seconds")

    @session_expiration_in_seconds.setter
    def session_expiration_in_seconds(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "session_expiration_in_seconds", value)

    @_builtins.property
    @pulumi.getter(name="sessionInvalidationInSeconds")
    def session_invalidation_in_seconds(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Defines the period of time in seconds in which a session will be invalidated due to inactivity. Valid values: * Any
        whole number between '900' and '7200' * NOT_SET - To unset account setting and use service default.
        """
        return pulumi.get(self, "session_invalidation_in_seconds")

    @session_invalidation_in_seconds.setter
    def session_invalidation_in_seconds(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "session_invalidation_in_seconds", value)

    @_builtins.property
    @pulumi.getter(name="systemAccessTokenExpirationInSeconds")
    def system_access_token_expiration_in_seconds(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Defines the access token expiration in seconds. Valid values: * Any whole number between '900' and '3600' * NOT_SET - To
        unset account setting and use service default.
        """
        return pulumi.get(self, "system_access_token_expiration_in_seconds")

    @system_access_token_expiration_in_seconds.setter
    def system_access_token_expiration_in_seconds(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "system_access_token_expiration_in_seconds", value)

    @_builtins.property
    @pulumi.getter(name="systemRefreshTokenExpirationInSeconds")
    def system_refresh_token_expiration_in_seconds(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Defines the refresh token expiration in seconds. Valid values: * Any whole number between '900' and '2592000' * NOT_SET
        - To unset account setting and use service default.
        """
        return pulumi.get(self, "system_refresh_token_expiration_in_seconds")

    @system_refresh_token_expiration_in_seconds.setter
    def system_refresh_token_expiration_in_seconds(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "system_refresh_token_expiration_in_seconds", value)

    @_builtins.property
    @pulumi.getter(name="userMfas")
    def user_mfas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IamAccountSettingsUserMfaArgs']]]]:
        """
        List of users that are exempted from the MFA requirement of the account.
        """
        return pulumi.get(self, "user_mfas")

    @user_mfas.setter
    def user_mfas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IamAccountSettingsUserMfaArgs']]]]):
        pulumi.set(self, "user_mfas", value)


@pulumi.input_type
class _IamAccountSettingsState:
    def __init__(__self__, *,
                 allowed_ip_addresses: Optional[pulumi.Input[_builtins.str]] = None,
                 entity_tag: Optional[pulumi.Input[_builtins.str]] = None,
                 histories: Optional[pulumi.Input[Sequence[pulumi.Input['IamAccountSettingsHistoryArgs']]]] = None,
                 iam_account_settings_id: Optional[pulumi.Input[_builtins.str]] = None,
                 if_match: Optional[pulumi.Input[_builtins.str]] = None,
                 include_history: Optional[pulumi.Input[_builtins.bool]] = None,
                 max_sessions_per_identity: Optional[pulumi.Input[_builtins.str]] = None,
                 mfa: Optional[pulumi.Input[_builtins.str]] = None,
                 restrict_create_platform_apikey: Optional[pulumi.Input[_builtins.str]] = None,
                 restrict_create_service_id: Optional[pulumi.Input[_builtins.str]] = None,
                 session_expiration_in_seconds: Optional[pulumi.Input[_builtins.str]] = None,
                 session_invalidation_in_seconds: Optional[pulumi.Input[_builtins.str]] = None,
                 system_access_token_expiration_in_seconds: Optional[pulumi.Input[_builtins.str]] = None,
                 system_refresh_token_expiration_in_seconds: Optional[pulumi.Input[_builtins.str]] = None,
                 user_mfas: Optional[pulumi.Input[Sequence[pulumi.Input['IamAccountSettingsUserMfaArgs']]]] = None):
        """
        Input properties used for looking up and filtering IamAccountSettings resources.
        :param pulumi.Input[_builtins.str] allowed_ip_addresses: Defines the IP addresses and subnets from which IAM tokens can be created for the account.
        :param pulumi.Input[_builtins.str] entity_tag: Version of the account settings.
        :param pulumi.Input[Sequence[pulumi.Input['IamAccountSettingsHistoryArgs']]] histories: History of the Account Settings.
        :param pulumi.Input[_builtins.str] if_match: Version of the account settings to be updated. Specify the version that you retrieved as entity_tag (ETag header) when
               reading the account. This value helps identifying parallel usage of this API. Pass * to indicate to update any version
               available. This might result in stale updates.
        :param pulumi.Input[_builtins.bool] include_history: Defines if the entity history is included in the response.
        :param pulumi.Input[_builtins.str] max_sessions_per_identity: Defines the max allowed sessions per identity required by the account. Value values: * Any whole number greater than 0 *
               NOT_SET - To unset account setting and use service default.
        :param pulumi.Input[_builtins.str] mfa: Defines the MFA trait for the account. Valid values: * NONE - No MFA trait set * TOTP - For all non-federated IBMId
               users * TOTP4ALL - For all users * LEVEL1 - Email-based MFA for all users * LEVEL2 - TOTP-based MFA for all users *
               LEVEL3 - U2F MFA for all users.
        :param pulumi.Input[_builtins.str] restrict_create_platform_apikey: Defines whether or not creating platform API keys is access controlled. Valid values: * RESTRICTED - to apply access
               control * NOT_RESTRICTED - to remove access control * NOT_SET - to 'unset' a previous set value.
        :param pulumi.Input[_builtins.str] restrict_create_service_id: Defines whether or not creating a Service Id is access controlled. Valid values: * RESTRICTED - to apply access control
               * NOT_RESTRICTED - to remove access control * NOT_SET - to 'unset' a previous set value.
        :param pulumi.Input[_builtins.str] session_expiration_in_seconds: Defines the session expiration in seconds for the account. Valid values: * Any whole number between between '900' and
               '86400' * NOT_SET - To unset account setting and use service default.
        :param pulumi.Input[_builtins.str] session_invalidation_in_seconds: Defines the period of time in seconds in which a session will be invalidated due to inactivity. Valid values: * Any
               whole number between '900' and '7200' * NOT_SET - To unset account setting and use service default.
        :param pulumi.Input[_builtins.str] system_access_token_expiration_in_seconds: Defines the access token expiration in seconds. Valid values: * Any whole number between '900' and '3600' * NOT_SET - To
               unset account setting and use service default.
        :param pulumi.Input[_builtins.str] system_refresh_token_expiration_in_seconds: Defines the refresh token expiration in seconds. Valid values: * Any whole number between '900' and '2592000' * NOT_SET
               - To unset account setting and use service default.
        :param pulumi.Input[Sequence[pulumi.Input['IamAccountSettingsUserMfaArgs']]] user_mfas: List of users that are exempted from the MFA requirement of the account.
        """
        if allowed_ip_addresses is not None:
            pulumi.set(__self__, "allowed_ip_addresses", allowed_ip_addresses)
        if entity_tag is not None:
            pulumi.set(__self__, "entity_tag", entity_tag)
        if histories is not None:
            pulumi.set(__self__, "histories", histories)
        if iam_account_settings_id is not None:
            pulumi.set(__self__, "iam_account_settings_id", iam_account_settings_id)
        if if_match is not None:
            pulumi.set(__self__, "if_match", if_match)
        if include_history is not None:
            pulumi.set(__self__, "include_history", include_history)
        if max_sessions_per_identity is not None:
            pulumi.set(__self__, "max_sessions_per_identity", max_sessions_per_identity)
        if mfa is not None:
            pulumi.set(__self__, "mfa", mfa)
        if restrict_create_platform_apikey is not None:
            pulumi.set(__self__, "restrict_create_platform_apikey", restrict_create_platform_apikey)
        if restrict_create_service_id is not None:
            pulumi.set(__self__, "restrict_create_service_id", restrict_create_service_id)
        if session_expiration_in_seconds is not None:
            pulumi.set(__self__, "session_expiration_in_seconds", session_expiration_in_seconds)
        if session_invalidation_in_seconds is not None:
            pulumi.set(__self__, "session_invalidation_in_seconds", session_invalidation_in_seconds)
        if system_access_token_expiration_in_seconds is not None:
            pulumi.set(__self__, "system_access_token_expiration_in_seconds", system_access_token_expiration_in_seconds)
        if system_refresh_token_expiration_in_seconds is not None:
            pulumi.set(__self__, "system_refresh_token_expiration_in_seconds", system_refresh_token_expiration_in_seconds)
        if user_mfas is not None:
            pulumi.set(__self__, "user_mfas", user_mfas)

    @_builtins.property
    @pulumi.getter(name="allowedIpAddresses")
    def allowed_ip_addresses(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Defines the IP addresses and subnets from which IAM tokens can be created for the account.
        """
        return pulumi.get(self, "allowed_ip_addresses")

    @allowed_ip_addresses.setter
    def allowed_ip_addresses(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "allowed_ip_addresses", value)

    @_builtins.property
    @pulumi.getter(name="entityTag")
    def entity_tag(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Version of the account settings.
        """
        return pulumi.get(self, "entity_tag")

    @entity_tag.setter
    def entity_tag(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entity_tag", value)

    @_builtins.property
    @pulumi.getter
    def histories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IamAccountSettingsHistoryArgs']]]]:
        """
        History of the Account Settings.
        """
        return pulumi.get(self, "histories")

    @histories.setter
    def histories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IamAccountSettingsHistoryArgs']]]]):
        pulumi.set(self, "histories", value)

    @_builtins.property
    @pulumi.getter(name="iamAccountSettingsId")
    def iam_account_settings_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "iam_account_settings_id")

    @iam_account_settings_id.setter
    def iam_account_settings_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_account_settings_id", value)

    @_builtins.property
    @pulumi.getter(name="ifMatch")
    def if_match(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Version of the account settings to be updated. Specify the version that you retrieved as entity_tag (ETag header) when
        reading the account. This value helps identifying parallel usage of this API. Pass * to indicate to update any version
        available. This might result in stale updates.
        """
        return pulumi.get(self, "if_match")

    @if_match.setter
    def if_match(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "if_match", value)

    @_builtins.property
    @pulumi.getter(name="includeHistory")
    def include_history(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Defines if the entity history is included in the response.
        """
        return pulumi.get(self, "include_history")

    @include_history.setter
    def include_history(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "include_history", value)

    @_builtins.property
    @pulumi.getter(name="maxSessionsPerIdentity")
    def max_sessions_per_identity(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Defines the max allowed sessions per identity required by the account. Value values: * Any whole number greater than 0 *
        NOT_SET - To unset account setting and use service default.
        """
        return pulumi.get(self, "max_sessions_per_identity")

    @max_sessions_per_identity.setter
    def max_sessions_per_identity(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "max_sessions_per_identity", value)

    @_builtins.property
    @pulumi.getter
    def mfa(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Defines the MFA trait for the account. Valid values: * NONE - No MFA trait set * TOTP - For all non-federated IBMId
        users * TOTP4ALL - For all users * LEVEL1 - Email-based MFA for all users * LEVEL2 - TOTP-based MFA for all users *
        LEVEL3 - U2F MFA for all users.
        """
        return pulumi.get(self, "mfa")

    @mfa.setter
    def mfa(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mfa", value)

    @_builtins.property
    @pulumi.getter(name="restrictCreatePlatformApikey")
    def restrict_create_platform_apikey(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Defines whether or not creating platform API keys is access controlled. Valid values: * RESTRICTED - to apply access
        control * NOT_RESTRICTED - to remove access control * NOT_SET - to 'unset' a previous set value.
        """
        return pulumi.get(self, "restrict_create_platform_apikey")

    @restrict_create_platform_apikey.setter
    def restrict_create_platform_apikey(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "restrict_create_platform_apikey", value)

    @_builtins.property
    @pulumi.getter(name="restrictCreateServiceId")
    def restrict_create_service_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Defines whether or not creating a Service Id is access controlled. Valid values: * RESTRICTED - to apply access control
        * NOT_RESTRICTED - to remove access control * NOT_SET - to 'unset' a previous set value.
        """
        return pulumi.get(self, "restrict_create_service_id")

    @restrict_create_service_id.setter
    def restrict_create_service_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "restrict_create_service_id", value)

    @_builtins.property
    @pulumi.getter(name="sessionExpirationInSeconds")
    def session_expiration_in_seconds(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Defines the session expiration in seconds for the account. Valid values: * Any whole number between between '900' and
        '86400' * NOT_SET - To unset account setting and use service default.
        """
        return pulumi.get(self, "session_expiration_in_seconds")

    @session_expiration_in_seconds.setter
    def session_expiration_in_seconds(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "session_expiration_in_seconds", value)

    @_builtins.property
    @pulumi.getter(name="sessionInvalidationInSeconds")
    def session_invalidation_in_seconds(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Defines the period of time in seconds in which a session will be invalidated due to inactivity. Valid values: * Any
        whole number between '900' and '7200' * NOT_SET - To unset account setting and use service default.
        """
        return pulumi.get(self, "session_invalidation_in_seconds")

    @session_invalidation_in_seconds.setter
    def session_invalidation_in_seconds(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "session_invalidation_in_seconds", value)

    @_builtins.property
    @pulumi.getter(name="systemAccessTokenExpirationInSeconds")
    def system_access_token_expiration_in_seconds(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Defines the access token expiration in seconds. Valid values: * Any whole number between '900' and '3600' * NOT_SET - To
        unset account setting and use service default.
        """
        return pulumi.get(self, "system_access_token_expiration_in_seconds")

    @system_access_token_expiration_in_seconds.setter
    def system_access_token_expiration_in_seconds(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "system_access_token_expiration_in_seconds", value)

    @_builtins.property
    @pulumi.getter(name="systemRefreshTokenExpirationInSeconds")
    def system_refresh_token_expiration_in_seconds(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Defines the refresh token expiration in seconds. Valid values: * Any whole number between '900' and '2592000' * NOT_SET
        - To unset account setting and use service default.
        """
        return pulumi.get(self, "system_refresh_token_expiration_in_seconds")

    @system_refresh_token_expiration_in_seconds.setter
    def system_refresh_token_expiration_in_seconds(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "system_refresh_token_expiration_in_seconds", value)

    @_builtins.property
    @pulumi.getter(name="userMfas")
    def user_mfas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IamAccountSettingsUserMfaArgs']]]]:
        """
        List of users that are exempted from the MFA requirement of the account.
        """
        return pulumi.get(self, "user_mfas")

    @user_mfas.setter
    def user_mfas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IamAccountSettingsUserMfaArgs']]]]):
        pulumi.set(self, "user_mfas", value)


@pulumi.type_token("ibm:index/iamAccountSettings:IamAccountSettings")
class IamAccountSettings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowed_ip_addresses: Optional[pulumi.Input[_builtins.str]] = None,
                 entity_tag: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_account_settings_id: Optional[pulumi.Input[_builtins.str]] = None,
                 if_match: Optional[pulumi.Input[_builtins.str]] = None,
                 include_history: Optional[pulumi.Input[_builtins.bool]] = None,
                 max_sessions_per_identity: Optional[pulumi.Input[_builtins.str]] = None,
                 mfa: Optional[pulumi.Input[_builtins.str]] = None,
                 restrict_create_platform_apikey: Optional[pulumi.Input[_builtins.str]] = None,
                 restrict_create_service_id: Optional[pulumi.Input[_builtins.str]] = None,
                 session_expiration_in_seconds: Optional[pulumi.Input[_builtins.str]] = None,
                 session_invalidation_in_seconds: Optional[pulumi.Input[_builtins.str]] = None,
                 system_access_token_expiration_in_seconds: Optional[pulumi.Input[_builtins.str]] = None,
                 system_refresh_token_expiration_in_seconds: Optional[pulumi.Input[_builtins.str]] = None,
                 user_mfas: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamAccountSettingsUserMfaArgs', 'IamAccountSettingsUserMfaArgsDict']]]]] = None,
                 __props__=None):
        """
        Create a IamAccountSettings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] allowed_ip_addresses: Defines the IP addresses and subnets from which IAM tokens can be created for the account.
        :param pulumi.Input[_builtins.str] entity_tag: Version of the account settings.
        :param pulumi.Input[_builtins.str] if_match: Version of the account settings to be updated. Specify the version that you retrieved as entity_tag (ETag header) when
               reading the account. This value helps identifying parallel usage of this API. Pass * to indicate to update any version
               available. This might result in stale updates.
        :param pulumi.Input[_builtins.bool] include_history: Defines if the entity history is included in the response.
        :param pulumi.Input[_builtins.str] max_sessions_per_identity: Defines the max allowed sessions per identity required by the account. Value values: * Any whole number greater than 0 *
               NOT_SET - To unset account setting and use service default.
        :param pulumi.Input[_builtins.str] mfa: Defines the MFA trait for the account. Valid values: * NONE - No MFA trait set * TOTP - For all non-federated IBMId
               users * TOTP4ALL - For all users * LEVEL1 - Email-based MFA for all users * LEVEL2 - TOTP-based MFA for all users *
               LEVEL3 - U2F MFA for all users.
        :param pulumi.Input[_builtins.str] restrict_create_platform_apikey: Defines whether or not creating platform API keys is access controlled. Valid values: * RESTRICTED - to apply access
               control * NOT_RESTRICTED - to remove access control * NOT_SET - to 'unset' a previous set value.
        :param pulumi.Input[_builtins.str] restrict_create_service_id: Defines whether or not creating a Service Id is access controlled. Valid values: * RESTRICTED - to apply access control
               * NOT_RESTRICTED - to remove access control * NOT_SET - to 'unset' a previous set value.
        :param pulumi.Input[_builtins.str] session_expiration_in_seconds: Defines the session expiration in seconds for the account. Valid values: * Any whole number between between '900' and
               '86400' * NOT_SET - To unset account setting and use service default.
        :param pulumi.Input[_builtins.str] session_invalidation_in_seconds: Defines the period of time in seconds in which a session will be invalidated due to inactivity. Valid values: * Any
               whole number between '900' and '7200' * NOT_SET - To unset account setting and use service default.
        :param pulumi.Input[_builtins.str] system_access_token_expiration_in_seconds: Defines the access token expiration in seconds. Valid values: * Any whole number between '900' and '3600' * NOT_SET - To
               unset account setting and use service default.
        :param pulumi.Input[_builtins.str] system_refresh_token_expiration_in_seconds: Defines the refresh token expiration in seconds. Valid values: * Any whole number between '900' and '2592000' * NOT_SET
               - To unset account setting and use service default.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IamAccountSettingsUserMfaArgs', 'IamAccountSettingsUserMfaArgsDict']]]] user_mfas: List of users that are exempted from the MFA requirement of the account.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[IamAccountSettingsArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IamAccountSettings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IamAccountSettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IamAccountSettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowed_ip_addresses: Optional[pulumi.Input[_builtins.str]] = None,
                 entity_tag: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_account_settings_id: Optional[pulumi.Input[_builtins.str]] = None,
                 if_match: Optional[pulumi.Input[_builtins.str]] = None,
                 include_history: Optional[pulumi.Input[_builtins.bool]] = None,
                 max_sessions_per_identity: Optional[pulumi.Input[_builtins.str]] = None,
                 mfa: Optional[pulumi.Input[_builtins.str]] = None,
                 restrict_create_platform_apikey: Optional[pulumi.Input[_builtins.str]] = None,
                 restrict_create_service_id: Optional[pulumi.Input[_builtins.str]] = None,
                 session_expiration_in_seconds: Optional[pulumi.Input[_builtins.str]] = None,
                 session_invalidation_in_seconds: Optional[pulumi.Input[_builtins.str]] = None,
                 system_access_token_expiration_in_seconds: Optional[pulumi.Input[_builtins.str]] = None,
                 system_refresh_token_expiration_in_seconds: Optional[pulumi.Input[_builtins.str]] = None,
                 user_mfas: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamAccountSettingsUserMfaArgs', 'IamAccountSettingsUserMfaArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IamAccountSettingsArgs.__new__(IamAccountSettingsArgs)

            __props__.__dict__["allowed_ip_addresses"] = allowed_ip_addresses
            __props__.__dict__["entity_tag"] = entity_tag
            __props__.__dict__["iam_account_settings_id"] = iam_account_settings_id
            __props__.__dict__["if_match"] = if_match
            __props__.__dict__["include_history"] = include_history
            __props__.__dict__["max_sessions_per_identity"] = max_sessions_per_identity
            __props__.__dict__["mfa"] = mfa
            __props__.__dict__["restrict_create_platform_apikey"] = restrict_create_platform_apikey
            __props__.__dict__["restrict_create_service_id"] = restrict_create_service_id
            __props__.__dict__["session_expiration_in_seconds"] = session_expiration_in_seconds
            __props__.__dict__["session_invalidation_in_seconds"] = session_invalidation_in_seconds
            __props__.__dict__["system_access_token_expiration_in_seconds"] = system_access_token_expiration_in_seconds
            __props__.__dict__["system_refresh_token_expiration_in_seconds"] = system_refresh_token_expiration_in_seconds
            __props__.__dict__["user_mfas"] = user_mfas
            __props__.__dict__["histories"] = None
        super(IamAccountSettings, __self__).__init__(
            'ibm:index/iamAccountSettings:IamAccountSettings',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allowed_ip_addresses: Optional[pulumi.Input[_builtins.str]] = None,
            entity_tag: Optional[pulumi.Input[_builtins.str]] = None,
            histories: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamAccountSettingsHistoryArgs', 'IamAccountSettingsHistoryArgsDict']]]]] = None,
            iam_account_settings_id: Optional[pulumi.Input[_builtins.str]] = None,
            if_match: Optional[pulumi.Input[_builtins.str]] = None,
            include_history: Optional[pulumi.Input[_builtins.bool]] = None,
            max_sessions_per_identity: Optional[pulumi.Input[_builtins.str]] = None,
            mfa: Optional[pulumi.Input[_builtins.str]] = None,
            restrict_create_platform_apikey: Optional[pulumi.Input[_builtins.str]] = None,
            restrict_create_service_id: Optional[pulumi.Input[_builtins.str]] = None,
            session_expiration_in_seconds: Optional[pulumi.Input[_builtins.str]] = None,
            session_invalidation_in_seconds: Optional[pulumi.Input[_builtins.str]] = None,
            system_access_token_expiration_in_seconds: Optional[pulumi.Input[_builtins.str]] = None,
            system_refresh_token_expiration_in_seconds: Optional[pulumi.Input[_builtins.str]] = None,
            user_mfas: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamAccountSettingsUserMfaArgs', 'IamAccountSettingsUserMfaArgsDict']]]]] = None) -> 'IamAccountSettings':
        """
        Get an existing IamAccountSettings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] allowed_ip_addresses: Defines the IP addresses and subnets from which IAM tokens can be created for the account.
        :param pulumi.Input[_builtins.str] entity_tag: Version of the account settings.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IamAccountSettingsHistoryArgs', 'IamAccountSettingsHistoryArgsDict']]]] histories: History of the Account Settings.
        :param pulumi.Input[_builtins.str] if_match: Version of the account settings to be updated. Specify the version that you retrieved as entity_tag (ETag header) when
               reading the account. This value helps identifying parallel usage of this API. Pass * to indicate to update any version
               available. This might result in stale updates.
        :param pulumi.Input[_builtins.bool] include_history: Defines if the entity history is included in the response.
        :param pulumi.Input[_builtins.str] max_sessions_per_identity: Defines the max allowed sessions per identity required by the account. Value values: * Any whole number greater than 0 *
               NOT_SET - To unset account setting and use service default.
        :param pulumi.Input[_builtins.str] mfa: Defines the MFA trait for the account. Valid values: * NONE - No MFA trait set * TOTP - For all non-federated IBMId
               users * TOTP4ALL - For all users * LEVEL1 - Email-based MFA for all users * LEVEL2 - TOTP-based MFA for all users *
               LEVEL3 - U2F MFA for all users.
        :param pulumi.Input[_builtins.str] restrict_create_platform_apikey: Defines whether or not creating platform API keys is access controlled. Valid values: * RESTRICTED - to apply access
               control * NOT_RESTRICTED - to remove access control * NOT_SET - to 'unset' a previous set value.
        :param pulumi.Input[_builtins.str] restrict_create_service_id: Defines whether or not creating a Service Id is access controlled. Valid values: * RESTRICTED - to apply access control
               * NOT_RESTRICTED - to remove access control * NOT_SET - to 'unset' a previous set value.
        :param pulumi.Input[_builtins.str] session_expiration_in_seconds: Defines the session expiration in seconds for the account. Valid values: * Any whole number between between '900' and
               '86400' * NOT_SET - To unset account setting and use service default.
        :param pulumi.Input[_builtins.str] session_invalidation_in_seconds: Defines the period of time in seconds in which a session will be invalidated due to inactivity. Valid values: * Any
               whole number between '900' and '7200' * NOT_SET - To unset account setting and use service default.
        :param pulumi.Input[_builtins.str] system_access_token_expiration_in_seconds: Defines the access token expiration in seconds. Valid values: * Any whole number between '900' and '3600' * NOT_SET - To
               unset account setting and use service default.
        :param pulumi.Input[_builtins.str] system_refresh_token_expiration_in_seconds: Defines the refresh token expiration in seconds. Valid values: * Any whole number between '900' and '2592000' * NOT_SET
               - To unset account setting and use service default.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IamAccountSettingsUserMfaArgs', 'IamAccountSettingsUserMfaArgsDict']]]] user_mfas: List of users that are exempted from the MFA requirement of the account.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IamAccountSettingsState.__new__(_IamAccountSettingsState)

        __props__.__dict__["allowed_ip_addresses"] = allowed_ip_addresses
        __props__.__dict__["entity_tag"] = entity_tag
        __props__.__dict__["histories"] = histories
        __props__.__dict__["iam_account_settings_id"] = iam_account_settings_id
        __props__.__dict__["if_match"] = if_match
        __props__.__dict__["include_history"] = include_history
        __props__.__dict__["max_sessions_per_identity"] = max_sessions_per_identity
        __props__.__dict__["mfa"] = mfa
        __props__.__dict__["restrict_create_platform_apikey"] = restrict_create_platform_apikey
        __props__.__dict__["restrict_create_service_id"] = restrict_create_service_id
        __props__.__dict__["session_expiration_in_seconds"] = session_expiration_in_seconds
        __props__.__dict__["session_invalidation_in_seconds"] = session_invalidation_in_seconds
        __props__.__dict__["system_access_token_expiration_in_seconds"] = system_access_token_expiration_in_seconds
        __props__.__dict__["system_refresh_token_expiration_in_seconds"] = system_refresh_token_expiration_in_seconds
        __props__.__dict__["user_mfas"] = user_mfas
        return IamAccountSettings(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="allowedIpAddresses")
    def allowed_ip_addresses(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Defines the IP addresses and subnets from which IAM tokens can be created for the account.
        """
        return pulumi.get(self, "allowed_ip_addresses")

    @_builtins.property
    @pulumi.getter(name="entityTag")
    def entity_tag(self) -> pulumi.Output[_builtins.str]:
        """
        Version of the account settings.
        """
        return pulumi.get(self, "entity_tag")

    @_builtins.property
    @pulumi.getter
    def histories(self) -> pulumi.Output[Sequence['outputs.IamAccountSettingsHistory']]:
        """
        History of the Account Settings.
        """
        return pulumi.get(self, "histories")

    @_builtins.property
    @pulumi.getter(name="iamAccountSettingsId")
    def iam_account_settings_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "iam_account_settings_id")

    @_builtins.property
    @pulumi.getter(name="ifMatch")
    def if_match(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Version of the account settings to be updated. Specify the version that you retrieved as entity_tag (ETag header) when
        reading the account. This value helps identifying parallel usage of this API. Pass * to indicate to update any version
        available. This might result in stale updates.
        """
        return pulumi.get(self, "if_match")

    @_builtins.property
    @pulumi.getter(name="includeHistory")
    def include_history(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Defines if the entity history is included in the response.
        """
        return pulumi.get(self, "include_history")

    @_builtins.property
    @pulumi.getter(name="maxSessionsPerIdentity")
    def max_sessions_per_identity(self) -> pulumi.Output[_builtins.str]:
        """
        Defines the max allowed sessions per identity required by the account. Value values: * Any whole number greater than 0 *
        NOT_SET - To unset account setting and use service default.
        """
        return pulumi.get(self, "max_sessions_per_identity")

    @_builtins.property
    @pulumi.getter
    def mfa(self) -> pulumi.Output[_builtins.str]:
        """
        Defines the MFA trait for the account. Valid values: * NONE - No MFA trait set * TOTP - For all non-federated IBMId
        users * TOTP4ALL - For all users * LEVEL1 - Email-based MFA for all users * LEVEL2 - TOTP-based MFA for all users *
        LEVEL3 - U2F MFA for all users.
        """
        return pulumi.get(self, "mfa")

    @_builtins.property
    @pulumi.getter(name="restrictCreatePlatformApikey")
    def restrict_create_platform_apikey(self) -> pulumi.Output[_builtins.str]:
        """
        Defines whether or not creating platform API keys is access controlled. Valid values: * RESTRICTED - to apply access
        control * NOT_RESTRICTED - to remove access control * NOT_SET - to 'unset' a previous set value.
        """
        return pulumi.get(self, "restrict_create_platform_apikey")

    @_builtins.property
    @pulumi.getter(name="restrictCreateServiceId")
    def restrict_create_service_id(self) -> pulumi.Output[_builtins.str]:
        """
        Defines whether or not creating a Service Id is access controlled. Valid values: * RESTRICTED - to apply access control
        * NOT_RESTRICTED - to remove access control * NOT_SET - to 'unset' a previous set value.
        """
        return pulumi.get(self, "restrict_create_service_id")

    @_builtins.property
    @pulumi.getter(name="sessionExpirationInSeconds")
    def session_expiration_in_seconds(self) -> pulumi.Output[_builtins.str]:
        """
        Defines the session expiration in seconds for the account. Valid values: * Any whole number between between '900' and
        '86400' * NOT_SET - To unset account setting and use service default.
        """
        return pulumi.get(self, "session_expiration_in_seconds")

    @_builtins.property
    @pulumi.getter(name="sessionInvalidationInSeconds")
    def session_invalidation_in_seconds(self) -> pulumi.Output[_builtins.str]:
        """
        Defines the period of time in seconds in which a session will be invalidated due to inactivity. Valid values: * Any
        whole number between '900' and '7200' * NOT_SET - To unset account setting and use service default.
        """
        return pulumi.get(self, "session_invalidation_in_seconds")

    @_builtins.property
    @pulumi.getter(name="systemAccessTokenExpirationInSeconds")
    def system_access_token_expiration_in_seconds(self) -> pulumi.Output[_builtins.str]:
        """
        Defines the access token expiration in seconds. Valid values: * Any whole number between '900' and '3600' * NOT_SET - To
        unset account setting and use service default.
        """
        return pulumi.get(self, "system_access_token_expiration_in_seconds")

    @_builtins.property
    @pulumi.getter(name="systemRefreshTokenExpirationInSeconds")
    def system_refresh_token_expiration_in_seconds(self) -> pulumi.Output[_builtins.str]:
        """
        Defines the refresh token expiration in seconds. Valid values: * Any whole number between '900' and '2592000' * NOT_SET
        - To unset account setting and use service default.
        """
        return pulumi.get(self, "system_refresh_token_expiration_in_seconds")

    @_builtins.property
    @pulumi.getter(name="userMfas")
    def user_mfas(self) -> pulumi.Output[Optional[Sequence['outputs.IamAccountSettingsUserMfa']]]:
        """
        List of users that are exempted from the MFA requirement of the account.
        """
        return pulumi.get(self, "user_mfas")

