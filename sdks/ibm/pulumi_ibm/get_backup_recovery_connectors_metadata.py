# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetBackupRecoveryConnectorsMetadataResult',
    'AwaitableGetBackupRecoveryConnectorsMetadataResult',
    'get_backup_recovery_connectors_metadata',
    'get_backup_recovery_connectors_metadata_output',
]

@pulumi.output_type
class GetBackupRecoveryConnectorsMetadataResult:
    """
    A collection of values returned by getBackupRecoveryConnectorsMetadata.
    """
    def __init__(__self__, connector_image_metadatas=None, id=None, x_ibm_tenant_id=None):
        if connector_image_metadatas and not isinstance(connector_image_metadatas, list):
            raise TypeError("Expected argument 'connector_image_metadatas' to be a list")
        pulumi.set(__self__, "connector_image_metadatas", connector_image_metadatas)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if x_ibm_tenant_id and not isinstance(x_ibm_tenant_id, str):
            raise TypeError("Expected argument 'x_ibm_tenant_id' to be a str")
        pulumi.set(__self__, "x_ibm_tenant_id", x_ibm_tenant_id)

    @_builtins.property
    @pulumi.getter(name="connectorImageMetadatas")
    def connector_image_metadatas(self) -> Sequence['outputs.GetBackupRecoveryConnectorsMetadataConnectorImageMetadataResult']:
        return pulumi.get(self, "connector_image_metadatas")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> _builtins.str:
        return pulumi.get(self, "x_ibm_tenant_id")


class AwaitableGetBackupRecoveryConnectorsMetadataResult(GetBackupRecoveryConnectorsMetadataResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupRecoveryConnectorsMetadataResult(
            connector_image_metadatas=self.connector_image_metadatas,
            id=self.id,
            x_ibm_tenant_id=self.x_ibm_tenant_id)


def get_backup_recovery_connectors_metadata(id: Optional[_builtins.str] = None,
                                            x_ibm_tenant_id: Optional[_builtins.str] = None,
                                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupRecoveryConnectorsMetadataResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['xIbmTenantId'] = x_ibm_tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getBackupRecoveryConnectorsMetadata:getBackupRecoveryConnectorsMetadata', __args__, opts=opts, typ=GetBackupRecoveryConnectorsMetadataResult, package_ref=_utilities.get_package()).value

    return AwaitableGetBackupRecoveryConnectorsMetadataResult(
        connector_image_metadatas=pulumi.get(__ret__, 'connector_image_metadatas'),
        id=pulumi.get(__ret__, 'id'),
        x_ibm_tenant_id=pulumi.get(__ret__, 'x_ibm_tenant_id'))
def get_backup_recovery_connectors_metadata_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                   x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBackupRecoveryConnectorsMetadataResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['xIbmTenantId'] = x_ibm_tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getBackupRecoveryConnectorsMetadata:getBackupRecoveryConnectorsMetadata', __args__, opts=opts, typ=GetBackupRecoveryConnectorsMetadataResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetBackupRecoveryConnectorsMetadataResult(
        connector_image_metadatas=pulumi.get(__response__, 'connector_image_metadatas'),
        id=pulumi.get(__response__, 'id'),
        x_ibm_tenant_id=pulumi.get(__response__, 'x_ibm_tenant_id')))
