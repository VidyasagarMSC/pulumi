# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['SatelliteLocationNlbDnsArgs', 'SatelliteLocationNlbDns']

@pulumi.input_type
class SatelliteLocationNlbDnsArgs:
    def __init__(__self__, *,
                 ips: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 location: pulumi.Input[_builtins.str],
                 satellite_location_nlb_dns_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a SatelliteLocationNlbDns resource.
        """
        pulumi.set(__self__, "ips", ips)
        pulumi.set(__self__, "location", location)
        if satellite_location_nlb_dns_id is not None:
            pulumi.set(__self__, "satellite_location_nlb_dns_id", satellite_location_nlb_dns_id)

    @_builtins.property
    @pulumi.getter
    def ips(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "ips", value)

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter(name="satelliteLocationNlbDnsId")
    def satellite_location_nlb_dns_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "satellite_location_nlb_dns_id")

    @satellite_location_nlb_dns_id.setter
    def satellite_location_nlb_dns_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "satellite_location_nlb_dns_id", value)


@pulumi.input_type
class _SatelliteLocationNlbDnsState:
    def __init__(__self__, *,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 satellite_location_nlb_dns_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SatelliteLocationNlbDns resources.
        """
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if satellite_location_nlb_dns_id is not None:
            pulumi.set(__self__, "satellite_location_nlb_dns_id", satellite_location_nlb_dns_id)

    @_builtins.property
    @pulumi.getter
    def ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "ips", value)

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter(name="satelliteLocationNlbDnsId")
    def satellite_location_nlb_dns_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "satellite_location_nlb_dns_id")

    @satellite_location_nlb_dns_id.setter
    def satellite_location_nlb_dns_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "satellite_location_nlb_dns_id", value)


@pulumi.type_token("ibm:index/satelliteLocationNlbDns:SatelliteLocationNlbDns")
class SatelliteLocationNlbDns(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 satellite_location_nlb_dns_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a SatelliteLocationNlbDns resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SatelliteLocationNlbDnsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SatelliteLocationNlbDns resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SatelliteLocationNlbDnsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SatelliteLocationNlbDnsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 satellite_location_nlb_dns_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SatelliteLocationNlbDnsArgs.__new__(SatelliteLocationNlbDnsArgs)

            if ips is None and not opts.urn:
                raise TypeError("Missing required property 'ips'")
            __props__.__dict__["ips"] = ips
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["satellite_location_nlb_dns_id"] = satellite_location_nlb_dns_id
        super(SatelliteLocationNlbDns, __self__).__init__(
            'ibm:index/satelliteLocationNlbDns:SatelliteLocationNlbDns',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            location: Optional[pulumi.Input[_builtins.str]] = None,
            satellite_location_nlb_dns_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'SatelliteLocationNlbDns':
        """
        Get an existing SatelliteLocationNlbDns resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SatelliteLocationNlbDnsState.__new__(_SatelliteLocationNlbDnsState)

        __props__.__dict__["ips"] = ips
        __props__.__dict__["location"] = location
        __props__.__dict__["satellite_location_nlb_dns_id"] = satellite_location_nlb_dns_id
        return SatelliteLocationNlbDns(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def ips(self) -> pulumi.Output[Sequence[_builtins.str]]:
        return pulumi.get(self, "ips")

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter(name="satelliteLocationNlbDnsId")
    def satellite_location_nlb_dns_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "satellite_location_nlb_dns_id")

