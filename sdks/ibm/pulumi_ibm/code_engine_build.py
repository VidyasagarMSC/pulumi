# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CodeEngineBuildArgs', 'CodeEngineBuild']

@pulumi.input_type
class CodeEngineBuildArgs:
    def __init__(__self__, *,
                 output_image: pulumi.Input[_builtins.str],
                 output_secret: pulumi.Input[_builtins.str],
                 project_id: pulumi.Input[_builtins.str],
                 strategy_type: pulumi.Input[_builtins.str],
                 code_engine_build_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 source_context_dir: Optional[pulumi.Input[_builtins.str]] = None,
                 source_revision: Optional[pulumi.Input[_builtins.str]] = None,
                 source_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 source_type: Optional[pulumi.Input[_builtins.str]] = None,
                 source_url: Optional[pulumi.Input[_builtins.str]] = None,
                 strategy_size: Optional[pulumi.Input[_builtins.str]] = None,
                 strategy_spec_file: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a CodeEngineBuild resource.
        :param pulumi.Input[_builtins.str] output_image: The name of the image.
        :param pulumi.Input[_builtins.str] output_secret: The secret that is required to access the image registry. Make sure that the secret is granted with push permissions
               towards the specified container registry namespace.
        :param pulumi.Input[_builtins.str] project_id: The ID of the project.
        :param pulumi.Input[_builtins.str] strategy_type: The strategy to use for building the image.
        :param pulumi.Input[_builtins.str] name: The name of the build.
        :param pulumi.Input[_builtins.str] source_context_dir: Optional directory in the repository that contains the buildpacks file or the Dockerfile.
        :param pulumi.Input[_builtins.str] source_revision: Commit, tag, or branch in the source repository to pull. This field is optional if the `source_type` is `git` and uses
               the HEAD of default branch if not specified. If the `source_type` value is `local`, this field must be omitted.
        :param pulumi.Input[_builtins.str] source_secret: Name of the secret that is used access the repository source. This field is optional if the `source_type` is `git`.
               Additionally, if the `source_url` points to a repository that requires authentication, the build will be created but
               cannot access any source code, until this property is provided, too. If the `source_type` value is `local`, this field
               must be omitted.
        :param pulumi.Input[_builtins.str] source_type: Specifies the type of source to determine if your build source is in a repository or based on local source code.* local
               - For builds from local source code.* git - For builds from git version controlled source code.
        :param pulumi.Input[_builtins.str] source_url: The URL of the code repository. This field is required if the `source_type` is `git`. If the `source_type` value is
               `local`, this field must be omitted. If the repository is publicly available you can provide a 'https' URL like
               `https://github.com/IBM/CodeEngine`. If the repository requires authentication, you need to provide a 'ssh' URL like
               `git@github.com:IBM/CodeEngine.git` along with a `source_secret` that points to a secret of format `ssh_auth`.
        :param pulumi.Input[_builtins.str] strategy_size: Optional size for the build, which determines the amount of resources used. Build sizes are `small`, `medium`, `large`,
               `xlarge`, `xxlarge`.
        :param pulumi.Input[_builtins.str] strategy_spec_file: Optional path to the specification file that is used for build strategies for building an image.
        :param pulumi.Input[_builtins.float] timeout: The maximum amount of time, in seconds, that can pass before the build must succeed or fail.
        """
        pulumi.set(__self__, "output_image", output_image)
        pulumi.set(__self__, "output_secret", output_secret)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "strategy_type", strategy_type)
        if code_engine_build_id is not None:
            pulumi.set(__self__, "code_engine_build_id", code_engine_build_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if source_context_dir is not None:
            pulumi.set(__self__, "source_context_dir", source_context_dir)
        if source_revision is not None:
            pulumi.set(__self__, "source_revision", source_revision)
        if source_secret is not None:
            pulumi.set(__self__, "source_secret", source_secret)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if source_url is not None:
            pulumi.set(__self__, "source_url", source_url)
        if strategy_size is not None:
            pulumi.set(__self__, "strategy_size", strategy_size)
        if strategy_spec_file is not None:
            pulumi.set(__self__, "strategy_spec_file", strategy_spec_file)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @_builtins.property
    @pulumi.getter(name="outputImage")
    def output_image(self) -> pulumi.Input[_builtins.str]:
        """
        The name of the image.
        """
        return pulumi.get(self, "output_image")

    @output_image.setter
    def output_image(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "output_image", value)

    @_builtins.property
    @pulumi.getter(name="outputSecret")
    def output_secret(self) -> pulumi.Input[_builtins.str]:
        """
        The secret that is required to access the image registry. Make sure that the secret is granted with push permissions
        towards the specified container registry namespace.
        """
        return pulumi.get(self, "output_secret")

    @output_secret.setter
    def output_secret(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "output_secret", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the project.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter(name="strategyType")
    def strategy_type(self) -> pulumi.Input[_builtins.str]:
        """
        The strategy to use for building the image.
        """
        return pulumi.get(self, "strategy_type")

    @strategy_type.setter
    def strategy_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "strategy_type", value)

    @_builtins.property
    @pulumi.getter(name="codeEngineBuildId")
    def code_engine_build_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "code_engine_build_id")

    @code_engine_build_id.setter
    def code_engine_build_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "code_engine_build_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the build.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="sourceContextDir")
    def source_context_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional directory in the repository that contains the buildpacks file or the Dockerfile.
        """
        return pulumi.get(self, "source_context_dir")

    @source_context_dir.setter
    def source_context_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_context_dir", value)

    @_builtins.property
    @pulumi.getter(name="sourceRevision")
    def source_revision(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Commit, tag, or branch in the source repository to pull. This field is optional if the `source_type` is `git` and uses
        the HEAD of default branch if not specified. If the `source_type` value is `local`, this field must be omitted.
        """
        return pulumi.get(self, "source_revision")

    @source_revision.setter
    def source_revision(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_revision", value)

    @_builtins.property
    @pulumi.getter(name="sourceSecret")
    def source_secret(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the secret that is used access the repository source. This field is optional if the `source_type` is `git`.
        Additionally, if the `source_url` points to a repository that requires authentication, the build will be created but
        cannot access any source code, until this property is provided, too. If the `source_type` value is `local`, this field
        must be omitted.
        """
        return pulumi.get(self, "source_secret")

    @source_secret.setter
    def source_secret(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_secret", value)

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of source to determine if your build source is in a repository or based on local source code.* local
        - For builds from local source code.* git - For builds from git version controlled source code.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_type", value)

    @_builtins.property
    @pulumi.getter(name="sourceUrl")
    def source_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL of the code repository. This field is required if the `source_type` is `git`. If the `source_type` value is
        `local`, this field must be omitted. If the repository is publicly available you can provide a 'https' URL like
        `https://github.com/IBM/CodeEngine`. If the repository requires authentication, you need to provide a 'ssh' URL like
        `git@github.com:IBM/CodeEngine.git` along with a `source_secret` that points to a secret of format `ssh_auth`.
        """
        return pulumi.get(self, "source_url")

    @source_url.setter
    def source_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_url", value)

    @_builtins.property
    @pulumi.getter(name="strategySize")
    def strategy_size(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional size for the build, which determines the amount of resources used. Build sizes are `small`, `medium`, `large`,
        `xlarge`, `xxlarge`.
        """
        return pulumi.get(self, "strategy_size")

    @strategy_size.setter
    def strategy_size(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "strategy_size", value)

    @_builtins.property
    @pulumi.getter(name="strategySpecFile")
    def strategy_spec_file(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional path to the specification file that is used for build strategies for building an image.
        """
        return pulumi.get(self, "strategy_spec_file")

    @strategy_spec_file.setter
    def strategy_spec_file(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "strategy_spec_file", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The maximum amount of time, in seconds, that can pass before the build must succeed or fail.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class _CodeEngineBuildState:
    def __init__(__self__, *,
                 build_id: Optional[pulumi.Input[_builtins.str]] = None,
                 code_engine_build_id: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 entity_tag: Optional[pulumi.Input[_builtins.str]] = None,
                 etag: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 output_image: Optional[pulumi.Input[_builtins.str]] = None,
                 output_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 source_context_dir: Optional[pulumi.Input[_builtins.str]] = None,
                 source_revision: Optional[pulumi.Input[_builtins.str]] = None,
                 source_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 source_type: Optional[pulumi.Input[_builtins.str]] = None,
                 source_url: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 status_details: Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineBuildStatusDetailArgs']]]] = None,
                 strategy_size: Optional[pulumi.Input[_builtins.str]] = None,
                 strategy_spec_file: Optional[pulumi.Input[_builtins.str]] = None,
                 strategy_type: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering CodeEngineBuild resources.
        :param pulumi.Input[_builtins.str] build_id: The identifier of the resource.
        :param pulumi.Input[_builtins.str] created_at: The timestamp when the resource was created.
        :param pulumi.Input[_builtins.str] entity_tag: The version of the build instance, which is used to achieve optimistic locking.
        :param pulumi.Input[_builtins.str] href: When you provision a new build, a URL is created identifying the location of the instance.
        :param pulumi.Input[_builtins.str] name: The name of the build.
        :param pulumi.Input[_builtins.str] output_image: The name of the image.
        :param pulumi.Input[_builtins.str] output_secret: The secret that is required to access the image registry. Make sure that the secret is granted with push permissions
               towards the specified container registry namespace.
        :param pulumi.Input[_builtins.str] project_id: The ID of the project.
        :param pulumi.Input[_builtins.str] region: The region of the project the resource is located in. Possible values: 'au-syd', 'br-sao', 'ca-tor', 'eu-de', 'eu-gb',
               'jp-osa', 'jp-tok', 'us-east', 'us-south'.
        :param pulumi.Input[_builtins.str] resource_type: The type of the build.
        :param pulumi.Input[_builtins.str] source_context_dir: Optional directory in the repository that contains the buildpacks file or the Dockerfile.
        :param pulumi.Input[_builtins.str] source_revision: Commit, tag, or branch in the source repository to pull. This field is optional if the `source_type` is `git` and uses
               the HEAD of default branch if not specified. If the `source_type` value is `local`, this field must be omitted.
        :param pulumi.Input[_builtins.str] source_secret: Name of the secret that is used access the repository source. This field is optional if the `source_type` is `git`.
               Additionally, if the `source_url` points to a repository that requires authentication, the build will be created but
               cannot access any source code, until this property is provided, too. If the `source_type` value is `local`, this field
               must be omitted.
        :param pulumi.Input[_builtins.str] source_type: Specifies the type of source to determine if your build source is in a repository or based on local source code.* local
               - For builds from local source code.* git - For builds from git version controlled source code.
        :param pulumi.Input[_builtins.str] source_url: The URL of the code repository. This field is required if the `source_type` is `git`. If the `source_type` value is
               `local`, this field must be omitted. If the repository is publicly available you can provide a 'https' URL like
               `https://github.com/IBM/CodeEngine`. If the repository requires authentication, you need to provide a 'ssh' URL like
               `git@github.com:IBM/CodeEngine.git` along with a `source_secret` that points to a secret of format `ssh_auth`.
        :param pulumi.Input[_builtins.str] status: The current status of the build.
        :param pulumi.Input[Sequence[pulumi.Input['CodeEngineBuildStatusDetailArgs']]] status_details: The detailed status of the build.
        :param pulumi.Input[_builtins.str] strategy_size: Optional size for the build, which determines the amount of resources used. Build sizes are `small`, `medium`, `large`,
               `xlarge`, `xxlarge`.
        :param pulumi.Input[_builtins.str] strategy_spec_file: Optional path to the specification file that is used for build strategies for building an image.
        :param pulumi.Input[_builtins.str] strategy_type: The strategy to use for building the image.
        :param pulumi.Input[_builtins.float] timeout: The maximum amount of time, in seconds, that can pass before the build must succeed or fail.
        """
        if build_id is not None:
            pulumi.set(__self__, "build_id", build_id)
        if code_engine_build_id is not None:
            pulumi.set(__self__, "code_engine_build_id", code_engine_build_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if entity_tag is not None:
            pulumi.set(__self__, "entity_tag", entity_tag)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if output_image is not None:
            pulumi.set(__self__, "output_image", output_image)
        if output_secret is not None:
            pulumi.set(__self__, "output_secret", output_secret)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if source_context_dir is not None:
            pulumi.set(__self__, "source_context_dir", source_context_dir)
        if source_revision is not None:
            pulumi.set(__self__, "source_revision", source_revision)
        if source_secret is not None:
            pulumi.set(__self__, "source_secret", source_secret)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if source_url is not None:
            pulumi.set(__self__, "source_url", source_url)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_details is not None:
            pulumi.set(__self__, "status_details", status_details)
        if strategy_size is not None:
            pulumi.set(__self__, "strategy_size", strategy_size)
        if strategy_spec_file is not None:
            pulumi.set(__self__, "strategy_spec_file", strategy_spec_file)
        if strategy_type is not None:
            pulumi.set(__self__, "strategy_type", strategy_type)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @_builtins.property
    @pulumi.getter(name="buildId")
    def build_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The identifier of the resource.
        """
        return pulumi.get(self, "build_id")

    @build_id.setter
    def build_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "build_id", value)

    @_builtins.property
    @pulumi.getter(name="codeEngineBuildId")
    def code_engine_build_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "code_engine_build_id")

    @code_engine_build_id.setter
    def code_engine_build_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "code_engine_build_id", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The timestamp when the resource was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="entityTag")
    def entity_tag(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The version of the build instance, which is used to achieve optimistic locking.
        """
        return pulumi.get(self, "entity_tag")

    @entity_tag.setter
    def entity_tag(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entity_tag", value)

    @_builtins.property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "etag", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        When you provision a new build, a URL is created identifying the location of the instance.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the build.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="outputImage")
    def output_image(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the image.
        """
        return pulumi.get(self, "output_image")

    @output_image.setter
    def output_image(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "output_image", value)

    @_builtins.property
    @pulumi.getter(name="outputSecret")
    def output_secret(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The secret that is required to access the image registry. Make sure that the secret is granted with push permissions
        towards the specified container registry namespace.
        """
        return pulumi.get(self, "output_secret")

    @output_secret.setter
    def output_secret(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "output_secret", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the project.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the project the resource is located in. Possible values: 'au-syd', 'br-sao', 'ca-tor', 'eu-de', 'eu-gb',
        'jp-osa', 'jp-tok', 'us-east', 'us-south'.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the build.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter(name="sourceContextDir")
    def source_context_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional directory in the repository that contains the buildpacks file or the Dockerfile.
        """
        return pulumi.get(self, "source_context_dir")

    @source_context_dir.setter
    def source_context_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_context_dir", value)

    @_builtins.property
    @pulumi.getter(name="sourceRevision")
    def source_revision(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Commit, tag, or branch in the source repository to pull. This field is optional if the `source_type` is `git` and uses
        the HEAD of default branch if not specified. If the `source_type` value is `local`, this field must be omitted.
        """
        return pulumi.get(self, "source_revision")

    @source_revision.setter
    def source_revision(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_revision", value)

    @_builtins.property
    @pulumi.getter(name="sourceSecret")
    def source_secret(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the secret that is used access the repository source. This field is optional if the `source_type` is `git`.
        Additionally, if the `source_url` points to a repository that requires authentication, the build will be created but
        cannot access any source code, until this property is provided, too. If the `source_type` value is `local`, this field
        must be omitted.
        """
        return pulumi.get(self, "source_secret")

    @source_secret.setter
    def source_secret(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_secret", value)

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the type of source to determine if your build source is in a repository or based on local source code.* local
        - For builds from local source code.* git - For builds from git version controlled source code.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_type", value)

    @_builtins.property
    @pulumi.getter(name="sourceUrl")
    def source_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL of the code repository. This field is required if the `source_type` is `git`. If the `source_type` value is
        `local`, this field must be omitted. If the repository is publicly available you can provide a 'https' URL like
        `https://github.com/IBM/CodeEngine`. If the repository requires authentication, you need to provide a 'ssh' URL like
        `git@github.com:IBM/CodeEngine.git` along with a `source_secret` that points to a secret of format `ssh_auth`.
        """
        return pulumi.get(self, "source_url")

    @source_url.setter
    def source_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_url", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The current status of the build.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineBuildStatusDetailArgs']]]]:
        """
        The detailed status of the build.
        """
        return pulumi.get(self, "status_details")

    @status_details.setter
    def status_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineBuildStatusDetailArgs']]]]):
        pulumi.set(self, "status_details", value)

    @_builtins.property
    @pulumi.getter(name="strategySize")
    def strategy_size(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional size for the build, which determines the amount of resources used. Build sizes are `small`, `medium`, `large`,
        `xlarge`, `xxlarge`.
        """
        return pulumi.get(self, "strategy_size")

    @strategy_size.setter
    def strategy_size(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "strategy_size", value)

    @_builtins.property
    @pulumi.getter(name="strategySpecFile")
    def strategy_spec_file(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional path to the specification file that is used for build strategies for building an image.
        """
        return pulumi.get(self, "strategy_spec_file")

    @strategy_spec_file.setter
    def strategy_spec_file(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "strategy_spec_file", value)

    @_builtins.property
    @pulumi.getter(name="strategyType")
    def strategy_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The strategy to use for building the image.
        """
        return pulumi.get(self, "strategy_type")

    @strategy_type.setter
    def strategy_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "strategy_type", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The maximum amount of time, in seconds, that can pass before the build must succeed or fail.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "timeout", value)


@pulumi.type_token("ibm:index/codeEngineBuild:CodeEngineBuild")
class CodeEngineBuild(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 code_engine_build_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 output_image: Optional[pulumi.Input[_builtins.str]] = None,
                 output_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_context_dir: Optional[pulumi.Input[_builtins.str]] = None,
                 source_revision: Optional[pulumi.Input[_builtins.str]] = None,
                 source_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 source_type: Optional[pulumi.Input[_builtins.str]] = None,
                 source_url: Optional[pulumi.Input[_builtins.str]] = None,
                 strategy_size: Optional[pulumi.Input[_builtins.str]] = None,
                 strategy_spec_file: Optional[pulumi.Input[_builtins.str]] = None,
                 strategy_type: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a CodeEngineBuild resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: The name of the build.
        :param pulumi.Input[_builtins.str] output_image: The name of the image.
        :param pulumi.Input[_builtins.str] output_secret: The secret that is required to access the image registry. Make sure that the secret is granted with push permissions
               towards the specified container registry namespace.
        :param pulumi.Input[_builtins.str] project_id: The ID of the project.
        :param pulumi.Input[_builtins.str] source_context_dir: Optional directory in the repository that contains the buildpacks file or the Dockerfile.
        :param pulumi.Input[_builtins.str] source_revision: Commit, tag, or branch in the source repository to pull. This field is optional if the `source_type` is `git` and uses
               the HEAD of default branch if not specified. If the `source_type` value is `local`, this field must be omitted.
        :param pulumi.Input[_builtins.str] source_secret: Name of the secret that is used access the repository source. This field is optional if the `source_type` is `git`.
               Additionally, if the `source_url` points to a repository that requires authentication, the build will be created but
               cannot access any source code, until this property is provided, too. If the `source_type` value is `local`, this field
               must be omitted.
        :param pulumi.Input[_builtins.str] source_type: Specifies the type of source to determine if your build source is in a repository or based on local source code.* local
               - For builds from local source code.* git - For builds from git version controlled source code.
        :param pulumi.Input[_builtins.str] source_url: The URL of the code repository. This field is required if the `source_type` is `git`. If the `source_type` value is
               `local`, this field must be omitted. If the repository is publicly available you can provide a 'https' URL like
               `https://github.com/IBM/CodeEngine`. If the repository requires authentication, you need to provide a 'ssh' URL like
               `git@github.com:IBM/CodeEngine.git` along with a `source_secret` that points to a secret of format `ssh_auth`.
        :param pulumi.Input[_builtins.str] strategy_size: Optional size for the build, which determines the amount of resources used. Build sizes are `small`, `medium`, `large`,
               `xlarge`, `xxlarge`.
        :param pulumi.Input[_builtins.str] strategy_spec_file: Optional path to the specification file that is used for build strategies for building an image.
        :param pulumi.Input[_builtins.str] strategy_type: The strategy to use for building the image.
        :param pulumi.Input[_builtins.float] timeout: The maximum amount of time, in seconds, that can pass before the build must succeed or fail.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CodeEngineBuildArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CodeEngineBuild resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CodeEngineBuildArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CodeEngineBuildArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 code_engine_build_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 output_image: Optional[pulumi.Input[_builtins.str]] = None,
                 output_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_context_dir: Optional[pulumi.Input[_builtins.str]] = None,
                 source_revision: Optional[pulumi.Input[_builtins.str]] = None,
                 source_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 source_type: Optional[pulumi.Input[_builtins.str]] = None,
                 source_url: Optional[pulumi.Input[_builtins.str]] = None,
                 strategy_size: Optional[pulumi.Input[_builtins.str]] = None,
                 strategy_spec_file: Optional[pulumi.Input[_builtins.str]] = None,
                 strategy_type: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CodeEngineBuildArgs.__new__(CodeEngineBuildArgs)

            __props__.__dict__["code_engine_build_id"] = code_engine_build_id
            __props__.__dict__["name"] = name
            if output_image is None and not opts.urn:
                raise TypeError("Missing required property 'output_image'")
            __props__.__dict__["output_image"] = output_image
            if output_secret is None and not opts.urn:
                raise TypeError("Missing required property 'output_secret'")
            __props__.__dict__["output_secret"] = output_secret
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["source_context_dir"] = source_context_dir
            __props__.__dict__["source_revision"] = source_revision
            __props__.__dict__["source_secret"] = source_secret
            __props__.__dict__["source_type"] = source_type
            __props__.__dict__["source_url"] = source_url
            __props__.__dict__["strategy_size"] = strategy_size
            __props__.__dict__["strategy_spec_file"] = strategy_spec_file
            if strategy_type is None and not opts.urn:
                raise TypeError("Missing required property 'strategy_type'")
            __props__.__dict__["strategy_type"] = strategy_type
            __props__.__dict__["timeout"] = timeout
            __props__.__dict__["build_id"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["entity_tag"] = None
            __props__.__dict__["etag"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["region"] = None
            __props__.__dict__["resource_type"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["status_details"] = None
        super(CodeEngineBuild, __self__).__init__(
            'ibm:index/codeEngineBuild:CodeEngineBuild',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            build_id: Optional[pulumi.Input[_builtins.str]] = None,
            code_engine_build_id: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            entity_tag: Optional[pulumi.Input[_builtins.str]] = None,
            etag: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            output_image: Optional[pulumi.Input[_builtins.str]] = None,
            output_secret: Optional[pulumi.Input[_builtins.str]] = None,
            project_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            source_context_dir: Optional[pulumi.Input[_builtins.str]] = None,
            source_revision: Optional[pulumi.Input[_builtins.str]] = None,
            source_secret: Optional[pulumi.Input[_builtins.str]] = None,
            source_type: Optional[pulumi.Input[_builtins.str]] = None,
            source_url: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            status_details: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineBuildStatusDetailArgs', 'CodeEngineBuildStatusDetailArgsDict']]]]] = None,
            strategy_size: Optional[pulumi.Input[_builtins.str]] = None,
            strategy_spec_file: Optional[pulumi.Input[_builtins.str]] = None,
            strategy_type: Optional[pulumi.Input[_builtins.str]] = None,
            timeout: Optional[pulumi.Input[_builtins.float]] = None) -> 'CodeEngineBuild':
        """
        Get an existing CodeEngineBuild resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] build_id: The identifier of the resource.
        :param pulumi.Input[_builtins.str] created_at: The timestamp when the resource was created.
        :param pulumi.Input[_builtins.str] entity_tag: The version of the build instance, which is used to achieve optimistic locking.
        :param pulumi.Input[_builtins.str] href: When you provision a new build, a URL is created identifying the location of the instance.
        :param pulumi.Input[_builtins.str] name: The name of the build.
        :param pulumi.Input[_builtins.str] output_image: The name of the image.
        :param pulumi.Input[_builtins.str] output_secret: The secret that is required to access the image registry. Make sure that the secret is granted with push permissions
               towards the specified container registry namespace.
        :param pulumi.Input[_builtins.str] project_id: The ID of the project.
        :param pulumi.Input[_builtins.str] region: The region of the project the resource is located in. Possible values: 'au-syd', 'br-sao', 'ca-tor', 'eu-de', 'eu-gb',
               'jp-osa', 'jp-tok', 'us-east', 'us-south'.
        :param pulumi.Input[_builtins.str] resource_type: The type of the build.
        :param pulumi.Input[_builtins.str] source_context_dir: Optional directory in the repository that contains the buildpacks file or the Dockerfile.
        :param pulumi.Input[_builtins.str] source_revision: Commit, tag, or branch in the source repository to pull. This field is optional if the `source_type` is `git` and uses
               the HEAD of default branch if not specified. If the `source_type` value is `local`, this field must be omitted.
        :param pulumi.Input[_builtins.str] source_secret: Name of the secret that is used access the repository source. This field is optional if the `source_type` is `git`.
               Additionally, if the `source_url` points to a repository that requires authentication, the build will be created but
               cannot access any source code, until this property is provided, too. If the `source_type` value is `local`, this field
               must be omitted.
        :param pulumi.Input[_builtins.str] source_type: Specifies the type of source to determine if your build source is in a repository or based on local source code.* local
               - For builds from local source code.* git - For builds from git version controlled source code.
        :param pulumi.Input[_builtins.str] source_url: The URL of the code repository. This field is required if the `source_type` is `git`. If the `source_type` value is
               `local`, this field must be omitted. If the repository is publicly available you can provide a 'https' URL like
               `https://github.com/IBM/CodeEngine`. If the repository requires authentication, you need to provide a 'ssh' URL like
               `git@github.com:IBM/CodeEngine.git` along with a `source_secret` that points to a secret of format `ssh_auth`.
        :param pulumi.Input[_builtins.str] status: The current status of the build.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineBuildStatusDetailArgs', 'CodeEngineBuildStatusDetailArgsDict']]]] status_details: The detailed status of the build.
        :param pulumi.Input[_builtins.str] strategy_size: Optional size for the build, which determines the amount of resources used. Build sizes are `small`, `medium`, `large`,
               `xlarge`, `xxlarge`.
        :param pulumi.Input[_builtins.str] strategy_spec_file: Optional path to the specification file that is used for build strategies for building an image.
        :param pulumi.Input[_builtins.str] strategy_type: The strategy to use for building the image.
        :param pulumi.Input[_builtins.float] timeout: The maximum amount of time, in seconds, that can pass before the build must succeed or fail.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CodeEngineBuildState.__new__(_CodeEngineBuildState)

        __props__.__dict__["build_id"] = build_id
        __props__.__dict__["code_engine_build_id"] = code_engine_build_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["entity_tag"] = entity_tag
        __props__.__dict__["etag"] = etag
        __props__.__dict__["href"] = href
        __props__.__dict__["name"] = name
        __props__.__dict__["output_image"] = output_image
        __props__.__dict__["output_secret"] = output_secret
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["source_context_dir"] = source_context_dir
        __props__.__dict__["source_revision"] = source_revision
        __props__.__dict__["source_secret"] = source_secret
        __props__.__dict__["source_type"] = source_type
        __props__.__dict__["source_url"] = source_url
        __props__.__dict__["status"] = status
        __props__.__dict__["status_details"] = status_details
        __props__.__dict__["strategy_size"] = strategy_size
        __props__.__dict__["strategy_spec_file"] = strategy_spec_file
        __props__.__dict__["strategy_type"] = strategy_type
        __props__.__dict__["timeout"] = timeout
        return CodeEngineBuild(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="buildId")
    def build_id(self) -> pulumi.Output[_builtins.str]:
        """
        The identifier of the resource.
        """
        return pulumi.get(self, "build_id")

    @_builtins.property
    @pulumi.getter(name="codeEngineBuildId")
    def code_engine_build_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "code_engine_build_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The timestamp when the resource was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="entityTag")
    def entity_tag(self) -> pulumi.Output[_builtins.str]:
        """
        The version of the build instance, which is used to achieve optimistic locking.
        """
        return pulumi.get(self, "entity_tag")

    @_builtins.property
    @pulumi.getter
    def etag(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "etag")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        When you provision a new build, a URL is created identifying the location of the instance.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the build.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="outputImage")
    def output_image(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the image.
        """
        return pulumi.get(self, "output_image")

    @_builtins.property
    @pulumi.getter(name="outputSecret")
    def output_secret(self) -> pulumi.Output[_builtins.str]:
        """
        The secret that is required to access the image registry. Make sure that the secret is granted with push permissions
        towards the specified container registry namespace.
        """
        return pulumi.get(self, "output_secret")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the project.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region of the project the resource is located in. Possible values: 'au-syd', 'br-sao', 'ca-tor', 'eu-de', 'eu-gb',
        'jp-osa', 'jp-tok', 'us-east', 'us-south'.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of the build.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="sourceContextDir")
    def source_context_dir(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Optional directory in the repository that contains the buildpacks file or the Dockerfile.
        """
        return pulumi.get(self, "source_context_dir")

    @_builtins.property
    @pulumi.getter(name="sourceRevision")
    def source_revision(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Commit, tag, or branch in the source repository to pull. This field is optional if the `source_type` is `git` and uses
        the HEAD of default branch if not specified. If the `source_type` value is `local`, this field must be omitted.
        """
        return pulumi.get(self, "source_revision")

    @_builtins.property
    @pulumi.getter(name="sourceSecret")
    def source_secret(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Name of the secret that is used access the repository source. This field is optional if the `source_type` is `git`.
        Additionally, if the `source_url` points to a repository that requires authentication, the build will be created but
        cannot access any source code, until this property is provided, too. If the `source_type` value is `local`, this field
        must be omitted.
        """
        return pulumi.get(self, "source_secret")

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the type of source to determine if your build source is in a repository or based on local source code.* local
        - For builds from local source code.* git - For builds from git version controlled source code.
        """
        return pulumi.get(self, "source_type")

    @_builtins.property
    @pulumi.getter(name="sourceUrl")
    def source_url(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The URL of the code repository. This field is required if the `source_type` is `git`. If the `source_type` value is
        `local`, this field must be omitted. If the repository is publicly available you can provide a 'https' URL like
        `https://github.com/IBM/CodeEngine`. If the repository requires authentication, you need to provide a 'ssh' URL like
        `git@github.com:IBM/CodeEngine.git` along with a `source_secret` that points to a secret of format `ssh_auth`.
        """
        return pulumi.get(self, "source_url")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The current status of the build.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> pulumi.Output[Sequence['outputs.CodeEngineBuildStatusDetail']]:
        """
        The detailed status of the build.
        """
        return pulumi.get(self, "status_details")

    @_builtins.property
    @pulumi.getter(name="strategySize")
    def strategy_size(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Optional size for the build, which determines the amount of resources used. Build sizes are `small`, `medium`, `large`,
        `xlarge`, `xxlarge`.
        """
        return pulumi.get(self, "strategy_size")

    @_builtins.property
    @pulumi.getter(name="strategySpecFile")
    def strategy_spec_file(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Optional path to the specification file that is used for build strategies for building an image.
        """
        return pulumi.get(self, "strategy_spec_file")

    @_builtins.property
    @pulumi.getter(name="strategyType")
    def strategy_type(self) -> pulumi.Output[_builtins.str]:
        """
        The strategy to use for building the image.
        """
        return pulumi.get(self, "strategy_type")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        The maximum amount of time, in seconds, that can pass before the build must succeed or fail.
        """
        return pulumi.get(self, "timeout")

