# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetBackupRecoveryDownloadFilesResult',
    'AwaitableGetBackupRecoveryDownloadFilesResult',
    'get_backup_recovery_download_files',
    'get_backup_recovery_download_files_output',
]

@pulumi.output_type
class GetBackupRecoveryDownloadFilesResult:
    """
    A collection of values returned by getBackupRecoveryDownloadFiles.
    """
    def __init__(__self__, file_type=None, id=None, include_tenants=None, length=None, recovery_download_files_id=None, source_name=None, start_offset=None, start_time=None, x_ibm_tenant_id=None):
        if file_type and not isinstance(file_type, str):
            raise TypeError("Expected argument 'file_type' to be a str")
        pulumi.set(__self__, "file_type", file_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if include_tenants and not isinstance(include_tenants, bool):
            raise TypeError("Expected argument 'include_tenants' to be a bool")
        pulumi.set(__self__, "include_tenants", include_tenants)
        if length and not isinstance(length, float):
            raise TypeError("Expected argument 'length' to be a float")
        pulumi.set(__self__, "length", length)
        if recovery_download_files_id and not isinstance(recovery_download_files_id, str):
            raise TypeError("Expected argument 'recovery_download_files_id' to be a str")
        pulumi.set(__self__, "recovery_download_files_id", recovery_download_files_id)
        if source_name and not isinstance(source_name, str):
            raise TypeError("Expected argument 'source_name' to be a str")
        pulumi.set(__self__, "source_name", source_name)
        if start_offset and not isinstance(start_offset, float):
            raise TypeError("Expected argument 'start_offset' to be a float")
        pulumi.set(__self__, "start_offset", start_offset)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if x_ibm_tenant_id and not isinstance(x_ibm_tenant_id, str):
            raise TypeError("Expected argument 'x_ibm_tenant_id' to be a str")
        pulumi.set(__self__, "x_ibm_tenant_id", x_ibm_tenant_id)

    @_builtins.property
    @pulumi.getter(name="fileType")
    def file_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "file_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="includeTenants")
    def include_tenants(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "include_tenants")

    @_builtins.property
    @pulumi.getter
    def length(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "length")

    @_builtins.property
    @pulumi.getter(name="recoveryDownloadFilesId")
    def recovery_download_files_id(self) -> _builtins.str:
        return pulumi.get(self, "recovery_download_files_id")

    @_builtins.property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "source_name")

    @_builtins.property
    @pulumi.getter(name="startOffset")
    def start_offset(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "start_offset")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> _builtins.str:
        return pulumi.get(self, "x_ibm_tenant_id")


class AwaitableGetBackupRecoveryDownloadFilesResult(GetBackupRecoveryDownloadFilesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupRecoveryDownloadFilesResult(
            file_type=self.file_type,
            id=self.id,
            include_tenants=self.include_tenants,
            length=self.length,
            recovery_download_files_id=self.recovery_download_files_id,
            source_name=self.source_name,
            start_offset=self.start_offset,
            start_time=self.start_time,
            x_ibm_tenant_id=self.x_ibm_tenant_id)


def get_backup_recovery_download_files(file_type: Optional[_builtins.str] = None,
                                       id: Optional[_builtins.str] = None,
                                       include_tenants: Optional[_builtins.bool] = None,
                                       length: Optional[_builtins.float] = None,
                                       recovery_download_files_id: Optional[_builtins.str] = None,
                                       source_name: Optional[_builtins.str] = None,
                                       start_offset: Optional[_builtins.float] = None,
                                       start_time: Optional[_builtins.str] = None,
                                       x_ibm_tenant_id: Optional[_builtins.str] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupRecoveryDownloadFilesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['fileType'] = file_type
    __args__['id'] = id
    __args__['includeTenants'] = include_tenants
    __args__['length'] = length
    __args__['recoveryDownloadFilesId'] = recovery_download_files_id
    __args__['sourceName'] = source_name
    __args__['startOffset'] = start_offset
    __args__['startTime'] = start_time
    __args__['xIbmTenantId'] = x_ibm_tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getBackupRecoveryDownloadFiles:getBackupRecoveryDownloadFiles', __args__, opts=opts, typ=GetBackupRecoveryDownloadFilesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetBackupRecoveryDownloadFilesResult(
        file_type=pulumi.get(__ret__, 'file_type'),
        id=pulumi.get(__ret__, 'id'),
        include_tenants=pulumi.get(__ret__, 'include_tenants'),
        length=pulumi.get(__ret__, 'length'),
        recovery_download_files_id=pulumi.get(__ret__, 'recovery_download_files_id'),
        source_name=pulumi.get(__ret__, 'source_name'),
        start_offset=pulumi.get(__ret__, 'start_offset'),
        start_time=pulumi.get(__ret__, 'start_time'),
        x_ibm_tenant_id=pulumi.get(__ret__, 'x_ibm_tenant_id'))
def get_backup_recovery_download_files_output(file_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              include_tenants: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                              length: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                                              recovery_download_files_id: Optional[pulumi.Input[_builtins.str]] = None,
                                              source_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              start_offset: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                                              start_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBackupRecoveryDownloadFilesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['fileType'] = file_type
    __args__['id'] = id
    __args__['includeTenants'] = include_tenants
    __args__['length'] = length
    __args__['recoveryDownloadFilesId'] = recovery_download_files_id
    __args__['sourceName'] = source_name
    __args__['startOffset'] = start_offset
    __args__['startTime'] = start_time
    __args__['xIbmTenantId'] = x_ibm_tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getBackupRecoveryDownloadFiles:getBackupRecoveryDownloadFiles', __args__, opts=opts, typ=GetBackupRecoveryDownloadFilesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetBackupRecoveryDownloadFilesResult(
        file_type=pulumi.get(__response__, 'file_type'),
        id=pulumi.get(__response__, 'id'),
        include_tenants=pulumi.get(__response__, 'include_tenants'),
        length=pulumi.get(__response__, 'length'),
        recovery_download_files_id=pulumi.get(__response__, 'recovery_download_files_id'),
        source_name=pulumi.get(__response__, 'source_name'),
        start_offset=pulumi.get(__response__, 'start_offset'),
        start_time=pulumi.get(__response__, 'start_time'),
        x_ibm_tenant_id=pulumi.get(__response__, 'x_ibm_tenant_id')))
