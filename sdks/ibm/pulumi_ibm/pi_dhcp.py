# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PiDhcpArgs', 'PiDhcp']

@pulumi.input_type
class PiDhcpArgs:
    def __init__(__self__, *,
                 pi_cloud_instance_id: pulumi.Input[_builtins.str],
                 pi_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_dhcp_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_dhcp_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_dhcp_snat_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_dns_server: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['PiDhcpTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a PiDhcp resource.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: PI cloud instance ID
        :param pulumi.Input[_builtins.str] pi_cidr: Optional cidr for DHCP private network
        :param pulumi.Input[_builtins.str] pi_cloud_connection_id: Optional cloud connection uuid to connect with DHCP private network
        :param pulumi.Input[_builtins.str] pi_dhcp_name: Optional name of DHCP Service (will be prefixed by DHCP identifier)
        :param pulumi.Input[_builtins.bool] pi_dhcp_snat_enabled: Indicates if SNAT will be enabled for the DHCP service
        :param pulumi.Input[_builtins.str] pi_dns_server: Optional DNS Server for DHCP service
        """
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_cidr is not None:
            pulumi.set(__self__, "pi_cidr", pi_cidr)
        if pi_cloud_connection_id is not None:
            pulumi.set(__self__, "pi_cloud_connection_id", pi_cloud_connection_id)
        if pi_dhcp_id is not None:
            pulumi.set(__self__, "pi_dhcp_id", pi_dhcp_id)
        if pi_dhcp_name is not None:
            pulumi.set(__self__, "pi_dhcp_name", pi_dhcp_name)
        if pi_dhcp_snat_enabled is not None:
            pulumi.set(__self__, "pi_dhcp_snat_enabled", pi_dhcp_snat_enabled)
        if pi_dns_server is not None:
            pulumi.set(__self__, "pi_dns_server", pi_dns_server)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        PI cloud instance ID
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piCidr")
    def pi_cidr(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional cidr for DHCP private network
        """
        return pulumi.get(self, "pi_cidr")

    @pi_cidr.setter
    def pi_cidr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_cidr", value)

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionId")
    def pi_cloud_connection_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional cloud connection uuid to connect with DHCP private network
        """
        return pulumi.get(self, "pi_cloud_connection_id")

    @pi_cloud_connection_id.setter
    def pi_cloud_connection_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_cloud_connection_id", value)

    @_builtins.property
    @pulumi.getter(name="piDhcpId")
    def pi_dhcp_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_dhcp_id")

    @pi_dhcp_id.setter
    def pi_dhcp_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_dhcp_id", value)

    @_builtins.property
    @pulumi.getter(name="piDhcpName")
    def pi_dhcp_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional name of DHCP Service (will be prefixed by DHCP identifier)
        """
        return pulumi.get(self, "pi_dhcp_name")

    @pi_dhcp_name.setter
    def pi_dhcp_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_dhcp_name", value)

    @_builtins.property
    @pulumi.getter(name="piDhcpSnatEnabled")
    def pi_dhcp_snat_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if SNAT will be enabled for the DHCP service
        """
        return pulumi.get(self, "pi_dhcp_snat_enabled")

    @pi_dhcp_snat_enabled.setter
    def pi_dhcp_snat_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pi_dhcp_snat_enabled", value)

    @_builtins.property
    @pulumi.getter(name="piDnsServer")
    def pi_dns_server(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional DNS Server for DHCP service
        """
        return pulumi.get(self, "pi_dns_server")

    @pi_dns_server.setter
    def pi_dns_server(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_dns_server", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiDhcpTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiDhcpTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _PiDhcpState:
    def __init__(__self__, *,
                 dhcp_id: Optional[pulumi.Input[_builtins.str]] = None,
                 leases: Optional[pulumi.Input[Sequence[pulumi.Input['PiDhcpLeaseArgs']]]] = None,
                 network_id: Optional[pulumi.Input[_builtins.str]] = None,
                 network_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_dhcp_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_dhcp_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_dhcp_snat_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_dns_server: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['PiDhcpTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering PiDhcp resources.
        :param pulumi.Input[_builtins.str] dhcp_id: The ID of the DHCP Server
        :param pulumi.Input[Sequence[pulumi.Input['PiDhcpLeaseArgs']]] leases: The list of DHCP Server PVM Instance leases
        :param pulumi.Input[_builtins.str] network_id: The ID of the DHCP Server private network
        :param pulumi.Input[_builtins.str] network_name: The name of the DHCP Server private network
        :param pulumi.Input[_builtins.str] pi_cidr: Optional cidr for DHCP private network
        :param pulumi.Input[_builtins.str] pi_cloud_connection_id: Optional cloud connection uuid to connect with DHCP private network
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: PI cloud instance ID
        :param pulumi.Input[_builtins.str] pi_dhcp_name: Optional name of DHCP Service (will be prefixed by DHCP identifier)
        :param pulumi.Input[_builtins.bool] pi_dhcp_snat_enabled: Indicates if SNAT will be enabled for the DHCP service
        :param pulumi.Input[_builtins.str] pi_dns_server: Optional DNS Server for DHCP service
        :param pulumi.Input[_builtins.str] status: The status of the DHCP Server
        """
        if dhcp_id is not None:
            pulumi.set(__self__, "dhcp_id", dhcp_id)
        if leases is not None:
            pulumi.set(__self__, "leases", leases)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if network_name is not None:
            pulumi.set(__self__, "network_name", network_name)
        if pi_cidr is not None:
            pulumi.set(__self__, "pi_cidr", pi_cidr)
        if pi_cloud_connection_id is not None:
            pulumi.set(__self__, "pi_cloud_connection_id", pi_cloud_connection_id)
        if pi_cloud_instance_id is not None:
            pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_dhcp_id is not None:
            pulumi.set(__self__, "pi_dhcp_id", pi_dhcp_id)
        if pi_dhcp_name is not None:
            pulumi.set(__self__, "pi_dhcp_name", pi_dhcp_name)
        if pi_dhcp_snat_enabled is not None:
            pulumi.set(__self__, "pi_dhcp_snat_enabled", pi_dhcp_snat_enabled)
        if pi_dns_server is not None:
            pulumi.set(__self__, "pi_dns_server", pi_dns_server)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="dhcpId")
    def dhcp_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the DHCP Server
        """
        return pulumi.get(self, "dhcp_id")

    @dhcp_id.setter
    def dhcp_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dhcp_id", value)

    @_builtins.property
    @pulumi.getter
    def leases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PiDhcpLeaseArgs']]]]:
        """
        The list of DHCP Server PVM Instance leases
        """
        return pulumi.get(self, "leases")

    @leases.setter
    def leases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PiDhcpLeaseArgs']]]]):
        pulumi.set(self, "leases", value)

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the DHCP Server private network
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_id", value)

    @_builtins.property
    @pulumi.getter(name="networkName")
    def network_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the DHCP Server private network
        """
        return pulumi.get(self, "network_name")

    @network_name.setter
    def network_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_name", value)

    @_builtins.property
    @pulumi.getter(name="piCidr")
    def pi_cidr(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional cidr for DHCP private network
        """
        return pulumi.get(self, "pi_cidr")

    @pi_cidr.setter
    def pi_cidr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_cidr", value)

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionId")
    def pi_cloud_connection_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional cloud connection uuid to connect with DHCP private network
        """
        return pulumi.get(self, "pi_cloud_connection_id")

    @pi_cloud_connection_id.setter
    def pi_cloud_connection_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_cloud_connection_id", value)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        PI cloud instance ID
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piDhcpId")
    def pi_dhcp_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_dhcp_id")

    @pi_dhcp_id.setter
    def pi_dhcp_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_dhcp_id", value)

    @_builtins.property
    @pulumi.getter(name="piDhcpName")
    def pi_dhcp_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional name of DHCP Service (will be prefixed by DHCP identifier)
        """
        return pulumi.get(self, "pi_dhcp_name")

    @pi_dhcp_name.setter
    def pi_dhcp_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_dhcp_name", value)

    @_builtins.property
    @pulumi.getter(name="piDhcpSnatEnabled")
    def pi_dhcp_snat_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if SNAT will be enabled for the DHCP service
        """
        return pulumi.get(self, "pi_dhcp_snat_enabled")

    @pi_dhcp_snat_enabled.setter
    def pi_dhcp_snat_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pi_dhcp_snat_enabled", value)

    @_builtins.property
    @pulumi.getter(name="piDnsServer")
    def pi_dns_server(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional DNS Server for DHCP service
        """
        return pulumi.get(self, "pi_dns_server")

    @pi_dns_server.setter
    def pi_dns_server(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_dns_server", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the DHCP Server
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiDhcpTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiDhcpTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/piDhcp:PiDhcp")
class PiDhcp(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_dhcp_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_dhcp_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_dhcp_snat_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_dns_server: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiDhcpTimeoutsArgs', 'PiDhcpTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a PiDhcp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] pi_cidr: Optional cidr for DHCP private network
        :param pulumi.Input[_builtins.str] pi_cloud_connection_id: Optional cloud connection uuid to connect with DHCP private network
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: PI cloud instance ID
        :param pulumi.Input[_builtins.str] pi_dhcp_name: Optional name of DHCP Service (will be prefixed by DHCP identifier)
        :param pulumi.Input[_builtins.bool] pi_dhcp_snat_enabled: Indicates if SNAT will be enabled for the DHCP service
        :param pulumi.Input[_builtins.str] pi_dns_server: Optional DNS Server for DHCP service
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PiDhcpArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PiDhcp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PiDhcpArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PiDhcpArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_dhcp_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_dhcp_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_dhcp_snat_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_dns_server: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiDhcpTimeoutsArgs', 'PiDhcpTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PiDhcpArgs.__new__(PiDhcpArgs)

            __props__.__dict__["pi_cidr"] = pi_cidr
            __props__.__dict__["pi_cloud_connection_id"] = pi_cloud_connection_id
            if pi_cloud_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'pi_cloud_instance_id'")
            __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
            __props__.__dict__["pi_dhcp_id"] = pi_dhcp_id
            __props__.__dict__["pi_dhcp_name"] = pi_dhcp_name
            __props__.__dict__["pi_dhcp_snat_enabled"] = pi_dhcp_snat_enabled
            __props__.__dict__["pi_dns_server"] = pi_dns_server
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["dhcp_id"] = None
            __props__.__dict__["leases"] = None
            __props__.__dict__["network_id"] = None
            __props__.__dict__["network_name"] = None
            __props__.__dict__["status"] = None
        super(PiDhcp, __self__).__init__(
            'ibm:index/piDhcp:PiDhcp',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dhcp_id: Optional[pulumi.Input[_builtins.str]] = None,
            leases: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PiDhcpLeaseArgs', 'PiDhcpLeaseArgsDict']]]]] = None,
            network_id: Optional[pulumi.Input[_builtins.str]] = None,
            network_name: Optional[pulumi.Input[_builtins.str]] = None,
            pi_cidr: Optional[pulumi.Input[_builtins.str]] = None,
            pi_cloud_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_dhcp_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_dhcp_name: Optional[pulumi.Input[_builtins.str]] = None,
            pi_dhcp_snat_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            pi_dns_server: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['PiDhcpTimeoutsArgs', 'PiDhcpTimeoutsArgsDict']]] = None) -> 'PiDhcp':
        """
        Get an existing PiDhcp resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] dhcp_id: The ID of the DHCP Server
        :param pulumi.Input[Sequence[pulumi.Input[Union['PiDhcpLeaseArgs', 'PiDhcpLeaseArgsDict']]]] leases: The list of DHCP Server PVM Instance leases
        :param pulumi.Input[_builtins.str] network_id: The ID of the DHCP Server private network
        :param pulumi.Input[_builtins.str] network_name: The name of the DHCP Server private network
        :param pulumi.Input[_builtins.str] pi_cidr: Optional cidr for DHCP private network
        :param pulumi.Input[_builtins.str] pi_cloud_connection_id: Optional cloud connection uuid to connect with DHCP private network
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: PI cloud instance ID
        :param pulumi.Input[_builtins.str] pi_dhcp_name: Optional name of DHCP Service (will be prefixed by DHCP identifier)
        :param pulumi.Input[_builtins.bool] pi_dhcp_snat_enabled: Indicates if SNAT will be enabled for the DHCP service
        :param pulumi.Input[_builtins.str] pi_dns_server: Optional DNS Server for DHCP service
        :param pulumi.Input[_builtins.str] status: The status of the DHCP Server
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PiDhcpState.__new__(_PiDhcpState)

        __props__.__dict__["dhcp_id"] = dhcp_id
        __props__.__dict__["leases"] = leases
        __props__.__dict__["network_id"] = network_id
        __props__.__dict__["network_name"] = network_name
        __props__.__dict__["pi_cidr"] = pi_cidr
        __props__.__dict__["pi_cloud_connection_id"] = pi_cloud_connection_id
        __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
        __props__.__dict__["pi_dhcp_id"] = pi_dhcp_id
        __props__.__dict__["pi_dhcp_name"] = pi_dhcp_name
        __props__.__dict__["pi_dhcp_snat_enabled"] = pi_dhcp_snat_enabled
        __props__.__dict__["pi_dns_server"] = pi_dns_server
        __props__.__dict__["status"] = status
        __props__.__dict__["timeouts"] = timeouts
        return PiDhcp(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="dhcpId")
    def dhcp_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the DHCP Server
        """
        return pulumi.get(self, "dhcp_id")

    @_builtins.property
    @pulumi.getter
    def leases(self) -> pulumi.Output[Sequence['outputs.PiDhcpLease']]:
        """
        The list of DHCP Server PVM Instance leases
        """
        return pulumi.get(self, "leases")

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the DHCP Server private network
        """
        return pulumi.get(self, "network_id")

    @_builtins.property
    @pulumi.getter(name="networkName")
    def network_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the DHCP Server private network
        """
        return pulumi.get(self, "network_name")

    @_builtins.property
    @pulumi.getter(name="piCidr")
    def pi_cidr(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Optional cidr for DHCP private network
        """
        return pulumi.get(self, "pi_cidr")

    @_builtins.property
    @pulumi.getter(name="piCloudConnectionId")
    def pi_cloud_connection_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Optional cloud connection uuid to connect with DHCP private network
        """
        return pulumi.get(self, "pi_cloud_connection_id")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        PI cloud instance ID
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piDhcpId")
    def pi_dhcp_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "pi_dhcp_id")

    @_builtins.property
    @pulumi.getter(name="piDhcpName")
    def pi_dhcp_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Optional name of DHCP Service (will be prefixed by DHCP identifier)
        """
        return pulumi.get(self, "pi_dhcp_name")

    @_builtins.property
    @pulumi.getter(name="piDhcpSnatEnabled")
    def pi_dhcp_snat_enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Indicates if SNAT will be enabled for the DHCP service
        """
        return pulumi.get(self, "pi_dhcp_snat_enabled")

    @_builtins.property
    @pulumi.getter(name="piDnsServer")
    def pi_dns_server(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Optional DNS Server for DHCP service
        """
        return pulumi.get(self, "pi_dns_server")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the DHCP Server
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.PiDhcpTimeouts']]:
        return pulumi.get(self, "timeouts")

