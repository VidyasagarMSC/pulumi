# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetCdTektonPipelineTriggerPropertyResult',
    'AwaitableGetCdTektonPipelineTriggerPropertyResult',
    'get_cd_tekton_pipeline_trigger_property',
    'get_cd_tekton_pipeline_trigger_property_output',
]

@pulumi.output_type
class GetCdTektonPipelineTriggerPropertyResult:
    """
    A collection of values returned by getCdTektonPipelineTriggerProperty.
    """
    def __init__(__self__, enums=None, href=None, id=None, locked=None, name=None, path=None, pipeline_id=None, property_name=None, trigger_id=None, type=None, value=None):
        if enums and not isinstance(enums, list):
            raise TypeError("Expected argument 'enums' to be a list")
        pulumi.set(__self__, "enums", enums)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if locked and not isinstance(locked, bool):
            raise TypeError("Expected argument 'locked' to be a bool")
        pulumi.set(__self__, "locked", locked)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if path and not isinstance(path, str):
            raise TypeError("Expected argument 'path' to be a str")
        pulumi.set(__self__, "path", path)
        if pipeline_id and not isinstance(pipeline_id, str):
            raise TypeError("Expected argument 'pipeline_id' to be a str")
        pulumi.set(__self__, "pipeline_id", pipeline_id)
        if property_name and not isinstance(property_name, str):
            raise TypeError("Expected argument 'property_name' to be a str")
        pulumi.set(__self__, "property_name", property_name)
        if trigger_id and not isinstance(trigger_id, str):
            raise TypeError("Expected argument 'trigger_id' to be a str")
        pulumi.set(__self__, "trigger_id", trigger_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if value and not isinstance(value, str):
            raise TypeError("Expected argument 'value' to be a str")
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def enums(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "enums")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def locked(self) -> _builtins.bool:
        return pulumi.get(self, "locked")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> _builtins.str:
        return pulumi.get(self, "pipeline_id")

    @_builtins.property
    @pulumi.getter(name="propertyName")
    def property_name(self) -> _builtins.str:
        return pulumi.get(self, "property_name")

    @_builtins.property
    @pulumi.getter(name="triggerId")
    def trigger_id(self) -> _builtins.str:
        return pulumi.get(self, "trigger_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


class AwaitableGetCdTektonPipelineTriggerPropertyResult(GetCdTektonPipelineTriggerPropertyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCdTektonPipelineTriggerPropertyResult(
            enums=self.enums,
            href=self.href,
            id=self.id,
            locked=self.locked,
            name=self.name,
            path=self.path,
            pipeline_id=self.pipeline_id,
            property_name=self.property_name,
            trigger_id=self.trigger_id,
            type=self.type,
            value=self.value)


def get_cd_tekton_pipeline_trigger_property(id: Optional[_builtins.str] = None,
                                            pipeline_id: Optional[_builtins.str] = None,
                                            property_name: Optional[_builtins.str] = None,
                                            trigger_id: Optional[_builtins.str] = None,
                                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCdTektonPipelineTriggerPropertyResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['pipelineId'] = pipeline_id
    __args__['propertyName'] = property_name
    __args__['triggerId'] = trigger_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCdTektonPipelineTriggerProperty:getCdTektonPipelineTriggerProperty', __args__, opts=opts, typ=GetCdTektonPipelineTriggerPropertyResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCdTektonPipelineTriggerPropertyResult(
        enums=pulumi.get(__ret__, 'enums'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        locked=pulumi.get(__ret__, 'locked'),
        name=pulumi.get(__ret__, 'name'),
        path=pulumi.get(__ret__, 'path'),
        pipeline_id=pulumi.get(__ret__, 'pipeline_id'),
        property_name=pulumi.get(__ret__, 'property_name'),
        trigger_id=pulumi.get(__ret__, 'trigger_id'),
        type=pulumi.get(__ret__, 'type'),
        value=pulumi.get(__ret__, 'value'))
def get_cd_tekton_pipeline_trigger_property_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                   pipeline_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                   property_name: Optional[pulumi.Input[_builtins.str]] = None,
                                                   trigger_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCdTektonPipelineTriggerPropertyResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['pipelineId'] = pipeline_id
    __args__['propertyName'] = property_name
    __args__['triggerId'] = trigger_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCdTektonPipelineTriggerProperty:getCdTektonPipelineTriggerProperty', __args__, opts=opts, typ=GetCdTektonPipelineTriggerPropertyResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCdTektonPipelineTriggerPropertyResult(
        enums=pulumi.get(__response__, 'enums'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        locked=pulumi.get(__response__, 'locked'),
        name=pulumi.get(__response__, 'name'),
        path=pulumi.get(__response__, 'path'),
        pipeline_id=pulumi.get(__response__, 'pipeline_id'),
        property_name=pulumi.get(__response__, 'property_name'),
        trigger_id=pulumi.get(__response__, 'trigger_id'),
        type=pulumi.get(__response__, 'type'),
        value=pulumi.get(__response__, 'value')))
