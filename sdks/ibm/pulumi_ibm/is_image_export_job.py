# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsImageExportJobArgs', 'IsImageExportJob']

@pulumi.input_type
class IsImageExportJobArgs:
    def __init__(__self__, *,
                 image: pulumi.Input[_builtins.str],
                 storage_bucket: pulumi.Input['IsImageExportJobStorageBucketArgs'],
                 format: Optional[pulumi.Input[_builtins.str]] = None,
                 is_image_export_job_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a IsImageExportJob resource.
        :param pulumi.Input[_builtins.str] image: The image identifier.
        :param pulumi.Input['IsImageExportJobStorageBucketArgs'] storage_bucket: The name of the Cloud Object Storage bucket to export the image to.
        :param pulumi.Input[_builtins.str] format: The format to use for the exported image. If the image is encrypted, only `qcow2` is supported.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this image export job. Names must be unique within the image this export job resides in. If
               unspecified, the name will be a hyphenated list of randomly-selected words prefixed with the first 16 characters of the
               parent image name.The exported image object name in Cloud Object Storage (`storage_object.name` in the response) will be
               based on this name. The object name will be unique within the bucket.
        """
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "storage_bucket", storage_bucket)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if is_image_export_job_id is not None:
            pulumi.set(__self__, "is_image_export_job_id", is_image_export_job_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def image(self) -> pulumi.Input[_builtins.str]:
        """
        The image identifier.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "image", value)

    @_builtins.property
    @pulumi.getter(name="storageBucket")
    def storage_bucket(self) -> pulumi.Input['IsImageExportJobStorageBucketArgs']:
        """
        The name of the Cloud Object Storage bucket to export the image to.
        """
        return pulumi.get(self, "storage_bucket")

    @storage_bucket.setter
    def storage_bucket(self, value: pulumi.Input['IsImageExportJobStorageBucketArgs']):
        pulumi.set(self, "storage_bucket", value)

    @_builtins.property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The format to use for the exported image. If the image is encrypted, only `qcow2` is supported.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "format", value)

    @_builtins.property
    @pulumi.getter(name="isImageExportJobId")
    def is_image_export_job_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_image_export_job_id")

    @is_image_export_job_id.setter
    def is_image_export_job_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_image_export_job_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user-defined name for this image export job. Names must be unique within the image this export job resides in. If
        unspecified, the name will be a hyphenated list of randomly-selected words prefixed with the first 16 characters of the
        parent image name.The exported image object name in Cloud Object Storage (`storage_object.name` in the response) will be
        based on this name. The object name will be unique within the bucket.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _IsImageExportJobState:
    def __init__(__self__, *,
                 completed_at: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 encrypted_data_key: Optional[pulumi.Input[_builtins.str]] = None,
                 format: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 image: Optional[pulumi.Input[_builtins.str]] = None,
                 image_export_job: Optional[pulumi.Input[_builtins.str]] = None,
                 is_image_export_job_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 started_at: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 status_reasons: Optional[pulumi.Input[Sequence[pulumi.Input['IsImageExportJobStatusReasonArgs']]]] = None,
                 storage_bucket: Optional[pulumi.Input['IsImageExportJobStorageBucketArgs']] = None,
                 storage_href: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_objects: Optional[pulumi.Input[Sequence[pulumi.Input['IsImageExportJobStorageObjectArgs']]]] = None):
        """
        Input properties used for looking up and filtering IsImageExportJob resources.
        :param pulumi.Input[_builtins.str] completed_at: The date and time that the image export job was completed.If absent, the export job has not yet completed.
        :param pulumi.Input[_builtins.str] created_at: The date and time that the image export job was created.
        :param pulumi.Input[_builtins.str] encrypted_data_key: A base64-encoded, encrypted representation of the key that was used to encrypt the data for the exported image. This key
               can be unwrapped with the image's `encryption_key` root key using either Key Protect or Hyper Protect Crypto Service.If
               absent, the export job is for an unencrypted image.
        :param pulumi.Input[_builtins.str] format: The format to use for the exported image. If the image is encrypted, only `qcow2` is supported.
        :param pulumi.Input[_builtins.str] href: The URL for this image export job.
        :param pulumi.Input[_builtins.str] image: The image identifier.
        :param pulumi.Input[_builtins.str] image_export_job: The unique identifier for this image export job.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this image export job. Names must be unique within the image this export job resides in. If
               unspecified, the name will be a hyphenated list of randomly-selected words prefixed with the first 16 characters of the
               parent image name.The exported image object name in Cloud Object Storage (`storage_object.name` in the response) will be
               based on this name. The object name will be unique within the bucket.
        :param pulumi.Input[_builtins.str] resource_type: The type of resource referenced.
        :param pulumi.Input[_builtins.str] started_at: The date and time that the image export job started running.If absent, the export job has not yet started.
        :param pulumi.Input[_builtins.str] status: The status of this image export job:- `deleting`: Export job is being deleted- `failed`: Export job could not be
               completed successfully- `queued`: Export job is queued- `running`: Export job is in progress- `succeeded`: Export job
               was completed successfullyThe exported image object is automatically deleted for `failed` jobs.
        :param pulumi.Input[Sequence[pulumi.Input['IsImageExportJobStatusReasonArgs']]] status_reasons: The reasons for the current status (if any).The enumerated reason code values for this property will expand in the
               future. When processing this property, check for and log unknown values. Optionally halt processing and surface the
               error, or bypass the resource on which the unexpected reason code was encountered.
        :param pulumi.Input['IsImageExportJobStorageBucketArgs'] storage_bucket: The name of the Cloud Object Storage bucket to export the image to.
        :param pulumi.Input[_builtins.str] storage_href: The Cloud Object Storage location of the exported image object. The object at this location may not exist until the job
               is started, and will be incomplete while the job is running.After the job completes, the exported image object is not
               managed by the IBM VPC service, and may be removed or replaced with a different object by any user or service with IAM
               authorization to the bucket.
        :param pulumi.Input[Sequence[pulumi.Input['IsImageExportJobStorageObjectArgs']]] storage_objects: The Cloud Object Storage object for the exported image. This object may not exist untilthe job is started, and will not
               be complete until the job completes.
        """
        if completed_at is not None:
            pulumi.set(__self__, "completed_at", completed_at)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if encrypted_data_key is not None:
            pulumi.set(__self__, "encrypted_data_key", encrypted_data_key)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_export_job is not None:
            pulumi.set(__self__, "image_export_job", image_export_job)
        if is_image_export_job_id is not None:
            pulumi.set(__self__, "is_image_export_job_id", is_image_export_job_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_reasons is not None:
            pulumi.set(__self__, "status_reasons", status_reasons)
        if storage_bucket is not None:
            pulumi.set(__self__, "storage_bucket", storage_bucket)
        if storage_href is not None:
            pulumi.set(__self__, "storage_href", storage_href)
        if storage_objects is not None:
            pulumi.set(__self__, "storage_objects", storage_objects)

    @_builtins.property
    @pulumi.getter(name="completedAt")
    def completed_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time that the image export job was completed.If absent, the export job has not yet completed.
        """
        return pulumi.get(self, "completed_at")

    @completed_at.setter
    def completed_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "completed_at", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time that the image export job was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="encryptedDataKey")
    def encrypted_data_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A base64-encoded, encrypted representation of the key that was used to encrypt the data for the exported image. This key
        can be unwrapped with the image's `encryption_key` root key using either Key Protect or Hyper Protect Crypto Service.If
        absent, the export job is for an unencrypted image.
        """
        return pulumi.get(self, "encrypted_data_key")

    @encrypted_data_key.setter
    def encrypted_data_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encrypted_data_key", value)

    @_builtins.property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The format to use for the exported image. If the image is encrypted, only `qcow2` is supported.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "format", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL for this image export job.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The image identifier.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image", value)

    @_builtins.property
    @pulumi.getter(name="imageExportJob")
    def image_export_job(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier for this image export job.
        """
        return pulumi.get(self, "image_export_job")

    @image_export_job.setter
    def image_export_job(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_export_job", value)

    @_builtins.property
    @pulumi.getter(name="isImageExportJobId")
    def is_image_export_job_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_image_export_job_id")

    @is_image_export_job_id.setter
    def is_image_export_job_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_image_export_job_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user-defined name for this image export job. Names must be unique within the image this export job resides in. If
        unspecified, the name will be a hyphenated list of randomly-selected words prefixed with the first 16 characters of the
        parent image name.The exported image object name in Cloud Object Storage (`storage_object.name` in the response) will be
        based on this name. The object name will be unique within the bucket.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of resource referenced.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time that the image export job started running.If absent, the export job has not yet started.
        """
        return pulumi.get(self, "started_at")

    @started_at.setter
    def started_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "started_at", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of this image export job:- `deleting`: Export job is being deleted- `failed`: Export job could not be
        completed successfully- `queued`: Export job is queued- `running`: Export job is in progress- `succeeded`: Export job
        was completed successfullyThe exported image object is automatically deleted for `failed` jobs.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsImageExportJobStatusReasonArgs']]]]:
        """
        The reasons for the current status (if any).The enumerated reason code values for this property will expand in the
        future. When processing this property, check for and log unknown values. Optionally halt processing and surface the
        error, or bypass the resource on which the unexpected reason code was encountered.
        """
        return pulumi.get(self, "status_reasons")

    @status_reasons.setter
    def status_reasons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsImageExportJobStatusReasonArgs']]]]):
        pulumi.set(self, "status_reasons", value)

    @_builtins.property
    @pulumi.getter(name="storageBucket")
    def storage_bucket(self) -> Optional[pulumi.Input['IsImageExportJobStorageBucketArgs']]:
        """
        The name of the Cloud Object Storage bucket to export the image to.
        """
        return pulumi.get(self, "storage_bucket")

    @storage_bucket.setter
    def storage_bucket(self, value: Optional[pulumi.Input['IsImageExportJobStorageBucketArgs']]):
        pulumi.set(self, "storage_bucket", value)

    @_builtins.property
    @pulumi.getter(name="storageHref")
    def storage_href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Cloud Object Storage location of the exported image object. The object at this location may not exist until the job
        is started, and will be incomplete while the job is running.After the job completes, the exported image object is not
        managed by the IBM VPC service, and may be removed or replaced with a different object by any user or service with IAM
        authorization to the bucket.
        """
        return pulumi.get(self, "storage_href")

    @storage_href.setter
    def storage_href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_href", value)

    @_builtins.property
    @pulumi.getter(name="storageObjects")
    def storage_objects(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsImageExportJobStorageObjectArgs']]]]:
        """
        The Cloud Object Storage object for the exported image. This object may not exist untilthe job is started, and will not
        be complete until the job completes.
        """
        return pulumi.get(self, "storage_objects")

    @storage_objects.setter
    def storage_objects(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsImageExportJobStorageObjectArgs']]]]):
        pulumi.set(self, "storage_objects", value)


@pulumi.type_token("ibm:index/isImageExportJob:IsImageExportJob")
class IsImageExportJob(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 format: Optional[pulumi.Input[_builtins.str]] = None,
                 image: Optional[pulumi.Input[_builtins.str]] = None,
                 is_image_export_job_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_bucket: Optional[pulumi.Input[Union['IsImageExportJobStorageBucketArgs', 'IsImageExportJobStorageBucketArgsDict']]] = None,
                 __props__=None):
        """
        Create a IsImageExportJob resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] format: The format to use for the exported image. If the image is encrypted, only `qcow2` is supported.
        :param pulumi.Input[_builtins.str] image: The image identifier.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this image export job. Names must be unique within the image this export job resides in. If
               unspecified, the name will be a hyphenated list of randomly-selected words prefixed with the first 16 characters of the
               parent image name.The exported image object name in Cloud Object Storage (`storage_object.name` in the response) will be
               based on this name. The object name will be unique within the bucket.
        :param pulumi.Input[Union['IsImageExportJobStorageBucketArgs', 'IsImageExportJobStorageBucketArgsDict']] storage_bucket: The name of the Cloud Object Storage bucket to export the image to.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsImageExportJobArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsImageExportJob resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsImageExportJobArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsImageExportJobArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 format: Optional[pulumi.Input[_builtins.str]] = None,
                 image: Optional[pulumi.Input[_builtins.str]] = None,
                 is_image_export_job_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_bucket: Optional[pulumi.Input[Union['IsImageExportJobStorageBucketArgs', 'IsImageExportJobStorageBucketArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsImageExportJobArgs.__new__(IsImageExportJobArgs)

            __props__.__dict__["format"] = format
            if image is None and not opts.urn:
                raise TypeError("Missing required property 'image'")
            __props__.__dict__["image"] = image
            __props__.__dict__["is_image_export_job_id"] = is_image_export_job_id
            __props__.__dict__["name"] = name
            if storage_bucket is None and not opts.urn:
                raise TypeError("Missing required property 'storage_bucket'")
            __props__.__dict__["storage_bucket"] = storage_bucket
            __props__.__dict__["completed_at"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["encrypted_data_key"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["image_export_job"] = None
            __props__.__dict__["resource_type"] = None
            __props__.__dict__["started_at"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["status_reasons"] = None
            __props__.__dict__["storage_href"] = None
            __props__.__dict__["storage_objects"] = None
        super(IsImageExportJob, __self__).__init__(
            'ibm:index/isImageExportJob:IsImageExportJob',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            completed_at: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            encrypted_data_key: Optional[pulumi.Input[_builtins.str]] = None,
            format: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            image: Optional[pulumi.Input[_builtins.str]] = None,
            image_export_job: Optional[pulumi.Input[_builtins.str]] = None,
            is_image_export_job_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            started_at: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            status_reasons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsImageExportJobStatusReasonArgs', 'IsImageExportJobStatusReasonArgsDict']]]]] = None,
            storage_bucket: Optional[pulumi.Input[Union['IsImageExportJobStorageBucketArgs', 'IsImageExportJobStorageBucketArgsDict']]] = None,
            storage_href: Optional[pulumi.Input[_builtins.str]] = None,
            storage_objects: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsImageExportJobStorageObjectArgs', 'IsImageExportJobStorageObjectArgsDict']]]]] = None) -> 'IsImageExportJob':
        """
        Get an existing IsImageExportJob resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] completed_at: The date and time that the image export job was completed.If absent, the export job has not yet completed.
        :param pulumi.Input[_builtins.str] created_at: The date and time that the image export job was created.
        :param pulumi.Input[_builtins.str] encrypted_data_key: A base64-encoded, encrypted representation of the key that was used to encrypt the data for the exported image. This key
               can be unwrapped with the image's `encryption_key` root key using either Key Protect or Hyper Protect Crypto Service.If
               absent, the export job is for an unencrypted image.
        :param pulumi.Input[_builtins.str] format: The format to use for the exported image. If the image is encrypted, only `qcow2` is supported.
        :param pulumi.Input[_builtins.str] href: The URL for this image export job.
        :param pulumi.Input[_builtins.str] image: The image identifier.
        :param pulumi.Input[_builtins.str] image_export_job: The unique identifier for this image export job.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this image export job. Names must be unique within the image this export job resides in. If
               unspecified, the name will be a hyphenated list of randomly-selected words prefixed with the first 16 characters of the
               parent image name.The exported image object name in Cloud Object Storage (`storage_object.name` in the response) will be
               based on this name. The object name will be unique within the bucket.
        :param pulumi.Input[_builtins.str] resource_type: The type of resource referenced.
        :param pulumi.Input[_builtins.str] started_at: The date and time that the image export job started running.If absent, the export job has not yet started.
        :param pulumi.Input[_builtins.str] status: The status of this image export job:- `deleting`: Export job is being deleted- `failed`: Export job could not be
               completed successfully- `queued`: Export job is queued- `running`: Export job is in progress- `succeeded`: Export job
               was completed successfullyThe exported image object is automatically deleted for `failed` jobs.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsImageExportJobStatusReasonArgs', 'IsImageExportJobStatusReasonArgsDict']]]] status_reasons: The reasons for the current status (if any).The enumerated reason code values for this property will expand in the
               future. When processing this property, check for and log unknown values. Optionally halt processing and surface the
               error, or bypass the resource on which the unexpected reason code was encountered.
        :param pulumi.Input[Union['IsImageExportJobStorageBucketArgs', 'IsImageExportJobStorageBucketArgsDict']] storage_bucket: The name of the Cloud Object Storage bucket to export the image to.
        :param pulumi.Input[_builtins.str] storage_href: The Cloud Object Storage location of the exported image object. The object at this location may not exist until the job
               is started, and will be incomplete while the job is running.After the job completes, the exported image object is not
               managed by the IBM VPC service, and may be removed or replaced with a different object by any user or service with IAM
               authorization to the bucket.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsImageExportJobStorageObjectArgs', 'IsImageExportJobStorageObjectArgsDict']]]] storage_objects: The Cloud Object Storage object for the exported image. This object may not exist untilthe job is started, and will not
               be complete until the job completes.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsImageExportJobState.__new__(_IsImageExportJobState)

        __props__.__dict__["completed_at"] = completed_at
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["encrypted_data_key"] = encrypted_data_key
        __props__.__dict__["format"] = format
        __props__.__dict__["href"] = href
        __props__.__dict__["image"] = image
        __props__.__dict__["image_export_job"] = image_export_job
        __props__.__dict__["is_image_export_job_id"] = is_image_export_job_id
        __props__.__dict__["name"] = name
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["started_at"] = started_at
        __props__.__dict__["status"] = status
        __props__.__dict__["status_reasons"] = status_reasons
        __props__.__dict__["storage_bucket"] = storage_bucket
        __props__.__dict__["storage_href"] = storage_href
        __props__.__dict__["storage_objects"] = storage_objects
        return IsImageExportJob(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="completedAt")
    def completed_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time that the image export job was completed.If absent, the export job has not yet completed.
        """
        return pulumi.get(self, "completed_at")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time that the image export job was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="encryptedDataKey")
    def encrypted_data_key(self) -> pulumi.Output[_builtins.str]:
        """
        A base64-encoded, encrypted representation of the key that was used to encrypt the data for the exported image. This key
        can be unwrapped with the image's `encryption_key` root key using either Key Protect or Hyper Protect Crypto Service.If
        absent, the export job is for an unencrypted image.
        """
        return pulumi.get(self, "encrypted_data_key")

    @_builtins.property
    @pulumi.getter
    def format(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The format to use for the exported image. If the image is encrypted, only `qcow2` is supported.
        """
        return pulumi.get(self, "format")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        The URL for this image export job.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def image(self) -> pulumi.Output[_builtins.str]:
        """
        The image identifier.
        """
        return pulumi.get(self, "image")

    @_builtins.property
    @pulumi.getter(name="imageExportJob")
    def image_export_job(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier for this image export job.
        """
        return pulumi.get(self, "image_export_job")

    @_builtins.property
    @pulumi.getter(name="isImageExportJobId")
    def is_image_export_job_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_image_export_job_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The user-defined name for this image export job. Names must be unique within the image this export job resides in. If
        unspecified, the name will be a hyphenated list of randomly-selected words prefixed with the first 16 characters of the
        parent image name.The exported image object name in Cloud Object Storage (`storage_object.name` in the response) will be
        based on this name. The object name will be unique within the bucket.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of resource referenced.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time that the image export job started running.If absent, the export job has not yet started.
        """
        return pulumi.get(self, "started_at")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of this image export job:- `deleting`: Export job is being deleted- `failed`: Export job could not be
        completed successfully- `queued`: Export job is queued- `running`: Export job is in progress- `succeeded`: Export job
        was completed successfullyThe exported image object is automatically deleted for `failed` jobs.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> pulumi.Output[Sequence['outputs.IsImageExportJobStatusReason']]:
        """
        The reasons for the current status (if any).The enumerated reason code values for this property will expand in the
        future. When processing this property, check for and log unknown values. Optionally halt processing and surface the
        error, or bypass the resource on which the unexpected reason code was encountered.
        """
        return pulumi.get(self, "status_reasons")

    @_builtins.property
    @pulumi.getter(name="storageBucket")
    def storage_bucket(self) -> pulumi.Output['outputs.IsImageExportJobStorageBucket']:
        """
        The name of the Cloud Object Storage bucket to export the image to.
        """
        return pulumi.get(self, "storage_bucket")

    @_builtins.property
    @pulumi.getter(name="storageHref")
    def storage_href(self) -> pulumi.Output[_builtins.str]:
        """
        The Cloud Object Storage location of the exported image object. The object at this location may not exist until the job
        is started, and will be incomplete while the job is running.After the job completes, the exported image object is not
        managed by the IBM VPC service, and may be removed or replaced with a different object by any user or service with IAM
        authorization to the bucket.
        """
        return pulumi.get(self, "storage_href")

    @_builtins.property
    @pulumi.getter(name="storageObjects")
    def storage_objects(self) -> pulumi.Output[Sequence['outputs.IsImageExportJobStorageObject']]:
        """
        The Cloud Object Storage object for the exported image. This object may not exist untilthe job is started, and will not
        be complete until the job completes.
        """
        return pulumi.get(self, "storage_objects")

