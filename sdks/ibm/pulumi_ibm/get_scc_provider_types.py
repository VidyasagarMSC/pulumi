# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSccProviderTypesResult',
    'AwaitableGetSccProviderTypesResult',
    'get_scc_provider_types',
    'get_scc_provider_types_output',
]

@pulumi.output_type
class GetSccProviderTypesResult:
    """
    A collection of values returned by getSccProviderTypes.
    """
    def __init__(__self__, id=None, instance_id=None, provider_types=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if provider_types and not isinstance(provider_types, list):
            raise TypeError("Expected argument 'provider_types' to be a list")
        pulumi.set(__self__, "provider_types", provider_types)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="providerTypes")
    def provider_types(self) -> Sequence['outputs.GetSccProviderTypesProviderTypeResult']:
        return pulumi.get(self, "provider_types")


class AwaitableGetSccProviderTypesResult(GetSccProviderTypesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSccProviderTypesResult(
            id=self.id,
            instance_id=self.instance_id,
            provider_types=self.provider_types)


def get_scc_provider_types(id: Optional[_builtins.str] = None,
                           instance_id: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSccProviderTypesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSccProviderTypes:getSccProviderTypes', __args__, opts=opts, typ=GetSccProviderTypesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSccProviderTypesResult(
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        provider_types=pulumi.get(__ret__, 'provider_types'))
def get_scc_provider_types_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSccProviderTypesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSccProviderTypes:getSccProviderTypes', __args__, opts=opts, typ=GetSccProviderTypesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSccProviderTypesResult(
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        provider_types=pulumi.get(__response__, 'provider_types')))
