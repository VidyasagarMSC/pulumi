# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SubnetArgs', 'Subnet']

@pulumi.input_type
class SubnetArgs:
    def __init__(__self__, *,
                 capacity: pulumi.Input[_builtins.float],
                 type: pulumi.Input[_builtins.str],
                 endpoint_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_version: Optional[pulumi.Input[_builtins.float]] = None,
                 notes: Optional[pulumi.Input[_builtins.str]] = None,
                 private: Optional[pulumi.Input[_builtins.bool]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['SubnetTimeoutsArgs']] = None,
                 vlan_id: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a Subnet resource.
        :param pulumi.Input[_builtins.float] capacity: number of ip addresses in the subnet
        :param pulumi.Input[_builtins.str] type: subnet type
        :param pulumi.Input[_builtins.str] endpoint_ip: endpoint IP
        :param pulumi.Input[_builtins.float] ip_version: ip version
        :param pulumi.Input[_builtins.str] notes: Notes
        :param pulumi.Input[_builtins.bool] private: private subnet
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: tags set for the resource
        :param pulumi.Input[_builtins.float] vlan_id: VLAN ID for the subnet
        """
        pulumi.set(__self__, "capacity", capacity)
        pulumi.set(__self__, "type", type)
        if endpoint_ip is not None:
            pulumi.set(__self__, "endpoint_ip", endpoint_ip)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if private is not None:
            pulumi.set(__self__, "private", private)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> pulumi.Input[_builtins.float]:
        """
        number of ip addresses in the subnet
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "capacity", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        subnet type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="endpointIp")
    def endpoint_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        endpoint IP
        """
        return pulumi.get(self, "endpoint_ip")

    @endpoint_ip.setter
    def endpoint_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_ip", value)

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        ip version
        """
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ip_version", value)

    @_builtins.property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Notes
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "notes", value)

    @_builtins.property
    @pulumi.getter
    def private(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        private subnet
        """
        return pulumi.get(self, "private")

    @private.setter
    def private(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "private", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        tags set for the resource
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['SubnetTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['SubnetTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        VLAN ID for the subnet
        """
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "vlan_id", value)


@pulumi.input_type
class _SubnetState:
    def __init__(__self__, *,
                 capacity: Optional[pulumi.Input[_builtins.float]] = None,
                 endpoint_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_version: Optional[pulumi.Input[_builtins.float]] = None,
                 notes: Optional[pulumi.Input[_builtins.str]] = None,
                 private: Optional[pulumi.Input[_builtins.bool]] = None,
                 subnet_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['SubnetTimeoutsArgs']] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 vlan_id: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering Subnet resources.
        :param pulumi.Input[_builtins.float] capacity: number of ip addresses in the subnet
        :param pulumi.Input[_builtins.str] endpoint_ip: endpoint IP
        :param pulumi.Input[_builtins.float] ip_version: ip version
        :param pulumi.Input[_builtins.str] notes: Notes
        :param pulumi.Input[_builtins.bool] private: private subnet
        :param pulumi.Input[_builtins.str] subnet_cidr: CIDR notation for the subnet
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: tags set for the resource
        :param pulumi.Input[_builtins.str] type: subnet type
        :param pulumi.Input[_builtins.float] vlan_id: VLAN ID for the subnet
        """
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if endpoint_ip is not None:
            pulumi.set(__self__, "endpoint_ip", endpoint_ip)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if private is not None:
            pulumi.set(__self__, "private", private)
        if subnet_cidr is not None:
            pulumi.set(__self__, "subnet_cidr", subnet_cidr)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        number of ip addresses in the subnet
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "capacity", value)

    @_builtins.property
    @pulumi.getter(name="endpointIp")
    def endpoint_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        endpoint IP
        """
        return pulumi.get(self, "endpoint_ip")

    @endpoint_ip.setter
    def endpoint_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_ip", value)

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        ip version
        """
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ip_version", value)

    @_builtins.property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Notes
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "notes", value)

    @_builtins.property
    @pulumi.getter
    def private(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        private subnet
        """
        return pulumi.get(self, "private")

    @private.setter
    def private(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "private", value)

    @_builtins.property
    @pulumi.getter(name="subnetCidr")
    def subnet_cidr(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CIDR notation for the subnet
        """
        return pulumi.get(self, "subnet_cidr")

    @subnet_cidr.setter
    def subnet_cidr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_cidr", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        tags set for the resource
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['SubnetTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['SubnetTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        subnet type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        VLAN ID for the subnet
        """
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "vlan_id", value)


@pulumi.type_token("ibm:index/subnet:Subnet")
class Subnet(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 capacity: Optional[pulumi.Input[_builtins.float]] = None,
                 endpoint_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_version: Optional[pulumi.Input[_builtins.float]] = None,
                 notes: Optional[pulumi.Input[_builtins.str]] = None,
                 private: Optional[pulumi.Input[_builtins.bool]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['SubnetTimeoutsArgs', 'SubnetTimeoutsArgsDict']]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a Subnet resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] capacity: number of ip addresses in the subnet
        :param pulumi.Input[_builtins.str] endpoint_ip: endpoint IP
        :param pulumi.Input[_builtins.float] ip_version: ip version
        :param pulumi.Input[_builtins.str] notes: Notes
        :param pulumi.Input[_builtins.bool] private: private subnet
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: tags set for the resource
        :param pulumi.Input[_builtins.str] type: subnet type
        :param pulumi.Input[_builtins.float] vlan_id: VLAN ID for the subnet
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SubnetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Subnet resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SubnetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SubnetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 capacity: Optional[pulumi.Input[_builtins.float]] = None,
                 endpoint_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_version: Optional[pulumi.Input[_builtins.float]] = None,
                 notes: Optional[pulumi.Input[_builtins.str]] = None,
                 private: Optional[pulumi.Input[_builtins.bool]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['SubnetTimeoutsArgs', 'SubnetTimeoutsArgsDict']]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SubnetArgs.__new__(SubnetArgs)

            if capacity is None and not opts.urn:
                raise TypeError("Missing required property 'capacity'")
            __props__.__dict__["capacity"] = capacity
            __props__.__dict__["endpoint_ip"] = endpoint_ip
            __props__.__dict__["ip_version"] = ip_version
            __props__.__dict__["notes"] = notes
            __props__.__dict__["private"] = private
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeouts"] = timeouts
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["vlan_id"] = vlan_id
            __props__.__dict__["subnet_cidr"] = None
        super(Subnet, __self__).__init__(
            'ibm:index/subnet:Subnet',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            capacity: Optional[pulumi.Input[_builtins.float]] = None,
            endpoint_ip: Optional[pulumi.Input[_builtins.str]] = None,
            ip_version: Optional[pulumi.Input[_builtins.float]] = None,
            notes: Optional[pulumi.Input[_builtins.str]] = None,
            private: Optional[pulumi.Input[_builtins.bool]] = None,
            subnet_cidr: Optional[pulumi.Input[_builtins.str]] = None,
            subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            timeouts: Optional[pulumi.Input[Union['SubnetTimeoutsArgs', 'SubnetTimeoutsArgsDict']]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            vlan_id: Optional[pulumi.Input[_builtins.float]] = None) -> 'Subnet':
        """
        Get an existing Subnet resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] capacity: number of ip addresses in the subnet
        :param pulumi.Input[_builtins.str] endpoint_ip: endpoint IP
        :param pulumi.Input[_builtins.float] ip_version: ip version
        :param pulumi.Input[_builtins.str] notes: Notes
        :param pulumi.Input[_builtins.bool] private: private subnet
        :param pulumi.Input[_builtins.str] subnet_cidr: CIDR notation for the subnet
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: tags set for the resource
        :param pulumi.Input[_builtins.str] type: subnet type
        :param pulumi.Input[_builtins.float] vlan_id: VLAN ID for the subnet
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SubnetState.__new__(_SubnetState)

        __props__.__dict__["capacity"] = capacity
        __props__.__dict__["endpoint_ip"] = endpoint_ip
        __props__.__dict__["ip_version"] = ip_version
        __props__.__dict__["notes"] = notes
        __props__.__dict__["private"] = private
        __props__.__dict__["subnet_cidr"] = subnet_cidr
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["type"] = type
        __props__.__dict__["vlan_id"] = vlan_id
        return Subnet(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> pulumi.Output[_builtins.float]:
        """
        number of ip addresses in the subnet
        """
        return pulumi.get(self, "capacity")

    @_builtins.property
    @pulumi.getter(name="endpointIp")
    def endpoint_ip(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        endpoint IP
        """
        return pulumi.get(self, "endpoint_ip")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        ip version
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter
    def notes(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Notes
        """
        return pulumi.get(self, "notes")

    @_builtins.property
    @pulumi.getter
    def private(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        private subnet
        """
        return pulumi.get(self, "private")

    @_builtins.property
    @pulumi.getter(name="subnetCidr")
    def subnet_cidr(self) -> pulumi.Output[_builtins.str]:
        """
        CIDR notation for the subnet
        """
        return pulumi.get(self, "subnet_cidr")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        tags set for the resource
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.SubnetTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        subnet type
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> pulumi.Output[_builtins.float]:
        """
        VLAN ID for the subnet
        """
        return pulumi.get(self, "vlan_id")

