# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsVirtualNetworkInterfaceFloatingIpArgs', 'IsVirtualNetworkInterfaceFloatingIp']

@pulumi.input_type
class IsVirtualNetworkInterfaceFloatingIpArgs:
    def __init__(__self__, *,
                 floating_ip: pulumi.Input[_builtins.str],
                 virtual_network_interface: pulumi.Input[_builtins.str],
                 is_virtual_network_interface_floating_ip_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a IsVirtualNetworkInterfaceFloatingIp resource.
        :param pulumi.Input[_builtins.str] floating_ip: The floating IP identifier
        :param pulumi.Input[_builtins.str] virtual_network_interface: The virtual network interface identifier
        """
        pulumi.set(__self__, "floating_ip", floating_ip)
        pulumi.set(__self__, "virtual_network_interface", virtual_network_interface)
        if is_virtual_network_interface_floating_ip_id is not None:
            pulumi.set(__self__, "is_virtual_network_interface_floating_ip_id", is_virtual_network_interface_floating_ip_id)

    @_builtins.property
    @pulumi.getter(name="floatingIp")
    def floating_ip(self) -> pulumi.Input[_builtins.str]:
        """
        The floating IP identifier
        """
        return pulumi.get(self, "floating_ip")

    @floating_ip.setter
    def floating_ip(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "floating_ip", value)

    @_builtins.property
    @pulumi.getter(name="virtualNetworkInterface")
    def virtual_network_interface(self) -> pulumi.Input[_builtins.str]:
        """
        The virtual network interface identifier
        """
        return pulumi.get(self, "virtual_network_interface")

    @virtual_network_interface.setter
    def virtual_network_interface(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "virtual_network_interface", value)

    @_builtins.property
    @pulumi.getter(name="isVirtualNetworkInterfaceFloatingIpId")
    def is_virtual_network_interface_floating_ip_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_virtual_network_interface_floating_ip_id")

    @is_virtual_network_interface_floating_ip_id.setter
    def is_virtual_network_interface_floating_ip_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_virtual_network_interface_floating_ip_id", value)


@pulumi.input_type
class _IsVirtualNetworkInterfaceFloatingIpState:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 deleteds: Optional[pulumi.Input[Sequence[pulumi.Input['IsVirtualNetworkInterfaceFloatingIpDeletedArgs']]]] = None,
                 floating_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 is_virtual_network_interface_floating_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 virtual_network_interface: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsVirtualNetworkInterfaceFloatingIp resources.
        :param pulumi.Input[_builtins.str] address: The globally unique IP address.
        :param pulumi.Input[_builtins.str] crn: The CRN for this floating IP.
        :param pulumi.Input[Sequence[pulumi.Input['IsVirtualNetworkInterfaceFloatingIpDeletedArgs']]] deleteds: If present, this property indicates the referenced resource has been deleted, and provides some supplementary
               information.
        :param pulumi.Input[_builtins.str] floating_ip: The floating IP identifier
        :param pulumi.Input[_builtins.str] href: The URL for this floating IP.
        :param pulumi.Input[_builtins.str] name: The name for this floating IP. The name is unique across all floating IPs in the region.
        :param pulumi.Input[_builtins.str] virtual_network_interface: The virtual network interface identifier
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if deleteds is not None:
            pulumi.set(__self__, "deleteds", deleteds)
        if floating_ip is not None:
            pulumi.set(__self__, "floating_ip", floating_ip)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if is_virtual_network_interface_floating_ip_id is not None:
            pulumi.set(__self__, "is_virtual_network_interface_floating_ip_id", is_virtual_network_interface_floating_ip_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if virtual_network_interface is not None:
            pulumi.set(__self__, "virtual_network_interface", virtual_network_interface)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The globally unique IP address.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN for this floating IP.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter
    def deleteds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsVirtualNetworkInterfaceFloatingIpDeletedArgs']]]]:
        """
        If present, this property indicates the referenced resource has been deleted, and provides some supplementary
        information.
        """
        return pulumi.get(self, "deleteds")

    @deleteds.setter
    def deleteds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsVirtualNetworkInterfaceFloatingIpDeletedArgs']]]]):
        pulumi.set(self, "deleteds", value)

    @_builtins.property
    @pulumi.getter(name="floatingIp")
    def floating_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The floating IP identifier
        """
        return pulumi.get(self, "floating_ip")

    @floating_ip.setter
    def floating_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "floating_ip", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL for this floating IP.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="isVirtualNetworkInterfaceFloatingIpId")
    def is_virtual_network_interface_floating_ip_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_virtual_network_interface_floating_ip_id")

    @is_virtual_network_interface_floating_ip_id.setter
    def is_virtual_network_interface_floating_ip_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_virtual_network_interface_floating_ip_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name for this floating IP. The name is unique across all floating IPs in the region.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="virtualNetworkInterface")
    def virtual_network_interface(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The virtual network interface identifier
        """
        return pulumi.get(self, "virtual_network_interface")

    @virtual_network_interface.setter
    def virtual_network_interface(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "virtual_network_interface", value)


@pulumi.type_token("ibm:index/isVirtualNetworkInterfaceFloatingIp:IsVirtualNetworkInterfaceFloatingIp")
class IsVirtualNetworkInterfaceFloatingIp(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 floating_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 is_virtual_network_interface_floating_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 virtual_network_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IsVirtualNetworkInterfaceFloatingIp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] floating_ip: The floating IP identifier
        :param pulumi.Input[_builtins.str] virtual_network_interface: The virtual network interface identifier
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsVirtualNetworkInterfaceFloatingIpArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsVirtualNetworkInterfaceFloatingIp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsVirtualNetworkInterfaceFloatingIpArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsVirtualNetworkInterfaceFloatingIpArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 floating_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 is_virtual_network_interface_floating_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 virtual_network_interface: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsVirtualNetworkInterfaceFloatingIpArgs.__new__(IsVirtualNetworkInterfaceFloatingIpArgs)

            if floating_ip is None and not opts.urn:
                raise TypeError("Missing required property 'floating_ip'")
            __props__.__dict__["floating_ip"] = floating_ip
            __props__.__dict__["is_virtual_network_interface_floating_ip_id"] = is_virtual_network_interface_floating_ip_id
            if virtual_network_interface is None and not opts.urn:
                raise TypeError("Missing required property 'virtual_network_interface'")
            __props__.__dict__["virtual_network_interface"] = virtual_network_interface
            __props__.__dict__["address"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["deleteds"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["name"] = None
        super(IsVirtualNetworkInterfaceFloatingIp, __self__).__init__(
            'ibm:index/isVirtualNetworkInterfaceFloatingIp:IsVirtualNetworkInterfaceFloatingIp',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            address: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            deleteds: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVirtualNetworkInterfaceFloatingIpDeletedArgs', 'IsVirtualNetworkInterfaceFloatingIpDeletedArgsDict']]]]] = None,
            floating_ip: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            is_virtual_network_interface_floating_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            virtual_network_interface: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsVirtualNetworkInterfaceFloatingIp':
        """
        Get an existing IsVirtualNetworkInterfaceFloatingIp resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] address: The globally unique IP address.
        :param pulumi.Input[_builtins.str] crn: The CRN for this floating IP.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsVirtualNetworkInterfaceFloatingIpDeletedArgs', 'IsVirtualNetworkInterfaceFloatingIpDeletedArgsDict']]]] deleteds: If present, this property indicates the referenced resource has been deleted, and provides some supplementary
               information.
        :param pulumi.Input[_builtins.str] floating_ip: The floating IP identifier
        :param pulumi.Input[_builtins.str] href: The URL for this floating IP.
        :param pulumi.Input[_builtins.str] name: The name for this floating IP. The name is unique across all floating IPs in the region.
        :param pulumi.Input[_builtins.str] virtual_network_interface: The virtual network interface identifier
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsVirtualNetworkInterfaceFloatingIpState.__new__(_IsVirtualNetworkInterfaceFloatingIpState)

        __props__.__dict__["address"] = address
        __props__.__dict__["crn"] = crn
        __props__.__dict__["deleteds"] = deleteds
        __props__.__dict__["floating_ip"] = floating_ip
        __props__.__dict__["href"] = href
        __props__.__dict__["is_virtual_network_interface_floating_ip_id"] = is_virtual_network_interface_floating_ip_id
        __props__.__dict__["name"] = name
        __props__.__dict__["virtual_network_interface"] = virtual_network_interface
        return IsVirtualNetworkInterfaceFloatingIp(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def address(self) -> pulumi.Output[_builtins.str]:
        """
        The globally unique IP address.
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The CRN for this floating IP.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def deleteds(self) -> pulumi.Output[Sequence['outputs.IsVirtualNetworkInterfaceFloatingIpDeleted']]:
        """
        If present, this property indicates the referenced resource has been deleted, and provides some supplementary
        information.
        """
        return pulumi.get(self, "deleteds")

    @_builtins.property
    @pulumi.getter(name="floatingIp")
    def floating_ip(self) -> pulumi.Output[_builtins.str]:
        """
        The floating IP identifier
        """
        return pulumi.get(self, "floating_ip")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        The URL for this floating IP.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="isVirtualNetworkInterfaceFloatingIpId")
    def is_virtual_network_interface_floating_ip_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_virtual_network_interface_floating_ip_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name for this floating IP. The name is unique across all floating IPs in the region.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="virtualNetworkInterface")
    def virtual_network_interface(self) -> pulumi.Output[_builtins.str]:
        """
        The virtual network interface identifier
        """
        return pulumi.get(self, "virtual_network_interface")

