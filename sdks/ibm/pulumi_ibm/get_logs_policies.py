# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetLogsPoliciesResult',
    'AwaitableGetLogsPoliciesResult',
    'get_logs_policies',
    'get_logs_policies_output',
]

@pulumi.output_type
class GetLogsPoliciesResult:
    """
    A collection of values returned by getLogsPolicies.
    """
    def __init__(__self__, enabled_only=None, endpoint_type=None, id=None, instance_id=None, policies=None, region=None, source_type=None):
        if enabled_only and not isinstance(enabled_only, bool):
            raise TypeError("Expected argument 'enabled_only' to be a bool")
        pulumi.set(__self__, "enabled_only", enabled_only)
        if endpoint_type and not isinstance(endpoint_type, str):
            raise TypeError("Expected argument 'endpoint_type' to be a str")
        pulumi.set(__self__, "endpoint_type", endpoint_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if policies and not isinstance(policies, list):
            raise TypeError("Expected argument 'policies' to be a list")
        pulumi.set(__self__, "policies", policies)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if source_type and not isinstance(source_type, str):
            raise TypeError("Expected argument 'source_type' to be a str")
        pulumi.set(__self__, "source_type", source_type)

    @_builtins.property
    @pulumi.getter(name="enabledOnly")
    def enabled_only(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "enabled_only")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def policies(self) -> Sequence['outputs.GetLogsPoliciesPolicyResult']:
        return pulumi.get(self, "policies")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "source_type")


class AwaitableGetLogsPoliciesResult(GetLogsPoliciesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLogsPoliciesResult(
            enabled_only=self.enabled_only,
            endpoint_type=self.endpoint_type,
            id=self.id,
            instance_id=self.instance_id,
            policies=self.policies,
            region=self.region,
            source_type=self.source_type)


def get_logs_policies(enabled_only: Optional[_builtins.bool] = None,
                      endpoint_type: Optional[_builtins.str] = None,
                      id: Optional[_builtins.str] = None,
                      instance_id: Optional[_builtins.str] = None,
                      region: Optional[_builtins.str] = None,
                      source_type: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLogsPoliciesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['enabledOnly'] = enabled_only
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['sourceType'] = source_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getLogsPolicies:getLogsPolicies', __args__, opts=opts, typ=GetLogsPoliciesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetLogsPoliciesResult(
        enabled_only=pulumi.get(__ret__, 'enabled_only'),
        endpoint_type=pulumi.get(__ret__, 'endpoint_type'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        policies=pulumi.get(__ret__, 'policies'),
        region=pulumi.get(__ret__, 'region'),
        source_type=pulumi.get(__ret__, 'source_type'))
def get_logs_policies_output(enabled_only: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                             endpoint_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                             region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             source_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetLogsPoliciesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['enabledOnly'] = enabled_only
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['sourceType'] = source_type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getLogsPolicies:getLogsPolicies', __args__, opts=opts, typ=GetLogsPoliciesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetLogsPoliciesResult(
        enabled_only=pulumi.get(__response__, 'enabled_only'),
        endpoint_type=pulumi.get(__response__, 'endpoint_type'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        policies=pulumi.get(__response__, 'policies'),
        region=pulumi.get(__response__, 'region'),
        source_type=pulumi.get(__response__, 'source_type')))
