# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetAppidApmResult',
    'AwaitableGetAppidApmResult',
    'get_appid_apm',
    'get_appid_apm_output',
]

@pulumi.output_type
class GetAppidApmResult:
    """
    A collection of values returned by getAppidApm.
    """
    def __init__(__self__, enabled=None, id=None, lockout_policies=None, min_password_change_intervals=None, password_expirations=None, password_reuses=None, prevent_password_with_username=None, tenant_id=None):
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lockout_policies and not isinstance(lockout_policies, list):
            raise TypeError("Expected argument 'lockout_policies' to be a list")
        pulumi.set(__self__, "lockout_policies", lockout_policies)
        if min_password_change_intervals and not isinstance(min_password_change_intervals, list):
            raise TypeError("Expected argument 'min_password_change_intervals' to be a list")
        pulumi.set(__self__, "min_password_change_intervals", min_password_change_intervals)
        if password_expirations and not isinstance(password_expirations, list):
            raise TypeError("Expected argument 'password_expirations' to be a list")
        pulumi.set(__self__, "password_expirations", password_expirations)
        if password_reuses and not isinstance(password_reuses, list):
            raise TypeError("Expected argument 'password_reuses' to be a list")
        pulumi.set(__self__, "password_reuses", password_reuses)
        if prevent_password_with_username and not isinstance(prevent_password_with_username, bool):
            raise TypeError("Expected argument 'prevent_password_with_username' to be a bool")
        pulumi.set(__self__, "prevent_password_with_username", prevent_password_with_username)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lockoutPolicies")
    def lockout_policies(self) -> Sequence['outputs.GetAppidApmLockoutPolicyResult']:
        return pulumi.get(self, "lockout_policies")

    @_builtins.property
    @pulumi.getter(name="minPasswordChangeIntervals")
    def min_password_change_intervals(self) -> Sequence['outputs.GetAppidApmMinPasswordChangeIntervalResult']:
        return pulumi.get(self, "min_password_change_intervals")

    @_builtins.property
    @pulumi.getter(name="passwordExpirations")
    def password_expirations(self) -> Sequence['outputs.GetAppidApmPasswordExpirationResult']:
        return pulumi.get(self, "password_expirations")

    @_builtins.property
    @pulumi.getter(name="passwordReuses")
    def password_reuses(self) -> Sequence['outputs.GetAppidApmPasswordReusResult']:
        return pulumi.get(self, "password_reuses")

    @_builtins.property
    @pulumi.getter(name="preventPasswordWithUsername")
    def prevent_password_with_username(self) -> _builtins.bool:
        return pulumi.get(self, "prevent_password_with_username")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.str:
        return pulumi.get(self, "tenant_id")


class AwaitableGetAppidApmResult(GetAppidApmResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppidApmResult(
            enabled=self.enabled,
            id=self.id,
            lockout_policies=self.lockout_policies,
            min_password_change_intervals=self.min_password_change_intervals,
            password_expirations=self.password_expirations,
            password_reuses=self.password_reuses,
            prevent_password_with_username=self.prevent_password_with_username,
            tenant_id=self.tenant_id)


def get_appid_apm(id: Optional[_builtins.str] = None,
                  tenant_id: Optional[_builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppidApmResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getAppidApm:getAppidApm', __args__, opts=opts, typ=GetAppidApmResult, package_ref=_utilities.get_package()).value

    return AwaitableGetAppidApmResult(
        enabled=pulumi.get(__ret__, 'enabled'),
        id=pulumi.get(__ret__, 'id'),
        lockout_policies=pulumi.get(__ret__, 'lockout_policies'),
        min_password_change_intervals=pulumi.get(__ret__, 'min_password_change_intervals'),
        password_expirations=pulumi.get(__ret__, 'password_expirations'),
        password_reuses=pulumi.get(__ret__, 'password_reuses'),
        prevent_password_with_username=pulumi.get(__ret__, 'prevent_password_with_username'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'))
def get_appid_apm_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppidApmResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getAppidApm:getAppidApm', __args__, opts=opts, typ=GetAppidApmResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetAppidApmResult(
        enabled=pulumi.get(__response__, 'enabled'),
        id=pulumi.get(__response__, 'id'),
        lockout_policies=pulumi.get(__response__, 'lockout_policies'),
        min_password_change_intervals=pulumi.get(__response__, 'min_password_change_intervals'),
        password_expirations=pulumi.get(__response__, 'password_expirations'),
        password_reuses=pulumi.get(__response__, 'password_reuses'),
        prevent_password_with_username=pulumi.get(__response__, 'prevent_password_with_username'),
        tenant_id=pulumi.get(__response__, 'tenant_id')))
