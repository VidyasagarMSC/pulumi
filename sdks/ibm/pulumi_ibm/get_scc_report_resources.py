# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSccReportResourcesResult',
    'AwaitableGetSccReportResourcesResult',
    'get_scc_report_resources',
    'get_scc_report_resources_output',
]

@pulumi.output_type
class GetSccReportResourcesResult:
    """
    A collection of values returned by getSccReportResources.
    """
    def __init__(__self__, account_id=None, component_id=None, firsts=None, home_account_id=None, id=None, instance_id=None, report_id=None, resource_name=None, resources=None, sort=None, status=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if component_id and not isinstance(component_id, str):
            raise TypeError("Expected argument 'component_id' to be a str")
        pulumi.set(__self__, "component_id", component_id)
        if firsts and not isinstance(firsts, list):
            raise TypeError("Expected argument 'firsts' to be a list")
        pulumi.set(__self__, "firsts", firsts)
        if home_account_id and not isinstance(home_account_id, str):
            raise TypeError("Expected argument 'home_account_id' to be a str")
        pulumi.set(__self__, "home_account_id", home_account_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if report_id and not isinstance(report_id, str):
            raise TypeError("Expected argument 'report_id' to be a str")
        pulumi.set(__self__, "report_id", report_id)
        if resource_name and not isinstance(resource_name, str):
            raise TypeError("Expected argument 'resource_name' to be a str")
        pulumi.set(__self__, "resource_name", resource_name)
        if resources and not isinstance(resources, list):
            raise TypeError("Expected argument 'resources' to be a list")
        pulumi.set(__self__, "resources", resources)
        if sort and not isinstance(sort, str):
            raise TypeError("Expected argument 'sort' to be a str")
        pulumi.set(__self__, "sort", sort)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="componentId")
    def component_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "component_id")

    @_builtins.property
    @pulumi.getter
    def firsts(self) -> Sequence['outputs.GetSccReportResourcesFirstResult']:
        return pulumi.get(self, "firsts")

    @_builtins.property
    @pulumi.getter(name="homeAccountId")
    def home_account_id(self) -> _builtins.str:
        return pulumi.get(self, "home_account_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="reportId")
    def report_id(self) -> _builtins.str:
        return pulumi.get(self, "report_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetSccReportResourcesResourceResult']:
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter
    def sort(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "status")


class AwaitableGetSccReportResourcesResult(GetSccReportResourcesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSccReportResourcesResult(
            account_id=self.account_id,
            component_id=self.component_id,
            firsts=self.firsts,
            home_account_id=self.home_account_id,
            id=self.id,
            instance_id=self.instance_id,
            report_id=self.report_id,
            resource_name=self.resource_name,
            resources=self.resources,
            sort=self.sort,
            status=self.status)


def get_scc_report_resources(account_id: Optional[_builtins.str] = None,
                             component_id: Optional[_builtins.str] = None,
                             id: Optional[_builtins.str] = None,
                             instance_id: Optional[_builtins.str] = None,
                             report_id: Optional[_builtins.str] = None,
                             resource_name: Optional[_builtins.str] = None,
                             sort: Optional[_builtins.str] = None,
                             status: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSccReportResourcesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['componentId'] = component_id
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['reportId'] = report_id
    __args__['resourceName'] = resource_name
    __args__['sort'] = sort
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSccReportResources:getSccReportResources', __args__, opts=opts, typ=GetSccReportResourcesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSccReportResourcesResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        component_id=pulumi.get(__ret__, 'component_id'),
        firsts=pulumi.get(__ret__, 'firsts'),
        home_account_id=pulumi.get(__ret__, 'home_account_id'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        report_id=pulumi.get(__ret__, 'report_id'),
        resource_name=pulumi.get(__ret__, 'resource_name'),
        resources=pulumi.get(__ret__, 'resources'),
        sort=pulumi.get(__ret__, 'sort'),
        status=pulumi.get(__ret__, 'status'))
def get_scc_report_resources_output(account_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    component_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                    report_id: Optional[pulumi.Input[_builtins.str]] = None,
                                    resource_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    sort: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSccReportResourcesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['componentId'] = component_id
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['reportId'] = report_id
    __args__['resourceName'] = resource_name
    __args__['sort'] = sort
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSccReportResources:getSccReportResources', __args__, opts=opts, typ=GetSccReportResourcesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSccReportResourcesResult(
        account_id=pulumi.get(__response__, 'account_id'),
        component_id=pulumi.get(__response__, 'component_id'),
        firsts=pulumi.get(__response__, 'firsts'),
        home_account_id=pulumi.get(__response__, 'home_account_id'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        report_id=pulumi.get(__response__, 'report_id'),
        resource_name=pulumi.get(__response__, 'resource_name'),
        resources=pulumi.get(__response__, 'resources'),
        sort=pulumi.get(__response__, 'sort'),
        status=pulumi.get(__response__, 'status')))
