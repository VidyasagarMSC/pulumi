# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IamTrustedProfileArgs', 'IamTrustedProfile']

@pulumi.input_type
class IamTrustedProfileArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_trusted_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a IamTrustedProfile resource.
        :param pulumi.Input[_builtins.str] description: The optional description of the trusted profile. The 'description' property is only available if a description was
               provided during a create of a trusted profile.
        :param pulumi.Input[_builtins.str] name: Name of the trusted profile. The name is checked for uniqueness. Therefore trusted profiles with the same names can not
               exist in the same account.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if iam_trusted_profile_id is not None:
            pulumi.set(__self__, "iam_trusted_profile_id", iam_trusted_profile_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The optional description of the trusted profile. The 'description' property is only available if a description was
        provided during a create of a trusted profile.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="iamTrustedProfileId")
    def iam_trusted_profile_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "iam_trusted_profile_id")

    @iam_trusted_profile_id.setter
    def iam_trusted_profile_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_trusted_profile_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the trusted profile. The name is checked for uniqueness. Therefore trusted profiles with the same names can not
        exist in the same account.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _IamTrustedProfileState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 entity_tag: Optional[pulumi.Input[_builtins.str]] = None,
                 histories: Optional[pulumi.Input[Sequence[pulumi.Input['IamTrustedProfileHistoryArgs']]]] = None,
                 iam_id: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_trusted_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ims_account_id: Optional[pulumi.Input[_builtins.float]] = None,
                 ims_user_id: Optional[pulumi.Input[_builtins.float]] = None,
                 modified_at: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 template_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IamTrustedProfile resources.
        :param pulumi.Input[_builtins.str] account_id: ID of the account that this trusted profile belong to.
        :param pulumi.Input[_builtins.str] assignment_id: ID of the assignment that was used to create an enterprise-managed trusted profile in your account. When returned, this
               indicates that the trusted profile is created from and managed by a template in the root enterprise account.
        :param pulumi.Input[_builtins.str] created_at: If set contains a date time string of the creation date in ISO format.
        :param pulumi.Input[_builtins.str] crn: Cloud Resource Name of the item. Example Cloud Resource Name:
               'crn:v1:bluemix:public:iam-identity:us-south:a/myaccount::profile:Profile-94497d0d-2ac3-41bf-a993-a49d1b14627c'.
        :param pulumi.Input[_builtins.str] description: The optional description of the trusted profile. The 'description' property is only available if a description was
               provided during a create of a trusted profile.
        :param pulumi.Input[_builtins.str] entity_tag: Version of the trusted profile details object. You need to specify this value when updating the trusted profile to avoid
               stale updates.
        :param pulumi.Input[Sequence[pulumi.Input['IamTrustedProfileHistoryArgs']]] histories: History of the trusted profile.
        :param pulumi.Input[_builtins.str] iam_id: The iam_id of this trusted profile.
        :param pulumi.Input[_builtins.float] ims_account_id: IMS acount ID of the trusted profile.
        :param pulumi.Input[_builtins.float] ims_user_id: IMS user ID of the trusted profile.
        :param pulumi.Input[_builtins.str] modified_at: If set contains a date time string of the last modification date in ISO format.
        :param pulumi.Input[_builtins.str] name: Name of the trusted profile. The name is checked for uniqueness. Therefore trusted profiles with the same names can not
               exist in the same account.
        :param pulumi.Input[_builtins.str] profile_id: the unique identifier of the trusted profile. Example:'Profile-94497d0d-2ac3-41bf-a993-a49d1b14627c'.
        :param pulumi.Input[_builtins.str] template_id: ID of the IAM template that was used to create an enterprise-managed trusted profile in your account. When returned,
               this indicates that the trusted profile is created from and managed by a template in the root enterprise account.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if assignment_id is not None:
            pulumi.set(__self__, "assignment_id", assignment_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if entity_tag is not None:
            pulumi.set(__self__, "entity_tag", entity_tag)
        if histories is not None:
            pulumi.set(__self__, "histories", histories)
        if iam_id is not None:
            pulumi.set(__self__, "iam_id", iam_id)
        if iam_trusted_profile_id is not None:
            pulumi.set(__self__, "iam_trusted_profile_id", iam_trusted_profile_id)
        if ims_account_id is not None:
            pulumi.set(__self__, "ims_account_id", ims_account_id)
        if ims_user_id is not None:
            pulumi.set(__self__, "ims_user_id", ims_user_id)
        if modified_at is not None:
            pulumi.set(__self__, "modified_at", modified_at)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if profile_id is not None:
            pulumi.set(__self__, "profile_id", profile_id)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the account that this trusted profile belong to.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_id", value)

    @_builtins.property
    @pulumi.getter(name="assignmentId")
    def assignment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the assignment that was used to create an enterprise-managed trusted profile in your account. When returned, this
        indicates that the trusted profile is created from and managed by a template in the root enterprise account.
        """
        return pulumi.get(self, "assignment_id")

    @assignment_id.setter
    def assignment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "assignment_id", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        If set contains a date time string of the creation date in ISO format.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cloud Resource Name of the item. Example Cloud Resource Name:
        'crn:v1:bluemix:public:iam-identity:us-south:a/myaccount::profile:Profile-94497d0d-2ac3-41bf-a993-a49d1b14627c'.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The optional description of the trusted profile. The 'description' property is only available if a description was
        provided during a create of a trusted profile.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="entityTag")
    def entity_tag(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Version of the trusted profile details object. You need to specify this value when updating the trusted profile to avoid
        stale updates.
        """
        return pulumi.get(self, "entity_tag")

    @entity_tag.setter
    def entity_tag(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entity_tag", value)

    @_builtins.property
    @pulumi.getter
    def histories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IamTrustedProfileHistoryArgs']]]]:
        """
        History of the trusted profile.
        """
        return pulumi.get(self, "histories")

    @histories.setter
    def histories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IamTrustedProfileHistoryArgs']]]]):
        pulumi.set(self, "histories", value)

    @_builtins.property
    @pulumi.getter(name="iamId")
    def iam_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The iam_id of this trusted profile.
        """
        return pulumi.get(self, "iam_id")

    @iam_id.setter
    def iam_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_id", value)

    @_builtins.property
    @pulumi.getter(name="iamTrustedProfileId")
    def iam_trusted_profile_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "iam_trusted_profile_id")

    @iam_trusted_profile_id.setter
    def iam_trusted_profile_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_trusted_profile_id", value)

    @_builtins.property
    @pulumi.getter(name="imsAccountId")
    def ims_account_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        IMS acount ID of the trusted profile.
        """
        return pulumi.get(self, "ims_account_id")

    @ims_account_id.setter
    def ims_account_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ims_account_id", value)

    @_builtins.property
    @pulumi.getter(name="imsUserId")
    def ims_user_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        IMS user ID of the trusted profile.
        """
        return pulumi.get(self, "ims_user_id")

    @ims_user_id.setter
    def ims_user_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ims_user_id", value)

    @_builtins.property
    @pulumi.getter(name="modifiedAt")
    def modified_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        If set contains a date time string of the last modification date in ISO format.
        """
        return pulumi.get(self, "modified_at")

    @modified_at.setter
    def modified_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "modified_at", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the trusted profile. The name is checked for uniqueness. Therefore trusted profiles with the same names can not
        exist in the same account.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        the unique identifier of the trusted profile. Example:'Profile-94497d0d-2ac3-41bf-a993-a49d1b14627c'.
        """
        return pulumi.get(self, "profile_id")

    @profile_id.setter
    def profile_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "profile_id", value)

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the IAM template that was used to create an enterprise-managed trusted profile in your account. When returned,
        this indicates that the trusted profile is created from and managed by a template in the root enterprise account.
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_id", value)


@pulumi.type_token("ibm:index/iamTrustedProfile:IamTrustedProfile")
class IamTrustedProfile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_trusted_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IamTrustedProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: The optional description of the trusted profile. The 'description' property is only available if a description was
               provided during a create of a trusted profile.
        :param pulumi.Input[_builtins.str] name: Name of the trusted profile. The name is checked for uniqueness. Therefore trusted profiles with the same names can not
               exist in the same account.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[IamTrustedProfileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IamTrustedProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IamTrustedProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IamTrustedProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_trusted_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IamTrustedProfileArgs.__new__(IamTrustedProfileArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["iam_trusted_profile_id"] = iam_trusted_profile_id
            __props__.__dict__["name"] = name
            __props__.__dict__["account_id"] = None
            __props__.__dict__["assignment_id"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["entity_tag"] = None
            __props__.__dict__["histories"] = None
            __props__.__dict__["iam_id"] = None
            __props__.__dict__["ims_account_id"] = None
            __props__.__dict__["ims_user_id"] = None
            __props__.__dict__["modified_at"] = None
            __props__.__dict__["profile_id"] = None
            __props__.__dict__["template_id"] = None
        super(IamTrustedProfile, __self__).__init__(
            'ibm:index/iamTrustedProfile:IamTrustedProfile',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[_builtins.str]] = None,
            assignment_id: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            entity_tag: Optional[pulumi.Input[_builtins.str]] = None,
            histories: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamTrustedProfileHistoryArgs', 'IamTrustedProfileHistoryArgsDict']]]]] = None,
            iam_id: Optional[pulumi.Input[_builtins.str]] = None,
            iam_trusted_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
            ims_account_id: Optional[pulumi.Input[_builtins.float]] = None,
            ims_user_id: Optional[pulumi.Input[_builtins.float]] = None,
            modified_at: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            profile_id: Optional[pulumi.Input[_builtins.str]] = None,
            template_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'IamTrustedProfile':
        """
        Get an existing IamTrustedProfile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] account_id: ID of the account that this trusted profile belong to.
        :param pulumi.Input[_builtins.str] assignment_id: ID of the assignment that was used to create an enterprise-managed trusted profile in your account. When returned, this
               indicates that the trusted profile is created from and managed by a template in the root enterprise account.
        :param pulumi.Input[_builtins.str] created_at: If set contains a date time string of the creation date in ISO format.
        :param pulumi.Input[_builtins.str] crn: Cloud Resource Name of the item. Example Cloud Resource Name:
               'crn:v1:bluemix:public:iam-identity:us-south:a/myaccount::profile:Profile-94497d0d-2ac3-41bf-a993-a49d1b14627c'.
        :param pulumi.Input[_builtins.str] description: The optional description of the trusted profile. The 'description' property is only available if a description was
               provided during a create of a trusted profile.
        :param pulumi.Input[_builtins.str] entity_tag: Version of the trusted profile details object. You need to specify this value when updating the trusted profile to avoid
               stale updates.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IamTrustedProfileHistoryArgs', 'IamTrustedProfileHistoryArgsDict']]]] histories: History of the trusted profile.
        :param pulumi.Input[_builtins.str] iam_id: The iam_id of this trusted profile.
        :param pulumi.Input[_builtins.float] ims_account_id: IMS acount ID of the trusted profile.
        :param pulumi.Input[_builtins.float] ims_user_id: IMS user ID of the trusted profile.
        :param pulumi.Input[_builtins.str] modified_at: If set contains a date time string of the last modification date in ISO format.
        :param pulumi.Input[_builtins.str] name: Name of the trusted profile. The name is checked for uniqueness. Therefore trusted profiles with the same names can not
               exist in the same account.
        :param pulumi.Input[_builtins.str] profile_id: the unique identifier of the trusted profile. Example:'Profile-94497d0d-2ac3-41bf-a993-a49d1b14627c'.
        :param pulumi.Input[_builtins.str] template_id: ID of the IAM template that was used to create an enterprise-managed trusted profile in your account. When returned,
               this indicates that the trusted profile is created from and managed by a template in the root enterprise account.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IamTrustedProfileState.__new__(_IamTrustedProfileState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["assignment_id"] = assignment_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["crn"] = crn
        __props__.__dict__["description"] = description
        __props__.__dict__["entity_tag"] = entity_tag
        __props__.__dict__["histories"] = histories
        __props__.__dict__["iam_id"] = iam_id
        __props__.__dict__["iam_trusted_profile_id"] = iam_trusted_profile_id
        __props__.__dict__["ims_account_id"] = ims_account_id
        __props__.__dict__["ims_user_id"] = ims_user_id
        __props__.__dict__["modified_at"] = modified_at
        __props__.__dict__["name"] = name
        __props__.__dict__["profile_id"] = profile_id
        __props__.__dict__["template_id"] = template_id
        return IamTrustedProfile(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[_builtins.str]:
        """
        ID of the account that this trusted profile belong to.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="assignmentId")
    def assignment_id(self) -> pulumi.Output[_builtins.str]:
        """
        ID of the assignment that was used to create an enterprise-managed trusted profile in your account. When returned, this
        indicates that the trusted profile is created from and managed by a template in the root enterprise account.
        """
        return pulumi.get(self, "assignment_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        If set contains a date time string of the creation date in ISO format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        Cloud Resource Name of the item. Example Cloud Resource Name:
        'crn:v1:bluemix:public:iam-identity:us-south:a/myaccount::profile:Profile-94497d0d-2ac3-41bf-a993-a49d1b14627c'.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The optional description of the trusted profile. The 'description' property is only available if a description was
        provided during a create of a trusted profile.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="entityTag")
    def entity_tag(self) -> pulumi.Output[_builtins.str]:
        """
        Version of the trusted profile details object. You need to specify this value when updating the trusted profile to avoid
        stale updates.
        """
        return pulumi.get(self, "entity_tag")

    @_builtins.property
    @pulumi.getter
    def histories(self) -> pulumi.Output[Sequence['outputs.IamTrustedProfileHistory']]:
        """
        History of the trusted profile.
        """
        return pulumi.get(self, "histories")

    @_builtins.property
    @pulumi.getter(name="iamId")
    def iam_id(self) -> pulumi.Output[_builtins.str]:
        """
        The iam_id of this trusted profile.
        """
        return pulumi.get(self, "iam_id")

    @_builtins.property
    @pulumi.getter(name="iamTrustedProfileId")
    def iam_trusted_profile_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "iam_trusted_profile_id")

    @_builtins.property
    @pulumi.getter(name="imsAccountId")
    def ims_account_id(self) -> pulumi.Output[_builtins.float]:
        """
        IMS acount ID of the trusted profile.
        """
        return pulumi.get(self, "ims_account_id")

    @_builtins.property
    @pulumi.getter(name="imsUserId")
    def ims_user_id(self) -> pulumi.Output[_builtins.float]:
        """
        IMS user ID of the trusted profile.
        """
        return pulumi.get(self, "ims_user_id")

    @_builtins.property
    @pulumi.getter(name="modifiedAt")
    def modified_at(self) -> pulumi.Output[_builtins.str]:
        """
        If set contains a date time string of the last modification date in ISO format.
        """
        return pulumi.get(self, "modified_at")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the trusted profile. The name is checked for uniqueness. Therefore trusted profiles with the same names can not
        exist in the same account.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> pulumi.Output[_builtins.str]:
        """
        the unique identifier of the trusted profile. Example:'Profile-94497d0d-2ac3-41bf-a993-a49d1b14627c'.
        """
        return pulumi.get(self, "profile_id")

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> pulumi.Output[_builtins.str]:
        """
        ID of the IAM template that was used to create an enterprise-managed trusted profile in your account. When returned,
        this indicates that the trusted profile is created from and managed by a template in the root enterprise account.
        """
        return pulumi.get(self, "template_id")

