# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['SmIamCredentialsConfigurationArgs', 'SmIamCredentialsConfiguration']

@pulumi.input_type
class SmIamCredentialsConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[_builtins.str],
                 instance_id: pulumi.Input[_builtins.str],
                 disabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sm_iam_credentials_configuration_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a SmIamCredentialsConfiguration resource.
        :param pulumi.Input[_builtins.str] api_key: An IBM Cloud API key that can create and manage service IDs. The API key must be assigned the Editor platform role on
               the Access Groups Service and the Operator platform role on the IAM Identity Service. For more information, see the
               [docs](https://cloud.ibm.com/docs/secrets-manager?topic=secrets-manager-configure-iam-engine).
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Secrets Manager instance.
        :param pulumi.Input[_builtins.bool] disabled: This attribute indicates whether the API key configuration is disabled. If it is set to `true`, the IAM credentials
               engine doesn't use the configured API key for credentials management.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.str] name: A human-readable unique name to assign to your configuration.To protect your privacy, do not use personal data, such as
               your name or location, as an name for your secret.
        :param pulumi.Input[_builtins.str] region: The region of the Secrets Manager instance.
        """
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "instance_id", instance_id)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if sm_iam_credentials_configuration_id is not None:
            pulumi.set(__self__, "sm_iam_credentials_configuration_id", sm_iam_credentials_configuration_id)

    @_builtins.property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[_builtins.str]:
        """
        An IBM Cloud API key that can create and manage service IDs. The API key must be assigned the Editor platform role on
        the Access Groups Service and the Operator platform role on the IAM Identity Service. For more information, see the
        [docs](https://cloud.ibm.com/docs/secrets-manager?topic=secrets-manager-configure-iam-engine).
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "api_key", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the Secrets Manager instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        This attribute indicates whether the API key configuration is disabled. If it is set to `true`, the IAM credentials
        engine doesn't use the configured API key for credentials management.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disabled", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A human-readable unique name to assign to your configuration.To protect your privacy, do not use personal data, such as
        your name or location, as an name for your secret.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the Secrets Manager instance.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="smIamCredentialsConfigurationId")
    def sm_iam_credentials_configuration_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "sm_iam_credentials_configuration_id")

    @sm_iam_credentials_configuration_id.setter
    def sm_iam_credentials_configuration_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sm_iam_credentials_configuration_id", value)


@pulumi.input_type
class _SmIamCredentialsConfigurationState:
    def __init__(__self__, *,
                 api_key: Optional[pulumi.Input[_builtins.str]] = None,
                 config_type: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 disabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_type: Optional[pulumi.Input[_builtins.str]] = None,
                 sm_iam_credentials_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SmIamCredentialsConfiguration resources.
        :param pulumi.Input[_builtins.str] api_key: An IBM Cloud API key that can create and manage service IDs. The API key must be assigned the Editor platform role on
               the Access Groups Service and the Operator platform role on the IAM Identity Service. For more information, see the
               [docs](https://cloud.ibm.com/docs/secrets-manager?topic=secrets-manager-configure-iam-engine).
        :param pulumi.Input[_builtins.str] config_type: The configuration type.
        :param pulumi.Input[_builtins.str] created_at: The date when a resource was created. The date format follows RFC 3339.
        :param pulumi.Input[_builtins.str] created_by: The unique identifier that is associated with the entity that created the secret.
        :param pulumi.Input[_builtins.bool] disabled: This attribute indicates whether the API key configuration is disabled. If it is set to `true`, the IAM credentials
               engine doesn't use the configured API key for credentials management.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] name: A human-readable unique name to assign to your configuration.To protect your privacy, do not use personal data, such as
               your name or location, as an name for your secret.
        :param pulumi.Input[_builtins.str] region: The region of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] secret_type: The secret type. Supported types are arbitrary, certificates (imported, public, and private), IAM credentials,
               key-value, and user credentials.
        :param pulumi.Input[_builtins.str] updated_at: The date when a resource was recently modified. The date format follows RFC 3339.
        """
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if config_type is not None:
            pulumi.set(__self__, "config_type", config_type)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_type is not None:
            pulumi.set(__self__, "secret_type", secret_type)
        if sm_iam_credentials_configuration_id is not None:
            pulumi.set(__self__, "sm_iam_credentials_configuration_id", sm_iam_credentials_configuration_id)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        An IBM Cloud API key that can create and manage service IDs. The API key must be assigned the Editor platform role on
        the Access Groups Service and the Operator platform role on the IAM Identity Service. For more information, see the
        [docs](https://cloud.ibm.com/docs/secrets-manager?topic=secrets-manager-configure-iam-engine).
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "api_key", value)

    @_builtins.property
    @pulumi.getter(name="configType")
    def config_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The configuration type.
        """
        return pulumi.get(self, "config_type")

    @config_type.setter
    def config_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "config_type", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date when a resource was created. The date format follows RFC 3339.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier that is associated with the entity that created the secret.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        This attribute indicates whether the API key configuration is disabled. If it is set to `true`, the IAM credentials
        engine doesn't use the configured API key for credentials management.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disabled", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the Secrets Manager instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A human-readable unique name to assign to your configuration.To protect your privacy, do not use personal data, such as
        your name or location, as an name for your secret.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the Secrets Manager instance.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The secret type. Supported types are arbitrary, certificates (imported, public, and private), IAM credentials,
        key-value, and user credentials.
        """
        return pulumi.get(self, "secret_type")

    @secret_type.setter
    def secret_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_type", value)

    @_builtins.property
    @pulumi.getter(name="smIamCredentialsConfigurationId")
    def sm_iam_credentials_configuration_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "sm_iam_credentials_configuration_id")

    @sm_iam_credentials_configuration_id.setter
    def sm_iam_credentials_configuration_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sm_iam_credentials_configuration_id", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date when a resource was recently modified. The date format follows RFC 3339.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("ibm:index/smIamCredentialsConfiguration:SmIamCredentialsConfiguration")
class SmIamCredentialsConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_key: Optional[pulumi.Input[_builtins.str]] = None,
                 disabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sm_iam_credentials_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a SmIamCredentialsConfiguration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] api_key: An IBM Cloud API key that can create and manage service IDs. The API key must be assigned the Editor platform role on
               the Access Groups Service and the Operator platform role on the IAM Identity Service. For more information, see the
               [docs](https://cloud.ibm.com/docs/secrets-manager?topic=secrets-manager-configure-iam-engine).
        :param pulumi.Input[_builtins.bool] disabled: This attribute indicates whether the API key configuration is disabled. If it is set to `true`, the IAM credentials
               engine doesn't use the configured API key for credentials management.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] name: A human-readable unique name to assign to your configuration.To protect your privacy, do not use personal data, such as
               your name or location, as an name for your secret.
        :param pulumi.Input[_builtins.str] region: The region of the Secrets Manager instance.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SmIamCredentialsConfigurationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SmIamCredentialsConfiguration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SmIamCredentialsConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SmIamCredentialsConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_key: Optional[pulumi.Input[_builtins.str]] = None,
                 disabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sm_iam_credentials_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SmIamCredentialsConfigurationArgs.__new__(SmIamCredentialsConfigurationArgs)

            if api_key is None and not opts.urn:
                raise TypeError("Missing required property 'api_key'")
            __props__.__dict__["api_key"] = None if api_key is None else pulumi.Output.secret(api_key)
            __props__.__dict__["disabled"] = disabled
            __props__.__dict__["endpoint_type"] = endpoint_type
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["sm_iam_credentials_configuration_id"] = sm_iam_credentials_configuration_id
            __props__.__dict__["config_type"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["secret_type"] = None
            __props__.__dict__["updated_at"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["apiKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(SmIamCredentialsConfiguration, __self__).__init__(
            'ibm:index/smIamCredentialsConfiguration:SmIamCredentialsConfiguration',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            api_key: Optional[pulumi.Input[_builtins.str]] = None,
            config_type: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            created_by: Optional[pulumi.Input[_builtins.str]] = None,
            disabled: Optional[pulumi.Input[_builtins.bool]] = None,
            endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            secret_type: Optional[pulumi.Input[_builtins.str]] = None,
            sm_iam_credentials_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'SmIamCredentialsConfiguration':
        """
        Get an existing SmIamCredentialsConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] api_key: An IBM Cloud API key that can create and manage service IDs. The API key must be assigned the Editor platform role on
               the Access Groups Service and the Operator platform role on the IAM Identity Service. For more information, see the
               [docs](https://cloud.ibm.com/docs/secrets-manager?topic=secrets-manager-configure-iam-engine).
        :param pulumi.Input[_builtins.str] config_type: The configuration type.
        :param pulumi.Input[_builtins.str] created_at: The date when a resource was created. The date format follows RFC 3339.
        :param pulumi.Input[_builtins.str] created_by: The unique identifier that is associated with the entity that created the secret.
        :param pulumi.Input[_builtins.bool] disabled: This attribute indicates whether the API key configuration is disabled. If it is set to `true`, the IAM credentials
               engine doesn't use the configured API key for credentials management.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] name: A human-readable unique name to assign to your configuration.To protect your privacy, do not use personal data, such as
               your name or location, as an name for your secret.
        :param pulumi.Input[_builtins.str] region: The region of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] secret_type: The secret type. Supported types are arbitrary, certificates (imported, public, and private), IAM credentials,
               key-value, and user credentials.
        :param pulumi.Input[_builtins.str] updated_at: The date when a resource was recently modified. The date format follows RFC 3339.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SmIamCredentialsConfigurationState.__new__(_SmIamCredentialsConfigurationState)

        __props__.__dict__["api_key"] = api_key
        __props__.__dict__["config_type"] = config_type
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["disabled"] = disabled
        __props__.__dict__["endpoint_type"] = endpoint_type
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["secret_type"] = secret_type
        __props__.__dict__["sm_iam_credentials_configuration_id"] = sm_iam_credentials_configuration_id
        __props__.__dict__["updated_at"] = updated_at
        return SmIamCredentialsConfiguration(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Output[_builtins.str]:
        """
        An IBM Cloud API key that can create and manage service IDs. The API key must be assigned the Editor platform role on
        the Access Groups Service and the Operator platform role on the IAM Identity Service. For more information, see the
        [docs](https://cloud.ibm.com/docs/secrets-manager?topic=secrets-manager-configure-iam-engine).
        """
        return pulumi.get(self, "api_key")

    @_builtins.property
    @pulumi.getter(name="configType")
    def config_type(self) -> pulumi.Output[_builtins.str]:
        """
        The configuration type.
        """
        return pulumi.get(self, "config_type")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date when a resource was created. The date format follows RFC 3339.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier that is associated with the entity that created the secret.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def disabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        This attribute indicates whether the API key configuration is disabled. If it is set to `true`, the IAM credentials
        engine doesn't use the configured API key for credentials management.
        """
        return pulumi.get(self, "disabled")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the Secrets Manager instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        A human-readable unique name to assign to your configuration.To protect your privacy, do not use personal data, such as
        your name or location, as an name for your secret.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region of the Secrets Manager instance.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> pulumi.Output[_builtins.str]:
        """
        The secret type. Supported types are arbitrary, certificates (imported, public, and private), IAM credentials,
        key-value, and user credentials.
        """
        return pulumi.get(self, "secret_type")

    @_builtins.property
    @pulumi.getter(name="smIamCredentialsConfigurationId")
    def sm_iam_credentials_configuration_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "sm_iam_credentials_configuration_id")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date when a resource was recently modified. The date format follows RFC 3339.
        """
        return pulumi.get(self, "updated_at")

