# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetCisDnsRecordsResult',
    'AwaitableGetCisDnsRecordsResult',
    'get_cis_dns_records',
    'get_cis_dns_records_output',
]

@pulumi.output_type
class GetCisDnsRecordsResult:
    """
    A collection of values returned by getCisDnsRecords.
    """
    def __init__(__self__, cis_dns_records=None, cis_id=None, domain_id=None, file=None, id=None, timeouts=None):
        if cis_dns_records and not isinstance(cis_dns_records, list):
            raise TypeError("Expected argument 'cis_dns_records' to be a list")
        pulumi.set(__self__, "cis_dns_records", cis_dns_records)
        if cis_id and not isinstance(cis_id, str):
            raise TypeError("Expected argument 'cis_id' to be a str")
        pulumi.set(__self__, "cis_id", cis_id)
        if domain_id and not isinstance(domain_id, str):
            raise TypeError("Expected argument 'domain_id' to be a str")
        pulumi.set(__self__, "domain_id", domain_id)
        if file and not isinstance(file, str):
            raise TypeError("Expected argument 'file' to be a str")
        pulumi.set(__self__, "file", file)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if timeouts and not isinstance(timeouts, dict):
            raise TypeError("Expected argument 'timeouts' to be a dict")
        pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="cisDnsRecords")
    def cis_dns_records(self) -> Sequence['outputs.GetCisDnsRecordsCisDnsRecordResult']:
        return pulumi.get(self, "cis_dns_records")

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> _builtins.str:
        return pulumi.get(self, "cis_id")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter
    def file(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "file")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional['outputs.GetCisDnsRecordsTimeoutsResult']:
        return pulumi.get(self, "timeouts")


class AwaitableGetCisDnsRecordsResult(GetCisDnsRecordsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCisDnsRecordsResult(
            cis_dns_records=self.cis_dns_records,
            cis_id=self.cis_id,
            domain_id=self.domain_id,
            file=self.file,
            id=self.id,
            timeouts=self.timeouts)


def get_cis_dns_records(cis_id: Optional[_builtins.str] = None,
                        domain_id: Optional[_builtins.str] = None,
                        file: Optional[_builtins.str] = None,
                        id: Optional[_builtins.str] = None,
                        timeouts: Optional[Union['GetCisDnsRecordsTimeoutsArgs', 'GetCisDnsRecordsTimeoutsArgsDict']] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCisDnsRecordsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cisId'] = cis_id
    __args__['domainId'] = domain_id
    __args__['file'] = file
    __args__['id'] = id
    __args__['timeouts'] = timeouts
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCisDnsRecords:getCisDnsRecords', __args__, opts=opts, typ=GetCisDnsRecordsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCisDnsRecordsResult(
        cis_dns_records=pulumi.get(__ret__, 'cis_dns_records'),
        cis_id=pulumi.get(__ret__, 'cis_id'),
        domain_id=pulumi.get(__ret__, 'domain_id'),
        file=pulumi.get(__ret__, 'file'),
        id=pulumi.get(__ret__, 'id'),
        timeouts=pulumi.get(__ret__, 'timeouts'))
def get_cis_dns_records_output(cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                               domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                               file: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               timeouts: Optional[pulumi.Input[Optional[Union['GetCisDnsRecordsTimeoutsArgs', 'GetCisDnsRecordsTimeoutsArgsDict']]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCisDnsRecordsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cisId'] = cis_id
    __args__['domainId'] = domain_id
    __args__['file'] = file
    __args__['id'] = id
    __args__['timeouts'] = timeouts
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCisDnsRecords:getCisDnsRecords', __args__, opts=opts, typ=GetCisDnsRecordsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCisDnsRecordsResult(
        cis_dns_records=pulumi.get(__response__, 'cis_dns_records'),
        cis_id=pulumi.get(__response__, 'cis_id'),
        domain_id=pulumi.get(__response__, 'domain_id'),
        file=pulumi.get(__response__, 'file'),
        id=pulumi.get(__response__, 'id'),
        timeouts=pulumi.get(__response__, 'timeouts')))
