# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IamServicePolicyArgs', 'IamServicePolicy']

@pulumi.input_type
class IamServicePolicyArgs:
    def __init__(__self__, *,
                 roles: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 account_management: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_id: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_service_id: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_service_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pattern: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_attributes: Optional[pulumi.Input[Sequence[pulumi.Input['IamServicePolicyResourceAttributeArgs']]]] = None,
                 resource_tags: Optional[pulumi.Input[Sequence[pulumi.Input['IamServicePolicyResourceTagArgs']]]] = None,
                 resources: Optional[pulumi.Input['IamServicePolicyResourcesArgs']] = None,
                 rule_conditions: Optional[pulumi.Input[Sequence[pulumi.Input['IamServicePolicyRuleConditionArgs']]]] = None,
                 rule_operator: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 transaction_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a IamServicePolicy resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] roles: Role names of the policy definition
        :param pulumi.Input[_builtins.bool] account_management: Give access to all account management services
        :param pulumi.Input[_builtins.str] description: Description of the Policy
        :param pulumi.Input[_builtins.str] iam_id: IAM ID of ServiceID
        :param pulumi.Input[_builtins.str] iam_service_id: UUID of ServiceID
        :param pulumi.Input[_builtins.str] pattern: Pattern rule follows for time-based condition
        :param pulumi.Input[Sequence[pulumi.Input['IamServicePolicyResourceAttributeArgs']]] resource_attributes: Set resource attributes.
        :param pulumi.Input[Sequence[pulumi.Input['IamServicePolicyResourceTagArgs']]] resource_tags: Set access management tags.
        :param pulumi.Input[Sequence[pulumi.Input['IamServicePolicyRuleConditionArgs']]] rule_conditions: Rule conditions enforced by the policy
        :param pulumi.Input[_builtins.str] rule_operator: Operator that multiple rule conditions are evaluated over
        :param pulumi.Input[_builtins.str] transaction_id: Set transactionID for debug
        """
        pulumi.set(__self__, "roles", roles)
        if account_management is not None:
            pulumi.set(__self__, "account_management", account_management)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if iam_id is not None:
            pulumi.set(__self__, "iam_id", iam_id)
        if iam_service_id is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""iam_service_id is deprecated: Deprecated""")
        if iam_service_id is not None:
            pulumi.set(__self__, "iam_service_id", iam_service_id)
        if iam_service_policy_id is not None:
            pulumi.set(__self__, "iam_service_policy_id", iam_service_policy_id)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if resource_attributes is not None:
            pulumi.set(__self__, "resource_attributes", resource_attributes)
        if resource_tags is not None:
            pulumi.set(__self__, "resource_tags", resource_tags)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if rule_conditions is not None:
            pulumi.set(__self__, "rule_conditions", rule_conditions)
        if rule_operator is not None:
            pulumi.set(__self__, "rule_operator", rule_operator)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if transaction_id is not None:
            pulumi.set(__self__, "transaction_id", transaction_id)

    @_builtins.property
    @pulumi.getter
    def roles(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Role names of the policy definition
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "roles", value)

    @_builtins.property
    @pulumi.getter(name="accountManagement")
    def account_management(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Give access to all account management services
        """
        return pulumi.get(self, "account_management")

    @account_management.setter
    def account_management(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "account_management", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the Policy
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="iamId")
    def iam_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IAM ID of ServiceID
        """
        return pulumi.get(self, "iam_id")

    @iam_id.setter
    def iam_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_id", value)

    @_builtins.property
    @pulumi.getter(name="iamServiceId")
    @_utilities.deprecated("""Deprecated""")
    def iam_service_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        UUID of ServiceID
        """
        return pulumi.get(self, "iam_service_id")

    @iam_service_id.setter
    def iam_service_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_service_id", value)

    @_builtins.property
    @pulumi.getter(name="iamServicePolicyId")
    def iam_service_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "iam_service_policy_id")

    @iam_service_policy_id.setter
    def iam_service_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_service_policy_id", value)

    @_builtins.property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Pattern rule follows for time-based condition
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pattern", value)

    @_builtins.property
    @pulumi.getter(name="resourceAttributes")
    def resource_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IamServicePolicyResourceAttributeArgs']]]]:
        """
        Set resource attributes.
        """
        return pulumi.get(self, "resource_attributes")

    @resource_attributes.setter
    def resource_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IamServicePolicyResourceAttributeArgs']]]]):
        pulumi.set(self, "resource_attributes", value)

    @_builtins.property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IamServicePolicyResourceTagArgs']]]]:
        """
        Set access management tags.
        """
        return pulumi.get(self, "resource_tags")

    @resource_tags.setter
    def resource_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IamServicePolicyResourceTagArgs']]]]):
        pulumi.set(self, "resource_tags", value)

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['IamServicePolicyResourcesArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['IamServicePolicyResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @_builtins.property
    @pulumi.getter(name="ruleConditions")
    def rule_conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IamServicePolicyRuleConditionArgs']]]]:
        """
        Rule conditions enforced by the policy
        """
        return pulumi.get(self, "rule_conditions")

    @rule_conditions.setter
    def rule_conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IamServicePolicyRuleConditionArgs']]]]):
        pulumi.set(self, "rule_conditions", value)

    @_builtins.property
    @pulumi.getter(name="ruleOperator")
    def rule_operator(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Operator that multiple rule conditions are evaluated over
        """
        return pulumi.get(self, "rule_operator")

    @rule_operator.setter
    def rule_operator(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rule_operator", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="transactionId")
    def transaction_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set transactionID for debug
        """
        return pulumi.get(self, "transaction_id")

    @transaction_id.setter
    def transaction_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "transaction_id", value)


@pulumi.input_type
class _IamServicePolicyState:
    def __init__(__self__, *,
                 account_management: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_id: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_service_id: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_service_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pattern: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_attributes: Optional[pulumi.Input[Sequence[pulumi.Input['IamServicePolicyResourceAttributeArgs']]]] = None,
                 resource_tags: Optional[pulumi.Input[Sequence[pulumi.Input['IamServicePolicyResourceTagArgs']]]] = None,
                 resources: Optional[pulumi.Input['IamServicePolicyResourcesArgs']] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 rule_conditions: Optional[pulumi.Input[Sequence[pulumi.Input['IamServicePolicyRuleConditionArgs']]]] = None,
                 rule_operator: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 transaction_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IamServicePolicy resources.
        :param pulumi.Input[_builtins.bool] account_management: Give access to all account management services
        :param pulumi.Input[_builtins.str] description: Description of the Policy
        :param pulumi.Input[_builtins.str] iam_id: IAM ID of ServiceID
        :param pulumi.Input[_builtins.str] iam_service_id: UUID of ServiceID
        :param pulumi.Input[_builtins.str] pattern: Pattern rule follows for time-based condition
        :param pulumi.Input[Sequence[pulumi.Input['IamServicePolicyResourceAttributeArgs']]] resource_attributes: Set resource attributes.
        :param pulumi.Input[Sequence[pulumi.Input['IamServicePolicyResourceTagArgs']]] resource_tags: Set access management tags.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] roles: Role names of the policy definition
        :param pulumi.Input[Sequence[pulumi.Input['IamServicePolicyRuleConditionArgs']]] rule_conditions: Rule conditions enforced by the policy
        :param pulumi.Input[_builtins.str] rule_operator: Operator that multiple rule conditions are evaluated over
        :param pulumi.Input[_builtins.str] transaction_id: Set transactionID for debug
        """
        if account_management is not None:
            pulumi.set(__self__, "account_management", account_management)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if iam_id is not None:
            pulumi.set(__self__, "iam_id", iam_id)
        if iam_service_id is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""iam_service_id is deprecated: Deprecated""")
        if iam_service_id is not None:
            pulumi.set(__self__, "iam_service_id", iam_service_id)
        if iam_service_policy_id is not None:
            pulumi.set(__self__, "iam_service_policy_id", iam_service_policy_id)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if resource_attributes is not None:
            pulumi.set(__self__, "resource_attributes", resource_attributes)
        if resource_tags is not None:
            pulumi.set(__self__, "resource_tags", resource_tags)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if rule_conditions is not None:
            pulumi.set(__self__, "rule_conditions", rule_conditions)
        if rule_operator is not None:
            pulumi.set(__self__, "rule_operator", rule_operator)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if transaction_id is not None:
            pulumi.set(__self__, "transaction_id", transaction_id)

    @_builtins.property
    @pulumi.getter(name="accountManagement")
    def account_management(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Give access to all account management services
        """
        return pulumi.get(self, "account_management")

    @account_management.setter
    def account_management(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "account_management", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the Policy
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="iamId")
    def iam_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IAM ID of ServiceID
        """
        return pulumi.get(self, "iam_id")

    @iam_id.setter
    def iam_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_id", value)

    @_builtins.property
    @pulumi.getter(name="iamServiceId")
    @_utilities.deprecated("""Deprecated""")
    def iam_service_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        UUID of ServiceID
        """
        return pulumi.get(self, "iam_service_id")

    @iam_service_id.setter
    def iam_service_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_service_id", value)

    @_builtins.property
    @pulumi.getter(name="iamServicePolicyId")
    def iam_service_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "iam_service_policy_id")

    @iam_service_policy_id.setter
    def iam_service_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_service_policy_id", value)

    @_builtins.property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Pattern rule follows for time-based condition
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pattern", value)

    @_builtins.property
    @pulumi.getter(name="resourceAttributes")
    def resource_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IamServicePolicyResourceAttributeArgs']]]]:
        """
        Set resource attributes.
        """
        return pulumi.get(self, "resource_attributes")

    @resource_attributes.setter
    def resource_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IamServicePolicyResourceAttributeArgs']]]]):
        pulumi.set(self, "resource_attributes", value)

    @_builtins.property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IamServicePolicyResourceTagArgs']]]]:
        """
        Set access management tags.
        """
        return pulumi.get(self, "resource_tags")

    @resource_tags.setter
    def resource_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IamServicePolicyResourceTagArgs']]]]):
        pulumi.set(self, "resource_tags", value)

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['IamServicePolicyResourcesArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['IamServicePolicyResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @_builtins.property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Role names of the policy definition
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "roles", value)

    @_builtins.property
    @pulumi.getter(name="ruleConditions")
    def rule_conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IamServicePolicyRuleConditionArgs']]]]:
        """
        Rule conditions enforced by the policy
        """
        return pulumi.get(self, "rule_conditions")

    @rule_conditions.setter
    def rule_conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IamServicePolicyRuleConditionArgs']]]]):
        pulumi.set(self, "rule_conditions", value)

    @_builtins.property
    @pulumi.getter(name="ruleOperator")
    def rule_operator(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Operator that multiple rule conditions are evaluated over
        """
        return pulumi.get(self, "rule_operator")

    @rule_operator.setter
    def rule_operator(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rule_operator", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="transactionId")
    def transaction_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Set transactionID for debug
        """
        return pulumi.get(self, "transaction_id")

    @transaction_id.setter
    def transaction_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "transaction_id", value)


@pulumi.type_token("ibm:index/iamServicePolicy:IamServicePolicy")
class IamServicePolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_management: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_id: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_service_id: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_service_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pattern: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamServicePolicyResourceAttributeArgs', 'IamServicePolicyResourceAttributeArgsDict']]]]] = None,
                 resource_tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamServicePolicyResourceTagArgs', 'IamServicePolicyResourceTagArgsDict']]]]] = None,
                 resources: Optional[pulumi.Input[Union['IamServicePolicyResourcesArgs', 'IamServicePolicyResourcesArgsDict']]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 rule_conditions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamServicePolicyRuleConditionArgs', 'IamServicePolicyRuleConditionArgsDict']]]]] = None,
                 rule_operator: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 transaction_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IamServicePolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] account_management: Give access to all account management services
        :param pulumi.Input[_builtins.str] description: Description of the Policy
        :param pulumi.Input[_builtins.str] iam_id: IAM ID of ServiceID
        :param pulumi.Input[_builtins.str] iam_service_id: UUID of ServiceID
        :param pulumi.Input[_builtins.str] pattern: Pattern rule follows for time-based condition
        :param pulumi.Input[Sequence[pulumi.Input[Union['IamServicePolicyResourceAttributeArgs', 'IamServicePolicyResourceAttributeArgsDict']]]] resource_attributes: Set resource attributes.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IamServicePolicyResourceTagArgs', 'IamServicePolicyResourceTagArgsDict']]]] resource_tags: Set access management tags.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] roles: Role names of the policy definition
        :param pulumi.Input[Sequence[pulumi.Input[Union['IamServicePolicyRuleConditionArgs', 'IamServicePolicyRuleConditionArgsDict']]]] rule_conditions: Rule conditions enforced by the policy
        :param pulumi.Input[_builtins.str] rule_operator: Operator that multiple rule conditions are evaluated over
        :param pulumi.Input[_builtins.str] transaction_id: Set transactionID for debug
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IamServicePolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IamServicePolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IamServicePolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IamServicePolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_management: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_id: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_service_id: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_service_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pattern: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamServicePolicyResourceAttributeArgs', 'IamServicePolicyResourceAttributeArgsDict']]]]] = None,
                 resource_tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamServicePolicyResourceTagArgs', 'IamServicePolicyResourceTagArgsDict']]]]] = None,
                 resources: Optional[pulumi.Input[Union['IamServicePolicyResourcesArgs', 'IamServicePolicyResourcesArgsDict']]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 rule_conditions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamServicePolicyRuleConditionArgs', 'IamServicePolicyRuleConditionArgsDict']]]]] = None,
                 rule_operator: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 transaction_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IamServicePolicyArgs.__new__(IamServicePolicyArgs)

            __props__.__dict__["account_management"] = account_management
            __props__.__dict__["description"] = description
            __props__.__dict__["iam_id"] = iam_id
            __props__.__dict__["iam_service_id"] = iam_service_id
            __props__.__dict__["iam_service_policy_id"] = iam_service_policy_id
            __props__.__dict__["pattern"] = pattern
            __props__.__dict__["resource_attributes"] = resource_attributes
            __props__.__dict__["resource_tags"] = resource_tags
            __props__.__dict__["resources"] = resources
            if roles is None and not opts.urn:
                raise TypeError("Missing required property 'roles'")
            __props__.__dict__["roles"] = roles
            __props__.__dict__["rule_conditions"] = rule_conditions
            __props__.__dict__["rule_operator"] = rule_operator
            __props__.__dict__["tags"] = tags
            __props__.__dict__["transaction_id"] = transaction_id
        super(IamServicePolicy, __self__).__init__(
            'ibm:index/iamServicePolicy:IamServicePolicy',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_management: Optional[pulumi.Input[_builtins.bool]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            iam_id: Optional[pulumi.Input[_builtins.str]] = None,
            iam_service_id: Optional[pulumi.Input[_builtins.str]] = None,
            iam_service_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            pattern: Optional[pulumi.Input[_builtins.str]] = None,
            resource_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamServicePolicyResourceAttributeArgs', 'IamServicePolicyResourceAttributeArgsDict']]]]] = None,
            resource_tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamServicePolicyResourceTagArgs', 'IamServicePolicyResourceTagArgsDict']]]]] = None,
            resources: Optional[pulumi.Input[Union['IamServicePolicyResourcesArgs', 'IamServicePolicyResourcesArgsDict']]] = None,
            roles: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            rule_conditions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamServicePolicyRuleConditionArgs', 'IamServicePolicyRuleConditionArgsDict']]]]] = None,
            rule_operator: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            transaction_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'IamServicePolicy':
        """
        Get an existing IamServicePolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] account_management: Give access to all account management services
        :param pulumi.Input[_builtins.str] description: Description of the Policy
        :param pulumi.Input[_builtins.str] iam_id: IAM ID of ServiceID
        :param pulumi.Input[_builtins.str] iam_service_id: UUID of ServiceID
        :param pulumi.Input[_builtins.str] pattern: Pattern rule follows for time-based condition
        :param pulumi.Input[Sequence[pulumi.Input[Union['IamServicePolicyResourceAttributeArgs', 'IamServicePolicyResourceAttributeArgsDict']]]] resource_attributes: Set resource attributes.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IamServicePolicyResourceTagArgs', 'IamServicePolicyResourceTagArgsDict']]]] resource_tags: Set access management tags.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] roles: Role names of the policy definition
        :param pulumi.Input[Sequence[pulumi.Input[Union['IamServicePolicyRuleConditionArgs', 'IamServicePolicyRuleConditionArgsDict']]]] rule_conditions: Rule conditions enforced by the policy
        :param pulumi.Input[_builtins.str] rule_operator: Operator that multiple rule conditions are evaluated over
        :param pulumi.Input[_builtins.str] transaction_id: Set transactionID for debug
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IamServicePolicyState.__new__(_IamServicePolicyState)

        __props__.__dict__["account_management"] = account_management
        __props__.__dict__["description"] = description
        __props__.__dict__["iam_id"] = iam_id
        __props__.__dict__["iam_service_id"] = iam_service_id
        __props__.__dict__["iam_service_policy_id"] = iam_service_policy_id
        __props__.__dict__["pattern"] = pattern
        __props__.__dict__["resource_attributes"] = resource_attributes
        __props__.__dict__["resource_tags"] = resource_tags
        __props__.__dict__["resources"] = resources
        __props__.__dict__["roles"] = roles
        __props__.__dict__["rule_conditions"] = rule_conditions
        __props__.__dict__["rule_operator"] = rule_operator
        __props__.__dict__["tags"] = tags
        __props__.__dict__["transaction_id"] = transaction_id
        return IamServicePolicy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accountManagement")
    def account_management(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Give access to all account management services
        """
        return pulumi.get(self, "account_management")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Description of the Policy
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="iamId")
    def iam_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        IAM ID of ServiceID
        """
        return pulumi.get(self, "iam_id")

    @_builtins.property
    @pulumi.getter(name="iamServiceId")
    @_utilities.deprecated("""Deprecated""")
    def iam_service_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        UUID of ServiceID
        """
        return pulumi.get(self, "iam_service_id")

    @_builtins.property
    @pulumi.getter(name="iamServicePolicyId")
    def iam_service_policy_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "iam_service_policy_id")

    @_builtins.property
    @pulumi.getter
    def pattern(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Pattern rule follows for time-based condition
        """
        return pulumi.get(self, "pattern")

    @_builtins.property
    @pulumi.getter(name="resourceAttributes")
    def resource_attributes(self) -> pulumi.Output[Optional[Sequence['outputs.IamServicePolicyResourceAttribute']]]:
        """
        Set resource attributes.
        """
        return pulumi.get(self, "resource_attributes")

    @_builtins.property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> pulumi.Output[Optional[Sequence['outputs.IamServicePolicyResourceTag']]]:
        """
        Set access management tags.
        """
        return pulumi.get(self, "resource_tags")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> pulumi.Output[Optional['outputs.IamServicePolicyResources']]:
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter
    def roles(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Role names of the policy definition
        """
        return pulumi.get(self, "roles")

    @_builtins.property
    @pulumi.getter(name="ruleConditions")
    def rule_conditions(self) -> pulumi.Output[Optional[Sequence['outputs.IamServicePolicyRuleCondition']]]:
        """
        Rule conditions enforced by the policy
        """
        return pulumi.get(self, "rule_conditions")

    @_builtins.property
    @pulumi.getter(name="ruleOperator")
    def rule_operator(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Operator that multiple rule conditions are evaluated over
        """
        return pulumi.get(self, "rule_operator")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="transactionId")
    def transaction_id(self) -> pulumi.Output[_builtins.str]:
        """
        Set transactionID for debug
        """
        return pulumi.get(self, "transaction_id")

