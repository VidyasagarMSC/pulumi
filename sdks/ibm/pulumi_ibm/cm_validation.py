# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CmValidationArgs', 'CmValidation']

@pulumi.input_type
class CmValidationArgs:
    def __init__(__self__, *,
                 version_locator: pulumi.Input[_builtins.str],
                 cm_validation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_variables: Optional[pulumi.Input[Sequence[pulumi.Input['CmValidationEnvironmentVariableArgs']]]] = None,
                 mark_version_consumable: Optional[pulumi.Input[_builtins.bool]] = None,
                 override_values: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 revalidate_if_validated: Optional[pulumi.Input[_builtins.bool]] = None,
                 schematics: Optional[pulumi.Input['CmValidationSchematicsArgs']] = None,
                 x_auth_refresh_token: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CmValidation resource.
        :param pulumi.Input[_builtins.str] version_locator: Version locator - the version that will be validated.
        :param pulumi.Input[Sequence[pulumi.Input['CmValidationEnvironmentVariableArgs']]] environment_variables: Environment variables to include in the schematics workspace.
        :param pulumi.Input[_builtins.bool] mark_version_consumable: If the version should be marked as consumable or "ready to share".
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] override_values: Override values during validation.
        :param pulumi.Input[_builtins.str] region: Validation region.
        :param pulumi.Input[_builtins.bool] revalidate_if_validated: If the version should be revalidated if it is already validated.
        :param pulumi.Input['CmValidationSchematicsArgs'] schematics: Other values to pass to the schematics workspace.
        :param pulumi.Input[_builtins.str] x_auth_refresh_token: Authentication token used to submit validation job.
        """
        pulumi.set(__self__, "version_locator", version_locator)
        if cm_validation_id is not None:
            pulumi.set(__self__, "cm_validation_id", cm_validation_id)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if mark_version_consumable is not None:
            pulumi.set(__self__, "mark_version_consumable", mark_version_consumable)
        if override_values is not None:
            pulumi.set(__self__, "override_values", override_values)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if revalidate_if_validated is not None:
            pulumi.set(__self__, "revalidate_if_validated", revalidate_if_validated)
        if schematics is not None:
            pulumi.set(__self__, "schematics", schematics)
        if x_auth_refresh_token is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""x_auth_refresh_token is deprecated: Deprecated""")
        if x_auth_refresh_token is not None:
            pulumi.set(__self__, "x_auth_refresh_token", x_auth_refresh_token)

    @_builtins.property
    @pulumi.getter(name="versionLocator")
    def version_locator(self) -> pulumi.Input[_builtins.str]:
        """
        Version locator - the version that will be validated.
        """
        return pulumi.get(self, "version_locator")

    @version_locator.setter
    def version_locator(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "version_locator", value)

    @_builtins.property
    @pulumi.getter(name="cmValidationId")
    def cm_validation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cm_validation_id")

    @cm_validation_id.setter
    def cm_validation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cm_validation_id", value)

    @_builtins.property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CmValidationEnvironmentVariableArgs']]]]:
        """
        Environment variables to include in the schematics workspace.
        """
        return pulumi.get(self, "environment_variables")

    @environment_variables.setter
    def environment_variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CmValidationEnvironmentVariableArgs']]]]):
        pulumi.set(self, "environment_variables", value)

    @_builtins.property
    @pulumi.getter(name="markVersionConsumable")
    def mark_version_consumable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If the version should be marked as consumable or "ready to share".
        """
        return pulumi.get(self, "mark_version_consumable")

    @mark_version_consumable.setter
    def mark_version_consumable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "mark_version_consumable", value)

    @_builtins.property
    @pulumi.getter(name="overrideValues")
    def override_values(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Override values during validation.
        """
        return pulumi.get(self, "override_values")

    @override_values.setter
    def override_values(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "override_values", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Validation region.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="revalidateIfValidated")
    def revalidate_if_validated(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If the version should be revalidated if it is already validated.
        """
        return pulumi.get(self, "revalidate_if_validated")

    @revalidate_if_validated.setter
    def revalidate_if_validated(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "revalidate_if_validated", value)

    @_builtins.property
    @pulumi.getter
    def schematics(self) -> Optional[pulumi.Input['CmValidationSchematicsArgs']]:
        """
        Other values to pass to the schematics workspace.
        """
        return pulumi.get(self, "schematics")

    @schematics.setter
    def schematics(self, value: Optional[pulumi.Input['CmValidationSchematicsArgs']]):
        pulumi.set(self, "schematics", value)

    @_builtins.property
    @pulumi.getter(name="xAuthRefreshToken")
    @_utilities.deprecated("""Deprecated""")
    def x_auth_refresh_token(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Authentication token used to submit validation job.
        """
        return pulumi.get(self, "x_auth_refresh_token")

    @x_auth_refresh_token.setter
    def x_auth_refresh_token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "x_auth_refresh_token", value)


@pulumi.input_type
class _CmValidationState:
    def __init__(__self__, *,
                 cm_validation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_variables: Optional[pulumi.Input[Sequence[pulumi.Input['CmValidationEnvironmentVariableArgs']]]] = None,
                 last_operation: Optional[pulumi.Input[_builtins.str]] = None,
                 mark_version_consumable: Optional[pulumi.Input[_builtins.bool]] = None,
                 message: Optional[pulumi.Input[_builtins.str]] = None,
                 override_values: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 requested: Optional[pulumi.Input[_builtins.str]] = None,
                 revalidate_if_validated: Optional[pulumi.Input[_builtins.bool]] = None,
                 schematics: Optional[pulumi.Input['CmValidationSchematicsArgs']] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 validated: Optional[pulumi.Input[_builtins.str]] = None,
                 version_locator: Optional[pulumi.Input[_builtins.str]] = None,
                 x_auth_refresh_token: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CmValidation resources.
        :param pulumi.Input[Sequence[pulumi.Input['CmValidationEnvironmentVariableArgs']]] environment_variables: Environment variables to include in the schematics workspace.
        :param pulumi.Input[_builtins.str] last_operation: Last operation (e.g. submit_deployment, generate_installer, install_offering.
        :param pulumi.Input[_builtins.bool] mark_version_consumable: If the version should be marked as consumable or "ready to share".
        :param pulumi.Input[_builtins.str] message: Any message needing to be conveyed as part of the validation job.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] override_values: Override values during validation.
        :param pulumi.Input[_builtins.str] region: Validation region.
        :param pulumi.Input[_builtins.str] requested: Data and time of last validation request.
        :param pulumi.Input[_builtins.bool] revalidate_if_validated: If the version should be revalidated if it is already validated.
        :param pulumi.Input['CmValidationSchematicsArgs'] schematics: Other values to pass to the schematics workspace.
        :param pulumi.Input[_builtins.str] state: Current validation state - <empty>, in_progress, valid, invalid, expired.
        :param pulumi.Input[_builtins.str] validated: Data and time of last successful validation.
        :param pulumi.Input[_builtins.str] version_locator: Version locator - the version that will be validated.
        :param pulumi.Input[_builtins.str] x_auth_refresh_token: Authentication token used to submit validation job.
        """
        if cm_validation_id is not None:
            pulumi.set(__self__, "cm_validation_id", cm_validation_id)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if last_operation is not None:
            pulumi.set(__self__, "last_operation", last_operation)
        if mark_version_consumable is not None:
            pulumi.set(__self__, "mark_version_consumable", mark_version_consumable)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if override_values is not None:
            pulumi.set(__self__, "override_values", override_values)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if revalidate_if_validated is not None:
            pulumi.set(__self__, "revalidate_if_validated", revalidate_if_validated)
        if schematics is not None:
            pulumi.set(__self__, "schematics", schematics)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if validated is not None:
            pulumi.set(__self__, "validated", validated)
        if version_locator is not None:
            pulumi.set(__self__, "version_locator", version_locator)
        if x_auth_refresh_token is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""x_auth_refresh_token is deprecated: Deprecated""")
        if x_auth_refresh_token is not None:
            pulumi.set(__self__, "x_auth_refresh_token", x_auth_refresh_token)

    @_builtins.property
    @pulumi.getter(name="cmValidationId")
    def cm_validation_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cm_validation_id")

    @cm_validation_id.setter
    def cm_validation_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cm_validation_id", value)

    @_builtins.property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CmValidationEnvironmentVariableArgs']]]]:
        """
        Environment variables to include in the schematics workspace.
        """
        return pulumi.get(self, "environment_variables")

    @environment_variables.setter
    def environment_variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CmValidationEnvironmentVariableArgs']]]]):
        pulumi.set(self, "environment_variables", value)

    @_builtins.property
    @pulumi.getter(name="lastOperation")
    def last_operation(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Last operation (e.g. submit_deployment, generate_installer, install_offering.
        """
        return pulumi.get(self, "last_operation")

    @last_operation.setter
    def last_operation(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_operation", value)

    @_builtins.property
    @pulumi.getter(name="markVersionConsumable")
    def mark_version_consumable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If the version should be marked as consumable or "ready to share".
        """
        return pulumi.get(self, "mark_version_consumable")

    @mark_version_consumable.setter
    def mark_version_consumable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "mark_version_consumable", value)

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Any message needing to be conveyed as part of the validation job.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message", value)

    @_builtins.property
    @pulumi.getter(name="overrideValues")
    def override_values(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Override values during validation.
        """
        return pulumi.get(self, "override_values")

    @override_values.setter
    def override_values(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "override_values", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Validation region.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Data and time of last validation request.
        """
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "requested", value)

    @_builtins.property
    @pulumi.getter(name="revalidateIfValidated")
    def revalidate_if_validated(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If the version should be revalidated if it is already validated.
        """
        return pulumi.get(self, "revalidate_if_validated")

    @revalidate_if_validated.setter
    def revalidate_if_validated(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "revalidate_if_validated", value)

    @_builtins.property
    @pulumi.getter
    def schematics(self) -> Optional[pulumi.Input['CmValidationSchematicsArgs']]:
        """
        Other values to pass to the schematics workspace.
        """
        return pulumi.get(self, "schematics")

    @schematics.setter
    def schematics(self, value: Optional[pulumi.Input['CmValidationSchematicsArgs']]):
        pulumi.set(self, "schematics", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Current validation state - <empty>, in_progress, valid, invalid, expired.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)

    @_builtins.property
    @pulumi.getter
    def validated(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Data and time of last successful validation.
        """
        return pulumi.get(self, "validated")

    @validated.setter
    def validated(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "validated", value)

    @_builtins.property
    @pulumi.getter(name="versionLocator")
    def version_locator(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Version locator - the version that will be validated.
        """
        return pulumi.get(self, "version_locator")

    @version_locator.setter
    def version_locator(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version_locator", value)

    @_builtins.property
    @pulumi.getter(name="xAuthRefreshToken")
    @_utilities.deprecated("""Deprecated""")
    def x_auth_refresh_token(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Authentication token used to submit validation job.
        """
        return pulumi.get(self, "x_auth_refresh_token")

    @x_auth_refresh_token.setter
    def x_auth_refresh_token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "x_auth_refresh_token", value)


@pulumi.type_token("ibm:index/cmValidation:CmValidation")
class CmValidation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cm_validation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_variables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmValidationEnvironmentVariableArgs', 'CmValidationEnvironmentVariableArgsDict']]]]] = None,
                 mark_version_consumable: Optional[pulumi.Input[_builtins.bool]] = None,
                 override_values: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 revalidate_if_validated: Optional[pulumi.Input[_builtins.bool]] = None,
                 schematics: Optional[pulumi.Input[Union['CmValidationSchematicsArgs', 'CmValidationSchematicsArgsDict']]] = None,
                 version_locator: Optional[pulumi.Input[_builtins.str]] = None,
                 x_auth_refresh_token: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a CmValidation resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CmValidationEnvironmentVariableArgs', 'CmValidationEnvironmentVariableArgsDict']]]] environment_variables: Environment variables to include in the schematics workspace.
        :param pulumi.Input[_builtins.bool] mark_version_consumable: If the version should be marked as consumable or "ready to share".
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] override_values: Override values during validation.
        :param pulumi.Input[_builtins.str] region: Validation region.
        :param pulumi.Input[_builtins.bool] revalidate_if_validated: If the version should be revalidated if it is already validated.
        :param pulumi.Input[Union['CmValidationSchematicsArgs', 'CmValidationSchematicsArgsDict']] schematics: Other values to pass to the schematics workspace.
        :param pulumi.Input[_builtins.str] version_locator: Version locator - the version that will be validated.
        :param pulumi.Input[_builtins.str] x_auth_refresh_token: Authentication token used to submit validation job.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CmValidationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CmValidation resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CmValidationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CmValidationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cm_validation_id: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_variables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmValidationEnvironmentVariableArgs', 'CmValidationEnvironmentVariableArgsDict']]]]] = None,
                 mark_version_consumable: Optional[pulumi.Input[_builtins.bool]] = None,
                 override_values: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 revalidate_if_validated: Optional[pulumi.Input[_builtins.bool]] = None,
                 schematics: Optional[pulumi.Input[Union['CmValidationSchematicsArgs', 'CmValidationSchematicsArgsDict']]] = None,
                 version_locator: Optional[pulumi.Input[_builtins.str]] = None,
                 x_auth_refresh_token: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CmValidationArgs.__new__(CmValidationArgs)

            __props__.__dict__["cm_validation_id"] = cm_validation_id
            __props__.__dict__["environment_variables"] = environment_variables
            __props__.__dict__["mark_version_consumable"] = mark_version_consumable
            __props__.__dict__["override_values"] = override_values
            __props__.__dict__["region"] = region
            __props__.__dict__["revalidate_if_validated"] = revalidate_if_validated
            __props__.__dict__["schematics"] = schematics
            if version_locator is None and not opts.urn:
                raise TypeError("Missing required property 'version_locator'")
            __props__.__dict__["version_locator"] = version_locator
            __props__.__dict__["x_auth_refresh_token"] = None if x_auth_refresh_token is None else pulumi.Output.secret(x_auth_refresh_token)
            __props__.__dict__["last_operation"] = None
            __props__.__dict__["message"] = None
            __props__.__dict__["requested"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["validated"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["xAuthRefreshToken"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(CmValidation, __self__).__init__(
            'ibm:index/cmValidation:CmValidation',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cm_validation_id: Optional[pulumi.Input[_builtins.str]] = None,
            environment_variables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmValidationEnvironmentVariableArgs', 'CmValidationEnvironmentVariableArgsDict']]]]] = None,
            last_operation: Optional[pulumi.Input[_builtins.str]] = None,
            mark_version_consumable: Optional[pulumi.Input[_builtins.bool]] = None,
            message: Optional[pulumi.Input[_builtins.str]] = None,
            override_values: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            requested: Optional[pulumi.Input[_builtins.str]] = None,
            revalidate_if_validated: Optional[pulumi.Input[_builtins.bool]] = None,
            schematics: Optional[pulumi.Input[Union['CmValidationSchematicsArgs', 'CmValidationSchematicsArgsDict']]] = None,
            state: Optional[pulumi.Input[_builtins.str]] = None,
            validated: Optional[pulumi.Input[_builtins.str]] = None,
            version_locator: Optional[pulumi.Input[_builtins.str]] = None,
            x_auth_refresh_token: Optional[pulumi.Input[_builtins.str]] = None) -> 'CmValidation':
        """
        Get an existing CmValidation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CmValidationEnvironmentVariableArgs', 'CmValidationEnvironmentVariableArgsDict']]]] environment_variables: Environment variables to include in the schematics workspace.
        :param pulumi.Input[_builtins.str] last_operation: Last operation (e.g. submit_deployment, generate_installer, install_offering.
        :param pulumi.Input[_builtins.bool] mark_version_consumable: If the version should be marked as consumable or "ready to share".
        :param pulumi.Input[_builtins.str] message: Any message needing to be conveyed as part of the validation job.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] override_values: Override values during validation.
        :param pulumi.Input[_builtins.str] region: Validation region.
        :param pulumi.Input[_builtins.str] requested: Data and time of last validation request.
        :param pulumi.Input[_builtins.bool] revalidate_if_validated: If the version should be revalidated if it is already validated.
        :param pulumi.Input[Union['CmValidationSchematicsArgs', 'CmValidationSchematicsArgsDict']] schematics: Other values to pass to the schematics workspace.
        :param pulumi.Input[_builtins.str] state: Current validation state - <empty>, in_progress, valid, invalid, expired.
        :param pulumi.Input[_builtins.str] validated: Data and time of last successful validation.
        :param pulumi.Input[_builtins.str] version_locator: Version locator - the version that will be validated.
        :param pulumi.Input[_builtins.str] x_auth_refresh_token: Authentication token used to submit validation job.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CmValidationState.__new__(_CmValidationState)

        __props__.__dict__["cm_validation_id"] = cm_validation_id
        __props__.__dict__["environment_variables"] = environment_variables
        __props__.__dict__["last_operation"] = last_operation
        __props__.__dict__["mark_version_consumable"] = mark_version_consumable
        __props__.__dict__["message"] = message
        __props__.__dict__["override_values"] = override_values
        __props__.__dict__["region"] = region
        __props__.__dict__["requested"] = requested
        __props__.__dict__["revalidate_if_validated"] = revalidate_if_validated
        __props__.__dict__["schematics"] = schematics
        __props__.__dict__["state"] = state
        __props__.__dict__["validated"] = validated
        __props__.__dict__["version_locator"] = version_locator
        __props__.__dict__["x_auth_refresh_token"] = x_auth_refresh_token
        return CmValidation(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="cmValidationId")
    def cm_validation_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cm_validation_id")

    @_builtins.property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> pulumi.Output[Optional[Sequence['outputs.CmValidationEnvironmentVariable']]]:
        """
        Environment variables to include in the schematics workspace.
        """
        return pulumi.get(self, "environment_variables")

    @_builtins.property
    @pulumi.getter(name="lastOperation")
    def last_operation(self) -> pulumi.Output[_builtins.str]:
        """
        Last operation (e.g. submit_deployment, generate_installer, install_offering.
        """
        return pulumi.get(self, "last_operation")

    @_builtins.property
    @pulumi.getter(name="markVersionConsumable")
    def mark_version_consumable(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        If the version should be marked as consumable or "ready to share".
        """
        return pulumi.get(self, "mark_version_consumable")

    @_builtins.property
    @pulumi.getter
    def message(self) -> pulumi.Output[_builtins.str]:
        """
        Any message needing to be conveyed as part of the validation job.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter(name="overrideValues")
    def override_values(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Override values during validation.
        """
        return pulumi.get(self, "override_values")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Validation region.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def requested(self) -> pulumi.Output[_builtins.str]:
        """
        Data and time of last validation request.
        """
        return pulumi.get(self, "requested")

    @_builtins.property
    @pulumi.getter(name="revalidateIfValidated")
    def revalidate_if_validated(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        If the version should be revalidated if it is already validated.
        """
        return pulumi.get(self, "revalidate_if_validated")

    @_builtins.property
    @pulumi.getter
    def schematics(self) -> pulumi.Output[Optional['outputs.CmValidationSchematics']]:
        """
        Other values to pass to the schematics workspace.
        """
        return pulumi.get(self, "schematics")

    @_builtins.property
    @pulumi.getter
    def state(self) -> pulumi.Output[_builtins.str]:
        """
        Current validation state - <empty>, in_progress, valid, invalid, expired.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def validated(self) -> pulumi.Output[_builtins.str]:
        """
        Data and time of last successful validation.
        """
        return pulumi.get(self, "validated")

    @_builtins.property
    @pulumi.getter(name="versionLocator")
    def version_locator(self) -> pulumi.Output[_builtins.str]:
        """
        Version locator - the version that will be validated.
        """
        return pulumi.get(self, "version_locator")

    @_builtins.property
    @pulumi.getter(name="xAuthRefreshToken")
    @_utilities.deprecated("""Deprecated""")
    def x_auth_refresh_token(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Authentication token used to submit validation job.
        """
        return pulumi.get(self, "x_auth_refresh_token")

