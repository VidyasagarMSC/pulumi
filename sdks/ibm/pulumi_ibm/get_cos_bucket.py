# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCosBucketResult',
    'AwaitableGetCosBucketResult',
    'get_cos_bucket',
    'get_cos_bucket_output',
]

@pulumi.output_type
class GetCosBucketResult:
    """
    A collection of values returned by getCosBucket.
    """
    def __init__(__self__, abort_incomplete_multipart_upload_days=None, activity_trackings=None, allowed_ips=None, archive_rules=None, bucket_name=None, bucket_region=None, bucket_type=None, crn=None, cross_region_location=None, endpoint_type=None, expire_rules=None, hard_quota=None, id=None, key_protect=None, kms_key_crn=None, lifecycle_rules=None, metrics_monitorings=None, noncurrent_version_expirations=None, object_lock=None, object_lock_configurations=None, object_versionings=None, region_location=None, replication_rules=None, resource_instance_id=None, retention_rules=None, s3_endpoint_direct=None, s3_endpoint_private=None, s3_endpoint_public=None, satellite_location_id=None, single_site_location=None, storage_class=None, website_configurations=None, website_endpoint=None):
        if abort_incomplete_multipart_upload_days and not isinstance(abort_incomplete_multipart_upload_days, list):
            raise TypeError("Expected argument 'abort_incomplete_multipart_upload_days' to be a list")
        pulumi.set(__self__, "abort_incomplete_multipart_upload_days", abort_incomplete_multipart_upload_days)
        if activity_trackings and not isinstance(activity_trackings, list):
            raise TypeError("Expected argument 'activity_trackings' to be a list")
        pulumi.set(__self__, "activity_trackings", activity_trackings)
        if allowed_ips and not isinstance(allowed_ips, list):
            raise TypeError("Expected argument 'allowed_ips' to be a list")
        pulumi.set(__self__, "allowed_ips", allowed_ips)
        if archive_rules and not isinstance(archive_rules, list):
            raise TypeError("Expected argument 'archive_rules' to be a list")
        pulumi.set(__self__, "archive_rules", archive_rules)
        if bucket_name and not isinstance(bucket_name, str):
            raise TypeError("Expected argument 'bucket_name' to be a str")
        pulumi.set(__self__, "bucket_name", bucket_name)
        if bucket_region and not isinstance(bucket_region, str):
            raise TypeError("Expected argument 'bucket_region' to be a str")
        pulumi.set(__self__, "bucket_region", bucket_region)
        if bucket_type and not isinstance(bucket_type, str):
            raise TypeError("Expected argument 'bucket_type' to be a str")
        pulumi.set(__self__, "bucket_type", bucket_type)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if cross_region_location and not isinstance(cross_region_location, str):
            raise TypeError("Expected argument 'cross_region_location' to be a str")
        pulumi.set(__self__, "cross_region_location", cross_region_location)
        if endpoint_type and not isinstance(endpoint_type, str):
            raise TypeError("Expected argument 'endpoint_type' to be a str")
        pulumi.set(__self__, "endpoint_type", endpoint_type)
        if expire_rules and not isinstance(expire_rules, list):
            raise TypeError("Expected argument 'expire_rules' to be a list")
        pulumi.set(__self__, "expire_rules", expire_rules)
        if hard_quota and not isinstance(hard_quota, float):
            raise TypeError("Expected argument 'hard_quota' to be a float")
        pulumi.set(__self__, "hard_quota", hard_quota)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if key_protect and not isinstance(key_protect, str):
            raise TypeError("Expected argument 'key_protect' to be a str")
        pulumi.set(__self__, "key_protect", key_protect)
        if kms_key_crn and not isinstance(kms_key_crn, str):
            raise TypeError("Expected argument 'kms_key_crn' to be a str")
        pulumi.set(__self__, "kms_key_crn", kms_key_crn)
        if lifecycle_rules and not isinstance(lifecycle_rules, list):
            raise TypeError("Expected argument 'lifecycle_rules' to be a list")
        pulumi.set(__self__, "lifecycle_rules", lifecycle_rules)
        if metrics_monitorings and not isinstance(metrics_monitorings, list):
            raise TypeError("Expected argument 'metrics_monitorings' to be a list")
        pulumi.set(__self__, "metrics_monitorings", metrics_monitorings)
        if noncurrent_version_expirations and not isinstance(noncurrent_version_expirations, list):
            raise TypeError("Expected argument 'noncurrent_version_expirations' to be a list")
        pulumi.set(__self__, "noncurrent_version_expirations", noncurrent_version_expirations)
        if object_lock and not isinstance(object_lock, bool):
            raise TypeError("Expected argument 'object_lock' to be a bool")
        pulumi.set(__self__, "object_lock", object_lock)
        if object_lock_configurations and not isinstance(object_lock_configurations, list):
            raise TypeError("Expected argument 'object_lock_configurations' to be a list")
        pulumi.set(__self__, "object_lock_configurations", object_lock_configurations)
        if object_versionings and not isinstance(object_versionings, list):
            raise TypeError("Expected argument 'object_versionings' to be a list")
        pulumi.set(__self__, "object_versionings", object_versionings)
        if region_location and not isinstance(region_location, str):
            raise TypeError("Expected argument 'region_location' to be a str")
        pulumi.set(__self__, "region_location", region_location)
        if replication_rules and not isinstance(replication_rules, list):
            raise TypeError("Expected argument 'replication_rules' to be a list")
        pulumi.set(__self__, "replication_rules", replication_rules)
        if resource_instance_id and not isinstance(resource_instance_id, str):
            raise TypeError("Expected argument 'resource_instance_id' to be a str")
        pulumi.set(__self__, "resource_instance_id", resource_instance_id)
        if retention_rules and not isinstance(retention_rules, list):
            raise TypeError("Expected argument 'retention_rules' to be a list")
        pulumi.set(__self__, "retention_rules", retention_rules)
        if s3_endpoint_direct and not isinstance(s3_endpoint_direct, str):
            raise TypeError("Expected argument 's3_endpoint_direct' to be a str")
        pulumi.set(__self__, "s3_endpoint_direct", s3_endpoint_direct)
        if s3_endpoint_private and not isinstance(s3_endpoint_private, str):
            raise TypeError("Expected argument 's3_endpoint_private' to be a str")
        pulumi.set(__self__, "s3_endpoint_private", s3_endpoint_private)
        if s3_endpoint_public and not isinstance(s3_endpoint_public, str):
            raise TypeError("Expected argument 's3_endpoint_public' to be a str")
        pulumi.set(__self__, "s3_endpoint_public", s3_endpoint_public)
        if satellite_location_id and not isinstance(satellite_location_id, str):
            raise TypeError("Expected argument 'satellite_location_id' to be a str")
        pulumi.set(__self__, "satellite_location_id", satellite_location_id)
        if single_site_location and not isinstance(single_site_location, str):
            raise TypeError("Expected argument 'single_site_location' to be a str")
        pulumi.set(__self__, "single_site_location", single_site_location)
        if storage_class and not isinstance(storage_class, str):
            raise TypeError("Expected argument 'storage_class' to be a str")
        pulumi.set(__self__, "storage_class", storage_class)
        if website_configurations and not isinstance(website_configurations, list):
            raise TypeError("Expected argument 'website_configurations' to be a list")
        pulumi.set(__self__, "website_configurations", website_configurations)
        if website_endpoint and not isinstance(website_endpoint, str):
            raise TypeError("Expected argument 'website_endpoint' to be a str")
        pulumi.set(__self__, "website_endpoint", website_endpoint)

    @_builtins.property
    @pulumi.getter(name="abortIncompleteMultipartUploadDays")
    def abort_incomplete_multipart_upload_days(self) -> Sequence['outputs.GetCosBucketAbortIncompleteMultipartUploadDayResult']:
        return pulumi.get(self, "abort_incomplete_multipart_upload_days")

    @_builtins.property
    @pulumi.getter(name="activityTrackings")
    def activity_trackings(self) -> Sequence['outputs.GetCosBucketActivityTrackingResult']:
        return pulumi.get(self, "activity_trackings")

    @_builtins.property
    @pulumi.getter(name="allowedIps")
    def allowed_ips(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "allowed_ips")

    @_builtins.property
    @pulumi.getter(name="archiveRules")
    def archive_rules(self) -> Sequence['outputs.GetCosBucketArchiveRuleResult']:
        return pulumi.get(self, "archive_rules")

    @_builtins.property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> _builtins.str:
        return pulumi.get(self, "bucket_name")

    @_builtins.property
    @pulumi.getter(name="bucketRegion")
    def bucket_region(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "bucket_region")

    @_builtins.property
    @pulumi.getter(name="bucketType")
    def bucket_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "bucket_type")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="crossRegionLocation")
    def cross_region_location(self) -> _builtins.str:
        return pulumi.get(self, "cross_region_location")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter(name="expireRules")
    def expire_rules(self) -> Sequence['outputs.GetCosBucketExpireRuleResult']:
        return pulumi.get(self, "expire_rules")

    @_builtins.property
    @pulumi.getter(name="hardQuota")
    def hard_quota(self) -> _builtins.float:
        return pulumi.get(self, "hard_quota")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="keyProtect")
    def key_protect(self) -> _builtins.str:
        return pulumi.get(self, "key_protect")

    @_builtins.property
    @pulumi.getter(name="kmsKeyCrn")
    def kms_key_crn(self) -> _builtins.str:
        return pulumi.get(self, "kms_key_crn")

    @_builtins.property
    @pulumi.getter(name="lifecycleRules")
    def lifecycle_rules(self) -> Sequence['outputs.GetCosBucketLifecycleRuleResult']:
        return pulumi.get(self, "lifecycle_rules")

    @_builtins.property
    @pulumi.getter(name="metricsMonitorings")
    def metrics_monitorings(self) -> Sequence['outputs.GetCosBucketMetricsMonitoringResult']:
        return pulumi.get(self, "metrics_monitorings")

    @_builtins.property
    @pulumi.getter(name="noncurrentVersionExpirations")
    def noncurrent_version_expirations(self) -> Sequence['outputs.GetCosBucketNoncurrentVersionExpirationResult']:
        return pulumi.get(self, "noncurrent_version_expirations")

    @_builtins.property
    @pulumi.getter(name="objectLock")
    def object_lock(self) -> _builtins.bool:
        return pulumi.get(self, "object_lock")

    @_builtins.property
    @pulumi.getter(name="objectLockConfigurations")
    def object_lock_configurations(self) -> Sequence['outputs.GetCosBucketObjectLockConfigurationResult']:
        return pulumi.get(self, "object_lock_configurations")

    @_builtins.property
    @pulumi.getter(name="objectVersionings")
    def object_versionings(self) -> Sequence['outputs.GetCosBucketObjectVersioningResult']:
        return pulumi.get(self, "object_versionings")

    @_builtins.property
    @pulumi.getter(name="regionLocation")
    def region_location(self) -> _builtins.str:
        return pulumi.get(self, "region_location")

    @_builtins.property
    @pulumi.getter(name="replicationRules")
    def replication_rules(self) -> Sequence['outputs.GetCosBucketReplicationRuleResult']:
        return pulumi.get(self, "replication_rules")

    @_builtins.property
    @pulumi.getter(name="resourceInstanceId")
    def resource_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "resource_instance_id")

    @_builtins.property
    @pulumi.getter(name="retentionRules")
    def retention_rules(self) -> Sequence['outputs.GetCosBucketRetentionRuleResult']:
        return pulumi.get(self, "retention_rules")

    @_builtins.property
    @pulumi.getter(name="s3EndpointDirect")
    def s3_endpoint_direct(self) -> _builtins.str:
        return pulumi.get(self, "s3_endpoint_direct")

    @_builtins.property
    @pulumi.getter(name="s3EndpointPrivate")
    def s3_endpoint_private(self) -> _builtins.str:
        return pulumi.get(self, "s3_endpoint_private")

    @_builtins.property
    @pulumi.getter(name="s3EndpointPublic")
    def s3_endpoint_public(self) -> _builtins.str:
        return pulumi.get(self, "s3_endpoint_public")

    @_builtins.property
    @pulumi.getter(name="satelliteLocationId")
    def satellite_location_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "satellite_location_id")

    @_builtins.property
    @pulumi.getter(name="singleSiteLocation")
    def single_site_location(self) -> _builtins.str:
        return pulumi.get(self, "single_site_location")

    @_builtins.property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> _builtins.str:
        return pulumi.get(self, "storage_class")

    @_builtins.property
    @pulumi.getter(name="websiteConfigurations")
    def website_configurations(self) -> Sequence['outputs.GetCosBucketWebsiteConfigurationResult']:
        return pulumi.get(self, "website_configurations")

    @_builtins.property
    @pulumi.getter(name="websiteEndpoint")
    def website_endpoint(self) -> _builtins.str:
        return pulumi.get(self, "website_endpoint")


class AwaitableGetCosBucketResult(GetCosBucketResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCosBucketResult(
            abort_incomplete_multipart_upload_days=self.abort_incomplete_multipart_upload_days,
            activity_trackings=self.activity_trackings,
            allowed_ips=self.allowed_ips,
            archive_rules=self.archive_rules,
            bucket_name=self.bucket_name,
            bucket_region=self.bucket_region,
            bucket_type=self.bucket_type,
            crn=self.crn,
            cross_region_location=self.cross_region_location,
            endpoint_type=self.endpoint_type,
            expire_rules=self.expire_rules,
            hard_quota=self.hard_quota,
            id=self.id,
            key_protect=self.key_protect,
            kms_key_crn=self.kms_key_crn,
            lifecycle_rules=self.lifecycle_rules,
            metrics_monitorings=self.metrics_monitorings,
            noncurrent_version_expirations=self.noncurrent_version_expirations,
            object_lock=self.object_lock,
            object_lock_configurations=self.object_lock_configurations,
            object_versionings=self.object_versionings,
            region_location=self.region_location,
            replication_rules=self.replication_rules,
            resource_instance_id=self.resource_instance_id,
            retention_rules=self.retention_rules,
            s3_endpoint_direct=self.s3_endpoint_direct,
            s3_endpoint_private=self.s3_endpoint_private,
            s3_endpoint_public=self.s3_endpoint_public,
            satellite_location_id=self.satellite_location_id,
            single_site_location=self.single_site_location,
            storage_class=self.storage_class,
            website_configurations=self.website_configurations,
            website_endpoint=self.website_endpoint)


def get_cos_bucket(bucket_name: Optional[_builtins.str] = None,
                   bucket_region: Optional[_builtins.str] = None,
                   bucket_type: Optional[_builtins.str] = None,
                   endpoint_type: Optional[_builtins.str] = None,
                   id: Optional[_builtins.str] = None,
                   resource_instance_id: Optional[_builtins.str] = None,
                   satellite_location_id: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCosBucketResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['bucketName'] = bucket_name
    __args__['bucketRegion'] = bucket_region
    __args__['bucketType'] = bucket_type
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['resourceInstanceId'] = resource_instance_id
    __args__['satelliteLocationId'] = satellite_location_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCosBucket:getCosBucket', __args__, opts=opts, typ=GetCosBucketResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCosBucketResult(
        abort_incomplete_multipart_upload_days=pulumi.get(__ret__, 'abort_incomplete_multipart_upload_days'),
        activity_trackings=pulumi.get(__ret__, 'activity_trackings'),
        allowed_ips=pulumi.get(__ret__, 'allowed_ips'),
        archive_rules=pulumi.get(__ret__, 'archive_rules'),
        bucket_name=pulumi.get(__ret__, 'bucket_name'),
        bucket_region=pulumi.get(__ret__, 'bucket_region'),
        bucket_type=pulumi.get(__ret__, 'bucket_type'),
        crn=pulumi.get(__ret__, 'crn'),
        cross_region_location=pulumi.get(__ret__, 'cross_region_location'),
        endpoint_type=pulumi.get(__ret__, 'endpoint_type'),
        expire_rules=pulumi.get(__ret__, 'expire_rules'),
        hard_quota=pulumi.get(__ret__, 'hard_quota'),
        id=pulumi.get(__ret__, 'id'),
        key_protect=pulumi.get(__ret__, 'key_protect'),
        kms_key_crn=pulumi.get(__ret__, 'kms_key_crn'),
        lifecycle_rules=pulumi.get(__ret__, 'lifecycle_rules'),
        metrics_monitorings=pulumi.get(__ret__, 'metrics_monitorings'),
        noncurrent_version_expirations=pulumi.get(__ret__, 'noncurrent_version_expirations'),
        object_lock=pulumi.get(__ret__, 'object_lock'),
        object_lock_configurations=pulumi.get(__ret__, 'object_lock_configurations'),
        object_versionings=pulumi.get(__ret__, 'object_versionings'),
        region_location=pulumi.get(__ret__, 'region_location'),
        replication_rules=pulumi.get(__ret__, 'replication_rules'),
        resource_instance_id=pulumi.get(__ret__, 'resource_instance_id'),
        retention_rules=pulumi.get(__ret__, 'retention_rules'),
        s3_endpoint_direct=pulumi.get(__ret__, 's3_endpoint_direct'),
        s3_endpoint_private=pulumi.get(__ret__, 's3_endpoint_private'),
        s3_endpoint_public=pulumi.get(__ret__, 's3_endpoint_public'),
        satellite_location_id=pulumi.get(__ret__, 'satellite_location_id'),
        single_site_location=pulumi.get(__ret__, 'single_site_location'),
        storage_class=pulumi.get(__ret__, 'storage_class'),
        website_configurations=pulumi.get(__ret__, 'website_configurations'),
        website_endpoint=pulumi.get(__ret__, 'website_endpoint'))
def get_cos_bucket_output(bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
                          bucket_region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          bucket_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          endpoint_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          resource_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                          satellite_location_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCosBucketResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['bucketName'] = bucket_name
    __args__['bucketRegion'] = bucket_region
    __args__['bucketType'] = bucket_type
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['resourceInstanceId'] = resource_instance_id
    __args__['satelliteLocationId'] = satellite_location_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCosBucket:getCosBucket', __args__, opts=opts, typ=GetCosBucketResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCosBucketResult(
        abort_incomplete_multipart_upload_days=pulumi.get(__response__, 'abort_incomplete_multipart_upload_days'),
        activity_trackings=pulumi.get(__response__, 'activity_trackings'),
        allowed_ips=pulumi.get(__response__, 'allowed_ips'),
        archive_rules=pulumi.get(__response__, 'archive_rules'),
        bucket_name=pulumi.get(__response__, 'bucket_name'),
        bucket_region=pulumi.get(__response__, 'bucket_region'),
        bucket_type=pulumi.get(__response__, 'bucket_type'),
        crn=pulumi.get(__response__, 'crn'),
        cross_region_location=pulumi.get(__response__, 'cross_region_location'),
        endpoint_type=pulumi.get(__response__, 'endpoint_type'),
        expire_rules=pulumi.get(__response__, 'expire_rules'),
        hard_quota=pulumi.get(__response__, 'hard_quota'),
        id=pulumi.get(__response__, 'id'),
        key_protect=pulumi.get(__response__, 'key_protect'),
        kms_key_crn=pulumi.get(__response__, 'kms_key_crn'),
        lifecycle_rules=pulumi.get(__response__, 'lifecycle_rules'),
        metrics_monitorings=pulumi.get(__response__, 'metrics_monitorings'),
        noncurrent_version_expirations=pulumi.get(__response__, 'noncurrent_version_expirations'),
        object_lock=pulumi.get(__response__, 'object_lock'),
        object_lock_configurations=pulumi.get(__response__, 'object_lock_configurations'),
        object_versionings=pulumi.get(__response__, 'object_versionings'),
        region_location=pulumi.get(__response__, 'region_location'),
        replication_rules=pulumi.get(__response__, 'replication_rules'),
        resource_instance_id=pulumi.get(__response__, 'resource_instance_id'),
        retention_rules=pulumi.get(__response__, 'retention_rules'),
        s3_endpoint_direct=pulumi.get(__response__, 's3_endpoint_direct'),
        s3_endpoint_private=pulumi.get(__response__, 's3_endpoint_private'),
        s3_endpoint_public=pulumi.get(__response__, 's3_endpoint_public'),
        satellite_location_id=pulumi.get(__response__, 'satellite_location_id'),
        single_site_location=pulumi.get(__response__, 'single_site_location'),
        storage_class=pulumi.get(__response__, 'storage_class'),
        website_configurations=pulumi.get(__response__, 'website_configurations'),
        website_endpoint=pulumi.get(__response__, 'website_endpoint')))
