# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsInstanceVolumeAttachmentInitArgs', 'IsInstanceVolumeAttachment']

@pulumi.input_type
class IsInstanceVolumeAttachmentInitArgs:
    def __init__(__self__, *,
                 instance: pulumi.Input[_builtins.str],
                 allowed_use: Optional[pulumi.Input['IsInstanceVolumeAttachmentAllowedUseArgs']] = None,
                 bandwidth: Optional[pulumi.Input[_builtins.float]] = None,
                 capacity: Optional[pulumi.Input[_builtins.float]] = None,
                 delete_volume_on_attachment_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 delete_volume_on_instance_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 encryption_key: Optional[pulumi.Input[_builtins.str]] = None,
                 iops: Optional[pulumi.Input[_builtins.float]] = None,
                 is_instance_volume_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 snapshot: Optional[pulumi.Input[_builtins.str]] = None,
                 snapshot_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['IsInstanceVolumeAttachmentTimeoutsArgs']] = None,
                 volume: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a IsInstanceVolumeAttachment resource.
        :param pulumi.Input[_builtins.str] instance: Instance id
        :param pulumi.Input['IsInstanceVolumeAttachmentAllowedUseArgs'] allowed_use: The usage constraints to be matched against requested instance or bare metal server properties to determine
               compatibility.
        :param pulumi.Input[_builtins.float] bandwidth: The maximum bandwidth (in megabits per second) for the volume. For this property to be specified, the volume
               storage_generation must be 2.
        :param pulumi.Input[_builtins.float] capacity: The capacity of the volume in gigabytes. The specified minimum and maximum capacity values for creating or updating
               volumes may expand in the future.
        :param pulumi.Input[_builtins.bool] delete_volume_on_attachment_delete: If set to true, when deleting the attachment, the volume will also be deleted. Default value for this true.
        :param pulumi.Input[_builtins.bool] delete_volume_on_instance_delete: If set to true, when deleting the instance the volume will also be deleted.
        :param pulumi.Input[_builtins.str] encryption_key: The CRN of the [Key Protect Root Key](https://cloud.ibm.com/docs/key-protect?topic=key-protect-getting-started-tutorial)
               or [Hyper Protect Crypto Service Root Key](https://cloud.ibm.com/docs/hs-crypto?topic=hs-crypto-get-started) for this
               resource.
        :param pulumi.Input[_builtins.float] iops: The maximum I/O operations per second (IOPS) for the volume.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this volume attachment.
        :param pulumi.Input[_builtins.str] profile: The globally unique name for the volume profile to use for this volume.
        :param pulumi.Input[_builtins.str] snapshot: The snapshot ID of the volume to be attached
        :param pulumi.Input[_builtins.str] snapshot_crn: The snapshot crn of the volume to be attached
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: UserTags for the volume instance
        :param pulumi.Input[_builtins.str] volume: Instance id
        :param pulumi.Input[_builtins.str] volume_name: The unique user-defined name for this volume
        """
        pulumi.set(__self__, "instance", instance)
        if allowed_use is not None:
            pulumi.set(__self__, "allowed_use", allowed_use)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if delete_volume_on_attachment_delete is not None:
            pulumi.set(__self__, "delete_volume_on_attachment_delete", delete_volume_on_attachment_delete)
        if delete_volume_on_instance_delete is not None:
            pulumi.set(__self__, "delete_volume_on_instance_delete", delete_volume_on_instance_delete)
        if encryption_key is not None:
            pulumi.set(__self__, "encryption_key", encryption_key)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if is_instance_volume_attachment_id is not None:
            pulumi.set(__self__, "is_instance_volume_attachment_id", is_instance_volume_attachment_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if snapshot is not None:
            pulumi.set(__self__, "snapshot", snapshot)
        if snapshot_crn is not None:
            pulumi.set(__self__, "snapshot_crn", snapshot_crn)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if volume is not None:
            pulumi.set(__self__, "volume", volume)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)

    @_builtins.property
    @pulumi.getter
    def instance(self) -> pulumi.Input[_builtins.str]:
        """
        Instance id
        """
        return pulumi.get(self, "instance")

    @instance.setter
    def instance(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance", value)

    @_builtins.property
    @pulumi.getter(name="allowedUse")
    def allowed_use(self) -> Optional[pulumi.Input['IsInstanceVolumeAttachmentAllowedUseArgs']]:
        """
        The usage constraints to be matched against requested instance or bare metal server properties to determine
        compatibility.
        """
        return pulumi.get(self, "allowed_use")

    @allowed_use.setter
    def allowed_use(self, value: Optional[pulumi.Input['IsInstanceVolumeAttachmentAllowedUseArgs']]):
        pulumi.set(self, "allowed_use", value)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The maximum bandwidth (in megabits per second) for the volume. For this property to be specified, the volume
        storage_generation must be 2.
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "bandwidth", value)

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The capacity of the volume in gigabytes. The specified minimum and maximum capacity values for creating or updating
        volumes may expand in the future.
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "capacity", value)

    @_builtins.property
    @pulumi.getter(name="deleteVolumeOnAttachmentDelete")
    def delete_volume_on_attachment_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, when deleting the attachment, the volume will also be deleted. Default value for this true.
        """
        return pulumi.get(self, "delete_volume_on_attachment_delete")

    @delete_volume_on_attachment_delete.setter
    def delete_volume_on_attachment_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_volume_on_attachment_delete", value)

    @_builtins.property
    @pulumi.getter(name="deleteVolumeOnInstanceDelete")
    def delete_volume_on_instance_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, when deleting the instance the volume will also be deleted.
        """
        return pulumi.get(self, "delete_volume_on_instance_delete")

    @delete_volume_on_instance_delete.setter
    def delete_volume_on_instance_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_volume_on_instance_delete", value)

    @_builtins.property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN of the [Key Protect Root Key](https://cloud.ibm.com/docs/key-protect?topic=key-protect-getting-started-tutorial)
        or [Hyper Protect Crypto Service Root Key](https://cloud.ibm.com/docs/hs-crypto?topic=hs-crypto-get-started) for this
        resource.
        """
        return pulumi.get(self, "encryption_key")

    @encryption_key.setter
    def encryption_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encryption_key", value)

    @_builtins.property
    @pulumi.getter
    def iops(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The maximum I/O operations per second (IOPS) for the volume.
        """
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "iops", value)

    @_builtins.property
    @pulumi.getter(name="isInstanceVolumeAttachmentId")
    def is_instance_volume_attachment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_instance_volume_attachment_id")

    @is_instance_volume_attachment_id.setter
    def is_instance_volume_attachment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_instance_volume_attachment_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user-defined name for this volume attachment.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The globally unique name for the volume profile to use for this volume.
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "profile", value)

    @_builtins.property
    @pulumi.getter
    def snapshot(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The snapshot ID of the volume to be attached
        """
        return pulumi.get(self, "snapshot")

    @snapshot.setter
    def snapshot(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "snapshot", value)

    @_builtins.property
    @pulumi.getter(name="snapshotCrn")
    def snapshot_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The snapshot crn of the volume to be attached
        """
        return pulumi.get(self, "snapshot_crn")

    @snapshot_crn.setter
    def snapshot_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "snapshot_crn", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        UserTags for the volume instance
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsInstanceVolumeAttachmentTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsInstanceVolumeAttachmentTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def volume(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Instance id
        """
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume", value)

    @_builtins.property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique user-defined name for this volume
        """
        return pulumi.get(self, "volume_name")

    @volume_name.setter
    def volume_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume_name", value)


@pulumi.input_type
class _IsInstanceVolumeAttachmentState:
    def __init__(__self__, *,
                 allowed_use: Optional[pulumi.Input['IsInstanceVolumeAttachmentAllowedUseArgs']] = None,
                 bandwidth: Optional[pulumi.Input[_builtins.float]] = None,
                 capacity: Optional[pulumi.Input[_builtins.float]] = None,
                 delete_volume_on_attachment_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 delete_volume_on_instance_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 device: Optional[pulumi.Input[_builtins.str]] = None,
                 encryption_key: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 instance: Optional[pulumi.Input[_builtins.str]] = None,
                 iops: Optional[pulumi.Input[_builtins.float]] = None,
                 is_instance_volume_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 snapshot: Optional[pulumi.Input[_builtins.str]] = None,
                 snapshot_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['IsInstanceVolumeAttachmentTimeoutsArgs']] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 volume: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_deleted: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_href: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsInstanceVolumeAttachment resources.
        :param pulumi.Input['IsInstanceVolumeAttachmentAllowedUseArgs'] allowed_use: The usage constraints to be matched against requested instance or bare metal server properties to determine
               compatibility.
        :param pulumi.Input[_builtins.float] bandwidth: The maximum bandwidth (in megabits per second) for the volume. For this property to be specified, the volume
               storage_generation must be 2.
        :param pulumi.Input[_builtins.float] capacity: The capacity of the volume in gigabytes. The specified minimum and maximum capacity values for creating or updating
               volumes may expand in the future.
        :param pulumi.Input[_builtins.bool] delete_volume_on_attachment_delete: If set to true, when deleting the attachment, the volume will also be deleted. Default value for this true.
        :param pulumi.Input[_builtins.bool] delete_volume_on_instance_delete: If set to true, when deleting the instance the volume will also be deleted.
        :param pulumi.Input[_builtins.str] device: A unique identifier for the device which is exposed to the instance operating system
        :param pulumi.Input[_builtins.str] encryption_key: The CRN of the [Key Protect Root Key](https://cloud.ibm.com/docs/key-protect?topic=key-protect-getting-started-tutorial)
               or [Hyper Protect Crypto Service Root Key](https://cloud.ibm.com/docs/hs-crypto?topic=hs-crypto-get-started) for this
               resource.
        :param pulumi.Input[_builtins.str] href: The URL for this volume attachment
        :param pulumi.Input[_builtins.str] instance: Instance id
        :param pulumi.Input[_builtins.float] iops: The maximum I/O operations per second (IOPS) for the volume.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this volume attachment.
        :param pulumi.Input[_builtins.str] profile: The globally unique name for the volume profile to use for this volume.
        :param pulumi.Input[_builtins.str] snapshot: The snapshot ID of the volume to be attached
        :param pulumi.Input[_builtins.str] snapshot_crn: The snapshot crn of the volume to be attached
        :param pulumi.Input[_builtins.str] status: The status of this volume attachment, one of [ attached, attaching, deleting, detaching ]
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: UserTags for the volume instance
        :param pulumi.Input[_builtins.str] type: The type of volume attachment one of [ boot, data ]
        :param pulumi.Input[_builtins.str] volume: Instance id
        :param pulumi.Input[_builtins.str] volume_attachment_id: The unique identifier for this volume attachment
        :param pulumi.Input[_builtins.str] volume_crn: The CRN for this volume
        :param pulumi.Input[_builtins.str] volume_deleted: Link to documentation about deleted resources
        :param pulumi.Input[_builtins.str] volume_href: The URL for this volume
        :param pulumi.Input[_builtins.str] volume_name: The unique user-defined name for this volume
        """
        if allowed_use is not None:
            pulumi.set(__self__, "allowed_use", allowed_use)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if delete_volume_on_attachment_delete is not None:
            pulumi.set(__self__, "delete_volume_on_attachment_delete", delete_volume_on_attachment_delete)
        if delete_volume_on_instance_delete is not None:
            pulumi.set(__self__, "delete_volume_on_instance_delete", delete_volume_on_instance_delete)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if encryption_key is not None:
            pulumi.set(__self__, "encryption_key", encryption_key)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if instance is not None:
            pulumi.set(__self__, "instance", instance)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if is_instance_volume_attachment_id is not None:
            pulumi.set(__self__, "is_instance_volume_attachment_id", is_instance_volume_attachment_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if snapshot is not None:
            pulumi.set(__self__, "snapshot", snapshot)
        if snapshot_crn is not None:
            pulumi.set(__self__, "snapshot_crn", snapshot_crn)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if volume is not None:
            pulumi.set(__self__, "volume", volume)
        if volume_attachment_id is not None:
            pulumi.set(__self__, "volume_attachment_id", volume_attachment_id)
        if volume_crn is not None:
            pulumi.set(__self__, "volume_crn", volume_crn)
        if volume_deleted is not None:
            pulumi.set(__self__, "volume_deleted", volume_deleted)
        if volume_href is not None:
            pulumi.set(__self__, "volume_href", volume_href)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)

    @_builtins.property
    @pulumi.getter(name="allowedUse")
    def allowed_use(self) -> Optional[pulumi.Input['IsInstanceVolumeAttachmentAllowedUseArgs']]:
        """
        The usage constraints to be matched against requested instance or bare metal server properties to determine
        compatibility.
        """
        return pulumi.get(self, "allowed_use")

    @allowed_use.setter
    def allowed_use(self, value: Optional[pulumi.Input['IsInstanceVolumeAttachmentAllowedUseArgs']]):
        pulumi.set(self, "allowed_use", value)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The maximum bandwidth (in megabits per second) for the volume. For this property to be specified, the volume
        storage_generation must be 2.
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "bandwidth", value)

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The capacity of the volume in gigabytes. The specified minimum and maximum capacity values for creating or updating
        volumes may expand in the future.
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "capacity", value)

    @_builtins.property
    @pulumi.getter(name="deleteVolumeOnAttachmentDelete")
    def delete_volume_on_attachment_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, when deleting the attachment, the volume will also be deleted. Default value for this true.
        """
        return pulumi.get(self, "delete_volume_on_attachment_delete")

    @delete_volume_on_attachment_delete.setter
    def delete_volume_on_attachment_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_volume_on_attachment_delete", value)

    @_builtins.property
    @pulumi.getter(name="deleteVolumeOnInstanceDelete")
    def delete_volume_on_instance_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, when deleting the instance the volume will also be deleted.
        """
        return pulumi.get(self, "delete_volume_on_instance_delete")

    @delete_volume_on_instance_delete.setter
    def delete_volume_on_instance_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_volume_on_instance_delete", value)

    @_builtins.property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A unique identifier for the device which is exposed to the instance operating system
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "device", value)

    @_builtins.property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN of the [Key Protect Root Key](https://cloud.ibm.com/docs/key-protect?topic=key-protect-getting-started-tutorial)
        or [Hyper Protect Crypto Service Root Key](https://cloud.ibm.com/docs/hs-crypto?topic=hs-crypto-get-started) for this
        resource.
        """
        return pulumi.get(self, "encryption_key")

    @encryption_key.setter
    def encryption_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encryption_key", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL for this volume attachment
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter
    def instance(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Instance id
        """
        return pulumi.get(self, "instance")

    @instance.setter
    def instance(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance", value)

    @_builtins.property
    @pulumi.getter
    def iops(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The maximum I/O operations per second (IOPS) for the volume.
        """
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "iops", value)

    @_builtins.property
    @pulumi.getter(name="isInstanceVolumeAttachmentId")
    def is_instance_volume_attachment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_instance_volume_attachment_id")

    @is_instance_volume_attachment_id.setter
    def is_instance_volume_attachment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_instance_volume_attachment_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user-defined name for this volume attachment.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The globally unique name for the volume profile to use for this volume.
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "profile", value)

    @_builtins.property
    @pulumi.getter
    def snapshot(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The snapshot ID of the volume to be attached
        """
        return pulumi.get(self, "snapshot")

    @snapshot.setter
    def snapshot(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "snapshot", value)

    @_builtins.property
    @pulumi.getter(name="snapshotCrn")
    def snapshot_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The snapshot crn of the volume to be attached
        """
        return pulumi.get(self, "snapshot_crn")

    @snapshot_crn.setter
    def snapshot_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "snapshot_crn", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of this volume attachment, one of [ attached, attaching, deleting, detaching ]
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        UserTags for the volume instance
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsInstanceVolumeAttachmentTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsInstanceVolumeAttachmentTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of volume attachment one of [ boot, data ]
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter
    def volume(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Instance id
        """
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume", value)

    @_builtins.property
    @pulumi.getter(name="volumeAttachmentId")
    def volume_attachment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier for this volume attachment
        """
        return pulumi.get(self, "volume_attachment_id")

    @volume_attachment_id.setter
    def volume_attachment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume_attachment_id", value)

    @_builtins.property
    @pulumi.getter(name="volumeCrn")
    def volume_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN for this volume
        """
        return pulumi.get(self, "volume_crn")

    @volume_crn.setter
    def volume_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume_crn", value)

    @_builtins.property
    @pulumi.getter(name="volumeDeleted")
    def volume_deleted(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Link to documentation about deleted resources
        """
        return pulumi.get(self, "volume_deleted")

    @volume_deleted.setter
    def volume_deleted(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume_deleted", value)

    @_builtins.property
    @pulumi.getter(name="volumeHref")
    def volume_href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL for this volume
        """
        return pulumi.get(self, "volume_href")

    @volume_href.setter
    def volume_href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume_href", value)

    @_builtins.property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique user-defined name for this volume
        """
        return pulumi.get(self, "volume_name")

    @volume_name.setter
    def volume_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume_name", value)


@pulumi.type_token("ibm:index/isInstanceVolumeAttachment:IsInstanceVolumeAttachment")
class IsInstanceVolumeAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowed_use: Optional[pulumi.Input[Union['IsInstanceVolumeAttachmentAllowedUseArgs', 'IsInstanceVolumeAttachmentAllowedUseArgsDict']]] = None,
                 bandwidth: Optional[pulumi.Input[_builtins.float]] = None,
                 capacity: Optional[pulumi.Input[_builtins.float]] = None,
                 delete_volume_on_attachment_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 delete_volume_on_instance_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 encryption_key: Optional[pulumi.Input[_builtins.str]] = None,
                 instance: Optional[pulumi.Input[_builtins.str]] = None,
                 iops: Optional[pulumi.Input[_builtins.float]] = None,
                 is_instance_volume_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 snapshot: Optional[pulumi.Input[_builtins.str]] = None,
                 snapshot_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsInstanceVolumeAttachmentTimeoutsArgs', 'IsInstanceVolumeAttachmentTimeoutsArgsDict']]] = None,
                 volume: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IsInstanceVolumeAttachment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['IsInstanceVolumeAttachmentAllowedUseArgs', 'IsInstanceVolumeAttachmentAllowedUseArgsDict']] allowed_use: The usage constraints to be matched against requested instance or bare metal server properties to determine
               compatibility.
        :param pulumi.Input[_builtins.float] bandwidth: The maximum bandwidth (in megabits per second) for the volume. For this property to be specified, the volume
               storage_generation must be 2.
        :param pulumi.Input[_builtins.float] capacity: The capacity of the volume in gigabytes. The specified minimum and maximum capacity values for creating or updating
               volumes may expand in the future.
        :param pulumi.Input[_builtins.bool] delete_volume_on_attachment_delete: If set to true, when deleting the attachment, the volume will also be deleted. Default value for this true.
        :param pulumi.Input[_builtins.bool] delete_volume_on_instance_delete: If set to true, when deleting the instance the volume will also be deleted.
        :param pulumi.Input[_builtins.str] encryption_key: The CRN of the [Key Protect Root Key](https://cloud.ibm.com/docs/key-protect?topic=key-protect-getting-started-tutorial)
               or [Hyper Protect Crypto Service Root Key](https://cloud.ibm.com/docs/hs-crypto?topic=hs-crypto-get-started) for this
               resource.
        :param pulumi.Input[_builtins.str] instance: Instance id
        :param pulumi.Input[_builtins.float] iops: The maximum I/O operations per second (IOPS) for the volume.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this volume attachment.
        :param pulumi.Input[_builtins.str] profile: The globally unique name for the volume profile to use for this volume.
        :param pulumi.Input[_builtins.str] snapshot: The snapshot ID of the volume to be attached
        :param pulumi.Input[_builtins.str] snapshot_crn: The snapshot crn of the volume to be attached
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: UserTags for the volume instance
        :param pulumi.Input[_builtins.str] volume: Instance id
        :param pulumi.Input[_builtins.str] volume_name: The unique user-defined name for this volume
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsInstanceVolumeAttachmentInitArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsInstanceVolumeAttachment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsInstanceVolumeAttachmentInitArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsInstanceVolumeAttachmentInitArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowed_use: Optional[pulumi.Input[Union['IsInstanceVolumeAttachmentAllowedUseArgs', 'IsInstanceVolumeAttachmentAllowedUseArgsDict']]] = None,
                 bandwidth: Optional[pulumi.Input[_builtins.float]] = None,
                 capacity: Optional[pulumi.Input[_builtins.float]] = None,
                 delete_volume_on_attachment_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 delete_volume_on_instance_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 encryption_key: Optional[pulumi.Input[_builtins.str]] = None,
                 instance: Optional[pulumi.Input[_builtins.str]] = None,
                 iops: Optional[pulumi.Input[_builtins.float]] = None,
                 is_instance_volume_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 snapshot: Optional[pulumi.Input[_builtins.str]] = None,
                 snapshot_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsInstanceVolumeAttachmentTimeoutsArgs', 'IsInstanceVolumeAttachmentTimeoutsArgsDict']]] = None,
                 volume: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsInstanceVolumeAttachmentInitArgs.__new__(IsInstanceVolumeAttachmentInitArgs)

            __props__.__dict__["allowed_use"] = allowed_use
            __props__.__dict__["bandwidth"] = bandwidth
            __props__.__dict__["capacity"] = capacity
            __props__.__dict__["delete_volume_on_attachment_delete"] = delete_volume_on_attachment_delete
            __props__.__dict__["delete_volume_on_instance_delete"] = delete_volume_on_instance_delete
            __props__.__dict__["encryption_key"] = encryption_key
            if instance is None and not opts.urn:
                raise TypeError("Missing required property 'instance'")
            __props__.__dict__["instance"] = instance
            __props__.__dict__["iops"] = iops
            __props__.__dict__["is_instance_volume_attachment_id"] = is_instance_volume_attachment_id
            __props__.__dict__["name"] = name
            __props__.__dict__["profile"] = profile
            __props__.__dict__["snapshot"] = snapshot
            __props__.__dict__["snapshot_crn"] = snapshot_crn
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["volume"] = volume
            __props__.__dict__["volume_name"] = volume_name
            __props__.__dict__["device"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["type"] = None
            __props__.__dict__["version"] = None
            __props__.__dict__["volume_attachment_id"] = None
            __props__.__dict__["volume_crn"] = None
            __props__.__dict__["volume_deleted"] = None
            __props__.__dict__["volume_href"] = None
        super(IsInstanceVolumeAttachment, __self__).__init__(
            'ibm:index/isInstanceVolumeAttachment:IsInstanceVolumeAttachment',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allowed_use: Optional[pulumi.Input[Union['IsInstanceVolumeAttachmentAllowedUseArgs', 'IsInstanceVolumeAttachmentAllowedUseArgsDict']]] = None,
            bandwidth: Optional[pulumi.Input[_builtins.float]] = None,
            capacity: Optional[pulumi.Input[_builtins.float]] = None,
            delete_volume_on_attachment_delete: Optional[pulumi.Input[_builtins.bool]] = None,
            delete_volume_on_instance_delete: Optional[pulumi.Input[_builtins.bool]] = None,
            device: Optional[pulumi.Input[_builtins.str]] = None,
            encryption_key: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            instance: Optional[pulumi.Input[_builtins.str]] = None,
            iops: Optional[pulumi.Input[_builtins.float]] = None,
            is_instance_volume_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            profile: Optional[pulumi.Input[_builtins.str]] = None,
            snapshot: Optional[pulumi.Input[_builtins.str]] = None,
            snapshot_crn: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            timeouts: Optional[pulumi.Input[Union['IsInstanceVolumeAttachmentTimeoutsArgs', 'IsInstanceVolumeAttachmentTimeoutsArgsDict']]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None,
            volume: Optional[pulumi.Input[_builtins.str]] = None,
            volume_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
            volume_crn: Optional[pulumi.Input[_builtins.str]] = None,
            volume_deleted: Optional[pulumi.Input[_builtins.str]] = None,
            volume_href: Optional[pulumi.Input[_builtins.str]] = None,
            volume_name: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsInstanceVolumeAttachment':
        """
        Get an existing IsInstanceVolumeAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['IsInstanceVolumeAttachmentAllowedUseArgs', 'IsInstanceVolumeAttachmentAllowedUseArgsDict']] allowed_use: The usage constraints to be matched against requested instance or bare metal server properties to determine
               compatibility.
        :param pulumi.Input[_builtins.float] bandwidth: The maximum bandwidth (in megabits per second) for the volume. For this property to be specified, the volume
               storage_generation must be 2.
        :param pulumi.Input[_builtins.float] capacity: The capacity of the volume in gigabytes. The specified minimum and maximum capacity values for creating or updating
               volumes may expand in the future.
        :param pulumi.Input[_builtins.bool] delete_volume_on_attachment_delete: If set to true, when deleting the attachment, the volume will also be deleted. Default value for this true.
        :param pulumi.Input[_builtins.bool] delete_volume_on_instance_delete: If set to true, when deleting the instance the volume will also be deleted.
        :param pulumi.Input[_builtins.str] device: A unique identifier for the device which is exposed to the instance operating system
        :param pulumi.Input[_builtins.str] encryption_key: The CRN of the [Key Protect Root Key](https://cloud.ibm.com/docs/key-protect?topic=key-protect-getting-started-tutorial)
               or [Hyper Protect Crypto Service Root Key](https://cloud.ibm.com/docs/hs-crypto?topic=hs-crypto-get-started) for this
               resource.
        :param pulumi.Input[_builtins.str] href: The URL for this volume attachment
        :param pulumi.Input[_builtins.str] instance: Instance id
        :param pulumi.Input[_builtins.float] iops: The maximum I/O operations per second (IOPS) for the volume.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this volume attachment.
        :param pulumi.Input[_builtins.str] profile: The globally unique name for the volume profile to use for this volume.
        :param pulumi.Input[_builtins.str] snapshot: The snapshot ID of the volume to be attached
        :param pulumi.Input[_builtins.str] snapshot_crn: The snapshot crn of the volume to be attached
        :param pulumi.Input[_builtins.str] status: The status of this volume attachment, one of [ attached, attaching, deleting, detaching ]
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: UserTags for the volume instance
        :param pulumi.Input[_builtins.str] type: The type of volume attachment one of [ boot, data ]
        :param pulumi.Input[_builtins.str] volume: Instance id
        :param pulumi.Input[_builtins.str] volume_attachment_id: The unique identifier for this volume attachment
        :param pulumi.Input[_builtins.str] volume_crn: The CRN for this volume
        :param pulumi.Input[_builtins.str] volume_deleted: Link to documentation about deleted resources
        :param pulumi.Input[_builtins.str] volume_href: The URL for this volume
        :param pulumi.Input[_builtins.str] volume_name: The unique user-defined name for this volume
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsInstanceVolumeAttachmentState.__new__(_IsInstanceVolumeAttachmentState)

        __props__.__dict__["allowed_use"] = allowed_use
        __props__.__dict__["bandwidth"] = bandwidth
        __props__.__dict__["capacity"] = capacity
        __props__.__dict__["delete_volume_on_attachment_delete"] = delete_volume_on_attachment_delete
        __props__.__dict__["delete_volume_on_instance_delete"] = delete_volume_on_instance_delete
        __props__.__dict__["device"] = device
        __props__.__dict__["encryption_key"] = encryption_key
        __props__.__dict__["href"] = href
        __props__.__dict__["instance"] = instance
        __props__.__dict__["iops"] = iops
        __props__.__dict__["is_instance_volume_attachment_id"] = is_instance_volume_attachment_id
        __props__.__dict__["name"] = name
        __props__.__dict__["profile"] = profile
        __props__.__dict__["snapshot"] = snapshot
        __props__.__dict__["snapshot_crn"] = snapshot_crn
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["type"] = type
        __props__.__dict__["version"] = version
        __props__.__dict__["volume"] = volume
        __props__.__dict__["volume_attachment_id"] = volume_attachment_id
        __props__.__dict__["volume_crn"] = volume_crn
        __props__.__dict__["volume_deleted"] = volume_deleted
        __props__.__dict__["volume_href"] = volume_href
        __props__.__dict__["volume_name"] = volume_name
        return IsInstanceVolumeAttachment(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="allowedUse")
    def allowed_use(self) -> pulumi.Output[Optional['outputs.IsInstanceVolumeAttachmentAllowedUse']]:
        """
        The usage constraints to be matched against requested instance or bare metal server properties to determine
        compatibility.
        """
        return pulumi.get(self, "allowed_use")

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> pulumi.Output[_builtins.float]:
        """
        The maximum bandwidth (in megabits per second) for the volume. For this property to be specified, the volume
        storage_generation must be 2.
        """
        return pulumi.get(self, "bandwidth")

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> pulumi.Output[_builtins.float]:
        """
        The capacity of the volume in gigabytes. The specified minimum and maximum capacity values for creating or updating
        volumes may expand in the future.
        """
        return pulumi.get(self, "capacity")

    @_builtins.property
    @pulumi.getter(name="deleteVolumeOnAttachmentDelete")
    def delete_volume_on_attachment_delete(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        If set to true, when deleting the attachment, the volume will also be deleted. Default value for this true.
        """
        return pulumi.get(self, "delete_volume_on_attachment_delete")

    @_builtins.property
    @pulumi.getter(name="deleteVolumeOnInstanceDelete")
    def delete_volume_on_instance_delete(self) -> pulumi.Output[_builtins.bool]:
        """
        If set to true, when deleting the instance the volume will also be deleted.
        """
        return pulumi.get(self, "delete_volume_on_instance_delete")

    @_builtins.property
    @pulumi.getter
    def device(self) -> pulumi.Output[_builtins.str]:
        """
        A unique identifier for the device which is exposed to the instance operating system
        """
        return pulumi.get(self, "device")

    @_builtins.property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> pulumi.Output[_builtins.str]:
        """
        The CRN of the [Key Protect Root Key](https://cloud.ibm.com/docs/key-protect?topic=key-protect-getting-started-tutorial)
        or [Hyper Protect Crypto Service Root Key](https://cloud.ibm.com/docs/hs-crypto?topic=hs-crypto-get-started) for this
        resource.
        """
        return pulumi.get(self, "encryption_key")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        The URL for this volume attachment
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def instance(self) -> pulumi.Output[_builtins.str]:
        """
        Instance id
        """
        return pulumi.get(self, "instance")

    @_builtins.property
    @pulumi.getter
    def iops(self) -> pulumi.Output[_builtins.float]:
        """
        The maximum I/O operations per second (IOPS) for the volume.
        """
        return pulumi.get(self, "iops")

    @_builtins.property
    @pulumi.getter(name="isInstanceVolumeAttachmentId")
    def is_instance_volume_attachment_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_instance_volume_attachment_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The user-defined name for this volume attachment.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def profile(self) -> pulumi.Output[_builtins.str]:
        """
        The globally unique name for the volume profile to use for this volume.
        """
        return pulumi.get(self, "profile")

    @_builtins.property
    @pulumi.getter
    def snapshot(self) -> pulumi.Output[_builtins.str]:
        """
        The snapshot ID of the volume to be attached
        """
        return pulumi.get(self, "snapshot")

    @_builtins.property
    @pulumi.getter(name="snapshotCrn")
    def snapshot_crn(self) -> pulumi.Output[_builtins.str]:
        """
        The snapshot crn of the volume to be attached
        """
        return pulumi.get(self, "snapshot_crn")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of this volume attachment, one of [ attached, attaching, deleting, detaching ]
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        UserTags for the volume instance
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IsInstanceVolumeAttachmentTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of volume attachment one of [ boot, data ]
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter
    def volume(self) -> pulumi.Output[_builtins.str]:
        """
        Instance id
        """
        return pulumi.get(self, "volume")

    @_builtins.property
    @pulumi.getter(name="volumeAttachmentId")
    def volume_attachment_id(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier for this volume attachment
        """
        return pulumi.get(self, "volume_attachment_id")

    @_builtins.property
    @pulumi.getter(name="volumeCrn")
    def volume_crn(self) -> pulumi.Output[_builtins.str]:
        """
        The CRN for this volume
        """
        return pulumi.get(self, "volume_crn")

    @_builtins.property
    @pulumi.getter(name="volumeDeleted")
    def volume_deleted(self) -> pulumi.Output[_builtins.str]:
        """
        Link to documentation about deleted resources
        """
        return pulumi.get(self, "volume_deleted")

    @_builtins.property
    @pulumi.getter(name="volumeHref")
    def volume_href(self) -> pulumi.Output[_builtins.str]:
        """
        The URL for this volume
        """
        return pulumi.get(self, "volume_href")

    @_builtins.property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> pulumi.Output[_builtins.str]:
        """
        The unique user-defined name for this volume
        """
        return pulumi.get(self, "volume_name")

