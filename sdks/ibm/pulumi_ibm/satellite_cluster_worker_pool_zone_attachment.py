# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['SatelliteClusterWorkerPoolZoneAttachmentArgs', 'SatelliteClusterWorkerPoolZoneAttachment']

@pulumi.input_type
class SatelliteClusterWorkerPoolZoneAttachmentArgs:
    def __init__(__self__, *,
                 cluster: pulumi.Input[_builtins.str],
                 worker_pool: pulumi.Input[_builtins.str],
                 zone: pulumi.Input[_builtins.str],
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 satellite_cluster_worker_pool_zone_attachment_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a SatelliteClusterWorkerPoolZoneAttachment resource.
        :param pulumi.Input[_builtins.str] resource_group_id: The ID of the resource group that the Satellite location is in. To list the resource group ID of the location, use the
               `GET /v2/satellite/getController` API method.
        """
        pulumi.set(__self__, "cluster", cluster)
        pulumi.set(__self__, "worker_pool", worker_pool)
        pulumi.set(__self__, "zone", zone)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if satellite_cluster_worker_pool_zone_attachment_id is not None:
            pulumi.set(__self__, "satellite_cluster_worker_pool_zone_attachment_id", satellite_cluster_worker_pool_zone_attachment_id)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster", value)

    @_builtins.property
    @pulumi.getter(name="workerPool")
    def worker_pool(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "worker_pool")

    @worker_pool.setter
    def worker_pool(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "worker_pool", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "zone", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the resource group that the Satellite location is in. To list the resource group ID of the location, use the
        `GET /v2/satellite/getController` API method.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter(name="satelliteClusterWorkerPoolZoneAttachmentId")
    def satellite_cluster_worker_pool_zone_attachment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "satellite_cluster_worker_pool_zone_attachment_id")

    @satellite_cluster_worker_pool_zone_attachment_id.setter
    def satellite_cluster_worker_pool_zone_attachment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "satellite_cluster_worker_pool_zone_attachment_id", value)


@pulumi.input_type
class _SatelliteClusterWorkerPoolZoneAttachmentState:
    def __init__(__self__, *,
                 autobalance_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 messages: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 satellite_cluster_worker_pool_zone_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 worker_count: Optional[pulumi.Input[_builtins.float]] = None,
                 worker_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SatelliteClusterWorkerPoolZoneAttachment resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] messages: Filter features by a list of comma separated collections.
        :param pulumi.Input[_builtins.str] resource_group_id: The ID of the resource group that the Satellite location is in. To list the resource group ID of the location, use the
               `GET /v2/satellite/getController` API method.
        :param pulumi.Input[_builtins.float] worker_count: Number of workers
        """
        if autobalance_enabled is not None:
            pulumi.set(__self__, "autobalance_enabled", autobalance_enabled)
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if messages is not None:
            pulumi.set(__self__, "messages", messages)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if satellite_cluster_worker_pool_zone_attachment_id is not None:
            pulumi.set(__self__, "satellite_cluster_worker_pool_zone_attachment_id", satellite_cluster_worker_pool_zone_attachment_id)
        if worker_count is not None:
            pulumi.set(__self__, "worker_count", worker_count)
        if worker_pool is not None:
            pulumi.set(__self__, "worker_pool", worker_pool)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter(name="autobalanceEnabled")
    def autobalance_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "autobalance_enabled")

    @autobalance_enabled.setter
    def autobalance_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "autobalance_enabled", value)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster", value)

    @_builtins.property
    @pulumi.getter
    def messages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Filter features by a list of comma separated collections.
        """
        return pulumi.get(self, "messages")

    @messages.setter
    def messages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "messages", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the resource group that the Satellite location is in. To list the resource group ID of the location, use the
        `GET /v2/satellite/getController` API method.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter(name="satelliteClusterWorkerPoolZoneAttachmentId")
    def satellite_cluster_worker_pool_zone_attachment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "satellite_cluster_worker_pool_zone_attachment_id")

    @satellite_cluster_worker_pool_zone_attachment_id.setter
    def satellite_cluster_worker_pool_zone_attachment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "satellite_cluster_worker_pool_zone_attachment_id", value)

    @_builtins.property
    @pulumi.getter(name="workerCount")
    def worker_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Number of workers
        """
        return pulumi.get(self, "worker_count")

    @worker_count.setter
    def worker_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "worker_count", value)

    @_builtins.property
    @pulumi.getter(name="workerPool")
    def worker_pool(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "worker_pool")

    @worker_pool.setter
    def worker_pool(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "worker_pool", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zone", value)


@pulumi.type_token("ibm:index/satelliteClusterWorkerPoolZoneAttachment:SatelliteClusterWorkerPoolZoneAttachment")
class SatelliteClusterWorkerPoolZoneAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 satellite_cluster_worker_pool_zone_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 worker_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a SatelliteClusterWorkerPoolZoneAttachment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] resource_group_id: The ID of the resource group that the Satellite location is in. To list the resource group ID of the location, use the
               `GET /v2/satellite/getController` API method.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SatelliteClusterWorkerPoolZoneAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SatelliteClusterWorkerPoolZoneAttachment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SatelliteClusterWorkerPoolZoneAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SatelliteClusterWorkerPoolZoneAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 satellite_cluster_worker_pool_zone_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 worker_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SatelliteClusterWorkerPoolZoneAttachmentArgs.__new__(SatelliteClusterWorkerPoolZoneAttachmentArgs)

            if cluster is None and not opts.urn:
                raise TypeError("Missing required property 'cluster'")
            __props__.__dict__["cluster"] = cluster
            __props__.__dict__["resource_group_id"] = resource_group_id
            __props__.__dict__["satellite_cluster_worker_pool_zone_attachment_id"] = satellite_cluster_worker_pool_zone_attachment_id
            if worker_pool is None and not opts.urn:
                raise TypeError("Missing required property 'worker_pool'")
            __props__.__dict__["worker_pool"] = worker_pool
            if zone is None and not opts.urn:
                raise TypeError("Missing required property 'zone'")
            __props__.__dict__["zone"] = zone
            __props__.__dict__["autobalance_enabled"] = None
            __props__.__dict__["messages"] = None
            __props__.__dict__["worker_count"] = None
        super(SatelliteClusterWorkerPoolZoneAttachment, __self__).__init__(
            'ibm:index/satelliteClusterWorkerPoolZoneAttachment:SatelliteClusterWorkerPoolZoneAttachment',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            autobalance_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            cluster: Optional[pulumi.Input[_builtins.str]] = None,
            messages: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            satellite_cluster_worker_pool_zone_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
            worker_count: Optional[pulumi.Input[_builtins.float]] = None,
            worker_pool: Optional[pulumi.Input[_builtins.str]] = None,
            zone: Optional[pulumi.Input[_builtins.str]] = None) -> 'SatelliteClusterWorkerPoolZoneAttachment':
        """
        Get an existing SatelliteClusterWorkerPoolZoneAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] messages: Filter features by a list of comma separated collections.
        :param pulumi.Input[_builtins.str] resource_group_id: The ID of the resource group that the Satellite location is in. To list the resource group ID of the location, use the
               `GET /v2/satellite/getController` API method.
        :param pulumi.Input[_builtins.float] worker_count: Number of workers
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SatelliteClusterWorkerPoolZoneAttachmentState.__new__(_SatelliteClusterWorkerPoolZoneAttachmentState)

        __props__.__dict__["autobalance_enabled"] = autobalance_enabled
        __props__.__dict__["cluster"] = cluster
        __props__.__dict__["messages"] = messages
        __props__.__dict__["resource_group_id"] = resource_group_id
        __props__.__dict__["satellite_cluster_worker_pool_zone_attachment_id"] = satellite_cluster_worker_pool_zone_attachment_id
        __props__.__dict__["worker_count"] = worker_count
        __props__.__dict__["worker_pool"] = worker_pool
        __props__.__dict__["zone"] = zone
        return SatelliteClusterWorkerPoolZoneAttachment(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="autobalanceEnabled")
    def autobalance_enabled(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "autobalance_enabled")

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cluster")

    @_builtins.property
    @pulumi.getter
    def messages(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Filter features by a list of comma separated collections.
        """
        return pulumi.get(self, "messages")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The ID of the resource group that the Satellite location is in. To list the resource group ID of the location, use the
        `GET /v2/satellite/getController` API method.
        """
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter(name="satelliteClusterWorkerPoolZoneAttachmentId")
    def satellite_cluster_worker_pool_zone_attachment_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "satellite_cluster_worker_pool_zone_attachment_id")

    @_builtins.property
    @pulumi.getter(name="workerCount")
    def worker_count(self) -> pulumi.Output[_builtins.float]:
        """
        Number of workers
        """
        return pulumi.get(self, "worker_count")

    @_builtins.property
    @pulumi.getter(name="workerPool")
    def worker_pool(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "worker_pool")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "zone")

