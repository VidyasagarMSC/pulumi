# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsDedicatedHostResult',
    'AwaitableGetIsDedicatedHostResult',
    'get_is_dedicated_host',
    'get_is_dedicated_host_output',
]

@pulumi.output_type
class GetIsDedicatedHostResult:
    """
    A collection of values returned by getIsDedicatedHost.
    """
    def __init__(__self__, access_tags=None, available_memory=None, available_vcpus=None, created_at=None, crn=None, disks=None, host_group=None, href=None, id=None, instance_placement_enabled=None, instances=None, lifecycle_state=None, memory=None, name=None, numas=None, profiles=None, provisionable=None, resource_group=None, resource_type=None, socket_count=None, state=None, supported_instance_profiles=None, vcpus=None, zone=None):
        if access_tags and not isinstance(access_tags, list):
            raise TypeError("Expected argument 'access_tags' to be a list")
        pulumi.set(__self__, "access_tags", access_tags)
        if available_memory and not isinstance(available_memory, float):
            raise TypeError("Expected argument 'available_memory' to be a float")
        pulumi.set(__self__, "available_memory", available_memory)
        if available_vcpus and not isinstance(available_vcpus, list):
            raise TypeError("Expected argument 'available_vcpus' to be a list")
        pulumi.set(__self__, "available_vcpus", available_vcpus)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if disks and not isinstance(disks, list):
            raise TypeError("Expected argument 'disks' to be a list")
        pulumi.set(__self__, "disks", disks)
        if host_group and not isinstance(host_group, str):
            raise TypeError("Expected argument 'host_group' to be a str")
        pulumi.set(__self__, "host_group", host_group)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_placement_enabled and not isinstance(instance_placement_enabled, bool):
            raise TypeError("Expected argument 'instance_placement_enabled' to be a bool")
        pulumi.set(__self__, "instance_placement_enabled", instance_placement_enabled)
        if instances and not isinstance(instances, list):
            raise TypeError("Expected argument 'instances' to be a list")
        pulumi.set(__self__, "instances", instances)
        if lifecycle_state and not isinstance(lifecycle_state, str):
            raise TypeError("Expected argument 'lifecycle_state' to be a str")
        pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if memory and not isinstance(memory, float):
            raise TypeError("Expected argument 'memory' to be a float")
        pulumi.set(__self__, "memory", memory)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if numas and not isinstance(numas, list):
            raise TypeError("Expected argument 'numas' to be a list")
        pulumi.set(__self__, "numas", numas)
        if profiles and not isinstance(profiles, list):
            raise TypeError("Expected argument 'profiles' to be a list")
        pulumi.set(__self__, "profiles", profiles)
        if provisionable and not isinstance(provisionable, bool):
            raise TypeError("Expected argument 'provisionable' to be a bool")
        pulumi.set(__self__, "provisionable", provisionable)
        if resource_group and not isinstance(resource_group, str):
            raise TypeError("Expected argument 'resource_group' to be a str")
        pulumi.set(__self__, "resource_group", resource_group)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if socket_count and not isinstance(socket_count, float):
            raise TypeError("Expected argument 'socket_count' to be a float")
        pulumi.set(__self__, "socket_count", socket_count)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if supported_instance_profiles and not isinstance(supported_instance_profiles, list):
            raise TypeError("Expected argument 'supported_instance_profiles' to be a list")
        pulumi.set(__self__, "supported_instance_profiles", supported_instance_profiles)
        if vcpus and not isinstance(vcpus, list):
            raise TypeError("Expected argument 'vcpus' to be a list")
        pulumi.set(__self__, "vcpus", vcpus)
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter(name="availableMemory")
    def available_memory(self) -> _builtins.float:
        return pulumi.get(self, "available_memory")

    @_builtins.property
    @pulumi.getter(name="availableVcpus")
    def available_vcpus(self) -> Sequence['outputs.GetIsDedicatedHostAvailableVcpusResult']:
        return pulumi.get(self, "available_vcpus")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def disks(self) -> Sequence['outputs.GetIsDedicatedHostDiskResult']:
        return pulumi.get(self, "disks")

    @_builtins.property
    @pulumi.getter(name="hostGroup")
    def host_group(self) -> _builtins.str:
        return pulumi.get(self, "host_group")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instancePlacementEnabled")
    def instance_placement_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "instance_placement_enabled")

    @_builtins.property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.GetIsDedicatedHostInstanceResult']:
        return pulumi.get(self, "instances")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> _builtins.str:
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.float:
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def numas(self) -> Sequence['outputs.GetIsDedicatedHostNumaResult']:
        return pulumi.get(self, "numas")

    @_builtins.property
    @pulumi.getter
    def profiles(self) -> Sequence['outputs.GetIsDedicatedHostProfileResult']:
        return pulumi.get(self, "profiles")

    @_builtins.property
    @pulumi.getter
    def provisionable(self) -> _builtins.bool:
        return pulumi.get(self, "provisionable")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> _builtins.str:
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="socketCount")
    def socket_count(self) -> _builtins.float:
        return pulumi.get(self, "socket_count")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="supportedInstanceProfiles")
    def supported_instance_profiles(self) -> Sequence['outputs.GetIsDedicatedHostSupportedInstanceProfileResult']:
        return pulumi.get(self, "supported_instance_profiles")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> Sequence['outputs.GetIsDedicatedHostVcpusResult']:
        return pulumi.get(self, "vcpus")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> _builtins.str:
        return pulumi.get(self, "zone")


class AwaitableGetIsDedicatedHostResult(GetIsDedicatedHostResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsDedicatedHostResult(
            access_tags=self.access_tags,
            available_memory=self.available_memory,
            available_vcpus=self.available_vcpus,
            created_at=self.created_at,
            crn=self.crn,
            disks=self.disks,
            host_group=self.host_group,
            href=self.href,
            id=self.id,
            instance_placement_enabled=self.instance_placement_enabled,
            instances=self.instances,
            lifecycle_state=self.lifecycle_state,
            memory=self.memory,
            name=self.name,
            numas=self.numas,
            profiles=self.profiles,
            provisionable=self.provisionable,
            resource_group=self.resource_group,
            resource_type=self.resource_type,
            socket_count=self.socket_count,
            state=self.state,
            supported_instance_profiles=self.supported_instance_profiles,
            vcpus=self.vcpus,
            zone=self.zone)


def get_is_dedicated_host(host_group: Optional[_builtins.str] = None,
                          id: Optional[_builtins.str] = None,
                          name: Optional[_builtins.str] = None,
                          resource_group: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsDedicatedHostResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['hostGroup'] = host_group
    __args__['id'] = id
    __args__['name'] = name
    __args__['resourceGroup'] = resource_group
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsDedicatedHost:getIsDedicatedHost', __args__, opts=opts, typ=GetIsDedicatedHostResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsDedicatedHostResult(
        access_tags=pulumi.get(__ret__, 'access_tags'),
        available_memory=pulumi.get(__ret__, 'available_memory'),
        available_vcpus=pulumi.get(__ret__, 'available_vcpus'),
        created_at=pulumi.get(__ret__, 'created_at'),
        crn=pulumi.get(__ret__, 'crn'),
        disks=pulumi.get(__ret__, 'disks'),
        host_group=pulumi.get(__ret__, 'host_group'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        instance_placement_enabled=pulumi.get(__ret__, 'instance_placement_enabled'),
        instances=pulumi.get(__ret__, 'instances'),
        lifecycle_state=pulumi.get(__ret__, 'lifecycle_state'),
        memory=pulumi.get(__ret__, 'memory'),
        name=pulumi.get(__ret__, 'name'),
        numas=pulumi.get(__ret__, 'numas'),
        profiles=pulumi.get(__ret__, 'profiles'),
        provisionable=pulumi.get(__ret__, 'provisionable'),
        resource_group=pulumi.get(__ret__, 'resource_group'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        socket_count=pulumi.get(__ret__, 'socket_count'),
        state=pulumi.get(__ret__, 'state'),
        supported_instance_profiles=pulumi.get(__ret__, 'supported_instance_profiles'),
        vcpus=pulumi.get(__ret__, 'vcpus'),
        zone=pulumi.get(__ret__, 'zone'))
def get_is_dedicated_host_output(host_group: Optional[pulumi.Input[_builtins.str]] = None,
                                 id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 name: Optional[pulumi.Input[_builtins.str]] = None,
                                 resource_group: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsDedicatedHostResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['hostGroup'] = host_group
    __args__['id'] = id
    __args__['name'] = name
    __args__['resourceGroup'] = resource_group
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsDedicatedHost:getIsDedicatedHost', __args__, opts=opts, typ=GetIsDedicatedHostResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsDedicatedHostResult(
        access_tags=pulumi.get(__response__, 'access_tags'),
        available_memory=pulumi.get(__response__, 'available_memory'),
        available_vcpus=pulumi.get(__response__, 'available_vcpus'),
        created_at=pulumi.get(__response__, 'created_at'),
        crn=pulumi.get(__response__, 'crn'),
        disks=pulumi.get(__response__, 'disks'),
        host_group=pulumi.get(__response__, 'host_group'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        instance_placement_enabled=pulumi.get(__response__, 'instance_placement_enabled'),
        instances=pulumi.get(__response__, 'instances'),
        lifecycle_state=pulumi.get(__response__, 'lifecycle_state'),
        memory=pulumi.get(__response__, 'memory'),
        name=pulumi.get(__response__, 'name'),
        numas=pulumi.get(__response__, 'numas'),
        profiles=pulumi.get(__response__, 'profiles'),
        provisionable=pulumi.get(__response__, 'provisionable'),
        resource_group=pulumi.get(__response__, 'resource_group'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        socket_count=pulumi.get(__response__, 'socket_count'),
        state=pulumi.get(__response__, 'state'),
        supported_instance_profiles=pulumi.get(__response__, 'supported_instance_profiles'),
        vcpus=pulumi.get(__response__, 'vcpus'),
        zone=pulumi.get(__response__, 'zone')))
