# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSatelliteClusterResult',
    'AwaitableGetSatelliteClusterResult',
    'get_satellite_cluster',
    'get_satellite_cluster_output',
]

@pulumi.output_type
class GetSatelliteClusterResult:
    """
    A collection of values returned by getSatelliteCluster.
    """
    def __init__(__self__, crn=None, health=None, id=None, infrastructure_topology=None, ingress_hostname=None, ingress_secret=None, kube_version=None, location=None, name=None, private_service_endpoint=None, private_service_endpoint_url=None, public_service_endpoint=None, public_service_endpoint_url=None, resource_group_id=None, resource_group_name=None, server_url=None, state=None, status=None, tags=None, worker_count=None, worker_pools=None, workers=None):
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if health and not isinstance(health, str):
            raise TypeError("Expected argument 'health' to be a str")
        pulumi.set(__self__, "health", health)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if infrastructure_topology and not isinstance(infrastructure_topology, str):
            raise TypeError("Expected argument 'infrastructure_topology' to be a str")
        pulumi.set(__self__, "infrastructure_topology", infrastructure_topology)
        if ingress_hostname and not isinstance(ingress_hostname, str):
            raise TypeError("Expected argument 'ingress_hostname' to be a str")
        pulumi.set(__self__, "ingress_hostname", ingress_hostname)
        if ingress_secret and not isinstance(ingress_secret, str):
            raise TypeError("Expected argument 'ingress_secret' to be a str")
        pulumi.set(__self__, "ingress_secret", ingress_secret)
        if kube_version and not isinstance(kube_version, str):
            raise TypeError("Expected argument 'kube_version' to be a str")
        pulumi.set(__self__, "kube_version", kube_version)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if private_service_endpoint and not isinstance(private_service_endpoint, bool):
            raise TypeError("Expected argument 'private_service_endpoint' to be a bool")
        pulumi.set(__self__, "private_service_endpoint", private_service_endpoint)
        if private_service_endpoint_url and not isinstance(private_service_endpoint_url, str):
            raise TypeError("Expected argument 'private_service_endpoint_url' to be a str")
        pulumi.set(__self__, "private_service_endpoint_url", private_service_endpoint_url)
        if public_service_endpoint and not isinstance(public_service_endpoint, bool):
            raise TypeError("Expected argument 'public_service_endpoint' to be a bool")
        pulumi.set(__self__, "public_service_endpoint", public_service_endpoint)
        if public_service_endpoint_url and not isinstance(public_service_endpoint_url, str):
            raise TypeError("Expected argument 'public_service_endpoint_url' to be a str")
        pulumi.set(__self__, "public_service_endpoint_url", public_service_endpoint_url)
        if resource_group_id and not isinstance(resource_group_id, str):
            raise TypeError("Expected argument 'resource_group_id' to be a str")
        pulumi.set(__self__, "resource_group_id", resource_group_id)
        if resource_group_name and not isinstance(resource_group_name, str):
            raise TypeError("Expected argument 'resource_group_name' to be a str")
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if server_url and not isinstance(server_url, str):
            raise TypeError("Expected argument 'server_url' to be a str")
        pulumi.set(__self__, "server_url", server_url)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if worker_count and not isinstance(worker_count, float):
            raise TypeError("Expected argument 'worker_count' to be a float")
        pulumi.set(__self__, "worker_count", worker_count)
        if worker_pools and not isinstance(worker_pools, list):
            raise TypeError("Expected argument 'worker_pools' to be a list")
        pulumi.set(__self__, "worker_pools", worker_pools)
        if workers and not isinstance(workers, list):
            raise TypeError("Expected argument 'workers' to be a list")
        pulumi.set(__self__, "workers", workers)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def health(self) -> _builtins.str:
        return pulumi.get(self, "health")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="infrastructureTopology")
    def infrastructure_topology(self) -> _builtins.str:
        return pulumi.get(self, "infrastructure_topology")

    @_builtins.property
    @pulumi.getter(name="ingressHostname")
    def ingress_hostname(self) -> _builtins.str:
        return pulumi.get(self, "ingress_hostname")

    @_builtins.property
    @pulumi.getter(name="ingressSecret")
    def ingress_secret(self) -> _builtins.str:
        return pulumi.get(self, "ingress_secret")

    @_builtins.property
    @pulumi.getter(name="kubeVersion")
    def kube_version(self) -> _builtins.str:
        return pulumi.get(self, "kube_version")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privateServiceEndpoint")
    def private_service_endpoint(self) -> _builtins.bool:
        return pulumi.get(self, "private_service_endpoint")

    @_builtins.property
    @pulumi.getter(name="privateServiceEndpointUrl")
    def private_service_endpoint_url(self) -> _builtins.str:
        return pulumi.get(self, "private_service_endpoint_url")

    @_builtins.property
    @pulumi.getter(name="publicServiceEndpoint")
    def public_service_endpoint(self) -> _builtins.bool:
        return pulumi.get(self, "public_service_endpoint")

    @_builtins.property
    @pulumi.getter(name="publicServiceEndpointUrl")
    def public_service_endpoint_url(self) -> _builtins.str:
        return pulumi.get(self, "public_service_endpoint_url")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> _builtins.str:
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> _builtins.str:
        return pulumi.get(self, "resource_group_name")

    @_builtins.property
    @pulumi.getter(name="serverUrl")
    def server_url(self) -> _builtins.str:
        return pulumi.get(self, "server_url")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="workerCount")
    def worker_count(self) -> _builtins.float:
        return pulumi.get(self, "worker_count")

    @_builtins.property
    @pulumi.getter(name="workerPools")
    def worker_pools(self) -> Sequence['outputs.GetSatelliteClusterWorkerPoolResult']:
        return pulumi.get(self, "worker_pools")

    @_builtins.property
    @pulumi.getter
    def workers(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "workers")


class AwaitableGetSatelliteClusterResult(GetSatelliteClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSatelliteClusterResult(
            crn=self.crn,
            health=self.health,
            id=self.id,
            infrastructure_topology=self.infrastructure_topology,
            ingress_hostname=self.ingress_hostname,
            ingress_secret=self.ingress_secret,
            kube_version=self.kube_version,
            location=self.location,
            name=self.name,
            private_service_endpoint=self.private_service_endpoint,
            private_service_endpoint_url=self.private_service_endpoint_url,
            public_service_endpoint=self.public_service_endpoint,
            public_service_endpoint_url=self.public_service_endpoint_url,
            resource_group_id=self.resource_group_id,
            resource_group_name=self.resource_group_name,
            server_url=self.server_url,
            state=self.state,
            status=self.status,
            tags=self.tags,
            worker_count=self.worker_count,
            worker_pools=self.worker_pools,
            workers=self.workers)


def get_satellite_cluster(id: Optional[_builtins.str] = None,
                          name: Optional[_builtins.str] = None,
                          resource_group_id: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSatelliteClusterResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['resourceGroupId'] = resource_group_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSatelliteCluster:getSatelliteCluster', __args__, opts=opts, typ=GetSatelliteClusterResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSatelliteClusterResult(
        crn=pulumi.get(__ret__, 'crn'),
        health=pulumi.get(__ret__, 'health'),
        id=pulumi.get(__ret__, 'id'),
        infrastructure_topology=pulumi.get(__ret__, 'infrastructure_topology'),
        ingress_hostname=pulumi.get(__ret__, 'ingress_hostname'),
        ingress_secret=pulumi.get(__ret__, 'ingress_secret'),
        kube_version=pulumi.get(__ret__, 'kube_version'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        private_service_endpoint=pulumi.get(__ret__, 'private_service_endpoint'),
        private_service_endpoint_url=pulumi.get(__ret__, 'private_service_endpoint_url'),
        public_service_endpoint=pulumi.get(__ret__, 'public_service_endpoint'),
        public_service_endpoint_url=pulumi.get(__ret__, 'public_service_endpoint_url'),
        resource_group_id=pulumi.get(__ret__, 'resource_group_id'),
        resource_group_name=pulumi.get(__ret__, 'resource_group_name'),
        server_url=pulumi.get(__ret__, 'server_url'),
        state=pulumi.get(__ret__, 'state'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'),
        worker_count=pulumi.get(__ret__, 'worker_count'),
        worker_pools=pulumi.get(__ret__, 'worker_pools'),
        workers=pulumi.get(__ret__, 'workers'))
def get_satellite_cluster_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 name: Optional[pulumi.Input[_builtins.str]] = None,
                                 resource_group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSatelliteClusterResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['resourceGroupId'] = resource_group_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSatelliteCluster:getSatelliteCluster', __args__, opts=opts, typ=GetSatelliteClusterResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSatelliteClusterResult(
        crn=pulumi.get(__response__, 'crn'),
        health=pulumi.get(__response__, 'health'),
        id=pulumi.get(__response__, 'id'),
        infrastructure_topology=pulumi.get(__response__, 'infrastructure_topology'),
        ingress_hostname=pulumi.get(__response__, 'ingress_hostname'),
        ingress_secret=pulumi.get(__response__, 'ingress_secret'),
        kube_version=pulumi.get(__response__, 'kube_version'),
        location=pulumi.get(__response__, 'location'),
        name=pulumi.get(__response__, 'name'),
        private_service_endpoint=pulumi.get(__response__, 'private_service_endpoint'),
        private_service_endpoint_url=pulumi.get(__response__, 'private_service_endpoint_url'),
        public_service_endpoint=pulumi.get(__response__, 'public_service_endpoint'),
        public_service_endpoint_url=pulumi.get(__response__, 'public_service_endpoint_url'),
        resource_group_id=pulumi.get(__response__, 'resource_group_id'),
        resource_group_name=pulumi.get(__response__, 'resource_group_name'),
        server_url=pulumi.get(__response__, 'server_url'),
        state=pulumi.get(__response__, 'state'),
        status=pulumi.get(__response__, 'status'),
        tags=pulumi.get(__response__, 'tags'),
        worker_count=pulumi.get(__response__, 'worker_count'),
        worker_pools=pulumi.get(__response__, 'worker_pools'),
        workers=pulumi.get(__response__, 'workers')))
