# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetConfigAggregatorConfigurationsResult',
    'AwaitableGetConfigAggregatorConfigurationsResult',
    'get_config_aggregator_configurations',
    'get_config_aggregator_configurations_output',
]

@pulumi.output_type
class GetConfigAggregatorConfigurationsResult:
    """
    A collection of values returned by getConfigAggregatorConfigurations.
    """
    def __init__(__self__, access_tags=None, config_type=None, configs=None, id=None, instance_id=None, location=None, prevs=None, region=None, resource_crn=None, resource_group_id=None, service_name=None, service_tags=None, sub_account=None, user_tags=None):
        if access_tags and not isinstance(access_tags, str):
            raise TypeError("Expected argument 'access_tags' to be a str")
        pulumi.set(__self__, "access_tags", access_tags)
        if config_type and not isinstance(config_type, str):
            raise TypeError("Expected argument 'config_type' to be a str")
        pulumi.set(__self__, "config_type", config_type)
        if configs and not isinstance(configs, list):
            raise TypeError("Expected argument 'configs' to be a list")
        pulumi.set(__self__, "configs", configs)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if prevs and not isinstance(prevs, list):
            raise TypeError("Expected argument 'prevs' to be a list")
        pulumi.set(__self__, "prevs", prevs)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_crn and not isinstance(resource_crn, str):
            raise TypeError("Expected argument 'resource_crn' to be a str")
        pulumi.set(__self__, "resource_crn", resource_crn)
        if resource_group_id and not isinstance(resource_group_id, str):
            raise TypeError("Expected argument 'resource_group_id' to be a str")
        pulumi.set(__self__, "resource_group_id", resource_group_id)
        if service_name and not isinstance(service_name, str):
            raise TypeError("Expected argument 'service_name' to be a str")
        pulumi.set(__self__, "service_name", service_name)
        if service_tags and not isinstance(service_tags, str):
            raise TypeError("Expected argument 'service_tags' to be a str")
        pulumi.set(__self__, "service_tags", service_tags)
        if sub_account and not isinstance(sub_account, str):
            raise TypeError("Expected argument 'sub_account' to be a str")
        pulumi.set(__self__, "sub_account", sub_account)
        if user_tags and not isinstance(user_tags, str):
            raise TypeError("Expected argument 'user_tags' to be a str")
        pulumi.set(__self__, "user_tags", user_tags)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter(name="configType")
    def config_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "config_type")

    @_builtins.property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.GetConfigAggregatorConfigurationsConfigResult']:
        return pulumi.get(self, "configs")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def prevs(self) -> Sequence['outputs.GetConfigAggregatorConfigurationsPrevResult']:
        return pulumi.get(self, "prevs")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceCrn")
    def resource_crn(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_crn")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "service_name")

    @_builtins.property
    @pulumi.getter(name="serviceTags")
    def service_tags(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "service_tags")

    @_builtins.property
    @pulumi.getter(name="subAccount")
    def sub_account(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sub_account")

    @_builtins.property
    @pulumi.getter(name="userTags")
    def user_tags(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "user_tags")


class AwaitableGetConfigAggregatorConfigurationsResult(GetConfigAggregatorConfigurationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConfigAggregatorConfigurationsResult(
            access_tags=self.access_tags,
            config_type=self.config_type,
            configs=self.configs,
            id=self.id,
            instance_id=self.instance_id,
            location=self.location,
            prevs=self.prevs,
            region=self.region,
            resource_crn=self.resource_crn,
            resource_group_id=self.resource_group_id,
            service_name=self.service_name,
            service_tags=self.service_tags,
            sub_account=self.sub_account,
            user_tags=self.user_tags)


def get_config_aggregator_configurations(access_tags: Optional[_builtins.str] = None,
                                         config_type: Optional[_builtins.str] = None,
                                         id: Optional[_builtins.str] = None,
                                         instance_id: Optional[_builtins.str] = None,
                                         location: Optional[_builtins.str] = None,
                                         region: Optional[_builtins.str] = None,
                                         resource_crn: Optional[_builtins.str] = None,
                                         resource_group_id: Optional[_builtins.str] = None,
                                         service_name: Optional[_builtins.str] = None,
                                         service_tags: Optional[_builtins.str] = None,
                                         sub_account: Optional[_builtins.str] = None,
                                         user_tags: Optional[_builtins.str] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConfigAggregatorConfigurationsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accessTags'] = access_tags
    __args__['configType'] = config_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['location'] = location
    __args__['region'] = region
    __args__['resourceCrn'] = resource_crn
    __args__['resourceGroupId'] = resource_group_id
    __args__['serviceName'] = service_name
    __args__['serviceTags'] = service_tags
    __args__['subAccount'] = sub_account
    __args__['userTags'] = user_tags
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getConfigAggregatorConfigurations:getConfigAggregatorConfigurations', __args__, opts=opts, typ=GetConfigAggregatorConfigurationsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetConfigAggregatorConfigurationsResult(
        access_tags=pulumi.get(__ret__, 'access_tags'),
        config_type=pulumi.get(__ret__, 'config_type'),
        configs=pulumi.get(__ret__, 'configs'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        location=pulumi.get(__ret__, 'location'),
        prevs=pulumi.get(__ret__, 'prevs'),
        region=pulumi.get(__ret__, 'region'),
        resource_crn=pulumi.get(__ret__, 'resource_crn'),
        resource_group_id=pulumi.get(__ret__, 'resource_group_id'),
        service_name=pulumi.get(__ret__, 'service_name'),
        service_tags=pulumi.get(__ret__, 'service_tags'),
        sub_account=pulumi.get(__ret__, 'sub_account'),
        user_tags=pulumi.get(__ret__, 'user_tags'))
def get_config_aggregator_configurations_output(access_tags: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                config_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                location: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                resource_crn: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                resource_group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                service_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                service_tags: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                sub_account: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                user_tags: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetConfigAggregatorConfigurationsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accessTags'] = access_tags
    __args__['configType'] = config_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['location'] = location
    __args__['region'] = region
    __args__['resourceCrn'] = resource_crn
    __args__['resourceGroupId'] = resource_group_id
    __args__['serviceName'] = service_name
    __args__['serviceTags'] = service_tags
    __args__['subAccount'] = sub_account
    __args__['userTags'] = user_tags
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getConfigAggregatorConfigurations:getConfigAggregatorConfigurations', __args__, opts=opts, typ=GetConfigAggregatorConfigurationsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetConfigAggregatorConfigurationsResult(
        access_tags=pulumi.get(__response__, 'access_tags'),
        config_type=pulumi.get(__response__, 'config_type'),
        configs=pulumi.get(__response__, 'configs'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        location=pulumi.get(__response__, 'location'),
        prevs=pulumi.get(__response__, 'prevs'),
        region=pulumi.get(__response__, 'region'),
        resource_crn=pulumi.get(__response__, 'resource_crn'),
        resource_group_id=pulumi.get(__response__, 'resource_group_id'),
        service_name=pulumi.get(__response__, 'service_name'),
        service_tags=pulumi.get(__response__, 'service_tags'),
        sub_account=pulumi.get(__response__, 'sub_account'),
        user_tags=pulumi.get(__response__, 'user_tags')))
