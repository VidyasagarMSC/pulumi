# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetSatelliteClusterWorkerPoolZoneAttachmentResult',
    'AwaitableGetSatelliteClusterWorkerPoolZoneAttachmentResult',
    'get_satellite_cluster_worker_pool_zone_attachment',
    'get_satellite_cluster_worker_pool_zone_attachment_output',
]

@pulumi.output_type
class GetSatelliteClusterWorkerPoolZoneAttachmentResult:
    """
    A collection of values returned by getSatelliteClusterWorkerPoolZoneAttachment.
    """
    def __init__(__self__, autobalance_enabled=None, cluster=None, id=None, messages=None, resource_group_id=None, worker_count=None, worker_pool=None, zone=None):
        if autobalance_enabled and not isinstance(autobalance_enabled, bool):
            raise TypeError("Expected argument 'autobalance_enabled' to be a bool")
        pulumi.set(__self__, "autobalance_enabled", autobalance_enabled)
        if cluster and not isinstance(cluster, str):
            raise TypeError("Expected argument 'cluster' to be a str")
        pulumi.set(__self__, "cluster", cluster)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if messages and not isinstance(messages, list):
            raise TypeError("Expected argument 'messages' to be a list")
        pulumi.set(__self__, "messages", messages)
        if resource_group_id and not isinstance(resource_group_id, str):
            raise TypeError("Expected argument 'resource_group_id' to be a str")
        pulumi.set(__self__, "resource_group_id", resource_group_id)
        if worker_count and not isinstance(worker_count, float):
            raise TypeError("Expected argument 'worker_count' to be a float")
        pulumi.set(__self__, "worker_count", worker_count)
        if worker_pool and not isinstance(worker_pool, str):
            raise TypeError("Expected argument 'worker_pool' to be a str")
        pulumi.set(__self__, "worker_pool", worker_pool)
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter(name="autobalanceEnabled")
    def autobalance_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "autobalance_enabled")

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> _builtins.str:
        return pulumi.get(self, "cluster")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def messages(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "messages")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter(name="workerCount")
    def worker_count(self) -> _builtins.float:
        return pulumi.get(self, "worker_count")

    @_builtins.property
    @pulumi.getter(name="workerPool")
    def worker_pool(self) -> _builtins.str:
        return pulumi.get(self, "worker_pool")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> _builtins.str:
        return pulumi.get(self, "zone")


class AwaitableGetSatelliteClusterWorkerPoolZoneAttachmentResult(GetSatelliteClusterWorkerPoolZoneAttachmentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSatelliteClusterWorkerPoolZoneAttachmentResult(
            autobalance_enabled=self.autobalance_enabled,
            cluster=self.cluster,
            id=self.id,
            messages=self.messages,
            resource_group_id=self.resource_group_id,
            worker_count=self.worker_count,
            worker_pool=self.worker_pool,
            zone=self.zone)


def get_satellite_cluster_worker_pool_zone_attachment(cluster: Optional[_builtins.str] = None,
                                                      id: Optional[_builtins.str] = None,
                                                      resource_group_id: Optional[_builtins.str] = None,
                                                      worker_pool: Optional[_builtins.str] = None,
                                                      zone: Optional[_builtins.str] = None,
                                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSatelliteClusterWorkerPoolZoneAttachmentResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cluster'] = cluster
    __args__['id'] = id
    __args__['resourceGroupId'] = resource_group_id
    __args__['workerPool'] = worker_pool
    __args__['zone'] = zone
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSatelliteClusterWorkerPoolZoneAttachment:getSatelliteClusterWorkerPoolZoneAttachment', __args__, opts=opts, typ=GetSatelliteClusterWorkerPoolZoneAttachmentResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSatelliteClusterWorkerPoolZoneAttachmentResult(
        autobalance_enabled=pulumi.get(__ret__, 'autobalance_enabled'),
        cluster=pulumi.get(__ret__, 'cluster'),
        id=pulumi.get(__ret__, 'id'),
        messages=pulumi.get(__ret__, 'messages'),
        resource_group_id=pulumi.get(__ret__, 'resource_group_id'),
        worker_count=pulumi.get(__ret__, 'worker_count'),
        worker_pool=pulumi.get(__ret__, 'worker_pool'),
        zone=pulumi.get(__ret__, 'zone'))
def get_satellite_cluster_worker_pool_zone_attachment_output(cluster: Optional[pulumi.Input[_builtins.str]] = None,
                                                             id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                             resource_group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                             worker_pool: Optional[pulumi.Input[_builtins.str]] = None,
                                                             zone: Optional[pulumi.Input[_builtins.str]] = None,
                                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSatelliteClusterWorkerPoolZoneAttachmentResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cluster'] = cluster
    __args__['id'] = id
    __args__['resourceGroupId'] = resource_group_id
    __args__['workerPool'] = worker_pool
    __args__['zone'] = zone
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSatelliteClusterWorkerPoolZoneAttachment:getSatelliteClusterWorkerPoolZoneAttachment', __args__, opts=opts, typ=GetSatelliteClusterWorkerPoolZoneAttachmentResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSatelliteClusterWorkerPoolZoneAttachmentResult(
        autobalance_enabled=pulumi.get(__response__, 'autobalance_enabled'),
        cluster=pulumi.get(__response__, 'cluster'),
        id=pulumi.get(__response__, 'id'),
        messages=pulumi.get(__response__, 'messages'),
        resource_group_id=pulumi.get(__response__, 'resource_group_id'),
        worker_count=pulumi.get(__response__, 'worker_count'),
        worker_pool=pulumi.get(__response__, 'worker_pool'),
        zone=pulumi.get(__response__, 'zone')))
