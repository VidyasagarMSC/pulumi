# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsZonesResult',
    'AwaitableGetIsZonesResult',
    'get_is_zones',
    'get_is_zones_output',
]

@pulumi.output_type
class GetIsZonesResult:
    """
    A collection of values returned by getIsZones.
    """
    def __init__(__self__, id=None, region=None, status=None, zone_infos=None, zones=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if zone_infos and not isinstance(zone_infos, list):
            raise TypeError("Expected argument 'zone_infos' to be a list")
        pulumi.set(__self__, "zone_infos", zone_infos)
        if zones and not isinstance(zones, list):
            raise TypeError("Expected argument 'zones' to be a list")
        pulumi.set(__self__, "zones", zones)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="zoneInfos")
    def zone_infos(self) -> Sequence['outputs.GetIsZonesZoneInfoResult']:
        return pulumi.get(self, "zone_infos")

    @_builtins.property
    @pulumi.getter
    def zones(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "zones")


class AwaitableGetIsZonesResult(GetIsZonesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsZonesResult(
            id=self.id,
            region=self.region,
            status=self.status,
            zone_infos=self.zone_infos,
            zones=self.zones)


def get_is_zones(id: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsZonesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['region'] = region
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsZones:getIsZones', __args__, opts=opts, typ=GetIsZonesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsZonesResult(
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'),
        zone_infos=pulumi.get(__ret__, 'zone_infos'),
        zones=pulumi.get(__ret__, 'zones'))
def get_is_zones_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        region: Optional[pulumi.Input[_builtins.str]] = None,
                        status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsZonesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['region'] = region
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsZones:getIsZones', __args__, opts=opts, typ=GetIsZonesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsZonesResult(
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status'),
        zone_infos=pulumi.get(__response__, 'zone_infos'),
        zones=pulumi.get(__response__, 'zones')))
