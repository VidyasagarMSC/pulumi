# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetPiDatacenterResult',
    'AwaitableGetPiDatacenterResult',
    'get_pi_datacenter',
    'get_pi_datacenter_output',
]

@pulumi.output_type
class GetPiDatacenterResult:
    """
    A collection of values returned by getPiDatacenter.
    """
    def __init__(__self__, capability_details=None, id=None, pi_cloud_instance_id=None, pi_datacenter_capabilities=None, pi_datacenter_href=None, pi_datacenter_location=None, pi_datacenter_status=None, pi_datacenter_type=None, pi_datacenter_zone=None):
        if capability_details and not isinstance(capability_details, list):
            raise TypeError("Expected argument 'capability_details' to be a list")
        pulumi.set(__self__, "capability_details", capability_details)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if pi_cloud_instance_id and not isinstance(pi_cloud_instance_id, str):
            raise TypeError("Expected argument 'pi_cloud_instance_id' to be a str")
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_datacenter_capabilities and not isinstance(pi_datacenter_capabilities, dict):
            raise TypeError("Expected argument 'pi_datacenter_capabilities' to be a dict")
        pulumi.set(__self__, "pi_datacenter_capabilities", pi_datacenter_capabilities)
        if pi_datacenter_href and not isinstance(pi_datacenter_href, str):
            raise TypeError("Expected argument 'pi_datacenter_href' to be a str")
        pulumi.set(__self__, "pi_datacenter_href", pi_datacenter_href)
        if pi_datacenter_location and not isinstance(pi_datacenter_location, dict):
            raise TypeError("Expected argument 'pi_datacenter_location' to be a dict")
        pulumi.set(__self__, "pi_datacenter_location", pi_datacenter_location)
        if pi_datacenter_status and not isinstance(pi_datacenter_status, str):
            raise TypeError("Expected argument 'pi_datacenter_status' to be a str")
        pulumi.set(__self__, "pi_datacenter_status", pi_datacenter_status)
        if pi_datacenter_type and not isinstance(pi_datacenter_type, str):
            raise TypeError("Expected argument 'pi_datacenter_type' to be a str")
        pulumi.set(__self__, "pi_datacenter_type", pi_datacenter_type)
        if pi_datacenter_zone and not isinstance(pi_datacenter_zone, str):
            raise TypeError("Expected argument 'pi_datacenter_zone' to be a str")
        pulumi.set(__self__, "pi_datacenter_zone", pi_datacenter_zone)

    @_builtins.property
    @pulumi.getter(name="capabilityDetails")
    def capability_details(self) -> Sequence['outputs.GetPiDatacenterCapabilityDetailResult']:
        return pulumi.get(self, "capability_details")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piDatacenterCapabilities")
    def pi_datacenter_capabilities(self) -> Mapping[str, _builtins.bool]:
        return pulumi.get(self, "pi_datacenter_capabilities")

    @_builtins.property
    @pulumi.getter(name="piDatacenterHref")
    def pi_datacenter_href(self) -> _builtins.str:
        return pulumi.get(self, "pi_datacenter_href")

    @_builtins.property
    @pulumi.getter(name="piDatacenterLocation")
    def pi_datacenter_location(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "pi_datacenter_location")

    @_builtins.property
    @pulumi.getter(name="piDatacenterStatus")
    def pi_datacenter_status(self) -> _builtins.str:
        return pulumi.get(self, "pi_datacenter_status")

    @_builtins.property
    @pulumi.getter(name="piDatacenterType")
    def pi_datacenter_type(self) -> _builtins.str:
        return pulumi.get(self, "pi_datacenter_type")

    @_builtins.property
    @pulumi.getter(name="piDatacenterZone")
    def pi_datacenter_zone(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "pi_datacenter_zone")


class AwaitableGetPiDatacenterResult(GetPiDatacenterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPiDatacenterResult(
            capability_details=self.capability_details,
            id=self.id,
            pi_cloud_instance_id=self.pi_cloud_instance_id,
            pi_datacenter_capabilities=self.pi_datacenter_capabilities,
            pi_datacenter_href=self.pi_datacenter_href,
            pi_datacenter_location=self.pi_datacenter_location,
            pi_datacenter_status=self.pi_datacenter_status,
            pi_datacenter_type=self.pi_datacenter_type,
            pi_datacenter_zone=self.pi_datacenter_zone)


def get_pi_datacenter(id: Optional[_builtins.str] = None,
                      pi_cloud_instance_id: Optional[_builtins.str] = None,
                      pi_datacenter_zone: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPiDatacenterResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piDatacenterZone'] = pi_datacenter_zone
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getPiDatacenter:getPiDatacenter', __args__, opts=opts, typ=GetPiDatacenterResult, package_ref=_utilities.get_package()).value

    return AwaitableGetPiDatacenterResult(
        capability_details=pulumi.get(__ret__, 'capability_details'),
        id=pulumi.get(__ret__, 'id'),
        pi_cloud_instance_id=pulumi.get(__ret__, 'pi_cloud_instance_id'),
        pi_datacenter_capabilities=pulumi.get(__ret__, 'pi_datacenter_capabilities'),
        pi_datacenter_href=pulumi.get(__ret__, 'pi_datacenter_href'),
        pi_datacenter_location=pulumi.get(__ret__, 'pi_datacenter_location'),
        pi_datacenter_status=pulumi.get(__ret__, 'pi_datacenter_status'),
        pi_datacenter_type=pulumi.get(__ret__, 'pi_datacenter_type'),
        pi_datacenter_zone=pulumi.get(__ret__, 'pi_datacenter_zone'))
def get_pi_datacenter_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             pi_cloud_instance_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             pi_datacenter_zone: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPiDatacenterResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piDatacenterZone'] = pi_datacenter_zone
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getPiDatacenter:getPiDatacenter', __args__, opts=opts, typ=GetPiDatacenterResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetPiDatacenterResult(
        capability_details=pulumi.get(__response__, 'capability_details'),
        id=pulumi.get(__response__, 'id'),
        pi_cloud_instance_id=pulumi.get(__response__, 'pi_cloud_instance_id'),
        pi_datacenter_capabilities=pulumi.get(__response__, 'pi_datacenter_capabilities'),
        pi_datacenter_href=pulumi.get(__response__, 'pi_datacenter_href'),
        pi_datacenter_location=pulumi.get(__response__, 'pi_datacenter_location'),
        pi_datacenter_status=pulumi.get(__response__, 'pi_datacenter_status'),
        pi_datacenter_type=pulumi.get(__response__, 'pi_datacenter_type'),
        pi_datacenter_zone=pulumi.get(__response__, 'pi_datacenter_zone')))
