# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsVolumeResult',
    'AwaitableGetIsVolumeResult',
    'get_is_volume',
    'get_is_volume_output',
]

@pulumi.output_type
class GetIsVolumeResult:
    """
    A collection of values returned by getIsVolume.
    """
    def __init__(__self__, access_tags=None, active=None, adjustable_capacity_states=None, adjustable_iops_states=None, allowed_uses=None, attachment_state=None, bandwidth=None, busy=None, capacity=None, catalog_offerings=None, created_at=None, crn=None, encryption_key=None, encryption_type=None, health_reasons=None, health_state=None, id=None, identifier=None, iops=None, name=None, operating_systems=None, profile=None, resource_controller_url=None, resource_crn=None, resource_group=None, resource_group_name=None, resource_name=None, resource_status=None, source_snapshot=None, status=None, status_reasons=None, tags=None, zone=None):
        if access_tags and not isinstance(access_tags, list):
            raise TypeError("Expected argument 'access_tags' to be a list")
        pulumi.set(__self__, "access_tags", access_tags)
        if active and not isinstance(active, bool):
            raise TypeError("Expected argument 'active' to be a bool")
        pulumi.set(__self__, "active", active)
        if adjustable_capacity_states and not isinstance(adjustable_capacity_states, list):
            raise TypeError("Expected argument 'adjustable_capacity_states' to be a list")
        pulumi.set(__self__, "adjustable_capacity_states", adjustable_capacity_states)
        if adjustable_iops_states and not isinstance(adjustable_iops_states, list):
            raise TypeError("Expected argument 'adjustable_iops_states' to be a list")
        pulumi.set(__self__, "adjustable_iops_states", adjustable_iops_states)
        if allowed_uses and not isinstance(allowed_uses, list):
            raise TypeError("Expected argument 'allowed_uses' to be a list")
        pulumi.set(__self__, "allowed_uses", allowed_uses)
        if attachment_state and not isinstance(attachment_state, str):
            raise TypeError("Expected argument 'attachment_state' to be a str")
        pulumi.set(__self__, "attachment_state", attachment_state)
        if bandwidth and not isinstance(bandwidth, float):
            raise TypeError("Expected argument 'bandwidth' to be a float")
        pulumi.set(__self__, "bandwidth", bandwidth)
        if busy and not isinstance(busy, bool):
            raise TypeError("Expected argument 'busy' to be a bool")
        pulumi.set(__self__, "busy", busy)
        if capacity and not isinstance(capacity, float):
            raise TypeError("Expected argument 'capacity' to be a float")
        pulumi.set(__self__, "capacity", capacity)
        if catalog_offerings and not isinstance(catalog_offerings, list):
            raise TypeError("Expected argument 'catalog_offerings' to be a list")
        pulumi.set(__self__, "catalog_offerings", catalog_offerings)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if encryption_key and not isinstance(encryption_key, str):
            raise TypeError("Expected argument 'encryption_key' to be a str")
        pulumi.set(__self__, "encryption_key", encryption_key)
        if encryption_type and not isinstance(encryption_type, str):
            raise TypeError("Expected argument 'encryption_type' to be a str")
        pulumi.set(__self__, "encryption_type", encryption_type)
        if health_reasons and not isinstance(health_reasons, list):
            raise TypeError("Expected argument 'health_reasons' to be a list")
        pulumi.set(__self__, "health_reasons", health_reasons)
        if health_state and not isinstance(health_state, str):
            raise TypeError("Expected argument 'health_state' to be a str")
        pulumi.set(__self__, "health_state", health_state)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identifier and not isinstance(identifier, str):
            raise TypeError("Expected argument 'identifier' to be a str")
        pulumi.set(__self__, "identifier", identifier)
        if iops and not isinstance(iops, float):
            raise TypeError("Expected argument 'iops' to be a float")
        pulumi.set(__self__, "iops", iops)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if operating_systems and not isinstance(operating_systems, list):
            raise TypeError("Expected argument 'operating_systems' to be a list")
        pulumi.set(__self__, "operating_systems", operating_systems)
        if profile and not isinstance(profile, str):
            raise TypeError("Expected argument 'profile' to be a str")
        pulumi.set(__self__, "profile", profile)
        if resource_controller_url and not isinstance(resource_controller_url, str):
            raise TypeError("Expected argument 'resource_controller_url' to be a str")
        pulumi.set(__self__, "resource_controller_url", resource_controller_url)
        if resource_crn and not isinstance(resource_crn, str):
            raise TypeError("Expected argument 'resource_crn' to be a str")
        pulumi.set(__self__, "resource_crn", resource_crn)
        if resource_group and not isinstance(resource_group, str):
            raise TypeError("Expected argument 'resource_group' to be a str")
        pulumi.set(__self__, "resource_group", resource_group)
        if resource_group_name and not isinstance(resource_group_name, str):
            raise TypeError("Expected argument 'resource_group_name' to be a str")
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if resource_name and not isinstance(resource_name, str):
            raise TypeError("Expected argument 'resource_name' to be a str")
        pulumi.set(__self__, "resource_name", resource_name)
        if resource_status and not isinstance(resource_status, str):
            raise TypeError("Expected argument 'resource_status' to be a str")
        pulumi.set(__self__, "resource_status", resource_status)
        if source_snapshot and not isinstance(source_snapshot, str):
            raise TypeError("Expected argument 'source_snapshot' to be a str")
        pulumi.set(__self__, "source_snapshot", source_snapshot)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if status_reasons and not isinstance(status_reasons, list):
            raise TypeError("Expected argument 'status_reasons' to be a list")
        pulumi.set(__self__, "status_reasons", status_reasons)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter
    def active(self) -> _builtins.bool:
        return pulumi.get(self, "active")

    @_builtins.property
    @pulumi.getter(name="adjustableCapacityStates")
    def adjustable_capacity_states(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "adjustable_capacity_states")

    @_builtins.property
    @pulumi.getter(name="adjustableIopsStates")
    def adjustable_iops_states(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "adjustable_iops_states")

    @_builtins.property
    @pulumi.getter(name="allowedUses")
    def allowed_uses(self) -> Sequence['outputs.GetIsVolumeAllowedUseResult']:
        return pulumi.get(self, "allowed_uses")

    @_builtins.property
    @pulumi.getter(name="attachmentState")
    def attachment_state(self) -> _builtins.str:
        return pulumi.get(self, "attachment_state")

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> _builtins.float:
        return pulumi.get(self, "bandwidth")

    @_builtins.property
    @pulumi.getter
    def busy(self) -> _builtins.bool:
        return pulumi.get(self, "busy")

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> _builtins.float:
        return pulumi.get(self, "capacity")

    @_builtins.property
    @pulumi.getter(name="catalogOfferings")
    def catalog_offerings(self) -> Sequence['outputs.GetIsVolumeCatalogOfferingResult']:
        return pulumi.get(self, "catalog_offerings")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> _builtins.str:
        return pulumi.get(self, "encryption_key")

    @_builtins.property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> _builtins.str:
        return pulumi.get(self, "encryption_type")

    @_builtins.property
    @pulumi.getter(name="healthReasons")
    def health_reasons(self) -> Sequence['outputs.GetIsVolumeHealthReasonResult']:
        return pulumi.get(self, "health_reasons")

    @_builtins.property
    @pulumi.getter(name="healthState")
    def health_state(self) -> _builtins.str:
        return pulumi.get(self, "health_state")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def identifier(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "identifier")

    @_builtins.property
    @pulumi.getter
    def iops(self) -> _builtins.float:
        return pulumi.get(self, "iops")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="operatingSystems")
    def operating_systems(self) -> Sequence['outputs.GetIsVolumeOperatingSystemResult']:
        return pulumi.get(self, "operating_systems")

    @_builtins.property
    @pulumi.getter
    def profile(self) -> _builtins.str:
        return pulumi.get(self, "profile")

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> _builtins.str:
        return pulumi.get(self, "resource_controller_url")

    @_builtins.property
    @pulumi.getter(name="resourceCrn")
    def resource_crn(self) -> _builtins.str:
        return pulumi.get(self, "resource_crn")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> _builtins.str:
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> _builtins.str:
        return pulumi.get(self, "resource_group_name")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceStatus")
    def resource_status(self) -> _builtins.str:
        return pulumi.get(self, "resource_status")

    @_builtins.property
    @pulumi.getter(name="sourceSnapshot")
    def source_snapshot(self) -> _builtins.str:
        return pulumi.get(self, "source_snapshot")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> Sequence['outputs.GetIsVolumeStatusReasonResult']:
        return pulumi.get(self, "status_reasons")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> _builtins.str:
        return pulumi.get(self, "zone")


class AwaitableGetIsVolumeResult(GetIsVolumeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsVolumeResult(
            access_tags=self.access_tags,
            active=self.active,
            adjustable_capacity_states=self.adjustable_capacity_states,
            adjustable_iops_states=self.adjustable_iops_states,
            allowed_uses=self.allowed_uses,
            attachment_state=self.attachment_state,
            bandwidth=self.bandwidth,
            busy=self.busy,
            capacity=self.capacity,
            catalog_offerings=self.catalog_offerings,
            created_at=self.created_at,
            crn=self.crn,
            encryption_key=self.encryption_key,
            encryption_type=self.encryption_type,
            health_reasons=self.health_reasons,
            health_state=self.health_state,
            id=self.id,
            identifier=self.identifier,
            iops=self.iops,
            name=self.name,
            operating_systems=self.operating_systems,
            profile=self.profile,
            resource_controller_url=self.resource_controller_url,
            resource_crn=self.resource_crn,
            resource_group=self.resource_group,
            resource_group_name=self.resource_group_name,
            resource_name=self.resource_name,
            resource_status=self.resource_status,
            source_snapshot=self.source_snapshot,
            status=self.status,
            status_reasons=self.status_reasons,
            tags=self.tags,
            zone=self.zone)


def get_is_volume(id: Optional[_builtins.str] = None,
                  identifier: Optional[_builtins.str] = None,
                  name: Optional[_builtins.str] = None,
                  zone: Optional[_builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsVolumeResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['identifier'] = identifier
    __args__['name'] = name
    __args__['zone'] = zone
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsVolume:getIsVolume', __args__, opts=opts, typ=GetIsVolumeResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsVolumeResult(
        access_tags=pulumi.get(__ret__, 'access_tags'),
        active=pulumi.get(__ret__, 'active'),
        adjustable_capacity_states=pulumi.get(__ret__, 'adjustable_capacity_states'),
        adjustable_iops_states=pulumi.get(__ret__, 'adjustable_iops_states'),
        allowed_uses=pulumi.get(__ret__, 'allowed_uses'),
        attachment_state=pulumi.get(__ret__, 'attachment_state'),
        bandwidth=pulumi.get(__ret__, 'bandwidth'),
        busy=pulumi.get(__ret__, 'busy'),
        capacity=pulumi.get(__ret__, 'capacity'),
        catalog_offerings=pulumi.get(__ret__, 'catalog_offerings'),
        created_at=pulumi.get(__ret__, 'created_at'),
        crn=pulumi.get(__ret__, 'crn'),
        encryption_key=pulumi.get(__ret__, 'encryption_key'),
        encryption_type=pulumi.get(__ret__, 'encryption_type'),
        health_reasons=pulumi.get(__ret__, 'health_reasons'),
        health_state=pulumi.get(__ret__, 'health_state'),
        id=pulumi.get(__ret__, 'id'),
        identifier=pulumi.get(__ret__, 'identifier'),
        iops=pulumi.get(__ret__, 'iops'),
        name=pulumi.get(__ret__, 'name'),
        operating_systems=pulumi.get(__ret__, 'operating_systems'),
        profile=pulumi.get(__ret__, 'profile'),
        resource_controller_url=pulumi.get(__ret__, 'resource_controller_url'),
        resource_crn=pulumi.get(__ret__, 'resource_crn'),
        resource_group=pulumi.get(__ret__, 'resource_group'),
        resource_group_name=pulumi.get(__ret__, 'resource_group_name'),
        resource_name=pulumi.get(__ret__, 'resource_name'),
        resource_status=pulumi.get(__ret__, 'resource_status'),
        source_snapshot=pulumi.get(__ret__, 'source_snapshot'),
        status=pulumi.get(__ret__, 'status'),
        status_reasons=pulumi.get(__ret__, 'status_reasons'),
        tags=pulumi.get(__ret__, 'tags'),
        zone=pulumi.get(__ret__, 'zone'))
def get_is_volume_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         identifier: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         zone: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsVolumeResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['identifier'] = identifier
    __args__['name'] = name
    __args__['zone'] = zone
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsVolume:getIsVolume', __args__, opts=opts, typ=GetIsVolumeResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsVolumeResult(
        access_tags=pulumi.get(__response__, 'access_tags'),
        active=pulumi.get(__response__, 'active'),
        adjustable_capacity_states=pulumi.get(__response__, 'adjustable_capacity_states'),
        adjustable_iops_states=pulumi.get(__response__, 'adjustable_iops_states'),
        allowed_uses=pulumi.get(__response__, 'allowed_uses'),
        attachment_state=pulumi.get(__response__, 'attachment_state'),
        bandwidth=pulumi.get(__response__, 'bandwidth'),
        busy=pulumi.get(__response__, 'busy'),
        capacity=pulumi.get(__response__, 'capacity'),
        catalog_offerings=pulumi.get(__response__, 'catalog_offerings'),
        created_at=pulumi.get(__response__, 'created_at'),
        crn=pulumi.get(__response__, 'crn'),
        encryption_key=pulumi.get(__response__, 'encryption_key'),
        encryption_type=pulumi.get(__response__, 'encryption_type'),
        health_reasons=pulumi.get(__response__, 'health_reasons'),
        health_state=pulumi.get(__response__, 'health_state'),
        id=pulumi.get(__response__, 'id'),
        identifier=pulumi.get(__response__, 'identifier'),
        iops=pulumi.get(__response__, 'iops'),
        name=pulumi.get(__response__, 'name'),
        operating_systems=pulumi.get(__response__, 'operating_systems'),
        profile=pulumi.get(__response__, 'profile'),
        resource_controller_url=pulumi.get(__response__, 'resource_controller_url'),
        resource_crn=pulumi.get(__response__, 'resource_crn'),
        resource_group=pulumi.get(__response__, 'resource_group'),
        resource_group_name=pulumi.get(__response__, 'resource_group_name'),
        resource_name=pulumi.get(__response__, 'resource_name'),
        resource_status=pulumi.get(__response__, 'resource_status'),
        source_snapshot=pulumi.get(__response__, 'source_snapshot'),
        status=pulumi.get(__response__, 'status'),
        status_reasons=pulumi.get(__response__, 'status_reasons'),
        tags=pulumi.get(__response__, 'tags'),
        zone=pulumi.get(__response__, 'zone')))
