# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LbArgs', 'Lb']

@pulumi.input_type
class LbArgs:
    def __init__(__self__, *,
                 connections: pulumi.Input[_builtins.float],
                 datacenter: pulumi.Input[_builtins.str],
                 dedicated: Optional[pulumi.Input[_builtins.bool]] = None,
                 ha_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 lb_id: Optional[pulumi.Input[_builtins.str]] = None,
                 security_certificate_id: Optional[pulumi.Input[_builtins.float]] = None,
                 ssl_offload: Optional[pulumi.Input[_builtins.bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['LbTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a Lb resource.
        :param pulumi.Input[_builtins.float] connections: Connections value
        :param pulumi.Input[_builtins.str] datacenter: Datacenter name info
        :param pulumi.Input[_builtins.bool] dedicated: Boolena value true if Load balncer is dedicated type
        :param pulumi.Input[_builtins.bool] ha_enabled: true if High availability is enabled
        :param pulumi.Input[_builtins.float] security_certificate_id: Security certificate ID
        :param pulumi.Input[_builtins.bool] ssl_offload: boolean value true if SSL offload is enabled
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags associated with resource
        """
        pulumi.set(__self__, "connections", connections)
        pulumi.set(__self__, "datacenter", datacenter)
        if dedicated is not None:
            pulumi.set(__self__, "dedicated", dedicated)
        if ha_enabled is not None:
            pulumi.set(__self__, "ha_enabled", ha_enabled)
        if lb_id is not None:
            pulumi.set(__self__, "lb_id", lb_id)
        if security_certificate_id is not None:
            pulumi.set(__self__, "security_certificate_id", security_certificate_id)
        if ssl_offload is not None:
            pulumi.set(__self__, "ssl_offload", ssl_offload)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def connections(self) -> pulumi.Input[_builtins.float]:
        """
        Connections value
        """
        return pulumi.get(self, "connections")

    @connections.setter
    def connections(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "connections", value)

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> pulumi.Input[_builtins.str]:
        """
        Datacenter name info
        """
        return pulumi.get(self, "datacenter")

    @datacenter.setter
    def datacenter(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "datacenter", value)

    @_builtins.property
    @pulumi.getter
    def dedicated(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Boolena value true if Load balncer is dedicated type
        """
        return pulumi.get(self, "dedicated")

    @dedicated.setter
    def dedicated(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "dedicated", value)

    @_builtins.property
    @pulumi.getter(name="haEnabled")
    def ha_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        true if High availability is enabled
        """
        return pulumi.get(self, "ha_enabled")

    @ha_enabled.setter
    def ha_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ha_enabled", value)

    @_builtins.property
    @pulumi.getter(name="lbId")
    def lb_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "lb_id")

    @lb_id.setter
    def lb_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lb_id", value)

    @_builtins.property
    @pulumi.getter(name="securityCertificateId")
    def security_certificate_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Security certificate ID
        """
        return pulumi.get(self, "security_certificate_id")

    @security_certificate_id.setter
    def security_certificate_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "security_certificate_id", value)

    @_builtins.property
    @pulumi.getter(name="sslOffload")
    def ssl_offload(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        boolean value true if SSL offload is enabled
        """
        return pulumi.get(self, "ssl_offload")

    @ssl_offload.setter
    def ssl_offload(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ssl_offload", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Tags associated with resource
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['LbTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['LbTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _LbState:
    def __init__(__self__, *,
                 connections: Optional[pulumi.Input[_builtins.float]] = None,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 dedicated: Optional[pulumi.Input[_builtins.bool]] = None,
                 ha_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 lb_id: Optional[pulumi.Input[_builtins.str]] = None,
                 security_certificate_id: Optional[pulumi.Input[_builtins.float]] = None,
                 ssl_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 ssl_offload: Optional[pulumi.Input[_builtins.bool]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.float]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['LbTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering Lb resources.
        :param pulumi.Input[_builtins.float] connections: Connections value
        :param pulumi.Input[_builtins.str] datacenter: Datacenter name info
        :param pulumi.Input[_builtins.bool] dedicated: Boolena value true if Load balncer is dedicated type
        :param pulumi.Input[_builtins.bool] ha_enabled: true if High availability is enabled
        :param pulumi.Input[_builtins.float] security_certificate_id: Security certificate ID
        :param pulumi.Input[_builtins.bool] ssl_offload: boolean value true if SSL offload is enabled
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags associated with resource
        """
        if connections is not None:
            pulumi.set(__self__, "connections", connections)
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if dedicated is not None:
            pulumi.set(__self__, "dedicated", dedicated)
        if ha_enabled is not None:
            pulumi.set(__self__, "ha_enabled", ha_enabled)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if lb_id is not None:
            pulumi.set(__self__, "lb_id", lb_id)
        if security_certificate_id is not None:
            pulumi.set(__self__, "security_certificate_id", security_certificate_id)
        if ssl_enabled is not None:
            pulumi.set(__self__, "ssl_enabled", ssl_enabled)
        if ssl_offload is not None:
            pulumi.set(__self__, "ssl_offload", ssl_offload)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def connections(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Connections value
        """
        return pulumi.get(self, "connections")

    @connections.setter
    def connections(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "connections", value)

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Datacenter name info
        """
        return pulumi.get(self, "datacenter")

    @datacenter.setter
    def datacenter(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "datacenter", value)

    @_builtins.property
    @pulumi.getter
    def dedicated(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Boolena value true if Load balncer is dedicated type
        """
        return pulumi.get(self, "dedicated")

    @dedicated.setter
    def dedicated(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "dedicated", value)

    @_builtins.property
    @pulumi.getter(name="haEnabled")
    def ha_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        true if High availability is enabled
        """
        return pulumi.get(self, "ha_enabled")

    @ha_enabled.setter
    def ha_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ha_enabled", value)

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hostname", value)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @_builtins.property
    @pulumi.getter(name="lbId")
    def lb_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "lb_id")

    @lb_id.setter
    def lb_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lb_id", value)

    @_builtins.property
    @pulumi.getter(name="securityCertificateId")
    def security_certificate_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Security certificate ID
        """
        return pulumi.get(self, "security_certificate_id")

    @security_certificate_id.setter
    def security_certificate_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "security_certificate_id", value)

    @_builtins.property
    @pulumi.getter(name="sslEnabled")
    def ssl_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "ssl_enabled")

    @ssl_enabled.setter
    def ssl_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ssl_enabled", value)

    @_builtins.property
    @pulumi.getter(name="sslOffload")
    def ssl_offload(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        boolean value true if SSL offload is enabled
        """
        return pulumi.get(self, "ssl_offload")

    @ssl_offload.setter
    def ssl_offload(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ssl_offload", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Tags associated with resource
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['LbTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['LbTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/lb:Lb")
class Lb(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connections: Optional[pulumi.Input[_builtins.float]] = None,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 dedicated: Optional[pulumi.Input[_builtins.bool]] = None,
                 ha_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 lb_id: Optional[pulumi.Input[_builtins.str]] = None,
                 security_certificate_id: Optional[pulumi.Input[_builtins.float]] = None,
                 ssl_offload: Optional[pulumi.Input[_builtins.bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['LbTimeoutsArgs', 'LbTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a Lb resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] connections: Connections value
        :param pulumi.Input[_builtins.str] datacenter: Datacenter name info
        :param pulumi.Input[_builtins.bool] dedicated: Boolena value true if Load balncer is dedicated type
        :param pulumi.Input[_builtins.bool] ha_enabled: true if High availability is enabled
        :param pulumi.Input[_builtins.float] security_certificate_id: Security certificate ID
        :param pulumi.Input[_builtins.bool] ssl_offload: boolean value true if SSL offload is enabled
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags associated with resource
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LbArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Lb resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LbArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LbArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connections: Optional[pulumi.Input[_builtins.float]] = None,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 dedicated: Optional[pulumi.Input[_builtins.bool]] = None,
                 ha_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 lb_id: Optional[pulumi.Input[_builtins.str]] = None,
                 security_certificate_id: Optional[pulumi.Input[_builtins.float]] = None,
                 ssl_offload: Optional[pulumi.Input[_builtins.bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['LbTimeoutsArgs', 'LbTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LbArgs.__new__(LbArgs)

            if connections is None and not opts.urn:
                raise TypeError("Missing required property 'connections'")
            __props__.__dict__["connections"] = connections
            if datacenter is None and not opts.urn:
                raise TypeError("Missing required property 'datacenter'")
            __props__.__dict__["datacenter"] = datacenter
            __props__.__dict__["dedicated"] = dedicated
            __props__.__dict__["ha_enabled"] = ha_enabled
            __props__.__dict__["lb_id"] = lb_id
            __props__.__dict__["security_certificate_id"] = security_certificate_id
            __props__.__dict__["ssl_offload"] = ssl_offload
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["hostname"] = None
            __props__.__dict__["ip_address"] = None
            __props__.__dict__["ssl_enabled"] = None
            __props__.__dict__["subnet_id"] = None
        super(Lb, __self__).__init__(
            'ibm:index/lb:Lb',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            connections: Optional[pulumi.Input[_builtins.float]] = None,
            datacenter: Optional[pulumi.Input[_builtins.str]] = None,
            dedicated: Optional[pulumi.Input[_builtins.bool]] = None,
            ha_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            hostname: Optional[pulumi.Input[_builtins.str]] = None,
            ip_address: Optional[pulumi.Input[_builtins.str]] = None,
            lb_id: Optional[pulumi.Input[_builtins.str]] = None,
            security_certificate_id: Optional[pulumi.Input[_builtins.float]] = None,
            ssl_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            ssl_offload: Optional[pulumi.Input[_builtins.bool]] = None,
            subnet_id: Optional[pulumi.Input[_builtins.float]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            timeouts: Optional[pulumi.Input[Union['LbTimeoutsArgs', 'LbTimeoutsArgsDict']]] = None) -> 'Lb':
        """
        Get an existing Lb resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] connections: Connections value
        :param pulumi.Input[_builtins.str] datacenter: Datacenter name info
        :param pulumi.Input[_builtins.bool] dedicated: Boolena value true if Load balncer is dedicated type
        :param pulumi.Input[_builtins.bool] ha_enabled: true if High availability is enabled
        :param pulumi.Input[_builtins.float] security_certificate_id: Security certificate ID
        :param pulumi.Input[_builtins.bool] ssl_offload: boolean value true if SSL offload is enabled
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags associated with resource
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LbState.__new__(_LbState)

        __props__.__dict__["connections"] = connections
        __props__.__dict__["datacenter"] = datacenter
        __props__.__dict__["dedicated"] = dedicated
        __props__.__dict__["ha_enabled"] = ha_enabled
        __props__.__dict__["hostname"] = hostname
        __props__.__dict__["ip_address"] = ip_address
        __props__.__dict__["lb_id"] = lb_id
        __props__.__dict__["security_certificate_id"] = security_certificate_id
        __props__.__dict__["ssl_enabled"] = ssl_enabled
        __props__.__dict__["ssl_offload"] = ssl_offload
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timeouts"] = timeouts
        return Lb(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def connections(self) -> pulumi.Output[_builtins.float]:
        """
        Connections value
        """
        return pulumi.get(self, "connections")

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> pulumi.Output[_builtins.str]:
        """
        Datacenter name info
        """
        return pulumi.get(self, "datacenter")

    @_builtins.property
    @pulumi.getter
    def dedicated(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Boolena value true if Load balncer is dedicated type
        """
        return pulumi.get(self, "dedicated")

    @_builtins.property
    @pulumi.getter(name="haEnabled")
    def ha_enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        true if High availability is enabled
        """
        return pulumi.get(self, "ha_enabled")

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="lbId")
    def lb_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "lb_id")

    @_builtins.property
    @pulumi.getter(name="securityCertificateId")
    def security_certificate_id(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Security certificate ID
        """
        return pulumi.get(self, "security_certificate_id")

    @_builtins.property
    @pulumi.getter(name="sslEnabled")
    def ssl_enabled(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "ssl_enabled")

    @_builtins.property
    @pulumi.getter(name="sslOffload")
    def ssl_offload(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        boolean value true if SSL offload is enabled
        """
        return pulumi.get(self, "ssl_offload")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[_builtins.float]:
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Tags associated with resource
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.LbTimeouts']]:
        return pulumi.get(self, "timeouts")

