# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsSecurityGroupRuleInitArgs', 'IsSecurityGroupRule']

@pulumi.input_type
class IsSecurityGroupRuleInitArgs:
    def __init__(__self__, *,
                 direction: pulumi.Input[_builtins.str],
                 group: pulumi.Input[_builtins.str],
                 icmp: Optional[pulumi.Input['IsSecurityGroupRuleIcmpArgs']] = None,
                 ip_version: Optional[pulumi.Input[_builtins.str]] = None,
                 is_security_group_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 local: Optional[pulumi.Input[_builtins.str]] = None,
                 remote: Optional[pulumi.Input[_builtins.str]] = None,
                 tcp: Optional[pulumi.Input['IsSecurityGroupRuleTcpArgs']] = None,
                 udp: Optional[pulumi.Input['IsSecurityGroupRuleUdpArgs']] = None):
        """
        The set of arguments for constructing a IsSecurityGroupRule resource.
        :param pulumi.Input[_builtins.str] direction: Direction of traffic to enforce, either inbound or outbound
        :param pulumi.Input[_builtins.str] group: Security group id
        :param pulumi.Input['IsSecurityGroupRuleIcmpArgs'] icmp: protocol=icmp
        :param pulumi.Input[_builtins.str] ip_version: IP version: ipv4
        :param pulumi.Input[_builtins.str] local: Security group id: an IP address, a CIDR block, or a single security group identifier
        :param pulumi.Input[_builtins.str] remote: Security group local ip: an IP address, a CIDR block
        :param pulumi.Input['IsSecurityGroupRuleTcpArgs'] tcp: protocol=tcp
        :param pulumi.Input['IsSecurityGroupRuleUdpArgs'] udp: protocol=udp
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "group", group)
        if icmp is not None:
            pulumi.set(__self__, "icmp", icmp)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if is_security_group_rule_id is not None:
            pulumi.set(__self__, "is_security_group_rule_id", is_security_group_rule_id)
        if local is not None:
            pulumi.set(__self__, "local", local)
        if remote is not None:
            pulumi.set(__self__, "remote", remote)
        if tcp is not None:
            pulumi.set(__self__, "tcp", tcp)
        if udp is not None:
            pulumi.set(__self__, "udp", udp)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> pulumi.Input[_builtins.str]:
        """
        Direction of traffic to enforce, either inbound or outbound
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter
    def group(self) -> pulumi.Input[_builtins.str]:
        """
        Security group id
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "group", value)

    @_builtins.property
    @pulumi.getter
    def icmp(self) -> Optional[pulumi.Input['IsSecurityGroupRuleIcmpArgs']]:
        """
        protocol=icmp
        """
        return pulumi.get(self, "icmp")

    @icmp.setter
    def icmp(self, value: Optional[pulumi.Input['IsSecurityGroupRuleIcmpArgs']]):
        pulumi.set(self, "icmp", value)

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP version: ipv4
        """
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_version", value)

    @_builtins.property
    @pulumi.getter(name="isSecurityGroupRuleId")
    def is_security_group_rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_security_group_rule_id")

    @is_security_group_rule_id.setter
    def is_security_group_rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_security_group_rule_id", value)

    @_builtins.property
    @pulumi.getter
    def local(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Security group id: an IP address, a CIDR block, or a single security group identifier
        """
        return pulumi.get(self, "local")

    @local.setter
    def local(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local", value)

    @_builtins.property
    @pulumi.getter
    def remote(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Security group local ip: an IP address, a CIDR block
        """
        return pulumi.get(self, "remote")

    @remote.setter
    def remote(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "remote", value)

    @_builtins.property
    @pulumi.getter
    def tcp(self) -> Optional[pulumi.Input['IsSecurityGroupRuleTcpArgs']]:
        """
        protocol=tcp
        """
        return pulumi.get(self, "tcp")

    @tcp.setter
    def tcp(self, value: Optional[pulumi.Input['IsSecurityGroupRuleTcpArgs']]):
        pulumi.set(self, "tcp", value)

    @_builtins.property
    @pulumi.getter
    def udp(self) -> Optional[pulumi.Input['IsSecurityGroupRuleUdpArgs']]:
        """
        protocol=udp
        """
        return pulumi.get(self, "udp")

    @udp.setter
    def udp(self, value: Optional[pulumi.Input['IsSecurityGroupRuleUdpArgs']]):
        pulumi.set(self, "udp", value)


@pulumi.input_type
class _IsSecurityGroupRuleState:
    def __init__(__self__, *,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 group: Optional[pulumi.Input[_builtins.str]] = None,
                 icmp: Optional[pulumi.Input['IsSecurityGroupRuleIcmpArgs']] = None,
                 ip_version: Optional[pulumi.Input[_builtins.str]] = None,
                 is_security_group_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 local: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 related_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 remote: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tcp: Optional[pulumi.Input['IsSecurityGroupRuleTcpArgs']] = None,
                 udp: Optional[pulumi.Input['IsSecurityGroupRuleUdpArgs']] = None):
        """
        Input properties used for looking up and filtering IsSecurityGroupRule resources.
        :param pulumi.Input[_builtins.str] direction: Direction of traffic to enforce, either inbound or outbound
        :param pulumi.Input[_builtins.str] group: Security group id
        :param pulumi.Input['IsSecurityGroupRuleIcmpArgs'] icmp: protocol=icmp
        :param pulumi.Input[_builtins.str] ip_version: IP version: ipv4
        :param pulumi.Input[_builtins.str] local: Security group id: an IP address, a CIDR block, or a single security group identifier
        :param pulumi.Input[_builtins.str] protocol: The Security Group Rule Protocol
        :param pulumi.Input[_builtins.str] related_crn: The crn of the Security Group
        :param pulumi.Input[_builtins.str] remote: Security group local ip: an IP address, a CIDR block
        :param pulumi.Input[_builtins.str] rule_id: Rule id
        :param pulumi.Input['IsSecurityGroupRuleTcpArgs'] tcp: protocol=tcp
        :param pulumi.Input['IsSecurityGroupRuleUdpArgs'] udp: protocol=udp
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if icmp is not None:
            pulumi.set(__self__, "icmp", icmp)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if is_security_group_rule_id is not None:
            pulumi.set(__self__, "is_security_group_rule_id", is_security_group_rule_id)
        if local is not None:
            pulumi.set(__self__, "local", local)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if related_crn is not None:
            pulumi.set(__self__, "related_crn", related_crn)
        if remote is not None:
            pulumi.set(__self__, "remote", remote)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if tcp is not None:
            pulumi.set(__self__, "tcp", tcp)
        if udp is not None:
            pulumi.set(__self__, "udp", udp)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Direction of traffic to enforce, either inbound or outbound
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Security group id
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group", value)

    @_builtins.property
    @pulumi.getter
    def icmp(self) -> Optional[pulumi.Input['IsSecurityGroupRuleIcmpArgs']]:
        """
        protocol=icmp
        """
        return pulumi.get(self, "icmp")

    @icmp.setter
    def icmp(self, value: Optional[pulumi.Input['IsSecurityGroupRuleIcmpArgs']]):
        pulumi.set(self, "icmp", value)

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP version: ipv4
        """
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_version", value)

    @_builtins.property
    @pulumi.getter(name="isSecurityGroupRuleId")
    def is_security_group_rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_security_group_rule_id")

    @is_security_group_rule_id.setter
    def is_security_group_rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_security_group_rule_id", value)

    @_builtins.property
    @pulumi.getter
    def local(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Security group id: an IP address, a CIDR block, or a single security group identifier
        """
        return pulumi.get(self, "local")

    @local.setter
    def local(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Security Group Rule Protocol
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="relatedCrn")
    def related_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The crn of the Security Group
        """
        return pulumi.get(self, "related_crn")

    @related_crn.setter
    def related_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "related_crn", value)

    @_builtins.property
    @pulumi.getter
    def remote(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Security group local ip: an IP address, a CIDR block
        """
        return pulumi.get(self, "remote")

    @remote.setter
    def remote(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "remote", value)

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Rule id
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rule_id", value)

    @_builtins.property
    @pulumi.getter
    def tcp(self) -> Optional[pulumi.Input['IsSecurityGroupRuleTcpArgs']]:
        """
        protocol=tcp
        """
        return pulumi.get(self, "tcp")

    @tcp.setter
    def tcp(self, value: Optional[pulumi.Input['IsSecurityGroupRuleTcpArgs']]):
        pulumi.set(self, "tcp", value)

    @_builtins.property
    @pulumi.getter
    def udp(self) -> Optional[pulumi.Input['IsSecurityGroupRuleUdpArgs']]:
        """
        protocol=udp
        """
        return pulumi.get(self, "udp")

    @udp.setter
    def udp(self, value: Optional[pulumi.Input['IsSecurityGroupRuleUdpArgs']]):
        pulumi.set(self, "udp", value)


@pulumi.type_token("ibm:index/isSecurityGroupRule:IsSecurityGroupRule")
class IsSecurityGroupRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 group: Optional[pulumi.Input[_builtins.str]] = None,
                 icmp: Optional[pulumi.Input[Union['IsSecurityGroupRuleIcmpArgs', 'IsSecurityGroupRuleIcmpArgsDict']]] = None,
                 ip_version: Optional[pulumi.Input[_builtins.str]] = None,
                 is_security_group_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 local: Optional[pulumi.Input[_builtins.str]] = None,
                 remote: Optional[pulumi.Input[_builtins.str]] = None,
                 tcp: Optional[pulumi.Input[Union['IsSecurityGroupRuleTcpArgs', 'IsSecurityGroupRuleTcpArgsDict']]] = None,
                 udp: Optional[pulumi.Input[Union['IsSecurityGroupRuleUdpArgs', 'IsSecurityGroupRuleUdpArgsDict']]] = None,
                 __props__=None):
        """
        Create a IsSecurityGroupRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] direction: Direction of traffic to enforce, either inbound or outbound
        :param pulumi.Input[_builtins.str] group: Security group id
        :param pulumi.Input[Union['IsSecurityGroupRuleIcmpArgs', 'IsSecurityGroupRuleIcmpArgsDict']] icmp: protocol=icmp
        :param pulumi.Input[_builtins.str] ip_version: IP version: ipv4
        :param pulumi.Input[_builtins.str] local: Security group id: an IP address, a CIDR block, or a single security group identifier
        :param pulumi.Input[_builtins.str] remote: Security group local ip: an IP address, a CIDR block
        :param pulumi.Input[Union['IsSecurityGroupRuleTcpArgs', 'IsSecurityGroupRuleTcpArgsDict']] tcp: protocol=tcp
        :param pulumi.Input[Union['IsSecurityGroupRuleUdpArgs', 'IsSecurityGroupRuleUdpArgsDict']] udp: protocol=udp
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsSecurityGroupRuleInitArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsSecurityGroupRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsSecurityGroupRuleInitArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsSecurityGroupRuleInitArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 group: Optional[pulumi.Input[_builtins.str]] = None,
                 icmp: Optional[pulumi.Input[Union['IsSecurityGroupRuleIcmpArgs', 'IsSecurityGroupRuleIcmpArgsDict']]] = None,
                 ip_version: Optional[pulumi.Input[_builtins.str]] = None,
                 is_security_group_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 local: Optional[pulumi.Input[_builtins.str]] = None,
                 remote: Optional[pulumi.Input[_builtins.str]] = None,
                 tcp: Optional[pulumi.Input[Union['IsSecurityGroupRuleTcpArgs', 'IsSecurityGroupRuleTcpArgsDict']]] = None,
                 udp: Optional[pulumi.Input[Union['IsSecurityGroupRuleUdpArgs', 'IsSecurityGroupRuleUdpArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsSecurityGroupRuleInitArgs.__new__(IsSecurityGroupRuleInitArgs)

            if direction is None and not opts.urn:
                raise TypeError("Missing required property 'direction'")
            __props__.__dict__["direction"] = direction
            if group is None and not opts.urn:
                raise TypeError("Missing required property 'group'")
            __props__.__dict__["group"] = group
            __props__.__dict__["icmp"] = icmp
            __props__.__dict__["ip_version"] = ip_version
            __props__.__dict__["is_security_group_rule_id"] = is_security_group_rule_id
            __props__.__dict__["local"] = local
            __props__.__dict__["remote"] = remote
            __props__.__dict__["tcp"] = tcp
            __props__.__dict__["udp"] = udp
            __props__.__dict__["protocol"] = None
            __props__.__dict__["related_crn"] = None
            __props__.__dict__["rule_id"] = None
        super(IsSecurityGroupRule, __self__).__init__(
            'ibm:index/isSecurityGroupRule:IsSecurityGroupRule',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            direction: Optional[pulumi.Input[_builtins.str]] = None,
            group: Optional[pulumi.Input[_builtins.str]] = None,
            icmp: Optional[pulumi.Input[Union['IsSecurityGroupRuleIcmpArgs', 'IsSecurityGroupRuleIcmpArgsDict']]] = None,
            ip_version: Optional[pulumi.Input[_builtins.str]] = None,
            is_security_group_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
            local: Optional[pulumi.Input[_builtins.str]] = None,
            protocol: Optional[pulumi.Input[_builtins.str]] = None,
            related_crn: Optional[pulumi.Input[_builtins.str]] = None,
            remote: Optional[pulumi.Input[_builtins.str]] = None,
            rule_id: Optional[pulumi.Input[_builtins.str]] = None,
            tcp: Optional[pulumi.Input[Union['IsSecurityGroupRuleTcpArgs', 'IsSecurityGroupRuleTcpArgsDict']]] = None,
            udp: Optional[pulumi.Input[Union['IsSecurityGroupRuleUdpArgs', 'IsSecurityGroupRuleUdpArgsDict']]] = None) -> 'IsSecurityGroupRule':
        """
        Get an existing IsSecurityGroupRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] direction: Direction of traffic to enforce, either inbound or outbound
        :param pulumi.Input[_builtins.str] group: Security group id
        :param pulumi.Input[Union['IsSecurityGroupRuleIcmpArgs', 'IsSecurityGroupRuleIcmpArgsDict']] icmp: protocol=icmp
        :param pulumi.Input[_builtins.str] ip_version: IP version: ipv4
        :param pulumi.Input[_builtins.str] local: Security group id: an IP address, a CIDR block, or a single security group identifier
        :param pulumi.Input[_builtins.str] protocol: The Security Group Rule Protocol
        :param pulumi.Input[_builtins.str] related_crn: The crn of the Security Group
        :param pulumi.Input[_builtins.str] remote: Security group local ip: an IP address, a CIDR block
        :param pulumi.Input[_builtins.str] rule_id: Rule id
        :param pulumi.Input[Union['IsSecurityGroupRuleTcpArgs', 'IsSecurityGroupRuleTcpArgsDict']] tcp: protocol=tcp
        :param pulumi.Input[Union['IsSecurityGroupRuleUdpArgs', 'IsSecurityGroupRuleUdpArgsDict']] udp: protocol=udp
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsSecurityGroupRuleState.__new__(_IsSecurityGroupRuleState)

        __props__.__dict__["direction"] = direction
        __props__.__dict__["group"] = group
        __props__.__dict__["icmp"] = icmp
        __props__.__dict__["ip_version"] = ip_version
        __props__.__dict__["is_security_group_rule_id"] = is_security_group_rule_id
        __props__.__dict__["local"] = local
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["related_crn"] = related_crn
        __props__.__dict__["remote"] = remote
        __props__.__dict__["rule_id"] = rule_id
        __props__.__dict__["tcp"] = tcp
        __props__.__dict__["udp"] = udp
        return IsSecurityGroupRule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> pulumi.Output[_builtins.str]:
        """
        Direction of traffic to enforce, either inbound or outbound
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def group(self) -> pulumi.Output[_builtins.str]:
        """
        Security group id
        """
        return pulumi.get(self, "group")

    @_builtins.property
    @pulumi.getter
    def icmp(self) -> pulumi.Output[Optional['outputs.IsSecurityGroupRuleIcmp']]:
        """
        protocol=icmp
        """
        return pulumi.get(self, "icmp")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        IP version: ipv4
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter(name="isSecurityGroupRuleId")
    def is_security_group_rule_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_security_group_rule_id")

    @_builtins.property
    @pulumi.getter
    def local(self) -> pulumi.Output[_builtins.str]:
        """
        Security group id: an IP address, a CIDR block, or a single security group identifier
        """
        return pulumi.get(self, "local")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[_builtins.str]:
        """
        The Security Group Rule Protocol
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="relatedCrn")
    def related_crn(self) -> pulumi.Output[_builtins.str]:
        """
        The crn of the Security Group
        """
        return pulumi.get(self, "related_crn")

    @_builtins.property
    @pulumi.getter
    def remote(self) -> pulumi.Output[_builtins.str]:
        """
        Security group local ip: an IP address, a CIDR block
        """
        return pulumi.get(self, "remote")

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> pulumi.Output[_builtins.str]:
        """
        Rule id
        """
        return pulumi.get(self, "rule_id")

    @_builtins.property
    @pulumi.getter
    def tcp(self) -> pulumi.Output[Optional['outputs.IsSecurityGroupRuleTcp']]:
        """
        protocol=tcp
        """
        return pulumi.get(self, "tcp")

    @_builtins.property
    @pulumi.getter
    def udp(self) -> pulumi.Output[Optional['outputs.IsSecurityGroupRuleUdp']]:
        """
        protocol=udp
        """
        return pulumi.get(self, "udp")

