# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCisFirewallResult',
    'AwaitableGetCisFirewallResult',
    'get_cis_firewall',
    'get_cis_firewall_output',
]

@pulumi.output_type
class GetCisFirewallResult:
    """
    A collection of values returned by getCisFirewall.
    """
    def __init__(__self__, access_rules=None, cis_id=None, domain_id=None, firewall_type=None, id=None, lockdowns=None, ua_rules=None):
        if access_rules and not isinstance(access_rules, list):
            raise TypeError("Expected argument 'access_rules' to be a list")
        pulumi.set(__self__, "access_rules", access_rules)
        if cis_id and not isinstance(cis_id, str):
            raise TypeError("Expected argument 'cis_id' to be a str")
        pulumi.set(__self__, "cis_id", cis_id)
        if domain_id and not isinstance(domain_id, str):
            raise TypeError("Expected argument 'domain_id' to be a str")
        pulumi.set(__self__, "domain_id", domain_id)
        if firewall_type and not isinstance(firewall_type, str):
            raise TypeError("Expected argument 'firewall_type' to be a str")
        pulumi.set(__self__, "firewall_type", firewall_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lockdowns and not isinstance(lockdowns, list):
            raise TypeError("Expected argument 'lockdowns' to be a list")
        pulumi.set(__self__, "lockdowns", lockdowns)
        if ua_rules and not isinstance(ua_rules, list):
            raise TypeError("Expected argument 'ua_rules' to be a list")
        pulumi.set(__self__, "ua_rules", ua_rules)

    @_builtins.property
    @pulumi.getter(name="accessRules")
    def access_rules(self) -> Sequence['outputs.GetCisFirewallAccessRuleResult']:
        return pulumi.get(self, "access_rules")

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> _builtins.str:
        return pulumi.get(self, "cis_id")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="firewallType")
    def firewall_type(self) -> _builtins.str:
        return pulumi.get(self, "firewall_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def lockdowns(self) -> Sequence['outputs.GetCisFirewallLockdownResult']:
        return pulumi.get(self, "lockdowns")

    @_builtins.property
    @pulumi.getter(name="uaRules")
    def ua_rules(self) -> Sequence['outputs.GetCisFirewallUaRuleResult']:
        return pulumi.get(self, "ua_rules")


class AwaitableGetCisFirewallResult(GetCisFirewallResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCisFirewallResult(
            access_rules=self.access_rules,
            cis_id=self.cis_id,
            domain_id=self.domain_id,
            firewall_type=self.firewall_type,
            id=self.id,
            lockdowns=self.lockdowns,
            ua_rules=self.ua_rules)


def get_cis_firewall(cis_id: Optional[_builtins.str] = None,
                     domain_id: Optional[_builtins.str] = None,
                     firewall_type: Optional[_builtins.str] = None,
                     id: Optional[_builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCisFirewallResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cisId'] = cis_id
    __args__['domainId'] = domain_id
    __args__['firewallType'] = firewall_type
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCisFirewall:getCisFirewall', __args__, opts=opts, typ=GetCisFirewallResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCisFirewallResult(
        access_rules=pulumi.get(__ret__, 'access_rules'),
        cis_id=pulumi.get(__ret__, 'cis_id'),
        domain_id=pulumi.get(__ret__, 'domain_id'),
        firewall_type=pulumi.get(__ret__, 'firewall_type'),
        id=pulumi.get(__ret__, 'id'),
        lockdowns=pulumi.get(__ret__, 'lockdowns'),
        ua_rules=pulumi.get(__ret__, 'ua_rules'))
def get_cis_firewall_output(cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                            domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                            firewall_type: Optional[pulumi.Input[_builtins.str]] = None,
                            id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCisFirewallResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cisId'] = cis_id
    __args__['domainId'] = domain_id
    __args__['firewallType'] = firewall_type
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCisFirewall:getCisFirewall', __args__, opts=opts, typ=GetCisFirewallResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCisFirewallResult(
        access_rules=pulumi.get(__response__, 'access_rules'),
        cis_id=pulumi.get(__response__, 'cis_id'),
        domain_id=pulumi.get(__response__, 'domain_id'),
        firewall_type=pulumi.get(__response__, 'firewall_type'),
        id=pulumi.get(__response__, 'id'),
        lockdowns=pulumi.get(__response__, 'lockdowns'),
        ua_rules=pulumi.get(__response__, 'ua_rules')))
