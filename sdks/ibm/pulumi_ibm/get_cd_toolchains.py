# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCdToolchainsResult',
    'AwaitableGetCdToolchainsResult',
    'get_cd_toolchains',
    'get_cd_toolchains_output',
]

@pulumi.output_type
class GetCdToolchainsResult:
    """
    A collection of values returned by getCdToolchains.
    """
    def __init__(__self__, id=None, name=None, resource_group_id=None, toolchains=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resource_group_id and not isinstance(resource_group_id, str):
            raise TypeError("Expected argument 'resource_group_id' to be a str")
        pulumi.set(__self__, "resource_group_id", resource_group_id)
        if toolchains and not isinstance(toolchains, list):
            raise TypeError("Expected argument 'toolchains' to be a list")
        pulumi.set(__self__, "toolchains", toolchains)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> _builtins.str:
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter
    def toolchains(self) -> Sequence['outputs.GetCdToolchainsToolchainResult']:
        return pulumi.get(self, "toolchains")


class AwaitableGetCdToolchainsResult(GetCdToolchainsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCdToolchainsResult(
            id=self.id,
            name=self.name,
            resource_group_id=self.resource_group_id,
            toolchains=self.toolchains)


def get_cd_toolchains(id: Optional[_builtins.str] = None,
                      name: Optional[_builtins.str] = None,
                      resource_group_id: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCdToolchainsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['resourceGroupId'] = resource_group_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCdToolchains:getCdToolchains', __args__, opts=opts, typ=GetCdToolchainsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCdToolchainsResult(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        resource_group_id=pulumi.get(__ret__, 'resource_group_id'),
        toolchains=pulumi.get(__ret__, 'toolchains'))
def get_cd_toolchains_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCdToolchainsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['resourceGroupId'] = resource_group_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCdToolchains:getCdToolchains', __args__, opts=opts, typ=GetCdToolchainsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCdToolchainsResult(
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        resource_group_id=pulumi.get(__response__, 'resource_group_id'),
        toolchains=pulumi.get(__response__, 'toolchains')))
