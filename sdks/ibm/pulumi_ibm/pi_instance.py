# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PiInstanceArgs', 'PiInstance']

@pulumi.input_type
class PiInstanceArgs:
    def __init__(__self__, *,
                 pi_cloud_instance_id: pulumi.Input[_builtins.str],
                 pi_image_id: pulumi.Input[_builtins.str],
                 pi_instance_name: pulumi.Input[_builtins.str],
                 pi_networks: pulumi.Input[Sequence[pulumi.Input['PiInstancePiNetworkArgs']]],
                 pi_affinity_instance: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_affinity_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_affinity_volume: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_anti_affinity_instances: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_anti_affinity_volumes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_boot_volume_replication_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_deployment_target: Optional[pulumi.Input['PiInstancePiDeploymentTargetArgs']] = None,
                 pi_deployment_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_health_status: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_ibmi_css: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_ibmi_pha: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_ibmi_rds_users: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_key_pair_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_license_repository_capacity: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_memory: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_pin_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_placement_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_proc_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_processors: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_replicants: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_replication_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_replication_scheme: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_replication_sites: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_retain_virtual_serial_number: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_sap_deployment_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_sap_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_shared_processor_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_storage_connection: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_storage_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_storage_pool_affinity: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_storage_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_sys_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_data: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_virtual_cores_assigned: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_virtual_optical_device: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_virtual_serial_number: Optional[pulumi.Input['PiInstancePiVirtualSerialNumberArgs']] = None,
                 pi_volume_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['PiInstanceTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a PiInstance resource.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: This is the Power Instance id that is assigned to the account
        :param pulumi.Input[_builtins.str] pi_image_id: PI instance image id
        :param pulumi.Input[_builtins.str] pi_instance_name: PI Instance name
        :param pulumi.Input[Sequence[pulumi.Input['PiInstancePiNetworkArgs']]] pi_networks: List of one or more networks to attach to the instance
        :param pulumi.Input[_builtins.str] pi_affinity_instance: PVM Instance (ID or Name) to base storage affinity policy against; required if requesting storage affinity and
               pi_affinity_volume is not provided
        :param pulumi.Input[_builtins.str] pi_affinity_policy: Affinity policy for pvm instance being created; ignored if pi_storage_pool provided; for policy affinity requires one of
               pi_affinity_instance or pi_affinity_volume to be specified; for policy anti-affinity requires one of
               pi_anti_affinity_instances or pi_anti_affinity_volumes to be specified
        :param pulumi.Input[_builtins.str] pi_affinity_volume: Volume (ID or Name) to base storage affinity policy against; required if requesting affinity and pi_affinity_instance is
               not provided
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_anti_affinity_instances: List of pvmInstances to base storage anti-affinity policy against; required if requesting anti-affinity and
               pi_anti_affinity_volumes is not provided
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_anti_affinity_volumes: List of volumes to base storage anti-affinity policy against; required if requesting anti-affinity and
               pi_anti_affinity_instances is not provided
        :param pulumi.Input[_builtins.bool] pi_boot_volume_replication_enabled: Indicates if the boot volume should be replication enabled or not.
        :param pulumi.Input['PiInstancePiDeploymentTargetArgs'] pi_deployment_target: The deployment of a dedicated host.
        :param pulumi.Input[_builtins.str] pi_deployment_type: Custom Deployment Type Information
        :param pulumi.Input[_builtins.str] pi_health_status: Allow the user to set the status of the lpar so that they can connect to it faster
        :param pulumi.Input[_builtins.bool] pi_ibmi_css: IBM i Cloud Storage Solution
        :param pulumi.Input[_builtins.bool] pi_ibmi_pha: IBM i Power High Availability
        :param pulumi.Input[_builtins.float] pi_ibmi_rds_users: IBM i Rational Dev Studio Number of User Licenses
        :param pulumi.Input[_builtins.str] pi_key_pair_name: SSH key name
        :param pulumi.Input[_builtins.float] pi_license_repository_capacity: The VTL license repository capacity TB value
        :param pulumi.Input[_builtins.float] pi_memory: Memory size
        :param pulumi.Input[_builtins.str] pi_pin_policy: Pin Policy of the instance
        :param pulumi.Input[_builtins.str] pi_placement_group_id: Placement group ID
        :param pulumi.Input[_builtins.str] pi_proc_type: Instance processor type
        :param pulumi.Input[_builtins.float] pi_processors: Processors count
        :param pulumi.Input[_builtins.float] pi_replicants: PI Instance replicas count
        :param pulumi.Input[_builtins.str] pi_replication_policy: Replication policy for the PI Instance
        :param pulumi.Input[_builtins.str] pi_replication_scheme: Replication scheme
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_replication_sites: Indicates the replication sites of the boot volume.
        :param pulumi.Input[_builtins.bool] pi_retain_virtual_serial_number: Indicates whether to retain virtual serial number when changed or deleted.
        :param pulumi.Input[_builtins.str] pi_sap_deployment_type: Custom SAP Deployment Type Information
        :param pulumi.Input[_builtins.str] pi_sap_profile_id: SAP Profile ID for the amount of cores and memory
        :param pulumi.Input[_builtins.str] pi_shared_processor_pool: Shared Processor Pool the instance is deployed on
        :param pulumi.Input[_builtins.str] pi_storage_connection: Storage Connectivity Group for server deployment
        :param pulumi.Input[_builtins.str] pi_storage_pool: Storage Pool for server deployment; if provided then pi_storage_pool_affinity will be ignored; Only valid when you
               deploy one of the IBM supplied stock images. Storage pool for a custom image (an imported image or an image that is
               created from a VM capture) defaults to the storage pool the image was created in
        :param pulumi.Input[_builtins.bool] pi_storage_pool_affinity: Indicates if all volumes attached to the server must reside in the same storage pool
        :param pulumi.Input[_builtins.str] pi_storage_type: Storage type for server deployment; if pi_storage_type is not provided the storage type will default to tier3
        :param pulumi.Input[_builtins.str] pi_sys_type: The type of system on which to create the VM (e880/e980/e1080/e1150/e1180/s922/s1022/s1122).
        :param pulumi.Input[_builtins.str] pi_user_data: Base64 encoded data to be passed in for invoking a cloud init script
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: The user tags attached to this resource.
        :param pulumi.Input[_builtins.float] pi_virtual_cores_assigned: Virtual Cores Assigned to the PVMInstance
        :param pulumi.Input[_builtins.str] pi_virtual_optical_device: Virtual Machine's Cloud Initialization Virtual Optical Device
        :param pulumi.Input['PiInstancePiVirtualSerialNumberArgs'] pi_virtual_serial_number: Virtual Serial Number information
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_volume_ids: List of PI volumes
        """
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        pulumi.set(__self__, "pi_image_id", pi_image_id)
        pulumi.set(__self__, "pi_instance_name", pi_instance_name)
        pulumi.set(__self__, "pi_networks", pi_networks)
        if pi_affinity_instance is not None:
            pulumi.set(__self__, "pi_affinity_instance", pi_affinity_instance)
        if pi_affinity_policy is not None:
            pulumi.set(__self__, "pi_affinity_policy", pi_affinity_policy)
        if pi_affinity_volume is not None:
            pulumi.set(__self__, "pi_affinity_volume", pi_affinity_volume)
        if pi_anti_affinity_instances is not None:
            pulumi.set(__self__, "pi_anti_affinity_instances", pi_anti_affinity_instances)
        if pi_anti_affinity_volumes is not None:
            pulumi.set(__self__, "pi_anti_affinity_volumes", pi_anti_affinity_volumes)
        if pi_boot_volume_replication_enabled is not None:
            pulumi.set(__self__, "pi_boot_volume_replication_enabled", pi_boot_volume_replication_enabled)
        if pi_deployment_target is not None:
            pulumi.set(__self__, "pi_deployment_target", pi_deployment_target)
        if pi_deployment_type is not None:
            pulumi.set(__self__, "pi_deployment_type", pi_deployment_type)
        if pi_health_status is not None:
            pulumi.set(__self__, "pi_health_status", pi_health_status)
        if pi_ibmi_css is not None:
            pulumi.set(__self__, "pi_ibmi_css", pi_ibmi_css)
        if pi_ibmi_pha is not None:
            pulumi.set(__self__, "pi_ibmi_pha", pi_ibmi_pha)
        if pi_ibmi_rds_users is not None:
            pulumi.set(__self__, "pi_ibmi_rds_users", pi_ibmi_rds_users)
        if pi_instance_id is not None:
            pulumi.set(__self__, "pi_instance_id", pi_instance_id)
        if pi_key_pair_name is not None:
            pulumi.set(__self__, "pi_key_pair_name", pi_key_pair_name)
        if pi_license_repository_capacity is not None:
            pulumi.set(__self__, "pi_license_repository_capacity", pi_license_repository_capacity)
        if pi_memory is not None:
            pulumi.set(__self__, "pi_memory", pi_memory)
        if pi_pin_policy is not None:
            pulumi.set(__self__, "pi_pin_policy", pi_pin_policy)
        if pi_placement_group_id is not None:
            pulumi.set(__self__, "pi_placement_group_id", pi_placement_group_id)
        if pi_proc_type is not None:
            pulumi.set(__self__, "pi_proc_type", pi_proc_type)
        if pi_processors is not None:
            pulumi.set(__self__, "pi_processors", pi_processors)
        if pi_replicants is not None:
            pulumi.set(__self__, "pi_replicants", pi_replicants)
        if pi_replication_policy is not None:
            pulumi.set(__self__, "pi_replication_policy", pi_replication_policy)
        if pi_replication_scheme is not None:
            pulumi.set(__self__, "pi_replication_scheme", pi_replication_scheme)
        if pi_replication_sites is not None:
            pulumi.set(__self__, "pi_replication_sites", pi_replication_sites)
        if pi_retain_virtual_serial_number is not None:
            pulumi.set(__self__, "pi_retain_virtual_serial_number", pi_retain_virtual_serial_number)
        if pi_sap_deployment_type is not None:
            pulumi.set(__self__, "pi_sap_deployment_type", pi_sap_deployment_type)
        if pi_sap_profile_id is not None:
            pulumi.set(__self__, "pi_sap_profile_id", pi_sap_profile_id)
        if pi_shared_processor_pool is not None:
            pulumi.set(__self__, "pi_shared_processor_pool", pi_shared_processor_pool)
        if pi_storage_connection is not None:
            pulumi.set(__self__, "pi_storage_connection", pi_storage_connection)
        if pi_storage_pool is not None:
            pulumi.set(__self__, "pi_storage_pool", pi_storage_pool)
        if pi_storage_pool_affinity is not None:
            pulumi.set(__self__, "pi_storage_pool_affinity", pi_storage_pool_affinity)
        if pi_storage_type is not None:
            pulumi.set(__self__, "pi_storage_type", pi_storage_type)
        if pi_sys_type is not None:
            pulumi.set(__self__, "pi_sys_type", pi_sys_type)
        if pi_user_data is not None:
            pulumi.set(__self__, "pi_user_data", pi_user_data)
        if pi_user_tags is not None:
            pulumi.set(__self__, "pi_user_tags", pi_user_tags)
        if pi_virtual_cores_assigned is not None:
            pulumi.set(__self__, "pi_virtual_cores_assigned", pi_virtual_cores_assigned)
        if pi_virtual_optical_device is not None:
            pulumi.set(__self__, "pi_virtual_optical_device", pi_virtual_optical_device)
        if pi_virtual_serial_number is not None:
            pulumi.set(__self__, "pi_virtual_serial_number", pi_virtual_serial_number)
        if pi_volume_ids is not None:
            pulumi.set(__self__, "pi_volume_ids", pi_volume_ids)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        This is the Power Instance id that is assigned to the account
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piImageId")
    def pi_image_id(self) -> pulumi.Input[_builtins.str]:
        """
        PI instance image id
        """
        return pulumi.get(self, "pi_image_id")

    @pi_image_id.setter
    def pi_image_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_image_id", value)

    @_builtins.property
    @pulumi.getter(name="piInstanceName")
    def pi_instance_name(self) -> pulumi.Input[_builtins.str]:
        """
        PI Instance name
        """
        return pulumi.get(self, "pi_instance_name")

    @pi_instance_name.setter
    def pi_instance_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_instance_name", value)

    @_builtins.property
    @pulumi.getter(name="piNetworks")
    def pi_networks(self) -> pulumi.Input[Sequence[pulumi.Input['PiInstancePiNetworkArgs']]]:
        """
        List of one or more networks to attach to the instance
        """
        return pulumi.get(self, "pi_networks")

    @pi_networks.setter
    def pi_networks(self, value: pulumi.Input[Sequence[pulumi.Input['PiInstancePiNetworkArgs']]]):
        pulumi.set(self, "pi_networks", value)

    @_builtins.property
    @pulumi.getter(name="piAffinityInstance")
    def pi_affinity_instance(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        PVM Instance (ID or Name) to base storage affinity policy against; required if requesting storage affinity and
        pi_affinity_volume is not provided
        """
        return pulumi.get(self, "pi_affinity_instance")

    @pi_affinity_instance.setter
    def pi_affinity_instance(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_affinity_instance", value)

    @_builtins.property
    @pulumi.getter(name="piAffinityPolicy")
    def pi_affinity_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Affinity policy for pvm instance being created; ignored if pi_storage_pool provided; for policy affinity requires one of
        pi_affinity_instance or pi_affinity_volume to be specified; for policy anti-affinity requires one of
        pi_anti_affinity_instances or pi_anti_affinity_volumes to be specified
        """
        return pulumi.get(self, "pi_affinity_policy")

    @pi_affinity_policy.setter
    def pi_affinity_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_affinity_policy", value)

    @_builtins.property
    @pulumi.getter(name="piAffinityVolume")
    def pi_affinity_volume(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Volume (ID or Name) to base storage affinity policy against; required if requesting affinity and pi_affinity_instance is
        not provided
        """
        return pulumi.get(self, "pi_affinity_volume")

    @pi_affinity_volume.setter
    def pi_affinity_volume(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_affinity_volume", value)

    @_builtins.property
    @pulumi.getter(name="piAntiAffinityInstances")
    def pi_anti_affinity_instances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of pvmInstances to base storage anti-affinity policy against; required if requesting anti-affinity and
        pi_anti_affinity_volumes is not provided
        """
        return pulumi.get(self, "pi_anti_affinity_instances")

    @pi_anti_affinity_instances.setter
    def pi_anti_affinity_instances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_anti_affinity_instances", value)

    @_builtins.property
    @pulumi.getter(name="piAntiAffinityVolumes")
    def pi_anti_affinity_volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of volumes to base storage anti-affinity policy against; required if requesting anti-affinity and
        pi_anti_affinity_instances is not provided
        """
        return pulumi.get(self, "pi_anti_affinity_volumes")

    @pi_anti_affinity_volumes.setter
    def pi_anti_affinity_volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_anti_affinity_volumes", value)

    @_builtins.property
    @pulumi.getter(name="piBootVolumeReplicationEnabled")
    def pi_boot_volume_replication_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if the boot volume should be replication enabled or not.
        """
        return pulumi.get(self, "pi_boot_volume_replication_enabled")

    @pi_boot_volume_replication_enabled.setter
    def pi_boot_volume_replication_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pi_boot_volume_replication_enabled", value)

    @_builtins.property
    @pulumi.getter(name="piDeploymentTarget")
    def pi_deployment_target(self) -> Optional[pulumi.Input['PiInstancePiDeploymentTargetArgs']]:
        """
        The deployment of a dedicated host.
        """
        return pulumi.get(self, "pi_deployment_target")

    @pi_deployment_target.setter
    def pi_deployment_target(self, value: Optional[pulumi.Input['PiInstancePiDeploymentTargetArgs']]):
        pulumi.set(self, "pi_deployment_target", value)

    @_builtins.property
    @pulumi.getter(name="piDeploymentType")
    def pi_deployment_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Custom Deployment Type Information
        """
        return pulumi.get(self, "pi_deployment_type")

    @pi_deployment_type.setter
    def pi_deployment_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_deployment_type", value)

    @_builtins.property
    @pulumi.getter(name="piHealthStatus")
    def pi_health_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Allow the user to set the status of the lpar so that they can connect to it faster
        """
        return pulumi.get(self, "pi_health_status")

    @pi_health_status.setter
    def pi_health_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_health_status", value)

    @_builtins.property
    @pulumi.getter(name="piIbmiCss")
    def pi_ibmi_css(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        IBM i Cloud Storage Solution
        """
        return pulumi.get(self, "pi_ibmi_css")

    @pi_ibmi_css.setter
    def pi_ibmi_css(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pi_ibmi_css", value)

    @_builtins.property
    @pulumi.getter(name="piIbmiPha")
    def pi_ibmi_pha(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        IBM i Power High Availability
        """
        return pulumi.get(self, "pi_ibmi_pha")

    @pi_ibmi_pha.setter
    def pi_ibmi_pha(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pi_ibmi_pha", value)

    @_builtins.property
    @pulumi.getter(name="piIbmiRdsUsers")
    def pi_ibmi_rds_users(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        IBM i Rational Dev Studio Number of User Licenses
        """
        return pulumi.get(self, "pi_ibmi_rds_users")

    @pi_ibmi_rds_users.setter
    def pi_ibmi_rds_users(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "pi_ibmi_rds_users", value)

    @_builtins.property
    @pulumi.getter(name="piInstanceId")
    def pi_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_instance_id")

    @pi_instance_id.setter
    def pi_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piKeyPairName")
    def pi_key_pair_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        SSH key name
        """
        return pulumi.get(self, "pi_key_pair_name")

    @pi_key_pair_name.setter
    def pi_key_pair_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_key_pair_name", value)

    @_builtins.property
    @pulumi.getter(name="piLicenseRepositoryCapacity")
    def pi_license_repository_capacity(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The VTL license repository capacity TB value
        """
        return pulumi.get(self, "pi_license_repository_capacity")

    @pi_license_repository_capacity.setter
    def pi_license_repository_capacity(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "pi_license_repository_capacity", value)

    @_builtins.property
    @pulumi.getter(name="piMemory")
    def pi_memory(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Memory size
        """
        return pulumi.get(self, "pi_memory")

    @pi_memory.setter
    def pi_memory(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "pi_memory", value)

    @_builtins.property
    @pulumi.getter(name="piPinPolicy")
    def pi_pin_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Pin Policy of the instance
        """
        return pulumi.get(self, "pi_pin_policy")

    @pi_pin_policy.setter
    def pi_pin_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_pin_policy", value)

    @_builtins.property
    @pulumi.getter(name="piPlacementGroupId")
    def pi_placement_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Placement group ID
        """
        return pulumi.get(self, "pi_placement_group_id")

    @pi_placement_group_id.setter
    def pi_placement_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_placement_group_id", value)

    @_builtins.property
    @pulumi.getter(name="piProcType")
    def pi_proc_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Instance processor type
        """
        return pulumi.get(self, "pi_proc_type")

    @pi_proc_type.setter
    def pi_proc_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_proc_type", value)

    @_builtins.property
    @pulumi.getter(name="piProcessors")
    def pi_processors(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Processors count
        """
        return pulumi.get(self, "pi_processors")

    @pi_processors.setter
    def pi_processors(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "pi_processors", value)

    @_builtins.property
    @pulumi.getter(name="piReplicants")
    def pi_replicants(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        PI Instance replicas count
        """
        return pulumi.get(self, "pi_replicants")

    @pi_replicants.setter
    def pi_replicants(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "pi_replicants", value)

    @_builtins.property
    @pulumi.getter(name="piReplicationPolicy")
    def pi_replication_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Replication policy for the PI Instance
        """
        return pulumi.get(self, "pi_replication_policy")

    @pi_replication_policy.setter
    def pi_replication_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_replication_policy", value)

    @_builtins.property
    @pulumi.getter(name="piReplicationScheme")
    def pi_replication_scheme(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Replication scheme
        """
        return pulumi.get(self, "pi_replication_scheme")

    @pi_replication_scheme.setter
    def pi_replication_scheme(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_replication_scheme", value)

    @_builtins.property
    @pulumi.getter(name="piReplicationSites")
    def pi_replication_sites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Indicates the replication sites of the boot volume.
        """
        return pulumi.get(self, "pi_replication_sites")

    @pi_replication_sites.setter
    def pi_replication_sites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_replication_sites", value)

    @_builtins.property
    @pulumi.getter(name="piRetainVirtualSerialNumber")
    def pi_retain_virtual_serial_number(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether to retain virtual serial number when changed or deleted.
        """
        return pulumi.get(self, "pi_retain_virtual_serial_number")

    @pi_retain_virtual_serial_number.setter
    def pi_retain_virtual_serial_number(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pi_retain_virtual_serial_number", value)

    @_builtins.property
    @pulumi.getter(name="piSapDeploymentType")
    def pi_sap_deployment_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Custom SAP Deployment Type Information
        """
        return pulumi.get(self, "pi_sap_deployment_type")

    @pi_sap_deployment_type.setter
    def pi_sap_deployment_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_sap_deployment_type", value)

    @_builtins.property
    @pulumi.getter(name="piSapProfileId")
    def pi_sap_profile_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        SAP Profile ID for the amount of cores and memory
        """
        return pulumi.get(self, "pi_sap_profile_id")

    @pi_sap_profile_id.setter
    def pi_sap_profile_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_sap_profile_id", value)

    @_builtins.property
    @pulumi.getter(name="piSharedProcessorPool")
    def pi_shared_processor_pool(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shared Processor Pool the instance is deployed on
        """
        return pulumi.get(self, "pi_shared_processor_pool")

    @pi_shared_processor_pool.setter
    def pi_shared_processor_pool(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_shared_processor_pool", value)

    @_builtins.property
    @pulumi.getter(name="piStorageConnection")
    def pi_storage_connection(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Storage Connectivity Group for server deployment
        """
        return pulumi.get(self, "pi_storage_connection")

    @pi_storage_connection.setter
    def pi_storage_connection(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_storage_connection", value)

    @_builtins.property
    @pulumi.getter(name="piStoragePool")
    def pi_storage_pool(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Storage Pool for server deployment; if provided then pi_storage_pool_affinity will be ignored; Only valid when you
        deploy one of the IBM supplied stock images. Storage pool for a custom image (an imported image or an image that is
        created from a VM capture) defaults to the storage pool the image was created in
        """
        return pulumi.get(self, "pi_storage_pool")

    @pi_storage_pool.setter
    def pi_storage_pool(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_storage_pool", value)

    @_builtins.property
    @pulumi.getter(name="piStoragePoolAffinity")
    def pi_storage_pool_affinity(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if all volumes attached to the server must reside in the same storage pool
        """
        return pulumi.get(self, "pi_storage_pool_affinity")

    @pi_storage_pool_affinity.setter
    def pi_storage_pool_affinity(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pi_storage_pool_affinity", value)

    @_builtins.property
    @pulumi.getter(name="piStorageType")
    def pi_storage_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Storage type for server deployment; if pi_storage_type is not provided the storage type will default to tier3
        """
        return pulumi.get(self, "pi_storage_type")

    @pi_storage_type.setter
    def pi_storage_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_storage_type", value)

    @_builtins.property
    @pulumi.getter(name="piSysType")
    def pi_sys_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of system on which to create the VM (e880/e980/e1080/e1150/e1180/s922/s1022/s1122).
        """
        return pulumi.get(self, "pi_sys_type")

    @pi_sys_type.setter
    def pi_sys_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_sys_type", value)

    @_builtins.property
    @pulumi.getter(name="piUserData")
    def pi_user_data(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Base64 encoded data to be passed in for invoking a cloud init script
        """
        return pulumi.get(self, "pi_user_data")

    @pi_user_data.setter
    def pi_user_data(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_user_data", value)

    @_builtins.property
    @pulumi.getter(name="piUserTags")
    def pi_user_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The user tags attached to this resource.
        """
        return pulumi.get(self, "pi_user_tags")

    @pi_user_tags.setter
    def pi_user_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_user_tags", value)

    @_builtins.property
    @pulumi.getter(name="piVirtualCoresAssigned")
    def pi_virtual_cores_assigned(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Virtual Cores Assigned to the PVMInstance
        """
        return pulumi.get(self, "pi_virtual_cores_assigned")

    @pi_virtual_cores_assigned.setter
    def pi_virtual_cores_assigned(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "pi_virtual_cores_assigned", value)

    @_builtins.property
    @pulumi.getter(name="piVirtualOpticalDevice")
    def pi_virtual_optical_device(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Virtual Machine's Cloud Initialization Virtual Optical Device
        """
        return pulumi.get(self, "pi_virtual_optical_device")

    @pi_virtual_optical_device.setter
    def pi_virtual_optical_device(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_virtual_optical_device", value)

    @_builtins.property
    @pulumi.getter(name="piVirtualSerialNumber")
    def pi_virtual_serial_number(self) -> Optional[pulumi.Input['PiInstancePiVirtualSerialNumberArgs']]:
        """
        Virtual Serial Number information
        """
        return pulumi.get(self, "pi_virtual_serial_number")

    @pi_virtual_serial_number.setter
    def pi_virtual_serial_number(self, value: Optional[pulumi.Input['PiInstancePiVirtualSerialNumberArgs']]):
        pulumi.set(self, "pi_virtual_serial_number", value)

    @_builtins.property
    @pulumi.getter(name="piVolumeIds")
    def pi_volume_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of PI volumes
        """
        return pulumi.get(self, "pi_volume_ids")

    @pi_volume_ids.setter
    def pi_volume_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_volume_ids", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiInstanceTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiInstanceTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _PiInstanceState:
    def __init__(__self__, *,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 dedicated_host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 fault: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 health_status: Optional[pulumi.Input[_builtins.str]] = None,
                 ibmi_rds: Optional[pulumi.Input[_builtins.bool]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 max_memory: Optional[pulumi.Input[_builtins.float]] = None,
                 max_processors: Optional[pulumi.Input[_builtins.float]] = None,
                 max_virtual_cores: Optional[pulumi.Input[_builtins.float]] = None,
                 min_memory: Optional[pulumi.Input[_builtins.float]] = None,
                 min_processors: Optional[pulumi.Input[_builtins.float]] = None,
                 min_virtual_cores: Optional[pulumi.Input[_builtins.float]] = None,
                 operating_system: Optional[pulumi.Input[_builtins.str]] = None,
                 os_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_affinity_instance: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_affinity_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_affinity_volume: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_anti_affinity_instances: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_anti_affinity_volumes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_boot_volume_replication_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_deployment_target: Optional[pulumi.Input['PiInstancePiDeploymentTargetArgs']] = None,
                 pi_deployment_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_health_status: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_ibmi_css: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_ibmi_pha: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_ibmi_rds_users: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_instance_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_key_pair_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_license_repository_capacity: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_memory: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_networks: Optional[pulumi.Input[Sequence[pulumi.Input['PiInstancePiNetworkArgs']]]] = None,
                 pi_pin_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_placement_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_proc_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_processors: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_replicants: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_replication_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_replication_scheme: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_replication_sites: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_retain_virtual_serial_number: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_sap_deployment_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_sap_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_shared_processor_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_storage_connection: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_storage_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_storage_pool_affinity: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_storage_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_sys_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_data: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_virtual_cores_assigned: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_virtual_optical_device: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_virtual_serial_number: Optional[pulumi.Input['PiInstancePiVirtualSerialNumberArgs']] = None,
                 pi_volume_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pin_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 progress: Optional[pulumi.Input[_builtins.float]] = None,
                 shared_processor_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['PiInstanceTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering PiInstance resources.
        :param pulumi.Input[_builtins.str] crn: The CRN of this resource.
        :param pulumi.Input[_builtins.str] dedicated_host_id: The dedicated host ID where the shared processor pool resides.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] fault: Fault information.
        :param pulumi.Input[_builtins.str] health_status: PI Instance health status
        :param pulumi.Input[_builtins.bool] ibmi_rds: IBM i Rational Dev Studio
        :param pulumi.Input[_builtins.str] instance_id: Instance ID
        :param pulumi.Input[_builtins.float] max_memory: Maximum memory size
        :param pulumi.Input[_builtins.float] max_processors: Maximum number of processors
        :param pulumi.Input[_builtins.float] max_virtual_cores: Maximum Virtual Cores Assigned to the PVMInstance
        :param pulumi.Input[_builtins.float] min_memory: Minimum memory
        :param pulumi.Input[_builtins.float] min_processors: Minimum number of the CPUs
        :param pulumi.Input[_builtins.float] min_virtual_cores: Minimum Virtual Cores Assigned to the PVMInstance
        :param pulumi.Input[_builtins.str] operating_system: Operating System
        :param pulumi.Input[_builtins.str] os_type: OS Type
        :param pulumi.Input[_builtins.str] pi_affinity_instance: PVM Instance (ID or Name) to base storage affinity policy against; required if requesting storage affinity and
               pi_affinity_volume is not provided
        :param pulumi.Input[_builtins.str] pi_affinity_policy: Affinity policy for pvm instance being created; ignored if pi_storage_pool provided; for policy affinity requires one of
               pi_affinity_instance or pi_affinity_volume to be specified; for policy anti-affinity requires one of
               pi_anti_affinity_instances or pi_anti_affinity_volumes to be specified
        :param pulumi.Input[_builtins.str] pi_affinity_volume: Volume (ID or Name) to base storage affinity policy against; required if requesting affinity and pi_affinity_instance is
               not provided
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_anti_affinity_instances: List of pvmInstances to base storage anti-affinity policy against; required if requesting anti-affinity and
               pi_anti_affinity_volumes is not provided
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_anti_affinity_volumes: List of volumes to base storage anti-affinity policy against; required if requesting anti-affinity and
               pi_anti_affinity_instances is not provided
        :param pulumi.Input[_builtins.bool] pi_boot_volume_replication_enabled: Indicates if the boot volume should be replication enabled or not.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: This is the Power Instance id that is assigned to the account
        :param pulumi.Input['PiInstancePiDeploymentTargetArgs'] pi_deployment_target: The deployment of a dedicated host.
        :param pulumi.Input[_builtins.str] pi_deployment_type: Custom Deployment Type Information
        :param pulumi.Input[_builtins.str] pi_health_status: Allow the user to set the status of the lpar so that they can connect to it faster
        :param pulumi.Input[_builtins.bool] pi_ibmi_css: IBM i Cloud Storage Solution
        :param pulumi.Input[_builtins.bool] pi_ibmi_pha: IBM i Power High Availability
        :param pulumi.Input[_builtins.float] pi_ibmi_rds_users: IBM i Rational Dev Studio Number of User Licenses
        :param pulumi.Input[_builtins.str] pi_image_id: PI instance image id
        :param pulumi.Input[_builtins.str] pi_instance_name: PI Instance name
        :param pulumi.Input[_builtins.str] pi_key_pair_name: SSH key name
        :param pulumi.Input[_builtins.float] pi_license_repository_capacity: The VTL license repository capacity TB value
        :param pulumi.Input[_builtins.float] pi_memory: Memory size
        :param pulumi.Input[Sequence[pulumi.Input['PiInstancePiNetworkArgs']]] pi_networks: List of one or more networks to attach to the instance
        :param pulumi.Input[_builtins.str] pi_pin_policy: Pin Policy of the instance
        :param pulumi.Input[_builtins.str] pi_placement_group_id: Placement group ID
        :param pulumi.Input[_builtins.str] pi_proc_type: Instance processor type
        :param pulumi.Input[_builtins.float] pi_processors: Processors count
        :param pulumi.Input[_builtins.float] pi_replicants: PI Instance replicas count
        :param pulumi.Input[_builtins.str] pi_replication_policy: Replication policy for the PI Instance
        :param pulumi.Input[_builtins.str] pi_replication_scheme: Replication scheme
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_replication_sites: Indicates the replication sites of the boot volume.
        :param pulumi.Input[_builtins.bool] pi_retain_virtual_serial_number: Indicates whether to retain virtual serial number when changed or deleted.
        :param pulumi.Input[_builtins.str] pi_sap_deployment_type: Custom SAP Deployment Type Information
        :param pulumi.Input[_builtins.str] pi_sap_profile_id: SAP Profile ID for the amount of cores and memory
        :param pulumi.Input[_builtins.str] pi_shared_processor_pool: Shared Processor Pool the instance is deployed on
        :param pulumi.Input[_builtins.str] pi_storage_connection: Storage Connectivity Group for server deployment
        :param pulumi.Input[_builtins.str] pi_storage_pool: Storage Pool for server deployment; if provided then pi_storage_pool_affinity will be ignored; Only valid when you
               deploy one of the IBM supplied stock images. Storage pool for a custom image (an imported image or an image that is
               created from a VM capture) defaults to the storage pool the image was created in
        :param pulumi.Input[_builtins.bool] pi_storage_pool_affinity: Indicates if all volumes attached to the server must reside in the same storage pool
        :param pulumi.Input[_builtins.str] pi_storage_type: Storage type for server deployment; if pi_storage_type is not provided the storage type will default to tier3
        :param pulumi.Input[_builtins.str] pi_sys_type: The type of system on which to create the VM (e880/e980/e1080/e1150/e1180/s922/s1022/s1122).
        :param pulumi.Input[_builtins.str] pi_user_data: Base64 encoded data to be passed in for invoking a cloud init script
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: The user tags attached to this resource.
        :param pulumi.Input[_builtins.float] pi_virtual_cores_assigned: Virtual Cores Assigned to the PVMInstance
        :param pulumi.Input[_builtins.str] pi_virtual_optical_device: Virtual Machine's Cloud Initialization Virtual Optical Device
        :param pulumi.Input['PiInstancePiVirtualSerialNumberArgs'] pi_virtual_serial_number: Virtual Serial Number information
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_volume_ids: List of PI volumes
        :param pulumi.Input[_builtins.str] pin_policy: PIN Policy of the Instance
        :param pulumi.Input[_builtins.float] progress: Progress of the operation
        :param pulumi.Input[_builtins.str] shared_processor_pool_id: Shared Processor Pool ID the instance is deployed on
        :param pulumi.Input[_builtins.str] status: PI instance status
        """
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if dedicated_host_id is not None:
            pulumi.set(__self__, "dedicated_host_id", dedicated_host_id)
        if fault is not None:
            pulumi.set(__self__, "fault", fault)
        if health_status is not None:
            pulumi.set(__self__, "health_status", health_status)
        if ibmi_rds is not None:
            pulumi.set(__self__, "ibmi_rds", ibmi_rds)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if max_memory is not None:
            pulumi.set(__self__, "max_memory", max_memory)
        if max_processors is not None:
            pulumi.set(__self__, "max_processors", max_processors)
        if max_virtual_cores is not None:
            pulumi.set(__self__, "max_virtual_cores", max_virtual_cores)
        if min_memory is not None:
            pulumi.set(__self__, "min_memory", min_memory)
        if min_processors is not None:
            pulumi.set(__self__, "min_processors", min_processors)
        if min_virtual_cores is not None:
            pulumi.set(__self__, "min_virtual_cores", min_virtual_cores)
        if operating_system is not None:
            pulumi.set(__self__, "operating_system", operating_system)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if pi_affinity_instance is not None:
            pulumi.set(__self__, "pi_affinity_instance", pi_affinity_instance)
        if pi_affinity_policy is not None:
            pulumi.set(__self__, "pi_affinity_policy", pi_affinity_policy)
        if pi_affinity_volume is not None:
            pulumi.set(__self__, "pi_affinity_volume", pi_affinity_volume)
        if pi_anti_affinity_instances is not None:
            pulumi.set(__self__, "pi_anti_affinity_instances", pi_anti_affinity_instances)
        if pi_anti_affinity_volumes is not None:
            pulumi.set(__self__, "pi_anti_affinity_volumes", pi_anti_affinity_volumes)
        if pi_boot_volume_replication_enabled is not None:
            pulumi.set(__self__, "pi_boot_volume_replication_enabled", pi_boot_volume_replication_enabled)
        if pi_cloud_instance_id is not None:
            pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_deployment_target is not None:
            pulumi.set(__self__, "pi_deployment_target", pi_deployment_target)
        if pi_deployment_type is not None:
            pulumi.set(__self__, "pi_deployment_type", pi_deployment_type)
        if pi_health_status is not None:
            pulumi.set(__self__, "pi_health_status", pi_health_status)
        if pi_ibmi_css is not None:
            pulumi.set(__self__, "pi_ibmi_css", pi_ibmi_css)
        if pi_ibmi_pha is not None:
            pulumi.set(__self__, "pi_ibmi_pha", pi_ibmi_pha)
        if pi_ibmi_rds_users is not None:
            pulumi.set(__self__, "pi_ibmi_rds_users", pi_ibmi_rds_users)
        if pi_image_id is not None:
            pulumi.set(__self__, "pi_image_id", pi_image_id)
        if pi_instance_id is not None:
            pulumi.set(__self__, "pi_instance_id", pi_instance_id)
        if pi_instance_name is not None:
            pulumi.set(__self__, "pi_instance_name", pi_instance_name)
        if pi_key_pair_name is not None:
            pulumi.set(__self__, "pi_key_pair_name", pi_key_pair_name)
        if pi_license_repository_capacity is not None:
            pulumi.set(__self__, "pi_license_repository_capacity", pi_license_repository_capacity)
        if pi_memory is not None:
            pulumi.set(__self__, "pi_memory", pi_memory)
        if pi_networks is not None:
            pulumi.set(__self__, "pi_networks", pi_networks)
        if pi_pin_policy is not None:
            pulumi.set(__self__, "pi_pin_policy", pi_pin_policy)
        if pi_placement_group_id is not None:
            pulumi.set(__self__, "pi_placement_group_id", pi_placement_group_id)
        if pi_proc_type is not None:
            pulumi.set(__self__, "pi_proc_type", pi_proc_type)
        if pi_processors is not None:
            pulumi.set(__self__, "pi_processors", pi_processors)
        if pi_replicants is not None:
            pulumi.set(__self__, "pi_replicants", pi_replicants)
        if pi_replication_policy is not None:
            pulumi.set(__self__, "pi_replication_policy", pi_replication_policy)
        if pi_replication_scheme is not None:
            pulumi.set(__self__, "pi_replication_scheme", pi_replication_scheme)
        if pi_replication_sites is not None:
            pulumi.set(__self__, "pi_replication_sites", pi_replication_sites)
        if pi_retain_virtual_serial_number is not None:
            pulumi.set(__self__, "pi_retain_virtual_serial_number", pi_retain_virtual_serial_number)
        if pi_sap_deployment_type is not None:
            pulumi.set(__self__, "pi_sap_deployment_type", pi_sap_deployment_type)
        if pi_sap_profile_id is not None:
            pulumi.set(__self__, "pi_sap_profile_id", pi_sap_profile_id)
        if pi_shared_processor_pool is not None:
            pulumi.set(__self__, "pi_shared_processor_pool", pi_shared_processor_pool)
        if pi_storage_connection is not None:
            pulumi.set(__self__, "pi_storage_connection", pi_storage_connection)
        if pi_storage_pool is not None:
            pulumi.set(__self__, "pi_storage_pool", pi_storage_pool)
        if pi_storage_pool_affinity is not None:
            pulumi.set(__self__, "pi_storage_pool_affinity", pi_storage_pool_affinity)
        if pi_storage_type is not None:
            pulumi.set(__self__, "pi_storage_type", pi_storage_type)
        if pi_sys_type is not None:
            pulumi.set(__self__, "pi_sys_type", pi_sys_type)
        if pi_user_data is not None:
            pulumi.set(__self__, "pi_user_data", pi_user_data)
        if pi_user_tags is not None:
            pulumi.set(__self__, "pi_user_tags", pi_user_tags)
        if pi_virtual_cores_assigned is not None:
            pulumi.set(__self__, "pi_virtual_cores_assigned", pi_virtual_cores_assigned)
        if pi_virtual_optical_device is not None:
            pulumi.set(__self__, "pi_virtual_optical_device", pi_virtual_optical_device)
        if pi_virtual_serial_number is not None:
            pulumi.set(__self__, "pi_virtual_serial_number", pi_virtual_serial_number)
        if pi_volume_ids is not None:
            pulumi.set(__self__, "pi_volume_ids", pi_volume_ids)
        if pin_policy is not None:
            pulumi.set(__self__, "pin_policy", pin_policy)
        if progress is not None:
            pulumi.set(__self__, "progress", progress)
        if shared_processor_pool_id is not None:
            pulumi.set(__self__, "shared_processor_pool_id", shared_processor_pool_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN of this resource.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="dedicatedHostId")
    def dedicated_host_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The dedicated host ID where the shared processor pool resides.
        """
        return pulumi.get(self, "dedicated_host_id")

    @dedicated_host_id.setter
    def dedicated_host_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dedicated_host_id", value)

    @_builtins.property
    @pulumi.getter
    def fault(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Fault information.
        """
        return pulumi.get(self, "fault")

    @fault.setter
    def fault(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "fault", value)

    @_builtins.property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        PI Instance health status
        """
        return pulumi.get(self, "health_status")

    @health_status.setter
    def health_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "health_status", value)

    @_builtins.property
    @pulumi.getter(name="ibmiRds")
    def ibmi_rds(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        IBM i Rational Dev Studio
        """
        return pulumi.get(self, "ibmi_rds")

    @ibmi_rds.setter
    def ibmi_rds(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ibmi_rds", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Instance ID
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="maxMemory")
    def max_memory(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Maximum memory size
        """
        return pulumi.get(self, "max_memory")

    @max_memory.setter
    def max_memory(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "max_memory", value)

    @_builtins.property
    @pulumi.getter(name="maxProcessors")
    def max_processors(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Maximum number of processors
        """
        return pulumi.get(self, "max_processors")

    @max_processors.setter
    def max_processors(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "max_processors", value)

    @_builtins.property
    @pulumi.getter(name="maxVirtualCores")
    def max_virtual_cores(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Maximum Virtual Cores Assigned to the PVMInstance
        """
        return pulumi.get(self, "max_virtual_cores")

    @max_virtual_cores.setter
    def max_virtual_cores(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "max_virtual_cores", value)

    @_builtins.property
    @pulumi.getter(name="minMemory")
    def min_memory(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Minimum memory
        """
        return pulumi.get(self, "min_memory")

    @min_memory.setter
    def min_memory(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "min_memory", value)

    @_builtins.property
    @pulumi.getter(name="minProcessors")
    def min_processors(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Minimum number of the CPUs
        """
        return pulumi.get(self, "min_processors")

    @min_processors.setter
    def min_processors(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "min_processors", value)

    @_builtins.property
    @pulumi.getter(name="minVirtualCores")
    def min_virtual_cores(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Minimum Virtual Cores Assigned to the PVMInstance
        """
        return pulumi.get(self, "min_virtual_cores")

    @min_virtual_cores.setter
    def min_virtual_cores(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "min_virtual_cores", value)

    @_builtins.property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Operating System
        """
        return pulumi.get(self, "operating_system")

    @operating_system.setter
    def operating_system(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "operating_system", value)

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        OS Type
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "os_type", value)

    @_builtins.property
    @pulumi.getter(name="piAffinityInstance")
    def pi_affinity_instance(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        PVM Instance (ID or Name) to base storage affinity policy against; required if requesting storage affinity and
        pi_affinity_volume is not provided
        """
        return pulumi.get(self, "pi_affinity_instance")

    @pi_affinity_instance.setter
    def pi_affinity_instance(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_affinity_instance", value)

    @_builtins.property
    @pulumi.getter(name="piAffinityPolicy")
    def pi_affinity_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Affinity policy for pvm instance being created; ignored if pi_storage_pool provided; for policy affinity requires one of
        pi_affinity_instance or pi_affinity_volume to be specified; for policy anti-affinity requires one of
        pi_anti_affinity_instances or pi_anti_affinity_volumes to be specified
        """
        return pulumi.get(self, "pi_affinity_policy")

    @pi_affinity_policy.setter
    def pi_affinity_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_affinity_policy", value)

    @_builtins.property
    @pulumi.getter(name="piAffinityVolume")
    def pi_affinity_volume(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Volume (ID or Name) to base storage affinity policy against; required if requesting affinity and pi_affinity_instance is
        not provided
        """
        return pulumi.get(self, "pi_affinity_volume")

    @pi_affinity_volume.setter
    def pi_affinity_volume(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_affinity_volume", value)

    @_builtins.property
    @pulumi.getter(name="piAntiAffinityInstances")
    def pi_anti_affinity_instances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of pvmInstances to base storage anti-affinity policy against; required if requesting anti-affinity and
        pi_anti_affinity_volumes is not provided
        """
        return pulumi.get(self, "pi_anti_affinity_instances")

    @pi_anti_affinity_instances.setter
    def pi_anti_affinity_instances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_anti_affinity_instances", value)

    @_builtins.property
    @pulumi.getter(name="piAntiAffinityVolumes")
    def pi_anti_affinity_volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of volumes to base storage anti-affinity policy against; required if requesting anti-affinity and
        pi_anti_affinity_instances is not provided
        """
        return pulumi.get(self, "pi_anti_affinity_volumes")

    @pi_anti_affinity_volumes.setter
    def pi_anti_affinity_volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_anti_affinity_volumes", value)

    @_builtins.property
    @pulumi.getter(name="piBootVolumeReplicationEnabled")
    def pi_boot_volume_replication_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if the boot volume should be replication enabled or not.
        """
        return pulumi.get(self, "pi_boot_volume_replication_enabled")

    @pi_boot_volume_replication_enabled.setter
    def pi_boot_volume_replication_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pi_boot_volume_replication_enabled", value)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        This is the Power Instance id that is assigned to the account
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piDeploymentTarget")
    def pi_deployment_target(self) -> Optional[pulumi.Input['PiInstancePiDeploymentTargetArgs']]:
        """
        The deployment of a dedicated host.
        """
        return pulumi.get(self, "pi_deployment_target")

    @pi_deployment_target.setter
    def pi_deployment_target(self, value: Optional[pulumi.Input['PiInstancePiDeploymentTargetArgs']]):
        pulumi.set(self, "pi_deployment_target", value)

    @_builtins.property
    @pulumi.getter(name="piDeploymentType")
    def pi_deployment_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Custom Deployment Type Information
        """
        return pulumi.get(self, "pi_deployment_type")

    @pi_deployment_type.setter
    def pi_deployment_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_deployment_type", value)

    @_builtins.property
    @pulumi.getter(name="piHealthStatus")
    def pi_health_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Allow the user to set the status of the lpar so that they can connect to it faster
        """
        return pulumi.get(self, "pi_health_status")

    @pi_health_status.setter
    def pi_health_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_health_status", value)

    @_builtins.property
    @pulumi.getter(name="piIbmiCss")
    def pi_ibmi_css(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        IBM i Cloud Storage Solution
        """
        return pulumi.get(self, "pi_ibmi_css")

    @pi_ibmi_css.setter
    def pi_ibmi_css(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pi_ibmi_css", value)

    @_builtins.property
    @pulumi.getter(name="piIbmiPha")
    def pi_ibmi_pha(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        IBM i Power High Availability
        """
        return pulumi.get(self, "pi_ibmi_pha")

    @pi_ibmi_pha.setter
    def pi_ibmi_pha(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pi_ibmi_pha", value)

    @_builtins.property
    @pulumi.getter(name="piIbmiRdsUsers")
    def pi_ibmi_rds_users(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        IBM i Rational Dev Studio Number of User Licenses
        """
        return pulumi.get(self, "pi_ibmi_rds_users")

    @pi_ibmi_rds_users.setter
    def pi_ibmi_rds_users(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "pi_ibmi_rds_users", value)

    @_builtins.property
    @pulumi.getter(name="piImageId")
    def pi_image_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        PI instance image id
        """
        return pulumi.get(self, "pi_image_id")

    @pi_image_id.setter
    def pi_image_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_image_id", value)

    @_builtins.property
    @pulumi.getter(name="piInstanceId")
    def pi_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_instance_id")

    @pi_instance_id.setter
    def pi_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piInstanceName")
    def pi_instance_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        PI Instance name
        """
        return pulumi.get(self, "pi_instance_name")

    @pi_instance_name.setter
    def pi_instance_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_instance_name", value)

    @_builtins.property
    @pulumi.getter(name="piKeyPairName")
    def pi_key_pair_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        SSH key name
        """
        return pulumi.get(self, "pi_key_pair_name")

    @pi_key_pair_name.setter
    def pi_key_pair_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_key_pair_name", value)

    @_builtins.property
    @pulumi.getter(name="piLicenseRepositoryCapacity")
    def pi_license_repository_capacity(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The VTL license repository capacity TB value
        """
        return pulumi.get(self, "pi_license_repository_capacity")

    @pi_license_repository_capacity.setter
    def pi_license_repository_capacity(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "pi_license_repository_capacity", value)

    @_builtins.property
    @pulumi.getter(name="piMemory")
    def pi_memory(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Memory size
        """
        return pulumi.get(self, "pi_memory")

    @pi_memory.setter
    def pi_memory(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "pi_memory", value)

    @_builtins.property
    @pulumi.getter(name="piNetworks")
    def pi_networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PiInstancePiNetworkArgs']]]]:
        """
        List of one or more networks to attach to the instance
        """
        return pulumi.get(self, "pi_networks")

    @pi_networks.setter
    def pi_networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PiInstancePiNetworkArgs']]]]):
        pulumi.set(self, "pi_networks", value)

    @_builtins.property
    @pulumi.getter(name="piPinPolicy")
    def pi_pin_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Pin Policy of the instance
        """
        return pulumi.get(self, "pi_pin_policy")

    @pi_pin_policy.setter
    def pi_pin_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_pin_policy", value)

    @_builtins.property
    @pulumi.getter(name="piPlacementGroupId")
    def pi_placement_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Placement group ID
        """
        return pulumi.get(self, "pi_placement_group_id")

    @pi_placement_group_id.setter
    def pi_placement_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_placement_group_id", value)

    @_builtins.property
    @pulumi.getter(name="piProcType")
    def pi_proc_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Instance processor type
        """
        return pulumi.get(self, "pi_proc_type")

    @pi_proc_type.setter
    def pi_proc_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_proc_type", value)

    @_builtins.property
    @pulumi.getter(name="piProcessors")
    def pi_processors(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Processors count
        """
        return pulumi.get(self, "pi_processors")

    @pi_processors.setter
    def pi_processors(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "pi_processors", value)

    @_builtins.property
    @pulumi.getter(name="piReplicants")
    def pi_replicants(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        PI Instance replicas count
        """
        return pulumi.get(self, "pi_replicants")

    @pi_replicants.setter
    def pi_replicants(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "pi_replicants", value)

    @_builtins.property
    @pulumi.getter(name="piReplicationPolicy")
    def pi_replication_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Replication policy for the PI Instance
        """
        return pulumi.get(self, "pi_replication_policy")

    @pi_replication_policy.setter
    def pi_replication_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_replication_policy", value)

    @_builtins.property
    @pulumi.getter(name="piReplicationScheme")
    def pi_replication_scheme(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Replication scheme
        """
        return pulumi.get(self, "pi_replication_scheme")

    @pi_replication_scheme.setter
    def pi_replication_scheme(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_replication_scheme", value)

    @_builtins.property
    @pulumi.getter(name="piReplicationSites")
    def pi_replication_sites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Indicates the replication sites of the boot volume.
        """
        return pulumi.get(self, "pi_replication_sites")

    @pi_replication_sites.setter
    def pi_replication_sites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_replication_sites", value)

    @_builtins.property
    @pulumi.getter(name="piRetainVirtualSerialNumber")
    def pi_retain_virtual_serial_number(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether to retain virtual serial number when changed or deleted.
        """
        return pulumi.get(self, "pi_retain_virtual_serial_number")

    @pi_retain_virtual_serial_number.setter
    def pi_retain_virtual_serial_number(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pi_retain_virtual_serial_number", value)

    @_builtins.property
    @pulumi.getter(name="piSapDeploymentType")
    def pi_sap_deployment_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Custom SAP Deployment Type Information
        """
        return pulumi.get(self, "pi_sap_deployment_type")

    @pi_sap_deployment_type.setter
    def pi_sap_deployment_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_sap_deployment_type", value)

    @_builtins.property
    @pulumi.getter(name="piSapProfileId")
    def pi_sap_profile_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        SAP Profile ID for the amount of cores and memory
        """
        return pulumi.get(self, "pi_sap_profile_id")

    @pi_sap_profile_id.setter
    def pi_sap_profile_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_sap_profile_id", value)

    @_builtins.property
    @pulumi.getter(name="piSharedProcessorPool")
    def pi_shared_processor_pool(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shared Processor Pool the instance is deployed on
        """
        return pulumi.get(self, "pi_shared_processor_pool")

    @pi_shared_processor_pool.setter
    def pi_shared_processor_pool(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_shared_processor_pool", value)

    @_builtins.property
    @pulumi.getter(name="piStorageConnection")
    def pi_storage_connection(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Storage Connectivity Group for server deployment
        """
        return pulumi.get(self, "pi_storage_connection")

    @pi_storage_connection.setter
    def pi_storage_connection(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_storage_connection", value)

    @_builtins.property
    @pulumi.getter(name="piStoragePool")
    def pi_storage_pool(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Storage Pool for server deployment; if provided then pi_storage_pool_affinity will be ignored; Only valid when you
        deploy one of the IBM supplied stock images. Storage pool for a custom image (an imported image or an image that is
        created from a VM capture) defaults to the storage pool the image was created in
        """
        return pulumi.get(self, "pi_storage_pool")

    @pi_storage_pool.setter
    def pi_storage_pool(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_storage_pool", value)

    @_builtins.property
    @pulumi.getter(name="piStoragePoolAffinity")
    def pi_storage_pool_affinity(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if all volumes attached to the server must reside in the same storage pool
        """
        return pulumi.get(self, "pi_storage_pool_affinity")

    @pi_storage_pool_affinity.setter
    def pi_storage_pool_affinity(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pi_storage_pool_affinity", value)

    @_builtins.property
    @pulumi.getter(name="piStorageType")
    def pi_storage_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Storage type for server deployment; if pi_storage_type is not provided the storage type will default to tier3
        """
        return pulumi.get(self, "pi_storage_type")

    @pi_storage_type.setter
    def pi_storage_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_storage_type", value)

    @_builtins.property
    @pulumi.getter(name="piSysType")
    def pi_sys_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of system on which to create the VM (e880/e980/e1080/e1150/e1180/s922/s1022/s1122).
        """
        return pulumi.get(self, "pi_sys_type")

    @pi_sys_type.setter
    def pi_sys_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_sys_type", value)

    @_builtins.property
    @pulumi.getter(name="piUserData")
    def pi_user_data(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Base64 encoded data to be passed in for invoking a cloud init script
        """
        return pulumi.get(self, "pi_user_data")

    @pi_user_data.setter
    def pi_user_data(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_user_data", value)

    @_builtins.property
    @pulumi.getter(name="piUserTags")
    def pi_user_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The user tags attached to this resource.
        """
        return pulumi.get(self, "pi_user_tags")

    @pi_user_tags.setter
    def pi_user_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_user_tags", value)

    @_builtins.property
    @pulumi.getter(name="piVirtualCoresAssigned")
    def pi_virtual_cores_assigned(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Virtual Cores Assigned to the PVMInstance
        """
        return pulumi.get(self, "pi_virtual_cores_assigned")

    @pi_virtual_cores_assigned.setter
    def pi_virtual_cores_assigned(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "pi_virtual_cores_assigned", value)

    @_builtins.property
    @pulumi.getter(name="piVirtualOpticalDevice")
    def pi_virtual_optical_device(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Virtual Machine's Cloud Initialization Virtual Optical Device
        """
        return pulumi.get(self, "pi_virtual_optical_device")

    @pi_virtual_optical_device.setter
    def pi_virtual_optical_device(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_virtual_optical_device", value)

    @_builtins.property
    @pulumi.getter(name="piVirtualSerialNumber")
    def pi_virtual_serial_number(self) -> Optional[pulumi.Input['PiInstancePiVirtualSerialNumberArgs']]:
        """
        Virtual Serial Number information
        """
        return pulumi.get(self, "pi_virtual_serial_number")

    @pi_virtual_serial_number.setter
    def pi_virtual_serial_number(self, value: Optional[pulumi.Input['PiInstancePiVirtualSerialNumberArgs']]):
        pulumi.set(self, "pi_virtual_serial_number", value)

    @_builtins.property
    @pulumi.getter(name="piVolumeIds")
    def pi_volume_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of PI volumes
        """
        return pulumi.get(self, "pi_volume_ids")

    @pi_volume_ids.setter
    def pi_volume_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_volume_ids", value)

    @_builtins.property
    @pulumi.getter(name="pinPolicy")
    def pin_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        PIN Policy of the Instance
        """
        return pulumi.get(self, "pin_policy")

    @pin_policy.setter
    def pin_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pin_policy", value)

    @_builtins.property
    @pulumi.getter
    def progress(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Progress of the operation
        """
        return pulumi.get(self, "progress")

    @progress.setter
    def progress(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "progress", value)

    @_builtins.property
    @pulumi.getter(name="sharedProcessorPoolId")
    def shared_processor_pool_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Shared Processor Pool ID the instance is deployed on
        """
        return pulumi.get(self, "shared_processor_pool_id")

    @shared_processor_pool_id.setter
    def shared_processor_pool_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "shared_processor_pool_id", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        PI instance status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiInstanceTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiInstanceTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/piInstance:PiInstance")
class PiInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_affinity_instance: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_affinity_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_affinity_volume: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_anti_affinity_instances: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_anti_affinity_volumes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_boot_volume_replication_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_deployment_target: Optional[pulumi.Input[Union['PiInstancePiDeploymentTargetArgs', 'PiInstancePiDeploymentTargetArgsDict']]] = None,
                 pi_deployment_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_health_status: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_ibmi_css: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_ibmi_pha: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_ibmi_rds_users: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_instance_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_key_pair_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_license_repository_capacity: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_memory: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PiInstancePiNetworkArgs', 'PiInstancePiNetworkArgsDict']]]]] = None,
                 pi_pin_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_placement_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_proc_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_processors: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_replicants: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_replication_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_replication_scheme: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_replication_sites: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_retain_virtual_serial_number: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_sap_deployment_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_sap_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_shared_processor_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_storage_connection: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_storage_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_storage_pool_affinity: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_storage_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_sys_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_data: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_virtual_cores_assigned: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_virtual_optical_device: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_virtual_serial_number: Optional[pulumi.Input[Union['PiInstancePiVirtualSerialNumberArgs', 'PiInstancePiVirtualSerialNumberArgsDict']]] = None,
                 pi_volume_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiInstanceTimeoutsArgs', 'PiInstanceTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a PiInstance resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] pi_affinity_instance: PVM Instance (ID or Name) to base storage affinity policy against; required if requesting storage affinity and
               pi_affinity_volume is not provided
        :param pulumi.Input[_builtins.str] pi_affinity_policy: Affinity policy for pvm instance being created; ignored if pi_storage_pool provided; for policy affinity requires one of
               pi_affinity_instance or pi_affinity_volume to be specified; for policy anti-affinity requires one of
               pi_anti_affinity_instances or pi_anti_affinity_volumes to be specified
        :param pulumi.Input[_builtins.str] pi_affinity_volume: Volume (ID or Name) to base storage affinity policy against; required if requesting affinity and pi_affinity_instance is
               not provided
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_anti_affinity_instances: List of pvmInstances to base storage anti-affinity policy against; required if requesting anti-affinity and
               pi_anti_affinity_volumes is not provided
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_anti_affinity_volumes: List of volumes to base storage anti-affinity policy against; required if requesting anti-affinity and
               pi_anti_affinity_instances is not provided
        :param pulumi.Input[_builtins.bool] pi_boot_volume_replication_enabled: Indicates if the boot volume should be replication enabled or not.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: This is the Power Instance id that is assigned to the account
        :param pulumi.Input[Union['PiInstancePiDeploymentTargetArgs', 'PiInstancePiDeploymentTargetArgsDict']] pi_deployment_target: The deployment of a dedicated host.
        :param pulumi.Input[_builtins.str] pi_deployment_type: Custom Deployment Type Information
        :param pulumi.Input[_builtins.str] pi_health_status: Allow the user to set the status of the lpar so that they can connect to it faster
        :param pulumi.Input[_builtins.bool] pi_ibmi_css: IBM i Cloud Storage Solution
        :param pulumi.Input[_builtins.bool] pi_ibmi_pha: IBM i Power High Availability
        :param pulumi.Input[_builtins.float] pi_ibmi_rds_users: IBM i Rational Dev Studio Number of User Licenses
        :param pulumi.Input[_builtins.str] pi_image_id: PI instance image id
        :param pulumi.Input[_builtins.str] pi_instance_name: PI Instance name
        :param pulumi.Input[_builtins.str] pi_key_pair_name: SSH key name
        :param pulumi.Input[_builtins.float] pi_license_repository_capacity: The VTL license repository capacity TB value
        :param pulumi.Input[_builtins.float] pi_memory: Memory size
        :param pulumi.Input[Sequence[pulumi.Input[Union['PiInstancePiNetworkArgs', 'PiInstancePiNetworkArgsDict']]]] pi_networks: List of one or more networks to attach to the instance
        :param pulumi.Input[_builtins.str] pi_pin_policy: Pin Policy of the instance
        :param pulumi.Input[_builtins.str] pi_placement_group_id: Placement group ID
        :param pulumi.Input[_builtins.str] pi_proc_type: Instance processor type
        :param pulumi.Input[_builtins.float] pi_processors: Processors count
        :param pulumi.Input[_builtins.float] pi_replicants: PI Instance replicas count
        :param pulumi.Input[_builtins.str] pi_replication_policy: Replication policy for the PI Instance
        :param pulumi.Input[_builtins.str] pi_replication_scheme: Replication scheme
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_replication_sites: Indicates the replication sites of the boot volume.
        :param pulumi.Input[_builtins.bool] pi_retain_virtual_serial_number: Indicates whether to retain virtual serial number when changed or deleted.
        :param pulumi.Input[_builtins.str] pi_sap_deployment_type: Custom SAP Deployment Type Information
        :param pulumi.Input[_builtins.str] pi_sap_profile_id: SAP Profile ID for the amount of cores and memory
        :param pulumi.Input[_builtins.str] pi_shared_processor_pool: Shared Processor Pool the instance is deployed on
        :param pulumi.Input[_builtins.str] pi_storage_connection: Storage Connectivity Group for server deployment
        :param pulumi.Input[_builtins.str] pi_storage_pool: Storage Pool for server deployment; if provided then pi_storage_pool_affinity will be ignored; Only valid when you
               deploy one of the IBM supplied stock images. Storage pool for a custom image (an imported image or an image that is
               created from a VM capture) defaults to the storage pool the image was created in
        :param pulumi.Input[_builtins.bool] pi_storage_pool_affinity: Indicates if all volumes attached to the server must reside in the same storage pool
        :param pulumi.Input[_builtins.str] pi_storage_type: Storage type for server deployment; if pi_storage_type is not provided the storage type will default to tier3
        :param pulumi.Input[_builtins.str] pi_sys_type: The type of system on which to create the VM (e880/e980/e1080/e1150/e1180/s922/s1022/s1122).
        :param pulumi.Input[_builtins.str] pi_user_data: Base64 encoded data to be passed in for invoking a cloud init script
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: The user tags attached to this resource.
        :param pulumi.Input[_builtins.float] pi_virtual_cores_assigned: Virtual Cores Assigned to the PVMInstance
        :param pulumi.Input[_builtins.str] pi_virtual_optical_device: Virtual Machine's Cloud Initialization Virtual Optical Device
        :param pulumi.Input[Union['PiInstancePiVirtualSerialNumberArgs', 'PiInstancePiVirtualSerialNumberArgsDict']] pi_virtual_serial_number: Virtual Serial Number information
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_volume_ids: List of PI volumes
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PiInstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PiInstance resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PiInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PiInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_affinity_instance: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_affinity_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_affinity_volume: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_anti_affinity_instances: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_anti_affinity_volumes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_boot_volume_replication_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_deployment_target: Optional[pulumi.Input[Union['PiInstancePiDeploymentTargetArgs', 'PiInstancePiDeploymentTargetArgsDict']]] = None,
                 pi_deployment_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_health_status: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_ibmi_css: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_ibmi_pha: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_ibmi_rds_users: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_instance_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_key_pair_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_license_repository_capacity: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_memory: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PiInstancePiNetworkArgs', 'PiInstancePiNetworkArgsDict']]]]] = None,
                 pi_pin_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_placement_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_proc_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_processors: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_replicants: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_replication_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_replication_scheme: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_replication_sites: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_retain_virtual_serial_number: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_sap_deployment_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_sap_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_shared_processor_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_storage_connection: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_storage_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_storage_pool_affinity: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_storage_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_sys_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_data: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_virtual_cores_assigned: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_virtual_optical_device: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_virtual_serial_number: Optional[pulumi.Input[Union['PiInstancePiVirtualSerialNumberArgs', 'PiInstancePiVirtualSerialNumberArgsDict']]] = None,
                 pi_volume_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiInstanceTimeoutsArgs', 'PiInstanceTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PiInstanceArgs.__new__(PiInstanceArgs)

            __props__.__dict__["pi_affinity_instance"] = pi_affinity_instance
            __props__.__dict__["pi_affinity_policy"] = pi_affinity_policy
            __props__.__dict__["pi_affinity_volume"] = pi_affinity_volume
            __props__.__dict__["pi_anti_affinity_instances"] = pi_anti_affinity_instances
            __props__.__dict__["pi_anti_affinity_volumes"] = pi_anti_affinity_volumes
            __props__.__dict__["pi_boot_volume_replication_enabled"] = pi_boot_volume_replication_enabled
            if pi_cloud_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'pi_cloud_instance_id'")
            __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
            __props__.__dict__["pi_deployment_target"] = pi_deployment_target
            __props__.__dict__["pi_deployment_type"] = pi_deployment_type
            __props__.__dict__["pi_health_status"] = pi_health_status
            __props__.__dict__["pi_ibmi_css"] = pi_ibmi_css
            __props__.__dict__["pi_ibmi_pha"] = pi_ibmi_pha
            __props__.__dict__["pi_ibmi_rds_users"] = pi_ibmi_rds_users
            if pi_image_id is None and not opts.urn:
                raise TypeError("Missing required property 'pi_image_id'")
            __props__.__dict__["pi_image_id"] = pi_image_id
            __props__.__dict__["pi_instance_id"] = pi_instance_id
            if pi_instance_name is None and not opts.urn:
                raise TypeError("Missing required property 'pi_instance_name'")
            __props__.__dict__["pi_instance_name"] = pi_instance_name
            __props__.__dict__["pi_key_pair_name"] = pi_key_pair_name
            __props__.__dict__["pi_license_repository_capacity"] = pi_license_repository_capacity
            __props__.__dict__["pi_memory"] = pi_memory
            if pi_networks is None and not opts.urn:
                raise TypeError("Missing required property 'pi_networks'")
            __props__.__dict__["pi_networks"] = pi_networks
            __props__.__dict__["pi_pin_policy"] = pi_pin_policy
            __props__.__dict__["pi_placement_group_id"] = pi_placement_group_id
            __props__.__dict__["pi_proc_type"] = pi_proc_type
            __props__.__dict__["pi_processors"] = pi_processors
            __props__.__dict__["pi_replicants"] = pi_replicants
            __props__.__dict__["pi_replication_policy"] = pi_replication_policy
            __props__.__dict__["pi_replication_scheme"] = pi_replication_scheme
            __props__.__dict__["pi_replication_sites"] = pi_replication_sites
            __props__.__dict__["pi_retain_virtual_serial_number"] = pi_retain_virtual_serial_number
            __props__.__dict__["pi_sap_deployment_type"] = pi_sap_deployment_type
            __props__.__dict__["pi_sap_profile_id"] = pi_sap_profile_id
            __props__.__dict__["pi_shared_processor_pool"] = pi_shared_processor_pool
            __props__.__dict__["pi_storage_connection"] = pi_storage_connection
            __props__.__dict__["pi_storage_pool"] = pi_storage_pool
            __props__.__dict__["pi_storage_pool_affinity"] = pi_storage_pool_affinity
            __props__.__dict__["pi_storage_type"] = pi_storage_type
            __props__.__dict__["pi_sys_type"] = pi_sys_type
            __props__.__dict__["pi_user_data"] = pi_user_data
            __props__.__dict__["pi_user_tags"] = pi_user_tags
            __props__.__dict__["pi_virtual_cores_assigned"] = pi_virtual_cores_assigned
            __props__.__dict__["pi_virtual_optical_device"] = pi_virtual_optical_device
            __props__.__dict__["pi_virtual_serial_number"] = pi_virtual_serial_number
            __props__.__dict__["pi_volume_ids"] = pi_volume_ids
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["crn"] = None
            __props__.__dict__["dedicated_host_id"] = None
            __props__.__dict__["fault"] = None
            __props__.__dict__["health_status"] = None
            __props__.__dict__["ibmi_rds"] = None
            __props__.__dict__["instance_id"] = None
            __props__.__dict__["max_memory"] = None
            __props__.__dict__["max_processors"] = None
            __props__.__dict__["max_virtual_cores"] = None
            __props__.__dict__["min_memory"] = None
            __props__.__dict__["min_processors"] = None
            __props__.__dict__["min_virtual_cores"] = None
            __props__.__dict__["operating_system"] = None
            __props__.__dict__["os_type"] = None
            __props__.__dict__["pin_policy"] = None
            __props__.__dict__["progress"] = None
            __props__.__dict__["shared_processor_pool_id"] = None
            __props__.__dict__["status"] = None
        super(PiInstance, __self__).__init__(
            'ibm:index/piInstance:PiInstance',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            dedicated_host_id: Optional[pulumi.Input[_builtins.str]] = None,
            fault: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            health_status: Optional[pulumi.Input[_builtins.str]] = None,
            ibmi_rds: Optional[pulumi.Input[_builtins.bool]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            max_memory: Optional[pulumi.Input[_builtins.float]] = None,
            max_processors: Optional[pulumi.Input[_builtins.float]] = None,
            max_virtual_cores: Optional[pulumi.Input[_builtins.float]] = None,
            min_memory: Optional[pulumi.Input[_builtins.float]] = None,
            min_processors: Optional[pulumi.Input[_builtins.float]] = None,
            min_virtual_cores: Optional[pulumi.Input[_builtins.float]] = None,
            operating_system: Optional[pulumi.Input[_builtins.str]] = None,
            os_type: Optional[pulumi.Input[_builtins.str]] = None,
            pi_affinity_instance: Optional[pulumi.Input[_builtins.str]] = None,
            pi_affinity_policy: Optional[pulumi.Input[_builtins.str]] = None,
            pi_affinity_volume: Optional[pulumi.Input[_builtins.str]] = None,
            pi_anti_affinity_instances: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            pi_anti_affinity_volumes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            pi_boot_volume_replication_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_deployment_target: Optional[pulumi.Input[Union['PiInstancePiDeploymentTargetArgs', 'PiInstancePiDeploymentTargetArgsDict']]] = None,
            pi_deployment_type: Optional[pulumi.Input[_builtins.str]] = None,
            pi_health_status: Optional[pulumi.Input[_builtins.str]] = None,
            pi_ibmi_css: Optional[pulumi.Input[_builtins.bool]] = None,
            pi_ibmi_pha: Optional[pulumi.Input[_builtins.bool]] = None,
            pi_ibmi_rds_users: Optional[pulumi.Input[_builtins.float]] = None,
            pi_image_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_instance_name: Optional[pulumi.Input[_builtins.str]] = None,
            pi_key_pair_name: Optional[pulumi.Input[_builtins.str]] = None,
            pi_license_repository_capacity: Optional[pulumi.Input[_builtins.float]] = None,
            pi_memory: Optional[pulumi.Input[_builtins.float]] = None,
            pi_networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PiInstancePiNetworkArgs', 'PiInstancePiNetworkArgsDict']]]]] = None,
            pi_pin_policy: Optional[pulumi.Input[_builtins.str]] = None,
            pi_placement_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_proc_type: Optional[pulumi.Input[_builtins.str]] = None,
            pi_processors: Optional[pulumi.Input[_builtins.float]] = None,
            pi_replicants: Optional[pulumi.Input[_builtins.float]] = None,
            pi_replication_policy: Optional[pulumi.Input[_builtins.str]] = None,
            pi_replication_scheme: Optional[pulumi.Input[_builtins.str]] = None,
            pi_replication_sites: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            pi_retain_virtual_serial_number: Optional[pulumi.Input[_builtins.bool]] = None,
            pi_sap_deployment_type: Optional[pulumi.Input[_builtins.str]] = None,
            pi_sap_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_shared_processor_pool: Optional[pulumi.Input[_builtins.str]] = None,
            pi_storage_connection: Optional[pulumi.Input[_builtins.str]] = None,
            pi_storage_pool: Optional[pulumi.Input[_builtins.str]] = None,
            pi_storage_pool_affinity: Optional[pulumi.Input[_builtins.bool]] = None,
            pi_storage_type: Optional[pulumi.Input[_builtins.str]] = None,
            pi_sys_type: Optional[pulumi.Input[_builtins.str]] = None,
            pi_user_data: Optional[pulumi.Input[_builtins.str]] = None,
            pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            pi_virtual_cores_assigned: Optional[pulumi.Input[_builtins.float]] = None,
            pi_virtual_optical_device: Optional[pulumi.Input[_builtins.str]] = None,
            pi_virtual_serial_number: Optional[pulumi.Input[Union['PiInstancePiVirtualSerialNumberArgs', 'PiInstancePiVirtualSerialNumberArgsDict']]] = None,
            pi_volume_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            pin_policy: Optional[pulumi.Input[_builtins.str]] = None,
            progress: Optional[pulumi.Input[_builtins.float]] = None,
            shared_processor_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['PiInstanceTimeoutsArgs', 'PiInstanceTimeoutsArgsDict']]] = None) -> 'PiInstance':
        """
        Get an existing PiInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] crn: The CRN of this resource.
        :param pulumi.Input[_builtins.str] dedicated_host_id: The dedicated host ID where the shared processor pool resides.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] fault: Fault information.
        :param pulumi.Input[_builtins.str] health_status: PI Instance health status
        :param pulumi.Input[_builtins.bool] ibmi_rds: IBM i Rational Dev Studio
        :param pulumi.Input[_builtins.str] instance_id: Instance ID
        :param pulumi.Input[_builtins.float] max_memory: Maximum memory size
        :param pulumi.Input[_builtins.float] max_processors: Maximum number of processors
        :param pulumi.Input[_builtins.float] max_virtual_cores: Maximum Virtual Cores Assigned to the PVMInstance
        :param pulumi.Input[_builtins.float] min_memory: Minimum memory
        :param pulumi.Input[_builtins.float] min_processors: Minimum number of the CPUs
        :param pulumi.Input[_builtins.float] min_virtual_cores: Minimum Virtual Cores Assigned to the PVMInstance
        :param pulumi.Input[_builtins.str] operating_system: Operating System
        :param pulumi.Input[_builtins.str] os_type: OS Type
        :param pulumi.Input[_builtins.str] pi_affinity_instance: PVM Instance (ID or Name) to base storage affinity policy against; required if requesting storage affinity and
               pi_affinity_volume is not provided
        :param pulumi.Input[_builtins.str] pi_affinity_policy: Affinity policy for pvm instance being created; ignored if pi_storage_pool provided; for policy affinity requires one of
               pi_affinity_instance or pi_affinity_volume to be specified; for policy anti-affinity requires one of
               pi_anti_affinity_instances or pi_anti_affinity_volumes to be specified
        :param pulumi.Input[_builtins.str] pi_affinity_volume: Volume (ID or Name) to base storage affinity policy against; required if requesting affinity and pi_affinity_instance is
               not provided
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_anti_affinity_instances: List of pvmInstances to base storage anti-affinity policy against; required if requesting anti-affinity and
               pi_anti_affinity_volumes is not provided
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_anti_affinity_volumes: List of volumes to base storage anti-affinity policy against; required if requesting anti-affinity and
               pi_anti_affinity_instances is not provided
        :param pulumi.Input[_builtins.bool] pi_boot_volume_replication_enabled: Indicates if the boot volume should be replication enabled or not.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: This is the Power Instance id that is assigned to the account
        :param pulumi.Input[Union['PiInstancePiDeploymentTargetArgs', 'PiInstancePiDeploymentTargetArgsDict']] pi_deployment_target: The deployment of a dedicated host.
        :param pulumi.Input[_builtins.str] pi_deployment_type: Custom Deployment Type Information
        :param pulumi.Input[_builtins.str] pi_health_status: Allow the user to set the status of the lpar so that they can connect to it faster
        :param pulumi.Input[_builtins.bool] pi_ibmi_css: IBM i Cloud Storage Solution
        :param pulumi.Input[_builtins.bool] pi_ibmi_pha: IBM i Power High Availability
        :param pulumi.Input[_builtins.float] pi_ibmi_rds_users: IBM i Rational Dev Studio Number of User Licenses
        :param pulumi.Input[_builtins.str] pi_image_id: PI instance image id
        :param pulumi.Input[_builtins.str] pi_instance_name: PI Instance name
        :param pulumi.Input[_builtins.str] pi_key_pair_name: SSH key name
        :param pulumi.Input[_builtins.float] pi_license_repository_capacity: The VTL license repository capacity TB value
        :param pulumi.Input[_builtins.float] pi_memory: Memory size
        :param pulumi.Input[Sequence[pulumi.Input[Union['PiInstancePiNetworkArgs', 'PiInstancePiNetworkArgsDict']]]] pi_networks: List of one or more networks to attach to the instance
        :param pulumi.Input[_builtins.str] pi_pin_policy: Pin Policy of the instance
        :param pulumi.Input[_builtins.str] pi_placement_group_id: Placement group ID
        :param pulumi.Input[_builtins.str] pi_proc_type: Instance processor type
        :param pulumi.Input[_builtins.float] pi_processors: Processors count
        :param pulumi.Input[_builtins.float] pi_replicants: PI Instance replicas count
        :param pulumi.Input[_builtins.str] pi_replication_policy: Replication policy for the PI Instance
        :param pulumi.Input[_builtins.str] pi_replication_scheme: Replication scheme
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_replication_sites: Indicates the replication sites of the boot volume.
        :param pulumi.Input[_builtins.bool] pi_retain_virtual_serial_number: Indicates whether to retain virtual serial number when changed or deleted.
        :param pulumi.Input[_builtins.str] pi_sap_deployment_type: Custom SAP Deployment Type Information
        :param pulumi.Input[_builtins.str] pi_sap_profile_id: SAP Profile ID for the amount of cores and memory
        :param pulumi.Input[_builtins.str] pi_shared_processor_pool: Shared Processor Pool the instance is deployed on
        :param pulumi.Input[_builtins.str] pi_storage_connection: Storage Connectivity Group for server deployment
        :param pulumi.Input[_builtins.str] pi_storage_pool: Storage Pool for server deployment; if provided then pi_storage_pool_affinity will be ignored; Only valid when you
               deploy one of the IBM supplied stock images. Storage pool for a custom image (an imported image or an image that is
               created from a VM capture) defaults to the storage pool the image was created in
        :param pulumi.Input[_builtins.bool] pi_storage_pool_affinity: Indicates if all volumes attached to the server must reside in the same storage pool
        :param pulumi.Input[_builtins.str] pi_storage_type: Storage type for server deployment; if pi_storage_type is not provided the storage type will default to tier3
        :param pulumi.Input[_builtins.str] pi_sys_type: The type of system on which to create the VM (e880/e980/e1080/e1150/e1180/s922/s1022/s1122).
        :param pulumi.Input[_builtins.str] pi_user_data: Base64 encoded data to be passed in for invoking a cloud init script
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: The user tags attached to this resource.
        :param pulumi.Input[_builtins.float] pi_virtual_cores_assigned: Virtual Cores Assigned to the PVMInstance
        :param pulumi.Input[_builtins.str] pi_virtual_optical_device: Virtual Machine's Cloud Initialization Virtual Optical Device
        :param pulumi.Input[Union['PiInstancePiVirtualSerialNumberArgs', 'PiInstancePiVirtualSerialNumberArgsDict']] pi_virtual_serial_number: Virtual Serial Number information
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_volume_ids: List of PI volumes
        :param pulumi.Input[_builtins.str] pin_policy: PIN Policy of the Instance
        :param pulumi.Input[_builtins.float] progress: Progress of the operation
        :param pulumi.Input[_builtins.str] shared_processor_pool_id: Shared Processor Pool ID the instance is deployed on
        :param pulumi.Input[_builtins.str] status: PI instance status
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PiInstanceState.__new__(_PiInstanceState)

        __props__.__dict__["crn"] = crn
        __props__.__dict__["dedicated_host_id"] = dedicated_host_id
        __props__.__dict__["fault"] = fault
        __props__.__dict__["health_status"] = health_status
        __props__.__dict__["ibmi_rds"] = ibmi_rds
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["max_memory"] = max_memory
        __props__.__dict__["max_processors"] = max_processors
        __props__.__dict__["max_virtual_cores"] = max_virtual_cores
        __props__.__dict__["min_memory"] = min_memory
        __props__.__dict__["min_processors"] = min_processors
        __props__.__dict__["min_virtual_cores"] = min_virtual_cores
        __props__.__dict__["operating_system"] = operating_system
        __props__.__dict__["os_type"] = os_type
        __props__.__dict__["pi_affinity_instance"] = pi_affinity_instance
        __props__.__dict__["pi_affinity_policy"] = pi_affinity_policy
        __props__.__dict__["pi_affinity_volume"] = pi_affinity_volume
        __props__.__dict__["pi_anti_affinity_instances"] = pi_anti_affinity_instances
        __props__.__dict__["pi_anti_affinity_volumes"] = pi_anti_affinity_volumes
        __props__.__dict__["pi_boot_volume_replication_enabled"] = pi_boot_volume_replication_enabled
        __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
        __props__.__dict__["pi_deployment_target"] = pi_deployment_target
        __props__.__dict__["pi_deployment_type"] = pi_deployment_type
        __props__.__dict__["pi_health_status"] = pi_health_status
        __props__.__dict__["pi_ibmi_css"] = pi_ibmi_css
        __props__.__dict__["pi_ibmi_pha"] = pi_ibmi_pha
        __props__.__dict__["pi_ibmi_rds_users"] = pi_ibmi_rds_users
        __props__.__dict__["pi_image_id"] = pi_image_id
        __props__.__dict__["pi_instance_id"] = pi_instance_id
        __props__.__dict__["pi_instance_name"] = pi_instance_name
        __props__.__dict__["pi_key_pair_name"] = pi_key_pair_name
        __props__.__dict__["pi_license_repository_capacity"] = pi_license_repository_capacity
        __props__.__dict__["pi_memory"] = pi_memory
        __props__.__dict__["pi_networks"] = pi_networks
        __props__.__dict__["pi_pin_policy"] = pi_pin_policy
        __props__.__dict__["pi_placement_group_id"] = pi_placement_group_id
        __props__.__dict__["pi_proc_type"] = pi_proc_type
        __props__.__dict__["pi_processors"] = pi_processors
        __props__.__dict__["pi_replicants"] = pi_replicants
        __props__.__dict__["pi_replication_policy"] = pi_replication_policy
        __props__.__dict__["pi_replication_scheme"] = pi_replication_scheme
        __props__.__dict__["pi_replication_sites"] = pi_replication_sites
        __props__.__dict__["pi_retain_virtual_serial_number"] = pi_retain_virtual_serial_number
        __props__.__dict__["pi_sap_deployment_type"] = pi_sap_deployment_type
        __props__.__dict__["pi_sap_profile_id"] = pi_sap_profile_id
        __props__.__dict__["pi_shared_processor_pool"] = pi_shared_processor_pool
        __props__.__dict__["pi_storage_connection"] = pi_storage_connection
        __props__.__dict__["pi_storage_pool"] = pi_storage_pool
        __props__.__dict__["pi_storage_pool_affinity"] = pi_storage_pool_affinity
        __props__.__dict__["pi_storage_type"] = pi_storage_type
        __props__.__dict__["pi_sys_type"] = pi_sys_type
        __props__.__dict__["pi_user_data"] = pi_user_data
        __props__.__dict__["pi_user_tags"] = pi_user_tags
        __props__.__dict__["pi_virtual_cores_assigned"] = pi_virtual_cores_assigned
        __props__.__dict__["pi_virtual_optical_device"] = pi_virtual_optical_device
        __props__.__dict__["pi_virtual_serial_number"] = pi_virtual_serial_number
        __props__.__dict__["pi_volume_ids"] = pi_volume_ids
        __props__.__dict__["pin_policy"] = pin_policy
        __props__.__dict__["progress"] = progress
        __props__.__dict__["shared_processor_pool_id"] = shared_processor_pool_id
        __props__.__dict__["status"] = status
        __props__.__dict__["timeouts"] = timeouts
        return PiInstance(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The CRN of this resource.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="dedicatedHostId")
    def dedicated_host_id(self) -> pulumi.Output[_builtins.str]:
        """
        The dedicated host ID where the shared processor pool resides.
        """
        return pulumi.get(self, "dedicated_host_id")

    @_builtins.property
    @pulumi.getter
    def fault(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Fault information.
        """
        return pulumi.get(self, "fault")

    @_builtins.property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> pulumi.Output[_builtins.str]:
        """
        PI Instance health status
        """
        return pulumi.get(self, "health_status")

    @_builtins.property
    @pulumi.getter(name="ibmiRds")
    def ibmi_rds(self) -> pulumi.Output[_builtins.bool]:
        """
        IBM i Rational Dev Studio
        """
        return pulumi.get(self, "ibmi_rds")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Instance ID
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="maxMemory")
    def max_memory(self) -> pulumi.Output[_builtins.float]:
        """
        Maximum memory size
        """
        return pulumi.get(self, "max_memory")

    @_builtins.property
    @pulumi.getter(name="maxProcessors")
    def max_processors(self) -> pulumi.Output[_builtins.float]:
        """
        Maximum number of processors
        """
        return pulumi.get(self, "max_processors")

    @_builtins.property
    @pulumi.getter(name="maxVirtualCores")
    def max_virtual_cores(self) -> pulumi.Output[_builtins.float]:
        """
        Maximum Virtual Cores Assigned to the PVMInstance
        """
        return pulumi.get(self, "max_virtual_cores")

    @_builtins.property
    @pulumi.getter(name="minMemory")
    def min_memory(self) -> pulumi.Output[_builtins.float]:
        """
        Minimum memory
        """
        return pulumi.get(self, "min_memory")

    @_builtins.property
    @pulumi.getter(name="minProcessors")
    def min_processors(self) -> pulumi.Output[_builtins.float]:
        """
        Minimum number of the CPUs
        """
        return pulumi.get(self, "min_processors")

    @_builtins.property
    @pulumi.getter(name="minVirtualCores")
    def min_virtual_cores(self) -> pulumi.Output[_builtins.float]:
        """
        Minimum Virtual Cores Assigned to the PVMInstance
        """
        return pulumi.get(self, "min_virtual_cores")

    @_builtins.property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> pulumi.Output[_builtins.str]:
        """
        Operating System
        """
        return pulumi.get(self, "operating_system")

    @_builtins.property
    @pulumi.getter(name="osType")
    def os_type(self) -> pulumi.Output[_builtins.str]:
        """
        OS Type
        """
        return pulumi.get(self, "os_type")

    @_builtins.property
    @pulumi.getter(name="piAffinityInstance")
    def pi_affinity_instance(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        PVM Instance (ID or Name) to base storage affinity policy against; required if requesting storage affinity and
        pi_affinity_volume is not provided
        """
        return pulumi.get(self, "pi_affinity_instance")

    @_builtins.property
    @pulumi.getter(name="piAffinityPolicy")
    def pi_affinity_policy(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Affinity policy for pvm instance being created; ignored if pi_storage_pool provided; for policy affinity requires one of
        pi_affinity_instance or pi_affinity_volume to be specified; for policy anti-affinity requires one of
        pi_anti_affinity_instances or pi_anti_affinity_volumes to be specified
        """
        return pulumi.get(self, "pi_affinity_policy")

    @_builtins.property
    @pulumi.getter(name="piAffinityVolume")
    def pi_affinity_volume(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Volume (ID or Name) to base storage affinity policy against; required if requesting affinity and pi_affinity_instance is
        not provided
        """
        return pulumi.get(self, "pi_affinity_volume")

    @_builtins.property
    @pulumi.getter(name="piAntiAffinityInstances")
    def pi_anti_affinity_instances(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of pvmInstances to base storage anti-affinity policy against; required if requesting anti-affinity and
        pi_anti_affinity_volumes is not provided
        """
        return pulumi.get(self, "pi_anti_affinity_instances")

    @_builtins.property
    @pulumi.getter(name="piAntiAffinityVolumes")
    def pi_anti_affinity_volumes(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of volumes to base storage anti-affinity policy against; required if requesting anti-affinity and
        pi_anti_affinity_instances is not provided
        """
        return pulumi.get(self, "pi_anti_affinity_volumes")

    @_builtins.property
    @pulumi.getter(name="piBootVolumeReplicationEnabled")
    def pi_boot_volume_replication_enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Indicates if the boot volume should be replication enabled or not.
        """
        return pulumi.get(self, "pi_boot_volume_replication_enabled")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        This is the Power Instance id that is assigned to the account
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piDeploymentTarget")
    def pi_deployment_target(self) -> pulumi.Output[Optional['outputs.PiInstancePiDeploymentTarget']]:
        """
        The deployment of a dedicated host.
        """
        return pulumi.get(self, "pi_deployment_target")

    @_builtins.property
    @pulumi.getter(name="piDeploymentType")
    def pi_deployment_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Custom Deployment Type Information
        """
        return pulumi.get(self, "pi_deployment_type")

    @_builtins.property
    @pulumi.getter(name="piHealthStatus")
    def pi_health_status(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Allow the user to set the status of the lpar so that they can connect to it faster
        """
        return pulumi.get(self, "pi_health_status")

    @_builtins.property
    @pulumi.getter(name="piIbmiCss")
    def pi_ibmi_css(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        IBM i Cloud Storage Solution
        """
        return pulumi.get(self, "pi_ibmi_css")

    @_builtins.property
    @pulumi.getter(name="piIbmiPha")
    def pi_ibmi_pha(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        IBM i Power High Availability
        """
        return pulumi.get(self, "pi_ibmi_pha")

    @_builtins.property
    @pulumi.getter(name="piIbmiRdsUsers")
    def pi_ibmi_rds_users(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        IBM i Rational Dev Studio Number of User Licenses
        """
        return pulumi.get(self, "pi_ibmi_rds_users")

    @_builtins.property
    @pulumi.getter(name="piImageId")
    def pi_image_id(self) -> pulumi.Output[_builtins.str]:
        """
        PI instance image id
        """
        return pulumi.get(self, "pi_image_id")

    @_builtins.property
    @pulumi.getter(name="piInstanceId")
    def pi_instance_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "pi_instance_id")

    @_builtins.property
    @pulumi.getter(name="piInstanceName")
    def pi_instance_name(self) -> pulumi.Output[_builtins.str]:
        """
        PI Instance name
        """
        return pulumi.get(self, "pi_instance_name")

    @_builtins.property
    @pulumi.getter(name="piKeyPairName")
    def pi_key_pair_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        SSH key name
        """
        return pulumi.get(self, "pi_key_pair_name")

    @_builtins.property
    @pulumi.getter(name="piLicenseRepositoryCapacity")
    def pi_license_repository_capacity(self) -> pulumi.Output[_builtins.float]:
        """
        The VTL license repository capacity TB value
        """
        return pulumi.get(self, "pi_license_repository_capacity")

    @_builtins.property
    @pulumi.getter(name="piMemory")
    def pi_memory(self) -> pulumi.Output[_builtins.float]:
        """
        Memory size
        """
        return pulumi.get(self, "pi_memory")

    @_builtins.property
    @pulumi.getter(name="piNetworks")
    def pi_networks(self) -> pulumi.Output[Sequence['outputs.PiInstancePiNetwork']]:
        """
        List of one or more networks to attach to the instance
        """
        return pulumi.get(self, "pi_networks")

    @_builtins.property
    @pulumi.getter(name="piPinPolicy")
    def pi_pin_policy(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Pin Policy of the instance
        """
        return pulumi.get(self, "pi_pin_policy")

    @_builtins.property
    @pulumi.getter(name="piPlacementGroupId")
    def pi_placement_group_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Placement group ID
        """
        return pulumi.get(self, "pi_placement_group_id")

    @_builtins.property
    @pulumi.getter(name="piProcType")
    def pi_proc_type(self) -> pulumi.Output[_builtins.str]:
        """
        Instance processor type
        """
        return pulumi.get(self, "pi_proc_type")

    @_builtins.property
    @pulumi.getter(name="piProcessors")
    def pi_processors(self) -> pulumi.Output[_builtins.float]:
        """
        Processors count
        """
        return pulumi.get(self, "pi_processors")

    @_builtins.property
    @pulumi.getter(name="piReplicants")
    def pi_replicants(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        PI Instance replicas count
        """
        return pulumi.get(self, "pi_replicants")

    @_builtins.property
    @pulumi.getter(name="piReplicationPolicy")
    def pi_replication_policy(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Replication policy for the PI Instance
        """
        return pulumi.get(self, "pi_replication_policy")

    @_builtins.property
    @pulumi.getter(name="piReplicationScheme")
    def pi_replication_scheme(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Replication scheme
        """
        return pulumi.get(self, "pi_replication_scheme")

    @_builtins.property
    @pulumi.getter(name="piReplicationSites")
    def pi_replication_sites(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Indicates the replication sites of the boot volume.
        """
        return pulumi.get(self, "pi_replication_sites")

    @_builtins.property
    @pulumi.getter(name="piRetainVirtualSerialNumber")
    def pi_retain_virtual_serial_number(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Indicates whether to retain virtual serial number when changed or deleted.
        """
        return pulumi.get(self, "pi_retain_virtual_serial_number")

    @_builtins.property
    @pulumi.getter(name="piSapDeploymentType")
    def pi_sap_deployment_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Custom SAP Deployment Type Information
        """
        return pulumi.get(self, "pi_sap_deployment_type")

    @_builtins.property
    @pulumi.getter(name="piSapProfileId")
    def pi_sap_profile_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        SAP Profile ID for the amount of cores and memory
        """
        return pulumi.get(self, "pi_sap_profile_id")

    @_builtins.property
    @pulumi.getter(name="piSharedProcessorPool")
    def pi_shared_processor_pool(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Shared Processor Pool the instance is deployed on
        """
        return pulumi.get(self, "pi_shared_processor_pool")

    @_builtins.property
    @pulumi.getter(name="piStorageConnection")
    def pi_storage_connection(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Storage Connectivity Group for server deployment
        """
        return pulumi.get(self, "pi_storage_connection")

    @_builtins.property
    @pulumi.getter(name="piStoragePool")
    def pi_storage_pool(self) -> pulumi.Output[_builtins.str]:
        """
        Storage Pool for server deployment; if provided then pi_storage_pool_affinity will be ignored; Only valid when you
        deploy one of the IBM supplied stock images. Storage pool for a custom image (an imported image or an image that is
        created from a VM capture) defaults to the storage pool the image was created in
        """
        return pulumi.get(self, "pi_storage_pool")

    @_builtins.property
    @pulumi.getter(name="piStoragePoolAffinity")
    def pi_storage_pool_affinity(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Indicates if all volumes attached to the server must reside in the same storage pool
        """
        return pulumi.get(self, "pi_storage_pool_affinity")

    @_builtins.property
    @pulumi.getter(name="piStorageType")
    def pi_storage_type(self) -> pulumi.Output[_builtins.str]:
        """
        Storage type for server deployment; if pi_storage_type is not provided the storage type will default to tier3
        """
        return pulumi.get(self, "pi_storage_type")

    @_builtins.property
    @pulumi.getter(name="piSysType")
    def pi_sys_type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of system on which to create the VM (e880/e980/e1080/e1150/e1180/s922/s1022/s1122).
        """
        return pulumi.get(self, "pi_sys_type")

    @_builtins.property
    @pulumi.getter(name="piUserData")
    def pi_user_data(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Base64 encoded data to be passed in for invoking a cloud init script
        """
        return pulumi.get(self, "pi_user_data")

    @_builtins.property
    @pulumi.getter(name="piUserTags")
    def pi_user_tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The user tags attached to this resource.
        """
        return pulumi.get(self, "pi_user_tags")

    @_builtins.property
    @pulumi.getter(name="piVirtualCoresAssigned")
    def pi_virtual_cores_assigned(self) -> pulumi.Output[_builtins.float]:
        """
        Virtual Cores Assigned to the PVMInstance
        """
        return pulumi.get(self, "pi_virtual_cores_assigned")

    @_builtins.property
    @pulumi.getter(name="piVirtualOpticalDevice")
    def pi_virtual_optical_device(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Virtual Machine's Cloud Initialization Virtual Optical Device
        """
        return pulumi.get(self, "pi_virtual_optical_device")

    @_builtins.property
    @pulumi.getter(name="piVirtualSerialNumber")
    def pi_virtual_serial_number(self) -> pulumi.Output[Optional['outputs.PiInstancePiVirtualSerialNumber']]:
        """
        Virtual Serial Number information
        """
        return pulumi.get(self, "pi_virtual_serial_number")

    @_builtins.property
    @pulumi.getter(name="piVolumeIds")
    def pi_volume_ids(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of PI volumes
        """
        return pulumi.get(self, "pi_volume_ids")

    @_builtins.property
    @pulumi.getter(name="pinPolicy")
    def pin_policy(self) -> pulumi.Output[_builtins.str]:
        """
        PIN Policy of the Instance
        """
        return pulumi.get(self, "pin_policy")

    @_builtins.property
    @pulumi.getter
    def progress(self) -> pulumi.Output[_builtins.float]:
        """
        Progress of the operation
        """
        return pulumi.get(self, "progress")

    @_builtins.property
    @pulumi.getter(name="sharedProcessorPoolId")
    def shared_processor_pool_id(self) -> pulumi.Output[_builtins.str]:
        """
        Shared Processor Pool ID the instance is deployed on
        """
        return pulumi.get(self, "shared_processor_pool_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        PI instance status
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.PiInstanceTimeouts']]:
        return pulumi.get(self, "timeouts")

