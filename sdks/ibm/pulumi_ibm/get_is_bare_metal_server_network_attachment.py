# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsBareMetalServerNetworkAttachmentResult',
    'AwaitableGetIsBareMetalServerNetworkAttachmentResult',
    'get_is_bare_metal_server_network_attachment',
    'get_is_bare_metal_server_network_attachment_output',
]

@pulumi.output_type
class GetIsBareMetalServerNetworkAttachmentResult:
    """
    A collection of values returned by getIsBareMetalServerNetworkAttachment.
    """
    def __init__(__self__, allow_to_float=None, allowed_vlans=None, bare_metal_server=None, bare_metal_server_network_attachment_id=None, created_at=None, href=None, id=None, interface_type=None, lifecycle_state=None, name=None, network_attachment=None, port_speed=None, primary_ips=None, resource_type=None, subnets=None, type=None, virtual_network_interfaces=None, vlan=None):
        if allow_to_float and not isinstance(allow_to_float, bool):
            raise TypeError("Expected argument 'allow_to_float' to be a bool")
        pulumi.set(__self__, "allow_to_float", allow_to_float)
        if allowed_vlans and not isinstance(allowed_vlans, list):
            raise TypeError("Expected argument 'allowed_vlans' to be a list")
        pulumi.set(__self__, "allowed_vlans", allowed_vlans)
        if bare_metal_server and not isinstance(bare_metal_server, str):
            raise TypeError("Expected argument 'bare_metal_server' to be a str")
        pulumi.set(__self__, "bare_metal_server", bare_metal_server)
        if bare_metal_server_network_attachment_id and not isinstance(bare_metal_server_network_attachment_id, str):
            raise TypeError("Expected argument 'bare_metal_server_network_attachment_id' to be a str")
        pulumi.set(__self__, "bare_metal_server_network_attachment_id", bare_metal_server_network_attachment_id)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interface_type and not isinstance(interface_type, str):
            raise TypeError("Expected argument 'interface_type' to be a str")
        pulumi.set(__self__, "interface_type", interface_type)
        if lifecycle_state and not isinstance(lifecycle_state, str):
            raise TypeError("Expected argument 'lifecycle_state' to be a str")
        pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_attachment and not isinstance(network_attachment, str):
            raise TypeError("Expected argument 'network_attachment' to be a str")
        pulumi.set(__self__, "network_attachment", network_attachment)
        if port_speed and not isinstance(port_speed, float):
            raise TypeError("Expected argument 'port_speed' to be a float")
        pulumi.set(__self__, "port_speed", port_speed)
        if primary_ips and not isinstance(primary_ips, list):
            raise TypeError("Expected argument 'primary_ips' to be a list")
        pulumi.set(__self__, "primary_ips", primary_ips)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if subnets and not isinstance(subnets, list):
            raise TypeError("Expected argument 'subnets' to be a list")
        pulumi.set(__self__, "subnets", subnets)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if virtual_network_interfaces and not isinstance(virtual_network_interfaces, list):
            raise TypeError("Expected argument 'virtual_network_interfaces' to be a list")
        pulumi.set(__self__, "virtual_network_interfaces", virtual_network_interfaces)
        if vlan and not isinstance(vlan, float):
            raise TypeError("Expected argument 'vlan' to be a float")
        pulumi.set(__self__, "vlan", vlan)

    @_builtins.property
    @pulumi.getter(name="allowToFloat")
    def allow_to_float(self) -> _builtins.bool:
        return pulumi.get(self, "allow_to_float")

    @_builtins.property
    @pulumi.getter(name="allowedVlans")
    def allowed_vlans(self) -> Sequence[_builtins.float]:
        return pulumi.get(self, "allowed_vlans")

    @_builtins.property
    @pulumi.getter(name="bareMetalServer")
    def bare_metal_server(self) -> _builtins.str:
        return pulumi.get(self, "bare_metal_server")

    @_builtins.property
    @pulumi.getter(name="bareMetalServerNetworkAttachmentId")
    def bare_metal_server_network_attachment_id(self) -> _builtins.str:
        return pulumi.get(self, "bare_metal_server_network_attachment_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="interfaceType")
    def interface_type(self) -> _builtins.str:
        return pulumi.get(self, "interface_type")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> _builtins.str:
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkAttachment")
    def network_attachment(self) -> _builtins.str:
        return pulumi.get(self, "network_attachment")

    @_builtins.property
    @pulumi.getter(name="portSpeed")
    def port_speed(self) -> _builtins.float:
        return pulumi.get(self, "port_speed")

    @_builtins.property
    @pulumi.getter(name="primaryIps")
    def primary_ips(self) -> Sequence['outputs.GetIsBareMetalServerNetworkAttachmentPrimaryIpResult']:
        return pulumi.get(self, "primary_ips")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> Sequence['outputs.GetIsBareMetalServerNetworkAttachmentSubnetResult']:
        return pulumi.get(self, "subnets")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="virtualNetworkInterfaces")
    def virtual_network_interfaces(self) -> Sequence['outputs.GetIsBareMetalServerNetworkAttachmentVirtualNetworkInterfaceResult']:
        return pulumi.get(self, "virtual_network_interfaces")

    @_builtins.property
    @pulumi.getter
    def vlan(self) -> _builtins.float:
        return pulumi.get(self, "vlan")


class AwaitableGetIsBareMetalServerNetworkAttachmentResult(GetIsBareMetalServerNetworkAttachmentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsBareMetalServerNetworkAttachmentResult(
            allow_to_float=self.allow_to_float,
            allowed_vlans=self.allowed_vlans,
            bare_metal_server=self.bare_metal_server,
            bare_metal_server_network_attachment_id=self.bare_metal_server_network_attachment_id,
            created_at=self.created_at,
            href=self.href,
            id=self.id,
            interface_type=self.interface_type,
            lifecycle_state=self.lifecycle_state,
            name=self.name,
            network_attachment=self.network_attachment,
            port_speed=self.port_speed,
            primary_ips=self.primary_ips,
            resource_type=self.resource_type,
            subnets=self.subnets,
            type=self.type,
            virtual_network_interfaces=self.virtual_network_interfaces,
            vlan=self.vlan)


def get_is_bare_metal_server_network_attachment(bare_metal_server: Optional[_builtins.str] = None,
                                                id: Optional[_builtins.str] = None,
                                                network_attachment: Optional[_builtins.str] = None,
                                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsBareMetalServerNetworkAttachmentResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['bareMetalServer'] = bare_metal_server
    __args__['id'] = id
    __args__['networkAttachment'] = network_attachment
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsBareMetalServerNetworkAttachment:getIsBareMetalServerNetworkAttachment', __args__, opts=opts, typ=GetIsBareMetalServerNetworkAttachmentResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsBareMetalServerNetworkAttachmentResult(
        allow_to_float=pulumi.get(__ret__, 'allow_to_float'),
        allowed_vlans=pulumi.get(__ret__, 'allowed_vlans'),
        bare_metal_server=pulumi.get(__ret__, 'bare_metal_server'),
        bare_metal_server_network_attachment_id=pulumi.get(__ret__, 'bare_metal_server_network_attachment_id'),
        created_at=pulumi.get(__ret__, 'created_at'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        interface_type=pulumi.get(__ret__, 'interface_type'),
        lifecycle_state=pulumi.get(__ret__, 'lifecycle_state'),
        name=pulumi.get(__ret__, 'name'),
        network_attachment=pulumi.get(__ret__, 'network_attachment'),
        port_speed=pulumi.get(__ret__, 'port_speed'),
        primary_ips=pulumi.get(__ret__, 'primary_ips'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        subnets=pulumi.get(__ret__, 'subnets'),
        type=pulumi.get(__ret__, 'type'),
        virtual_network_interfaces=pulumi.get(__ret__, 'virtual_network_interfaces'),
        vlan=pulumi.get(__ret__, 'vlan'))
def get_is_bare_metal_server_network_attachment_output(bare_metal_server: Optional[pulumi.Input[_builtins.str]] = None,
                                                       id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                       network_attachment: Optional[pulumi.Input[_builtins.str]] = None,
                                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsBareMetalServerNetworkAttachmentResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['bareMetalServer'] = bare_metal_server
    __args__['id'] = id
    __args__['networkAttachment'] = network_attachment
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsBareMetalServerNetworkAttachment:getIsBareMetalServerNetworkAttachment', __args__, opts=opts, typ=GetIsBareMetalServerNetworkAttachmentResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsBareMetalServerNetworkAttachmentResult(
        allow_to_float=pulumi.get(__response__, 'allow_to_float'),
        allowed_vlans=pulumi.get(__response__, 'allowed_vlans'),
        bare_metal_server=pulumi.get(__response__, 'bare_metal_server'),
        bare_metal_server_network_attachment_id=pulumi.get(__response__, 'bare_metal_server_network_attachment_id'),
        created_at=pulumi.get(__response__, 'created_at'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        interface_type=pulumi.get(__response__, 'interface_type'),
        lifecycle_state=pulumi.get(__response__, 'lifecycle_state'),
        name=pulumi.get(__response__, 'name'),
        network_attachment=pulumi.get(__response__, 'network_attachment'),
        port_speed=pulumi.get(__response__, 'port_speed'),
        primary_ips=pulumi.get(__response__, 'primary_ips'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        subnets=pulumi.get(__response__, 'subnets'),
        type=pulumi.get(__response__, 'type'),
        virtual_network_interfaces=pulumi.get(__response__, 'virtual_network_interfaces'),
        vlan=pulumi.get(__response__, 'vlan')))
