# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MetricsRouterSettingsArgs', 'MetricsRouterSettings']

@pulumi.input_type
class MetricsRouterSettingsArgs:
    def __init__(__self__, *,
                 backup_metadata_region: Optional[pulumi.Input[_builtins.str]] = None,
                 default_targets: Optional[pulumi.Input[Sequence[pulumi.Input['MetricsRouterSettingsDefaultTargetArgs']]]] = None,
                 metrics_router_settings_id: Optional[pulumi.Input[_builtins.str]] = None,
                 permitted_target_regions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 primary_metadata_region: Optional[pulumi.Input[_builtins.str]] = None,
                 private_api_endpoint_only: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a MetricsRouterSettings resource.
        :param pulumi.Input[_builtins.str] backup_metadata_region: To backup all your meta data in a different region.
        :param pulumi.Input[Sequence[pulumi.Input['MetricsRouterSettingsDefaultTargetArgs']]] default_targets: A list of default target references.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] permitted_target_regions: If present then only these regions may be used to define a target.
        :param pulumi.Input[_builtins.str] primary_metadata_region: To store all your meta data in a single region.
        :param pulumi.Input[_builtins.bool] private_api_endpoint_only: If you set this true then you cannot access api through public network.
        """
        if backup_metadata_region is not None:
            pulumi.set(__self__, "backup_metadata_region", backup_metadata_region)
        if default_targets is not None:
            pulumi.set(__self__, "default_targets", default_targets)
        if metrics_router_settings_id is not None:
            pulumi.set(__self__, "metrics_router_settings_id", metrics_router_settings_id)
        if permitted_target_regions is not None:
            pulumi.set(__self__, "permitted_target_regions", permitted_target_regions)
        if primary_metadata_region is not None:
            pulumi.set(__self__, "primary_metadata_region", primary_metadata_region)
        if private_api_endpoint_only is not None:
            pulumi.set(__self__, "private_api_endpoint_only", private_api_endpoint_only)

    @_builtins.property
    @pulumi.getter(name="backupMetadataRegion")
    def backup_metadata_region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        To backup all your meta data in a different region.
        """
        return pulumi.get(self, "backup_metadata_region")

    @backup_metadata_region.setter
    def backup_metadata_region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_metadata_region", value)

    @_builtins.property
    @pulumi.getter(name="defaultTargets")
    def default_targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MetricsRouterSettingsDefaultTargetArgs']]]]:
        """
        A list of default target references.
        """
        return pulumi.get(self, "default_targets")

    @default_targets.setter
    def default_targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MetricsRouterSettingsDefaultTargetArgs']]]]):
        pulumi.set(self, "default_targets", value)

    @_builtins.property
    @pulumi.getter(name="metricsRouterSettingsId")
    def metrics_router_settings_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "metrics_router_settings_id")

    @metrics_router_settings_id.setter
    def metrics_router_settings_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "metrics_router_settings_id", value)

    @_builtins.property
    @pulumi.getter(name="permittedTargetRegions")
    def permitted_target_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        If present then only these regions may be used to define a target.
        """
        return pulumi.get(self, "permitted_target_regions")

    @permitted_target_regions.setter
    def permitted_target_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "permitted_target_regions", value)

    @_builtins.property
    @pulumi.getter(name="primaryMetadataRegion")
    def primary_metadata_region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        To store all your meta data in a single region.
        """
        return pulumi.get(self, "primary_metadata_region")

    @primary_metadata_region.setter
    def primary_metadata_region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "primary_metadata_region", value)

    @_builtins.property
    @pulumi.getter(name="privateApiEndpointOnly")
    def private_api_endpoint_only(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If you set this true then you cannot access api through public network.
        """
        return pulumi.get(self, "private_api_endpoint_only")

    @private_api_endpoint_only.setter
    def private_api_endpoint_only(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "private_api_endpoint_only", value)


@pulumi.input_type
class _MetricsRouterSettingsState:
    def __init__(__self__, *,
                 backup_metadata_region: Optional[pulumi.Input[_builtins.str]] = None,
                 default_targets: Optional[pulumi.Input[Sequence[pulumi.Input['MetricsRouterSettingsDefaultTargetArgs']]]] = None,
                 metrics_router_settings_id: Optional[pulumi.Input[_builtins.str]] = None,
                 permitted_target_regions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 primary_metadata_region: Optional[pulumi.Input[_builtins.str]] = None,
                 private_api_endpoint_only: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        Input properties used for looking up and filtering MetricsRouterSettings resources.
        :param pulumi.Input[_builtins.str] backup_metadata_region: To backup all your meta data in a different region.
        :param pulumi.Input[Sequence[pulumi.Input['MetricsRouterSettingsDefaultTargetArgs']]] default_targets: A list of default target references.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] permitted_target_regions: If present then only these regions may be used to define a target.
        :param pulumi.Input[_builtins.str] primary_metadata_region: To store all your meta data in a single region.
        :param pulumi.Input[_builtins.bool] private_api_endpoint_only: If you set this true then you cannot access api through public network.
        """
        if backup_metadata_region is not None:
            pulumi.set(__self__, "backup_metadata_region", backup_metadata_region)
        if default_targets is not None:
            pulumi.set(__self__, "default_targets", default_targets)
        if metrics_router_settings_id is not None:
            pulumi.set(__self__, "metrics_router_settings_id", metrics_router_settings_id)
        if permitted_target_regions is not None:
            pulumi.set(__self__, "permitted_target_regions", permitted_target_regions)
        if primary_metadata_region is not None:
            pulumi.set(__self__, "primary_metadata_region", primary_metadata_region)
        if private_api_endpoint_only is not None:
            pulumi.set(__self__, "private_api_endpoint_only", private_api_endpoint_only)

    @_builtins.property
    @pulumi.getter(name="backupMetadataRegion")
    def backup_metadata_region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        To backup all your meta data in a different region.
        """
        return pulumi.get(self, "backup_metadata_region")

    @backup_metadata_region.setter
    def backup_metadata_region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_metadata_region", value)

    @_builtins.property
    @pulumi.getter(name="defaultTargets")
    def default_targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MetricsRouterSettingsDefaultTargetArgs']]]]:
        """
        A list of default target references.
        """
        return pulumi.get(self, "default_targets")

    @default_targets.setter
    def default_targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MetricsRouterSettingsDefaultTargetArgs']]]]):
        pulumi.set(self, "default_targets", value)

    @_builtins.property
    @pulumi.getter(name="metricsRouterSettingsId")
    def metrics_router_settings_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "metrics_router_settings_id")

    @metrics_router_settings_id.setter
    def metrics_router_settings_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "metrics_router_settings_id", value)

    @_builtins.property
    @pulumi.getter(name="permittedTargetRegions")
    def permitted_target_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        If present then only these regions may be used to define a target.
        """
        return pulumi.get(self, "permitted_target_regions")

    @permitted_target_regions.setter
    def permitted_target_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "permitted_target_regions", value)

    @_builtins.property
    @pulumi.getter(name="primaryMetadataRegion")
    def primary_metadata_region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        To store all your meta data in a single region.
        """
        return pulumi.get(self, "primary_metadata_region")

    @primary_metadata_region.setter
    def primary_metadata_region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "primary_metadata_region", value)

    @_builtins.property
    @pulumi.getter(name="privateApiEndpointOnly")
    def private_api_endpoint_only(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If you set this true then you cannot access api through public network.
        """
        return pulumi.get(self, "private_api_endpoint_only")

    @private_api_endpoint_only.setter
    def private_api_endpoint_only(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "private_api_endpoint_only", value)


@pulumi.type_token("ibm:index/metricsRouterSettings:MetricsRouterSettings")
class MetricsRouterSettings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_metadata_region: Optional[pulumi.Input[_builtins.str]] = None,
                 default_targets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MetricsRouterSettingsDefaultTargetArgs', 'MetricsRouterSettingsDefaultTargetArgsDict']]]]] = None,
                 metrics_router_settings_id: Optional[pulumi.Input[_builtins.str]] = None,
                 permitted_target_regions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 primary_metadata_region: Optional[pulumi.Input[_builtins.str]] = None,
                 private_api_endpoint_only: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        """
        Create a MetricsRouterSettings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] backup_metadata_region: To backup all your meta data in a different region.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MetricsRouterSettingsDefaultTargetArgs', 'MetricsRouterSettingsDefaultTargetArgsDict']]]] default_targets: A list of default target references.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] permitted_target_regions: If present then only these regions may be used to define a target.
        :param pulumi.Input[_builtins.str] primary_metadata_region: To store all your meta data in a single region.
        :param pulumi.Input[_builtins.bool] private_api_endpoint_only: If you set this true then you cannot access api through public network.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[MetricsRouterSettingsArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a MetricsRouterSettings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param MetricsRouterSettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MetricsRouterSettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_metadata_region: Optional[pulumi.Input[_builtins.str]] = None,
                 default_targets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MetricsRouterSettingsDefaultTargetArgs', 'MetricsRouterSettingsDefaultTargetArgsDict']]]]] = None,
                 metrics_router_settings_id: Optional[pulumi.Input[_builtins.str]] = None,
                 permitted_target_regions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 primary_metadata_region: Optional[pulumi.Input[_builtins.str]] = None,
                 private_api_endpoint_only: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MetricsRouterSettingsArgs.__new__(MetricsRouterSettingsArgs)

            __props__.__dict__["backup_metadata_region"] = backup_metadata_region
            __props__.__dict__["default_targets"] = default_targets
            __props__.__dict__["metrics_router_settings_id"] = metrics_router_settings_id
            __props__.__dict__["permitted_target_regions"] = permitted_target_regions
            __props__.__dict__["primary_metadata_region"] = primary_metadata_region
            __props__.__dict__["private_api_endpoint_only"] = private_api_endpoint_only
        super(MetricsRouterSettings, __self__).__init__(
            'ibm:index/metricsRouterSettings:MetricsRouterSettings',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            backup_metadata_region: Optional[pulumi.Input[_builtins.str]] = None,
            default_targets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['MetricsRouterSettingsDefaultTargetArgs', 'MetricsRouterSettingsDefaultTargetArgsDict']]]]] = None,
            metrics_router_settings_id: Optional[pulumi.Input[_builtins.str]] = None,
            permitted_target_regions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            primary_metadata_region: Optional[pulumi.Input[_builtins.str]] = None,
            private_api_endpoint_only: Optional[pulumi.Input[_builtins.bool]] = None) -> 'MetricsRouterSettings':
        """
        Get an existing MetricsRouterSettings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] backup_metadata_region: To backup all your meta data in a different region.
        :param pulumi.Input[Sequence[pulumi.Input[Union['MetricsRouterSettingsDefaultTargetArgs', 'MetricsRouterSettingsDefaultTargetArgsDict']]]] default_targets: A list of default target references.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] permitted_target_regions: If present then only these regions may be used to define a target.
        :param pulumi.Input[_builtins.str] primary_metadata_region: To store all your meta data in a single region.
        :param pulumi.Input[_builtins.bool] private_api_endpoint_only: If you set this true then you cannot access api through public network.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MetricsRouterSettingsState.__new__(_MetricsRouterSettingsState)

        __props__.__dict__["backup_metadata_region"] = backup_metadata_region
        __props__.__dict__["default_targets"] = default_targets
        __props__.__dict__["metrics_router_settings_id"] = metrics_router_settings_id
        __props__.__dict__["permitted_target_regions"] = permitted_target_regions
        __props__.__dict__["primary_metadata_region"] = primary_metadata_region
        __props__.__dict__["private_api_endpoint_only"] = private_api_endpoint_only
        return MetricsRouterSettings(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="backupMetadataRegion")
    def backup_metadata_region(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        To backup all your meta data in a different region.
        """
        return pulumi.get(self, "backup_metadata_region")

    @_builtins.property
    @pulumi.getter(name="defaultTargets")
    def default_targets(self) -> pulumi.Output[Optional[Sequence['outputs.MetricsRouterSettingsDefaultTarget']]]:
        """
        A list of default target references.
        """
        return pulumi.get(self, "default_targets")

    @_builtins.property
    @pulumi.getter(name="metricsRouterSettingsId")
    def metrics_router_settings_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "metrics_router_settings_id")

    @_builtins.property
    @pulumi.getter(name="permittedTargetRegions")
    def permitted_target_regions(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        If present then only these regions may be used to define a target.
        """
        return pulumi.get(self, "permitted_target_regions")

    @_builtins.property
    @pulumi.getter(name="primaryMetadataRegion")
    def primary_metadata_region(self) -> pulumi.Output[_builtins.str]:
        """
        To store all your meta data in a single region.
        """
        return pulumi.get(self, "primary_metadata_region")

    @_builtins.property
    @pulumi.getter(name="privateApiEndpointOnly")
    def private_api_endpoint_only(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        If you set this true then you cannot access api through public network.
        """
        return pulumi.get(self, "private_api_endpoint_only")

