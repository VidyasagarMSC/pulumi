# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BackupRecoveryDataSourceConnectorPatchArgs', 'BackupRecoveryDataSourceConnectorPatch']

@pulumi.input_type
class BackupRecoveryDataSourceConnectorPatchArgs:
    def __init__(__self__, *,
                 connector_id: pulumi.Input[_builtins.str],
                 x_ibm_tenant_id: pulumi.Input[_builtins.str],
                 backup_recovery_data_source_connector_patch_id: Optional[pulumi.Input[_builtins.str]] = None,
                 connector_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a BackupRecoveryDataSourceConnectorPatch resource.
        :param pulumi.Input[_builtins.str] connector_id: Specifies the unique ID of the connector which is to be deleted.
        :param pulumi.Input[_builtins.str] x_ibm_tenant_id: Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
               be specified.
        :param pulumi.Input[_builtins.str] connector_name: Specifies the name of the connector. The name of a connector need not be unique within a tenant or across tenants. The
               name of the connector can be updated as needed.
        """
        pulumi.set(__self__, "connector_id", connector_id)
        pulumi.set(__self__, "x_ibm_tenant_id", x_ibm_tenant_id)
        if backup_recovery_data_source_connector_patch_id is not None:
            pulumi.set(__self__, "backup_recovery_data_source_connector_patch_id", backup_recovery_data_source_connector_patch_id)
        if connector_name is not None:
            pulumi.set(__self__, "connector_name", connector_name)

    @_builtins.property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the unique ID of the connector which is to be deleted.
        """
        return pulumi.get(self, "connector_id")

    @connector_id.setter
    def connector_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "connector_id", value)

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
        be specified.
        """
        return pulumi.get(self, "x_ibm_tenant_id")

    @x_ibm_tenant_id.setter
    def x_ibm_tenant_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "x_ibm_tenant_id", value)

    @_builtins.property
    @pulumi.getter(name="backupRecoveryDataSourceConnectorPatchId")
    def backup_recovery_data_source_connector_patch_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "backup_recovery_data_source_connector_patch_id")

    @backup_recovery_data_source_connector_patch_id.setter
    def backup_recovery_data_source_connector_patch_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_recovery_data_source_connector_patch_id", value)

    @_builtins.property
    @pulumi.getter(name="connectorName")
    def connector_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the connector. The name of a connector need not be unique within a tenant or across tenants. The
        name of the connector can be updated as needed.
        """
        return pulumi.get(self, "connector_name")

    @connector_name.setter
    def connector_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connector_name", value)


@pulumi.input_type
class _BackupRecoveryDataSourceConnectorPatchState:
    def __init__(__self__, *,
                 backup_recovery_data_source_connector_patch_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_side_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 connectivity_statuses: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDataSourceConnectorPatchConnectivityStatusArgs']]]] = None,
                 connector_id: Optional[pulumi.Input[_builtins.str]] = None,
                 connector_name: Optional[pulumi.Input[_builtins.str]] = None,
                 software_version: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_side_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 upgrade_statuses: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDataSourceConnectorPatchUpgradeStatusArgs']]]] = None,
                 x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering BackupRecoveryDataSourceConnectorPatch resources.
        :param pulumi.Input[_builtins.str] cluster_side_ip: Specifies the IP of the connector's NIC facing the cluster.
        :param pulumi.Input[_builtins.str] connection_id: Specifies the ID of the connection to which this connector belongs.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDataSourceConnectorPatchConnectivityStatusArgs']]] connectivity_statuses: Specifies status information for the data-source connector. For example if it's currently connected to the cluster, when
               it last connected to the cluster successfully, etc.
        :param pulumi.Input[_builtins.str] connector_id: Specifies the unique ID of the connector which is to be deleted.
        :param pulumi.Input[_builtins.str] connector_name: Specifies the name of the connector. The name of a connector need not be unique within a tenant or across tenants. The
               name of the connector can be updated as needed.
        :param pulumi.Input[_builtins.str] software_version: Specifies the connector's software version.
        :param pulumi.Input[_builtins.str] tenant_side_ip: Specifies the IP of the connector's NIC facing the sources of the tenant to which the connector belongs.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDataSourceConnectorPatchUpgradeStatusArgs']]] upgrade_statuses: Specifies upgrade status for the data-source connector. For example when the upgrade started, current status of the
               upgrade, errors for upgrade failure etc.
        :param pulumi.Input[_builtins.str] x_ibm_tenant_id: Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
               be specified.
        """
        if backup_recovery_data_source_connector_patch_id is not None:
            pulumi.set(__self__, "backup_recovery_data_source_connector_patch_id", backup_recovery_data_source_connector_patch_id)
        if cluster_side_ip is not None:
            pulumi.set(__self__, "cluster_side_ip", cluster_side_ip)
        if connection_id is not None:
            pulumi.set(__self__, "connection_id", connection_id)
        if connectivity_statuses is not None:
            pulumi.set(__self__, "connectivity_statuses", connectivity_statuses)
        if connector_id is not None:
            pulumi.set(__self__, "connector_id", connector_id)
        if connector_name is not None:
            pulumi.set(__self__, "connector_name", connector_name)
        if software_version is not None:
            pulumi.set(__self__, "software_version", software_version)
        if tenant_side_ip is not None:
            pulumi.set(__self__, "tenant_side_ip", tenant_side_ip)
        if upgrade_statuses is not None:
            pulumi.set(__self__, "upgrade_statuses", upgrade_statuses)
        if x_ibm_tenant_id is not None:
            pulumi.set(__self__, "x_ibm_tenant_id", x_ibm_tenant_id)

    @_builtins.property
    @pulumi.getter(name="backupRecoveryDataSourceConnectorPatchId")
    def backup_recovery_data_source_connector_patch_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "backup_recovery_data_source_connector_patch_id")

    @backup_recovery_data_source_connector_patch_id.setter
    def backup_recovery_data_source_connector_patch_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_recovery_data_source_connector_patch_id", value)

    @_builtins.property
    @pulumi.getter(name="clusterSideIp")
    def cluster_side_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the IP of the connector's NIC facing the cluster.
        """
        return pulumi.get(self, "cluster_side_ip")

    @cluster_side_ip.setter
    def cluster_side_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_side_ip", value)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the connection to which this connector belongs.
        """
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connection_id", value)

    @_builtins.property
    @pulumi.getter(name="connectivityStatuses")
    def connectivity_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDataSourceConnectorPatchConnectivityStatusArgs']]]]:
        """
        Specifies status information for the data-source connector. For example if it's currently connected to the cluster, when
        it last connected to the cluster successfully, etc.
        """
        return pulumi.get(self, "connectivity_statuses")

    @connectivity_statuses.setter
    def connectivity_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDataSourceConnectorPatchConnectivityStatusArgs']]]]):
        pulumi.set(self, "connectivity_statuses", value)

    @_builtins.property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the unique ID of the connector which is to be deleted.
        """
        return pulumi.get(self, "connector_id")

    @connector_id.setter
    def connector_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connector_id", value)

    @_builtins.property
    @pulumi.getter(name="connectorName")
    def connector_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the connector. The name of a connector need not be unique within a tenant or across tenants. The
        name of the connector can be updated as needed.
        """
        return pulumi.get(self, "connector_name")

    @connector_name.setter
    def connector_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connector_name", value)

    @_builtins.property
    @pulumi.getter(name="softwareVersion")
    def software_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the connector's software version.
        """
        return pulumi.get(self, "software_version")

    @software_version.setter
    def software_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "software_version", value)

    @_builtins.property
    @pulumi.getter(name="tenantSideIp")
    def tenant_side_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the IP of the connector's NIC facing the sources of the tenant to which the connector belongs.
        """
        return pulumi.get(self, "tenant_side_ip")

    @tenant_side_ip.setter
    def tenant_side_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tenant_side_ip", value)

    @_builtins.property
    @pulumi.getter(name="upgradeStatuses")
    def upgrade_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDataSourceConnectorPatchUpgradeStatusArgs']]]]:
        """
        Specifies upgrade status for the data-source connector. For example when the upgrade started, current status of the
        upgrade, errors for upgrade failure etc.
        """
        return pulumi.get(self, "upgrade_statuses")

    @upgrade_statuses.setter
    def upgrade_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryDataSourceConnectorPatchUpgradeStatusArgs']]]]):
        pulumi.set(self, "upgrade_statuses", value)

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
        be specified.
        """
        return pulumi.get(self, "x_ibm_tenant_id")

    @x_ibm_tenant_id.setter
    def x_ibm_tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "x_ibm_tenant_id", value)


@pulumi.type_token("ibm:index/backupRecoveryDataSourceConnectorPatch:BackupRecoveryDataSourceConnectorPatch")
class BackupRecoveryDataSourceConnectorPatch(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_recovery_data_source_connector_patch_id: Optional[pulumi.Input[_builtins.str]] = None,
                 connector_id: Optional[pulumi.Input[_builtins.str]] = None,
                 connector_name: Optional[pulumi.Input[_builtins.str]] = None,
                 x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a BackupRecoveryDataSourceConnectorPatch resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] connector_id: Specifies the unique ID of the connector which is to be deleted.
        :param pulumi.Input[_builtins.str] connector_name: Specifies the name of the connector. The name of a connector need not be unique within a tenant or across tenants. The
               name of the connector can be updated as needed.
        :param pulumi.Input[_builtins.str] x_ibm_tenant_id: Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
               be specified.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BackupRecoveryDataSourceConnectorPatchArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a BackupRecoveryDataSourceConnectorPatch resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param BackupRecoveryDataSourceConnectorPatchArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BackupRecoveryDataSourceConnectorPatchArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_recovery_data_source_connector_patch_id: Optional[pulumi.Input[_builtins.str]] = None,
                 connector_id: Optional[pulumi.Input[_builtins.str]] = None,
                 connector_name: Optional[pulumi.Input[_builtins.str]] = None,
                 x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BackupRecoveryDataSourceConnectorPatchArgs.__new__(BackupRecoveryDataSourceConnectorPatchArgs)

            __props__.__dict__["backup_recovery_data_source_connector_patch_id"] = backup_recovery_data_source_connector_patch_id
            if connector_id is None and not opts.urn:
                raise TypeError("Missing required property 'connector_id'")
            __props__.__dict__["connector_id"] = connector_id
            __props__.__dict__["connector_name"] = connector_name
            if x_ibm_tenant_id is None and not opts.urn:
                raise TypeError("Missing required property 'x_ibm_tenant_id'")
            __props__.__dict__["x_ibm_tenant_id"] = x_ibm_tenant_id
            __props__.__dict__["cluster_side_ip"] = None
            __props__.__dict__["connection_id"] = None
            __props__.__dict__["connectivity_statuses"] = None
            __props__.__dict__["software_version"] = None
            __props__.__dict__["tenant_side_ip"] = None
            __props__.__dict__["upgrade_statuses"] = None
        super(BackupRecoveryDataSourceConnectorPatch, __self__).__init__(
            'ibm:index/backupRecoveryDataSourceConnectorPatch:BackupRecoveryDataSourceConnectorPatch',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            backup_recovery_data_source_connector_patch_id: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_side_ip: Optional[pulumi.Input[_builtins.str]] = None,
            connection_id: Optional[pulumi.Input[_builtins.str]] = None,
            connectivity_statuses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryDataSourceConnectorPatchConnectivityStatusArgs', 'BackupRecoveryDataSourceConnectorPatchConnectivityStatusArgsDict']]]]] = None,
            connector_id: Optional[pulumi.Input[_builtins.str]] = None,
            connector_name: Optional[pulumi.Input[_builtins.str]] = None,
            software_version: Optional[pulumi.Input[_builtins.str]] = None,
            tenant_side_ip: Optional[pulumi.Input[_builtins.str]] = None,
            upgrade_statuses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryDataSourceConnectorPatchUpgradeStatusArgs', 'BackupRecoveryDataSourceConnectorPatchUpgradeStatusArgsDict']]]]] = None,
            x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'BackupRecoveryDataSourceConnectorPatch':
        """
        Get an existing BackupRecoveryDataSourceConnectorPatch resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_side_ip: Specifies the IP of the connector's NIC facing the cluster.
        :param pulumi.Input[_builtins.str] connection_id: Specifies the ID of the connection to which this connector belongs.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryDataSourceConnectorPatchConnectivityStatusArgs', 'BackupRecoveryDataSourceConnectorPatchConnectivityStatusArgsDict']]]] connectivity_statuses: Specifies status information for the data-source connector. For example if it's currently connected to the cluster, when
               it last connected to the cluster successfully, etc.
        :param pulumi.Input[_builtins.str] connector_id: Specifies the unique ID of the connector which is to be deleted.
        :param pulumi.Input[_builtins.str] connector_name: Specifies the name of the connector. The name of a connector need not be unique within a tenant or across tenants. The
               name of the connector can be updated as needed.
        :param pulumi.Input[_builtins.str] software_version: Specifies the connector's software version.
        :param pulumi.Input[_builtins.str] tenant_side_ip: Specifies the IP of the connector's NIC facing the sources of the tenant to which the connector belongs.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryDataSourceConnectorPatchUpgradeStatusArgs', 'BackupRecoveryDataSourceConnectorPatchUpgradeStatusArgsDict']]]] upgrade_statuses: Specifies upgrade status for the data-source connector. For example when the upgrade started, current status of the
               upgrade, errors for upgrade failure etc.
        :param pulumi.Input[_builtins.str] x_ibm_tenant_id: Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
               be specified.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BackupRecoveryDataSourceConnectorPatchState.__new__(_BackupRecoveryDataSourceConnectorPatchState)

        __props__.__dict__["backup_recovery_data_source_connector_patch_id"] = backup_recovery_data_source_connector_patch_id
        __props__.__dict__["cluster_side_ip"] = cluster_side_ip
        __props__.__dict__["connection_id"] = connection_id
        __props__.__dict__["connectivity_statuses"] = connectivity_statuses
        __props__.__dict__["connector_id"] = connector_id
        __props__.__dict__["connector_name"] = connector_name
        __props__.__dict__["software_version"] = software_version
        __props__.__dict__["tenant_side_ip"] = tenant_side_ip
        __props__.__dict__["upgrade_statuses"] = upgrade_statuses
        __props__.__dict__["x_ibm_tenant_id"] = x_ibm_tenant_id
        return BackupRecoveryDataSourceConnectorPatch(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="backupRecoveryDataSourceConnectorPatchId")
    def backup_recovery_data_source_connector_patch_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "backup_recovery_data_source_connector_patch_id")

    @_builtins.property
    @pulumi.getter(name="clusterSideIp")
    def cluster_side_ip(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the IP of the connector's NIC facing the cluster.
        """
        return pulumi.get(self, "cluster_side_ip")

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the connection to which this connector belongs.
        """
        return pulumi.get(self, "connection_id")

    @_builtins.property
    @pulumi.getter(name="connectivityStatuses")
    def connectivity_statuses(self) -> pulumi.Output[Sequence['outputs.BackupRecoveryDataSourceConnectorPatchConnectivityStatus']]:
        """
        Specifies status information for the data-source connector. For example if it's currently connected to the cluster, when
        it last connected to the cluster successfully, etc.
        """
        return pulumi.get(self, "connectivity_statuses")

    @_builtins.property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the unique ID of the connector which is to be deleted.
        """
        return pulumi.get(self, "connector_id")

    @_builtins.property
    @pulumi.getter(name="connectorName")
    def connector_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the name of the connector. The name of a connector need not be unique within a tenant or across tenants. The
        name of the connector can be updated as needed.
        """
        return pulumi.get(self, "connector_name")

    @_builtins.property
    @pulumi.getter(name="softwareVersion")
    def software_version(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the connector's software version.
        """
        return pulumi.get(self, "software_version")

    @_builtins.property
    @pulumi.getter(name="tenantSideIp")
    def tenant_side_ip(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the IP of the connector's NIC facing the sources of the tenant to which the connector belongs.
        """
        return pulumi.get(self, "tenant_side_ip")

    @_builtins.property
    @pulumi.getter(name="upgradeStatuses")
    def upgrade_statuses(self) -> pulumi.Output[Sequence['outputs.BackupRecoveryDataSourceConnectorPatchUpgradeStatus']]:
        """
        Specifies upgrade status for the data-source connector. For example when the upgrade started, current status of the
        upgrade, errors for upgrade failure etc.
        """
        return pulumi.get(self, "upgrade_statuses")

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
        be specified.
        """
        return pulumi.get(self, "x_ibm_tenant_id")

