# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ContainerClusterFeatureArgs', 'ContainerClusterFeature']

@pulumi.input_type
class ContainerClusterFeatureArgs:
    def __init__(__self__, *,
                 cluster: pulumi.Input[_builtins.str],
                 container_cluster_feature_id: Optional[pulumi.Input[_builtins.str]] = None,
                 private_service_endpoint: Optional[pulumi.Input[_builtins.bool]] = None,
                 public_service_endpoint: Optional[pulumi.Input[_builtins.bool]] = None,
                 refresh_api_servers: Optional[pulumi.Input[_builtins.bool]] = None,
                 reload_workers: Optional[pulumi.Input[_builtins.bool]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['ContainerClusterFeatureTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a ContainerClusterFeature resource.
        :param pulumi.Input[_builtins.str] cluster: Cluster name of ID
        :param pulumi.Input[_builtins.bool] refresh_api_servers: Boolean value true of API server to be refreshed in K8S cluster
        :param pulumi.Input[_builtins.bool] reload_workers: Boolean value set true if worker nodes to be reloaded
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        """
        pulumi.set(__self__, "cluster", cluster)
        if container_cluster_feature_id is not None:
            pulumi.set(__self__, "container_cluster_feature_id", container_cluster_feature_id)
        if private_service_endpoint is not None:
            pulumi.set(__self__, "private_service_endpoint", private_service_endpoint)
        if public_service_endpoint is not None:
            pulumi.set(__self__, "public_service_endpoint", public_service_endpoint)
        if refresh_api_servers is not None:
            pulumi.set(__self__, "refresh_api_servers", refresh_api_servers)
        if reload_workers is not None:
            pulumi.set(__self__, "reload_workers", reload_workers)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> pulumi.Input[_builtins.str]:
        """
        Cluster name of ID
        """
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster", value)

    @_builtins.property
    @pulumi.getter(name="containerClusterFeatureId")
    def container_cluster_feature_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_cluster_feature_id")

    @container_cluster_feature_id.setter
    def container_cluster_feature_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_cluster_feature_id", value)

    @_builtins.property
    @pulumi.getter(name="privateServiceEndpoint")
    def private_service_endpoint(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "private_service_endpoint")

    @private_service_endpoint.setter
    def private_service_endpoint(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "private_service_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="publicServiceEndpoint")
    def public_service_endpoint(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "public_service_endpoint")

    @public_service_endpoint.setter
    def public_service_endpoint(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "public_service_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="refreshApiServers")
    def refresh_api_servers(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Boolean value true of API server to be refreshed in K8S cluster
        """
        return pulumi.get(self, "refresh_api_servers")

    @refresh_api_servers.setter
    def refresh_api_servers(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "refresh_api_servers", value)

    @_builtins.property
    @pulumi.getter(name="reloadWorkers")
    def reload_workers(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Boolean value set true if worker nodes to be reloaded
        """
        return pulumi.get(self, "reload_workers")

    @reload_workers.setter
    def reload_workers(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "reload_workers", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ContainerClusterFeatureTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ContainerClusterFeatureTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _ContainerClusterFeatureState:
    def __init__(__self__, *,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 container_cluster_feature_id: Optional[pulumi.Input[_builtins.str]] = None,
                 private_service_endpoint: Optional[pulumi.Input[_builtins.bool]] = None,
                 private_service_endpoint_url: Optional[pulumi.Input[_builtins.str]] = None,
                 public_service_endpoint: Optional[pulumi.Input[_builtins.bool]] = None,
                 public_service_endpoint_url: Optional[pulumi.Input[_builtins.str]] = None,
                 refresh_api_servers: Optional[pulumi.Input[_builtins.bool]] = None,
                 reload_workers: Optional[pulumi.Input[_builtins.bool]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['ContainerClusterFeatureTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering ContainerClusterFeature resources.
        :param pulumi.Input[_builtins.str] cluster: Cluster name of ID
        :param pulumi.Input[_builtins.bool] refresh_api_servers: Boolean value true of API server to be refreshed in K8S cluster
        :param pulumi.Input[_builtins.bool] reload_workers: Boolean value set true if worker nodes to be reloaded
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        """
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if container_cluster_feature_id is not None:
            pulumi.set(__self__, "container_cluster_feature_id", container_cluster_feature_id)
        if private_service_endpoint is not None:
            pulumi.set(__self__, "private_service_endpoint", private_service_endpoint)
        if private_service_endpoint_url is not None:
            pulumi.set(__self__, "private_service_endpoint_url", private_service_endpoint_url)
        if public_service_endpoint is not None:
            pulumi.set(__self__, "public_service_endpoint", public_service_endpoint)
        if public_service_endpoint_url is not None:
            pulumi.set(__self__, "public_service_endpoint_url", public_service_endpoint_url)
        if refresh_api_servers is not None:
            pulumi.set(__self__, "refresh_api_servers", refresh_api_servers)
        if reload_workers is not None:
            pulumi.set(__self__, "reload_workers", reload_workers)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cluster name of ID
        """
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster", value)

    @_builtins.property
    @pulumi.getter(name="containerClusterFeatureId")
    def container_cluster_feature_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_cluster_feature_id")

    @container_cluster_feature_id.setter
    def container_cluster_feature_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_cluster_feature_id", value)

    @_builtins.property
    @pulumi.getter(name="privateServiceEndpoint")
    def private_service_endpoint(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "private_service_endpoint")

    @private_service_endpoint.setter
    def private_service_endpoint(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "private_service_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="privateServiceEndpointUrl")
    def private_service_endpoint_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "private_service_endpoint_url")

    @private_service_endpoint_url.setter
    def private_service_endpoint_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_service_endpoint_url", value)

    @_builtins.property
    @pulumi.getter(name="publicServiceEndpoint")
    def public_service_endpoint(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "public_service_endpoint")

    @public_service_endpoint.setter
    def public_service_endpoint(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "public_service_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="publicServiceEndpointUrl")
    def public_service_endpoint_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "public_service_endpoint_url")

    @public_service_endpoint_url.setter
    def public_service_endpoint_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_service_endpoint_url", value)

    @_builtins.property
    @pulumi.getter(name="refreshApiServers")
    def refresh_api_servers(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Boolean value true of API server to be refreshed in K8S cluster
        """
        return pulumi.get(self, "refresh_api_servers")

    @refresh_api_servers.setter
    def refresh_api_servers(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "refresh_api_servers", value)

    @_builtins.property
    @pulumi.getter(name="reloadWorkers")
    def reload_workers(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Boolean value set true if worker nodes to be reloaded
        """
        return pulumi.get(self, "reload_workers")

    @reload_workers.setter
    def reload_workers(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "reload_workers", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ContainerClusterFeatureTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ContainerClusterFeatureTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/containerClusterFeature:ContainerClusterFeature")
class ContainerClusterFeature(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 container_cluster_feature_id: Optional[pulumi.Input[_builtins.str]] = None,
                 private_service_endpoint: Optional[pulumi.Input[_builtins.bool]] = None,
                 public_service_endpoint: Optional[pulumi.Input[_builtins.bool]] = None,
                 refresh_api_servers: Optional[pulumi.Input[_builtins.bool]] = None,
                 reload_workers: Optional[pulumi.Input[_builtins.bool]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['ContainerClusterFeatureTimeoutsArgs', 'ContainerClusterFeatureTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a ContainerClusterFeature resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster: Cluster name of ID
        :param pulumi.Input[_builtins.bool] refresh_api_servers: Boolean value true of API server to be refreshed in K8S cluster
        :param pulumi.Input[_builtins.bool] reload_workers: Boolean value set true if worker nodes to be reloaded
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ContainerClusterFeatureArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ContainerClusterFeature resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ContainerClusterFeatureArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ContainerClusterFeatureArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 container_cluster_feature_id: Optional[pulumi.Input[_builtins.str]] = None,
                 private_service_endpoint: Optional[pulumi.Input[_builtins.bool]] = None,
                 public_service_endpoint: Optional[pulumi.Input[_builtins.bool]] = None,
                 refresh_api_servers: Optional[pulumi.Input[_builtins.bool]] = None,
                 reload_workers: Optional[pulumi.Input[_builtins.bool]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['ContainerClusterFeatureTimeoutsArgs', 'ContainerClusterFeatureTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ContainerClusterFeatureArgs.__new__(ContainerClusterFeatureArgs)

            if cluster is None and not opts.urn:
                raise TypeError("Missing required property 'cluster'")
            __props__.__dict__["cluster"] = cluster
            __props__.__dict__["container_cluster_feature_id"] = container_cluster_feature_id
            __props__.__dict__["private_service_endpoint"] = private_service_endpoint
            __props__.__dict__["public_service_endpoint"] = public_service_endpoint
            __props__.__dict__["refresh_api_servers"] = refresh_api_servers
            __props__.__dict__["reload_workers"] = reload_workers
            __props__.__dict__["resource_group_id"] = resource_group_id
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["private_service_endpoint_url"] = None
            __props__.__dict__["public_service_endpoint_url"] = None
        super(ContainerClusterFeature, __self__).__init__(
            'ibm:index/containerClusterFeature:ContainerClusterFeature',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster: Optional[pulumi.Input[_builtins.str]] = None,
            container_cluster_feature_id: Optional[pulumi.Input[_builtins.str]] = None,
            private_service_endpoint: Optional[pulumi.Input[_builtins.bool]] = None,
            private_service_endpoint_url: Optional[pulumi.Input[_builtins.str]] = None,
            public_service_endpoint: Optional[pulumi.Input[_builtins.bool]] = None,
            public_service_endpoint_url: Optional[pulumi.Input[_builtins.str]] = None,
            refresh_api_servers: Optional[pulumi.Input[_builtins.bool]] = None,
            reload_workers: Optional[pulumi.Input[_builtins.bool]] = None,
            resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['ContainerClusterFeatureTimeoutsArgs', 'ContainerClusterFeatureTimeoutsArgsDict']]] = None) -> 'ContainerClusterFeature':
        """
        Get an existing ContainerClusterFeature resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster: Cluster name of ID
        :param pulumi.Input[_builtins.bool] refresh_api_servers: Boolean value true of API server to be refreshed in K8S cluster
        :param pulumi.Input[_builtins.bool] reload_workers: Boolean value set true if worker nodes to be reloaded
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ContainerClusterFeatureState.__new__(_ContainerClusterFeatureState)

        __props__.__dict__["cluster"] = cluster
        __props__.__dict__["container_cluster_feature_id"] = container_cluster_feature_id
        __props__.__dict__["private_service_endpoint"] = private_service_endpoint
        __props__.__dict__["private_service_endpoint_url"] = private_service_endpoint_url
        __props__.__dict__["public_service_endpoint"] = public_service_endpoint
        __props__.__dict__["public_service_endpoint_url"] = public_service_endpoint_url
        __props__.__dict__["refresh_api_servers"] = refresh_api_servers
        __props__.__dict__["reload_workers"] = reload_workers
        __props__.__dict__["resource_group_id"] = resource_group_id
        __props__.__dict__["timeouts"] = timeouts
        return ContainerClusterFeature(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> pulumi.Output[_builtins.str]:
        """
        Cluster name of ID
        """
        return pulumi.get(self, "cluster")

    @_builtins.property
    @pulumi.getter(name="containerClusterFeatureId")
    def container_cluster_feature_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "container_cluster_feature_id")

    @_builtins.property
    @pulumi.getter(name="privateServiceEndpoint")
    def private_service_endpoint(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "private_service_endpoint")

    @_builtins.property
    @pulumi.getter(name="privateServiceEndpointUrl")
    def private_service_endpoint_url(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "private_service_endpoint_url")

    @_builtins.property
    @pulumi.getter(name="publicServiceEndpoint")
    def public_service_endpoint(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "public_service_endpoint")

    @_builtins.property
    @pulumi.getter(name="publicServiceEndpointUrl")
    def public_service_endpoint_url(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "public_service_endpoint_url")

    @_builtins.property
    @pulumi.getter(name="refreshApiServers")
    def refresh_api_servers(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Boolean value true of API server to be refreshed in K8S cluster
        """
        return pulumi.get(self, "refresh_api_servers")

    @_builtins.property
    @pulumi.getter(name="reloadWorkers")
    def reload_workers(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Boolean value set true if worker nodes to be reloaded
        """
        return pulumi.get(self, "reload_workers")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.ContainerClusterFeatureTimeouts']]:
        return pulumi.get(self, "timeouts")

