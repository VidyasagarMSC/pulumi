# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetBackupRecoverySourceRegistrationsResult',
    'AwaitableGetBackupRecoverySourceRegistrationsResult',
    'get_backup_recovery_source_registrations',
    'get_backup_recovery_source_registrations_output',
]

@pulumi.output_type
class GetBackupRecoverySourceRegistrationsResult:
    """
    A collection of values returned by getBackupRecoverySourceRegistrations.
    """
    def __init__(__self__, encryption_key=None, id=None, ids=None, ignore_tenant_migration_in_progress_check=None, include_external_metadata=None, include_source_credentials=None, registrations=None, use_cached_data=None, x_ibm_tenant_id=None):
        if encryption_key and not isinstance(encryption_key, str):
            raise TypeError("Expected argument 'encryption_key' to be a str")
        pulumi.set(__self__, "encryption_key", encryption_key)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if ignore_tenant_migration_in_progress_check and not isinstance(ignore_tenant_migration_in_progress_check, bool):
            raise TypeError("Expected argument 'ignore_tenant_migration_in_progress_check' to be a bool")
        pulumi.set(__self__, "ignore_tenant_migration_in_progress_check", ignore_tenant_migration_in_progress_check)
        if include_external_metadata and not isinstance(include_external_metadata, bool):
            raise TypeError("Expected argument 'include_external_metadata' to be a bool")
        pulumi.set(__self__, "include_external_metadata", include_external_metadata)
        if include_source_credentials and not isinstance(include_source_credentials, bool):
            raise TypeError("Expected argument 'include_source_credentials' to be a bool")
        pulumi.set(__self__, "include_source_credentials", include_source_credentials)
        if registrations and not isinstance(registrations, list):
            raise TypeError("Expected argument 'registrations' to be a list")
        pulumi.set(__self__, "registrations", registrations)
        if use_cached_data and not isinstance(use_cached_data, bool):
            raise TypeError("Expected argument 'use_cached_data' to be a bool")
        pulumi.set(__self__, "use_cached_data", use_cached_data)
        if x_ibm_tenant_id and not isinstance(x_ibm_tenant_id, str):
            raise TypeError("Expected argument 'x_ibm_tenant_id' to be a str")
        pulumi.set(__self__, "x_ibm_tenant_id", x_ibm_tenant_id)

    @_builtins.property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "encryption_key")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[_builtins.float]]:
        return pulumi.get(self, "ids")

    @_builtins.property
    @pulumi.getter(name="ignoreTenantMigrationInProgressCheck")
    def ignore_tenant_migration_in_progress_check(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "ignore_tenant_migration_in_progress_check")

    @_builtins.property
    @pulumi.getter(name="includeExternalMetadata")
    def include_external_metadata(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "include_external_metadata")

    @_builtins.property
    @pulumi.getter(name="includeSourceCredentials")
    def include_source_credentials(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "include_source_credentials")

    @_builtins.property
    @pulumi.getter
    def registrations(self) -> Sequence['outputs.GetBackupRecoverySourceRegistrationsRegistrationResult']:
        return pulumi.get(self, "registrations")

    @_builtins.property
    @pulumi.getter(name="useCachedData")
    def use_cached_data(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "use_cached_data")

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> _builtins.str:
        return pulumi.get(self, "x_ibm_tenant_id")


class AwaitableGetBackupRecoverySourceRegistrationsResult(GetBackupRecoverySourceRegistrationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupRecoverySourceRegistrationsResult(
            encryption_key=self.encryption_key,
            id=self.id,
            ids=self.ids,
            ignore_tenant_migration_in_progress_check=self.ignore_tenant_migration_in_progress_check,
            include_external_metadata=self.include_external_metadata,
            include_source_credentials=self.include_source_credentials,
            registrations=self.registrations,
            use_cached_data=self.use_cached_data,
            x_ibm_tenant_id=self.x_ibm_tenant_id)


def get_backup_recovery_source_registrations(encryption_key: Optional[_builtins.str] = None,
                                             id: Optional[_builtins.str] = None,
                                             ids: Optional[Sequence[_builtins.float]] = None,
                                             ignore_tenant_migration_in_progress_check: Optional[_builtins.bool] = None,
                                             include_external_metadata: Optional[_builtins.bool] = None,
                                             include_source_credentials: Optional[_builtins.bool] = None,
                                             use_cached_data: Optional[_builtins.bool] = None,
                                             x_ibm_tenant_id: Optional[_builtins.str] = None,
                                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupRecoverySourceRegistrationsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['encryptionKey'] = encryption_key
    __args__['id'] = id
    __args__['ids'] = ids
    __args__['ignoreTenantMigrationInProgressCheck'] = ignore_tenant_migration_in_progress_check
    __args__['includeExternalMetadata'] = include_external_metadata
    __args__['includeSourceCredentials'] = include_source_credentials
    __args__['useCachedData'] = use_cached_data
    __args__['xIbmTenantId'] = x_ibm_tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getBackupRecoverySourceRegistrations:getBackupRecoverySourceRegistrations', __args__, opts=opts, typ=GetBackupRecoverySourceRegistrationsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetBackupRecoverySourceRegistrationsResult(
        encryption_key=pulumi.get(__ret__, 'encryption_key'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        ignore_tenant_migration_in_progress_check=pulumi.get(__ret__, 'ignore_tenant_migration_in_progress_check'),
        include_external_metadata=pulumi.get(__ret__, 'include_external_metadata'),
        include_source_credentials=pulumi.get(__ret__, 'include_source_credentials'),
        registrations=pulumi.get(__ret__, 'registrations'),
        use_cached_data=pulumi.get(__ret__, 'use_cached_data'),
        x_ibm_tenant_id=pulumi.get(__ret__, 'x_ibm_tenant_id'))
def get_backup_recovery_source_registrations_output(encryption_key: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                    id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                    ids: Optional[pulumi.Input[Optional[Sequence[_builtins.float]]]] = None,
                                                    ignore_tenant_migration_in_progress_check: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                                    include_external_metadata: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                                    include_source_credentials: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                                    use_cached_data: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                                    x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBackupRecoverySourceRegistrationsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['encryptionKey'] = encryption_key
    __args__['id'] = id
    __args__['ids'] = ids
    __args__['ignoreTenantMigrationInProgressCheck'] = ignore_tenant_migration_in_progress_check
    __args__['includeExternalMetadata'] = include_external_metadata
    __args__['includeSourceCredentials'] = include_source_credentials
    __args__['useCachedData'] = use_cached_data
    __args__['xIbmTenantId'] = x_ibm_tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getBackupRecoverySourceRegistrations:getBackupRecoverySourceRegistrations', __args__, opts=opts, typ=GetBackupRecoverySourceRegistrationsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetBackupRecoverySourceRegistrationsResult(
        encryption_key=pulumi.get(__response__, 'encryption_key'),
        id=pulumi.get(__response__, 'id'),
        ids=pulumi.get(__response__, 'ids'),
        ignore_tenant_migration_in_progress_check=pulumi.get(__response__, 'ignore_tenant_migration_in_progress_check'),
        include_external_metadata=pulumi.get(__response__, 'include_external_metadata'),
        include_source_credentials=pulumi.get(__response__, 'include_source_credentials'),
        registrations=pulumi.get(__response__, 'registrations'),
        use_cached_data=pulumi.get(__response__, 'use_cached_data'),
        x_ibm_tenant_id=pulumi.get(__response__, 'x_ibm_tenant_id')))
