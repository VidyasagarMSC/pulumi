# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsSnapshotsResult',
    'AwaitableGetIsSnapshotsResult',
    'get_is_snapshots',
    'get_is_snapshots_output',
]

@pulumi.output_type
class GetIsSnapshotsResult:
    """
    A collection of values returned by getIsSnapshots.
    """
    def __init__(__self__, backup_policy_plan_id=None, id=None, name=None, resource_group=None, snapshot_consistency_group_crn=None, snapshot_consistency_group_id=None, snapshot_copies_crn=None, snapshot_copies_id=None, snapshot_copies_name=None, snapshot_copies_remote_region_name=None, snapshot_source_volume_remote_region_name=None, snapshots=None, source_image=None, source_snapshot_id=None, source_snapshot_remote_region_name=None, source_volume=None, tag=None):
        if backup_policy_plan_id and not isinstance(backup_policy_plan_id, str):
            raise TypeError("Expected argument 'backup_policy_plan_id' to be a str")
        pulumi.set(__self__, "backup_policy_plan_id", backup_policy_plan_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resource_group and not isinstance(resource_group, str):
            raise TypeError("Expected argument 'resource_group' to be a str")
        pulumi.set(__self__, "resource_group", resource_group)
        if snapshot_consistency_group_crn and not isinstance(snapshot_consistency_group_crn, str):
            raise TypeError("Expected argument 'snapshot_consistency_group_crn' to be a str")
        pulumi.set(__self__, "snapshot_consistency_group_crn", snapshot_consistency_group_crn)
        if snapshot_consistency_group_id and not isinstance(snapshot_consistency_group_id, str):
            raise TypeError("Expected argument 'snapshot_consistency_group_id' to be a str")
        pulumi.set(__self__, "snapshot_consistency_group_id", snapshot_consistency_group_id)
        if snapshot_copies_crn and not isinstance(snapshot_copies_crn, str):
            raise TypeError("Expected argument 'snapshot_copies_crn' to be a str")
        pulumi.set(__self__, "snapshot_copies_crn", snapshot_copies_crn)
        if snapshot_copies_id and not isinstance(snapshot_copies_id, str):
            raise TypeError("Expected argument 'snapshot_copies_id' to be a str")
        pulumi.set(__self__, "snapshot_copies_id", snapshot_copies_id)
        if snapshot_copies_name and not isinstance(snapshot_copies_name, str):
            raise TypeError("Expected argument 'snapshot_copies_name' to be a str")
        pulumi.set(__self__, "snapshot_copies_name", snapshot_copies_name)
        if snapshot_copies_remote_region_name and not isinstance(snapshot_copies_remote_region_name, str):
            raise TypeError("Expected argument 'snapshot_copies_remote_region_name' to be a str")
        pulumi.set(__self__, "snapshot_copies_remote_region_name", snapshot_copies_remote_region_name)
        if snapshot_source_volume_remote_region_name and not isinstance(snapshot_source_volume_remote_region_name, str):
            raise TypeError("Expected argument 'snapshot_source_volume_remote_region_name' to be a str")
        pulumi.set(__self__, "snapshot_source_volume_remote_region_name", snapshot_source_volume_remote_region_name)
        if snapshots and not isinstance(snapshots, list):
            raise TypeError("Expected argument 'snapshots' to be a list")
        pulumi.set(__self__, "snapshots", snapshots)
        if source_image and not isinstance(source_image, str):
            raise TypeError("Expected argument 'source_image' to be a str")
        pulumi.set(__self__, "source_image", source_image)
        if source_snapshot_id and not isinstance(source_snapshot_id, str):
            raise TypeError("Expected argument 'source_snapshot_id' to be a str")
        pulumi.set(__self__, "source_snapshot_id", source_snapshot_id)
        if source_snapshot_remote_region_name and not isinstance(source_snapshot_remote_region_name, str):
            raise TypeError("Expected argument 'source_snapshot_remote_region_name' to be a str")
        pulumi.set(__self__, "source_snapshot_remote_region_name", source_snapshot_remote_region_name)
        if source_volume and not isinstance(source_volume, str):
            raise TypeError("Expected argument 'source_volume' to be a str")
        pulumi.set(__self__, "source_volume", source_volume)
        if tag and not isinstance(tag, str):
            raise TypeError("Expected argument 'tag' to be a str")
        pulumi.set(__self__, "tag", tag)

    @_builtins.property
    @pulumi.getter(name="backupPolicyPlanId")
    def backup_policy_plan_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "backup_policy_plan_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="snapshotConsistencyGroupCrn")
    def snapshot_consistency_group_crn(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "snapshot_consistency_group_crn")

    @_builtins.property
    @pulumi.getter(name="snapshotConsistencyGroupId")
    def snapshot_consistency_group_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "snapshot_consistency_group_id")

    @_builtins.property
    @pulumi.getter(name="snapshotCopiesCrn")
    def snapshot_copies_crn(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "snapshot_copies_crn")

    @_builtins.property
    @pulumi.getter(name="snapshotCopiesId")
    def snapshot_copies_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "snapshot_copies_id")

    @_builtins.property
    @pulumi.getter(name="snapshotCopiesName")
    def snapshot_copies_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "snapshot_copies_name")

    @_builtins.property
    @pulumi.getter(name="snapshotCopiesRemoteRegionName")
    def snapshot_copies_remote_region_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "snapshot_copies_remote_region_name")

    @_builtins.property
    @pulumi.getter(name="snapshotSourceVolumeRemoteRegionName")
    def snapshot_source_volume_remote_region_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "snapshot_source_volume_remote_region_name")

    @_builtins.property
    @pulumi.getter
    def snapshots(self) -> Sequence['outputs.GetIsSnapshotsSnapshotResult']:
        return pulumi.get(self, "snapshots")

    @_builtins.property
    @pulumi.getter(name="sourceImage")
    def source_image(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "source_image")

    @_builtins.property
    @pulumi.getter(name="sourceSnapshotId")
    def source_snapshot_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "source_snapshot_id")

    @_builtins.property
    @pulumi.getter(name="sourceSnapshotRemoteRegionName")
    def source_snapshot_remote_region_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "source_snapshot_remote_region_name")

    @_builtins.property
    @pulumi.getter(name="sourceVolume")
    def source_volume(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "source_volume")

    @_builtins.property
    @pulumi.getter
    def tag(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "tag")


class AwaitableGetIsSnapshotsResult(GetIsSnapshotsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsSnapshotsResult(
            backup_policy_plan_id=self.backup_policy_plan_id,
            id=self.id,
            name=self.name,
            resource_group=self.resource_group,
            snapshot_consistency_group_crn=self.snapshot_consistency_group_crn,
            snapshot_consistency_group_id=self.snapshot_consistency_group_id,
            snapshot_copies_crn=self.snapshot_copies_crn,
            snapshot_copies_id=self.snapshot_copies_id,
            snapshot_copies_name=self.snapshot_copies_name,
            snapshot_copies_remote_region_name=self.snapshot_copies_remote_region_name,
            snapshot_source_volume_remote_region_name=self.snapshot_source_volume_remote_region_name,
            snapshots=self.snapshots,
            source_image=self.source_image,
            source_snapshot_id=self.source_snapshot_id,
            source_snapshot_remote_region_name=self.source_snapshot_remote_region_name,
            source_volume=self.source_volume,
            tag=self.tag)


def get_is_snapshots(backup_policy_plan_id: Optional[_builtins.str] = None,
                     id: Optional[_builtins.str] = None,
                     name: Optional[_builtins.str] = None,
                     resource_group: Optional[_builtins.str] = None,
                     snapshot_consistency_group_crn: Optional[_builtins.str] = None,
                     snapshot_consistency_group_id: Optional[_builtins.str] = None,
                     snapshot_copies_crn: Optional[_builtins.str] = None,
                     snapshot_copies_id: Optional[_builtins.str] = None,
                     snapshot_copies_name: Optional[_builtins.str] = None,
                     snapshot_copies_remote_region_name: Optional[_builtins.str] = None,
                     snapshot_source_volume_remote_region_name: Optional[_builtins.str] = None,
                     source_image: Optional[_builtins.str] = None,
                     source_snapshot_id: Optional[_builtins.str] = None,
                     source_snapshot_remote_region_name: Optional[_builtins.str] = None,
                     source_volume: Optional[_builtins.str] = None,
                     tag: Optional[_builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsSnapshotsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['backupPolicyPlanId'] = backup_policy_plan_id
    __args__['id'] = id
    __args__['name'] = name
    __args__['resourceGroup'] = resource_group
    __args__['snapshotConsistencyGroupCrn'] = snapshot_consistency_group_crn
    __args__['snapshotConsistencyGroupId'] = snapshot_consistency_group_id
    __args__['snapshotCopiesCrn'] = snapshot_copies_crn
    __args__['snapshotCopiesId'] = snapshot_copies_id
    __args__['snapshotCopiesName'] = snapshot_copies_name
    __args__['snapshotCopiesRemoteRegionName'] = snapshot_copies_remote_region_name
    __args__['snapshotSourceVolumeRemoteRegionName'] = snapshot_source_volume_remote_region_name
    __args__['sourceImage'] = source_image
    __args__['sourceSnapshotId'] = source_snapshot_id
    __args__['sourceSnapshotRemoteRegionName'] = source_snapshot_remote_region_name
    __args__['sourceVolume'] = source_volume
    __args__['tag'] = tag
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsSnapshots:getIsSnapshots', __args__, opts=opts, typ=GetIsSnapshotsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsSnapshotsResult(
        backup_policy_plan_id=pulumi.get(__ret__, 'backup_policy_plan_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        resource_group=pulumi.get(__ret__, 'resource_group'),
        snapshot_consistency_group_crn=pulumi.get(__ret__, 'snapshot_consistency_group_crn'),
        snapshot_consistency_group_id=pulumi.get(__ret__, 'snapshot_consistency_group_id'),
        snapshot_copies_crn=pulumi.get(__ret__, 'snapshot_copies_crn'),
        snapshot_copies_id=pulumi.get(__ret__, 'snapshot_copies_id'),
        snapshot_copies_name=pulumi.get(__ret__, 'snapshot_copies_name'),
        snapshot_copies_remote_region_name=pulumi.get(__ret__, 'snapshot_copies_remote_region_name'),
        snapshot_source_volume_remote_region_name=pulumi.get(__ret__, 'snapshot_source_volume_remote_region_name'),
        snapshots=pulumi.get(__ret__, 'snapshots'),
        source_image=pulumi.get(__ret__, 'source_image'),
        source_snapshot_id=pulumi.get(__ret__, 'source_snapshot_id'),
        source_snapshot_remote_region_name=pulumi.get(__ret__, 'source_snapshot_remote_region_name'),
        source_volume=pulumi.get(__ret__, 'source_volume'),
        tag=pulumi.get(__ret__, 'tag'))
def get_is_snapshots_output(backup_policy_plan_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            resource_group: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            snapshot_consistency_group_crn: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            snapshot_consistency_group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            snapshot_copies_crn: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            snapshot_copies_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            snapshot_copies_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            snapshot_copies_remote_region_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            snapshot_source_volume_remote_region_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            source_image: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            source_snapshot_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            source_snapshot_remote_region_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            source_volume: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            tag: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsSnapshotsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['backupPolicyPlanId'] = backup_policy_plan_id
    __args__['id'] = id
    __args__['name'] = name
    __args__['resourceGroup'] = resource_group
    __args__['snapshotConsistencyGroupCrn'] = snapshot_consistency_group_crn
    __args__['snapshotConsistencyGroupId'] = snapshot_consistency_group_id
    __args__['snapshotCopiesCrn'] = snapshot_copies_crn
    __args__['snapshotCopiesId'] = snapshot_copies_id
    __args__['snapshotCopiesName'] = snapshot_copies_name
    __args__['snapshotCopiesRemoteRegionName'] = snapshot_copies_remote_region_name
    __args__['snapshotSourceVolumeRemoteRegionName'] = snapshot_source_volume_remote_region_name
    __args__['sourceImage'] = source_image
    __args__['sourceSnapshotId'] = source_snapshot_id
    __args__['sourceSnapshotRemoteRegionName'] = source_snapshot_remote_region_name
    __args__['sourceVolume'] = source_volume
    __args__['tag'] = tag
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsSnapshots:getIsSnapshots', __args__, opts=opts, typ=GetIsSnapshotsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsSnapshotsResult(
        backup_policy_plan_id=pulumi.get(__response__, 'backup_policy_plan_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        resource_group=pulumi.get(__response__, 'resource_group'),
        snapshot_consistency_group_crn=pulumi.get(__response__, 'snapshot_consistency_group_crn'),
        snapshot_consistency_group_id=pulumi.get(__response__, 'snapshot_consistency_group_id'),
        snapshot_copies_crn=pulumi.get(__response__, 'snapshot_copies_crn'),
        snapshot_copies_id=pulumi.get(__response__, 'snapshot_copies_id'),
        snapshot_copies_name=pulumi.get(__response__, 'snapshot_copies_name'),
        snapshot_copies_remote_region_name=pulumi.get(__response__, 'snapshot_copies_remote_region_name'),
        snapshot_source_volume_remote_region_name=pulumi.get(__response__, 'snapshot_source_volume_remote_region_name'),
        snapshots=pulumi.get(__response__, 'snapshots'),
        source_image=pulumi.get(__response__, 'source_image'),
        source_snapshot_id=pulumi.get(__response__, 'source_snapshot_id'),
        source_snapshot_remote_region_name=pulumi.get(__response__, 'source_snapshot_remote_region_name'),
        source_volume=pulumi.get(__response__, 'source_volume'),
        tag=pulumi.get(__response__, 'tag')))
