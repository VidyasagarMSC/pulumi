# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsVpnGatewayConnectionsResult',
    'AwaitableGetIsVpnGatewayConnectionsResult',
    'get_is_vpn_gateway_connections',
    'get_is_vpn_gateway_connections_output',
]

@pulumi.output_type
class GetIsVpnGatewayConnectionsResult:
    """
    A collection of values returned by getIsVpnGatewayConnections.
    """
    def __init__(__self__, connections=None, id=None, status=None, vpn_gateway=None):
        if connections and not isinstance(connections, list):
            raise TypeError("Expected argument 'connections' to be a list")
        pulumi.set(__self__, "connections", connections)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if vpn_gateway and not isinstance(vpn_gateway, str):
            raise TypeError("Expected argument 'vpn_gateway' to be a str")
        pulumi.set(__self__, "vpn_gateway", vpn_gateway)

    @_builtins.property
    @pulumi.getter
    def connections(self) -> Sequence['outputs.GetIsVpnGatewayConnectionsConnectionResult']:
        return pulumi.get(self, "connections")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="vpnGateway")
    def vpn_gateway(self) -> _builtins.str:
        return pulumi.get(self, "vpn_gateway")


class AwaitableGetIsVpnGatewayConnectionsResult(GetIsVpnGatewayConnectionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsVpnGatewayConnectionsResult(
            connections=self.connections,
            id=self.id,
            status=self.status,
            vpn_gateway=self.vpn_gateway)


def get_is_vpn_gateway_connections(id: Optional[_builtins.str] = None,
                                   status: Optional[_builtins.str] = None,
                                   vpn_gateway: Optional[_builtins.str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsVpnGatewayConnectionsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['status'] = status
    __args__['vpnGateway'] = vpn_gateway
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsVpnGatewayConnections:getIsVpnGatewayConnections', __args__, opts=opts, typ=GetIsVpnGatewayConnectionsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsVpnGatewayConnectionsResult(
        connections=pulumi.get(__ret__, 'connections'),
        id=pulumi.get(__ret__, 'id'),
        status=pulumi.get(__ret__, 'status'),
        vpn_gateway=pulumi.get(__ret__, 'vpn_gateway'))
def get_is_vpn_gateway_connections_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          vpn_gateway: Optional[pulumi.Input[_builtins.str]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsVpnGatewayConnectionsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['status'] = status
    __args__['vpnGateway'] = vpn_gateway
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsVpnGatewayConnections:getIsVpnGatewayConnections', __args__, opts=opts, typ=GetIsVpnGatewayConnectionsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsVpnGatewayConnectionsResult(
        connections=pulumi.get(__response__, 'connections'),
        id=pulumi.get(__response__, 'id'),
        status=pulumi.get(__response__, 'status'),
        vpn_gateway=pulumi.get(__response__, 'vpn_gateway')))
