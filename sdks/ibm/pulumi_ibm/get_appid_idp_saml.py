# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetAppidIdpSamlResult',
    'AwaitableGetAppidIdpSamlResult',
    'get_appid_idp_saml',
    'get_appid_idp_saml_output',
]

@pulumi.output_type
class GetAppidIdpSamlResult:
    """
    A collection of values returned by getAppidIdpSaml.
    """
    def __init__(__self__, configs=None, id=None, is_active=None, tenant_id=None):
        if configs and not isinstance(configs, list):
            raise TypeError("Expected argument 'configs' to be a list")
        pulumi.set(__self__, "configs", configs)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_active and not isinstance(is_active, bool):
            raise TypeError("Expected argument 'is_active' to be a bool")
        pulumi.set(__self__, "is_active", is_active)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)

    @_builtins.property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.GetAppidIdpSamlConfigResult']:
        return pulumi.get(self, "configs")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isActive")
    def is_active(self) -> _builtins.bool:
        return pulumi.get(self, "is_active")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.str:
        return pulumi.get(self, "tenant_id")


class AwaitableGetAppidIdpSamlResult(GetAppidIdpSamlResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppidIdpSamlResult(
            configs=self.configs,
            id=self.id,
            is_active=self.is_active,
            tenant_id=self.tenant_id)


def get_appid_idp_saml(id: Optional[_builtins.str] = None,
                       tenant_id: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppidIdpSamlResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getAppidIdpSaml:getAppidIdpSaml', __args__, opts=opts, typ=GetAppidIdpSamlResult, package_ref=_utilities.get_package()).value

    return AwaitableGetAppidIdpSamlResult(
        configs=pulumi.get(__ret__, 'configs'),
        id=pulumi.get(__ret__, 'id'),
        is_active=pulumi.get(__ret__, 'is_active'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'))
def get_appid_idp_saml_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppidIdpSamlResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getAppidIdpSaml:getAppidIdpSaml', __args__, opts=opts, typ=GetAppidIdpSamlResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetAppidIdpSamlResult(
        configs=pulumi.get(__response__, 'configs'),
        id=pulumi.get(__response__, 'id'),
        is_active=pulumi.get(__response__, 'is_active'),
        tenant_id=pulumi.get(__response__, 'tenant_id')))
