# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetIsReservationResult',
    'AwaitableGetIsReservationResult',
    'get_is_reservation',
    'get_is_reservation_output',
]

@pulumi.output_type
class GetIsReservationResult:
    """
    A collection of values returned by getIsReservation.
    """
    def __init__(__self__, affinity_policy=None, capacities=None, committed_uses=None, created_at=None, crn=None, href=None, id=None, identifier=None, lifecycle_state=None, name=None, profiles=None, resource_groups=None, resource_type=None, status=None, status_reasons=None, zone=None):
        if affinity_policy and not isinstance(affinity_policy, str):
            raise TypeError("Expected argument 'affinity_policy' to be a str")
        pulumi.set(__self__, "affinity_policy", affinity_policy)
        if capacities and not isinstance(capacities, list):
            raise TypeError("Expected argument 'capacities' to be a list")
        pulumi.set(__self__, "capacities", capacities)
        if committed_uses and not isinstance(committed_uses, list):
            raise TypeError("Expected argument 'committed_uses' to be a list")
        pulumi.set(__self__, "committed_uses", committed_uses)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identifier and not isinstance(identifier, str):
            raise TypeError("Expected argument 'identifier' to be a str")
        pulumi.set(__self__, "identifier", identifier)
        if lifecycle_state and not isinstance(lifecycle_state, str):
            raise TypeError("Expected argument 'lifecycle_state' to be a str")
        pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if profiles and not isinstance(profiles, list):
            raise TypeError("Expected argument 'profiles' to be a list")
        pulumi.set(__self__, "profiles", profiles)
        if resource_groups and not isinstance(resource_groups, list):
            raise TypeError("Expected argument 'resource_groups' to be a list")
        pulumi.set(__self__, "resource_groups", resource_groups)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if status_reasons and not isinstance(status_reasons, list):
            raise TypeError("Expected argument 'status_reasons' to be a list")
        pulumi.set(__self__, "status_reasons", status_reasons)
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter(name="affinityPolicy")
    def affinity_policy(self) -> _builtins.str:
        return pulumi.get(self, "affinity_policy")

    @_builtins.property
    @pulumi.getter
    def capacities(self) -> Optional[Sequence['outputs.GetIsReservationCapacityResult']]:
        return pulumi.get(self, "capacities")

    @_builtins.property
    @pulumi.getter(name="committedUses")
    def committed_uses(self) -> Optional[Sequence['outputs.GetIsReservationCommittedUseResult']]:
        return pulumi.get(self, "committed_uses")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def identifier(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "identifier")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> _builtins.str:
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def profiles(self) -> Sequence['outputs.GetIsReservationProfileResult']:
        return pulumi.get(self, "profiles")

    @_builtins.property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Sequence['outputs.GetIsReservationResourceGroupResult']:
        return pulumi.get(self, "resource_groups")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> Sequence['outputs.GetIsReservationStatusReasonResult']:
        return pulumi.get(self, "status_reasons")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> _builtins.str:
        return pulumi.get(self, "zone")


class AwaitableGetIsReservationResult(GetIsReservationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsReservationResult(
            affinity_policy=self.affinity_policy,
            capacities=self.capacities,
            committed_uses=self.committed_uses,
            created_at=self.created_at,
            crn=self.crn,
            href=self.href,
            id=self.id,
            identifier=self.identifier,
            lifecycle_state=self.lifecycle_state,
            name=self.name,
            profiles=self.profiles,
            resource_groups=self.resource_groups,
            resource_type=self.resource_type,
            status=self.status,
            status_reasons=self.status_reasons,
            zone=self.zone)


def get_is_reservation(capacities: Optional[Sequence[Union['GetIsReservationCapacityArgs', 'GetIsReservationCapacityArgsDict']]] = None,
                       committed_uses: Optional[Sequence[Union['GetIsReservationCommittedUseArgs', 'GetIsReservationCommittedUseArgsDict']]] = None,
                       identifier: Optional[_builtins.str] = None,
                       name: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsReservationResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['capacities'] = capacities
    __args__['committedUses'] = committed_uses
    __args__['identifier'] = identifier
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsReservation:getIsReservation', __args__, opts=opts, typ=GetIsReservationResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsReservationResult(
        affinity_policy=pulumi.get(__ret__, 'affinity_policy'),
        capacities=pulumi.get(__ret__, 'capacities'),
        committed_uses=pulumi.get(__ret__, 'committed_uses'),
        created_at=pulumi.get(__ret__, 'created_at'),
        crn=pulumi.get(__ret__, 'crn'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        identifier=pulumi.get(__ret__, 'identifier'),
        lifecycle_state=pulumi.get(__ret__, 'lifecycle_state'),
        name=pulumi.get(__ret__, 'name'),
        profiles=pulumi.get(__ret__, 'profiles'),
        resource_groups=pulumi.get(__ret__, 'resource_groups'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        status=pulumi.get(__ret__, 'status'),
        status_reasons=pulumi.get(__ret__, 'status_reasons'),
        zone=pulumi.get(__ret__, 'zone'))
def get_is_reservation_output(capacities: Optional[pulumi.Input[Optional[Sequence[Union['GetIsReservationCapacityArgs', 'GetIsReservationCapacityArgsDict']]]]] = None,
                              committed_uses: Optional[pulumi.Input[Optional[Sequence[Union['GetIsReservationCommittedUseArgs', 'GetIsReservationCommittedUseArgsDict']]]]] = None,
                              identifier: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsReservationResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['capacities'] = capacities
    __args__['committedUses'] = committed_uses
    __args__['identifier'] = identifier
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsReservation:getIsReservation', __args__, opts=opts, typ=GetIsReservationResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsReservationResult(
        affinity_policy=pulumi.get(__response__, 'affinity_policy'),
        capacities=pulumi.get(__response__, 'capacities'),
        committed_uses=pulumi.get(__response__, 'committed_uses'),
        created_at=pulumi.get(__response__, 'created_at'),
        crn=pulumi.get(__response__, 'crn'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        identifier=pulumi.get(__response__, 'identifier'),
        lifecycle_state=pulumi.get(__response__, 'lifecycle_state'),
        name=pulumi.get(__response__, 'name'),
        profiles=pulumi.get(__response__, 'profiles'),
        resource_groups=pulumi.get(__response__, 'resource_groups'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        status=pulumi.get(__response__, 'status'),
        status_reasons=pulumi.get(__response__, 'status_reasons'),
        zone=pulumi.get(__response__, 'zone')))
