# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIamPolicyAssignmentsResult',
    'AwaitableGetIamPolicyAssignmentsResult',
    'get_iam_policy_assignments',
    'get_iam_policy_assignments_output',
]

@pulumi.output_type
class GetIamPolicyAssignmentsResult:
    """
    A collection of values returned by getIamPolicyAssignments.
    """
    def __init__(__self__, accept_language=None, assignments=None, id=None, template_id=None, template_version=None, version=None):
        if accept_language and not isinstance(accept_language, str):
            raise TypeError("Expected argument 'accept_language' to be a str")
        pulumi.set(__self__, "accept_language", accept_language)
        if assignments and not isinstance(assignments, list):
            raise TypeError("Expected argument 'assignments' to be a list")
        pulumi.set(__self__, "assignments", assignments)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if template_id and not isinstance(template_id, str):
            raise TypeError("Expected argument 'template_id' to be a str")
        pulumi.set(__self__, "template_id", template_id)
        if template_version and not isinstance(template_version, str):
            raise TypeError("Expected argument 'template_version' to be a str")
        pulumi.set(__self__, "template_version", template_version)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="acceptLanguage")
    def accept_language(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "accept_language")

    @_builtins.property
    @pulumi.getter
    def assignments(self) -> Sequence['outputs.GetIamPolicyAssignmentsAssignmentResult']:
        return pulumi.get(self, "assignments")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "template_id")

    @_builtins.property
    @pulumi.getter(name="templateVersion")
    def template_version(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "template_version")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "version")


class AwaitableGetIamPolicyAssignmentsResult(GetIamPolicyAssignmentsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamPolicyAssignmentsResult(
            accept_language=self.accept_language,
            assignments=self.assignments,
            id=self.id,
            template_id=self.template_id,
            template_version=self.template_version,
            version=self.version)


def get_iam_policy_assignments(accept_language: Optional[_builtins.str] = None,
                               id: Optional[_builtins.str] = None,
                               template_id: Optional[_builtins.str] = None,
                               template_version: Optional[_builtins.str] = None,
                               version: Optional[_builtins.str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamPolicyAssignmentsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['acceptLanguage'] = accept_language
    __args__['id'] = id
    __args__['templateId'] = template_id
    __args__['templateVersion'] = template_version
    __args__['version'] = version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIamPolicyAssignments:getIamPolicyAssignments', __args__, opts=opts, typ=GetIamPolicyAssignmentsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIamPolicyAssignmentsResult(
        accept_language=pulumi.get(__ret__, 'accept_language'),
        assignments=pulumi.get(__ret__, 'assignments'),
        id=pulumi.get(__ret__, 'id'),
        template_id=pulumi.get(__ret__, 'template_id'),
        template_version=pulumi.get(__ret__, 'template_version'),
        version=pulumi.get(__ret__, 'version'))
def get_iam_policy_assignments_output(accept_language: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      template_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      template_version: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      version: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamPolicyAssignmentsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['acceptLanguage'] = accept_language
    __args__['id'] = id
    __args__['templateId'] = template_id
    __args__['templateVersion'] = template_version
    __args__['version'] = version
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIamPolicyAssignments:getIamPolicyAssignments', __args__, opts=opts, typ=GetIamPolicyAssignmentsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIamPolicyAssignmentsResult(
        accept_language=pulumi.get(__response__, 'accept_language'),
        assignments=pulumi.get(__response__, 'assignments'),
        id=pulumi.get(__response__, 'id'),
        template_id=pulumi.get(__response__, 'template_id'),
        template_version=pulumi.get(__response__, 'template_version'),
        version=pulumi.get(__response__, 'version')))
