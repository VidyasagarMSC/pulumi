# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SatelliteEndpointArgs', 'SatelliteEndpoint']

@pulumi.input_type
class SatelliteEndpointArgs:
    def __init__(__self__, *,
                 client_protocol: pulumi.Input[_builtins.str],
                 connection_type: pulumi.Input[_builtins.str],
                 display_name: pulumi.Input[_builtins.str],
                 location: pulumi.Input[_builtins.str],
                 server_host: pulumi.Input[_builtins.str],
                 server_port: pulumi.Input[_builtins.float],
                 certs: Optional[pulumi.Input['SatelliteEndpointCertsArgs']] = None,
                 client_mutual_auth: Optional[pulumi.Input[_builtins.bool]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 reject_unauth: Optional[pulumi.Input[_builtins.bool]] = None,
                 satellite_endpoint_id: Optional[pulumi.Input[_builtins.str]] = None,
                 server_mutual_auth: Optional[pulumi.Input[_builtins.bool]] = None,
                 server_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 sni: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a SatelliteEndpoint resource.
        :param pulumi.Input[_builtins.str] client_protocol: The protocol in the client application side.
        :param pulumi.Input[_builtins.str] connection_type: The type of the endpoint.
        :param pulumi.Input[_builtins.str] display_name: The display name of the endpoint. Endpoint names must start with a letter and end with an alphanumeric character, can
               contain letters, numbers, and hyphen (-), and must be 63 characters or fewer.
        :param pulumi.Input[_builtins.str] location: The Location ID.
        :param pulumi.Input[_builtins.str] server_host: The host name or IP address of the server endpoint. For 'http-tunnel' protocol, server_host can start with '*.' , which
               means a wildcard to it's sub domains. Such as '*.example.com' can accept request to 'api.example.com' and
               'www.example.com'.
        :param pulumi.Input[_builtins.float] server_port: The port number of the server endpoint. For 'http-tunnel' protocol, server_port can be 0, which means any port. Such as
               0 is good for 80 (http) and 443 (https).
        :param pulumi.Input['SatelliteEndpointCertsArgs'] certs: The certs.
        :param pulumi.Input[_builtins.bool] client_mutual_auth: Whether enable mutual auth in the client application side, when client_protocol is 'tls' or 'https', this field is
               required.
        :param pulumi.Input[_builtins.str] created_by: The service or person who created the endpoint. Must be 1000 characters or fewer.
        :param pulumi.Input[_builtins.bool] reject_unauth: Whether reject any connection to the server application which is not authorized with the list of supplied CAs in the
               fields certs.server_cert.
        :param pulumi.Input[_builtins.bool] server_mutual_auth: Whether enable mutual auth in the server application side, when client_protocol is 'tls', this field is required.
        :param pulumi.Input[_builtins.str] server_protocol: The protocol in the server application side. This parameter will change to default value if it is omitted even when
               using PATCH API. If client_protocol is 'udp', server_protocol must be 'udp'. If client_protocol is 'tcp'/'http',
               server_protocol could be 'tcp'/'tls' and default to 'tcp'. If client_protocol is 'tls'/'https', server_protocol could be
               'tcp'/'tls' and default to 'tls'. If client_protocol is 'http-tunnel', server_protocol must be 'tcp'.
        :param pulumi.Input[_builtins.str] sni: The server name indicator (SNI) which used to connect to the server endpoint. Only useful if server side requires SNI.
        :param pulumi.Input[_builtins.float] timeout: The inactivity timeout in the Endpoint side.
        """
        pulumi.set(__self__, "client_protocol", client_protocol)
        pulumi.set(__self__, "connection_type", connection_type)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "server_host", server_host)
        pulumi.set(__self__, "server_port", server_port)
        if certs is not None:
            pulumi.set(__self__, "certs", certs)
        if client_mutual_auth is not None:
            pulumi.set(__self__, "client_mutual_auth", client_mutual_auth)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if reject_unauth is not None:
            pulumi.set(__self__, "reject_unauth", reject_unauth)
        if satellite_endpoint_id is not None:
            pulumi.set(__self__, "satellite_endpoint_id", satellite_endpoint_id)
        if server_mutual_auth is not None:
            pulumi.set(__self__, "server_mutual_auth", server_mutual_auth)
        if server_protocol is not None:
            pulumi.set(__self__, "server_protocol", server_protocol)
        if sni is not None:
            pulumi.set(__self__, "sni", sni)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @_builtins.property
    @pulumi.getter(name="clientProtocol")
    def client_protocol(self) -> pulumi.Input[_builtins.str]:
        """
        The protocol in the client application side.
        """
        return pulumi.get(self, "client_protocol")

    @client_protocol.setter
    def client_protocol(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "client_protocol", value)

    @_builtins.property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> pulumi.Input[_builtins.str]:
        """
        The type of the endpoint.
        """
        return pulumi.get(self, "connection_type")

    @connection_type.setter
    def connection_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "connection_type", value)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[_builtins.str]:
        """
        The display name of the endpoint. Endpoint names must start with a letter and end with an alphanumeric character, can
        contain letters, numbers, and hyphen (-), and must be 63 characters or fewer.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "display_name", value)

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Input[_builtins.str]:
        """
        The Location ID.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter(name="serverHost")
    def server_host(self) -> pulumi.Input[_builtins.str]:
        """
        The host name or IP address of the server endpoint. For 'http-tunnel' protocol, server_host can start with '*.' , which
        means a wildcard to it's sub domains. Such as '*.example.com' can accept request to 'api.example.com' and
        'www.example.com'.
        """
        return pulumi.get(self, "server_host")

    @server_host.setter
    def server_host(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "server_host", value)

    @_builtins.property
    @pulumi.getter(name="serverPort")
    def server_port(self) -> pulumi.Input[_builtins.float]:
        """
        The port number of the server endpoint. For 'http-tunnel' protocol, server_port can be 0, which means any port. Such as
        0 is good for 80 (http) and 443 (https).
        """
        return pulumi.get(self, "server_port")

    @server_port.setter
    def server_port(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "server_port", value)

    @_builtins.property
    @pulumi.getter
    def certs(self) -> Optional[pulumi.Input['SatelliteEndpointCertsArgs']]:
        """
        The certs.
        """
        return pulumi.get(self, "certs")

    @certs.setter
    def certs(self, value: Optional[pulumi.Input['SatelliteEndpointCertsArgs']]):
        pulumi.set(self, "certs", value)

    @_builtins.property
    @pulumi.getter(name="clientMutualAuth")
    def client_mutual_auth(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether enable mutual auth in the client application side, when client_protocol is 'tls' or 'https', this field is
        required.
        """
        return pulumi.get(self, "client_mutual_auth")

    @client_mutual_auth.setter
    def client_mutual_auth(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "client_mutual_auth", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The service or person who created the endpoint. Must be 1000 characters or fewer.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter(name="rejectUnauth")
    def reject_unauth(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether reject any connection to the server application which is not authorized with the list of supplied CAs in the
        fields certs.server_cert.
        """
        return pulumi.get(self, "reject_unauth")

    @reject_unauth.setter
    def reject_unauth(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "reject_unauth", value)

    @_builtins.property
    @pulumi.getter(name="satelliteEndpointId")
    def satellite_endpoint_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "satellite_endpoint_id")

    @satellite_endpoint_id.setter
    def satellite_endpoint_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "satellite_endpoint_id", value)

    @_builtins.property
    @pulumi.getter(name="serverMutualAuth")
    def server_mutual_auth(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether enable mutual auth in the server application side, when client_protocol is 'tls', this field is required.
        """
        return pulumi.get(self, "server_mutual_auth")

    @server_mutual_auth.setter
    def server_mutual_auth(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "server_mutual_auth", value)

    @_builtins.property
    @pulumi.getter(name="serverProtocol")
    def server_protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The protocol in the server application side. This parameter will change to default value if it is omitted even when
        using PATCH API. If client_protocol is 'udp', server_protocol must be 'udp'. If client_protocol is 'tcp'/'http',
        server_protocol could be 'tcp'/'tls' and default to 'tcp'. If client_protocol is 'tls'/'https', server_protocol could be
        'tcp'/'tls' and default to 'tls'. If client_protocol is 'http-tunnel', server_protocol must be 'tcp'.
        """
        return pulumi.get(self, "server_protocol")

    @server_protocol.setter
    def server_protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "server_protocol", value)

    @_builtins.property
    @pulumi.getter
    def sni(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The server name indicator (SNI) which used to connect to the server endpoint. Only useful if server side requires SNI.
        """
        return pulumi.get(self, "sni")

    @sni.setter
    def sni(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sni", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The inactivity timeout in the Endpoint side.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class _SatelliteEndpointState:
    def __init__(__self__, *,
                 certs: Optional[pulumi.Input['SatelliteEndpointCertsArgs']] = None,
                 client_host: Optional[pulumi.Input[_builtins.str]] = None,
                 client_mutual_auth: Optional[pulumi.Input[_builtins.bool]] = None,
                 client_port: Optional[pulumi.Input[_builtins.float]] = None,
                 client_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_type: Optional[pulumi.Input[_builtins.str]] = None,
                 connector_port: Optional[pulumi.Input[_builtins.float]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 display_name: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_id: Optional[pulumi.Input[_builtins.str]] = None,
                 last_change: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 performances: Optional[pulumi.Input[Sequence[pulumi.Input['SatelliteEndpointPerformanceArgs']]]] = None,
                 reject_unauth: Optional[pulumi.Input[_builtins.bool]] = None,
                 satellite_endpoint_id: Optional[pulumi.Input[_builtins.str]] = None,
                 server_host: Optional[pulumi.Input[_builtins.str]] = None,
                 server_mutual_auth: Optional[pulumi.Input[_builtins.bool]] = None,
                 server_port: Optional[pulumi.Input[_builtins.float]] = None,
                 server_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 service_name: Optional[pulumi.Input[_builtins.str]] = None,
                 sni: Optional[pulumi.Input[_builtins.str]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input['SatelliteEndpointSourceArgs']]]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering SatelliteEndpoint resources.
        :param pulumi.Input['SatelliteEndpointCertsArgs'] certs: The certs.
        :param pulumi.Input[_builtins.str] client_host: The hostname which Satellite Link server listen on for the on-location endpoint, or the hostname which the connector
               server listen on for the on-cloud endpoint destiantion.
        :param pulumi.Input[_builtins.bool] client_mutual_auth: Whether enable mutual auth in the client application side, when client_protocol is 'tls' or 'https', this field is
               required.
        :param pulumi.Input[_builtins.float] client_port: The port which Satellite Link server listen on for the on-location, or the port which the connector server listen on for
               the on-cloud endpoint destiantion.
        :param pulumi.Input[_builtins.str] client_protocol: The protocol in the client application side.
        :param pulumi.Input[_builtins.str] connection_type: The type of the endpoint.
        :param pulumi.Input[_builtins.float] connector_port: The connector port.
        :param pulumi.Input[_builtins.str] created_at: The time when the Endpoint is created.
        :param pulumi.Input[_builtins.str] created_by: The service or person who created the endpoint. Must be 1000 characters or fewer.
        :param pulumi.Input[_builtins.str] crn: Service instance associated with this location.
        :param pulumi.Input[_builtins.str] display_name: The display name of the endpoint. Endpoint names must start with a letter and end with an alphanumeric character, can
               contain letters, numbers, and hyphen (-), and must be 63 characters or fewer.
        :param pulumi.Input[_builtins.str] endpoint_id: The Endpoint ID.
        :param pulumi.Input[_builtins.str] last_change: The last time modify the Endpoint configurations.
        :param pulumi.Input[_builtins.str] location: The Location ID.
        :param pulumi.Input[Sequence[pulumi.Input['SatelliteEndpointPerformanceArgs']]] performances: The last performance data of the endpoint.
        :param pulumi.Input[_builtins.bool] reject_unauth: Whether reject any connection to the server application which is not authorized with the list of supplied CAs in the
               fields certs.server_cert.
        :param pulumi.Input[_builtins.str] server_host: The host name or IP address of the server endpoint. For 'http-tunnel' protocol, server_host can start with '*.' , which
               means a wildcard to it's sub domains. Such as '*.example.com' can accept request to 'api.example.com' and
               'www.example.com'.
        :param pulumi.Input[_builtins.bool] server_mutual_auth: Whether enable mutual auth in the server application side, when client_protocol is 'tls', this field is required.
        :param pulumi.Input[_builtins.float] server_port: The port number of the server endpoint. For 'http-tunnel' protocol, server_port can be 0, which means any port. Such as
               0 is good for 80 (http) and 443 (https).
        :param pulumi.Input[_builtins.str] server_protocol: The protocol in the server application side. This parameter will change to default value if it is omitted even when
               using PATCH API. If client_protocol is 'udp', server_protocol must be 'udp'. If client_protocol is 'tcp'/'http',
               server_protocol could be 'tcp'/'tls' and default to 'tcp'. If client_protocol is 'tls'/'https', server_protocol could be
               'tcp'/'tls' and default to 'tls'. If client_protocol is 'http-tunnel', server_protocol must be 'tcp'.
        :param pulumi.Input[_builtins.str] service_name: The service name of the endpoint.
        :param pulumi.Input[_builtins.str] sni: The server name indicator (SNI) which used to connect to the server endpoint. Only useful if server side requires SNI.
        :param pulumi.Input[_builtins.str] status: Whether the Endpoint is active or not.
        :param pulumi.Input[_builtins.float] timeout: The inactivity timeout in the Endpoint side.
        """
        if certs is not None:
            pulumi.set(__self__, "certs", certs)
        if client_host is not None:
            pulumi.set(__self__, "client_host", client_host)
        if client_mutual_auth is not None:
            pulumi.set(__self__, "client_mutual_auth", client_mutual_auth)
        if client_port is not None:
            pulumi.set(__self__, "client_port", client_port)
        if client_protocol is not None:
            pulumi.set(__self__, "client_protocol", client_protocol)
        if connection_type is not None:
            pulumi.set(__self__, "connection_type", connection_type)
        if connector_port is not None:
            pulumi.set(__self__, "connector_port", connector_port)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if endpoint_id is not None:
            pulumi.set(__self__, "endpoint_id", endpoint_id)
        if last_change is not None:
            pulumi.set(__self__, "last_change", last_change)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if performances is not None:
            pulumi.set(__self__, "performances", performances)
        if reject_unauth is not None:
            pulumi.set(__self__, "reject_unauth", reject_unauth)
        if satellite_endpoint_id is not None:
            pulumi.set(__self__, "satellite_endpoint_id", satellite_endpoint_id)
        if server_host is not None:
            pulumi.set(__self__, "server_host", server_host)
        if server_mutual_auth is not None:
            pulumi.set(__self__, "server_mutual_auth", server_mutual_auth)
        if server_port is not None:
            pulumi.set(__self__, "server_port", server_port)
        if server_protocol is not None:
            pulumi.set(__self__, "server_protocol", server_protocol)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if sni is not None:
            pulumi.set(__self__, "sni", sni)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @_builtins.property
    @pulumi.getter
    def certs(self) -> Optional[pulumi.Input['SatelliteEndpointCertsArgs']]:
        """
        The certs.
        """
        return pulumi.get(self, "certs")

    @certs.setter
    def certs(self, value: Optional[pulumi.Input['SatelliteEndpointCertsArgs']]):
        pulumi.set(self, "certs", value)

    @_builtins.property
    @pulumi.getter(name="clientHost")
    def client_host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The hostname which Satellite Link server listen on for the on-location endpoint, or the hostname which the connector
        server listen on for the on-cloud endpoint destiantion.
        """
        return pulumi.get(self, "client_host")

    @client_host.setter
    def client_host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "client_host", value)

    @_builtins.property
    @pulumi.getter(name="clientMutualAuth")
    def client_mutual_auth(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether enable mutual auth in the client application side, when client_protocol is 'tls' or 'https', this field is
        required.
        """
        return pulumi.get(self, "client_mutual_auth")

    @client_mutual_auth.setter
    def client_mutual_auth(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "client_mutual_auth", value)

    @_builtins.property
    @pulumi.getter(name="clientPort")
    def client_port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The port which Satellite Link server listen on for the on-location, or the port which the connector server listen on for
        the on-cloud endpoint destiantion.
        """
        return pulumi.get(self, "client_port")

    @client_port.setter
    def client_port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "client_port", value)

    @_builtins.property
    @pulumi.getter(name="clientProtocol")
    def client_protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The protocol in the client application side.
        """
        return pulumi.get(self, "client_protocol")

    @client_protocol.setter
    def client_protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "client_protocol", value)

    @_builtins.property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the endpoint.
        """
        return pulumi.get(self, "connection_type")

    @connection_type.setter
    def connection_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connection_type", value)

    @_builtins.property
    @pulumi.getter(name="connectorPort")
    def connector_port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The connector port.
        """
        return pulumi.get(self, "connector_port")

    @connector_port.setter
    def connector_port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "connector_port", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time when the Endpoint is created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The service or person who created the endpoint. Must be 1000 characters or fewer.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service instance associated with this location.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The display name of the endpoint. Endpoint names must start with a letter and end with an alphanumeric character, can
        contain letters, numbers, and hyphen (-), and must be 63 characters or fewer.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "display_name", value)

    @_builtins.property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Endpoint ID.
        """
        return pulumi.get(self, "endpoint_id")

    @endpoint_id.setter
    def endpoint_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_id", value)

    @_builtins.property
    @pulumi.getter(name="lastChange")
    def last_change(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The last time modify the Endpoint configurations.
        """
        return pulumi.get(self, "last_change")

    @last_change.setter
    def last_change(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_change", value)

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Location ID.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter
    def performances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SatelliteEndpointPerformanceArgs']]]]:
        """
        The last performance data of the endpoint.
        """
        return pulumi.get(self, "performances")

    @performances.setter
    def performances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SatelliteEndpointPerformanceArgs']]]]):
        pulumi.set(self, "performances", value)

    @_builtins.property
    @pulumi.getter(name="rejectUnauth")
    def reject_unauth(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether reject any connection to the server application which is not authorized with the list of supplied CAs in the
        fields certs.server_cert.
        """
        return pulumi.get(self, "reject_unauth")

    @reject_unauth.setter
    def reject_unauth(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "reject_unauth", value)

    @_builtins.property
    @pulumi.getter(name="satelliteEndpointId")
    def satellite_endpoint_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "satellite_endpoint_id")

    @satellite_endpoint_id.setter
    def satellite_endpoint_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "satellite_endpoint_id", value)

    @_builtins.property
    @pulumi.getter(name="serverHost")
    def server_host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The host name or IP address of the server endpoint. For 'http-tunnel' protocol, server_host can start with '*.' , which
        means a wildcard to it's sub domains. Such as '*.example.com' can accept request to 'api.example.com' and
        'www.example.com'.
        """
        return pulumi.get(self, "server_host")

    @server_host.setter
    def server_host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "server_host", value)

    @_builtins.property
    @pulumi.getter(name="serverMutualAuth")
    def server_mutual_auth(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether enable mutual auth in the server application side, when client_protocol is 'tls', this field is required.
        """
        return pulumi.get(self, "server_mutual_auth")

    @server_mutual_auth.setter
    def server_mutual_auth(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "server_mutual_auth", value)

    @_builtins.property
    @pulumi.getter(name="serverPort")
    def server_port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The port number of the server endpoint. For 'http-tunnel' protocol, server_port can be 0, which means any port. Such as
        0 is good for 80 (http) and 443 (https).
        """
        return pulumi.get(self, "server_port")

    @server_port.setter
    def server_port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "server_port", value)

    @_builtins.property
    @pulumi.getter(name="serverProtocol")
    def server_protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The protocol in the server application side. This parameter will change to default value if it is omitted even when
        using PATCH API. If client_protocol is 'udp', server_protocol must be 'udp'. If client_protocol is 'tcp'/'http',
        server_protocol could be 'tcp'/'tls' and default to 'tcp'. If client_protocol is 'tls'/'https', server_protocol could be
        'tcp'/'tls' and default to 'tls'. If client_protocol is 'http-tunnel', server_protocol must be 'tcp'.
        """
        return pulumi.get(self, "server_protocol")

    @server_protocol.setter
    def server_protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "server_protocol", value)

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The service name of the endpoint.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_name", value)

    @_builtins.property
    @pulumi.getter
    def sni(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The server name indicator (SNI) which used to connect to the server endpoint. Only useful if server side requires SNI.
        """
        return pulumi.get(self, "sni")

    @sni.setter
    def sni(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sni", value)

    @_builtins.property
    @pulumi.getter
    def sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SatelliteEndpointSourceArgs']]]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SatelliteEndpointSourceArgs']]]]):
        pulumi.set(self, "sources", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Whether the Endpoint is active or not.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The inactivity timeout in the Endpoint side.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "timeout", value)


@pulumi.type_token("ibm:index/satelliteEndpoint:SatelliteEndpoint")
class SatelliteEndpoint(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certs: Optional[pulumi.Input[Union['SatelliteEndpointCertsArgs', 'SatelliteEndpointCertsArgsDict']]] = None,
                 client_mutual_auth: Optional[pulumi.Input[_builtins.bool]] = None,
                 client_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_type: Optional[pulumi.Input[_builtins.str]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 display_name: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 reject_unauth: Optional[pulumi.Input[_builtins.bool]] = None,
                 satellite_endpoint_id: Optional[pulumi.Input[_builtins.str]] = None,
                 server_host: Optional[pulumi.Input[_builtins.str]] = None,
                 server_mutual_auth: Optional[pulumi.Input[_builtins.bool]] = None,
                 server_port: Optional[pulumi.Input[_builtins.float]] = None,
                 server_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 sni: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a SatelliteEndpoint resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['SatelliteEndpointCertsArgs', 'SatelliteEndpointCertsArgsDict']] certs: The certs.
        :param pulumi.Input[_builtins.bool] client_mutual_auth: Whether enable mutual auth in the client application side, when client_protocol is 'tls' or 'https', this field is
               required.
        :param pulumi.Input[_builtins.str] client_protocol: The protocol in the client application side.
        :param pulumi.Input[_builtins.str] connection_type: The type of the endpoint.
        :param pulumi.Input[_builtins.str] created_by: The service or person who created the endpoint. Must be 1000 characters or fewer.
        :param pulumi.Input[_builtins.str] display_name: The display name of the endpoint. Endpoint names must start with a letter and end with an alphanumeric character, can
               contain letters, numbers, and hyphen (-), and must be 63 characters or fewer.
        :param pulumi.Input[_builtins.str] location: The Location ID.
        :param pulumi.Input[_builtins.bool] reject_unauth: Whether reject any connection to the server application which is not authorized with the list of supplied CAs in the
               fields certs.server_cert.
        :param pulumi.Input[_builtins.str] server_host: The host name or IP address of the server endpoint. For 'http-tunnel' protocol, server_host can start with '*.' , which
               means a wildcard to it's sub domains. Such as '*.example.com' can accept request to 'api.example.com' and
               'www.example.com'.
        :param pulumi.Input[_builtins.bool] server_mutual_auth: Whether enable mutual auth in the server application side, when client_protocol is 'tls', this field is required.
        :param pulumi.Input[_builtins.float] server_port: The port number of the server endpoint. For 'http-tunnel' protocol, server_port can be 0, which means any port. Such as
               0 is good for 80 (http) and 443 (https).
        :param pulumi.Input[_builtins.str] server_protocol: The protocol in the server application side. This parameter will change to default value if it is omitted even when
               using PATCH API. If client_protocol is 'udp', server_protocol must be 'udp'. If client_protocol is 'tcp'/'http',
               server_protocol could be 'tcp'/'tls' and default to 'tcp'. If client_protocol is 'tls'/'https', server_protocol could be
               'tcp'/'tls' and default to 'tls'. If client_protocol is 'http-tunnel', server_protocol must be 'tcp'.
        :param pulumi.Input[_builtins.str] sni: The server name indicator (SNI) which used to connect to the server endpoint. Only useful if server side requires SNI.
        :param pulumi.Input[_builtins.float] timeout: The inactivity timeout in the Endpoint side.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SatelliteEndpointArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SatelliteEndpoint resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SatelliteEndpointArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SatelliteEndpointArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certs: Optional[pulumi.Input[Union['SatelliteEndpointCertsArgs', 'SatelliteEndpointCertsArgsDict']]] = None,
                 client_mutual_auth: Optional[pulumi.Input[_builtins.bool]] = None,
                 client_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_type: Optional[pulumi.Input[_builtins.str]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 display_name: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 reject_unauth: Optional[pulumi.Input[_builtins.bool]] = None,
                 satellite_endpoint_id: Optional[pulumi.Input[_builtins.str]] = None,
                 server_host: Optional[pulumi.Input[_builtins.str]] = None,
                 server_mutual_auth: Optional[pulumi.Input[_builtins.bool]] = None,
                 server_port: Optional[pulumi.Input[_builtins.float]] = None,
                 server_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 sni: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SatelliteEndpointArgs.__new__(SatelliteEndpointArgs)

            __props__.__dict__["certs"] = certs
            __props__.__dict__["client_mutual_auth"] = client_mutual_auth
            if client_protocol is None and not opts.urn:
                raise TypeError("Missing required property 'client_protocol'")
            __props__.__dict__["client_protocol"] = client_protocol
            if connection_type is None and not opts.urn:
                raise TypeError("Missing required property 'connection_type'")
            __props__.__dict__["connection_type"] = connection_type
            __props__.__dict__["created_by"] = created_by
            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["reject_unauth"] = reject_unauth
            __props__.__dict__["satellite_endpoint_id"] = satellite_endpoint_id
            if server_host is None and not opts.urn:
                raise TypeError("Missing required property 'server_host'")
            __props__.__dict__["server_host"] = server_host
            __props__.__dict__["server_mutual_auth"] = server_mutual_auth
            if server_port is None and not opts.urn:
                raise TypeError("Missing required property 'server_port'")
            __props__.__dict__["server_port"] = server_port
            __props__.__dict__["server_protocol"] = server_protocol
            __props__.__dict__["sni"] = sni
            __props__.__dict__["timeout"] = timeout
            __props__.__dict__["client_host"] = None
            __props__.__dict__["client_port"] = None
            __props__.__dict__["connector_port"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["endpoint_id"] = None
            __props__.__dict__["last_change"] = None
            __props__.__dict__["performances"] = None
            __props__.__dict__["service_name"] = None
            __props__.__dict__["sources"] = None
            __props__.__dict__["status"] = None
        super(SatelliteEndpoint, __self__).__init__(
            'ibm:index/satelliteEndpoint:SatelliteEndpoint',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            certs: Optional[pulumi.Input[Union['SatelliteEndpointCertsArgs', 'SatelliteEndpointCertsArgsDict']]] = None,
            client_host: Optional[pulumi.Input[_builtins.str]] = None,
            client_mutual_auth: Optional[pulumi.Input[_builtins.bool]] = None,
            client_port: Optional[pulumi.Input[_builtins.float]] = None,
            client_protocol: Optional[pulumi.Input[_builtins.str]] = None,
            connection_type: Optional[pulumi.Input[_builtins.str]] = None,
            connector_port: Optional[pulumi.Input[_builtins.float]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            created_by: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            display_name: Optional[pulumi.Input[_builtins.str]] = None,
            endpoint_id: Optional[pulumi.Input[_builtins.str]] = None,
            last_change: Optional[pulumi.Input[_builtins.str]] = None,
            location: Optional[pulumi.Input[_builtins.str]] = None,
            performances: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SatelliteEndpointPerformanceArgs', 'SatelliteEndpointPerformanceArgsDict']]]]] = None,
            reject_unauth: Optional[pulumi.Input[_builtins.bool]] = None,
            satellite_endpoint_id: Optional[pulumi.Input[_builtins.str]] = None,
            server_host: Optional[pulumi.Input[_builtins.str]] = None,
            server_mutual_auth: Optional[pulumi.Input[_builtins.bool]] = None,
            server_port: Optional[pulumi.Input[_builtins.float]] = None,
            server_protocol: Optional[pulumi.Input[_builtins.str]] = None,
            service_name: Optional[pulumi.Input[_builtins.str]] = None,
            sni: Optional[pulumi.Input[_builtins.str]] = None,
            sources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SatelliteEndpointSourceArgs', 'SatelliteEndpointSourceArgsDict']]]]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            timeout: Optional[pulumi.Input[_builtins.float]] = None) -> 'SatelliteEndpoint':
        """
        Get an existing SatelliteEndpoint resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['SatelliteEndpointCertsArgs', 'SatelliteEndpointCertsArgsDict']] certs: The certs.
        :param pulumi.Input[_builtins.str] client_host: The hostname which Satellite Link server listen on for the on-location endpoint, or the hostname which the connector
               server listen on for the on-cloud endpoint destiantion.
        :param pulumi.Input[_builtins.bool] client_mutual_auth: Whether enable mutual auth in the client application side, when client_protocol is 'tls' or 'https', this field is
               required.
        :param pulumi.Input[_builtins.float] client_port: The port which Satellite Link server listen on for the on-location, or the port which the connector server listen on for
               the on-cloud endpoint destiantion.
        :param pulumi.Input[_builtins.str] client_protocol: The protocol in the client application side.
        :param pulumi.Input[_builtins.str] connection_type: The type of the endpoint.
        :param pulumi.Input[_builtins.float] connector_port: The connector port.
        :param pulumi.Input[_builtins.str] created_at: The time when the Endpoint is created.
        :param pulumi.Input[_builtins.str] created_by: The service or person who created the endpoint. Must be 1000 characters or fewer.
        :param pulumi.Input[_builtins.str] crn: Service instance associated with this location.
        :param pulumi.Input[_builtins.str] display_name: The display name of the endpoint. Endpoint names must start with a letter and end with an alphanumeric character, can
               contain letters, numbers, and hyphen (-), and must be 63 characters or fewer.
        :param pulumi.Input[_builtins.str] endpoint_id: The Endpoint ID.
        :param pulumi.Input[_builtins.str] last_change: The last time modify the Endpoint configurations.
        :param pulumi.Input[_builtins.str] location: The Location ID.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SatelliteEndpointPerformanceArgs', 'SatelliteEndpointPerformanceArgsDict']]]] performances: The last performance data of the endpoint.
        :param pulumi.Input[_builtins.bool] reject_unauth: Whether reject any connection to the server application which is not authorized with the list of supplied CAs in the
               fields certs.server_cert.
        :param pulumi.Input[_builtins.str] server_host: The host name or IP address of the server endpoint. For 'http-tunnel' protocol, server_host can start with '*.' , which
               means a wildcard to it's sub domains. Such as '*.example.com' can accept request to 'api.example.com' and
               'www.example.com'.
        :param pulumi.Input[_builtins.bool] server_mutual_auth: Whether enable mutual auth in the server application side, when client_protocol is 'tls', this field is required.
        :param pulumi.Input[_builtins.float] server_port: The port number of the server endpoint. For 'http-tunnel' protocol, server_port can be 0, which means any port. Such as
               0 is good for 80 (http) and 443 (https).
        :param pulumi.Input[_builtins.str] server_protocol: The protocol in the server application side. This parameter will change to default value if it is omitted even when
               using PATCH API. If client_protocol is 'udp', server_protocol must be 'udp'. If client_protocol is 'tcp'/'http',
               server_protocol could be 'tcp'/'tls' and default to 'tcp'. If client_protocol is 'tls'/'https', server_protocol could be
               'tcp'/'tls' and default to 'tls'. If client_protocol is 'http-tunnel', server_protocol must be 'tcp'.
        :param pulumi.Input[_builtins.str] service_name: The service name of the endpoint.
        :param pulumi.Input[_builtins.str] sni: The server name indicator (SNI) which used to connect to the server endpoint. Only useful if server side requires SNI.
        :param pulumi.Input[_builtins.str] status: Whether the Endpoint is active or not.
        :param pulumi.Input[_builtins.float] timeout: The inactivity timeout in the Endpoint side.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SatelliteEndpointState.__new__(_SatelliteEndpointState)

        __props__.__dict__["certs"] = certs
        __props__.__dict__["client_host"] = client_host
        __props__.__dict__["client_mutual_auth"] = client_mutual_auth
        __props__.__dict__["client_port"] = client_port
        __props__.__dict__["client_protocol"] = client_protocol
        __props__.__dict__["connection_type"] = connection_type
        __props__.__dict__["connector_port"] = connector_port
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["crn"] = crn
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["endpoint_id"] = endpoint_id
        __props__.__dict__["last_change"] = last_change
        __props__.__dict__["location"] = location
        __props__.__dict__["performances"] = performances
        __props__.__dict__["reject_unauth"] = reject_unauth
        __props__.__dict__["satellite_endpoint_id"] = satellite_endpoint_id
        __props__.__dict__["server_host"] = server_host
        __props__.__dict__["server_mutual_auth"] = server_mutual_auth
        __props__.__dict__["server_port"] = server_port
        __props__.__dict__["server_protocol"] = server_protocol
        __props__.__dict__["service_name"] = service_name
        __props__.__dict__["sni"] = sni
        __props__.__dict__["sources"] = sources
        __props__.__dict__["status"] = status
        __props__.__dict__["timeout"] = timeout
        return SatelliteEndpoint(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def certs(self) -> pulumi.Output[Optional['outputs.SatelliteEndpointCerts']]:
        """
        The certs.
        """
        return pulumi.get(self, "certs")

    @_builtins.property
    @pulumi.getter(name="clientHost")
    def client_host(self) -> pulumi.Output[_builtins.str]:
        """
        The hostname which Satellite Link server listen on for the on-location endpoint, or the hostname which the connector
        server listen on for the on-cloud endpoint destiantion.
        """
        return pulumi.get(self, "client_host")

    @_builtins.property
    @pulumi.getter(name="clientMutualAuth")
    def client_mutual_auth(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Whether enable mutual auth in the client application side, when client_protocol is 'tls' or 'https', this field is
        required.
        """
        return pulumi.get(self, "client_mutual_auth")

    @_builtins.property
    @pulumi.getter(name="clientPort")
    def client_port(self) -> pulumi.Output[_builtins.float]:
        """
        The port which Satellite Link server listen on for the on-location, or the port which the connector server listen on for
        the on-cloud endpoint destiantion.
        """
        return pulumi.get(self, "client_port")

    @_builtins.property
    @pulumi.getter(name="clientProtocol")
    def client_protocol(self) -> pulumi.Output[_builtins.str]:
        """
        The protocol in the client application side.
        """
        return pulumi.get(self, "client_protocol")

    @_builtins.property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of the endpoint.
        """
        return pulumi.get(self, "connection_type")

    @_builtins.property
    @pulumi.getter(name="connectorPort")
    def connector_port(self) -> pulumi.Output[_builtins.float]:
        """
        The connector port.
        """
        return pulumi.get(self, "connector_port")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The time when the Endpoint is created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The service or person who created the endpoint. Must be 1000 characters or fewer.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        Service instance associated with this location.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[_builtins.str]:
        """
        The display name of the endpoint. Endpoint names must start with a letter and end with an alphanumeric character, can
        contain letters, numbers, and hyphen (-), and must be 63 characters or fewer.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> pulumi.Output[_builtins.str]:
        """
        The Endpoint ID.
        """
        return pulumi.get(self, "endpoint_id")

    @_builtins.property
    @pulumi.getter(name="lastChange")
    def last_change(self) -> pulumi.Output[_builtins.str]:
        """
        The last time modify the Endpoint configurations.
        """
        return pulumi.get(self, "last_change")

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Output[_builtins.str]:
        """
        The Location ID.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def performances(self) -> pulumi.Output[Sequence['outputs.SatelliteEndpointPerformance']]:
        """
        The last performance data of the endpoint.
        """
        return pulumi.get(self, "performances")

    @_builtins.property
    @pulumi.getter(name="rejectUnauth")
    def reject_unauth(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Whether reject any connection to the server application which is not authorized with the list of supplied CAs in the
        fields certs.server_cert.
        """
        return pulumi.get(self, "reject_unauth")

    @_builtins.property
    @pulumi.getter(name="satelliteEndpointId")
    def satellite_endpoint_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "satellite_endpoint_id")

    @_builtins.property
    @pulumi.getter(name="serverHost")
    def server_host(self) -> pulumi.Output[_builtins.str]:
        """
        The host name or IP address of the server endpoint. For 'http-tunnel' protocol, server_host can start with '*.' , which
        means a wildcard to it's sub domains. Such as '*.example.com' can accept request to 'api.example.com' and
        'www.example.com'.
        """
        return pulumi.get(self, "server_host")

    @_builtins.property
    @pulumi.getter(name="serverMutualAuth")
    def server_mutual_auth(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Whether enable mutual auth in the server application side, when client_protocol is 'tls', this field is required.
        """
        return pulumi.get(self, "server_mutual_auth")

    @_builtins.property
    @pulumi.getter(name="serverPort")
    def server_port(self) -> pulumi.Output[_builtins.float]:
        """
        The port number of the server endpoint. For 'http-tunnel' protocol, server_port can be 0, which means any port. Such as
        0 is good for 80 (http) and 443 (https).
        """
        return pulumi.get(self, "server_port")

    @_builtins.property
    @pulumi.getter(name="serverProtocol")
    def server_protocol(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The protocol in the server application side. This parameter will change to default value if it is omitted even when
        using PATCH API. If client_protocol is 'udp', server_protocol must be 'udp'. If client_protocol is 'tcp'/'http',
        server_protocol could be 'tcp'/'tls' and default to 'tcp'. If client_protocol is 'tls'/'https', server_protocol could be
        'tcp'/'tls' and default to 'tls'. If client_protocol is 'http-tunnel', server_protocol must be 'tcp'.
        """
        return pulumi.get(self, "server_protocol")

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Output[_builtins.str]:
        """
        The service name of the endpoint.
        """
        return pulumi.get(self, "service_name")

    @_builtins.property
    @pulumi.getter
    def sni(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The server name indicator (SNI) which used to connect to the server endpoint. Only useful if server side requires SNI.
        """
        return pulumi.get(self, "sni")

    @_builtins.property
    @pulumi.getter
    def sources(self) -> pulumi.Output[Sequence['outputs.SatelliteEndpointSource']]:
        return pulumi.get(self, "sources")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Whether the Endpoint is active or not.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        The inactivity timeout in the Endpoint side.
        """
        return pulumi.get(self, "timeout")

