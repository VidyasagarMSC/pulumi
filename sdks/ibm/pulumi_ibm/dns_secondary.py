# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['DnsSecondaryArgs', 'DnsSecondary']

@pulumi.input_type
class DnsSecondaryArgs:
    def __init__(__self__, *,
                 master_ip_address: pulumi.Input[_builtins.str],
                 transfer_frequency: pulumi.Input[_builtins.float],
                 zone_name: pulumi.Input[_builtins.str],
                 dns_secondary_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a DnsSecondary resource.
        :param pulumi.Input[_builtins.str] master_ip_address: Master IP Address
        :param pulumi.Input[_builtins.float] transfer_frequency: Transfer frequency value
        :param pulumi.Input[_builtins.str] zone_name: Zone name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        """
        pulumi.set(__self__, "master_ip_address", master_ip_address)
        pulumi.set(__self__, "transfer_frequency", transfer_frequency)
        pulumi.set(__self__, "zone_name", zone_name)
        if dns_secondary_id is not None:
            pulumi.set(__self__, "dns_secondary_id", dns_secondary_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="masterIpAddress")
    def master_ip_address(self) -> pulumi.Input[_builtins.str]:
        """
        Master IP Address
        """
        return pulumi.get(self, "master_ip_address")

    @master_ip_address.setter
    def master_ip_address(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "master_ip_address", value)

    @_builtins.property
    @pulumi.getter(name="transferFrequency")
    def transfer_frequency(self) -> pulumi.Input[_builtins.float]:
        """
        Transfer frequency value
        """
        return pulumi.get(self, "transfer_frequency")

    @transfer_frequency.setter
    def transfer_frequency(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "transfer_frequency", value)

    @_builtins.property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> pulumi.Input[_builtins.str]:
        """
        Zone name
        """
        return pulumi.get(self, "zone_name")

    @zone_name.setter
    def zone_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "zone_name", value)

    @_builtins.property
    @pulumi.getter(name="dnsSecondaryId")
    def dns_secondary_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dns_secondary_id")

    @dns_secondary_id.setter
    def dns_secondary_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_secondary_id", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _DnsSecondaryState:
    def __init__(__self__, *,
                 dns_secondary_id: Optional[pulumi.Input[_builtins.str]] = None,
                 master_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 status_id: Optional[pulumi.Input[_builtins.float]] = None,
                 status_text: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 transfer_frequency: Optional[pulumi.Input[_builtins.float]] = None,
                 zone_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DnsSecondary resources.
        :param pulumi.Input[_builtins.str] master_ip_address: Master IP Address
        :param pulumi.Input[_builtins.float] status_id: Status ID
        :param pulumi.Input[_builtins.str] status_text: Status text
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        :param pulumi.Input[_builtins.float] transfer_frequency: Transfer frequency value
        :param pulumi.Input[_builtins.str] zone_name: Zone name
        """
        if dns_secondary_id is not None:
            pulumi.set(__self__, "dns_secondary_id", dns_secondary_id)
        if master_ip_address is not None:
            pulumi.set(__self__, "master_ip_address", master_ip_address)
        if status_id is not None:
            pulumi.set(__self__, "status_id", status_id)
        if status_text is not None:
            pulumi.set(__self__, "status_text", status_text)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if transfer_frequency is not None:
            pulumi.set(__self__, "transfer_frequency", transfer_frequency)
        if zone_name is not None:
            pulumi.set(__self__, "zone_name", zone_name)

    @_builtins.property
    @pulumi.getter(name="dnsSecondaryId")
    def dns_secondary_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dns_secondary_id")

    @dns_secondary_id.setter
    def dns_secondary_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_secondary_id", value)

    @_builtins.property
    @pulumi.getter(name="masterIpAddress")
    def master_ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Master IP Address
        """
        return pulumi.get(self, "master_ip_address")

    @master_ip_address.setter
    def master_ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "master_ip_address", value)

    @_builtins.property
    @pulumi.getter(name="statusId")
    def status_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Status ID
        """
        return pulumi.get(self, "status_id")

    @status_id.setter
    def status_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "status_id", value)

    @_builtins.property
    @pulumi.getter(name="statusText")
    def status_text(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Status text
        """
        return pulumi.get(self, "status_text")

    @status_text.setter
    def status_text(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status_text", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="transferFrequency")
    def transfer_frequency(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Transfer frequency value
        """
        return pulumi.get(self, "transfer_frequency")

    @transfer_frequency.setter
    def transfer_frequency(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "transfer_frequency", value)

    @_builtins.property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Zone name
        """
        return pulumi.get(self, "zone_name")

    @zone_name.setter
    def zone_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zone_name", value)


@pulumi.type_token("ibm:index/dnsSecondary:DnsSecondary")
class DnsSecondary(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dns_secondary_id: Optional[pulumi.Input[_builtins.str]] = None,
                 master_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 transfer_frequency: Optional[pulumi.Input[_builtins.float]] = None,
                 zone_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a DnsSecondary resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] master_ip_address: Master IP Address
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        :param pulumi.Input[_builtins.float] transfer_frequency: Transfer frequency value
        :param pulumi.Input[_builtins.str] zone_name: Zone name
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DnsSecondaryArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DnsSecondary resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DnsSecondaryArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DnsSecondaryArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dns_secondary_id: Optional[pulumi.Input[_builtins.str]] = None,
                 master_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 transfer_frequency: Optional[pulumi.Input[_builtins.float]] = None,
                 zone_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DnsSecondaryArgs.__new__(DnsSecondaryArgs)

            __props__.__dict__["dns_secondary_id"] = dns_secondary_id
            if master_ip_address is None and not opts.urn:
                raise TypeError("Missing required property 'master_ip_address'")
            __props__.__dict__["master_ip_address"] = master_ip_address
            __props__.__dict__["tags"] = tags
            if transfer_frequency is None and not opts.urn:
                raise TypeError("Missing required property 'transfer_frequency'")
            __props__.__dict__["transfer_frequency"] = transfer_frequency
            if zone_name is None and not opts.urn:
                raise TypeError("Missing required property 'zone_name'")
            __props__.__dict__["zone_name"] = zone_name
            __props__.__dict__["status_id"] = None
            __props__.__dict__["status_text"] = None
        super(DnsSecondary, __self__).__init__(
            'ibm:index/dnsSecondary:DnsSecondary',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dns_secondary_id: Optional[pulumi.Input[_builtins.str]] = None,
            master_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
            status_id: Optional[pulumi.Input[_builtins.float]] = None,
            status_text: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            transfer_frequency: Optional[pulumi.Input[_builtins.float]] = None,
            zone_name: Optional[pulumi.Input[_builtins.str]] = None) -> 'DnsSecondary':
        """
        Get an existing DnsSecondary resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] master_ip_address: Master IP Address
        :param pulumi.Input[_builtins.float] status_id: Status ID
        :param pulumi.Input[_builtins.str] status_text: Status text
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        :param pulumi.Input[_builtins.float] transfer_frequency: Transfer frequency value
        :param pulumi.Input[_builtins.str] zone_name: Zone name
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DnsSecondaryState.__new__(_DnsSecondaryState)

        __props__.__dict__["dns_secondary_id"] = dns_secondary_id
        __props__.__dict__["master_ip_address"] = master_ip_address
        __props__.__dict__["status_id"] = status_id
        __props__.__dict__["status_text"] = status_text
        __props__.__dict__["tags"] = tags
        __props__.__dict__["transfer_frequency"] = transfer_frequency
        __props__.__dict__["zone_name"] = zone_name
        return DnsSecondary(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="dnsSecondaryId")
    def dns_secondary_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "dns_secondary_id")

    @_builtins.property
    @pulumi.getter(name="masterIpAddress")
    def master_ip_address(self) -> pulumi.Output[_builtins.str]:
        """
        Master IP Address
        """
        return pulumi.get(self, "master_ip_address")

    @_builtins.property
    @pulumi.getter(name="statusId")
    def status_id(self) -> pulumi.Output[_builtins.float]:
        """
        Status ID
        """
        return pulumi.get(self, "status_id")

    @_builtins.property
    @pulumi.getter(name="statusText")
    def status_text(self) -> pulumi.Output[_builtins.str]:
        """
        Status text
        """
        return pulumi.get(self, "status_text")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="transferFrequency")
    def transfer_frequency(self) -> pulumi.Output[_builtins.float]:
        """
        Transfer frequency value
        """
        return pulumi.get(self, "transfer_frequency")

    @_builtins.property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> pulumi.Output[_builtins.str]:
        """
        Zone name
        """
        return pulumi.get(self, "zone_name")

