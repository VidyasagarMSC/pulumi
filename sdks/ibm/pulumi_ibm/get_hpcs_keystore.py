# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetHpcsKeystoreResult',
    'AwaitableGetHpcsKeystoreResult',
    'get_hpcs_keystore',
    'get_hpcs_keystore_output',
]

@pulumi.output_type
class GetHpcsKeystoreResult:
    """
    A collection of values returned by getHpcsKeystore.
    """
    def __init__(__self__, aws_access_key_id=None, aws_region=None, aws_secret_access_key=None, azure_environment=None, azure_location=None, azure_resource_group=None, azure_service_name=None, azure_service_principal_client_id=None, azure_service_principal_password=None, azure_subscription_id=None, azure_tenant=None, created_at=None, created_by=None, description=None, google_credentials=None, google_key_ring=None, google_location=None, google_private_key_id=None, google_project_id=None, groups=None, href=None, ibm_api_endpoint=None, ibm_api_key=None, ibm_iam_endpoint=None, ibm_instance_id=None, ibm_key_ring=None, ibm_variant=None, id=None, instance_id=None, keystore_id=None, location=None, name=None, region=None, type=None, uko_vault=None, updated_at=None, updated_by=None, vaults=None):
        if aws_access_key_id and not isinstance(aws_access_key_id, str):
            raise TypeError("Expected argument 'aws_access_key_id' to be a str")
        pulumi.set(__self__, "aws_access_key_id", aws_access_key_id)
        if aws_region and not isinstance(aws_region, str):
            raise TypeError("Expected argument 'aws_region' to be a str")
        pulumi.set(__self__, "aws_region", aws_region)
        if aws_secret_access_key and not isinstance(aws_secret_access_key, str):
            raise TypeError("Expected argument 'aws_secret_access_key' to be a str")
        pulumi.set(__self__, "aws_secret_access_key", aws_secret_access_key)
        if azure_environment and not isinstance(azure_environment, str):
            raise TypeError("Expected argument 'azure_environment' to be a str")
        pulumi.set(__self__, "azure_environment", azure_environment)
        if azure_location and not isinstance(azure_location, str):
            raise TypeError("Expected argument 'azure_location' to be a str")
        pulumi.set(__self__, "azure_location", azure_location)
        if azure_resource_group and not isinstance(azure_resource_group, str):
            raise TypeError("Expected argument 'azure_resource_group' to be a str")
        pulumi.set(__self__, "azure_resource_group", azure_resource_group)
        if azure_service_name and not isinstance(azure_service_name, str):
            raise TypeError("Expected argument 'azure_service_name' to be a str")
        pulumi.set(__self__, "azure_service_name", azure_service_name)
        if azure_service_principal_client_id and not isinstance(azure_service_principal_client_id, str):
            raise TypeError("Expected argument 'azure_service_principal_client_id' to be a str")
        pulumi.set(__self__, "azure_service_principal_client_id", azure_service_principal_client_id)
        if azure_service_principal_password and not isinstance(azure_service_principal_password, str):
            raise TypeError("Expected argument 'azure_service_principal_password' to be a str")
        pulumi.set(__self__, "azure_service_principal_password", azure_service_principal_password)
        if azure_subscription_id and not isinstance(azure_subscription_id, str):
            raise TypeError("Expected argument 'azure_subscription_id' to be a str")
        pulumi.set(__self__, "azure_subscription_id", azure_subscription_id)
        if azure_tenant and not isinstance(azure_tenant, str):
            raise TypeError("Expected argument 'azure_tenant' to be a str")
        pulumi.set(__self__, "azure_tenant", azure_tenant)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if google_credentials and not isinstance(google_credentials, str):
            raise TypeError("Expected argument 'google_credentials' to be a str")
        pulumi.set(__self__, "google_credentials", google_credentials)
        if google_key_ring and not isinstance(google_key_ring, str):
            raise TypeError("Expected argument 'google_key_ring' to be a str")
        pulumi.set(__self__, "google_key_ring", google_key_ring)
        if google_location and not isinstance(google_location, str):
            raise TypeError("Expected argument 'google_location' to be a str")
        pulumi.set(__self__, "google_location", google_location)
        if google_private_key_id and not isinstance(google_private_key_id, str):
            raise TypeError("Expected argument 'google_private_key_id' to be a str")
        pulumi.set(__self__, "google_private_key_id", google_private_key_id)
        if google_project_id and not isinstance(google_project_id, str):
            raise TypeError("Expected argument 'google_project_id' to be a str")
        pulumi.set(__self__, "google_project_id", google_project_id)
        if groups and not isinstance(groups, list):
            raise TypeError("Expected argument 'groups' to be a list")
        pulumi.set(__self__, "groups", groups)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if ibm_api_endpoint and not isinstance(ibm_api_endpoint, str):
            raise TypeError("Expected argument 'ibm_api_endpoint' to be a str")
        pulumi.set(__self__, "ibm_api_endpoint", ibm_api_endpoint)
        if ibm_api_key and not isinstance(ibm_api_key, str):
            raise TypeError("Expected argument 'ibm_api_key' to be a str")
        pulumi.set(__self__, "ibm_api_key", ibm_api_key)
        if ibm_iam_endpoint and not isinstance(ibm_iam_endpoint, str):
            raise TypeError("Expected argument 'ibm_iam_endpoint' to be a str")
        pulumi.set(__self__, "ibm_iam_endpoint", ibm_iam_endpoint)
        if ibm_instance_id and not isinstance(ibm_instance_id, str):
            raise TypeError("Expected argument 'ibm_instance_id' to be a str")
        pulumi.set(__self__, "ibm_instance_id", ibm_instance_id)
        if ibm_key_ring and not isinstance(ibm_key_ring, str):
            raise TypeError("Expected argument 'ibm_key_ring' to be a str")
        pulumi.set(__self__, "ibm_key_ring", ibm_key_ring)
        if ibm_variant and not isinstance(ibm_variant, str):
            raise TypeError("Expected argument 'ibm_variant' to be a str")
        pulumi.set(__self__, "ibm_variant", ibm_variant)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if keystore_id and not isinstance(keystore_id, str):
            raise TypeError("Expected argument 'keystore_id' to be a str")
        pulumi.set(__self__, "keystore_id", keystore_id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if uko_vault and not isinstance(uko_vault, str):
            raise TypeError("Expected argument 'uko_vault' to be a str")
        pulumi.set(__self__, "uko_vault", uko_vault)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)
        if updated_by and not isinstance(updated_by, str):
            raise TypeError("Expected argument 'updated_by' to be a str")
        pulumi.set(__self__, "updated_by", updated_by)
        if vaults and not isinstance(vaults, list):
            raise TypeError("Expected argument 'vaults' to be a list")
        pulumi.set(__self__, "vaults", vaults)

    @_builtins.property
    @pulumi.getter(name="awsAccessKeyId")
    def aws_access_key_id(self) -> _builtins.str:
        return pulumi.get(self, "aws_access_key_id")

    @_builtins.property
    @pulumi.getter(name="awsRegion")
    def aws_region(self) -> _builtins.str:
        return pulumi.get(self, "aws_region")

    @_builtins.property
    @pulumi.getter(name="awsSecretAccessKey")
    def aws_secret_access_key(self) -> _builtins.str:
        return pulumi.get(self, "aws_secret_access_key")

    @_builtins.property
    @pulumi.getter(name="azureEnvironment")
    def azure_environment(self) -> _builtins.str:
        return pulumi.get(self, "azure_environment")

    @_builtins.property
    @pulumi.getter(name="azureLocation")
    def azure_location(self) -> _builtins.str:
        return pulumi.get(self, "azure_location")

    @_builtins.property
    @pulumi.getter(name="azureResourceGroup")
    def azure_resource_group(self) -> _builtins.str:
        return pulumi.get(self, "azure_resource_group")

    @_builtins.property
    @pulumi.getter(name="azureServiceName")
    def azure_service_name(self) -> _builtins.str:
        return pulumi.get(self, "azure_service_name")

    @_builtins.property
    @pulumi.getter(name="azureServicePrincipalClientId")
    def azure_service_principal_client_id(self) -> _builtins.str:
        return pulumi.get(self, "azure_service_principal_client_id")

    @_builtins.property
    @pulumi.getter(name="azureServicePrincipalPassword")
    def azure_service_principal_password(self) -> _builtins.str:
        return pulumi.get(self, "azure_service_principal_password")

    @_builtins.property
    @pulumi.getter(name="azureSubscriptionId")
    def azure_subscription_id(self) -> _builtins.str:
        return pulumi.get(self, "azure_subscription_id")

    @_builtins.property
    @pulumi.getter(name="azureTenant")
    def azure_tenant(self) -> _builtins.str:
        return pulumi.get(self, "azure_tenant")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="googleCredentials")
    def google_credentials(self) -> _builtins.str:
        return pulumi.get(self, "google_credentials")

    @_builtins.property
    @pulumi.getter(name="googleKeyRing")
    def google_key_ring(self) -> _builtins.str:
        return pulumi.get(self, "google_key_ring")

    @_builtins.property
    @pulumi.getter(name="googleLocation")
    def google_location(self) -> _builtins.str:
        return pulumi.get(self, "google_location")

    @_builtins.property
    @pulumi.getter(name="googlePrivateKeyId")
    def google_private_key_id(self) -> _builtins.str:
        return pulumi.get(self, "google_private_key_id")

    @_builtins.property
    @pulumi.getter(name="googleProjectId")
    def google_project_id(self) -> _builtins.str:
        return pulumi.get(self, "google_project_id")

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "groups")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="ibmApiEndpoint")
    def ibm_api_endpoint(self) -> _builtins.str:
        return pulumi.get(self, "ibm_api_endpoint")

    @_builtins.property
    @pulumi.getter(name="ibmApiKey")
    def ibm_api_key(self) -> _builtins.str:
        return pulumi.get(self, "ibm_api_key")

    @_builtins.property
    @pulumi.getter(name="ibmIamEndpoint")
    def ibm_iam_endpoint(self) -> _builtins.str:
        return pulumi.get(self, "ibm_iam_endpoint")

    @_builtins.property
    @pulumi.getter(name="ibmInstanceId")
    def ibm_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "ibm_instance_id")

    @_builtins.property
    @pulumi.getter(name="ibmKeyRing")
    def ibm_key_ring(self) -> _builtins.str:
        return pulumi.get(self, "ibm_key_ring")

    @_builtins.property
    @pulumi.getter(name="ibmVariant")
    def ibm_variant(self) -> _builtins.str:
        return pulumi.get(self, "ibm_variant")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="keystoreId")
    def keystore_id(self) -> _builtins.str:
        return pulumi.get(self, "keystore_id")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="ukoVault")
    def uko_vault(self) -> _builtins.str:
        return pulumi.get(self, "uko_vault")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> _builtins.str:
        return pulumi.get(self, "updated_by")

    @_builtins.property
    @pulumi.getter
    def vaults(self) -> Sequence['outputs.GetHpcsKeystoreVaultResult']:
        return pulumi.get(self, "vaults")


class AwaitableGetHpcsKeystoreResult(GetHpcsKeystoreResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetHpcsKeystoreResult(
            aws_access_key_id=self.aws_access_key_id,
            aws_region=self.aws_region,
            aws_secret_access_key=self.aws_secret_access_key,
            azure_environment=self.azure_environment,
            azure_location=self.azure_location,
            azure_resource_group=self.azure_resource_group,
            azure_service_name=self.azure_service_name,
            azure_service_principal_client_id=self.azure_service_principal_client_id,
            azure_service_principal_password=self.azure_service_principal_password,
            azure_subscription_id=self.azure_subscription_id,
            azure_tenant=self.azure_tenant,
            created_at=self.created_at,
            created_by=self.created_by,
            description=self.description,
            google_credentials=self.google_credentials,
            google_key_ring=self.google_key_ring,
            google_location=self.google_location,
            google_private_key_id=self.google_private_key_id,
            google_project_id=self.google_project_id,
            groups=self.groups,
            href=self.href,
            ibm_api_endpoint=self.ibm_api_endpoint,
            ibm_api_key=self.ibm_api_key,
            ibm_iam_endpoint=self.ibm_iam_endpoint,
            ibm_instance_id=self.ibm_instance_id,
            ibm_key_ring=self.ibm_key_ring,
            ibm_variant=self.ibm_variant,
            id=self.id,
            instance_id=self.instance_id,
            keystore_id=self.keystore_id,
            location=self.location,
            name=self.name,
            region=self.region,
            type=self.type,
            uko_vault=self.uko_vault,
            updated_at=self.updated_at,
            updated_by=self.updated_by,
            vaults=self.vaults)


def get_hpcs_keystore(id: Optional[_builtins.str] = None,
                      instance_id: Optional[_builtins.str] = None,
                      keystore_id: Optional[_builtins.str] = None,
                      region: Optional[_builtins.str] = None,
                      uko_vault: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetHpcsKeystoreResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['keystoreId'] = keystore_id
    __args__['region'] = region
    __args__['ukoVault'] = uko_vault
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getHpcsKeystore:getHpcsKeystore', __args__, opts=opts, typ=GetHpcsKeystoreResult, package_ref=_utilities.get_package()).value

    return AwaitableGetHpcsKeystoreResult(
        aws_access_key_id=pulumi.get(__ret__, 'aws_access_key_id'),
        aws_region=pulumi.get(__ret__, 'aws_region'),
        aws_secret_access_key=pulumi.get(__ret__, 'aws_secret_access_key'),
        azure_environment=pulumi.get(__ret__, 'azure_environment'),
        azure_location=pulumi.get(__ret__, 'azure_location'),
        azure_resource_group=pulumi.get(__ret__, 'azure_resource_group'),
        azure_service_name=pulumi.get(__ret__, 'azure_service_name'),
        azure_service_principal_client_id=pulumi.get(__ret__, 'azure_service_principal_client_id'),
        azure_service_principal_password=pulumi.get(__ret__, 'azure_service_principal_password'),
        azure_subscription_id=pulumi.get(__ret__, 'azure_subscription_id'),
        azure_tenant=pulumi.get(__ret__, 'azure_tenant'),
        created_at=pulumi.get(__ret__, 'created_at'),
        created_by=pulumi.get(__ret__, 'created_by'),
        description=pulumi.get(__ret__, 'description'),
        google_credentials=pulumi.get(__ret__, 'google_credentials'),
        google_key_ring=pulumi.get(__ret__, 'google_key_ring'),
        google_location=pulumi.get(__ret__, 'google_location'),
        google_private_key_id=pulumi.get(__ret__, 'google_private_key_id'),
        google_project_id=pulumi.get(__ret__, 'google_project_id'),
        groups=pulumi.get(__ret__, 'groups'),
        href=pulumi.get(__ret__, 'href'),
        ibm_api_endpoint=pulumi.get(__ret__, 'ibm_api_endpoint'),
        ibm_api_key=pulumi.get(__ret__, 'ibm_api_key'),
        ibm_iam_endpoint=pulumi.get(__ret__, 'ibm_iam_endpoint'),
        ibm_instance_id=pulumi.get(__ret__, 'ibm_instance_id'),
        ibm_key_ring=pulumi.get(__ret__, 'ibm_key_ring'),
        ibm_variant=pulumi.get(__ret__, 'ibm_variant'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        keystore_id=pulumi.get(__ret__, 'keystore_id'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        type=pulumi.get(__ret__, 'type'),
        uko_vault=pulumi.get(__ret__, 'uko_vault'),
        updated_at=pulumi.get(__ret__, 'updated_at'),
        updated_by=pulumi.get(__ret__, 'updated_by'),
        vaults=pulumi.get(__ret__, 'vaults'))
def get_hpcs_keystore_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                             keystore_id: Optional[pulumi.Input[_builtins.str]] = None,
                             region: Optional[pulumi.Input[_builtins.str]] = None,
                             uko_vault: Optional[pulumi.Input[_builtins.str]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetHpcsKeystoreResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['keystoreId'] = keystore_id
    __args__['region'] = region
    __args__['ukoVault'] = uko_vault
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getHpcsKeystore:getHpcsKeystore', __args__, opts=opts, typ=GetHpcsKeystoreResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetHpcsKeystoreResult(
        aws_access_key_id=pulumi.get(__response__, 'aws_access_key_id'),
        aws_region=pulumi.get(__response__, 'aws_region'),
        aws_secret_access_key=pulumi.get(__response__, 'aws_secret_access_key'),
        azure_environment=pulumi.get(__response__, 'azure_environment'),
        azure_location=pulumi.get(__response__, 'azure_location'),
        azure_resource_group=pulumi.get(__response__, 'azure_resource_group'),
        azure_service_name=pulumi.get(__response__, 'azure_service_name'),
        azure_service_principal_client_id=pulumi.get(__response__, 'azure_service_principal_client_id'),
        azure_service_principal_password=pulumi.get(__response__, 'azure_service_principal_password'),
        azure_subscription_id=pulumi.get(__response__, 'azure_subscription_id'),
        azure_tenant=pulumi.get(__response__, 'azure_tenant'),
        created_at=pulumi.get(__response__, 'created_at'),
        created_by=pulumi.get(__response__, 'created_by'),
        description=pulumi.get(__response__, 'description'),
        google_credentials=pulumi.get(__response__, 'google_credentials'),
        google_key_ring=pulumi.get(__response__, 'google_key_ring'),
        google_location=pulumi.get(__response__, 'google_location'),
        google_private_key_id=pulumi.get(__response__, 'google_private_key_id'),
        google_project_id=pulumi.get(__response__, 'google_project_id'),
        groups=pulumi.get(__response__, 'groups'),
        href=pulumi.get(__response__, 'href'),
        ibm_api_endpoint=pulumi.get(__response__, 'ibm_api_endpoint'),
        ibm_api_key=pulumi.get(__response__, 'ibm_api_key'),
        ibm_iam_endpoint=pulumi.get(__response__, 'ibm_iam_endpoint'),
        ibm_instance_id=pulumi.get(__response__, 'ibm_instance_id'),
        ibm_key_ring=pulumi.get(__response__, 'ibm_key_ring'),
        ibm_variant=pulumi.get(__response__, 'ibm_variant'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        keystore_id=pulumi.get(__response__, 'keystore_id'),
        location=pulumi.get(__response__, 'location'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        type=pulumi.get(__response__, 'type'),
        uko_vault=pulumi.get(__response__, 'uko_vault'),
        updated_at=pulumi.get(__response__, 'updated_at'),
        updated_by=pulumi.get(__response__, 'updated_by'),
        vaults=pulumi.get(__response__, 'vaults')))
