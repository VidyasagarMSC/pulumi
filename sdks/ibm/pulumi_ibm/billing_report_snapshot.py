# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BillingReportSnapshotArgs', 'BillingReportSnapshot']

@pulumi.input_type
class BillingReportSnapshotArgs:
    def __init__(__self__, *,
                 cos_bucket: pulumi.Input[_builtins.str],
                 cos_location: pulumi.Input[_builtins.str],
                 interval: pulumi.Input[_builtins.str],
                 billing_report_snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cos_reports_folder: Optional[pulumi.Input[_builtins.str]] = None,
                 report_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 versioning: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a BillingReportSnapshot resource.
        :param pulumi.Input[_builtins.str] cos_bucket: The name of the COS bucket to store the snapshot of the billing reports.
        :param pulumi.Input[_builtins.str] cos_location: Region of the COS instance.
        :param pulumi.Input[_builtins.str] interval: Frequency of taking the snapshot of the billing reports.
        :param pulumi.Input[_builtins.str] cos_reports_folder: The billing reports root folder to store the billing reports snapshots. Defaults to "IBMCloud-Billing-Reports".
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] report_types: The type of billing reports to take snapshot of. Possible values are [account_summary, enterprise_summary,
               account_resource_instance_usage].
        :param pulumi.Input[_builtins.str] versioning: A new version of report is created or the existing report version is overwritten with every update.
        """
        pulumi.set(__self__, "cos_bucket", cos_bucket)
        pulumi.set(__self__, "cos_location", cos_location)
        pulumi.set(__self__, "interval", interval)
        if billing_report_snapshot_id is not None:
            pulumi.set(__self__, "billing_report_snapshot_id", billing_report_snapshot_id)
        if cos_reports_folder is not None:
            pulumi.set(__self__, "cos_reports_folder", cos_reports_folder)
        if report_types is not None:
            pulumi.set(__self__, "report_types", report_types)
        if versioning is not None:
            pulumi.set(__self__, "versioning", versioning)

    @_builtins.property
    @pulumi.getter(name="cosBucket")
    def cos_bucket(self) -> pulumi.Input[_builtins.str]:
        """
        The name of the COS bucket to store the snapshot of the billing reports.
        """
        return pulumi.get(self, "cos_bucket")

    @cos_bucket.setter
    def cos_bucket(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cos_bucket", value)

    @_builtins.property
    @pulumi.getter(name="cosLocation")
    def cos_location(self) -> pulumi.Input[_builtins.str]:
        """
        Region of the COS instance.
        """
        return pulumi.get(self, "cos_location")

    @cos_location.setter
    def cos_location(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cos_location", value)

    @_builtins.property
    @pulumi.getter
    def interval(self) -> pulumi.Input[_builtins.str]:
        """
        Frequency of taking the snapshot of the billing reports.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "interval", value)

    @_builtins.property
    @pulumi.getter(name="billingReportSnapshotId")
    def billing_report_snapshot_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "billing_report_snapshot_id")

    @billing_report_snapshot_id.setter
    def billing_report_snapshot_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "billing_report_snapshot_id", value)

    @_builtins.property
    @pulumi.getter(name="cosReportsFolder")
    def cos_reports_folder(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The billing reports root folder to store the billing reports snapshots. Defaults to "IBMCloud-Billing-Reports".
        """
        return pulumi.get(self, "cos_reports_folder")

    @cos_reports_folder.setter
    def cos_reports_folder(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cos_reports_folder", value)

    @_builtins.property
    @pulumi.getter(name="reportTypes")
    def report_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The type of billing reports to take snapshot of. Possible values are [account_summary, enterprise_summary,
        account_resource_instance_usage].
        """
        return pulumi.get(self, "report_types")

    @report_types.setter
    def report_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "report_types", value)

    @_builtins.property
    @pulumi.getter
    def versioning(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A new version of report is created or the existing report version is overwritten with every update.
        """
        return pulumi.get(self, "versioning")

    @versioning.setter
    def versioning(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "versioning", value)


@pulumi.input_type
class _BillingReportSnapshotState:
    def __init__(__self__, *,
                 account_type: Optional[pulumi.Input[_builtins.str]] = None,
                 billing_report_snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                 compression: Optional[pulumi.Input[_builtins.str]] = None,
                 content_type: Optional[pulumi.Input[_builtins.str]] = None,
                 cos_bucket: Optional[pulumi.Input[_builtins.str]] = None,
                 cos_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 cos_location: Optional[pulumi.Input[_builtins.str]] = None,
                 cos_reports_folder: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.float]] = None,
                 histories: Optional[pulumi.Input[Sequence[pulumi.Input['BillingReportSnapshotHistoryArgs']]]] = None,
                 interval: Optional[pulumi.Input[_builtins.str]] = None,
                 last_updated_at: Optional[pulumi.Input[_builtins.float]] = None,
                 report_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 versioning: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering BillingReportSnapshot resources.
        :param pulumi.Input[_builtins.str] account_type: Type of account. Possible values are [enterprise, account].
        :param pulumi.Input[_builtins.str] compression: Compression format of the snapshot report.
        :param pulumi.Input[_builtins.str] content_type: Type of content stored in snapshot report.
        :param pulumi.Input[_builtins.str] cos_bucket: The name of the COS bucket to store the snapshot of the billing reports.
        :param pulumi.Input[_builtins.str] cos_endpoint: The endpoint of the COS instance.
        :param pulumi.Input[_builtins.str] cos_location: Region of the COS instance.
        :param pulumi.Input[_builtins.str] cos_reports_folder: The billing reports root folder to store the billing reports snapshots. Defaults to "IBMCloud-Billing-Reports".
        :param pulumi.Input[_builtins.float] created_at: Timestamp in milliseconds when the snapshot configuration was created.
        :param pulumi.Input[Sequence[pulumi.Input['BillingReportSnapshotHistoryArgs']]] histories: List of previous versions of the snapshot configurations.
        :param pulumi.Input[_builtins.str] interval: Frequency of taking the snapshot of the billing reports.
        :param pulumi.Input[_builtins.float] last_updated_at: Timestamp in milliseconds when the snapshot configuration was last updated.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] report_types: The type of billing reports to take snapshot of. Possible values are [account_summary, enterprise_summary,
               account_resource_instance_usage].
        :param pulumi.Input[_builtins.str] state: Status of the billing snapshot configuration. Possible values are [enabled, disabled].
        :param pulumi.Input[_builtins.str] versioning: A new version of report is created or the existing report version is overwritten with every update.
        """
        if account_type is not None:
            pulumi.set(__self__, "account_type", account_type)
        if billing_report_snapshot_id is not None:
            pulumi.set(__self__, "billing_report_snapshot_id", billing_report_snapshot_id)
        if compression is not None:
            pulumi.set(__self__, "compression", compression)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if cos_bucket is not None:
            pulumi.set(__self__, "cos_bucket", cos_bucket)
        if cos_endpoint is not None:
            pulumi.set(__self__, "cos_endpoint", cos_endpoint)
        if cos_location is not None:
            pulumi.set(__self__, "cos_location", cos_location)
        if cos_reports_folder is not None:
            pulumi.set(__self__, "cos_reports_folder", cos_reports_folder)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if histories is not None:
            pulumi.set(__self__, "histories", histories)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if last_updated_at is not None:
            pulumi.set(__self__, "last_updated_at", last_updated_at)
        if report_types is not None:
            pulumi.set(__self__, "report_types", report_types)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if versioning is not None:
            pulumi.set(__self__, "versioning", versioning)

    @_builtins.property
    @pulumi.getter(name="accountType")
    def account_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of account. Possible values are [enterprise, account].
        """
        return pulumi.get(self, "account_type")

    @account_type.setter
    def account_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_type", value)

    @_builtins.property
    @pulumi.getter(name="billingReportSnapshotId")
    def billing_report_snapshot_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "billing_report_snapshot_id")

    @billing_report_snapshot_id.setter
    def billing_report_snapshot_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "billing_report_snapshot_id", value)

    @_builtins.property
    @pulumi.getter
    def compression(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Compression format of the snapshot report.
        """
        return pulumi.get(self, "compression")

    @compression.setter
    def compression(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compression", value)

    @_builtins.property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of content stored in snapshot report.
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "content_type", value)

    @_builtins.property
    @pulumi.getter(name="cosBucket")
    def cos_bucket(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the COS bucket to store the snapshot of the billing reports.
        """
        return pulumi.get(self, "cos_bucket")

    @cos_bucket.setter
    def cos_bucket(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cos_bucket", value)

    @_builtins.property
    @pulumi.getter(name="cosEndpoint")
    def cos_endpoint(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The endpoint of the COS instance.
        """
        return pulumi.get(self, "cos_endpoint")

    @cos_endpoint.setter
    def cos_endpoint(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cos_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="cosLocation")
    def cos_location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Region of the COS instance.
        """
        return pulumi.get(self, "cos_location")

    @cos_location.setter
    def cos_location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cos_location", value)

    @_builtins.property
    @pulumi.getter(name="cosReportsFolder")
    def cos_reports_folder(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The billing reports root folder to store the billing reports snapshots. Defaults to "IBMCloud-Billing-Reports".
        """
        return pulumi.get(self, "cos_reports_folder")

    @cos_reports_folder.setter
    def cos_reports_folder(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cos_reports_folder", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Timestamp in milliseconds when the snapshot configuration was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def histories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BillingReportSnapshotHistoryArgs']]]]:
        """
        List of previous versions of the snapshot configurations.
        """
        return pulumi.get(self, "histories")

    @histories.setter
    def histories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BillingReportSnapshotHistoryArgs']]]]):
        pulumi.set(self, "histories", value)

    @_builtins.property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Frequency of taking the snapshot of the billing reports.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interval", value)

    @_builtins.property
    @pulumi.getter(name="lastUpdatedAt")
    def last_updated_at(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Timestamp in milliseconds when the snapshot configuration was last updated.
        """
        return pulumi.get(self, "last_updated_at")

    @last_updated_at.setter
    def last_updated_at(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "last_updated_at", value)

    @_builtins.property
    @pulumi.getter(name="reportTypes")
    def report_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The type of billing reports to take snapshot of. Possible values are [account_summary, enterprise_summary,
        account_resource_instance_usage].
        """
        return pulumi.get(self, "report_types")

    @report_types.setter
    def report_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "report_types", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Status of the billing snapshot configuration. Possible values are [enabled, disabled].
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)

    @_builtins.property
    @pulumi.getter
    def versioning(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A new version of report is created or the existing report version is overwritten with every update.
        """
        return pulumi.get(self, "versioning")

    @versioning.setter
    def versioning(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "versioning", value)


@pulumi.type_token("ibm:index/billingReportSnapshot:BillingReportSnapshot")
class BillingReportSnapshot(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 billing_report_snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cos_bucket: Optional[pulumi.Input[_builtins.str]] = None,
                 cos_location: Optional[pulumi.Input[_builtins.str]] = None,
                 cos_reports_folder: Optional[pulumi.Input[_builtins.str]] = None,
                 interval: Optional[pulumi.Input[_builtins.str]] = None,
                 report_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 versioning: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a BillingReportSnapshot resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cos_bucket: The name of the COS bucket to store the snapshot of the billing reports.
        :param pulumi.Input[_builtins.str] cos_location: Region of the COS instance.
        :param pulumi.Input[_builtins.str] cos_reports_folder: The billing reports root folder to store the billing reports snapshots. Defaults to "IBMCloud-Billing-Reports".
        :param pulumi.Input[_builtins.str] interval: Frequency of taking the snapshot of the billing reports.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] report_types: The type of billing reports to take snapshot of. Possible values are [account_summary, enterprise_summary,
               account_resource_instance_usage].
        :param pulumi.Input[_builtins.str] versioning: A new version of report is created or the existing report version is overwritten with every update.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BillingReportSnapshotArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a BillingReportSnapshot resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param BillingReportSnapshotArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BillingReportSnapshotArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 billing_report_snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cos_bucket: Optional[pulumi.Input[_builtins.str]] = None,
                 cos_location: Optional[pulumi.Input[_builtins.str]] = None,
                 cos_reports_folder: Optional[pulumi.Input[_builtins.str]] = None,
                 interval: Optional[pulumi.Input[_builtins.str]] = None,
                 report_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 versioning: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BillingReportSnapshotArgs.__new__(BillingReportSnapshotArgs)

            __props__.__dict__["billing_report_snapshot_id"] = billing_report_snapshot_id
            if cos_bucket is None and not opts.urn:
                raise TypeError("Missing required property 'cos_bucket'")
            __props__.__dict__["cos_bucket"] = cos_bucket
            if cos_location is None and not opts.urn:
                raise TypeError("Missing required property 'cos_location'")
            __props__.__dict__["cos_location"] = cos_location
            __props__.__dict__["cos_reports_folder"] = cos_reports_folder
            if interval is None and not opts.urn:
                raise TypeError("Missing required property 'interval'")
            __props__.__dict__["interval"] = interval
            __props__.__dict__["report_types"] = report_types
            __props__.__dict__["versioning"] = versioning
            __props__.__dict__["account_type"] = None
            __props__.__dict__["compression"] = None
            __props__.__dict__["content_type"] = None
            __props__.__dict__["cos_endpoint"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["histories"] = None
            __props__.__dict__["last_updated_at"] = None
            __props__.__dict__["state"] = None
        super(BillingReportSnapshot, __self__).__init__(
            'ibm:index/billingReportSnapshot:BillingReportSnapshot',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_type: Optional[pulumi.Input[_builtins.str]] = None,
            billing_report_snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
            compression: Optional[pulumi.Input[_builtins.str]] = None,
            content_type: Optional[pulumi.Input[_builtins.str]] = None,
            cos_bucket: Optional[pulumi.Input[_builtins.str]] = None,
            cos_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
            cos_location: Optional[pulumi.Input[_builtins.str]] = None,
            cos_reports_folder: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.float]] = None,
            histories: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BillingReportSnapshotHistoryArgs', 'BillingReportSnapshotHistoryArgsDict']]]]] = None,
            interval: Optional[pulumi.Input[_builtins.str]] = None,
            last_updated_at: Optional[pulumi.Input[_builtins.float]] = None,
            report_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            state: Optional[pulumi.Input[_builtins.str]] = None,
            versioning: Optional[pulumi.Input[_builtins.str]] = None) -> 'BillingReportSnapshot':
        """
        Get an existing BillingReportSnapshot resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] account_type: Type of account. Possible values are [enterprise, account].
        :param pulumi.Input[_builtins.str] compression: Compression format of the snapshot report.
        :param pulumi.Input[_builtins.str] content_type: Type of content stored in snapshot report.
        :param pulumi.Input[_builtins.str] cos_bucket: The name of the COS bucket to store the snapshot of the billing reports.
        :param pulumi.Input[_builtins.str] cos_endpoint: The endpoint of the COS instance.
        :param pulumi.Input[_builtins.str] cos_location: Region of the COS instance.
        :param pulumi.Input[_builtins.str] cos_reports_folder: The billing reports root folder to store the billing reports snapshots. Defaults to "IBMCloud-Billing-Reports".
        :param pulumi.Input[_builtins.float] created_at: Timestamp in milliseconds when the snapshot configuration was created.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BillingReportSnapshotHistoryArgs', 'BillingReportSnapshotHistoryArgsDict']]]] histories: List of previous versions of the snapshot configurations.
        :param pulumi.Input[_builtins.str] interval: Frequency of taking the snapshot of the billing reports.
        :param pulumi.Input[_builtins.float] last_updated_at: Timestamp in milliseconds when the snapshot configuration was last updated.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] report_types: The type of billing reports to take snapshot of. Possible values are [account_summary, enterprise_summary,
               account_resource_instance_usage].
        :param pulumi.Input[_builtins.str] state: Status of the billing snapshot configuration. Possible values are [enabled, disabled].
        :param pulumi.Input[_builtins.str] versioning: A new version of report is created or the existing report version is overwritten with every update.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BillingReportSnapshotState.__new__(_BillingReportSnapshotState)

        __props__.__dict__["account_type"] = account_type
        __props__.__dict__["billing_report_snapshot_id"] = billing_report_snapshot_id
        __props__.__dict__["compression"] = compression
        __props__.__dict__["content_type"] = content_type
        __props__.__dict__["cos_bucket"] = cos_bucket
        __props__.__dict__["cos_endpoint"] = cos_endpoint
        __props__.__dict__["cos_location"] = cos_location
        __props__.__dict__["cos_reports_folder"] = cos_reports_folder
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["histories"] = histories
        __props__.__dict__["interval"] = interval
        __props__.__dict__["last_updated_at"] = last_updated_at
        __props__.__dict__["report_types"] = report_types
        __props__.__dict__["state"] = state
        __props__.__dict__["versioning"] = versioning
        return BillingReportSnapshot(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accountType")
    def account_type(self) -> pulumi.Output[_builtins.str]:
        """
        Type of account. Possible values are [enterprise, account].
        """
        return pulumi.get(self, "account_type")

    @_builtins.property
    @pulumi.getter(name="billingReportSnapshotId")
    def billing_report_snapshot_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "billing_report_snapshot_id")

    @_builtins.property
    @pulumi.getter
    def compression(self) -> pulumi.Output[_builtins.str]:
        """
        Compression format of the snapshot report.
        """
        return pulumi.get(self, "compression")

    @_builtins.property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Output[_builtins.str]:
        """
        Type of content stored in snapshot report.
        """
        return pulumi.get(self, "content_type")

    @_builtins.property
    @pulumi.getter(name="cosBucket")
    def cos_bucket(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the COS bucket to store the snapshot of the billing reports.
        """
        return pulumi.get(self, "cos_bucket")

    @_builtins.property
    @pulumi.getter(name="cosEndpoint")
    def cos_endpoint(self) -> pulumi.Output[_builtins.str]:
        """
        The endpoint of the COS instance.
        """
        return pulumi.get(self, "cos_endpoint")

    @_builtins.property
    @pulumi.getter(name="cosLocation")
    def cos_location(self) -> pulumi.Output[_builtins.str]:
        """
        Region of the COS instance.
        """
        return pulumi.get(self, "cos_location")

    @_builtins.property
    @pulumi.getter(name="cosReportsFolder")
    def cos_reports_folder(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The billing reports root folder to store the billing reports snapshots. Defaults to "IBMCloud-Billing-Reports".
        """
        return pulumi.get(self, "cos_reports_folder")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.float]:
        """
        Timestamp in milliseconds when the snapshot configuration was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def histories(self) -> pulumi.Output[Sequence['outputs.BillingReportSnapshotHistory']]:
        """
        List of previous versions of the snapshot configurations.
        """
        return pulumi.get(self, "histories")

    @_builtins.property
    @pulumi.getter
    def interval(self) -> pulumi.Output[_builtins.str]:
        """
        Frequency of taking the snapshot of the billing reports.
        """
        return pulumi.get(self, "interval")

    @_builtins.property
    @pulumi.getter(name="lastUpdatedAt")
    def last_updated_at(self) -> pulumi.Output[_builtins.float]:
        """
        Timestamp in milliseconds when the snapshot configuration was last updated.
        """
        return pulumi.get(self, "last_updated_at")

    @_builtins.property
    @pulumi.getter(name="reportTypes")
    def report_types(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        The type of billing reports to take snapshot of. Possible values are [account_summary, enterprise_summary,
        account_resource_instance_usage].
        """
        return pulumi.get(self, "report_types")

    @_builtins.property
    @pulumi.getter
    def state(self) -> pulumi.Output[_builtins.str]:
        """
        Status of the billing snapshot configuration. Possible values are [enabled, disabled].
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def versioning(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        A new version of report is created or the existing report version is overwritten with every update.
        """
        return pulumi.get(self, "versioning")

