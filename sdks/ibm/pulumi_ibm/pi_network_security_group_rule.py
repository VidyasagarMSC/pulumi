# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PiNetworkSecurityGroupRuleInitArgs', 'PiNetworkSecurityGroupRule']

@pulumi.input_type
class PiNetworkSecurityGroupRuleInitArgs:
    def __init__(__self__, *,
                 pi_cloud_instance_id: pulumi.Input[_builtins.str],
                 pi_network_security_group_id: pulumi.Input[_builtins.str],
                 ibm_pi_network_security_group_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_action: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_destination_port: Optional[pulumi.Input['PiNetworkSecurityGroupRulePiDestinationPortArgs']] = None,
                 pi_destination_ports: Optional[pulumi.Input['PiNetworkSecurityGroupRulePiDestinationPortsArgs']] = None,
                 pi_network_security_group_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_protocol: Optional[pulumi.Input['PiNetworkSecurityGroupRulePiProtocolArgs']] = None,
                 pi_remote: Optional[pulumi.Input['PiNetworkSecurityGroupRulePiRemoteArgs']] = None,
                 pi_source_port: Optional[pulumi.Input['PiNetworkSecurityGroupRulePiSourcePortArgs']] = None,
                 pi_source_ports: Optional[pulumi.Input['PiNetworkSecurityGroupRulePiSourcePortsArgs']] = None,
                 timeouts: Optional[pulumi.Input['PiNetworkSecurityGroupRuleTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a PiNetworkSecurityGroupRule resource.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_network_security_group_id: The unique identifier of the network security group.
        :param pulumi.Input[_builtins.str] pi_action: The action to take if the rule matches network traffic.
        :param pulumi.Input['PiNetworkSecurityGroupRulePiDestinationPortArgs'] pi_destination_port: Destination port ranges.
        :param pulumi.Input['PiNetworkSecurityGroupRulePiDestinationPortsArgs'] pi_destination_ports: Destination port ranges.
        :param pulumi.Input[_builtins.str] pi_network_security_group_rule_id: The network security group rule id to remove.
        :param pulumi.Input['PiNetworkSecurityGroupRulePiProtocolArgs'] pi_protocol: The protocol of the network traffic.
        :param pulumi.Input['PiNetworkSecurityGroupRulePiRemoteArgs'] pi_remote: The protocol of the network traffic.
        :param pulumi.Input['PiNetworkSecurityGroupRulePiSourcePortArgs'] pi_source_port: Source port ranges.
        :param pulumi.Input['PiNetworkSecurityGroupRulePiSourcePortsArgs'] pi_source_ports: Source port ranges.
        """
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        pulumi.set(__self__, "pi_network_security_group_id", pi_network_security_group_id)
        if ibm_pi_network_security_group_rule_id is not None:
            pulumi.set(__self__, "ibm_pi_network_security_group_rule_id", ibm_pi_network_security_group_rule_id)
        if pi_action is not None:
            pulumi.set(__self__, "pi_action", pi_action)
        if pi_destination_port is not None:
            pulumi.set(__self__, "pi_destination_port", pi_destination_port)
        if pi_destination_ports is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""pi_destination_ports is deprecated: Deprecated""")
        if pi_destination_ports is not None:
            pulumi.set(__self__, "pi_destination_ports", pi_destination_ports)
        if pi_network_security_group_rule_id is not None:
            pulumi.set(__self__, "pi_network_security_group_rule_id", pi_network_security_group_rule_id)
        if pi_protocol is not None:
            pulumi.set(__self__, "pi_protocol", pi_protocol)
        if pi_remote is not None:
            pulumi.set(__self__, "pi_remote", pi_remote)
        if pi_source_port is not None:
            pulumi.set(__self__, "pi_source_port", pi_source_port)
        if pi_source_ports is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""pi_source_ports is deprecated: Deprecated""")
        if pi_source_ports is not None:
            pulumi.set(__self__, "pi_source_ports", pi_source_ports)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piNetworkSecurityGroupId")
    def pi_network_security_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        The unique identifier of the network security group.
        """
        return pulumi.get(self, "pi_network_security_group_id")

    @pi_network_security_group_id.setter
    def pi_network_security_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_network_security_group_id", value)

    @_builtins.property
    @pulumi.getter(name="ibmPiNetworkSecurityGroupRuleId")
    def ibm_pi_network_security_group_rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ibm_pi_network_security_group_rule_id")

    @ibm_pi_network_security_group_rule_id.setter
    def ibm_pi_network_security_group_rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ibm_pi_network_security_group_rule_id", value)

    @_builtins.property
    @pulumi.getter(name="piAction")
    def pi_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The action to take if the rule matches network traffic.
        """
        return pulumi.get(self, "pi_action")

    @pi_action.setter
    def pi_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_action", value)

    @_builtins.property
    @pulumi.getter(name="piDestinationPort")
    def pi_destination_port(self) -> Optional[pulumi.Input['PiNetworkSecurityGroupRulePiDestinationPortArgs']]:
        """
        Destination port ranges.
        """
        return pulumi.get(self, "pi_destination_port")

    @pi_destination_port.setter
    def pi_destination_port(self, value: Optional[pulumi.Input['PiNetworkSecurityGroupRulePiDestinationPortArgs']]):
        pulumi.set(self, "pi_destination_port", value)

    @_builtins.property
    @pulumi.getter(name="piDestinationPorts")
    @_utilities.deprecated("""Deprecated""")
    def pi_destination_ports(self) -> Optional[pulumi.Input['PiNetworkSecurityGroupRulePiDestinationPortsArgs']]:
        """
        Destination port ranges.
        """
        return pulumi.get(self, "pi_destination_ports")

    @pi_destination_ports.setter
    def pi_destination_ports(self, value: Optional[pulumi.Input['PiNetworkSecurityGroupRulePiDestinationPortsArgs']]):
        pulumi.set(self, "pi_destination_ports", value)

    @_builtins.property
    @pulumi.getter(name="piNetworkSecurityGroupRuleId")
    def pi_network_security_group_rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The network security group rule id to remove.
        """
        return pulumi.get(self, "pi_network_security_group_rule_id")

    @pi_network_security_group_rule_id.setter
    def pi_network_security_group_rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_network_security_group_rule_id", value)

    @_builtins.property
    @pulumi.getter(name="piProtocol")
    def pi_protocol(self) -> Optional[pulumi.Input['PiNetworkSecurityGroupRulePiProtocolArgs']]:
        """
        The protocol of the network traffic.
        """
        return pulumi.get(self, "pi_protocol")

    @pi_protocol.setter
    def pi_protocol(self, value: Optional[pulumi.Input['PiNetworkSecurityGroupRulePiProtocolArgs']]):
        pulumi.set(self, "pi_protocol", value)

    @_builtins.property
    @pulumi.getter(name="piRemote")
    def pi_remote(self) -> Optional[pulumi.Input['PiNetworkSecurityGroupRulePiRemoteArgs']]:
        """
        The protocol of the network traffic.
        """
        return pulumi.get(self, "pi_remote")

    @pi_remote.setter
    def pi_remote(self, value: Optional[pulumi.Input['PiNetworkSecurityGroupRulePiRemoteArgs']]):
        pulumi.set(self, "pi_remote", value)

    @_builtins.property
    @pulumi.getter(name="piSourcePort")
    def pi_source_port(self) -> Optional[pulumi.Input['PiNetworkSecurityGroupRulePiSourcePortArgs']]:
        """
        Source port ranges.
        """
        return pulumi.get(self, "pi_source_port")

    @pi_source_port.setter
    def pi_source_port(self, value: Optional[pulumi.Input['PiNetworkSecurityGroupRulePiSourcePortArgs']]):
        pulumi.set(self, "pi_source_port", value)

    @_builtins.property
    @pulumi.getter(name="piSourcePorts")
    @_utilities.deprecated("""Deprecated""")
    def pi_source_ports(self) -> Optional[pulumi.Input['PiNetworkSecurityGroupRulePiSourcePortsArgs']]:
        """
        Source port ranges.
        """
        return pulumi.get(self, "pi_source_ports")

    @pi_source_ports.setter
    def pi_source_ports(self, value: Optional[pulumi.Input['PiNetworkSecurityGroupRulePiSourcePortsArgs']]):
        pulumi.set(self, "pi_source_ports", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiNetworkSecurityGroupRuleTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiNetworkSecurityGroupRuleTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _PiNetworkSecurityGroupRuleState:
    def __init__(__self__, *,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 default: Optional[pulumi.Input[_builtins.bool]] = None,
                 ibm_pi_network_security_group_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['PiNetworkSecurityGroupRuleMemberArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_security_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_action: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_destination_port: Optional[pulumi.Input['PiNetworkSecurityGroupRulePiDestinationPortArgs']] = None,
                 pi_destination_ports: Optional[pulumi.Input['PiNetworkSecurityGroupRulePiDestinationPortsArgs']] = None,
                 pi_network_security_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_network_security_group_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_protocol: Optional[pulumi.Input['PiNetworkSecurityGroupRulePiProtocolArgs']] = None,
                 pi_remote: Optional[pulumi.Input['PiNetworkSecurityGroupRulePiRemoteArgs']] = None,
                 pi_source_port: Optional[pulumi.Input['PiNetworkSecurityGroupRulePiSourcePortArgs']] = None,
                 pi_source_ports: Optional[pulumi.Input['PiNetworkSecurityGroupRulePiSourcePortsArgs']] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['PiNetworkSecurityGroupRuleRuleArgs']]]] = None,
                 timeouts: Optional[pulumi.Input['PiNetworkSecurityGroupRuleTimeoutsArgs']] = None,
                 user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering PiNetworkSecurityGroupRule resources.
        :param pulumi.Input[_builtins.str] crn: The network security group's crn.
        :param pulumi.Input[_builtins.bool] default: Indicates if the network security group is the default network security group in the workspace.
        :param pulumi.Input[Sequence[pulumi.Input['PiNetworkSecurityGroupRuleMemberArgs']]] members: The list of IPv4 addresses and, or network interfaces in the network security group.
        :param pulumi.Input[_builtins.str] name: The name of the network security group.
        :param pulumi.Input[_builtins.str] network_security_group_id: The unique identifier of the network security group.
        :param pulumi.Input[_builtins.str] pi_action: The action to take if the rule matches network traffic.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input['PiNetworkSecurityGroupRulePiDestinationPortArgs'] pi_destination_port: Destination port ranges.
        :param pulumi.Input['PiNetworkSecurityGroupRulePiDestinationPortsArgs'] pi_destination_ports: Destination port ranges.
        :param pulumi.Input[_builtins.str] pi_network_security_group_id: The unique identifier of the network security group.
        :param pulumi.Input[_builtins.str] pi_network_security_group_rule_id: The network security group rule id to remove.
        :param pulumi.Input['PiNetworkSecurityGroupRulePiProtocolArgs'] pi_protocol: The protocol of the network traffic.
        :param pulumi.Input['PiNetworkSecurityGroupRulePiRemoteArgs'] pi_remote: The protocol of the network traffic.
        :param pulumi.Input['PiNetworkSecurityGroupRulePiSourcePortArgs'] pi_source_port: Source port ranges.
        :param pulumi.Input['PiNetworkSecurityGroupRulePiSourcePortsArgs'] pi_source_ports: Source port ranges.
        :param pulumi.Input[Sequence[pulumi.Input['PiNetworkSecurityGroupRuleRuleArgs']]] rules: The list of rules in the network security group.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] user_tags: List of user tags attached to the resource.
        """
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if ibm_pi_network_security_group_rule_id is not None:
            pulumi.set(__self__, "ibm_pi_network_security_group_rule_id", ibm_pi_network_security_group_rule_id)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_security_group_id is not None:
            pulumi.set(__self__, "network_security_group_id", network_security_group_id)
        if pi_action is not None:
            pulumi.set(__self__, "pi_action", pi_action)
        if pi_cloud_instance_id is not None:
            pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_destination_port is not None:
            pulumi.set(__self__, "pi_destination_port", pi_destination_port)
        if pi_destination_ports is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""pi_destination_ports is deprecated: Deprecated""")
        if pi_destination_ports is not None:
            pulumi.set(__self__, "pi_destination_ports", pi_destination_ports)
        if pi_network_security_group_id is not None:
            pulumi.set(__self__, "pi_network_security_group_id", pi_network_security_group_id)
        if pi_network_security_group_rule_id is not None:
            pulumi.set(__self__, "pi_network_security_group_rule_id", pi_network_security_group_rule_id)
        if pi_protocol is not None:
            pulumi.set(__self__, "pi_protocol", pi_protocol)
        if pi_remote is not None:
            pulumi.set(__self__, "pi_remote", pi_remote)
        if pi_source_port is not None:
            pulumi.set(__self__, "pi_source_port", pi_source_port)
        if pi_source_ports is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""pi_source_ports is deprecated: Deprecated""")
        if pi_source_ports is not None:
            pulumi.set(__self__, "pi_source_ports", pi_source_ports)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if user_tags is not None:
            pulumi.set(__self__, "user_tags", user_tags)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The network security group's crn.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if the network security group is the default network security group in the workspace.
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "default", value)

    @_builtins.property
    @pulumi.getter(name="ibmPiNetworkSecurityGroupRuleId")
    def ibm_pi_network_security_group_rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ibm_pi_network_security_group_rule_id")

    @ibm_pi_network_security_group_rule_id.setter
    def ibm_pi_network_security_group_rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ibm_pi_network_security_group_rule_id", value)

    @_builtins.property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PiNetworkSecurityGroupRuleMemberArgs']]]]:
        """
        The list of IPv4 addresses and, or network interfaces in the network security group.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PiNetworkSecurityGroupRuleMemberArgs']]]]):
        pulumi.set(self, "members", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the network security group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="networkSecurityGroupId")
    def network_security_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier of the network security group.
        """
        return pulumi.get(self, "network_security_group_id")

    @network_security_group_id.setter
    def network_security_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_security_group_id", value)

    @_builtins.property
    @pulumi.getter(name="piAction")
    def pi_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The action to take if the rule matches network traffic.
        """
        return pulumi.get(self, "pi_action")

    @pi_action.setter
    def pi_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_action", value)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piDestinationPort")
    def pi_destination_port(self) -> Optional[pulumi.Input['PiNetworkSecurityGroupRulePiDestinationPortArgs']]:
        """
        Destination port ranges.
        """
        return pulumi.get(self, "pi_destination_port")

    @pi_destination_port.setter
    def pi_destination_port(self, value: Optional[pulumi.Input['PiNetworkSecurityGroupRulePiDestinationPortArgs']]):
        pulumi.set(self, "pi_destination_port", value)

    @_builtins.property
    @pulumi.getter(name="piDestinationPorts")
    @_utilities.deprecated("""Deprecated""")
    def pi_destination_ports(self) -> Optional[pulumi.Input['PiNetworkSecurityGroupRulePiDestinationPortsArgs']]:
        """
        Destination port ranges.
        """
        return pulumi.get(self, "pi_destination_ports")

    @pi_destination_ports.setter
    def pi_destination_ports(self, value: Optional[pulumi.Input['PiNetworkSecurityGroupRulePiDestinationPortsArgs']]):
        pulumi.set(self, "pi_destination_ports", value)

    @_builtins.property
    @pulumi.getter(name="piNetworkSecurityGroupId")
    def pi_network_security_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier of the network security group.
        """
        return pulumi.get(self, "pi_network_security_group_id")

    @pi_network_security_group_id.setter
    def pi_network_security_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_network_security_group_id", value)

    @_builtins.property
    @pulumi.getter(name="piNetworkSecurityGroupRuleId")
    def pi_network_security_group_rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The network security group rule id to remove.
        """
        return pulumi.get(self, "pi_network_security_group_rule_id")

    @pi_network_security_group_rule_id.setter
    def pi_network_security_group_rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_network_security_group_rule_id", value)

    @_builtins.property
    @pulumi.getter(name="piProtocol")
    def pi_protocol(self) -> Optional[pulumi.Input['PiNetworkSecurityGroupRulePiProtocolArgs']]:
        """
        The protocol of the network traffic.
        """
        return pulumi.get(self, "pi_protocol")

    @pi_protocol.setter
    def pi_protocol(self, value: Optional[pulumi.Input['PiNetworkSecurityGroupRulePiProtocolArgs']]):
        pulumi.set(self, "pi_protocol", value)

    @_builtins.property
    @pulumi.getter(name="piRemote")
    def pi_remote(self) -> Optional[pulumi.Input['PiNetworkSecurityGroupRulePiRemoteArgs']]:
        """
        The protocol of the network traffic.
        """
        return pulumi.get(self, "pi_remote")

    @pi_remote.setter
    def pi_remote(self, value: Optional[pulumi.Input['PiNetworkSecurityGroupRulePiRemoteArgs']]):
        pulumi.set(self, "pi_remote", value)

    @_builtins.property
    @pulumi.getter(name="piSourcePort")
    def pi_source_port(self) -> Optional[pulumi.Input['PiNetworkSecurityGroupRulePiSourcePortArgs']]:
        """
        Source port ranges.
        """
        return pulumi.get(self, "pi_source_port")

    @pi_source_port.setter
    def pi_source_port(self, value: Optional[pulumi.Input['PiNetworkSecurityGroupRulePiSourcePortArgs']]):
        pulumi.set(self, "pi_source_port", value)

    @_builtins.property
    @pulumi.getter(name="piSourcePorts")
    @_utilities.deprecated("""Deprecated""")
    def pi_source_ports(self) -> Optional[pulumi.Input['PiNetworkSecurityGroupRulePiSourcePortsArgs']]:
        """
        Source port ranges.
        """
        return pulumi.get(self, "pi_source_ports")

    @pi_source_ports.setter
    def pi_source_ports(self, value: Optional[pulumi.Input['PiNetworkSecurityGroupRulePiSourcePortsArgs']]):
        pulumi.set(self, "pi_source_ports", value)

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PiNetworkSecurityGroupRuleRuleArgs']]]]:
        """
        The list of rules in the network security group.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PiNetworkSecurityGroupRuleRuleArgs']]]]):
        pulumi.set(self, "rules", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiNetworkSecurityGroupRuleTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiNetworkSecurityGroupRuleTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="userTags")
    def user_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of user tags attached to the resource.
        """
        return pulumi.get(self, "user_tags")

    @user_tags.setter
    def user_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "user_tags", value)


@pulumi.type_token("ibm:index/piNetworkSecurityGroupRule:PiNetworkSecurityGroupRule")
class PiNetworkSecurityGroupRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ibm_pi_network_security_group_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_action: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_destination_port: Optional[pulumi.Input[Union['PiNetworkSecurityGroupRulePiDestinationPortArgs', 'PiNetworkSecurityGroupRulePiDestinationPortArgsDict']]] = None,
                 pi_destination_ports: Optional[pulumi.Input[Union['PiNetworkSecurityGroupRulePiDestinationPortsArgs', 'PiNetworkSecurityGroupRulePiDestinationPortsArgsDict']]] = None,
                 pi_network_security_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_network_security_group_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_protocol: Optional[pulumi.Input[Union['PiNetworkSecurityGroupRulePiProtocolArgs', 'PiNetworkSecurityGroupRulePiProtocolArgsDict']]] = None,
                 pi_remote: Optional[pulumi.Input[Union['PiNetworkSecurityGroupRulePiRemoteArgs', 'PiNetworkSecurityGroupRulePiRemoteArgsDict']]] = None,
                 pi_source_port: Optional[pulumi.Input[Union['PiNetworkSecurityGroupRulePiSourcePortArgs', 'PiNetworkSecurityGroupRulePiSourcePortArgsDict']]] = None,
                 pi_source_ports: Optional[pulumi.Input[Union['PiNetworkSecurityGroupRulePiSourcePortsArgs', 'PiNetworkSecurityGroupRulePiSourcePortsArgsDict']]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiNetworkSecurityGroupRuleTimeoutsArgs', 'PiNetworkSecurityGroupRuleTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a PiNetworkSecurityGroupRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] pi_action: The action to take if the rule matches network traffic.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[Union['PiNetworkSecurityGroupRulePiDestinationPortArgs', 'PiNetworkSecurityGroupRulePiDestinationPortArgsDict']] pi_destination_port: Destination port ranges.
        :param pulumi.Input[Union['PiNetworkSecurityGroupRulePiDestinationPortsArgs', 'PiNetworkSecurityGroupRulePiDestinationPortsArgsDict']] pi_destination_ports: Destination port ranges.
        :param pulumi.Input[_builtins.str] pi_network_security_group_id: The unique identifier of the network security group.
        :param pulumi.Input[_builtins.str] pi_network_security_group_rule_id: The network security group rule id to remove.
        :param pulumi.Input[Union['PiNetworkSecurityGroupRulePiProtocolArgs', 'PiNetworkSecurityGroupRulePiProtocolArgsDict']] pi_protocol: The protocol of the network traffic.
        :param pulumi.Input[Union['PiNetworkSecurityGroupRulePiRemoteArgs', 'PiNetworkSecurityGroupRulePiRemoteArgsDict']] pi_remote: The protocol of the network traffic.
        :param pulumi.Input[Union['PiNetworkSecurityGroupRulePiSourcePortArgs', 'PiNetworkSecurityGroupRulePiSourcePortArgsDict']] pi_source_port: Source port ranges.
        :param pulumi.Input[Union['PiNetworkSecurityGroupRulePiSourcePortsArgs', 'PiNetworkSecurityGroupRulePiSourcePortsArgsDict']] pi_source_ports: Source port ranges.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PiNetworkSecurityGroupRuleInitArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PiNetworkSecurityGroupRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PiNetworkSecurityGroupRuleInitArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PiNetworkSecurityGroupRuleInitArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ibm_pi_network_security_group_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_action: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_destination_port: Optional[pulumi.Input[Union['PiNetworkSecurityGroupRulePiDestinationPortArgs', 'PiNetworkSecurityGroupRulePiDestinationPortArgsDict']]] = None,
                 pi_destination_ports: Optional[pulumi.Input[Union['PiNetworkSecurityGroupRulePiDestinationPortsArgs', 'PiNetworkSecurityGroupRulePiDestinationPortsArgsDict']]] = None,
                 pi_network_security_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_network_security_group_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_protocol: Optional[pulumi.Input[Union['PiNetworkSecurityGroupRulePiProtocolArgs', 'PiNetworkSecurityGroupRulePiProtocolArgsDict']]] = None,
                 pi_remote: Optional[pulumi.Input[Union['PiNetworkSecurityGroupRulePiRemoteArgs', 'PiNetworkSecurityGroupRulePiRemoteArgsDict']]] = None,
                 pi_source_port: Optional[pulumi.Input[Union['PiNetworkSecurityGroupRulePiSourcePortArgs', 'PiNetworkSecurityGroupRulePiSourcePortArgsDict']]] = None,
                 pi_source_ports: Optional[pulumi.Input[Union['PiNetworkSecurityGroupRulePiSourcePortsArgs', 'PiNetworkSecurityGroupRulePiSourcePortsArgsDict']]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiNetworkSecurityGroupRuleTimeoutsArgs', 'PiNetworkSecurityGroupRuleTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PiNetworkSecurityGroupRuleInitArgs.__new__(PiNetworkSecurityGroupRuleInitArgs)

            __props__.__dict__["ibm_pi_network_security_group_rule_id"] = ibm_pi_network_security_group_rule_id
            __props__.__dict__["pi_action"] = pi_action
            if pi_cloud_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'pi_cloud_instance_id'")
            __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
            __props__.__dict__["pi_destination_port"] = pi_destination_port
            __props__.__dict__["pi_destination_ports"] = pi_destination_ports
            if pi_network_security_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'pi_network_security_group_id'")
            __props__.__dict__["pi_network_security_group_id"] = pi_network_security_group_id
            __props__.__dict__["pi_network_security_group_rule_id"] = pi_network_security_group_rule_id
            __props__.__dict__["pi_protocol"] = pi_protocol
            __props__.__dict__["pi_remote"] = pi_remote
            __props__.__dict__["pi_source_port"] = pi_source_port
            __props__.__dict__["pi_source_ports"] = pi_source_ports
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["crn"] = None
            __props__.__dict__["default"] = None
            __props__.__dict__["members"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["network_security_group_id"] = None
            __props__.__dict__["rules"] = None
            __props__.__dict__["user_tags"] = None
        super(PiNetworkSecurityGroupRule, __self__).__init__(
            'ibm:index/piNetworkSecurityGroupRule:PiNetworkSecurityGroupRule',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            default: Optional[pulumi.Input[_builtins.bool]] = None,
            ibm_pi_network_security_group_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
            members: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PiNetworkSecurityGroupRuleMemberArgs', 'PiNetworkSecurityGroupRuleMemberArgsDict']]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            network_security_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_action: Optional[pulumi.Input[_builtins.str]] = None,
            pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_destination_port: Optional[pulumi.Input[Union['PiNetworkSecurityGroupRulePiDestinationPortArgs', 'PiNetworkSecurityGroupRulePiDestinationPortArgsDict']]] = None,
            pi_destination_ports: Optional[pulumi.Input[Union['PiNetworkSecurityGroupRulePiDestinationPortsArgs', 'PiNetworkSecurityGroupRulePiDestinationPortsArgsDict']]] = None,
            pi_network_security_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_network_security_group_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_protocol: Optional[pulumi.Input[Union['PiNetworkSecurityGroupRulePiProtocolArgs', 'PiNetworkSecurityGroupRulePiProtocolArgsDict']]] = None,
            pi_remote: Optional[pulumi.Input[Union['PiNetworkSecurityGroupRulePiRemoteArgs', 'PiNetworkSecurityGroupRulePiRemoteArgsDict']]] = None,
            pi_source_port: Optional[pulumi.Input[Union['PiNetworkSecurityGroupRulePiSourcePortArgs', 'PiNetworkSecurityGroupRulePiSourcePortArgsDict']]] = None,
            pi_source_ports: Optional[pulumi.Input[Union['PiNetworkSecurityGroupRulePiSourcePortsArgs', 'PiNetworkSecurityGroupRulePiSourcePortsArgsDict']]] = None,
            rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PiNetworkSecurityGroupRuleRuleArgs', 'PiNetworkSecurityGroupRuleRuleArgsDict']]]]] = None,
            timeouts: Optional[pulumi.Input[Union['PiNetworkSecurityGroupRuleTimeoutsArgs', 'PiNetworkSecurityGroupRuleTimeoutsArgsDict']]] = None,
            user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'PiNetworkSecurityGroupRule':
        """
        Get an existing PiNetworkSecurityGroupRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] crn: The network security group's crn.
        :param pulumi.Input[_builtins.bool] default: Indicates if the network security group is the default network security group in the workspace.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PiNetworkSecurityGroupRuleMemberArgs', 'PiNetworkSecurityGroupRuleMemberArgsDict']]]] members: The list of IPv4 addresses and, or network interfaces in the network security group.
        :param pulumi.Input[_builtins.str] name: The name of the network security group.
        :param pulumi.Input[_builtins.str] network_security_group_id: The unique identifier of the network security group.
        :param pulumi.Input[_builtins.str] pi_action: The action to take if the rule matches network traffic.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[Union['PiNetworkSecurityGroupRulePiDestinationPortArgs', 'PiNetworkSecurityGroupRulePiDestinationPortArgsDict']] pi_destination_port: Destination port ranges.
        :param pulumi.Input[Union['PiNetworkSecurityGroupRulePiDestinationPortsArgs', 'PiNetworkSecurityGroupRulePiDestinationPortsArgsDict']] pi_destination_ports: Destination port ranges.
        :param pulumi.Input[_builtins.str] pi_network_security_group_id: The unique identifier of the network security group.
        :param pulumi.Input[_builtins.str] pi_network_security_group_rule_id: The network security group rule id to remove.
        :param pulumi.Input[Union['PiNetworkSecurityGroupRulePiProtocolArgs', 'PiNetworkSecurityGroupRulePiProtocolArgsDict']] pi_protocol: The protocol of the network traffic.
        :param pulumi.Input[Union['PiNetworkSecurityGroupRulePiRemoteArgs', 'PiNetworkSecurityGroupRulePiRemoteArgsDict']] pi_remote: The protocol of the network traffic.
        :param pulumi.Input[Union['PiNetworkSecurityGroupRulePiSourcePortArgs', 'PiNetworkSecurityGroupRulePiSourcePortArgsDict']] pi_source_port: Source port ranges.
        :param pulumi.Input[Union['PiNetworkSecurityGroupRulePiSourcePortsArgs', 'PiNetworkSecurityGroupRulePiSourcePortsArgsDict']] pi_source_ports: Source port ranges.
        :param pulumi.Input[Sequence[pulumi.Input[Union['PiNetworkSecurityGroupRuleRuleArgs', 'PiNetworkSecurityGroupRuleRuleArgsDict']]]] rules: The list of rules in the network security group.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] user_tags: List of user tags attached to the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PiNetworkSecurityGroupRuleState.__new__(_PiNetworkSecurityGroupRuleState)

        __props__.__dict__["crn"] = crn
        __props__.__dict__["default"] = default
        __props__.__dict__["ibm_pi_network_security_group_rule_id"] = ibm_pi_network_security_group_rule_id
        __props__.__dict__["members"] = members
        __props__.__dict__["name"] = name
        __props__.__dict__["network_security_group_id"] = network_security_group_id
        __props__.__dict__["pi_action"] = pi_action
        __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
        __props__.__dict__["pi_destination_port"] = pi_destination_port
        __props__.__dict__["pi_destination_ports"] = pi_destination_ports
        __props__.__dict__["pi_network_security_group_id"] = pi_network_security_group_id
        __props__.__dict__["pi_network_security_group_rule_id"] = pi_network_security_group_rule_id
        __props__.__dict__["pi_protocol"] = pi_protocol
        __props__.__dict__["pi_remote"] = pi_remote
        __props__.__dict__["pi_source_port"] = pi_source_port
        __props__.__dict__["pi_source_ports"] = pi_source_ports
        __props__.__dict__["rules"] = rules
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["user_tags"] = user_tags
        return PiNetworkSecurityGroupRule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The network security group's crn.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def default(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates if the network security group is the default network security group in the workspace.
        """
        return pulumi.get(self, "default")

    @_builtins.property
    @pulumi.getter(name="ibmPiNetworkSecurityGroupRuleId")
    def ibm_pi_network_security_group_rule_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "ibm_pi_network_security_group_rule_id")

    @_builtins.property
    @pulumi.getter
    def members(self) -> pulumi.Output[Sequence['outputs.PiNetworkSecurityGroupRuleMember']]:
        """
        The list of IPv4 addresses and, or network interfaces in the network security group.
        """
        return pulumi.get(self, "members")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the network security group.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkSecurityGroupId")
    def network_security_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier of the network security group.
        """
        return pulumi.get(self, "network_security_group_id")

    @_builtins.property
    @pulumi.getter(name="piAction")
    def pi_action(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The action to take if the rule matches network traffic.
        """
        return pulumi.get(self, "pi_action")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piDestinationPort")
    def pi_destination_port(self) -> pulumi.Output[Optional['outputs.PiNetworkSecurityGroupRulePiDestinationPort']]:
        """
        Destination port ranges.
        """
        return pulumi.get(self, "pi_destination_port")

    @_builtins.property
    @pulumi.getter(name="piDestinationPorts")
    @_utilities.deprecated("""Deprecated""")
    def pi_destination_ports(self) -> pulumi.Output[Optional['outputs.PiNetworkSecurityGroupRulePiDestinationPorts']]:
        """
        Destination port ranges.
        """
        return pulumi.get(self, "pi_destination_ports")

    @_builtins.property
    @pulumi.getter(name="piNetworkSecurityGroupId")
    def pi_network_security_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier of the network security group.
        """
        return pulumi.get(self, "pi_network_security_group_id")

    @_builtins.property
    @pulumi.getter(name="piNetworkSecurityGroupRuleId")
    def pi_network_security_group_rule_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The network security group rule id to remove.
        """
        return pulumi.get(self, "pi_network_security_group_rule_id")

    @_builtins.property
    @pulumi.getter(name="piProtocol")
    def pi_protocol(self) -> pulumi.Output[Optional['outputs.PiNetworkSecurityGroupRulePiProtocol']]:
        """
        The protocol of the network traffic.
        """
        return pulumi.get(self, "pi_protocol")

    @_builtins.property
    @pulumi.getter(name="piRemote")
    def pi_remote(self) -> pulumi.Output[Optional['outputs.PiNetworkSecurityGroupRulePiRemote']]:
        """
        The protocol of the network traffic.
        """
        return pulumi.get(self, "pi_remote")

    @_builtins.property
    @pulumi.getter(name="piSourcePort")
    def pi_source_port(self) -> pulumi.Output[Optional['outputs.PiNetworkSecurityGroupRulePiSourcePort']]:
        """
        Source port ranges.
        """
        return pulumi.get(self, "pi_source_port")

    @_builtins.property
    @pulumi.getter(name="piSourcePorts")
    @_utilities.deprecated("""Deprecated""")
    def pi_source_ports(self) -> pulumi.Output[Optional['outputs.PiNetworkSecurityGroupRulePiSourcePorts']]:
        """
        Source port ranges.
        """
        return pulumi.get(self, "pi_source_ports")

    @_builtins.property
    @pulumi.getter
    def rules(self) -> pulumi.Output[Sequence['outputs.PiNetworkSecurityGroupRuleRule']]:
        """
        The list of rules in the network security group.
        """
        return pulumi.get(self, "rules")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.PiNetworkSecurityGroupRuleTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter(name="userTags")
    def user_tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of user tags attached to the resource.
        """
        return pulumi.get(self, "user_tags")

