# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ContainerApiKeyResetArgs', 'ContainerApiKeyReset']

@pulumi.input_type
class ContainerApiKeyResetArgs:
    def __init__(__self__, *,
                 region: pulumi.Input[_builtins.str],
                 container_api_key_reset_id: Optional[pulumi.Input[_builtins.str]] = None,
                 reset_api_key: Optional[pulumi.Input[_builtins.float]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ContainerApiKeyReset resource.
        :param pulumi.Input[_builtins.str] region: Region which api key has to be reset
        :param pulumi.Input[_builtins.float] reset_api_key: Determines if apikey has to be reset or not
        :param pulumi.Input[_builtins.str] resource_group_id: ID of Resource Group
        """
        pulumi.set(__self__, "region", region)
        if container_api_key_reset_id is not None:
            pulumi.set(__self__, "container_api_key_reset_id", container_api_key_reset_id)
        if reset_api_key is not None:
            pulumi.set(__self__, "reset_api_key", reset_api_key)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Input[_builtins.str]:
        """
        Region which api key has to be reset
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="containerApiKeyResetId")
    def container_api_key_reset_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_api_key_reset_id")

    @container_api_key_reset_id.setter
    def container_api_key_reset_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_api_key_reset_id", value)

    @_builtins.property
    @pulumi.getter(name="resetApiKey")
    def reset_api_key(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Determines if apikey has to be reset or not
        """
        return pulumi.get(self, "reset_api_key")

    @reset_api_key.setter
    def reset_api_key(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "reset_api_key", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of Resource Group
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)


@pulumi.input_type
class _ContainerApiKeyResetState:
    def __init__(__self__, *,
                 container_api_key_reset_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 reset_api_key: Optional[pulumi.Input[_builtins.float]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ContainerApiKeyReset resources.
        :param pulumi.Input[_builtins.str] region: Region which api key has to be reset
        :param pulumi.Input[_builtins.float] reset_api_key: Determines if apikey has to be reset or not
        :param pulumi.Input[_builtins.str] resource_group_id: ID of Resource Group
        """
        if container_api_key_reset_id is not None:
            pulumi.set(__self__, "container_api_key_reset_id", container_api_key_reset_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if reset_api_key is not None:
            pulumi.set(__self__, "reset_api_key", reset_api_key)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)

    @_builtins.property
    @pulumi.getter(name="containerApiKeyResetId")
    def container_api_key_reset_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_api_key_reset_id")

    @container_api_key_reset_id.setter
    def container_api_key_reset_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_api_key_reset_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Region which api key has to be reset
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resetApiKey")
    def reset_api_key(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Determines if apikey has to be reset or not
        """
        return pulumi.get(self, "reset_api_key")

    @reset_api_key.setter
    def reset_api_key(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "reset_api_key", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of Resource Group
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)


@pulumi.type_token("ibm:index/containerApiKeyReset:ContainerApiKeyReset")
class ContainerApiKeyReset(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 container_api_key_reset_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 reset_api_key: Optional[pulumi.Input[_builtins.float]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a ContainerApiKeyReset resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] region: Region which api key has to be reset
        :param pulumi.Input[_builtins.float] reset_api_key: Determines if apikey has to be reset or not
        :param pulumi.Input[_builtins.str] resource_group_id: ID of Resource Group
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ContainerApiKeyResetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ContainerApiKeyReset resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ContainerApiKeyResetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ContainerApiKeyResetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 container_api_key_reset_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 reset_api_key: Optional[pulumi.Input[_builtins.float]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ContainerApiKeyResetArgs.__new__(ContainerApiKeyResetArgs)

            __props__.__dict__["container_api_key_reset_id"] = container_api_key_reset_id
            if region is None and not opts.urn:
                raise TypeError("Missing required property 'region'")
            __props__.__dict__["region"] = region
            __props__.__dict__["reset_api_key"] = reset_api_key
            __props__.__dict__["resource_group_id"] = resource_group_id
        super(ContainerApiKeyReset, __self__).__init__(
            'ibm:index/containerApiKeyReset:ContainerApiKeyReset',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            container_api_key_reset_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            reset_api_key: Optional[pulumi.Input[_builtins.float]] = None,
            resource_group_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'ContainerApiKeyReset':
        """
        Get an existing ContainerApiKeyReset resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] region: Region which api key has to be reset
        :param pulumi.Input[_builtins.float] reset_api_key: Determines if apikey has to be reset or not
        :param pulumi.Input[_builtins.str] resource_group_id: ID of Resource Group
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ContainerApiKeyResetState.__new__(_ContainerApiKeyResetState)

        __props__.__dict__["container_api_key_reset_id"] = container_api_key_reset_id
        __props__.__dict__["region"] = region
        __props__.__dict__["reset_api_key"] = reset_api_key
        __props__.__dict__["resource_group_id"] = resource_group_id
        return ContainerApiKeyReset(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="containerApiKeyResetId")
    def container_api_key_reset_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "container_api_key_reset_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Region which api key has to be reset
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resetApiKey")
    def reset_api_key(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Determines if apikey has to be reset or not
        """
        return pulumi.get(self, "reset_api_key")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        ID of Resource Group
        """
        return pulumi.get(self, "resource_group_id")

