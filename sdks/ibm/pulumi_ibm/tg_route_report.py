# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TgRouteReportArgs', 'TgRouteReport']

@pulumi.input_type
class TgRouteReportArgs:
    def __init__(__self__, *,
                 gateway: pulumi.Input[_builtins.str],
                 tg_route_report_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['TgRouteReportTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a TgRouteReport resource.
        :param pulumi.Input[_builtins.str] gateway: The Transit Gateway identifier
        """
        pulumi.set(__self__, "gateway", gateway)
        if tg_route_report_id is not None:
            pulumi.set(__self__, "tg_route_report_id", tg_route_report_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> pulumi.Input[_builtins.str]:
        """
        The Transit Gateway identifier
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "gateway", value)

    @_builtins.property
    @pulumi.getter(name="tgRouteReportId")
    def tg_route_report_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tg_route_report_id")

    @tg_route_report_id.setter
    def tg_route_report_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tg_route_report_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['TgRouteReportTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['TgRouteReportTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _TgRouteReportState:
    def __init__(__self__, *,
                 connections: Optional[pulumi.Input[Sequence[pulumi.Input['TgRouteReportConnectionArgs']]]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 overlapping_routes: Optional[pulumi.Input[Sequence[pulumi.Input['TgRouteReportOverlappingRouteArgs']]]] = None,
                 route_report_id: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tg_route_report_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['TgRouteReportTimeoutsArgs']] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering TgRouteReport resources.
        :param pulumi.Input[Sequence[pulumi.Input['TgRouteReportConnectionArgs']]] connections: Collection of transit gateway connections
        :param pulumi.Input[_builtins.str] gateway: The Transit Gateway identifier
        :param pulumi.Input[Sequence[pulumi.Input['TgRouteReportOverlappingRouteArgs']]] overlapping_routes: Collection of transit gateway overlapping routes
        :param pulumi.Input[_builtins.str] route_report_id: The Transit Gateway Route Report identifier
        """
        if connections is not None:
            pulumi.set(__self__, "connections", connections)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if overlapping_routes is not None:
            pulumi.set(__self__, "overlapping_routes", overlapping_routes)
        if route_report_id is not None:
            pulumi.set(__self__, "route_report_id", route_report_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tg_route_report_id is not None:
            pulumi.set(__self__, "tg_route_report_id", tg_route_report_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def connections(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TgRouteReportConnectionArgs']]]]:
        """
        Collection of transit gateway connections
        """
        return pulumi.get(self, "connections")

    @connections.setter
    def connections(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TgRouteReportConnectionArgs']]]]):
        pulumi.set(self, "connections", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Transit Gateway identifier
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gateway", value)

    @_builtins.property
    @pulumi.getter(name="overlappingRoutes")
    def overlapping_routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TgRouteReportOverlappingRouteArgs']]]]:
        """
        Collection of transit gateway overlapping routes
        """
        return pulumi.get(self, "overlapping_routes")

    @overlapping_routes.setter
    def overlapping_routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TgRouteReportOverlappingRouteArgs']]]]):
        pulumi.set(self, "overlapping_routes", value)

    @_builtins.property
    @pulumi.getter(name="routeReportId")
    def route_report_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Transit Gateway Route Report identifier
        """
        return pulumi.get(self, "route_report_id")

    @route_report_id.setter
    def route_report_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_report_id", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="tgRouteReportId")
    def tg_route_report_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "tg_route_report_id")

    @tg_route_report_id.setter
    def tg_route_report_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tg_route_report_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['TgRouteReportTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['TgRouteReportTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("ibm:index/tgRouteReport:TgRouteReport")
class TgRouteReport(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 tg_route_report_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['TgRouteReportTimeoutsArgs', 'TgRouteReportTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a TgRouteReport resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] gateway: The Transit Gateway identifier
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TgRouteReportArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a TgRouteReport resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param TgRouteReportArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TgRouteReportArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 tg_route_report_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['TgRouteReportTimeoutsArgs', 'TgRouteReportTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TgRouteReportArgs.__new__(TgRouteReportArgs)

            if gateway is None and not opts.urn:
                raise TypeError("Missing required property 'gateway'")
            __props__.__dict__["gateway"] = gateway
            __props__.__dict__["tg_route_report_id"] = tg_route_report_id
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["connections"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["overlapping_routes"] = None
            __props__.__dict__["route_report_id"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
        super(TgRouteReport, __self__).__init__(
            'ibm:index/tgRouteReport:TgRouteReport',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            connections: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TgRouteReportConnectionArgs', 'TgRouteReportConnectionArgsDict']]]]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            gateway: Optional[pulumi.Input[_builtins.str]] = None,
            overlapping_routes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TgRouteReportOverlappingRouteArgs', 'TgRouteReportOverlappingRouteArgsDict']]]]] = None,
            route_report_id: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            tg_route_report_id: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['TgRouteReportTimeoutsArgs', 'TgRouteReportTimeoutsArgsDict']]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'TgRouteReport':
        """
        Get an existing TgRouteReport resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['TgRouteReportConnectionArgs', 'TgRouteReportConnectionArgsDict']]]] connections: Collection of transit gateway connections
        :param pulumi.Input[_builtins.str] gateway: The Transit Gateway identifier
        :param pulumi.Input[Sequence[pulumi.Input[Union['TgRouteReportOverlappingRouteArgs', 'TgRouteReportOverlappingRouteArgsDict']]]] overlapping_routes: Collection of transit gateway overlapping routes
        :param pulumi.Input[_builtins.str] route_report_id: The Transit Gateway Route Report identifier
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TgRouteReportState.__new__(_TgRouteReportState)

        __props__.__dict__["connections"] = connections
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["gateway"] = gateway
        __props__.__dict__["overlapping_routes"] = overlapping_routes
        __props__.__dict__["route_report_id"] = route_report_id
        __props__.__dict__["status"] = status
        __props__.__dict__["tg_route_report_id"] = tg_route_report_id
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["updated_at"] = updated_at
        return TgRouteReport(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def connections(self) -> pulumi.Output[Sequence['outputs.TgRouteReportConnection']]:
        """
        Collection of transit gateway connections
        """
        return pulumi.get(self, "connections")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> pulumi.Output[_builtins.str]:
        """
        The Transit Gateway identifier
        """
        return pulumi.get(self, "gateway")

    @_builtins.property
    @pulumi.getter(name="overlappingRoutes")
    def overlapping_routes(self) -> pulumi.Output[Sequence['outputs.TgRouteReportOverlappingRoute']]:
        """
        Collection of transit gateway overlapping routes
        """
        return pulumi.get(self, "overlapping_routes")

    @_builtins.property
    @pulumi.getter(name="routeReportId")
    def route_report_id(self) -> pulumi.Output[_builtins.str]:
        """
        The Transit Gateway Route Report identifier
        """
        return pulumi.get(self, "route_report_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="tgRouteReportId")
    def tg_route_report_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "tg_route_report_id")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.TgRouteReportTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "updated_at")

