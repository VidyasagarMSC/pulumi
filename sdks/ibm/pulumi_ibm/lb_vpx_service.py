# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['LbVpxServiceArgs', 'LbVpxService']

@pulumi.input_type
class LbVpxServiceArgs:
    def __init__(__self__, *,
                 connection_limit: pulumi.Input[_builtins.float],
                 destination_ip_address: pulumi.Input[_builtins.str],
                 destination_port: pulumi.Input[_builtins.float],
                 health_check: pulumi.Input[_builtins.str],
                 vip_id: pulumi.Input[_builtins.str],
                 weight: pulumi.Input[_builtins.float],
                 lb_vpx_service_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 usip: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a LbVpxService resource.
        :param pulumi.Input[_builtins.float] connection_limit: Number of connections limit
        :param pulumi.Input[_builtins.str] destination_ip_address: Destination IP Address
        :param pulumi.Input[_builtins.float] destination_port: Destination Port number
        :param pulumi.Input[_builtins.str] health_check: Health check info
        :param pulumi.Input[_builtins.str] vip_id: VIP id
        :param pulumi.Input[_builtins.float] weight: Weight value
        :param pulumi.Input[_builtins.str] name: name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: list of tags associated with the resource
        :param pulumi.Input[_builtins.str] usip: usip info
        """
        pulumi.set(__self__, "connection_limit", connection_limit)
        pulumi.set(__self__, "destination_ip_address", destination_ip_address)
        pulumi.set(__self__, "destination_port", destination_port)
        pulumi.set(__self__, "health_check", health_check)
        pulumi.set(__self__, "vip_id", vip_id)
        pulumi.set(__self__, "weight", weight)
        if lb_vpx_service_id is not None:
            pulumi.set(__self__, "lb_vpx_service_id", lb_vpx_service_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if usip is not None:
            pulumi.set(__self__, "usip", usip)

    @_builtins.property
    @pulumi.getter(name="connectionLimit")
    def connection_limit(self) -> pulumi.Input[_builtins.float]:
        """
        Number of connections limit
        """
        return pulumi.get(self, "connection_limit")

    @connection_limit.setter
    def connection_limit(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "connection_limit", value)

    @_builtins.property
    @pulumi.getter(name="destinationIpAddress")
    def destination_ip_address(self) -> pulumi.Input[_builtins.str]:
        """
        Destination IP Address
        """
        return pulumi.get(self, "destination_ip_address")

    @destination_ip_address.setter
    def destination_ip_address(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "destination_ip_address", value)

    @_builtins.property
    @pulumi.getter(name="destinationPort")
    def destination_port(self) -> pulumi.Input[_builtins.float]:
        """
        Destination Port number
        """
        return pulumi.get(self, "destination_port")

    @destination_port.setter
    def destination_port(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "destination_port", value)

    @_builtins.property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> pulumi.Input[_builtins.str]:
        """
        Health check info
        """
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "health_check", value)

    @_builtins.property
    @pulumi.getter(name="vipId")
    def vip_id(self) -> pulumi.Input[_builtins.str]:
        """
        VIP id
        """
        return pulumi.get(self, "vip_id")

    @vip_id.setter
    def vip_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vip_id", value)

    @_builtins.property
    @pulumi.getter
    def weight(self) -> pulumi.Input[_builtins.float]:
        """
        Weight value
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "weight", value)

    @_builtins.property
    @pulumi.getter(name="lbVpxServiceId")
    def lb_vpx_service_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "lb_vpx_service_id")

    @lb_vpx_service_id.setter
    def lb_vpx_service_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lb_vpx_service_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        list of tags associated with the resource
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def usip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        usip info
        """
        return pulumi.get(self, "usip")

    @usip.setter
    def usip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "usip", value)


@pulumi.input_type
class _LbVpxServiceState:
    def __init__(__self__, *,
                 connection_limit: Optional[pulumi.Input[_builtins.float]] = None,
                 destination_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_port: Optional[pulumi.Input[_builtins.float]] = None,
                 health_check: Optional[pulumi.Input[_builtins.str]] = None,
                 lb_vpx_service_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 usip: Optional[pulumi.Input[_builtins.str]] = None,
                 vip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 weight: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering LbVpxService resources.
        :param pulumi.Input[_builtins.float] connection_limit: Number of connections limit
        :param pulumi.Input[_builtins.str] destination_ip_address: Destination IP Address
        :param pulumi.Input[_builtins.float] destination_port: Destination Port number
        :param pulumi.Input[_builtins.str] health_check: Health check info
        :param pulumi.Input[_builtins.str] name: name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: list of tags associated with the resource
        :param pulumi.Input[_builtins.str] usip: usip info
        :param pulumi.Input[_builtins.str] vip_id: VIP id
        :param pulumi.Input[_builtins.float] weight: Weight value
        """
        if connection_limit is not None:
            pulumi.set(__self__, "connection_limit", connection_limit)
        if destination_ip_address is not None:
            pulumi.set(__self__, "destination_ip_address", destination_ip_address)
        if destination_port is not None:
            pulumi.set(__self__, "destination_port", destination_port)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if lb_vpx_service_id is not None:
            pulumi.set(__self__, "lb_vpx_service_id", lb_vpx_service_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if usip is not None:
            pulumi.set(__self__, "usip", usip)
        if vip_id is not None:
            pulumi.set(__self__, "vip_id", vip_id)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter(name="connectionLimit")
    def connection_limit(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Number of connections limit
        """
        return pulumi.get(self, "connection_limit")

    @connection_limit.setter
    def connection_limit(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "connection_limit", value)

    @_builtins.property
    @pulumi.getter(name="destinationIpAddress")
    def destination_ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination IP Address
        """
        return pulumi.get(self, "destination_ip_address")

    @destination_ip_address.setter
    def destination_ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_ip_address", value)

    @_builtins.property
    @pulumi.getter(name="destinationPort")
    def destination_port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Destination Port number
        """
        return pulumi.get(self, "destination_port")

    @destination_port.setter
    def destination_port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "destination_port", value)

    @_builtins.property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Health check info
        """
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "health_check", value)

    @_builtins.property
    @pulumi.getter(name="lbVpxServiceId")
    def lb_vpx_service_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "lb_vpx_service_id")

    @lb_vpx_service_id.setter
    def lb_vpx_service_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lb_vpx_service_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        list of tags associated with the resource
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def usip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        usip info
        """
        return pulumi.get(self, "usip")

    @usip.setter
    def usip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "usip", value)

    @_builtins.property
    @pulumi.getter(name="vipId")
    def vip_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        VIP id
        """
        return pulumi.get(self, "vip_id")

    @vip_id.setter
    def vip_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vip_id", value)

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Weight value
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "weight", value)


@pulumi.type_token("ibm:index/lbVpxService:LbVpxService")
class LbVpxService(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connection_limit: Optional[pulumi.Input[_builtins.float]] = None,
                 destination_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_port: Optional[pulumi.Input[_builtins.float]] = None,
                 health_check: Optional[pulumi.Input[_builtins.str]] = None,
                 lb_vpx_service_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 usip: Optional[pulumi.Input[_builtins.str]] = None,
                 vip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 weight: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a LbVpxService resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] connection_limit: Number of connections limit
        :param pulumi.Input[_builtins.str] destination_ip_address: Destination IP Address
        :param pulumi.Input[_builtins.float] destination_port: Destination Port number
        :param pulumi.Input[_builtins.str] health_check: Health check info
        :param pulumi.Input[_builtins.str] name: name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: list of tags associated with the resource
        :param pulumi.Input[_builtins.str] usip: usip info
        :param pulumi.Input[_builtins.str] vip_id: VIP id
        :param pulumi.Input[_builtins.float] weight: Weight value
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LbVpxServiceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a LbVpxService resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LbVpxServiceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LbVpxServiceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connection_limit: Optional[pulumi.Input[_builtins.float]] = None,
                 destination_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_port: Optional[pulumi.Input[_builtins.float]] = None,
                 health_check: Optional[pulumi.Input[_builtins.str]] = None,
                 lb_vpx_service_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 usip: Optional[pulumi.Input[_builtins.str]] = None,
                 vip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 weight: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LbVpxServiceArgs.__new__(LbVpxServiceArgs)

            if connection_limit is None and not opts.urn:
                raise TypeError("Missing required property 'connection_limit'")
            __props__.__dict__["connection_limit"] = connection_limit
            if destination_ip_address is None and not opts.urn:
                raise TypeError("Missing required property 'destination_ip_address'")
            __props__.__dict__["destination_ip_address"] = destination_ip_address
            if destination_port is None and not opts.urn:
                raise TypeError("Missing required property 'destination_port'")
            __props__.__dict__["destination_port"] = destination_port
            if health_check is None and not opts.urn:
                raise TypeError("Missing required property 'health_check'")
            __props__.__dict__["health_check"] = health_check
            __props__.__dict__["lb_vpx_service_id"] = lb_vpx_service_id
            __props__.__dict__["name"] = name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["usip"] = usip
            if vip_id is None and not opts.urn:
                raise TypeError("Missing required property 'vip_id'")
            __props__.__dict__["vip_id"] = vip_id
            if weight is None and not opts.urn:
                raise TypeError("Missing required property 'weight'")
            __props__.__dict__["weight"] = weight
        super(LbVpxService, __self__).__init__(
            'ibm:index/lbVpxService:LbVpxService',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            connection_limit: Optional[pulumi.Input[_builtins.float]] = None,
            destination_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
            destination_port: Optional[pulumi.Input[_builtins.float]] = None,
            health_check: Optional[pulumi.Input[_builtins.str]] = None,
            lb_vpx_service_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            usip: Optional[pulumi.Input[_builtins.str]] = None,
            vip_id: Optional[pulumi.Input[_builtins.str]] = None,
            weight: Optional[pulumi.Input[_builtins.float]] = None) -> 'LbVpxService':
        """
        Get an existing LbVpxService resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] connection_limit: Number of connections limit
        :param pulumi.Input[_builtins.str] destination_ip_address: Destination IP Address
        :param pulumi.Input[_builtins.float] destination_port: Destination Port number
        :param pulumi.Input[_builtins.str] health_check: Health check info
        :param pulumi.Input[_builtins.str] name: name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: list of tags associated with the resource
        :param pulumi.Input[_builtins.str] usip: usip info
        :param pulumi.Input[_builtins.str] vip_id: VIP id
        :param pulumi.Input[_builtins.float] weight: Weight value
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LbVpxServiceState.__new__(_LbVpxServiceState)

        __props__.__dict__["connection_limit"] = connection_limit
        __props__.__dict__["destination_ip_address"] = destination_ip_address
        __props__.__dict__["destination_port"] = destination_port
        __props__.__dict__["health_check"] = health_check
        __props__.__dict__["lb_vpx_service_id"] = lb_vpx_service_id
        __props__.__dict__["name"] = name
        __props__.__dict__["tags"] = tags
        __props__.__dict__["usip"] = usip
        __props__.__dict__["vip_id"] = vip_id
        __props__.__dict__["weight"] = weight
        return LbVpxService(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="connectionLimit")
    def connection_limit(self) -> pulumi.Output[_builtins.float]:
        """
        Number of connections limit
        """
        return pulumi.get(self, "connection_limit")

    @_builtins.property
    @pulumi.getter(name="destinationIpAddress")
    def destination_ip_address(self) -> pulumi.Output[_builtins.str]:
        """
        Destination IP Address
        """
        return pulumi.get(self, "destination_ip_address")

    @_builtins.property
    @pulumi.getter(name="destinationPort")
    def destination_port(self) -> pulumi.Output[_builtins.float]:
        """
        Destination Port number
        """
        return pulumi.get(self, "destination_port")

    @_builtins.property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> pulumi.Output[_builtins.str]:
        """
        Health check info
        """
        return pulumi.get(self, "health_check")

    @_builtins.property
    @pulumi.getter(name="lbVpxServiceId")
    def lb_vpx_service_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "lb_vpx_service_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        list of tags associated with the resource
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def usip(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        usip info
        """
        return pulumi.get(self, "usip")

    @_builtins.property
    @pulumi.getter(name="vipId")
    def vip_id(self) -> pulumi.Output[_builtins.str]:
        """
        VIP id
        """
        return pulumi.get(self, "vip_id")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> pulumi.Output[_builtins.float]:
        """
        Weight value
        """
        return pulumi.get(self, "weight")

