# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsNetworkAclRuleInitArgs', 'IsNetworkAclRule']

@pulumi.input_type
class IsNetworkAclRuleInitArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[_builtins.str],
                 destination: pulumi.Input[_builtins.str],
                 direction: pulumi.Input[_builtins.str],
                 network_acl: pulumi.Input[_builtins.str],
                 source: pulumi.Input[_builtins.str],
                 before: Optional[pulumi.Input[_builtins.str]] = None,
                 icmp: Optional[pulumi.Input['IsNetworkAclRuleIcmpArgs']] = None,
                 is_network_acl_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 tcp: Optional[pulumi.Input['IsNetworkAclRuleTcpArgs']] = None,
                 timeouts: Optional[pulumi.Input['IsNetworkAclRuleTimeoutsArgs']] = None,
                 udp: Optional[pulumi.Input['IsNetworkAclRuleUdpArgs']] = None):
        """
        The set of arguments for constructing a IsNetworkAclRule resource.
        :param pulumi.Input[_builtins.str] action: Whether to allow or deny matching traffic
        :param pulumi.Input[_builtins.str] destination: The destination CIDR block. The CIDR block 0.0.0.0/0 applies to all addresses.
        :param pulumi.Input[_builtins.str] direction: Direction of traffic to enforce, either inbound or outbound
        :param pulumi.Input[_builtins.str] network_acl: Network ACL id
        :param pulumi.Input[_builtins.str] source: The source CIDR block. The CIDR block 0.0.0.0/0 applies to all addresses.
        :param pulumi.Input[_builtins.str] before: The rule that this rule is immediately before. If absent, this is the last rule.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this rule. Names must be unique within the network ACL the rule resides in. If unspecified,
               the name will be a hyphenated list of randomly-selected words.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "network_acl", network_acl)
        pulumi.set(__self__, "source", source)
        if before is not None:
            pulumi.set(__self__, "before", before)
        if icmp is not None:
            pulumi.set(__self__, "icmp", icmp)
        if is_network_acl_rule_id is not None:
            pulumi.set(__self__, "is_network_acl_rule_id", is_network_acl_rule_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tcp is not None:
            pulumi.set(__self__, "tcp", tcp)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if udp is not None:
            pulumi.set(__self__, "udp", udp)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Input[_builtins.str]:
        """
        Whether to allow or deny matching traffic
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter
    def destination(self) -> pulumi.Input[_builtins.str]:
        """
        The destination CIDR block. The CIDR block 0.0.0.0/0 applies to all addresses.
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "destination", value)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> pulumi.Input[_builtins.str]:
        """
        Direction of traffic to enforce, either inbound or outbound
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter(name="networkAcl")
    def network_acl(self) -> pulumi.Input[_builtins.str]:
        """
        Network ACL id
        """
        return pulumi.get(self, "network_acl")

    @network_acl.setter
    def network_acl(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "network_acl", value)

    @_builtins.property
    @pulumi.getter
    def source(self) -> pulumi.Input[_builtins.str]:
        """
        The source CIDR block. The CIDR block 0.0.0.0/0 applies to all addresses.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "source", value)

    @_builtins.property
    @pulumi.getter
    def before(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The rule that this rule is immediately before. If absent, this is the last rule.
        """
        return pulumi.get(self, "before")

    @before.setter
    def before(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "before", value)

    @_builtins.property
    @pulumi.getter
    def icmp(self) -> Optional[pulumi.Input['IsNetworkAclRuleIcmpArgs']]:
        return pulumi.get(self, "icmp")

    @icmp.setter
    def icmp(self, value: Optional[pulumi.Input['IsNetworkAclRuleIcmpArgs']]):
        pulumi.set(self, "icmp", value)

    @_builtins.property
    @pulumi.getter(name="isNetworkAclRuleId")
    def is_network_acl_rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_network_acl_rule_id")

    @is_network_acl_rule_id.setter
    def is_network_acl_rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_network_acl_rule_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user-defined name for this rule. Names must be unique within the network ACL the rule resides in. If unspecified,
        the name will be a hyphenated list of randomly-selected words.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def tcp(self) -> Optional[pulumi.Input['IsNetworkAclRuleTcpArgs']]:
        return pulumi.get(self, "tcp")

    @tcp.setter
    def tcp(self, value: Optional[pulumi.Input['IsNetworkAclRuleTcpArgs']]):
        pulumi.set(self, "tcp", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsNetworkAclRuleTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsNetworkAclRuleTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def udp(self) -> Optional[pulumi.Input['IsNetworkAclRuleUdpArgs']]:
        return pulumi.get(self, "udp")

    @udp.setter
    def udp(self, value: Optional[pulumi.Input['IsNetworkAclRuleUdpArgs']]):
        pulumi.set(self, "udp", value)


@pulumi.input_type
class _IsNetworkAclRuleState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 before: Optional[pulumi.Input[_builtins.str]] = None,
                 destination: Optional[pulumi.Input[_builtins.str]] = None,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 icmp: Optional[pulumi.Input['IsNetworkAclRuleIcmpArgs']] = None,
                 ip_version: Optional[pulumi.Input[_builtins.str]] = None,
                 is_network_acl_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_acl: Optional[pulumi.Input[_builtins.str]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source: Optional[pulumi.Input[_builtins.str]] = None,
                 tcp: Optional[pulumi.Input['IsNetworkAclRuleTcpArgs']] = None,
                 timeouts: Optional[pulumi.Input['IsNetworkAclRuleTimeoutsArgs']] = None,
                 udp: Optional[pulumi.Input['IsNetworkAclRuleUdpArgs']] = None):
        """
        Input properties used for looking up and filtering IsNetworkAclRule resources.
        :param pulumi.Input[_builtins.str] action: Whether to allow or deny matching traffic
        :param pulumi.Input[_builtins.str] before: The rule that this rule is immediately before. If absent, this is the last rule.
        :param pulumi.Input[_builtins.str] destination: The destination CIDR block. The CIDR block 0.0.0.0/0 applies to all addresses.
        :param pulumi.Input[_builtins.str] direction: Direction of traffic to enforce, either inbound or outbound
        :param pulumi.Input[_builtins.str] href: The url of the rule.
        :param pulumi.Input[_builtins.str] ip_version: The IP version for this rule.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this rule. Names must be unique within the network ACL the rule resides in. If unspecified,
               the name will be a hyphenated list of randomly-selected words.
        :param pulumi.Input[_builtins.str] network_acl: Network ACL id
        :param pulumi.Input[_builtins.str] protocol: The protocol of the rule.
        :param pulumi.Input[_builtins.str] rule_id: The network acl rule id.
        :param pulumi.Input[_builtins.str] source: The source CIDR block. The CIDR block 0.0.0.0/0 applies to all addresses.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if before is not None:
            pulumi.set(__self__, "before", before)
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if icmp is not None:
            pulumi.set(__self__, "icmp", icmp)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if is_network_acl_rule_id is not None:
            pulumi.set(__self__, "is_network_acl_rule_id", is_network_acl_rule_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_acl is not None:
            pulumi.set(__self__, "network_acl", network_acl)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if tcp is not None:
            pulumi.set(__self__, "tcp", tcp)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if udp is not None:
            pulumi.set(__self__, "udp", udp)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Whether to allow or deny matching traffic
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter
    def before(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The rule that this rule is immediately before. If absent, this is the last rule.
        """
        return pulumi.get(self, "before")

    @before.setter
    def before(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "before", value)

    @_builtins.property
    @pulumi.getter
    def destination(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The destination CIDR block. The CIDR block 0.0.0.0/0 applies to all addresses.
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination", value)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Direction of traffic to enforce, either inbound or outbound
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The url of the rule.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter
    def icmp(self) -> Optional[pulumi.Input['IsNetworkAclRuleIcmpArgs']]:
        return pulumi.get(self, "icmp")

    @icmp.setter
    def icmp(self, value: Optional[pulumi.Input['IsNetworkAclRuleIcmpArgs']]):
        pulumi.set(self, "icmp", value)

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IP version for this rule.
        """
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_version", value)

    @_builtins.property
    @pulumi.getter(name="isNetworkAclRuleId")
    def is_network_acl_rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_network_acl_rule_id")

    @is_network_acl_rule_id.setter
    def is_network_acl_rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_network_acl_rule_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user-defined name for this rule. Names must be unique within the network ACL the rule resides in. If unspecified,
        the name will be a hyphenated list of randomly-selected words.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="networkAcl")
    def network_acl(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Network ACL id
        """
        return pulumi.get(self, "network_acl")

    @network_acl.setter
    def network_acl(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_acl", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The protocol of the rule.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The network acl rule id.
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rule_id", value)

    @_builtins.property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The source CIDR block. The CIDR block 0.0.0.0/0 applies to all addresses.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source", value)

    @_builtins.property
    @pulumi.getter
    def tcp(self) -> Optional[pulumi.Input['IsNetworkAclRuleTcpArgs']]:
        return pulumi.get(self, "tcp")

    @tcp.setter
    def tcp(self, value: Optional[pulumi.Input['IsNetworkAclRuleTcpArgs']]):
        pulumi.set(self, "tcp", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsNetworkAclRuleTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsNetworkAclRuleTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def udp(self) -> Optional[pulumi.Input['IsNetworkAclRuleUdpArgs']]:
        return pulumi.get(self, "udp")

    @udp.setter
    def udp(self, value: Optional[pulumi.Input['IsNetworkAclRuleUdpArgs']]):
        pulumi.set(self, "udp", value)


@pulumi.type_token("ibm:index/isNetworkAclRule:IsNetworkAclRule")
class IsNetworkAclRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 before: Optional[pulumi.Input[_builtins.str]] = None,
                 destination: Optional[pulumi.Input[_builtins.str]] = None,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 icmp: Optional[pulumi.Input[Union['IsNetworkAclRuleIcmpArgs', 'IsNetworkAclRuleIcmpArgsDict']]] = None,
                 is_network_acl_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_acl: Optional[pulumi.Input[_builtins.str]] = None,
                 source: Optional[pulumi.Input[_builtins.str]] = None,
                 tcp: Optional[pulumi.Input[Union['IsNetworkAclRuleTcpArgs', 'IsNetworkAclRuleTcpArgsDict']]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsNetworkAclRuleTimeoutsArgs', 'IsNetworkAclRuleTimeoutsArgsDict']]] = None,
                 udp: Optional[pulumi.Input[Union['IsNetworkAclRuleUdpArgs', 'IsNetworkAclRuleUdpArgsDict']]] = None,
                 __props__=None):
        """
        Create a IsNetworkAclRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Whether to allow or deny matching traffic
        :param pulumi.Input[_builtins.str] before: The rule that this rule is immediately before. If absent, this is the last rule.
        :param pulumi.Input[_builtins.str] destination: The destination CIDR block. The CIDR block 0.0.0.0/0 applies to all addresses.
        :param pulumi.Input[_builtins.str] direction: Direction of traffic to enforce, either inbound or outbound
        :param pulumi.Input[_builtins.str] name: The user-defined name for this rule. Names must be unique within the network ACL the rule resides in. If unspecified,
               the name will be a hyphenated list of randomly-selected words.
        :param pulumi.Input[_builtins.str] network_acl: Network ACL id
        :param pulumi.Input[_builtins.str] source: The source CIDR block. The CIDR block 0.0.0.0/0 applies to all addresses.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsNetworkAclRuleInitArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsNetworkAclRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsNetworkAclRuleInitArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsNetworkAclRuleInitArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 before: Optional[pulumi.Input[_builtins.str]] = None,
                 destination: Optional[pulumi.Input[_builtins.str]] = None,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 icmp: Optional[pulumi.Input[Union['IsNetworkAclRuleIcmpArgs', 'IsNetworkAclRuleIcmpArgsDict']]] = None,
                 is_network_acl_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_acl: Optional[pulumi.Input[_builtins.str]] = None,
                 source: Optional[pulumi.Input[_builtins.str]] = None,
                 tcp: Optional[pulumi.Input[Union['IsNetworkAclRuleTcpArgs', 'IsNetworkAclRuleTcpArgsDict']]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsNetworkAclRuleTimeoutsArgs', 'IsNetworkAclRuleTimeoutsArgsDict']]] = None,
                 udp: Optional[pulumi.Input[Union['IsNetworkAclRuleUdpArgs', 'IsNetworkAclRuleUdpArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsNetworkAclRuleInitArgs.__new__(IsNetworkAclRuleInitArgs)

            if action is None and not opts.urn:
                raise TypeError("Missing required property 'action'")
            __props__.__dict__["action"] = action
            __props__.__dict__["before"] = before
            if destination is None and not opts.urn:
                raise TypeError("Missing required property 'destination'")
            __props__.__dict__["destination"] = destination
            if direction is None and not opts.urn:
                raise TypeError("Missing required property 'direction'")
            __props__.__dict__["direction"] = direction
            __props__.__dict__["icmp"] = icmp
            __props__.__dict__["is_network_acl_rule_id"] = is_network_acl_rule_id
            __props__.__dict__["name"] = name
            if network_acl is None and not opts.urn:
                raise TypeError("Missing required property 'network_acl'")
            __props__.__dict__["network_acl"] = network_acl
            if source is None and not opts.urn:
                raise TypeError("Missing required property 'source'")
            __props__.__dict__["source"] = source
            __props__.__dict__["tcp"] = tcp
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["udp"] = udp
            __props__.__dict__["href"] = None
            __props__.__dict__["ip_version"] = None
            __props__.__dict__["protocol"] = None
            __props__.__dict__["rule_id"] = None
        super(IsNetworkAclRule, __self__).__init__(
            'ibm:index/isNetworkAclRule:IsNetworkAclRule',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[_builtins.str]] = None,
            before: Optional[pulumi.Input[_builtins.str]] = None,
            destination: Optional[pulumi.Input[_builtins.str]] = None,
            direction: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            icmp: Optional[pulumi.Input[Union['IsNetworkAclRuleIcmpArgs', 'IsNetworkAclRuleIcmpArgsDict']]] = None,
            ip_version: Optional[pulumi.Input[_builtins.str]] = None,
            is_network_acl_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            network_acl: Optional[pulumi.Input[_builtins.str]] = None,
            protocol: Optional[pulumi.Input[_builtins.str]] = None,
            rule_id: Optional[pulumi.Input[_builtins.str]] = None,
            source: Optional[pulumi.Input[_builtins.str]] = None,
            tcp: Optional[pulumi.Input[Union['IsNetworkAclRuleTcpArgs', 'IsNetworkAclRuleTcpArgsDict']]] = None,
            timeouts: Optional[pulumi.Input[Union['IsNetworkAclRuleTimeoutsArgs', 'IsNetworkAclRuleTimeoutsArgsDict']]] = None,
            udp: Optional[pulumi.Input[Union['IsNetworkAclRuleUdpArgs', 'IsNetworkAclRuleUdpArgsDict']]] = None) -> 'IsNetworkAclRule':
        """
        Get an existing IsNetworkAclRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: Whether to allow or deny matching traffic
        :param pulumi.Input[_builtins.str] before: The rule that this rule is immediately before. If absent, this is the last rule.
        :param pulumi.Input[_builtins.str] destination: The destination CIDR block. The CIDR block 0.0.0.0/0 applies to all addresses.
        :param pulumi.Input[_builtins.str] direction: Direction of traffic to enforce, either inbound or outbound
        :param pulumi.Input[_builtins.str] href: The url of the rule.
        :param pulumi.Input[_builtins.str] ip_version: The IP version for this rule.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this rule. Names must be unique within the network ACL the rule resides in. If unspecified,
               the name will be a hyphenated list of randomly-selected words.
        :param pulumi.Input[_builtins.str] network_acl: Network ACL id
        :param pulumi.Input[_builtins.str] protocol: The protocol of the rule.
        :param pulumi.Input[_builtins.str] rule_id: The network acl rule id.
        :param pulumi.Input[_builtins.str] source: The source CIDR block. The CIDR block 0.0.0.0/0 applies to all addresses.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsNetworkAclRuleState.__new__(_IsNetworkAclRuleState)

        __props__.__dict__["action"] = action
        __props__.__dict__["before"] = before
        __props__.__dict__["destination"] = destination
        __props__.__dict__["direction"] = direction
        __props__.__dict__["href"] = href
        __props__.__dict__["icmp"] = icmp
        __props__.__dict__["ip_version"] = ip_version
        __props__.__dict__["is_network_acl_rule_id"] = is_network_acl_rule_id
        __props__.__dict__["name"] = name
        __props__.__dict__["network_acl"] = network_acl
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["rule_id"] = rule_id
        __props__.__dict__["source"] = source
        __props__.__dict__["tcp"] = tcp
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["udp"] = udp
        return IsNetworkAclRule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Output[_builtins.str]:
        """
        Whether to allow or deny matching traffic
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter
    def before(self) -> pulumi.Output[_builtins.str]:
        """
        The rule that this rule is immediately before. If absent, this is the last rule.
        """
        return pulumi.get(self, "before")

    @_builtins.property
    @pulumi.getter
    def destination(self) -> pulumi.Output[_builtins.str]:
        """
        The destination CIDR block. The CIDR block 0.0.0.0/0 applies to all addresses.
        """
        return pulumi.get(self, "destination")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> pulumi.Output[_builtins.str]:
        """
        Direction of traffic to enforce, either inbound or outbound
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        The url of the rule.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def icmp(self) -> pulumi.Output[Optional['outputs.IsNetworkAclRuleIcmp']]:
        return pulumi.get(self, "icmp")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> pulumi.Output[_builtins.str]:
        """
        The IP version for this rule.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter(name="isNetworkAclRuleId")
    def is_network_acl_rule_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_network_acl_rule_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The user-defined name for this rule. Names must be unique within the network ACL the rule resides in. If unspecified,
        the name will be a hyphenated list of randomly-selected words.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkAcl")
    def network_acl(self) -> pulumi.Output[_builtins.str]:
        """
        Network ACL id
        """
        return pulumi.get(self, "network_acl")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[_builtins.str]:
        """
        The protocol of the rule.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> pulumi.Output[_builtins.str]:
        """
        The network acl rule id.
        """
        return pulumi.get(self, "rule_id")

    @_builtins.property
    @pulumi.getter
    def source(self) -> pulumi.Output[_builtins.str]:
        """
        The source CIDR block. The CIDR block 0.0.0.0/0 applies to all addresses.
        """
        return pulumi.get(self, "source")

    @_builtins.property
    @pulumi.getter
    def tcp(self) -> pulumi.Output[Optional['outputs.IsNetworkAclRuleTcp']]:
        return pulumi.get(self, "tcp")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IsNetworkAclRuleTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def udp(self) -> pulumi.Output[Optional['outputs.IsNetworkAclRuleUdp']]:
        return pulumi.get(self, "udp")

