# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsVirtualNetworkInterfaceResult',
    'AwaitableGetIsVirtualNetworkInterfaceResult',
    'get_is_virtual_network_interface',
    'get_is_virtual_network_interface_output',
]

@pulumi.output_type
class GetIsVirtualNetworkInterfaceResult:
    """
    A collection of values returned by getIsVirtualNetworkInterface.
    """
    def __init__(__self__, access_tags=None, allow_ip_spoofing=None, auto_delete=None, created_at=None, crn=None, enable_infrastructure_nat=None, href=None, id=None, ips=None, lifecycle_state=None, mac_address=None, name=None, primary_ips=None, protocol_state_filtering_mode=None, resource_groups=None, resource_type=None, security_groups=None, subnets=None, tags=None, targets=None, virtual_network_interface=None, vpcs=None, zones=None):
        if access_tags and not isinstance(access_tags, list):
            raise TypeError("Expected argument 'access_tags' to be a list")
        pulumi.set(__self__, "access_tags", access_tags)
        if allow_ip_spoofing and not isinstance(allow_ip_spoofing, bool):
            raise TypeError("Expected argument 'allow_ip_spoofing' to be a bool")
        pulumi.set(__self__, "allow_ip_spoofing", allow_ip_spoofing)
        if auto_delete and not isinstance(auto_delete, bool):
            raise TypeError("Expected argument 'auto_delete' to be a bool")
        pulumi.set(__self__, "auto_delete", auto_delete)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if enable_infrastructure_nat and not isinstance(enable_infrastructure_nat, bool):
            raise TypeError("Expected argument 'enable_infrastructure_nat' to be a bool")
        pulumi.set(__self__, "enable_infrastructure_nat", enable_infrastructure_nat)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ips and not isinstance(ips, list):
            raise TypeError("Expected argument 'ips' to be a list")
        pulumi.set(__self__, "ips", ips)
        if lifecycle_state and not isinstance(lifecycle_state, str):
            raise TypeError("Expected argument 'lifecycle_state' to be a str")
        pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if mac_address and not isinstance(mac_address, str):
            raise TypeError("Expected argument 'mac_address' to be a str")
        pulumi.set(__self__, "mac_address", mac_address)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if primary_ips and not isinstance(primary_ips, list):
            raise TypeError("Expected argument 'primary_ips' to be a list")
        pulumi.set(__self__, "primary_ips", primary_ips)
        if protocol_state_filtering_mode and not isinstance(protocol_state_filtering_mode, str):
            raise TypeError("Expected argument 'protocol_state_filtering_mode' to be a str")
        pulumi.set(__self__, "protocol_state_filtering_mode", protocol_state_filtering_mode)
        if resource_groups and not isinstance(resource_groups, list):
            raise TypeError("Expected argument 'resource_groups' to be a list")
        pulumi.set(__self__, "resource_groups", resource_groups)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if security_groups and not isinstance(security_groups, list):
            raise TypeError("Expected argument 'security_groups' to be a list")
        pulumi.set(__self__, "security_groups", security_groups)
        if subnets and not isinstance(subnets, list):
            raise TypeError("Expected argument 'subnets' to be a list")
        pulumi.set(__self__, "subnets", subnets)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if targets and not isinstance(targets, list):
            raise TypeError("Expected argument 'targets' to be a list")
        pulumi.set(__self__, "targets", targets)
        if virtual_network_interface and not isinstance(virtual_network_interface, str):
            raise TypeError("Expected argument 'virtual_network_interface' to be a str")
        pulumi.set(__self__, "virtual_network_interface", virtual_network_interface)
        if vpcs and not isinstance(vpcs, list):
            raise TypeError("Expected argument 'vpcs' to be a list")
        pulumi.set(__self__, "vpcs", vpcs)
        if zones and not isinstance(zones, list):
            raise TypeError("Expected argument 'zones' to be a list")
        pulumi.set(__self__, "zones", zones)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter(name="allowIpSpoofing")
    def allow_ip_spoofing(self) -> _builtins.bool:
        return pulumi.get(self, "allow_ip_spoofing")

    @_builtins.property
    @pulumi.getter(name="autoDelete")
    def auto_delete(self) -> _builtins.bool:
        return pulumi.get(self, "auto_delete")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="enableInfrastructureNat")
    def enable_infrastructure_nat(self) -> _builtins.bool:
        return pulumi.get(self, "enable_infrastructure_nat")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ips(self) -> Sequence['outputs.GetIsVirtualNetworkInterfaceIpResult']:
        return pulumi.get(self, "ips")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> _builtins.str:
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> _builtins.str:
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="primaryIps")
    def primary_ips(self) -> Sequence['outputs.GetIsVirtualNetworkInterfacePrimaryIpResult']:
        return pulumi.get(self, "primary_ips")

    @_builtins.property
    @pulumi.getter(name="protocolStateFilteringMode")
    def protocol_state_filtering_mode(self) -> _builtins.str:
        return pulumi.get(self, "protocol_state_filtering_mode")

    @_builtins.property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Sequence['outputs.GetIsVirtualNetworkInterfaceResourceGroupResult']:
        return pulumi.get(self, "resource_groups")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence['outputs.GetIsVirtualNetworkInterfaceSecurityGroupResult']:
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> Sequence['outputs.GetIsVirtualNetworkInterfaceSubnetResult']:
        return pulumi.get(self, "subnets")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetIsVirtualNetworkInterfaceTargetResult']:
        return pulumi.get(self, "targets")

    @_builtins.property
    @pulumi.getter(name="virtualNetworkInterface")
    def virtual_network_interface(self) -> _builtins.str:
        return pulumi.get(self, "virtual_network_interface")

    @_builtins.property
    @pulumi.getter
    def vpcs(self) -> Sequence['outputs.GetIsVirtualNetworkInterfaceVpcResult']:
        return pulumi.get(self, "vpcs")

    @_builtins.property
    @pulumi.getter
    def zones(self) -> Sequence['outputs.GetIsVirtualNetworkInterfaceZoneResult']:
        return pulumi.get(self, "zones")


class AwaitableGetIsVirtualNetworkInterfaceResult(GetIsVirtualNetworkInterfaceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsVirtualNetworkInterfaceResult(
            access_tags=self.access_tags,
            allow_ip_spoofing=self.allow_ip_spoofing,
            auto_delete=self.auto_delete,
            created_at=self.created_at,
            crn=self.crn,
            enable_infrastructure_nat=self.enable_infrastructure_nat,
            href=self.href,
            id=self.id,
            ips=self.ips,
            lifecycle_state=self.lifecycle_state,
            mac_address=self.mac_address,
            name=self.name,
            primary_ips=self.primary_ips,
            protocol_state_filtering_mode=self.protocol_state_filtering_mode,
            resource_groups=self.resource_groups,
            resource_type=self.resource_type,
            security_groups=self.security_groups,
            subnets=self.subnets,
            tags=self.tags,
            targets=self.targets,
            virtual_network_interface=self.virtual_network_interface,
            vpcs=self.vpcs,
            zones=self.zones)


def get_is_virtual_network_interface(id: Optional[_builtins.str] = None,
                                     virtual_network_interface: Optional[_builtins.str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsVirtualNetworkInterfaceResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['virtualNetworkInterface'] = virtual_network_interface
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsVirtualNetworkInterface:getIsVirtualNetworkInterface', __args__, opts=opts, typ=GetIsVirtualNetworkInterfaceResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsVirtualNetworkInterfaceResult(
        access_tags=pulumi.get(__ret__, 'access_tags'),
        allow_ip_spoofing=pulumi.get(__ret__, 'allow_ip_spoofing'),
        auto_delete=pulumi.get(__ret__, 'auto_delete'),
        created_at=pulumi.get(__ret__, 'created_at'),
        crn=pulumi.get(__ret__, 'crn'),
        enable_infrastructure_nat=pulumi.get(__ret__, 'enable_infrastructure_nat'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        ips=pulumi.get(__ret__, 'ips'),
        lifecycle_state=pulumi.get(__ret__, 'lifecycle_state'),
        mac_address=pulumi.get(__ret__, 'mac_address'),
        name=pulumi.get(__ret__, 'name'),
        primary_ips=pulumi.get(__ret__, 'primary_ips'),
        protocol_state_filtering_mode=pulumi.get(__ret__, 'protocol_state_filtering_mode'),
        resource_groups=pulumi.get(__ret__, 'resource_groups'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        security_groups=pulumi.get(__ret__, 'security_groups'),
        subnets=pulumi.get(__ret__, 'subnets'),
        tags=pulumi.get(__ret__, 'tags'),
        targets=pulumi.get(__ret__, 'targets'),
        virtual_network_interface=pulumi.get(__ret__, 'virtual_network_interface'),
        vpcs=pulumi.get(__ret__, 'vpcs'),
        zones=pulumi.get(__ret__, 'zones'))
def get_is_virtual_network_interface_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            virtual_network_interface: Optional[pulumi.Input[_builtins.str]] = None,
                                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsVirtualNetworkInterfaceResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['virtualNetworkInterface'] = virtual_network_interface
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsVirtualNetworkInterface:getIsVirtualNetworkInterface', __args__, opts=opts, typ=GetIsVirtualNetworkInterfaceResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsVirtualNetworkInterfaceResult(
        access_tags=pulumi.get(__response__, 'access_tags'),
        allow_ip_spoofing=pulumi.get(__response__, 'allow_ip_spoofing'),
        auto_delete=pulumi.get(__response__, 'auto_delete'),
        created_at=pulumi.get(__response__, 'created_at'),
        crn=pulumi.get(__response__, 'crn'),
        enable_infrastructure_nat=pulumi.get(__response__, 'enable_infrastructure_nat'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        ips=pulumi.get(__response__, 'ips'),
        lifecycle_state=pulumi.get(__response__, 'lifecycle_state'),
        mac_address=pulumi.get(__response__, 'mac_address'),
        name=pulumi.get(__response__, 'name'),
        primary_ips=pulumi.get(__response__, 'primary_ips'),
        protocol_state_filtering_mode=pulumi.get(__response__, 'protocol_state_filtering_mode'),
        resource_groups=pulumi.get(__response__, 'resource_groups'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        security_groups=pulumi.get(__response__, 'security_groups'),
        subnets=pulumi.get(__response__, 'subnets'),
        tags=pulumi.get(__response__, 'tags'),
        targets=pulumi.get(__response__, 'targets'),
        virtual_network_interface=pulumi.get(__response__, 'virtual_network_interface'),
        vpcs=pulumi.get(__response__, 'vpcs'),
        zones=pulumi.get(__response__, 'zones')))
