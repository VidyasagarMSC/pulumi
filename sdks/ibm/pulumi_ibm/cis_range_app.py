# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['CisRangeAppArgs', 'CisRangeApp']

@pulumi.input_type
class CisRangeAppArgs:
    def __init__(__self__, *,
                 cis_id: pulumi.Input[_builtins.str],
                 dns: pulumi.Input[_builtins.str],
                 dns_type: pulumi.Input[_builtins.str],
                 domain_id: pulumi.Input[_builtins.str],
                 protocol: pulumi.Input[_builtins.str],
                 cis_range_app_id: Optional[pulumi.Input[_builtins.str]] = None,
                 edge_ips_connectivity: Optional[pulumi.Input[_builtins.str]] = None,
                 edge_ips_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_firewall: Optional[pulumi.Input[_builtins.bool]] = None,
                 origin_directs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 origin_dns: Optional[pulumi.Input[_builtins.str]] = None,
                 origin_port: Optional[pulumi.Input[_builtins.float]] = None,
                 proxy_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 tls: Optional[pulumi.Input[_builtins.str]] = None,
                 traffic_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CisRangeApp resource.
        :param pulumi.Input[_builtins.str] cis_id: CIS Intance CRN
        :param pulumi.Input[_builtins.str] dns: Name of the DNS record for this application
        :param pulumi.Input[_builtins.str] dns_type: Type of the DNS record for this application
        :param pulumi.Input[_builtins.str] domain_id: CIS Domain ID
        :param pulumi.Input[_builtins.str] protocol: Defines the protocol and port for this application
        :param pulumi.Input[_builtins.str] edge_ips_connectivity: Specifies the IP version.
        :param pulumi.Input[_builtins.str] edge_ips_type: The type of edge IP configuration.
        :param pulumi.Input[_builtins.bool] ip_firewall: Enables the IP Firewall for this application. Only available for TCP applications.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] origin_directs: IP address and port of the origin for this Range application.
        :param pulumi.Input[_builtins.str] origin_dns: DNS record pointing to the origin for this Range application.
        :param pulumi.Input[_builtins.float] origin_port: Port at the origin that listens to traffic
        :param pulumi.Input[_builtins.str] proxy_protocol: Allows for the true client IP to be passed to the service.
        :param pulumi.Input[_builtins.str] tls: Configure if and how TLS connections are terminated at the edge.
        :param pulumi.Input[_builtins.str] traffic_type: Configure how traffic is handled at the edge.
        """
        pulumi.set(__self__, "cis_id", cis_id)
        pulumi.set(__self__, "dns", dns)
        pulumi.set(__self__, "dns_type", dns_type)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "protocol", protocol)
        if cis_range_app_id is not None:
            pulumi.set(__self__, "cis_range_app_id", cis_range_app_id)
        if edge_ips_connectivity is not None:
            pulumi.set(__self__, "edge_ips_connectivity", edge_ips_connectivity)
        if edge_ips_type is not None:
            pulumi.set(__self__, "edge_ips_type", edge_ips_type)
        if ip_firewall is not None:
            pulumi.set(__self__, "ip_firewall", ip_firewall)
        if origin_directs is not None:
            pulumi.set(__self__, "origin_directs", origin_directs)
        if origin_dns is not None:
            pulumi.set(__self__, "origin_dns", origin_dns)
        if origin_port is not None:
            pulumi.set(__self__, "origin_port", origin_port)
        if proxy_protocol is not None:
            pulumi.set(__self__, "proxy_protocol", proxy_protocol)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)
        if traffic_type is not None:
            pulumi.set(__self__, "traffic_type", traffic_type)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Input[_builtins.str]:
        """
        CIS Intance CRN
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter
    def dns(self) -> pulumi.Input[_builtins.str]:
        """
        Name of the DNS record for this application
        """
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "dns", value)

    @_builtins.property
    @pulumi.getter(name="dnsType")
    def dns_type(self) -> pulumi.Input[_builtins.str]:
        """
        Type of the DNS record for this application
        """
        return pulumi.get(self, "dns_type")

    @dns_type.setter
    def dns_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "dns_type", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Input[_builtins.str]:
        """
        CIS Domain ID
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[_builtins.str]:
        """
        Defines the protocol and port for this application
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="cisRangeAppId")
    def cis_range_app_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_range_app_id")

    @cis_range_app_id.setter
    def cis_range_app_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_range_app_id", value)

    @_builtins.property
    @pulumi.getter(name="edgeIpsConnectivity")
    def edge_ips_connectivity(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the IP version.
        """
        return pulumi.get(self, "edge_ips_connectivity")

    @edge_ips_connectivity.setter
    def edge_ips_connectivity(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "edge_ips_connectivity", value)

    @_builtins.property
    @pulumi.getter(name="edgeIpsType")
    def edge_ips_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of edge IP configuration.
        """
        return pulumi.get(self, "edge_ips_type")

    @edge_ips_type.setter
    def edge_ips_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "edge_ips_type", value)

    @_builtins.property
    @pulumi.getter(name="ipFirewall")
    def ip_firewall(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enables the IP Firewall for this application. Only available for TCP applications.
        """
        return pulumi.get(self, "ip_firewall")

    @ip_firewall.setter
    def ip_firewall(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ip_firewall", value)

    @_builtins.property
    @pulumi.getter(name="originDirects")
    def origin_directs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        IP address and port of the origin for this Range application.
        """
        return pulumi.get(self, "origin_directs")

    @origin_directs.setter
    def origin_directs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "origin_directs", value)

    @_builtins.property
    @pulumi.getter(name="originDns")
    def origin_dns(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        DNS record pointing to the origin for this Range application.
        """
        return pulumi.get(self, "origin_dns")

    @origin_dns.setter
    def origin_dns(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "origin_dns", value)

    @_builtins.property
    @pulumi.getter(name="originPort")
    def origin_port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Port at the origin that listens to traffic
        """
        return pulumi.get(self, "origin_port")

    @origin_port.setter
    def origin_port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "origin_port", value)

    @_builtins.property
    @pulumi.getter(name="proxyProtocol")
    def proxy_protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Allows for the true client IP to be passed to the service.
        """
        return pulumi.get(self, "proxy_protocol")

    @proxy_protocol.setter
    def proxy_protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "proxy_protocol", value)

    @_builtins.property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure if and how TLS connections are terminated at the edge.
        """
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tls", value)

    @_builtins.property
    @pulumi.getter(name="trafficType")
    def traffic_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure how traffic is handled at the edge.
        """
        return pulumi.get(self, "traffic_type")

    @traffic_type.setter
    def traffic_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "traffic_type", value)


@pulumi.input_type
class _CisRangeAppState:
    def __init__(__self__, *,
                 app_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_range_app_id: Optional[pulumi.Input[_builtins.str]] = None,
                 created_on: Optional[pulumi.Input[_builtins.str]] = None,
                 dns: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_type: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 edge_ips_connectivity: Optional[pulumi.Input[_builtins.str]] = None,
                 edge_ips_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_firewall: Optional[pulumi.Input[_builtins.bool]] = None,
                 modified_on: Optional[pulumi.Input[_builtins.str]] = None,
                 origin_directs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 origin_dns: Optional[pulumi.Input[_builtins.str]] = None,
                 origin_port: Optional[pulumi.Input[_builtins.float]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 proxy_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 tls: Optional[pulumi.Input[_builtins.str]] = None,
                 traffic_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CisRangeApp resources.
        :param pulumi.Input[_builtins.str] app_id: Application identifier
        :param pulumi.Input[_builtins.str] cis_id: CIS Intance CRN
        :param pulumi.Input[_builtins.str] created_on: created on date
        :param pulumi.Input[_builtins.str] dns: Name of the DNS record for this application
        :param pulumi.Input[_builtins.str] dns_type: Type of the DNS record for this application
        :param pulumi.Input[_builtins.str] domain_id: CIS Domain ID
        :param pulumi.Input[_builtins.str] edge_ips_connectivity: Specifies the IP version.
        :param pulumi.Input[_builtins.str] edge_ips_type: The type of edge IP configuration.
        :param pulumi.Input[_builtins.bool] ip_firewall: Enables the IP Firewall for this application. Only available for TCP applications.
        :param pulumi.Input[_builtins.str] modified_on: modified on date
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] origin_directs: IP address and port of the origin for this Range application.
        :param pulumi.Input[_builtins.str] origin_dns: DNS record pointing to the origin for this Range application.
        :param pulumi.Input[_builtins.float] origin_port: Port at the origin that listens to traffic
        :param pulumi.Input[_builtins.str] protocol: Defines the protocol and port for this application
        :param pulumi.Input[_builtins.str] proxy_protocol: Allows for the true client IP to be passed to the service.
        :param pulumi.Input[_builtins.str] tls: Configure if and how TLS connections are terminated at the edge.
        :param pulumi.Input[_builtins.str] traffic_type: Configure how traffic is handled at the edge.
        """
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if cis_id is not None:
            pulumi.set(__self__, "cis_id", cis_id)
        if cis_range_app_id is not None:
            pulumi.set(__self__, "cis_range_app_id", cis_range_app_id)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if dns_type is not None:
            pulumi.set(__self__, "dns_type", dns_type)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if edge_ips_connectivity is not None:
            pulumi.set(__self__, "edge_ips_connectivity", edge_ips_connectivity)
        if edge_ips_type is not None:
            pulumi.set(__self__, "edge_ips_type", edge_ips_type)
        if ip_firewall is not None:
            pulumi.set(__self__, "ip_firewall", ip_firewall)
        if modified_on is not None:
            pulumi.set(__self__, "modified_on", modified_on)
        if origin_directs is not None:
            pulumi.set(__self__, "origin_directs", origin_directs)
        if origin_dns is not None:
            pulumi.set(__self__, "origin_dns", origin_dns)
        if origin_port is not None:
            pulumi.set(__self__, "origin_port", origin_port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if proxy_protocol is not None:
            pulumi.set(__self__, "proxy_protocol", proxy_protocol)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)
        if traffic_type is not None:
            pulumi.set(__self__, "traffic_type", traffic_type)

    @_builtins.property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Application identifier
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_id", value)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CIS Intance CRN
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter(name="cisRangeAppId")
    def cis_range_app_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_range_app_id")

    @cis_range_app_id.setter
    def cis_range_app_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_range_app_id", value)

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        created on date
        """
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_on", value)

    @_builtins.property
    @pulumi.getter
    def dns(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the DNS record for this application
        """
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns", value)

    @_builtins.property
    @pulumi.getter(name="dnsType")
    def dns_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of the DNS record for this application
        """
        return pulumi.get(self, "dns_type")

    @dns_type.setter
    def dns_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_type", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CIS Domain ID
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter(name="edgeIpsConnectivity")
    def edge_ips_connectivity(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the IP version.
        """
        return pulumi.get(self, "edge_ips_connectivity")

    @edge_ips_connectivity.setter
    def edge_ips_connectivity(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "edge_ips_connectivity", value)

    @_builtins.property
    @pulumi.getter(name="edgeIpsType")
    def edge_ips_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of edge IP configuration.
        """
        return pulumi.get(self, "edge_ips_type")

    @edge_ips_type.setter
    def edge_ips_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "edge_ips_type", value)

    @_builtins.property
    @pulumi.getter(name="ipFirewall")
    def ip_firewall(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enables the IP Firewall for this application. Only available for TCP applications.
        """
        return pulumi.get(self, "ip_firewall")

    @ip_firewall.setter
    def ip_firewall(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ip_firewall", value)

    @_builtins.property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        modified on date
        """
        return pulumi.get(self, "modified_on")

    @modified_on.setter
    def modified_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "modified_on", value)

    @_builtins.property
    @pulumi.getter(name="originDirects")
    def origin_directs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        IP address and port of the origin for this Range application.
        """
        return pulumi.get(self, "origin_directs")

    @origin_directs.setter
    def origin_directs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "origin_directs", value)

    @_builtins.property
    @pulumi.getter(name="originDns")
    def origin_dns(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        DNS record pointing to the origin for this Range application.
        """
        return pulumi.get(self, "origin_dns")

    @origin_dns.setter
    def origin_dns(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "origin_dns", value)

    @_builtins.property
    @pulumi.getter(name="originPort")
    def origin_port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Port at the origin that listens to traffic
        """
        return pulumi.get(self, "origin_port")

    @origin_port.setter
    def origin_port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "origin_port", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Defines the protocol and port for this application
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="proxyProtocol")
    def proxy_protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Allows for the true client IP to be passed to the service.
        """
        return pulumi.get(self, "proxy_protocol")

    @proxy_protocol.setter
    def proxy_protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "proxy_protocol", value)

    @_builtins.property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure if and how TLS connections are terminated at the edge.
        """
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tls", value)

    @_builtins.property
    @pulumi.getter(name="trafficType")
    def traffic_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configure how traffic is handled at the edge.
        """
        return pulumi.get(self, "traffic_type")

    @traffic_type.setter
    def traffic_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "traffic_type", value)


@pulumi.type_token("ibm:index/cisRangeApp:CisRangeApp")
class CisRangeApp(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_range_app_id: Optional[pulumi.Input[_builtins.str]] = None,
                 dns: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_type: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 edge_ips_connectivity: Optional[pulumi.Input[_builtins.str]] = None,
                 edge_ips_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_firewall: Optional[pulumi.Input[_builtins.bool]] = None,
                 origin_directs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 origin_dns: Optional[pulumi.Input[_builtins.str]] = None,
                 origin_port: Optional[pulumi.Input[_builtins.float]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 proxy_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 tls: Optional[pulumi.Input[_builtins.str]] = None,
                 traffic_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a CisRangeApp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cis_id: CIS Intance CRN
        :param pulumi.Input[_builtins.str] dns: Name of the DNS record for this application
        :param pulumi.Input[_builtins.str] dns_type: Type of the DNS record for this application
        :param pulumi.Input[_builtins.str] domain_id: CIS Domain ID
        :param pulumi.Input[_builtins.str] edge_ips_connectivity: Specifies the IP version.
        :param pulumi.Input[_builtins.str] edge_ips_type: The type of edge IP configuration.
        :param pulumi.Input[_builtins.bool] ip_firewall: Enables the IP Firewall for this application. Only available for TCP applications.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] origin_directs: IP address and port of the origin for this Range application.
        :param pulumi.Input[_builtins.str] origin_dns: DNS record pointing to the origin for this Range application.
        :param pulumi.Input[_builtins.float] origin_port: Port at the origin that listens to traffic
        :param pulumi.Input[_builtins.str] protocol: Defines the protocol and port for this application
        :param pulumi.Input[_builtins.str] proxy_protocol: Allows for the true client IP to be passed to the service.
        :param pulumi.Input[_builtins.str] tls: Configure if and how TLS connections are terminated at the edge.
        :param pulumi.Input[_builtins.str] traffic_type: Configure how traffic is handled at the edge.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CisRangeAppArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CisRangeApp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CisRangeAppArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CisRangeAppArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_range_app_id: Optional[pulumi.Input[_builtins.str]] = None,
                 dns: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_type: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 edge_ips_connectivity: Optional[pulumi.Input[_builtins.str]] = None,
                 edge_ips_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_firewall: Optional[pulumi.Input[_builtins.bool]] = None,
                 origin_directs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 origin_dns: Optional[pulumi.Input[_builtins.str]] = None,
                 origin_port: Optional[pulumi.Input[_builtins.float]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 proxy_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 tls: Optional[pulumi.Input[_builtins.str]] = None,
                 traffic_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CisRangeAppArgs.__new__(CisRangeAppArgs)

            if cis_id is None and not opts.urn:
                raise TypeError("Missing required property 'cis_id'")
            __props__.__dict__["cis_id"] = cis_id
            __props__.__dict__["cis_range_app_id"] = cis_range_app_id
            if dns is None and not opts.urn:
                raise TypeError("Missing required property 'dns'")
            __props__.__dict__["dns"] = dns
            if dns_type is None and not opts.urn:
                raise TypeError("Missing required property 'dns_type'")
            __props__.__dict__["dns_type"] = dns_type
            if domain_id is None and not opts.urn:
                raise TypeError("Missing required property 'domain_id'")
            __props__.__dict__["domain_id"] = domain_id
            __props__.__dict__["edge_ips_connectivity"] = edge_ips_connectivity
            __props__.__dict__["edge_ips_type"] = edge_ips_type
            __props__.__dict__["ip_firewall"] = ip_firewall
            __props__.__dict__["origin_directs"] = origin_directs
            __props__.__dict__["origin_dns"] = origin_dns
            __props__.__dict__["origin_port"] = origin_port
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["proxy_protocol"] = proxy_protocol
            __props__.__dict__["tls"] = tls
            __props__.__dict__["traffic_type"] = traffic_type
            __props__.__dict__["app_id"] = None
            __props__.__dict__["created_on"] = None
            __props__.__dict__["modified_on"] = None
        super(CisRangeApp, __self__).__init__(
            'ibm:index/cisRangeApp:CisRangeApp',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_id: Optional[pulumi.Input[_builtins.str]] = None,
            cis_id: Optional[pulumi.Input[_builtins.str]] = None,
            cis_range_app_id: Optional[pulumi.Input[_builtins.str]] = None,
            created_on: Optional[pulumi.Input[_builtins.str]] = None,
            dns: Optional[pulumi.Input[_builtins.str]] = None,
            dns_type: Optional[pulumi.Input[_builtins.str]] = None,
            domain_id: Optional[pulumi.Input[_builtins.str]] = None,
            edge_ips_connectivity: Optional[pulumi.Input[_builtins.str]] = None,
            edge_ips_type: Optional[pulumi.Input[_builtins.str]] = None,
            ip_firewall: Optional[pulumi.Input[_builtins.bool]] = None,
            modified_on: Optional[pulumi.Input[_builtins.str]] = None,
            origin_directs: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            origin_dns: Optional[pulumi.Input[_builtins.str]] = None,
            origin_port: Optional[pulumi.Input[_builtins.float]] = None,
            protocol: Optional[pulumi.Input[_builtins.str]] = None,
            proxy_protocol: Optional[pulumi.Input[_builtins.str]] = None,
            tls: Optional[pulumi.Input[_builtins.str]] = None,
            traffic_type: Optional[pulumi.Input[_builtins.str]] = None) -> 'CisRangeApp':
        """
        Get an existing CisRangeApp resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] app_id: Application identifier
        :param pulumi.Input[_builtins.str] cis_id: CIS Intance CRN
        :param pulumi.Input[_builtins.str] created_on: created on date
        :param pulumi.Input[_builtins.str] dns: Name of the DNS record for this application
        :param pulumi.Input[_builtins.str] dns_type: Type of the DNS record for this application
        :param pulumi.Input[_builtins.str] domain_id: CIS Domain ID
        :param pulumi.Input[_builtins.str] edge_ips_connectivity: Specifies the IP version.
        :param pulumi.Input[_builtins.str] edge_ips_type: The type of edge IP configuration.
        :param pulumi.Input[_builtins.bool] ip_firewall: Enables the IP Firewall for this application. Only available for TCP applications.
        :param pulumi.Input[_builtins.str] modified_on: modified on date
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] origin_directs: IP address and port of the origin for this Range application.
        :param pulumi.Input[_builtins.str] origin_dns: DNS record pointing to the origin for this Range application.
        :param pulumi.Input[_builtins.float] origin_port: Port at the origin that listens to traffic
        :param pulumi.Input[_builtins.str] protocol: Defines the protocol and port for this application
        :param pulumi.Input[_builtins.str] proxy_protocol: Allows for the true client IP to be passed to the service.
        :param pulumi.Input[_builtins.str] tls: Configure if and how TLS connections are terminated at the edge.
        :param pulumi.Input[_builtins.str] traffic_type: Configure how traffic is handled at the edge.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CisRangeAppState.__new__(_CisRangeAppState)

        __props__.__dict__["app_id"] = app_id
        __props__.__dict__["cis_id"] = cis_id
        __props__.__dict__["cis_range_app_id"] = cis_range_app_id
        __props__.__dict__["created_on"] = created_on
        __props__.__dict__["dns"] = dns
        __props__.__dict__["dns_type"] = dns_type
        __props__.__dict__["domain_id"] = domain_id
        __props__.__dict__["edge_ips_connectivity"] = edge_ips_connectivity
        __props__.__dict__["edge_ips_type"] = edge_ips_type
        __props__.__dict__["ip_firewall"] = ip_firewall
        __props__.__dict__["modified_on"] = modified_on
        __props__.__dict__["origin_directs"] = origin_directs
        __props__.__dict__["origin_dns"] = origin_dns
        __props__.__dict__["origin_port"] = origin_port
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["proxy_protocol"] = proxy_protocol
        __props__.__dict__["tls"] = tls
        __props__.__dict__["traffic_type"] = traffic_type
        return CisRangeApp(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Output[_builtins.str]:
        """
        Application identifier
        """
        return pulumi.get(self, "app_id")

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Output[_builtins.str]:
        """
        CIS Intance CRN
        """
        return pulumi.get(self, "cis_id")

    @_builtins.property
    @pulumi.getter(name="cisRangeAppId")
    def cis_range_app_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cis_range_app_id")

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> pulumi.Output[_builtins.str]:
        """
        created on date
        """
        return pulumi.get(self, "created_on")

    @_builtins.property
    @pulumi.getter
    def dns(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the DNS record for this application
        """
        return pulumi.get(self, "dns")

    @_builtins.property
    @pulumi.getter(name="dnsType")
    def dns_type(self) -> pulumi.Output[_builtins.str]:
        """
        Type of the DNS record for this application
        """
        return pulumi.get(self, "dns_type")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Output[_builtins.str]:
        """
        CIS Domain ID
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="edgeIpsConnectivity")
    def edge_ips_connectivity(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the IP version.
        """
        return pulumi.get(self, "edge_ips_connectivity")

    @_builtins.property
    @pulumi.getter(name="edgeIpsType")
    def edge_ips_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The type of edge IP configuration.
        """
        return pulumi.get(self, "edge_ips_type")

    @_builtins.property
    @pulumi.getter(name="ipFirewall")
    def ip_firewall(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Enables the IP Firewall for this application. Only available for TCP applications.
        """
        return pulumi.get(self, "ip_firewall")

    @_builtins.property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> pulumi.Output[_builtins.str]:
        """
        modified on date
        """
        return pulumi.get(self, "modified_on")

    @_builtins.property
    @pulumi.getter(name="originDirects")
    def origin_directs(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        IP address and port of the origin for this Range application.
        """
        return pulumi.get(self, "origin_directs")

    @_builtins.property
    @pulumi.getter(name="originDns")
    def origin_dns(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        DNS record pointing to the origin for this Range application.
        """
        return pulumi.get(self, "origin_dns")

    @_builtins.property
    @pulumi.getter(name="originPort")
    def origin_port(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Port at the origin that listens to traffic
        """
        return pulumi.get(self, "origin_port")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[_builtins.str]:
        """
        Defines the protocol and port for this application
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="proxyProtocol")
    def proxy_protocol(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Allows for the true client IP to be passed to the service.
        """
        return pulumi.get(self, "proxy_protocol")

    @_builtins.property
    @pulumi.getter
    def tls(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Configure if and how TLS connections are terminated at the edge.
        """
        return pulumi.get(self, "tls")

    @_builtins.property
    @pulumi.getter(name="trafficType")
    def traffic_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Configure how traffic is handled at the edge.
        """
        return pulumi.get(self, "traffic_type")

