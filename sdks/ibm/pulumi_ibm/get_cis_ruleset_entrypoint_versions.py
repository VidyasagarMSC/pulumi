# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCisRulesetEntrypointVersionsResult',
    'AwaitableGetCisRulesetEntrypointVersionsResult',
    'get_cis_ruleset_entrypoint_versions',
    'get_cis_ruleset_entrypoint_versions_output',
]

@pulumi.output_type
class GetCisRulesetEntrypointVersionsResult:
    """
    A collection of values returned by getCisRulesetEntrypointVersions.
    """
    def __init__(__self__, cis_id=None, domain_id=None, id=None, list_all=None, phase=None, ruleset_id=None, rulesets=None, version=None):
        if cis_id and not isinstance(cis_id, str):
            raise TypeError("Expected argument 'cis_id' to be a str")
        pulumi.set(__self__, "cis_id", cis_id)
        if domain_id and not isinstance(domain_id, str):
            raise TypeError("Expected argument 'domain_id' to be a str")
        pulumi.set(__self__, "domain_id", domain_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if list_all and not isinstance(list_all, bool):
            raise TypeError("Expected argument 'list_all' to be a bool")
        pulumi.set(__self__, "list_all", list_all)
        if phase and not isinstance(phase, str):
            raise TypeError("Expected argument 'phase' to be a str")
        pulumi.set(__self__, "phase", phase)
        if ruleset_id and not isinstance(ruleset_id, str):
            raise TypeError("Expected argument 'ruleset_id' to be a str")
        pulumi.set(__self__, "ruleset_id", ruleset_id)
        if rulesets and not isinstance(rulesets, list):
            raise TypeError("Expected argument 'rulesets' to be a list")
        pulumi.set(__self__, "rulesets", rulesets)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> _builtins.str:
        return pulumi.get(self, "cis_id")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="listAll")
    def list_all(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "list_all")

    @_builtins.property
    @pulumi.getter
    def phase(self) -> _builtins.str:
        return pulumi.get(self, "phase")

    @_builtins.property
    @pulumi.getter(name="rulesetId")
    def ruleset_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ruleset_id")

    @_builtins.property
    @pulumi.getter
    def rulesets(self) -> Sequence['outputs.GetCisRulesetEntrypointVersionsRulesetResult']:
        return pulumi.get(self, "rulesets")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "version")


class AwaitableGetCisRulesetEntrypointVersionsResult(GetCisRulesetEntrypointVersionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCisRulesetEntrypointVersionsResult(
            cis_id=self.cis_id,
            domain_id=self.domain_id,
            id=self.id,
            list_all=self.list_all,
            phase=self.phase,
            ruleset_id=self.ruleset_id,
            rulesets=self.rulesets,
            version=self.version)


def get_cis_ruleset_entrypoint_versions(cis_id: Optional[_builtins.str] = None,
                                        domain_id: Optional[_builtins.str] = None,
                                        id: Optional[_builtins.str] = None,
                                        list_all: Optional[_builtins.bool] = None,
                                        phase: Optional[_builtins.str] = None,
                                        ruleset_id: Optional[_builtins.str] = None,
                                        version: Optional[_builtins.str] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCisRulesetEntrypointVersionsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cisId'] = cis_id
    __args__['domainId'] = domain_id
    __args__['id'] = id
    __args__['listAll'] = list_all
    __args__['phase'] = phase
    __args__['rulesetId'] = ruleset_id
    __args__['version'] = version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCisRulesetEntrypointVersions:getCisRulesetEntrypointVersions', __args__, opts=opts, typ=GetCisRulesetEntrypointVersionsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCisRulesetEntrypointVersionsResult(
        cis_id=pulumi.get(__ret__, 'cis_id'),
        domain_id=pulumi.get(__ret__, 'domain_id'),
        id=pulumi.get(__ret__, 'id'),
        list_all=pulumi.get(__ret__, 'list_all'),
        phase=pulumi.get(__ret__, 'phase'),
        ruleset_id=pulumi.get(__ret__, 'ruleset_id'),
        rulesets=pulumi.get(__ret__, 'rulesets'),
        version=pulumi.get(__ret__, 'version'))
def get_cis_ruleset_entrypoint_versions_output(cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                                               domain_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                               id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                               list_all: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                               phase: Optional[pulumi.Input[_builtins.str]] = None,
                                               ruleset_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                               version: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCisRulesetEntrypointVersionsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cisId'] = cis_id
    __args__['domainId'] = domain_id
    __args__['id'] = id
    __args__['listAll'] = list_all
    __args__['phase'] = phase
    __args__['rulesetId'] = ruleset_id
    __args__['version'] = version
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCisRulesetEntrypointVersions:getCisRulesetEntrypointVersions', __args__, opts=opts, typ=GetCisRulesetEntrypointVersionsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCisRulesetEntrypointVersionsResult(
        cis_id=pulumi.get(__response__, 'cis_id'),
        domain_id=pulumi.get(__response__, 'domain_id'),
        id=pulumi.get(__response__, 'id'),
        list_all=pulumi.get(__response__, 'list_all'),
        phase=pulumi.get(__response__, 'phase'),
        ruleset_id=pulumi.get(__response__, 'ruleset_id'),
        rulesets=pulumi.get(__response__, 'rulesets'),
        version=pulumi.get(__response__, 'version')))
