# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIamTrustedProfileClaimRuleResult',
    'AwaitableGetIamTrustedProfileClaimRuleResult',
    'get_iam_trusted_profile_claim_rule',
    'get_iam_trusted_profile_claim_rule_output',
]

@pulumi.output_type
class GetIamTrustedProfileClaimRuleResult:
    """
    A collection of values returned by getIamTrustedProfileClaimRule.
    """
    def __init__(__self__, conditions=None, cr_type=None, created_at=None, entity_tag=None, expiration=None, id=None, modified_at=None, name=None, profile_id=None, realm_name=None, rule_id=None, type=None):
        if conditions and not isinstance(conditions, list):
            raise TypeError("Expected argument 'conditions' to be a list")
        pulumi.set(__self__, "conditions", conditions)
        if cr_type and not isinstance(cr_type, str):
            raise TypeError("Expected argument 'cr_type' to be a str")
        pulumi.set(__self__, "cr_type", cr_type)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if entity_tag and not isinstance(entity_tag, str):
            raise TypeError("Expected argument 'entity_tag' to be a str")
        pulumi.set(__self__, "entity_tag", entity_tag)
        if expiration and not isinstance(expiration, float):
            raise TypeError("Expected argument 'expiration' to be a float")
        pulumi.set(__self__, "expiration", expiration)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if modified_at and not isinstance(modified_at, str):
            raise TypeError("Expected argument 'modified_at' to be a str")
        pulumi.set(__self__, "modified_at", modified_at)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if profile_id and not isinstance(profile_id, str):
            raise TypeError("Expected argument 'profile_id' to be a str")
        pulumi.set(__self__, "profile_id", profile_id)
        if realm_name and not isinstance(realm_name, str):
            raise TypeError("Expected argument 'realm_name' to be a str")
        pulumi.set(__self__, "realm_name", realm_name)
        if rule_id and not isinstance(rule_id, str):
            raise TypeError("Expected argument 'rule_id' to be a str")
        pulumi.set(__self__, "rule_id", rule_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetIamTrustedProfileClaimRuleConditionResult']:
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter(name="crType")
    def cr_type(self) -> _builtins.str:
        return pulumi.get(self, "cr_type")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="entityTag")
    def entity_tag(self) -> _builtins.str:
        return pulumi.get(self, "entity_tag")

    @_builtins.property
    @pulumi.getter
    def expiration(self) -> _builtins.float:
        return pulumi.get(self, "expiration")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="modifiedAt")
    def modified_at(self) -> _builtins.str:
        return pulumi.get(self, "modified_at")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> _builtins.str:
        return pulumi.get(self, "profile_id")

    @_builtins.property
    @pulumi.getter(name="realmName")
    def realm_name(self) -> _builtins.str:
        return pulumi.get(self, "realm_name")

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> _builtins.str:
        return pulumi.get(self, "rule_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")


class AwaitableGetIamTrustedProfileClaimRuleResult(GetIamTrustedProfileClaimRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamTrustedProfileClaimRuleResult(
            conditions=self.conditions,
            cr_type=self.cr_type,
            created_at=self.created_at,
            entity_tag=self.entity_tag,
            expiration=self.expiration,
            id=self.id,
            modified_at=self.modified_at,
            name=self.name,
            profile_id=self.profile_id,
            realm_name=self.realm_name,
            rule_id=self.rule_id,
            type=self.type)


def get_iam_trusted_profile_claim_rule(id: Optional[_builtins.str] = None,
                                       profile_id: Optional[_builtins.str] = None,
                                       rule_id: Optional[_builtins.str] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamTrustedProfileClaimRuleResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['profileId'] = profile_id
    __args__['ruleId'] = rule_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIamTrustedProfileClaimRule:getIamTrustedProfileClaimRule', __args__, opts=opts, typ=GetIamTrustedProfileClaimRuleResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIamTrustedProfileClaimRuleResult(
        conditions=pulumi.get(__ret__, 'conditions'),
        cr_type=pulumi.get(__ret__, 'cr_type'),
        created_at=pulumi.get(__ret__, 'created_at'),
        entity_tag=pulumi.get(__ret__, 'entity_tag'),
        expiration=pulumi.get(__ret__, 'expiration'),
        id=pulumi.get(__ret__, 'id'),
        modified_at=pulumi.get(__ret__, 'modified_at'),
        name=pulumi.get(__ret__, 'name'),
        profile_id=pulumi.get(__ret__, 'profile_id'),
        realm_name=pulumi.get(__ret__, 'realm_name'),
        rule_id=pulumi.get(__ret__, 'rule_id'),
        type=pulumi.get(__ret__, 'type'))
def get_iam_trusted_profile_claim_rule_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                                              rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamTrustedProfileClaimRuleResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['profileId'] = profile_id
    __args__['ruleId'] = rule_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIamTrustedProfileClaimRule:getIamTrustedProfileClaimRule', __args__, opts=opts, typ=GetIamTrustedProfileClaimRuleResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIamTrustedProfileClaimRuleResult(
        conditions=pulumi.get(__response__, 'conditions'),
        cr_type=pulumi.get(__response__, 'cr_type'),
        created_at=pulumi.get(__response__, 'created_at'),
        entity_tag=pulumi.get(__response__, 'entity_tag'),
        expiration=pulumi.get(__response__, 'expiration'),
        id=pulumi.get(__response__, 'id'),
        modified_at=pulumi.get(__response__, 'modified_at'),
        name=pulumi.get(__response__, 'name'),
        profile_id=pulumi.get(__response__, 'profile_id'),
        realm_name=pulumi.get(__response__, 'realm_name'),
        rule_id=pulumi.get(__response__, 'rule_id'),
        type=pulumi.get(__response__, 'type')))
