# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['AtrackerSettingsArgs', 'AtrackerSettings']

@pulumi.input_type
class AtrackerSettingsArgs:
    def __init__(__self__, *,
                 metadata_region_primary: pulumi.Input[_builtins.str],
                 private_api_endpoint_only: pulumi.Input[_builtins.bool],
                 atracker_settings_id: Optional[pulumi.Input[_builtins.str]] = None,
                 default_targets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 metadata_region_backup: Optional[pulumi.Input[_builtins.str]] = None,
                 permitted_target_regions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a AtrackerSettings resource.
        :param pulumi.Input[_builtins.str] metadata_region_primary: To store all your meta data in a single region.
        :param pulumi.Input[_builtins.bool] private_api_endpoint_only: If you set this true then you cannot access api through public network.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] default_targets: The target ID List. In the event that no routing rule causes the event to be sent to a target, these targets will
               receive the event.
        :param pulumi.Input[_builtins.str] metadata_region_backup: To store all your meta data in a backup region.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] permitted_target_regions: If present then only these regions may be used to define a target.
        """
        pulumi.set(__self__, "metadata_region_primary", metadata_region_primary)
        pulumi.set(__self__, "private_api_endpoint_only", private_api_endpoint_only)
        if atracker_settings_id is not None:
            pulumi.set(__self__, "atracker_settings_id", atracker_settings_id)
        if default_targets is not None:
            pulumi.set(__self__, "default_targets", default_targets)
        if metadata_region_backup is not None:
            pulumi.set(__self__, "metadata_region_backup", metadata_region_backup)
        if permitted_target_regions is not None:
            pulumi.set(__self__, "permitted_target_regions", permitted_target_regions)

    @_builtins.property
    @pulumi.getter(name="metadataRegionPrimary")
    def metadata_region_primary(self) -> pulumi.Input[_builtins.str]:
        """
        To store all your meta data in a single region.
        """
        return pulumi.get(self, "metadata_region_primary")

    @metadata_region_primary.setter
    def metadata_region_primary(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "metadata_region_primary", value)

    @_builtins.property
    @pulumi.getter(name="privateApiEndpointOnly")
    def private_api_endpoint_only(self) -> pulumi.Input[_builtins.bool]:
        """
        If you set this true then you cannot access api through public network.
        """
        return pulumi.get(self, "private_api_endpoint_only")

    @private_api_endpoint_only.setter
    def private_api_endpoint_only(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "private_api_endpoint_only", value)

    @_builtins.property
    @pulumi.getter(name="atrackerSettingsId")
    def atracker_settings_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "atracker_settings_id")

    @atracker_settings_id.setter
    def atracker_settings_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "atracker_settings_id", value)

    @_builtins.property
    @pulumi.getter(name="defaultTargets")
    def default_targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The target ID List. In the event that no routing rule causes the event to be sent to a target, these targets will
        receive the event.
        """
        return pulumi.get(self, "default_targets")

    @default_targets.setter
    def default_targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "default_targets", value)

    @_builtins.property
    @pulumi.getter(name="metadataRegionBackup")
    def metadata_region_backup(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        To store all your meta data in a backup region.
        """
        return pulumi.get(self, "metadata_region_backup")

    @metadata_region_backup.setter
    def metadata_region_backup(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "metadata_region_backup", value)

    @_builtins.property
    @pulumi.getter(name="permittedTargetRegions")
    def permitted_target_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        If present then only these regions may be used to define a target.
        """
        return pulumi.get(self, "permitted_target_regions")

    @permitted_target_regions.setter
    def permitted_target_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "permitted_target_regions", value)


@pulumi.input_type
class _AtrackerSettingsState:
    def __init__(__self__, *,
                 api_version: Optional[pulumi.Input[_builtins.float]] = None,
                 atracker_settings_id: Optional[pulumi.Input[_builtins.str]] = None,
                 default_targets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 message: Optional[pulumi.Input[_builtins.str]] = None,
                 metadata_region_backup: Optional[pulumi.Input[_builtins.str]] = None,
                 metadata_region_primary: Optional[pulumi.Input[_builtins.str]] = None,
                 permitted_target_regions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 private_api_endpoint_only: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        Input properties used for looking up and filtering AtrackerSettings resources.
        :param pulumi.Input[_builtins.float] api_version: API version used for configuring IBM Cloud Activity Tracker Event Routing resources in the account.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] default_targets: The target ID List. In the event that no routing rule causes the event to be sent to a target, these targets will
               receive the event.
        :param pulumi.Input[_builtins.str] message: An optional message containing information about the audit log locations.
        :param pulumi.Input[_builtins.str] metadata_region_backup: To store all your meta data in a backup region.
        :param pulumi.Input[_builtins.str] metadata_region_primary: To store all your meta data in a single region.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] permitted_target_regions: If present then only these regions may be used to define a target.
        :param pulumi.Input[_builtins.bool] private_api_endpoint_only: If you set this true then you cannot access api through public network.
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if atracker_settings_id is not None:
            pulumi.set(__self__, "atracker_settings_id", atracker_settings_id)
        if default_targets is not None:
            pulumi.set(__self__, "default_targets", default_targets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if metadata_region_backup is not None:
            pulumi.set(__self__, "metadata_region_backup", metadata_region_backup)
        if metadata_region_primary is not None:
            pulumi.set(__self__, "metadata_region_primary", metadata_region_primary)
        if permitted_target_regions is not None:
            pulumi.set(__self__, "permitted_target_regions", permitted_target_regions)
        if private_api_endpoint_only is not None:
            pulumi.set(__self__, "private_api_endpoint_only", private_api_endpoint_only)

    @_builtins.property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        API version used for configuring IBM Cloud Activity Tracker Event Routing resources in the account.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "api_version", value)

    @_builtins.property
    @pulumi.getter(name="atrackerSettingsId")
    def atracker_settings_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "atracker_settings_id")

    @atracker_settings_id.setter
    def atracker_settings_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "atracker_settings_id", value)

    @_builtins.property
    @pulumi.getter(name="defaultTargets")
    def default_targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The target ID List. In the event that no routing rule causes the event to be sent to a target, these targets will
        receive the event.
        """
        return pulumi.get(self, "default_targets")

    @default_targets.setter
    def default_targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "default_targets", value)

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        An optional message containing information about the audit log locations.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message", value)

    @_builtins.property
    @pulumi.getter(name="metadataRegionBackup")
    def metadata_region_backup(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        To store all your meta data in a backup region.
        """
        return pulumi.get(self, "metadata_region_backup")

    @metadata_region_backup.setter
    def metadata_region_backup(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "metadata_region_backup", value)

    @_builtins.property
    @pulumi.getter(name="metadataRegionPrimary")
    def metadata_region_primary(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        To store all your meta data in a single region.
        """
        return pulumi.get(self, "metadata_region_primary")

    @metadata_region_primary.setter
    def metadata_region_primary(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "metadata_region_primary", value)

    @_builtins.property
    @pulumi.getter(name="permittedTargetRegions")
    def permitted_target_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        If present then only these regions may be used to define a target.
        """
        return pulumi.get(self, "permitted_target_regions")

    @permitted_target_regions.setter
    def permitted_target_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "permitted_target_regions", value)

    @_builtins.property
    @pulumi.getter(name="privateApiEndpointOnly")
    def private_api_endpoint_only(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If you set this true then you cannot access api through public network.
        """
        return pulumi.get(self, "private_api_endpoint_only")

    @private_api_endpoint_only.setter
    def private_api_endpoint_only(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "private_api_endpoint_only", value)


@pulumi.type_token("ibm:index/atrackerSettings:AtrackerSettings")
class AtrackerSettings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 atracker_settings_id: Optional[pulumi.Input[_builtins.str]] = None,
                 default_targets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 metadata_region_backup: Optional[pulumi.Input[_builtins.str]] = None,
                 metadata_region_primary: Optional[pulumi.Input[_builtins.str]] = None,
                 permitted_target_regions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 private_api_endpoint_only: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        """
        Create a AtrackerSettings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] default_targets: The target ID List. In the event that no routing rule causes the event to be sent to a target, these targets will
               receive the event.
        :param pulumi.Input[_builtins.str] metadata_region_backup: To store all your meta data in a backup region.
        :param pulumi.Input[_builtins.str] metadata_region_primary: To store all your meta data in a single region.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] permitted_target_regions: If present then only these regions may be used to define a target.
        :param pulumi.Input[_builtins.bool] private_api_endpoint_only: If you set this true then you cannot access api through public network.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AtrackerSettingsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AtrackerSettings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AtrackerSettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AtrackerSettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 atracker_settings_id: Optional[pulumi.Input[_builtins.str]] = None,
                 default_targets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 metadata_region_backup: Optional[pulumi.Input[_builtins.str]] = None,
                 metadata_region_primary: Optional[pulumi.Input[_builtins.str]] = None,
                 permitted_target_regions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 private_api_endpoint_only: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AtrackerSettingsArgs.__new__(AtrackerSettingsArgs)

            __props__.__dict__["atracker_settings_id"] = atracker_settings_id
            __props__.__dict__["default_targets"] = default_targets
            __props__.__dict__["metadata_region_backup"] = metadata_region_backup
            if metadata_region_primary is None and not opts.urn:
                raise TypeError("Missing required property 'metadata_region_primary'")
            __props__.__dict__["metadata_region_primary"] = metadata_region_primary
            __props__.__dict__["permitted_target_regions"] = permitted_target_regions
            if private_api_endpoint_only is None and not opts.urn:
                raise TypeError("Missing required property 'private_api_endpoint_only'")
            __props__.__dict__["private_api_endpoint_only"] = private_api_endpoint_only
            __props__.__dict__["api_version"] = None
            __props__.__dict__["message"] = None
        super(AtrackerSettings, __self__).__init__(
            'ibm:index/atrackerSettings:AtrackerSettings',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            api_version: Optional[pulumi.Input[_builtins.float]] = None,
            atracker_settings_id: Optional[pulumi.Input[_builtins.str]] = None,
            default_targets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            message: Optional[pulumi.Input[_builtins.str]] = None,
            metadata_region_backup: Optional[pulumi.Input[_builtins.str]] = None,
            metadata_region_primary: Optional[pulumi.Input[_builtins.str]] = None,
            permitted_target_regions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            private_api_endpoint_only: Optional[pulumi.Input[_builtins.bool]] = None) -> 'AtrackerSettings':
        """
        Get an existing AtrackerSettings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] api_version: API version used for configuring IBM Cloud Activity Tracker Event Routing resources in the account.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] default_targets: The target ID List. In the event that no routing rule causes the event to be sent to a target, these targets will
               receive the event.
        :param pulumi.Input[_builtins.str] message: An optional message containing information about the audit log locations.
        :param pulumi.Input[_builtins.str] metadata_region_backup: To store all your meta data in a backup region.
        :param pulumi.Input[_builtins.str] metadata_region_primary: To store all your meta data in a single region.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] permitted_target_regions: If present then only these regions may be used to define a target.
        :param pulumi.Input[_builtins.bool] private_api_endpoint_only: If you set this true then you cannot access api through public network.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AtrackerSettingsState.__new__(_AtrackerSettingsState)

        __props__.__dict__["api_version"] = api_version
        __props__.__dict__["atracker_settings_id"] = atracker_settings_id
        __props__.__dict__["default_targets"] = default_targets
        __props__.__dict__["message"] = message
        __props__.__dict__["metadata_region_backup"] = metadata_region_backup
        __props__.__dict__["metadata_region_primary"] = metadata_region_primary
        __props__.__dict__["permitted_target_regions"] = permitted_target_regions
        __props__.__dict__["private_api_endpoint_only"] = private_api_endpoint_only
        return AtrackerSettings(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> pulumi.Output[_builtins.float]:
        """
        API version used for configuring IBM Cloud Activity Tracker Event Routing resources in the account.
        """
        return pulumi.get(self, "api_version")

    @_builtins.property
    @pulumi.getter(name="atrackerSettingsId")
    def atracker_settings_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "atracker_settings_id")

    @_builtins.property
    @pulumi.getter(name="defaultTargets")
    def default_targets(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        The target ID List. In the event that no routing rule causes the event to be sent to a target, these targets will
        receive the event.
        """
        return pulumi.get(self, "default_targets")

    @_builtins.property
    @pulumi.getter
    def message(self) -> pulumi.Output[_builtins.str]:
        """
        An optional message containing information about the audit log locations.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter(name="metadataRegionBackup")
    def metadata_region_backup(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        To store all your meta data in a backup region.
        """
        return pulumi.get(self, "metadata_region_backup")

    @_builtins.property
    @pulumi.getter(name="metadataRegionPrimary")
    def metadata_region_primary(self) -> pulumi.Output[_builtins.str]:
        """
        To store all your meta data in a single region.
        """
        return pulumi.get(self, "metadata_region_primary")

    @_builtins.property
    @pulumi.getter(name="permittedTargetRegions")
    def permitted_target_regions(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        If present then only these regions may be used to define a target.
        """
        return pulumi.get(self, "permitted_target_regions")

    @_builtins.property
    @pulumi.getter(name="privateApiEndpointOnly")
    def private_api_endpoint_only(self) -> pulumi.Output[_builtins.bool]:
        """
        If you set this true then you cannot access api through public network.
        """
        return pulumi.get(self, "private_api_endpoint_only")

