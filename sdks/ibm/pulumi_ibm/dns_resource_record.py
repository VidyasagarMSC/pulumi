# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DnsResourceRecordArgs', 'DnsResourceRecord']

@pulumi.input_type
class DnsResourceRecordArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 rdata: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 zone_id: pulumi.Input[_builtins.str],
                 dns_resource_record_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 preference: Optional[pulumi.Input[_builtins.float]] = None,
                 priority: Optional[pulumi.Input[_builtins.float]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 service: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['DnsResourceRecordTimeoutsArgs']] = None,
                 ttl: Optional[pulumi.Input[_builtins.float]] = None,
                 weight: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a DnsResourceRecord resource.
        :param pulumi.Input[_builtins.str] instance_id: Instance ID
        :param pulumi.Input[_builtins.str] rdata: DNS record Data
        :param pulumi.Input[_builtins.str] type: DNS record Type
        :param pulumi.Input[_builtins.str] zone_id: Zone ID
        :param pulumi.Input[_builtins.str] name: DNS record name
        :param pulumi.Input[_builtins.float] port: DNS server Port
        :param pulumi.Input[_builtins.float] preference: DNS maximum preference
        :param pulumi.Input[_builtins.float] priority: DNS server Priority
        :param pulumi.Input[_builtins.str] protocol: Protocol
        :param pulumi.Input[_builtins.str] service: Service info
        :param pulumi.Input[_builtins.float] ttl: DNS record TTL
        :param pulumi.Input[_builtins.float] weight: DNS server weight
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "rdata", rdata)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "zone_id", zone_id)
        if dns_resource_record_id is not None:
            pulumi.set(__self__, "dns_resource_record_id", dns_resource_record_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Instance ID
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def rdata(self) -> pulumi.Input[_builtins.str]:
        """
        DNS record Data
        """
        return pulumi.get(self, "rdata")

    @rdata.setter
    def rdata(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "rdata", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        DNS record Type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Input[_builtins.str]:
        """
        Zone ID
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "zone_id", value)

    @_builtins.property
    @pulumi.getter(name="dnsResourceRecordId")
    def dns_resource_record_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dns_resource_record_id")

    @dns_resource_record_id.setter
    def dns_resource_record_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_resource_record_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        DNS record name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        DNS server Port
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        DNS maximum preference
        """
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "preference", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        DNS server Priority
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "priority", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Protocol
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service info
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['DnsResourceRecordTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['DnsResourceRecordTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        DNS record TTL
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ttl", value)

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        DNS server weight
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class _DnsResourceRecordState:
    def __init__(__self__, *,
                 created_on: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_resource_record_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 modified_on: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 preference: Optional[pulumi.Input[_builtins.float]] = None,
                 priority: Optional[pulumi.Input[_builtins.float]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 rdata: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_record_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['DnsResourceRecordTimeoutsArgs']] = None,
                 ttl: Optional[pulumi.Input[_builtins.float]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 weight: Optional[pulumi.Input[_builtins.float]] = None,
                 zone_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DnsResourceRecord resources.
        :param pulumi.Input[_builtins.str] created_on: Creation Data
        :param pulumi.Input[_builtins.str] instance_id: Instance ID
        :param pulumi.Input[_builtins.str] modified_on: Modification date
        :param pulumi.Input[_builtins.str] name: DNS record name
        :param pulumi.Input[_builtins.float] port: DNS server Port
        :param pulumi.Input[_builtins.float] preference: DNS maximum preference
        :param pulumi.Input[_builtins.float] priority: DNS server Priority
        :param pulumi.Input[_builtins.str] protocol: Protocol
        :param pulumi.Input[_builtins.str] rdata: DNS record Data
        :param pulumi.Input[_builtins.str] resource_record_id: Resource record ID
        :param pulumi.Input[_builtins.str] service: Service info
        :param pulumi.Input[_builtins.float] ttl: DNS record TTL
        :param pulumi.Input[_builtins.str] type: DNS record Type
        :param pulumi.Input[_builtins.float] weight: DNS server weight
        :param pulumi.Input[_builtins.str] zone_id: Zone ID
        """
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if dns_resource_record_id is not None:
            pulumi.set(__self__, "dns_resource_record_id", dns_resource_record_id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if modified_on is not None:
            pulumi.set(__self__, "modified_on", modified_on)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if rdata is not None:
            pulumi.set(__self__, "rdata", rdata)
        if resource_record_id is not None:
            pulumi.set(__self__, "resource_record_id", resource_record_id)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Creation Data
        """
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_on", value)

    @_builtins.property
    @pulumi.getter(name="dnsResourceRecordId")
    def dns_resource_record_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dns_resource_record_id")

    @dns_resource_record_id.setter
    def dns_resource_record_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_resource_record_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Instance ID
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Modification date
        """
        return pulumi.get(self, "modified_on")

    @modified_on.setter
    def modified_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "modified_on", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        DNS record name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        DNS server Port
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        DNS maximum preference
        """
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "preference", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        DNS server Priority
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "priority", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Protocol
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter
    def rdata(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        DNS record Data
        """
        return pulumi.get(self, "rdata")

    @rdata.setter
    def rdata(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rdata", value)

    @_builtins.property
    @pulumi.getter(name="resourceRecordId")
    def resource_record_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource record ID
        """
        return pulumi.get(self, "resource_record_id")

    @resource_record_id.setter
    def resource_record_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_record_id", value)

    @_builtins.property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service info
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['DnsResourceRecordTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['DnsResourceRecordTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        DNS record TTL
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ttl", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        DNS record Type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        DNS server weight
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "weight", value)

    @_builtins.property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Zone ID
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zone_id", value)


@pulumi.type_token("ibm:index/dnsResourceRecord:DnsResourceRecord")
class DnsResourceRecord(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dns_resource_record_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 preference: Optional[pulumi.Input[_builtins.float]] = None,
                 priority: Optional[pulumi.Input[_builtins.float]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 rdata: Optional[pulumi.Input[_builtins.str]] = None,
                 service: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['DnsResourceRecordTimeoutsArgs', 'DnsResourceRecordTimeoutsArgsDict']]] = None,
                 ttl: Optional[pulumi.Input[_builtins.float]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 weight: Optional[pulumi.Input[_builtins.float]] = None,
                 zone_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a DnsResourceRecord resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] instance_id: Instance ID
        :param pulumi.Input[_builtins.str] name: DNS record name
        :param pulumi.Input[_builtins.float] port: DNS server Port
        :param pulumi.Input[_builtins.float] preference: DNS maximum preference
        :param pulumi.Input[_builtins.float] priority: DNS server Priority
        :param pulumi.Input[_builtins.str] protocol: Protocol
        :param pulumi.Input[_builtins.str] rdata: DNS record Data
        :param pulumi.Input[_builtins.str] service: Service info
        :param pulumi.Input[_builtins.float] ttl: DNS record TTL
        :param pulumi.Input[_builtins.str] type: DNS record Type
        :param pulumi.Input[_builtins.float] weight: DNS server weight
        :param pulumi.Input[_builtins.str] zone_id: Zone ID
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DnsResourceRecordArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DnsResourceRecord resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DnsResourceRecordArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DnsResourceRecordArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dns_resource_record_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 preference: Optional[pulumi.Input[_builtins.float]] = None,
                 priority: Optional[pulumi.Input[_builtins.float]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 rdata: Optional[pulumi.Input[_builtins.str]] = None,
                 service: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['DnsResourceRecordTimeoutsArgs', 'DnsResourceRecordTimeoutsArgsDict']]] = None,
                 ttl: Optional[pulumi.Input[_builtins.float]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 weight: Optional[pulumi.Input[_builtins.float]] = None,
                 zone_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DnsResourceRecordArgs.__new__(DnsResourceRecordArgs)

            __props__.__dict__["dns_resource_record_id"] = dns_resource_record_id
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["name"] = name
            __props__.__dict__["port"] = port
            __props__.__dict__["preference"] = preference
            __props__.__dict__["priority"] = priority
            __props__.__dict__["protocol"] = protocol
            if rdata is None and not opts.urn:
                raise TypeError("Missing required property 'rdata'")
            __props__.__dict__["rdata"] = rdata
            __props__.__dict__["service"] = service
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["ttl"] = ttl
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["weight"] = weight
            if zone_id is None and not opts.urn:
                raise TypeError("Missing required property 'zone_id'")
            __props__.__dict__["zone_id"] = zone_id
            __props__.__dict__["created_on"] = None
            __props__.__dict__["modified_on"] = None
            __props__.__dict__["resource_record_id"] = None
        super(DnsResourceRecord, __self__).__init__(
            'ibm:index/dnsResourceRecord:DnsResourceRecord',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_on: Optional[pulumi.Input[_builtins.str]] = None,
            dns_resource_record_id: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            modified_on: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            port: Optional[pulumi.Input[_builtins.float]] = None,
            preference: Optional[pulumi.Input[_builtins.float]] = None,
            priority: Optional[pulumi.Input[_builtins.float]] = None,
            protocol: Optional[pulumi.Input[_builtins.str]] = None,
            rdata: Optional[pulumi.Input[_builtins.str]] = None,
            resource_record_id: Optional[pulumi.Input[_builtins.str]] = None,
            service: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['DnsResourceRecordTimeoutsArgs', 'DnsResourceRecordTimeoutsArgsDict']]] = None,
            ttl: Optional[pulumi.Input[_builtins.float]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            weight: Optional[pulumi.Input[_builtins.float]] = None,
            zone_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'DnsResourceRecord':
        """
        Get an existing DnsResourceRecord resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_on: Creation Data
        :param pulumi.Input[_builtins.str] instance_id: Instance ID
        :param pulumi.Input[_builtins.str] modified_on: Modification date
        :param pulumi.Input[_builtins.str] name: DNS record name
        :param pulumi.Input[_builtins.float] port: DNS server Port
        :param pulumi.Input[_builtins.float] preference: DNS maximum preference
        :param pulumi.Input[_builtins.float] priority: DNS server Priority
        :param pulumi.Input[_builtins.str] protocol: Protocol
        :param pulumi.Input[_builtins.str] rdata: DNS record Data
        :param pulumi.Input[_builtins.str] resource_record_id: Resource record ID
        :param pulumi.Input[_builtins.str] service: Service info
        :param pulumi.Input[_builtins.float] ttl: DNS record TTL
        :param pulumi.Input[_builtins.str] type: DNS record Type
        :param pulumi.Input[_builtins.float] weight: DNS server weight
        :param pulumi.Input[_builtins.str] zone_id: Zone ID
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DnsResourceRecordState.__new__(_DnsResourceRecordState)

        __props__.__dict__["created_on"] = created_on
        __props__.__dict__["dns_resource_record_id"] = dns_resource_record_id
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["modified_on"] = modified_on
        __props__.__dict__["name"] = name
        __props__.__dict__["port"] = port
        __props__.__dict__["preference"] = preference
        __props__.__dict__["priority"] = priority
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["rdata"] = rdata
        __props__.__dict__["resource_record_id"] = resource_record_id
        __props__.__dict__["service"] = service
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["ttl"] = ttl
        __props__.__dict__["type"] = type
        __props__.__dict__["weight"] = weight
        __props__.__dict__["zone_id"] = zone_id
        return DnsResourceRecord(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> pulumi.Output[_builtins.str]:
        """
        Creation Data
        """
        return pulumi.get(self, "created_on")

    @_builtins.property
    @pulumi.getter(name="dnsResourceRecordId")
    def dns_resource_record_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "dns_resource_record_id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Instance ID
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> pulumi.Output[_builtins.str]:
        """
        Modification date
        """
        return pulumi.get(self, "modified_on")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        DNS record name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        DNS server Port
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def preference(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        DNS maximum preference
        """
        return pulumi.get(self, "preference")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        DNS server Priority
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Protocol
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def rdata(self) -> pulumi.Output[_builtins.str]:
        """
        DNS record Data
        """
        return pulumi.get(self, "rdata")

    @_builtins.property
    @pulumi.getter(name="resourceRecordId")
    def resource_record_id(self) -> pulumi.Output[_builtins.str]:
        """
        Resource record ID
        """
        return pulumi.get(self, "resource_record_id")

    @_builtins.property
    @pulumi.getter
    def service(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Service info
        """
        return pulumi.get(self, "service")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.DnsResourceRecordTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        DNS record TTL
        """
        return pulumi.get(self, "ttl")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        DNS record Type
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        DNS server weight
        """
        return pulumi.get(self, "weight")

    @_builtins.property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Output[_builtins.str]:
        """
        Zone ID
        """
        return pulumi.get(self, "zone_id")

