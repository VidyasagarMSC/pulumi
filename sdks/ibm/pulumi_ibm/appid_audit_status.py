# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['AppidAuditStatusArgs', 'AppidAuditStatus']

@pulumi.input_type
class AppidAuditStatusArgs:
    def __init__(__self__, *,
                 is_active: pulumi.Input[_builtins.bool],
                 tenant_id: pulumi.Input[_builtins.str],
                 appid_audit_status_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AppidAuditStatus resource.
        :param pulumi.Input[_builtins.bool] is_active: The auditing status of the tenant.
        :param pulumi.Input[_builtins.str] tenant_id: The AppID instance GUID
        """
        pulumi.set(__self__, "is_active", is_active)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if appid_audit_status_id is not None:
            pulumi.set(__self__, "appid_audit_status_id", appid_audit_status_id)

    @_builtins.property
    @pulumi.getter(name="isActive")
    def is_active(self) -> pulumi.Input[_builtins.bool]:
        """
        The auditing status of the tenant.
        """
        return pulumi.get(self, "is_active")

    @is_active.setter
    def is_active(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "is_active", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[_builtins.str]:
        """
        The AppID instance GUID
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "tenant_id", value)

    @_builtins.property
    @pulumi.getter(name="appidAuditStatusId")
    def appid_audit_status_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "appid_audit_status_id")

    @appid_audit_status_id.setter
    def appid_audit_status_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "appid_audit_status_id", value)


@pulumi.input_type
class _AppidAuditStatusState:
    def __init__(__self__, *,
                 appid_audit_status_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_active: Optional[pulumi.Input[_builtins.bool]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AppidAuditStatus resources.
        :param pulumi.Input[_builtins.bool] is_active: The auditing status of the tenant.
        :param pulumi.Input[_builtins.str] tenant_id: The AppID instance GUID
        """
        if appid_audit_status_id is not None:
            pulumi.set(__self__, "appid_audit_status_id", appid_audit_status_id)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @_builtins.property
    @pulumi.getter(name="appidAuditStatusId")
    def appid_audit_status_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "appid_audit_status_id")

    @appid_audit_status_id.setter
    def appid_audit_status_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "appid_audit_status_id", value)

    @_builtins.property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The auditing status of the tenant.
        """
        return pulumi.get(self, "is_active")

    @is_active.setter
    def is_active(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_active", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The AppID instance GUID
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tenant_id", value)


@pulumi.type_token("ibm:index/appidAuditStatus:AppidAuditStatus")
class AppidAuditStatus(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 appid_audit_status_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_active: Optional[pulumi.Input[_builtins.bool]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a AppidAuditStatus resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] is_active: The auditing status of the tenant.
        :param pulumi.Input[_builtins.str] tenant_id: The AppID instance GUID
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppidAuditStatusArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AppidAuditStatus resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AppidAuditStatusArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppidAuditStatusArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 appid_audit_status_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_active: Optional[pulumi.Input[_builtins.bool]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppidAuditStatusArgs.__new__(AppidAuditStatusArgs)

            __props__.__dict__["appid_audit_status_id"] = appid_audit_status_id
            if is_active is None and not opts.urn:
                raise TypeError("Missing required property 'is_active'")
            __props__.__dict__["is_active"] = is_active
            if tenant_id is None and not opts.urn:
                raise TypeError("Missing required property 'tenant_id'")
            __props__.__dict__["tenant_id"] = tenant_id
        super(AppidAuditStatus, __self__).__init__(
            'ibm:index/appidAuditStatus:AppidAuditStatus',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            appid_audit_status_id: Optional[pulumi.Input[_builtins.str]] = None,
            is_active: Optional[pulumi.Input[_builtins.bool]] = None,
            tenant_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'AppidAuditStatus':
        """
        Get an existing AppidAuditStatus resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] is_active: The auditing status of the tenant.
        :param pulumi.Input[_builtins.str] tenant_id: The AppID instance GUID
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppidAuditStatusState.__new__(_AppidAuditStatusState)

        __props__.__dict__["appid_audit_status_id"] = appid_audit_status_id
        __props__.__dict__["is_active"] = is_active
        __props__.__dict__["tenant_id"] = tenant_id
        return AppidAuditStatus(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="appidAuditStatusId")
    def appid_audit_status_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "appid_audit_status_id")

    @_builtins.property
    @pulumi.getter(name="isActive")
    def is_active(self) -> pulumi.Output[_builtins.bool]:
        """
        The auditing status of the tenant.
        """
        return pulumi.get(self, "is_active")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Output[_builtins.str]:
        """
        The AppID instance GUID
        """
        return pulumi.get(self, "tenant_id")

