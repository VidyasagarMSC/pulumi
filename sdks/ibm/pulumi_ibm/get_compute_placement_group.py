# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetComputePlacementGroupResult',
    'AwaitableGetComputePlacementGroupResult',
    'get_compute_placement_group',
    'get_compute_placement_group_output',
]

@pulumi.output_type
class GetComputePlacementGroupResult:
    """
    A collection of values returned by getComputePlacementGroup.
    """
    def __init__(__self__, datacenter=None, id=None, name=None, pod=None, rule=None, virtual_guests=None):
        if datacenter and not isinstance(datacenter, str):
            raise TypeError("Expected argument 'datacenter' to be a str")
        pulumi.set(__self__, "datacenter", datacenter)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if pod and not isinstance(pod, str):
            raise TypeError("Expected argument 'pod' to be a str")
        pulumi.set(__self__, "pod", pod)
        if rule and not isinstance(rule, str):
            raise TypeError("Expected argument 'rule' to be a str")
        pulumi.set(__self__, "rule", rule)
        if virtual_guests and not isinstance(virtual_guests, list):
            raise TypeError("Expected argument 'virtual_guests' to be a list")
        pulumi.set(__self__, "virtual_guests", virtual_guests)

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> _builtins.str:
        return pulumi.get(self, "datacenter")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def pod(self) -> _builtins.str:
        return pulumi.get(self, "pod")

    @_builtins.property
    @pulumi.getter
    def rule(self) -> _builtins.str:
        return pulumi.get(self, "rule")

    @_builtins.property
    @pulumi.getter(name="virtualGuests")
    def virtual_guests(self) -> Sequence['outputs.GetComputePlacementGroupVirtualGuestResult']:
        return pulumi.get(self, "virtual_guests")


class AwaitableGetComputePlacementGroupResult(GetComputePlacementGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetComputePlacementGroupResult(
            datacenter=self.datacenter,
            id=self.id,
            name=self.name,
            pod=self.pod,
            rule=self.rule,
            virtual_guests=self.virtual_guests)


def get_compute_placement_group(id: Optional[_builtins.str] = None,
                                name: Optional[_builtins.str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetComputePlacementGroupResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getComputePlacementGroup:getComputePlacementGroup', __args__, opts=opts, typ=GetComputePlacementGroupResult, package_ref=_utilities.get_package()).value

    return AwaitableGetComputePlacementGroupResult(
        datacenter=pulumi.get(__ret__, 'datacenter'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        pod=pulumi.get(__ret__, 'pod'),
        rule=pulumi.get(__ret__, 'rule'),
        virtual_guests=pulumi.get(__ret__, 'virtual_guests'))
def get_compute_placement_group_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       name: Optional[pulumi.Input[_builtins.str]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetComputePlacementGroupResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getComputePlacementGroup:getComputePlacementGroup', __args__, opts=opts, typ=GetComputePlacementGroupResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetComputePlacementGroupResult(
        datacenter=pulumi.get(__response__, 'datacenter'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        pod=pulumi.get(__response__, 'pod'),
        rule=pulumi.get(__response__, 'rule'),
        virtual_guests=pulumi.get(__response__, 'virtual_guests')))
