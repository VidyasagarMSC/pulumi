# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetResourceTagResult',
    'AwaitableGetResourceTagResult',
    'get_resource_tag',
    'get_resource_tag_output',
]

@pulumi.output_type
class GetResourceTagResult:
    """
    A collection of values returned by getResourceTag.
    """
    def __init__(__self__, id=None, resource_id=None, resource_type=None, tag_type=None, tags=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if resource_id and not isinstance(resource_id, str):
            raise TypeError("Expected argument 'resource_id' to be a str")
        pulumi.set(__self__, "resource_id", resource_id)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if tag_type and not isinstance(tag_type, str):
            raise TypeError("Expected argument 'tag_type' to be a str")
        pulumi.set(__self__, "tag_type", tag_type)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "tag_type")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "tags")


class AwaitableGetResourceTagResult(GetResourceTagResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResourceTagResult(
            id=self.id,
            resource_id=self.resource_id,
            resource_type=self.resource_type,
            tag_type=self.tag_type,
            tags=self.tags)


def get_resource_tag(id: Optional[_builtins.str] = None,
                     resource_id: Optional[_builtins.str] = None,
                     resource_type: Optional[_builtins.str] = None,
                     tag_type: Optional[_builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResourceTagResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['resourceId'] = resource_id
    __args__['resourceType'] = resource_type
    __args__['tagType'] = tag_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getResourceTag:getResourceTag', __args__, opts=opts, typ=GetResourceTagResult, package_ref=_utilities.get_package()).value

    return AwaitableGetResourceTagResult(
        id=pulumi.get(__ret__, 'id'),
        resource_id=pulumi.get(__ret__, 'resource_id'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        tag_type=pulumi.get(__ret__, 'tag_type'),
        tags=pulumi.get(__ret__, 'tags'))
def get_resource_tag_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            resource_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            resource_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            tag_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetResourceTagResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['resourceId'] = resource_id
    __args__['resourceType'] = resource_type
    __args__['tagType'] = tag_type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getResourceTag:getResourceTag', __args__, opts=opts, typ=GetResourceTagResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetResourceTagResult(
        id=pulumi.get(__response__, 'id'),
        resource_id=pulumi.get(__response__, 'resource_id'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        tag_type=pulumi.get(__response__, 'tag_type'),
        tags=pulumi.get(__response__, 'tags')))
