# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CisGlobalLoadBalancerArgs', 'CisGlobalLoadBalancer']

@pulumi.input_type
class CisGlobalLoadBalancerArgs:
    def __init__(__self__, *,
                 cis_id: pulumi.Input[_builtins.str],
                 default_pool_ids: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 domain_id: pulumi.Input[_builtins.str],
                 fallback_pool_id: pulumi.Input[_builtins.str],
                 cis_global_load_balancer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 pop_pools: Optional[pulumi.Input[Sequence[pulumi.Input['CisGlobalLoadBalancerPopPoolArgs']]]] = None,
                 proxied: Optional[pulumi.Input[_builtins.bool]] = None,
                 region_pools: Optional[pulumi.Input[Sequence[pulumi.Input['CisGlobalLoadBalancerRegionPoolArgs']]]] = None,
                 session_affinity: Optional[pulumi.Input[_builtins.str]] = None,
                 steering_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 ttl: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a CisGlobalLoadBalancer resource.
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] default_pool_ids: List of default Pool IDs
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.str] fallback_pool_id: fallback pool ID
        :param pulumi.Input[_builtins.str] description: Description for the load balancer instance
        :param pulumi.Input[_builtins.bool] enabled: set to true of LB needs to enabled
        :param pulumi.Input[_builtins.str] name: name
        :param pulumi.Input[_builtins.bool] proxied: set to true if proxy needs to be enabled
        :param pulumi.Input[_builtins.str] session_affinity: Session affinity info
        :param pulumi.Input[_builtins.str] steering_policy: Steering policy info
        :param pulumi.Input[_builtins.float] ttl: TTL value
        """
        pulumi.set(__self__, "cis_id", cis_id)
        pulumi.set(__self__, "default_pool_ids", default_pool_ids)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "fallback_pool_id", fallback_pool_id)
        if cis_global_load_balancer_id is not None:
            pulumi.set(__self__, "cis_global_load_balancer_id", cis_global_load_balancer_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pop_pools is not None:
            pulumi.set(__self__, "pop_pools", pop_pools)
        if proxied is not None:
            pulumi.set(__self__, "proxied", proxied)
        if region_pools is not None:
            pulumi.set(__self__, "region_pools", region_pools)
        if session_affinity is not None:
            pulumi.set(__self__, "session_affinity", session_affinity)
        if steering_policy is not None:
            pulumi.set(__self__, "steering_policy", steering_policy)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Input[_builtins.str]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter(name="defaultPoolIds")
    def default_pool_ids(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        List of default Pool IDs
        """
        return pulumi.get(self, "default_pool_ids")

    @default_pool_ids.setter
    def default_pool_ids(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "default_pool_ids", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Input[_builtins.str]:
        """
        Associated CIS domain
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter(name="fallbackPoolId")
    def fallback_pool_id(self) -> pulumi.Input[_builtins.str]:
        """
        fallback pool ID
        """
        return pulumi.get(self, "fallback_pool_id")

    @fallback_pool_id.setter
    def fallback_pool_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "fallback_pool_id", value)

    @_builtins.property
    @pulumi.getter(name="cisGlobalLoadBalancerId")
    def cis_global_load_balancer_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_global_load_balancer_id")

    @cis_global_load_balancer_id.setter
    def cis_global_load_balancer_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_global_load_balancer_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description for the load balancer instance
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        set to true of LB needs to enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="popPools")
    def pop_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CisGlobalLoadBalancerPopPoolArgs']]]]:
        return pulumi.get(self, "pop_pools")

    @pop_pools.setter
    def pop_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CisGlobalLoadBalancerPopPoolArgs']]]]):
        pulumi.set(self, "pop_pools", value)

    @_builtins.property
    @pulumi.getter
    def proxied(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        set to true if proxy needs to be enabled
        """
        return pulumi.get(self, "proxied")

    @proxied.setter
    def proxied(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "proxied", value)

    @_builtins.property
    @pulumi.getter(name="regionPools")
    def region_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CisGlobalLoadBalancerRegionPoolArgs']]]]:
        return pulumi.get(self, "region_pools")

    @region_pools.setter
    def region_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CisGlobalLoadBalancerRegionPoolArgs']]]]):
        pulumi.set(self, "region_pools", value)

    @_builtins.property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Session affinity info
        """
        return pulumi.get(self, "session_affinity")

    @session_affinity.setter
    def session_affinity(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "session_affinity", value)

    @_builtins.property
    @pulumi.getter(name="steeringPolicy")
    def steering_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Steering policy info
        """
        return pulumi.get(self, "steering_policy")

    @steering_policy.setter
    def steering_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "steering_policy", value)

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        TTL value
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ttl", value)


@pulumi.input_type
class _CisGlobalLoadBalancerState:
    def __init__(__self__, *,
                 cis_global_load_balancer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 created_on: Optional[pulumi.Input[_builtins.str]] = None,
                 default_pool_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 fallback_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 glb_id: Optional[pulumi.Input[_builtins.str]] = None,
                 modified_on: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 pop_pools: Optional[pulumi.Input[Sequence[pulumi.Input['CisGlobalLoadBalancerPopPoolArgs']]]] = None,
                 proxied: Optional[pulumi.Input[_builtins.bool]] = None,
                 region_pools: Optional[pulumi.Input[Sequence[pulumi.Input['CisGlobalLoadBalancerRegionPoolArgs']]]] = None,
                 session_affinity: Optional[pulumi.Input[_builtins.str]] = None,
                 steering_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 ttl: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering CisGlobalLoadBalancer resources.
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] created_on: Load balancer creation date
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] default_pool_ids: List of default Pool IDs
        :param pulumi.Input[_builtins.str] description: Description for the load balancer instance
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.bool] enabled: set to true of LB needs to enabled
        :param pulumi.Input[_builtins.str] fallback_pool_id: fallback pool ID
        :param pulumi.Input[_builtins.str] glb_id: global load balancer id
        :param pulumi.Input[_builtins.str] modified_on: Load balancer modified date
        :param pulumi.Input[_builtins.str] name: name
        :param pulumi.Input[_builtins.bool] proxied: set to true if proxy needs to be enabled
        :param pulumi.Input[_builtins.str] session_affinity: Session affinity info
        :param pulumi.Input[_builtins.str] steering_policy: Steering policy info
        :param pulumi.Input[_builtins.float] ttl: TTL value
        """
        if cis_global_load_balancer_id is not None:
            pulumi.set(__self__, "cis_global_load_balancer_id", cis_global_load_balancer_id)
        if cis_id is not None:
            pulumi.set(__self__, "cis_id", cis_id)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if default_pool_ids is not None:
            pulumi.set(__self__, "default_pool_ids", default_pool_ids)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if fallback_pool_id is not None:
            pulumi.set(__self__, "fallback_pool_id", fallback_pool_id)
        if glb_id is not None:
            pulumi.set(__self__, "glb_id", glb_id)
        if modified_on is not None:
            pulumi.set(__self__, "modified_on", modified_on)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pop_pools is not None:
            pulumi.set(__self__, "pop_pools", pop_pools)
        if proxied is not None:
            pulumi.set(__self__, "proxied", proxied)
        if region_pools is not None:
            pulumi.set(__self__, "region_pools", region_pools)
        if session_affinity is not None:
            pulumi.set(__self__, "session_affinity", session_affinity)
        if steering_policy is not None:
            pulumi.set(__self__, "steering_policy", steering_policy)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @_builtins.property
    @pulumi.getter(name="cisGlobalLoadBalancerId")
    def cis_global_load_balancer_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_global_load_balancer_id")

    @cis_global_load_balancer_id.setter
    def cis_global_load_balancer_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_global_load_balancer_id", value)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Load balancer creation date
        """
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_on", value)

    @_builtins.property
    @pulumi.getter(name="defaultPoolIds")
    def default_pool_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of default Pool IDs
        """
        return pulumi.get(self, "default_pool_ids")

    @default_pool_ids.setter
    def default_pool_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "default_pool_ids", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description for the load balancer instance
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Associated CIS domain
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        set to true of LB needs to enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="fallbackPoolId")
    def fallback_pool_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        fallback pool ID
        """
        return pulumi.get(self, "fallback_pool_id")

    @fallback_pool_id.setter
    def fallback_pool_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fallback_pool_id", value)

    @_builtins.property
    @pulumi.getter(name="glbId")
    def glb_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        global load balancer id
        """
        return pulumi.get(self, "glb_id")

    @glb_id.setter
    def glb_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "glb_id", value)

    @_builtins.property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Load balancer modified date
        """
        return pulumi.get(self, "modified_on")

    @modified_on.setter
    def modified_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "modified_on", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="popPools")
    def pop_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CisGlobalLoadBalancerPopPoolArgs']]]]:
        return pulumi.get(self, "pop_pools")

    @pop_pools.setter
    def pop_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CisGlobalLoadBalancerPopPoolArgs']]]]):
        pulumi.set(self, "pop_pools", value)

    @_builtins.property
    @pulumi.getter
    def proxied(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        set to true if proxy needs to be enabled
        """
        return pulumi.get(self, "proxied")

    @proxied.setter
    def proxied(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "proxied", value)

    @_builtins.property
    @pulumi.getter(name="regionPools")
    def region_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CisGlobalLoadBalancerRegionPoolArgs']]]]:
        return pulumi.get(self, "region_pools")

    @region_pools.setter
    def region_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CisGlobalLoadBalancerRegionPoolArgs']]]]):
        pulumi.set(self, "region_pools", value)

    @_builtins.property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Session affinity info
        """
        return pulumi.get(self, "session_affinity")

    @session_affinity.setter
    def session_affinity(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "session_affinity", value)

    @_builtins.property
    @pulumi.getter(name="steeringPolicy")
    def steering_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Steering policy info
        """
        return pulumi.get(self, "steering_policy")

    @steering_policy.setter
    def steering_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "steering_policy", value)

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        TTL value
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "ttl", value)


@pulumi.type_token("ibm:index/cisGlobalLoadBalancer:CisGlobalLoadBalancer")
class CisGlobalLoadBalancer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cis_global_load_balancer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 default_pool_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 fallback_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 pop_pools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CisGlobalLoadBalancerPopPoolArgs', 'CisGlobalLoadBalancerPopPoolArgsDict']]]]] = None,
                 proxied: Optional[pulumi.Input[_builtins.bool]] = None,
                 region_pools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CisGlobalLoadBalancerRegionPoolArgs', 'CisGlobalLoadBalancerRegionPoolArgsDict']]]]] = None,
                 session_affinity: Optional[pulumi.Input[_builtins.str]] = None,
                 steering_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 ttl: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a CisGlobalLoadBalancer resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] default_pool_ids: List of default Pool IDs
        :param pulumi.Input[_builtins.str] description: Description for the load balancer instance
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.bool] enabled: set to true of LB needs to enabled
        :param pulumi.Input[_builtins.str] fallback_pool_id: fallback pool ID
        :param pulumi.Input[_builtins.str] name: name
        :param pulumi.Input[_builtins.bool] proxied: set to true if proxy needs to be enabled
        :param pulumi.Input[_builtins.str] session_affinity: Session affinity info
        :param pulumi.Input[_builtins.str] steering_policy: Steering policy info
        :param pulumi.Input[_builtins.float] ttl: TTL value
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CisGlobalLoadBalancerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CisGlobalLoadBalancer resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CisGlobalLoadBalancerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CisGlobalLoadBalancerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cis_global_load_balancer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 default_pool_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 fallback_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 pop_pools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CisGlobalLoadBalancerPopPoolArgs', 'CisGlobalLoadBalancerPopPoolArgsDict']]]]] = None,
                 proxied: Optional[pulumi.Input[_builtins.bool]] = None,
                 region_pools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CisGlobalLoadBalancerRegionPoolArgs', 'CisGlobalLoadBalancerRegionPoolArgsDict']]]]] = None,
                 session_affinity: Optional[pulumi.Input[_builtins.str]] = None,
                 steering_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 ttl: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CisGlobalLoadBalancerArgs.__new__(CisGlobalLoadBalancerArgs)

            __props__.__dict__["cis_global_load_balancer_id"] = cis_global_load_balancer_id
            if cis_id is None and not opts.urn:
                raise TypeError("Missing required property 'cis_id'")
            __props__.__dict__["cis_id"] = cis_id
            if default_pool_ids is None and not opts.urn:
                raise TypeError("Missing required property 'default_pool_ids'")
            __props__.__dict__["default_pool_ids"] = default_pool_ids
            __props__.__dict__["description"] = description
            if domain_id is None and not opts.urn:
                raise TypeError("Missing required property 'domain_id'")
            __props__.__dict__["domain_id"] = domain_id
            __props__.__dict__["enabled"] = enabled
            if fallback_pool_id is None and not opts.urn:
                raise TypeError("Missing required property 'fallback_pool_id'")
            __props__.__dict__["fallback_pool_id"] = fallback_pool_id
            __props__.__dict__["name"] = name
            __props__.__dict__["pop_pools"] = pop_pools
            __props__.__dict__["proxied"] = proxied
            __props__.__dict__["region_pools"] = region_pools
            __props__.__dict__["session_affinity"] = session_affinity
            __props__.__dict__["steering_policy"] = steering_policy
            __props__.__dict__["ttl"] = ttl
            __props__.__dict__["created_on"] = None
            __props__.__dict__["glb_id"] = None
            __props__.__dict__["modified_on"] = None
        super(CisGlobalLoadBalancer, __self__).__init__(
            'ibm:index/cisGlobalLoadBalancer:CisGlobalLoadBalancer',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cis_global_load_balancer_id: Optional[pulumi.Input[_builtins.str]] = None,
            cis_id: Optional[pulumi.Input[_builtins.str]] = None,
            created_on: Optional[pulumi.Input[_builtins.str]] = None,
            default_pool_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            domain_id: Optional[pulumi.Input[_builtins.str]] = None,
            enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            fallback_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
            glb_id: Optional[pulumi.Input[_builtins.str]] = None,
            modified_on: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            pop_pools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CisGlobalLoadBalancerPopPoolArgs', 'CisGlobalLoadBalancerPopPoolArgsDict']]]]] = None,
            proxied: Optional[pulumi.Input[_builtins.bool]] = None,
            region_pools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CisGlobalLoadBalancerRegionPoolArgs', 'CisGlobalLoadBalancerRegionPoolArgsDict']]]]] = None,
            session_affinity: Optional[pulumi.Input[_builtins.str]] = None,
            steering_policy: Optional[pulumi.Input[_builtins.str]] = None,
            ttl: Optional[pulumi.Input[_builtins.float]] = None) -> 'CisGlobalLoadBalancer':
        """
        Get an existing CisGlobalLoadBalancer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] created_on: Load balancer creation date
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] default_pool_ids: List of default Pool IDs
        :param pulumi.Input[_builtins.str] description: Description for the load balancer instance
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.bool] enabled: set to true of LB needs to enabled
        :param pulumi.Input[_builtins.str] fallback_pool_id: fallback pool ID
        :param pulumi.Input[_builtins.str] glb_id: global load balancer id
        :param pulumi.Input[_builtins.str] modified_on: Load balancer modified date
        :param pulumi.Input[_builtins.str] name: name
        :param pulumi.Input[_builtins.bool] proxied: set to true if proxy needs to be enabled
        :param pulumi.Input[_builtins.str] session_affinity: Session affinity info
        :param pulumi.Input[_builtins.str] steering_policy: Steering policy info
        :param pulumi.Input[_builtins.float] ttl: TTL value
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CisGlobalLoadBalancerState.__new__(_CisGlobalLoadBalancerState)

        __props__.__dict__["cis_global_load_balancer_id"] = cis_global_load_balancer_id
        __props__.__dict__["cis_id"] = cis_id
        __props__.__dict__["created_on"] = created_on
        __props__.__dict__["default_pool_ids"] = default_pool_ids
        __props__.__dict__["description"] = description
        __props__.__dict__["domain_id"] = domain_id
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["fallback_pool_id"] = fallback_pool_id
        __props__.__dict__["glb_id"] = glb_id
        __props__.__dict__["modified_on"] = modified_on
        __props__.__dict__["name"] = name
        __props__.__dict__["pop_pools"] = pop_pools
        __props__.__dict__["proxied"] = proxied
        __props__.__dict__["region_pools"] = region_pools
        __props__.__dict__["session_affinity"] = session_affinity
        __props__.__dict__["steering_policy"] = steering_policy
        __props__.__dict__["ttl"] = ttl
        return CisGlobalLoadBalancer(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="cisGlobalLoadBalancerId")
    def cis_global_load_balancer_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cis_global_load_balancer_id")

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Output[_builtins.str]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> pulumi.Output[_builtins.str]:
        """
        Load balancer creation date
        """
        return pulumi.get(self, "created_on")

    @_builtins.property
    @pulumi.getter(name="defaultPoolIds")
    def default_pool_ids(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of default Pool IDs
        """
        return pulumi.get(self, "default_pool_ids")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Description for the load balancer instance
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Output[_builtins.str]:
        """
        Associated CIS domain
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        set to true of LB needs to enabled
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="fallbackPoolId")
    def fallback_pool_id(self) -> pulumi.Output[_builtins.str]:
        """
        fallback pool ID
        """
        return pulumi.get(self, "fallback_pool_id")

    @_builtins.property
    @pulumi.getter(name="glbId")
    def glb_id(self) -> pulumi.Output[_builtins.str]:
        """
        global load balancer id
        """
        return pulumi.get(self, "glb_id")

    @_builtins.property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> pulumi.Output[_builtins.str]:
        """
        Load balancer modified date
        """
        return pulumi.get(self, "modified_on")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="popPools")
    def pop_pools(self) -> pulumi.Output[Optional[Sequence['outputs.CisGlobalLoadBalancerPopPool']]]:
        return pulumi.get(self, "pop_pools")

    @_builtins.property
    @pulumi.getter
    def proxied(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        set to true if proxy needs to be enabled
        """
        return pulumi.get(self, "proxied")

    @_builtins.property
    @pulumi.getter(name="regionPools")
    def region_pools(self) -> pulumi.Output[Optional[Sequence['outputs.CisGlobalLoadBalancerRegionPool']]]:
        return pulumi.get(self, "region_pools")

    @_builtins.property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Session affinity info
        """
        return pulumi.get(self, "session_affinity")

    @_builtins.property
    @pulumi.getter(name="steeringPolicy")
    def steering_policy(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Steering policy info
        """
        return pulumi.get(self, "steering_policy")

    @_builtins.property
    @pulumi.getter
    def ttl(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        TTL value
        """
        return pulumi.get(self, "ttl")

