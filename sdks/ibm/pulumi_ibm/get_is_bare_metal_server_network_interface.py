# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsBareMetalServerNetworkInterfaceResult',
    'AwaitableGetIsBareMetalServerNetworkInterfaceResult',
    'get_is_bare_metal_server_network_interface',
    'get_is_bare_metal_server_network_interface_output',
]

@pulumi.output_type
class GetIsBareMetalServerNetworkInterfaceResult:
    """
    A collection of values returned by getIsBareMetalServerNetworkInterface.
    """
    def __init__(__self__, allow_interface_to_float=None, allow_ip_spoofing=None, allowed_vlans=None, bare_metal_server=None, enable_infrastructure_nat=None, floating_ips=None, href=None, id=None, interface_type=None, mac_address=None, name=None, network_interface=None, port_speed=None, primary_ips=None, resource_type=None, security_groups=None, status=None, subnet=None, type=None, vlan=None):
        if allow_interface_to_float and not isinstance(allow_interface_to_float, bool):
            raise TypeError("Expected argument 'allow_interface_to_float' to be a bool")
        pulumi.set(__self__, "allow_interface_to_float", allow_interface_to_float)
        if allow_ip_spoofing and not isinstance(allow_ip_spoofing, bool):
            raise TypeError("Expected argument 'allow_ip_spoofing' to be a bool")
        pulumi.set(__self__, "allow_ip_spoofing", allow_ip_spoofing)
        if allowed_vlans and not isinstance(allowed_vlans, list):
            raise TypeError("Expected argument 'allowed_vlans' to be a list")
        pulumi.set(__self__, "allowed_vlans", allowed_vlans)
        if bare_metal_server and not isinstance(bare_metal_server, str):
            raise TypeError("Expected argument 'bare_metal_server' to be a str")
        pulumi.set(__self__, "bare_metal_server", bare_metal_server)
        if enable_infrastructure_nat and not isinstance(enable_infrastructure_nat, bool):
            raise TypeError("Expected argument 'enable_infrastructure_nat' to be a bool")
        pulumi.set(__self__, "enable_infrastructure_nat", enable_infrastructure_nat)
        if floating_ips and not isinstance(floating_ips, list):
            raise TypeError("Expected argument 'floating_ips' to be a list")
        pulumi.set(__self__, "floating_ips", floating_ips)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interface_type and not isinstance(interface_type, str):
            raise TypeError("Expected argument 'interface_type' to be a str")
        pulumi.set(__self__, "interface_type", interface_type)
        if mac_address and not isinstance(mac_address, str):
            raise TypeError("Expected argument 'mac_address' to be a str")
        pulumi.set(__self__, "mac_address", mac_address)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_interface and not isinstance(network_interface, str):
            raise TypeError("Expected argument 'network_interface' to be a str")
        pulumi.set(__self__, "network_interface", network_interface)
        if port_speed and not isinstance(port_speed, float):
            raise TypeError("Expected argument 'port_speed' to be a float")
        pulumi.set(__self__, "port_speed", port_speed)
        if primary_ips and not isinstance(primary_ips, list):
            raise TypeError("Expected argument 'primary_ips' to be a list")
        pulumi.set(__self__, "primary_ips", primary_ips)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if security_groups and not isinstance(security_groups, list):
            raise TypeError("Expected argument 'security_groups' to be a list")
        pulumi.set(__self__, "security_groups", security_groups)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if subnet and not isinstance(subnet, str):
            raise TypeError("Expected argument 'subnet' to be a str")
        pulumi.set(__self__, "subnet", subnet)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if vlan and not isinstance(vlan, float):
            raise TypeError("Expected argument 'vlan' to be a float")
        pulumi.set(__self__, "vlan", vlan)

    @_builtins.property
    @pulumi.getter(name="allowInterfaceToFloat")
    def allow_interface_to_float(self) -> _builtins.bool:
        return pulumi.get(self, "allow_interface_to_float")

    @_builtins.property
    @pulumi.getter(name="allowIpSpoofing")
    def allow_ip_spoofing(self) -> _builtins.bool:
        return pulumi.get(self, "allow_ip_spoofing")

    @_builtins.property
    @pulumi.getter(name="allowedVlans")
    def allowed_vlans(self) -> Sequence[_builtins.float]:
        return pulumi.get(self, "allowed_vlans")

    @_builtins.property
    @pulumi.getter(name="bareMetalServer")
    def bare_metal_server(self) -> _builtins.str:
        return pulumi.get(self, "bare_metal_server")

    @_builtins.property
    @pulumi.getter(name="enableInfrastructureNat")
    def enable_infrastructure_nat(self) -> _builtins.bool:
        return pulumi.get(self, "enable_infrastructure_nat")

    @_builtins.property
    @pulumi.getter(name="floatingIps")
    def floating_ips(self) -> Sequence['outputs.GetIsBareMetalServerNetworkInterfaceFloatingIpResult']:
        return pulumi.get(self, "floating_ips")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="interfaceType")
    def interface_type(self) -> _builtins.str:
        return pulumi.get(self, "interface_type")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> _builtins.str:
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkInterface")
    def network_interface(self) -> _builtins.str:
        return pulumi.get(self, "network_interface")

    @_builtins.property
    @pulumi.getter(name="portSpeed")
    def port_speed(self) -> _builtins.float:
        return pulumi.get(self, "port_speed")

    @_builtins.property
    @pulumi.getter(name="primaryIps")
    def primary_ips(self) -> Sequence['outputs.GetIsBareMetalServerNetworkInterfacePrimaryIpResult']:
        return pulumi.get(self, "primary_ips")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def subnet(self) -> _builtins.str:
        return pulumi.get(self, "subnet")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def vlan(self) -> _builtins.float:
        return pulumi.get(self, "vlan")


class AwaitableGetIsBareMetalServerNetworkInterfaceResult(GetIsBareMetalServerNetworkInterfaceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsBareMetalServerNetworkInterfaceResult(
            allow_interface_to_float=self.allow_interface_to_float,
            allow_ip_spoofing=self.allow_ip_spoofing,
            allowed_vlans=self.allowed_vlans,
            bare_metal_server=self.bare_metal_server,
            enable_infrastructure_nat=self.enable_infrastructure_nat,
            floating_ips=self.floating_ips,
            href=self.href,
            id=self.id,
            interface_type=self.interface_type,
            mac_address=self.mac_address,
            name=self.name,
            network_interface=self.network_interface,
            port_speed=self.port_speed,
            primary_ips=self.primary_ips,
            resource_type=self.resource_type,
            security_groups=self.security_groups,
            status=self.status,
            subnet=self.subnet,
            type=self.type,
            vlan=self.vlan)


def get_is_bare_metal_server_network_interface(bare_metal_server: Optional[_builtins.str] = None,
                                               id: Optional[_builtins.str] = None,
                                               network_interface: Optional[_builtins.str] = None,
                                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsBareMetalServerNetworkInterfaceResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['bareMetalServer'] = bare_metal_server
    __args__['id'] = id
    __args__['networkInterface'] = network_interface
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsBareMetalServerNetworkInterface:getIsBareMetalServerNetworkInterface', __args__, opts=opts, typ=GetIsBareMetalServerNetworkInterfaceResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsBareMetalServerNetworkInterfaceResult(
        allow_interface_to_float=pulumi.get(__ret__, 'allow_interface_to_float'),
        allow_ip_spoofing=pulumi.get(__ret__, 'allow_ip_spoofing'),
        allowed_vlans=pulumi.get(__ret__, 'allowed_vlans'),
        bare_metal_server=pulumi.get(__ret__, 'bare_metal_server'),
        enable_infrastructure_nat=pulumi.get(__ret__, 'enable_infrastructure_nat'),
        floating_ips=pulumi.get(__ret__, 'floating_ips'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        interface_type=pulumi.get(__ret__, 'interface_type'),
        mac_address=pulumi.get(__ret__, 'mac_address'),
        name=pulumi.get(__ret__, 'name'),
        network_interface=pulumi.get(__ret__, 'network_interface'),
        port_speed=pulumi.get(__ret__, 'port_speed'),
        primary_ips=pulumi.get(__ret__, 'primary_ips'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        security_groups=pulumi.get(__ret__, 'security_groups'),
        status=pulumi.get(__ret__, 'status'),
        subnet=pulumi.get(__ret__, 'subnet'),
        type=pulumi.get(__ret__, 'type'),
        vlan=pulumi.get(__ret__, 'vlan'))
def get_is_bare_metal_server_network_interface_output(bare_metal_server: Optional[pulumi.Input[_builtins.str]] = None,
                                                      id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                      network_interface: Optional[pulumi.Input[_builtins.str]] = None,
                                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsBareMetalServerNetworkInterfaceResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['bareMetalServer'] = bare_metal_server
    __args__['id'] = id
    __args__['networkInterface'] = network_interface
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsBareMetalServerNetworkInterface:getIsBareMetalServerNetworkInterface', __args__, opts=opts, typ=GetIsBareMetalServerNetworkInterfaceResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsBareMetalServerNetworkInterfaceResult(
        allow_interface_to_float=pulumi.get(__response__, 'allow_interface_to_float'),
        allow_ip_spoofing=pulumi.get(__response__, 'allow_ip_spoofing'),
        allowed_vlans=pulumi.get(__response__, 'allowed_vlans'),
        bare_metal_server=pulumi.get(__response__, 'bare_metal_server'),
        enable_infrastructure_nat=pulumi.get(__response__, 'enable_infrastructure_nat'),
        floating_ips=pulumi.get(__response__, 'floating_ips'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        interface_type=pulumi.get(__response__, 'interface_type'),
        mac_address=pulumi.get(__response__, 'mac_address'),
        name=pulumi.get(__response__, 'name'),
        network_interface=pulumi.get(__response__, 'network_interface'),
        port_speed=pulumi.get(__response__, 'port_speed'),
        primary_ips=pulumi.get(__response__, 'primary_ips'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        security_groups=pulumi.get(__response__, 'security_groups'),
        status=pulumi.get(__response__, 'status'),
        subnet=pulumi.get(__response__, 'subnet'),
        type=pulumi.get(__response__, 'type'),
        vlan=pulumi.get(__response__, 'vlan')))
