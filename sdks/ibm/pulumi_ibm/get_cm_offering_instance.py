# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetCmOfferingInstanceResult',
    'AwaitableGetCmOfferingInstanceResult',
    'get_cm_offering_instance',
    'get_cm_offering_instance_output',
]

@pulumi.output_type
class GetCmOfferingInstanceResult:
    """
    A collection of values returned by getCmOfferingInstance.
    """
    def __init__(__self__, _rev=None, catalog_id=None, channel=None, cluster_all_namespaces=None, cluster_id=None, cluster_namespaces=None, cluster_region=None, crn=None, id=None, install_plan=None, instance_identifier=None, kind_format=None, label=None, offering_id=None, parent_crn=None, plan_id=None, resource_group_id=None, schematics_workspace_id=None, url=None, version=None):
        if _rev and not isinstance(_rev, str):
            raise TypeError("Expected argument '_rev' to be a str")
        pulumi.set(__self__, "_rev", _rev)
        if catalog_id and not isinstance(catalog_id, str):
            raise TypeError("Expected argument 'catalog_id' to be a str")
        pulumi.set(__self__, "catalog_id", catalog_id)
        if channel and not isinstance(channel, str):
            raise TypeError("Expected argument 'channel' to be a str")
        pulumi.set(__self__, "channel", channel)
        if cluster_all_namespaces and not isinstance(cluster_all_namespaces, bool):
            raise TypeError("Expected argument 'cluster_all_namespaces' to be a bool")
        pulumi.set(__self__, "cluster_all_namespaces", cluster_all_namespaces)
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_namespaces and not isinstance(cluster_namespaces, list):
            raise TypeError("Expected argument 'cluster_namespaces' to be a list")
        pulumi.set(__self__, "cluster_namespaces", cluster_namespaces)
        if cluster_region and not isinstance(cluster_region, str):
            raise TypeError("Expected argument 'cluster_region' to be a str")
        pulumi.set(__self__, "cluster_region", cluster_region)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if install_plan and not isinstance(install_plan, str):
            raise TypeError("Expected argument 'install_plan' to be a str")
        pulumi.set(__self__, "install_plan", install_plan)
        if instance_identifier and not isinstance(instance_identifier, str):
            raise TypeError("Expected argument 'instance_identifier' to be a str")
        pulumi.set(__self__, "instance_identifier", instance_identifier)
        if kind_format and not isinstance(kind_format, str):
            raise TypeError("Expected argument 'kind_format' to be a str")
        pulumi.set(__self__, "kind_format", kind_format)
        if label and not isinstance(label, str):
            raise TypeError("Expected argument 'label' to be a str")
        pulumi.set(__self__, "label", label)
        if offering_id and not isinstance(offering_id, str):
            raise TypeError("Expected argument 'offering_id' to be a str")
        pulumi.set(__self__, "offering_id", offering_id)
        if parent_crn and not isinstance(parent_crn, str):
            raise TypeError("Expected argument 'parent_crn' to be a str")
        pulumi.set(__self__, "parent_crn", parent_crn)
        if plan_id and not isinstance(plan_id, str):
            raise TypeError("Expected argument 'plan_id' to be a str")
        pulumi.set(__self__, "plan_id", plan_id)
        if resource_group_id and not isinstance(resource_group_id, str):
            raise TypeError("Expected argument 'resource_group_id' to be a str")
        pulumi.set(__self__, "resource_group_id", resource_group_id)
        if schematics_workspace_id and not isinstance(schematics_workspace_id, str):
            raise TypeError("Expected argument 'schematics_workspace_id' to be a str")
        pulumi.set(__self__, "schematics_workspace_id", schematics_workspace_id)
        if url and not isinstance(url, str):
            raise TypeError("Expected argument 'url' to be a str")
        pulumi.set(__self__, "url", url)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def _rev(self) -> _builtins.str:
        return pulumi.get(self, "_rev")

    @_builtins.property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> _builtins.str:
        return pulumi.get(self, "catalog_id")

    @_builtins.property
    @pulumi.getter
    def channel(self) -> _builtins.str:
        return pulumi.get(self, "channel")

    @_builtins.property
    @pulumi.getter(name="clusterAllNamespaces")
    def cluster_all_namespaces(self) -> _builtins.bool:
        return pulumi.get(self, "cluster_all_namespaces")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="clusterNamespaces")
    def cluster_namespaces(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "cluster_namespaces")

    @_builtins.property
    @pulumi.getter(name="clusterRegion")
    def cluster_region(self) -> _builtins.str:
        return pulumi.get(self, "cluster_region")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="installPlan")
    def install_plan(self) -> _builtins.str:
        return pulumi.get(self, "install_plan")

    @_builtins.property
    @pulumi.getter(name="instanceIdentifier")
    def instance_identifier(self) -> _builtins.str:
        return pulumi.get(self, "instance_identifier")

    @_builtins.property
    @pulumi.getter(name="kindFormat")
    def kind_format(self) -> _builtins.str:
        return pulumi.get(self, "kind_format")

    @_builtins.property
    @pulumi.getter
    def label(self) -> _builtins.str:
        return pulumi.get(self, "label")

    @_builtins.property
    @pulumi.getter(name="offeringId")
    def offering_id(self) -> _builtins.str:
        return pulumi.get(self, "offering_id")

    @_builtins.property
    @pulumi.getter(name="parentCrn")
    def parent_crn(self) -> _builtins.str:
        return pulumi.get(self, "parent_crn")

    @_builtins.property
    @pulumi.getter(name="planId")
    def plan_id(self) -> _builtins.str:
        return pulumi.get(self, "plan_id")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> _builtins.str:
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter(name="schematicsWorkspaceId")
    def schematics_workspace_id(self) -> _builtins.str:
        return pulumi.get(self, "schematics_workspace_id")

    @_builtins.property
    @pulumi.getter
    def url(self) -> _builtins.str:
        return pulumi.get(self, "url")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        return pulumi.get(self, "version")


class AwaitableGetCmOfferingInstanceResult(GetCmOfferingInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCmOfferingInstanceResult(
            _rev=self._rev,
            catalog_id=self.catalog_id,
            channel=self.channel,
            cluster_all_namespaces=self.cluster_all_namespaces,
            cluster_id=self.cluster_id,
            cluster_namespaces=self.cluster_namespaces,
            cluster_region=self.cluster_region,
            crn=self.crn,
            id=self.id,
            install_plan=self.install_plan,
            instance_identifier=self.instance_identifier,
            kind_format=self.kind_format,
            label=self.label,
            offering_id=self.offering_id,
            parent_crn=self.parent_crn,
            plan_id=self.plan_id,
            resource_group_id=self.resource_group_id,
            schematics_workspace_id=self.schematics_workspace_id,
            url=self.url,
            version=self.version)


def get_cm_offering_instance(id: Optional[_builtins.str] = None,
                             instance_identifier: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCmOfferingInstanceResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceIdentifier'] = instance_identifier
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCmOfferingInstance:getCmOfferingInstance', __args__, opts=opts, typ=GetCmOfferingInstanceResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCmOfferingInstanceResult(
        _rev=pulumi.get(__ret__, '_rev'),
        catalog_id=pulumi.get(__ret__, 'catalog_id'),
        channel=pulumi.get(__ret__, 'channel'),
        cluster_all_namespaces=pulumi.get(__ret__, 'cluster_all_namespaces'),
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        cluster_namespaces=pulumi.get(__ret__, 'cluster_namespaces'),
        cluster_region=pulumi.get(__ret__, 'cluster_region'),
        crn=pulumi.get(__ret__, 'crn'),
        id=pulumi.get(__ret__, 'id'),
        install_plan=pulumi.get(__ret__, 'install_plan'),
        instance_identifier=pulumi.get(__ret__, 'instance_identifier'),
        kind_format=pulumi.get(__ret__, 'kind_format'),
        label=pulumi.get(__ret__, 'label'),
        offering_id=pulumi.get(__ret__, 'offering_id'),
        parent_crn=pulumi.get(__ret__, 'parent_crn'),
        plan_id=pulumi.get(__ret__, 'plan_id'),
        resource_group_id=pulumi.get(__ret__, 'resource_group_id'),
        schematics_workspace_id=pulumi.get(__ret__, 'schematics_workspace_id'),
        url=pulumi.get(__ret__, 'url'),
        version=pulumi.get(__ret__, 'version'))
def get_cm_offering_instance_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    instance_identifier: Optional[pulumi.Input[_builtins.str]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCmOfferingInstanceResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceIdentifier'] = instance_identifier
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCmOfferingInstance:getCmOfferingInstance', __args__, opts=opts, typ=GetCmOfferingInstanceResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCmOfferingInstanceResult(
        _rev=pulumi.get(__response__, '_rev'),
        catalog_id=pulumi.get(__response__, 'catalog_id'),
        channel=pulumi.get(__response__, 'channel'),
        cluster_all_namespaces=pulumi.get(__response__, 'cluster_all_namespaces'),
        cluster_id=pulumi.get(__response__, 'cluster_id'),
        cluster_namespaces=pulumi.get(__response__, 'cluster_namespaces'),
        cluster_region=pulumi.get(__response__, 'cluster_region'),
        crn=pulumi.get(__response__, 'crn'),
        id=pulumi.get(__response__, 'id'),
        install_plan=pulumi.get(__response__, 'install_plan'),
        instance_identifier=pulumi.get(__response__, 'instance_identifier'),
        kind_format=pulumi.get(__response__, 'kind_format'),
        label=pulumi.get(__response__, 'label'),
        offering_id=pulumi.get(__response__, 'offering_id'),
        parent_crn=pulumi.get(__response__, 'parent_crn'),
        plan_id=pulumi.get(__response__, 'plan_id'),
        resource_group_id=pulumi.get(__response__, 'resource_group_id'),
        schematics_workspace_id=pulumi.get(__response__, 'schematics_workspace_id'),
        url=pulumi.get(__response__, 'url'),
        version=pulumi.get(__response__, 'version')))
