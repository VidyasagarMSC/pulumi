# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ContainerDedicatedHostArgs', 'ContainerDedicatedHost']

@pulumi.input_type
class ContainerDedicatedHostArgs:
    def __init__(__self__, *,
                 flavor: pulumi.Input[_builtins.str],
                 host_pool_id: pulumi.Input[_builtins.str],
                 zone: pulumi.Input[_builtins.str],
                 container_dedicated_host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 placement_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 timeouts: Optional[pulumi.Input['ContainerDedicatedHostTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a ContainerDedicatedHost resource.
        :param pulumi.Input[_builtins.str] flavor: The flavor of the dedicated host
        :param pulumi.Input[_builtins.str] host_pool_id: The id of the dedicated host pool the dedicated host is associated with
        :param pulumi.Input[_builtins.str] zone: The zone of the dedicated host
        :param pulumi.Input[_builtins.bool] placement_enabled: Enables/disables placement on the dedicated host
        """
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "host_pool_id", host_pool_id)
        pulumi.set(__self__, "zone", zone)
        if container_dedicated_host_id is not None:
            pulumi.set(__self__, "container_dedicated_host_id", container_dedicated_host_id)
        if placement_enabled is not None:
            pulumi.set(__self__, "placement_enabled", placement_enabled)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> pulumi.Input[_builtins.str]:
        """
        The flavor of the dedicated host
        """
        return pulumi.get(self, "flavor")

    @flavor.setter
    def flavor(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "flavor", value)

    @_builtins.property
    @pulumi.getter(name="hostPoolId")
    def host_pool_id(self) -> pulumi.Input[_builtins.str]:
        """
        The id of the dedicated host pool the dedicated host is associated with
        """
        return pulumi.get(self, "host_pool_id")

    @host_pool_id.setter
    def host_pool_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "host_pool_id", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> pulumi.Input[_builtins.str]:
        """
        The zone of the dedicated host
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "zone", value)

    @_builtins.property
    @pulumi.getter(name="containerDedicatedHostId")
    def container_dedicated_host_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_dedicated_host_id")

    @container_dedicated_host_id.setter
    def container_dedicated_host_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_dedicated_host_id", value)

    @_builtins.property
    @pulumi.getter(name="placementEnabled")
    def placement_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enables/disables placement on the dedicated host
        """
        return pulumi.get(self, "placement_enabled")

    @placement_enabled.setter
    def placement_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "placement_enabled", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ContainerDedicatedHostTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ContainerDedicatedHostTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _ContainerDedicatedHostState:
    def __init__(__self__, *,
                 container_dedicated_host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor: Optional[pulumi.Input[_builtins.str]] = None,
                 host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 host_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 life_cycles: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerDedicatedHostLifeCycleArgs']]]] = None,
                 placement_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerDedicatedHostResourceArgs']]]] = None,
                 timeouts: Optional[pulumi.Input['ContainerDedicatedHostTimeoutsArgs']] = None,
                 workers: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerDedicatedHostWorkerArgs']]]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ContainerDedicatedHost resources.
        :param pulumi.Input[_builtins.str] flavor: The flavor of the dedicated host
        :param pulumi.Input[_builtins.str] host_id: The id of the dedicated host
        :param pulumi.Input[_builtins.str] host_pool_id: The id of the dedicated host pool the dedicated host is associated with
        :param pulumi.Input[_builtins.bool] placement_enabled: Enables/disables placement on the dedicated host
        :param pulumi.Input[Sequence[pulumi.Input['ContainerDedicatedHostResourceArgs']]] resources: The resources of the dedicated host
        :param pulumi.Input[Sequence[pulumi.Input['ContainerDedicatedHostWorkerArgs']]] workers: The workers of the dedicated host
        :param pulumi.Input[_builtins.str] zone: The zone of the dedicated host
        """
        if container_dedicated_host_id is not None:
            pulumi.set(__self__, "container_dedicated_host_id", container_dedicated_host_id)
        if flavor is not None:
            pulumi.set(__self__, "flavor", flavor)
        if host_id is not None:
            pulumi.set(__self__, "host_id", host_id)
        if host_pool_id is not None:
            pulumi.set(__self__, "host_pool_id", host_pool_id)
        if life_cycles is not None:
            pulumi.set(__self__, "life_cycles", life_cycles)
        if placement_enabled is not None:
            pulumi.set(__self__, "placement_enabled", placement_enabled)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if workers is not None:
            pulumi.set(__self__, "workers", workers)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter(name="containerDedicatedHostId")
    def container_dedicated_host_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_dedicated_host_id")

    @container_dedicated_host_id.setter
    def container_dedicated_host_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_dedicated_host_id", value)

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The flavor of the dedicated host
        """
        return pulumi.get(self, "flavor")

    @flavor.setter
    def flavor(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "flavor", value)

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The id of the dedicated host
        """
        return pulumi.get(self, "host_id")

    @host_id.setter
    def host_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_id", value)

    @_builtins.property
    @pulumi.getter(name="hostPoolId")
    def host_pool_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The id of the dedicated host pool the dedicated host is associated with
        """
        return pulumi.get(self, "host_pool_id")

    @host_pool_id.setter
    def host_pool_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_pool_id", value)

    @_builtins.property
    @pulumi.getter(name="lifeCycles")
    def life_cycles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerDedicatedHostLifeCycleArgs']]]]:
        return pulumi.get(self, "life_cycles")

    @life_cycles.setter
    def life_cycles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerDedicatedHostLifeCycleArgs']]]]):
        pulumi.set(self, "life_cycles", value)

    @_builtins.property
    @pulumi.getter(name="placementEnabled")
    def placement_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enables/disables placement on the dedicated host
        """
        return pulumi.get(self, "placement_enabled")

    @placement_enabled.setter
    def placement_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "placement_enabled", value)

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerDedicatedHostResourceArgs']]]]:
        """
        The resources of the dedicated host
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerDedicatedHostResourceArgs']]]]):
        pulumi.set(self, "resources", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ContainerDedicatedHostTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ContainerDedicatedHostTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def workers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerDedicatedHostWorkerArgs']]]]:
        """
        The workers of the dedicated host
        """
        return pulumi.get(self, "workers")

    @workers.setter
    def workers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerDedicatedHostWorkerArgs']]]]):
        pulumi.set(self, "workers", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The zone of the dedicated host
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zone", value)


@pulumi.type_token("ibm:index/containerDedicatedHost:ContainerDedicatedHost")
class ContainerDedicatedHost(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 container_dedicated_host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor: Optional[pulumi.Input[_builtins.str]] = None,
                 host_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 placement_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 timeouts: Optional[pulumi.Input[Union['ContainerDedicatedHostTimeoutsArgs', 'ContainerDedicatedHostTimeoutsArgsDict']]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a ContainerDedicatedHost resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] flavor: The flavor of the dedicated host
        :param pulumi.Input[_builtins.str] host_pool_id: The id of the dedicated host pool the dedicated host is associated with
        :param pulumi.Input[_builtins.bool] placement_enabled: Enables/disables placement on the dedicated host
        :param pulumi.Input[_builtins.str] zone: The zone of the dedicated host
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ContainerDedicatedHostArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ContainerDedicatedHost resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ContainerDedicatedHostArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ContainerDedicatedHostArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 container_dedicated_host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor: Optional[pulumi.Input[_builtins.str]] = None,
                 host_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 placement_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 timeouts: Optional[pulumi.Input[Union['ContainerDedicatedHostTimeoutsArgs', 'ContainerDedicatedHostTimeoutsArgsDict']]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ContainerDedicatedHostArgs.__new__(ContainerDedicatedHostArgs)

            __props__.__dict__["container_dedicated_host_id"] = container_dedicated_host_id
            if flavor is None and not opts.urn:
                raise TypeError("Missing required property 'flavor'")
            __props__.__dict__["flavor"] = flavor
            if host_pool_id is None and not opts.urn:
                raise TypeError("Missing required property 'host_pool_id'")
            __props__.__dict__["host_pool_id"] = host_pool_id
            __props__.__dict__["placement_enabled"] = placement_enabled
            __props__.__dict__["timeouts"] = timeouts
            if zone is None and not opts.urn:
                raise TypeError("Missing required property 'zone'")
            __props__.__dict__["zone"] = zone
            __props__.__dict__["host_id"] = None
            __props__.__dict__["life_cycles"] = None
            __props__.__dict__["resources"] = None
            __props__.__dict__["workers"] = None
        super(ContainerDedicatedHost, __self__).__init__(
            'ibm:index/containerDedicatedHost:ContainerDedicatedHost',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            container_dedicated_host_id: Optional[pulumi.Input[_builtins.str]] = None,
            flavor: Optional[pulumi.Input[_builtins.str]] = None,
            host_id: Optional[pulumi.Input[_builtins.str]] = None,
            host_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
            life_cycles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerDedicatedHostLifeCycleArgs', 'ContainerDedicatedHostLifeCycleArgsDict']]]]] = None,
            placement_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            resources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerDedicatedHostResourceArgs', 'ContainerDedicatedHostResourceArgsDict']]]]] = None,
            timeouts: Optional[pulumi.Input[Union['ContainerDedicatedHostTimeoutsArgs', 'ContainerDedicatedHostTimeoutsArgsDict']]] = None,
            workers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerDedicatedHostWorkerArgs', 'ContainerDedicatedHostWorkerArgsDict']]]]] = None,
            zone: Optional[pulumi.Input[_builtins.str]] = None) -> 'ContainerDedicatedHost':
        """
        Get an existing ContainerDedicatedHost resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] flavor: The flavor of the dedicated host
        :param pulumi.Input[_builtins.str] host_id: The id of the dedicated host
        :param pulumi.Input[_builtins.str] host_pool_id: The id of the dedicated host pool the dedicated host is associated with
        :param pulumi.Input[_builtins.bool] placement_enabled: Enables/disables placement on the dedicated host
        :param pulumi.Input[Sequence[pulumi.Input[Union['ContainerDedicatedHostResourceArgs', 'ContainerDedicatedHostResourceArgsDict']]]] resources: The resources of the dedicated host
        :param pulumi.Input[Sequence[pulumi.Input[Union['ContainerDedicatedHostWorkerArgs', 'ContainerDedicatedHostWorkerArgsDict']]]] workers: The workers of the dedicated host
        :param pulumi.Input[_builtins.str] zone: The zone of the dedicated host
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ContainerDedicatedHostState.__new__(_ContainerDedicatedHostState)

        __props__.__dict__["container_dedicated_host_id"] = container_dedicated_host_id
        __props__.__dict__["flavor"] = flavor
        __props__.__dict__["host_id"] = host_id
        __props__.__dict__["host_pool_id"] = host_pool_id
        __props__.__dict__["life_cycles"] = life_cycles
        __props__.__dict__["placement_enabled"] = placement_enabled
        __props__.__dict__["resources"] = resources
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["workers"] = workers
        __props__.__dict__["zone"] = zone
        return ContainerDedicatedHost(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="containerDedicatedHostId")
    def container_dedicated_host_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "container_dedicated_host_id")

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> pulumi.Output[_builtins.str]:
        """
        The flavor of the dedicated host
        """
        return pulumi.get(self, "flavor")

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> pulumi.Output[_builtins.str]:
        """
        The id of the dedicated host
        """
        return pulumi.get(self, "host_id")

    @_builtins.property
    @pulumi.getter(name="hostPoolId")
    def host_pool_id(self) -> pulumi.Output[_builtins.str]:
        """
        The id of the dedicated host pool the dedicated host is associated with
        """
        return pulumi.get(self, "host_pool_id")

    @_builtins.property
    @pulumi.getter(name="lifeCycles")
    def life_cycles(self) -> pulumi.Output[Sequence['outputs.ContainerDedicatedHostLifeCycle']]:
        return pulumi.get(self, "life_cycles")

    @_builtins.property
    @pulumi.getter(name="placementEnabled")
    def placement_enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        Enables/disables placement on the dedicated host
        """
        return pulumi.get(self, "placement_enabled")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> pulumi.Output[Sequence['outputs.ContainerDedicatedHostResource']]:
        """
        The resources of the dedicated host
        """
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.ContainerDedicatedHostTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def workers(self) -> pulumi.Output[Sequence['outputs.ContainerDedicatedHostWorker']]:
        """
        The workers of the dedicated host
        """
        return pulumi.get(self, "workers")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> pulumi.Output[_builtins.str]:
        """
        The zone of the dedicated host
        """
        return pulumi.get(self, "zone")

