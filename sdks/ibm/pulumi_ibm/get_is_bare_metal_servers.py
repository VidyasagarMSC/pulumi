# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsBareMetalServersResult',
    'AwaitableGetIsBareMetalServersResult',
    'get_is_bare_metal_servers',
    'get_is_bare_metal_servers_output',
]

@pulumi.output_type
class GetIsBareMetalServersResult:
    """
    A collection of values returned by getIsBareMetalServers.
    """
    def __init__(__self__, id=None, name=None, network_interfaces_subnet=None, network_interfaces_subnet_crn=None, network_interfaces_subnet_name=None, resource_group=None, servers=None, vpc=None, vpc_crn=None, vpc_name=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_interfaces_subnet and not isinstance(network_interfaces_subnet, str):
            raise TypeError("Expected argument 'network_interfaces_subnet' to be a str")
        pulumi.set(__self__, "network_interfaces_subnet", network_interfaces_subnet)
        if network_interfaces_subnet_crn and not isinstance(network_interfaces_subnet_crn, str):
            raise TypeError("Expected argument 'network_interfaces_subnet_crn' to be a str")
        pulumi.set(__self__, "network_interfaces_subnet_crn", network_interfaces_subnet_crn)
        if network_interfaces_subnet_name and not isinstance(network_interfaces_subnet_name, str):
            raise TypeError("Expected argument 'network_interfaces_subnet_name' to be a str")
        pulumi.set(__self__, "network_interfaces_subnet_name", network_interfaces_subnet_name)
        if resource_group and not isinstance(resource_group, str):
            raise TypeError("Expected argument 'resource_group' to be a str")
        pulumi.set(__self__, "resource_group", resource_group)
        if servers and not isinstance(servers, list):
            raise TypeError("Expected argument 'servers' to be a list")
        pulumi.set(__self__, "servers", servers)
        if vpc and not isinstance(vpc, str):
            raise TypeError("Expected argument 'vpc' to be a str")
        pulumi.set(__self__, "vpc", vpc)
        if vpc_crn and not isinstance(vpc_crn, str):
            raise TypeError("Expected argument 'vpc_crn' to be a str")
        pulumi.set(__self__, "vpc_crn", vpc_crn)
        if vpc_name and not isinstance(vpc_name, str):
            raise TypeError("Expected argument 'vpc_name' to be a str")
        pulumi.set(__self__, "vpc_name", vpc_name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkInterfacesSubnet")
    def network_interfaces_subnet(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "network_interfaces_subnet")

    @_builtins.property
    @pulumi.getter(name="networkInterfacesSubnetCrn")
    def network_interfaces_subnet_crn(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "network_interfaces_subnet_crn")

    @_builtins.property
    @pulumi.getter(name="networkInterfacesSubnetName")
    def network_interfaces_subnet_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "network_interfaces_subnet_name")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter
    def servers(self) -> Sequence['outputs.GetIsBareMetalServersServerResult']:
        return pulumi.get(self, "servers")

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vpc")

    @_builtins.property
    @pulumi.getter(name="vpcCrn")
    def vpc_crn(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vpc_crn")

    @_builtins.property
    @pulumi.getter(name="vpcName")
    def vpc_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vpc_name")


class AwaitableGetIsBareMetalServersResult(GetIsBareMetalServersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsBareMetalServersResult(
            id=self.id,
            name=self.name,
            network_interfaces_subnet=self.network_interfaces_subnet,
            network_interfaces_subnet_crn=self.network_interfaces_subnet_crn,
            network_interfaces_subnet_name=self.network_interfaces_subnet_name,
            resource_group=self.resource_group,
            servers=self.servers,
            vpc=self.vpc,
            vpc_crn=self.vpc_crn,
            vpc_name=self.vpc_name)


def get_is_bare_metal_servers(id: Optional[_builtins.str] = None,
                              name: Optional[_builtins.str] = None,
                              network_interfaces_subnet: Optional[_builtins.str] = None,
                              network_interfaces_subnet_crn: Optional[_builtins.str] = None,
                              network_interfaces_subnet_name: Optional[_builtins.str] = None,
                              resource_group: Optional[_builtins.str] = None,
                              vpc: Optional[_builtins.str] = None,
                              vpc_crn: Optional[_builtins.str] = None,
                              vpc_name: Optional[_builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsBareMetalServersResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['networkInterfacesSubnet'] = network_interfaces_subnet
    __args__['networkInterfacesSubnetCrn'] = network_interfaces_subnet_crn
    __args__['networkInterfacesSubnetName'] = network_interfaces_subnet_name
    __args__['resourceGroup'] = resource_group
    __args__['vpc'] = vpc
    __args__['vpcCrn'] = vpc_crn
    __args__['vpcName'] = vpc_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsBareMetalServers:getIsBareMetalServers', __args__, opts=opts, typ=GetIsBareMetalServersResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsBareMetalServersResult(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        network_interfaces_subnet=pulumi.get(__ret__, 'network_interfaces_subnet'),
        network_interfaces_subnet_crn=pulumi.get(__ret__, 'network_interfaces_subnet_crn'),
        network_interfaces_subnet_name=pulumi.get(__ret__, 'network_interfaces_subnet_name'),
        resource_group=pulumi.get(__ret__, 'resource_group'),
        servers=pulumi.get(__ret__, 'servers'),
        vpc=pulumi.get(__ret__, 'vpc'),
        vpc_crn=pulumi.get(__ret__, 'vpc_crn'),
        vpc_name=pulumi.get(__ret__, 'vpc_name'))
def get_is_bare_metal_servers_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     network_interfaces_subnet: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     network_interfaces_subnet_crn: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     network_interfaces_subnet_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     resource_group: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     vpc: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     vpc_crn: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     vpc_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsBareMetalServersResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['networkInterfacesSubnet'] = network_interfaces_subnet
    __args__['networkInterfacesSubnetCrn'] = network_interfaces_subnet_crn
    __args__['networkInterfacesSubnetName'] = network_interfaces_subnet_name
    __args__['resourceGroup'] = resource_group
    __args__['vpc'] = vpc
    __args__['vpcCrn'] = vpc_crn
    __args__['vpcName'] = vpc_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsBareMetalServers:getIsBareMetalServers', __args__, opts=opts, typ=GetIsBareMetalServersResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsBareMetalServersResult(
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        network_interfaces_subnet=pulumi.get(__response__, 'network_interfaces_subnet'),
        network_interfaces_subnet_crn=pulumi.get(__response__, 'network_interfaces_subnet_crn'),
        network_interfaces_subnet_name=pulumi.get(__response__, 'network_interfaces_subnet_name'),
        resource_group=pulumi.get(__response__, 'resource_group'),
        servers=pulumi.get(__response__, 'servers'),
        vpc=pulumi.get(__response__, 'vpc'),
        vpc_crn=pulumi.get(__response__, 'vpc_crn'),
        vpc_name=pulumi.get(__response__, 'vpc_name')))
