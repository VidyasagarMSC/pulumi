# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsClusterNetworksResult',
    'AwaitableGetIsClusterNetworksResult',
    'get_is_cluster_networks',
    'get_is_cluster_networks_output',
]

@pulumi.output_type
class GetIsClusterNetworksResult:
    """
    A collection of values returned by getIsClusterNetworks.
    """
    def __init__(__self__, cluster_networks=None, id=None, name=None, resource_group_id=None, sort=None, vpc_crn=None, vpc_id=None, vpc_name=None):
        if cluster_networks and not isinstance(cluster_networks, list):
            raise TypeError("Expected argument 'cluster_networks' to be a list")
        pulumi.set(__self__, "cluster_networks", cluster_networks)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resource_group_id and not isinstance(resource_group_id, str):
            raise TypeError("Expected argument 'resource_group_id' to be a str")
        pulumi.set(__self__, "resource_group_id", resource_group_id)
        if sort and not isinstance(sort, str):
            raise TypeError("Expected argument 'sort' to be a str")
        pulumi.set(__self__, "sort", sort)
        if vpc_crn and not isinstance(vpc_crn, str):
            raise TypeError("Expected argument 'vpc_crn' to be a str")
        pulumi.set(__self__, "vpc_crn", vpc_crn)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)
        if vpc_name and not isinstance(vpc_name, str):
            raise TypeError("Expected argument 'vpc_name' to be a str")
        pulumi.set(__self__, "vpc_name", vpc_name)

    @_builtins.property
    @pulumi.getter(name="clusterNetworks")
    def cluster_networks(self) -> Sequence['outputs.GetIsClusterNetworksClusterNetworkResult']:
        return pulumi.get(self, "cluster_networks")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter
    def sort(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort")

    @_builtins.property
    @pulumi.getter(name="vpcCrn")
    def vpc_crn(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vpc_crn")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vpc_id")

    @_builtins.property
    @pulumi.getter(name="vpcName")
    def vpc_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vpc_name")


class AwaitableGetIsClusterNetworksResult(GetIsClusterNetworksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsClusterNetworksResult(
            cluster_networks=self.cluster_networks,
            id=self.id,
            name=self.name,
            resource_group_id=self.resource_group_id,
            sort=self.sort,
            vpc_crn=self.vpc_crn,
            vpc_id=self.vpc_id,
            vpc_name=self.vpc_name)


def get_is_cluster_networks(id: Optional[_builtins.str] = None,
                            name: Optional[_builtins.str] = None,
                            resource_group_id: Optional[_builtins.str] = None,
                            sort: Optional[_builtins.str] = None,
                            vpc_crn: Optional[_builtins.str] = None,
                            vpc_id: Optional[_builtins.str] = None,
                            vpc_name: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsClusterNetworksResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['resourceGroupId'] = resource_group_id
    __args__['sort'] = sort
    __args__['vpcCrn'] = vpc_crn
    __args__['vpcId'] = vpc_id
    __args__['vpcName'] = vpc_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsClusterNetworks:getIsClusterNetworks', __args__, opts=opts, typ=GetIsClusterNetworksResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsClusterNetworksResult(
        cluster_networks=pulumi.get(__ret__, 'cluster_networks'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        resource_group_id=pulumi.get(__ret__, 'resource_group_id'),
        sort=pulumi.get(__ret__, 'sort'),
        vpc_crn=pulumi.get(__ret__, 'vpc_crn'),
        vpc_id=pulumi.get(__ret__, 'vpc_id'),
        vpc_name=pulumi.get(__ret__, 'vpc_name'))
def get_is_cluster_networks_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   resource_group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   sort: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   vpc_crn: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   vpc_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   vpc_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsClusterNetworksResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['resourceGroupId'] = resource_group_id
    __args__['sort'] = sort
    __args__['vpcCrn'] = vpc_crn
    __args__['vpcId'] = vpc_id
    __args__['vpcName'] = vpc_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsClusterNetworks:getIsClusterNetworks', __args__, opts=opts, typ=GetIsClusterNetworksResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsClusterNetworksResult(
        cluster_networks=pulumi.get(__response__, 'cluster_networks'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        resource_group_id=pulumi.get(__response__, 'resource_group_id'),
        sort=pulumi.get(__response__, 'sort'),
        vpc_crn=pulumi.get(__response__, 'vpc_crn'),
        vpc_id=pulumi.get(__response__, 'vpc_id'),
        vpc_name=pulumi.get(__response__, 'vpc_name')))
