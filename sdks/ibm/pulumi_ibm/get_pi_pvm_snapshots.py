# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetPiPvmSnapshotsResult',
    'AwaitableGetPiPvmSnapshotsResult',
    'get_pi_pvm_snapshots',
    'get_pi_pvm_snapshots_output',
]

@pulumi.output_type
class GetPiPvmSnapshotsResult:
    """
    A collection of values returned by getPiPvmSnapshots.
    """
    def __init__(__self__, id=None, pi_cloud_instance_id=None, pi_instance_name=None, pvm_snapshots=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if pi_cloud_instance_id and not isinstance(pi_cloud_instance_id, str):
            raise TypeError("Expected argument 'pi_cloud_instance_id' to be a str")
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_instance_name and not isinstance(pi_instance_name, str):
            raise TypeError("Expected argument 'pi_instance_name' to be a str")
        pulumi.set(__self__, "pi_instance_name", pi_instance_name)
        if pvm_snapshots and not isinstance(pvm_snapshots, list):
            raise TypeError("Expected argument 'pvm_snapshots' to be a list")
        pulumi.set(__self__, "pvm_snapshots", pvm_snapshots)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piInstanceName")
    def pi_instance_name(self) -> _builtins.str:
        return pulumi.get(self, "pi_instance_name")

    @_builtins.property
    @pulumi.getter(name="pvmSnapshots")
    def pvm_snapshots(self) -> Sequence['outputs.GetPiPvmSnapshotsPvmSnapshotResult']:
        return pulumi.get(self, "pvm_snapshots")


class AwaitableGetPiPvmSnapshotsResult(GetPiPvmSnapshotsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPiPvmSnapshotsResult(
            id=self.id,
            pi_cloud_instance_id=self.pi_cloud_instance_id,
            pi_instance_name=self.pi_instance_name,
            pvm_snapshots=self.pvm_snapshots)


def get_pi_pvm_snapshots(id: Optional[_builtins.str] = None,
                         pi_cloud_instance_id: Optional[_builtins.str] = None,
                         pi_instance_name: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPiPvmSnapshotsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piInstanceName'] = pi_instance_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getPiPvmSnapshots:getPiPvmSnapshots', __args__, opts=opts, typ=GetPiPvmSnapshotsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetPiPvmSnapshotsResult(
        id=pulumi.get(__ret__, 'id'),
        pi_cloud_instance_id=pulumi.get(__ret__, 'pi_cloud_instance_id'),
        pi_instance_name=pulumi.get(__ret__, 'pi_instance_name'),
        pvm_snapshots=pulumi.get(__ret__, 'pvm_snapshots'))
def get_pi_pvm_snapshots_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                pi_instance_name: Optional[pulumi.Input[_builtins.str]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPiPvmSnapshotsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piInstanceName'] = pi_instance_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getPiPvmSnapshots:getPiPvmSnapshots', __args__, opts=opts, typ=GetPiPvmSnapshotsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetPiPvmSnapshotsResult(
        id=pulumi.get(__response__, 'id'),
        pi_cloud_instance_id=pulumi.get(__response__, 'pi_cloud_instance_id'),
        pi_instance_name=pulumi.get(__response__, 'pi_instance_name'),
        pvm_snapshots=pulumi.get(__response__, 'pvm_snapshots')))
