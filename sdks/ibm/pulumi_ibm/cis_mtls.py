# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['CisMtlsArgs', 'CisMtls']

@pulumi.input_type
class CisMtlsArgs:
    def __init__(__self__, *,
                 associated_hostnames: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 certificate: pulumi.Input[_builtins.str],
                 cis_id: pulumi.Input[_builtins.str],
                 domain_id: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CisMtls resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] associated_hostnames: Host name list to be associated
        :param pulumi.Input[_builtins.str] certificate: Certificate contents
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.str] name: Certificate name
        """
        pulumi.set(__self__, "associated_hostnames", associated_hostnames)
        pulumi.set(__self__, "certificate", certificate)
        pulumi.set(__self__, "cis_id", cis_id)
        pulumi.set(__self__, "domain_id", domain_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="associatedHostnames")
    def associated_hostnames(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Host name list to be associated
        """
        return pulumi.get(self, "associated_hostnames")

    @associated_hostnames.setter
    def associated_hostnames(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "associated_hostnames", value)

    @_builtins.property
    @pulumi.getter
    def certificate(self) -> pulumi.Input[_builtins.str]:
        """
        Certificate contents
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "certificate", value)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Input[_builtins.str]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Input[_builtins.str]:
        """
        Associated CIS domain
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Certificate name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _CisMtlsState:
    def __init__(__self__, *,
                 associated_hostnames: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 certificate: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 expires_on: Optional[pulumi.Input[_builtins.str]] = None,
                 mtls_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CisMtls resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] associated_hostnames: Host name list to be associated
        :param pulumi.Input[_builtins.str] certificate: Certificate contents
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] created_at: Certificate Created At
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.str] expires_on: Certificate Expires on
        :param pulumi.Input[_builtins.str] mtls_id: Mtls transaction ID
        :param pulumi.Input[_builtins.str] name: Certificate name
        :param pulumi.Input[_builtins.str] updated_at: Certificate Updated At
        """
        if associated_hostnames is not None:
            pulumi.set(__self__, "associated_hostnames", associated_hostnames)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if cis_id is not None:
            pulumi.set(__self__, "cis_id", cis_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if expires_on is not None:
            pulumi.set(__self__, "expires_on", expires_on)
        if mtls_id is not None:
            pulumi.set(__self__, "mtls_id", mtls_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="associatedHostnames")
    def associated_hostnames(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Host name list to be associated
        """
        return pulumi.get(self, "associated_hostnames")

    @associated_hostnames.setter
    def associated_hostnames(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "associated_hostnames", value)

    @_builtins.property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Certificate contents
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "certificate", value)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Certificate Created At
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Associated CIS domain
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Certificate Expires on
        """
        return pulumi.get(self, "expires_on")

    @expires_on.setter
    def expires_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expires_on", value)

    @_builtins.property
    @pulumi.getter(name="mtlsId")
    def mtls_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Mtls transaction ID
        """
        return pulumi.get(self, "mtls_id")

    @mtls_id.setter
    def mtls_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mtls_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Certificate name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Certificate Updated At
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("ibm:index/cisMtls:CisMtls")
class CisMtls(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 associated_hostnames: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 certificate: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a CisMtls resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] associated_hostnames: Host name list to be associated
        :param pulumi.Input[_builtins.str] certificate: Certificate contents
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.str] name: Certificate name
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CisMtlsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CisMtls resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CisMtlsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CisMtlsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 associated_hostnames: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 certificate: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CisMtlsArgs.__new__(CisMtlsArgs)

            if associated_hostnames is None and not opts.urn:
                raise TypeError("Missing required property 'associated_hostnames'")
            __props__.__dict__["associated_hostnames"] = associated_hostnames
            if certificate is None and not opts.urn:
                raise TypeError("Missing required property 'certificate'")
            __props__.__dict__["certificate"] = None if certificate is None else pulumi.Output.secret(certificate)
            if cis_id is None and not opts.urn:
                raise TypeError("Missing required property 'cis_id'")
            __props__.__dict__["cis_id"] = cis_id
            if domain_id is None and not opts.urn:
                raise TypeError("Missing required property 'domain_id'")
            __props__.__dict__["domain_id"] = domain_id
            __props__.__dict__["name"] = name
            __props__.__dict__["created_at"] = None
            __props__.__dict__["expires_on"] = None
            __props__.__dict__["mtls_id"] = None
            __props__.__dict__["updated_at"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["certificate"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(CisMtls, __self__).__init__(
            'ibm:index/cisMtls:CisMtls',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            associated_hostnames: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            certificate: Optional[pulumi.Input[_builtins.str]] = None,
            cis_id: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            domain_id: Optional[pulumi.Input[_builtins.str]] = None,
            expires_on: Optional[pulumi.Input[_builtins.str]] = None,
            mtls_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'CisMtls':
        """
        Get an existing CisMtls resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] associated_hostnames: Host name list to be associated
        :param pulumi.Input[_builtins.str] certificate: Certificate contents
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] created_at: Certificate Created At
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.str] expires_on: Certificate Expires on
        :param pulumi.Input[_builtins.str] mtls_id: Mtls transaction ID
        :param pulumi.Input[_builtins.str] name: Certificate name
        :param pulumi.Input[_builtins.str] updated_at: Certificate Updated At
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CisMtlsState.__new__(_CisMtlsState)

        __props__.__dict__["associated_hostnames"] = associated_hostnames
        __props__.__dict__["certificate"] = certificate
        __props__.__dict__["cis_id"] = cis_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["domain_id"] = domain_id
        __props__.__dict__["expires_on"] = expires_on
        __props__.__dict__["mtls_id"] = mtls_id
        __props__.__dict__["name"] = name
        __props__.__dict__["updated_at"] = updated_at
        return CisMtls(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="associatedHostnames")
    def associated_hostnames(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Host name list to be associated
        """
        return pulumi.get(self, "associated_hostnames")

    @_builtins.property
    @pulumi.getter
    def certificate(self) -> pulumi.Output[_builtins.str]:
        """
        Certificate contents
        """
        return pulumi.get(self, "certificate")

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Output[_builtins.str]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Certificate Created At
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Output[_builtins.str]:
        """
        Associated CIS domain
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> pulumi.Output[_builtins.str]:
        """
        Certificate Expires on
        """
        return pulumi.get(self, "expires_on")

    @_builtins.property
    @pulumi.getter(name="mtlsId")
    def mtls_id(self) -> pulumi.Output[_builtins.str]:
        """
        Mtls transaction ID
        """
        return pulumi.get(self, "mtls_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Certificate name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Certificate Updated At
        """
        return pulumi.get(self, "updated_at")

