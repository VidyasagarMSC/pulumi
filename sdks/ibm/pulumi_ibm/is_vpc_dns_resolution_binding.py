# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsVpcDnsResolutionBindingArgs', 'IsVpcDnsResolutionBinding']

@pulumi.input_type
class IsVpcDnsResolutionBindingArgs:
    def __init__(__self__, *,
                 vpc: pulumi.Input['IsVpcDnsResolutionBindingVpcArgs'],
                 vpc_id: pulumi.Input[_builtins.str],
                 is_vpc_dns_resolution_binding_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['IsVpcDnsResolutionBindingTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a IsVpcDnsResolutionBinding resource.
        :param pulumi.Input['IsVpcDnsResolutionBindingVpcArgs'] vpc: The VPC bound to for DNS resolution.The VPC may be remote and therefore may not be directly retrievable.
        :param pulumi.Input[_builtins.str] vpc_id: The VPC identifier.
        :param pulumi.Input[_builtins.str] name: The name for this DNS resolution binding. The name is unique across all DNS resolution bindings for the VPC.
        """
        pulumi.set(__self__, "vpc", vpc)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if is_vpc_dns_resolution_binding_id is not None:
            pulumi.set(__self__, "is_vpc_dns_resolution_binding_id", is_vpc_dns_resolution_binding_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> pulumi.Input['IsVpcDnsResolutionBindingVpcArgs']:
        """
        The VPC bound to for DNS resolution.The VPC may be remote and therefore may not be directly retrievable.
        """
        return pulumi.get(self, "vpc")

    @vpc.setter
    def vpc(self, value: pulumi.Input['IsVpcDnsResolutionBindingVpcArgs']):
        pulumi.set(self, "vpc", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[_builtins.str]:
        """
        The VPC identifier.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vpc_id", value)

    @_builtins.property
    @pulumi.getter(name="isVpcDnsResolutionBindingId")
    def is_vpc_dns_resolution_binding_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_vpc_dns_resolution_binding_id")

    @is_vpc_dns_resolution_binding_id.setter
    def is_vpc_dns_resolution_binding_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_vpc_dns_resolution_binding_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name for this DNS resolution binding. The name is unique across all DNS resolution bindings for the VPC.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsVpcDnsResolutionBindingTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsVpcDnsResolutionBindingTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _IsVpcDnsResolutionBindingState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_gateways: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpcDnsResolutionBindingEndpointGatewayArgs']]]] = None,
                 health_reasons: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpcDnsResolutionBindingHealthReasonArgs']]]] = None,
                 health_state: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 is_vpc_dns_resolution_binding_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['IsVpcDnsResolutionBindingTimeoutsArgs']] = None,
                 vpc: Optional[pulumi.Input['IsVpcDnsResolutionBindingVpcArgs']] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsVpcDnsResolutionBinding resources.
        :param pulumi.Input[_builtins.str] created_at: The date and time that the DNS resolution binding was created.
        :param pulumi.Input[Sequence[pulumi.Input['IsVpcDnsResolutionBindingEndpointGatewayArgs']]] endpoint_gateways: The endpoint gateways in the bound to VPC that are allowed to participate in this DNS resolution binding.The endpoint
               gateways may be remote and therefore may not be directly retrievable.
        :param pulumi.Input[Sequence[pulumi.Input['IsVpcDnsResolutionBindingHealthReasonArgs']]] health_reasons: The reasons for the current `health_state` (if any).The enumerated reason code values for this property will expand in
               the future. When processing this property, check for and log unknown values. Optionally halt processing and surface the
               error, or bypass the resource on which the unexpected reason code was encountered.
        :param pulumi.Input[_builtins.str] health_state: The health of this resource.- `ok`: No abnormal behavior detected- `degraded`: Experiencing compromised performance,
               capacity, or connectivity- `faulted`: Completely unreachable, inoperative, or otherwise entirely incapacitated-
               `inapplicable`: The health state does not apply because of the current lifecycle state. A resource with a lifecycle
               state of `failed` or `deleting` will have a health state of `inapplicable`. A `pending` resource may also have this
               state.
        :param pulumi.Input[_builtins.str] href: The URL for this DNS resolution binding.
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of the DNS resolution binding.
        :param pulumi.Input[_builtins.str] name: The name for this DNS resolution binding. The name is unique across all DNS resolution bindings for the VPC.
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input['IsVpcDnsResolutionBindingVpcArgs'] vpc: The VPC bound to for DNS resolution.The VPC may be remote and therefore may not be directly retrievable.
        :param pulumi.Input[_builtins.str] vpc_id: The VPC identifier.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if endpoint_gateways is not None:
            pulumi.set(__self__, "endpoint_gateways", endpoint_gateways)
        if health_reasons is not None:
            pulumi.set(__self__, "health_reasons", health_reasons)
        if health_state is not None:
            pulumi.set(__self__, "health_state", health_state)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if is_vpc_dns_resolution_binding_id is not None:
            pulumi.set(__self__, "is_vpc_dns_resolution_binding_id", is_vpc_dns_resolution_binding_id)
        if lifecycle_state is not None:
            pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if vpc is not None:
            pulumi.set(__self__, "vpc", vpc)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time that the DNS resolution binding was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="endpointGateways")
    def endpoint_gateways(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsVpcDnsResolutionBindingEndpointGatewayArgs']]]]:
        """
        The endpoint gateways in the bound to VPC that are allowed to participate in this DNS resolution binding.The endpoint
        gateways may be remote and therefore may not be directly retrievable.
        """
        return pulumi.get(self, "endpoint_gateways")

    @endpoint_gateways.setter
    def endpoint_gateways(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpcDnsResolutionBindingEndpointGatewayArgs']]]]):
        pulumi.set(self, "endpoint_gateways", value)

    @_builtins.property
    @pulumi.getter(name="healthReasons")
    def health_reasons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsVpcDnsResolutionBindingHealthReasonArgs']]]]:
        """
        The reasons for the current `health_state` (if any).The enumerated reason code values for this property will expand in
        the future. When processing this property, check for and log unknown values. Optionally halt processing and surface the
        error, or bypass the resource on which the unexpected reason code was encountered.
        """
        return pulumi.get(self, "health_reasons")

    @health_reasons.setter
    def health_reasons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpcDnsResolutionBindingHealthReasonArgs']]]]):
        pulumi.set(self, "health_reasons", value)

    @_builtins.property
    @pulumi.getter(name="healthState")
    def health_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The health of this resource.- `ok`: No abnormal behavior detected- `degraded`: Experiencing compromised performance,
        capacity, or connectivity- `faulted`: Completely unreachable, inoperative, or otherwise entirely incapacitated-
        `inapplicable`: The health state does not apply because of the current lifecycle state. A resource with a lifecycle
        state of `failed` or `deleting` will have a health state of `inapplicable`. A `pending` resource may also have this
        state.
        """
        return pulumi.get(self, "health_state")

    @health_state.setter
    def health_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "health_state", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL for this DNS resolution binding.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="isVpcDnsResolutionBindingId")
    def is_vpc_dns_resolution_binding_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_vpc_dns_resolution_binding_id")

    @is_vpc_dns_resolution_binding_id.setter
    def is_vpc_dns_resolution_binding_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_vpc_dns_resolution_binding_id", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The lifecycle state of the DNS resolution binding.
        """
        return pulumi.get(self, "lifecycle_state")

    @lifecycle_state.setter
    def lifecycle_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lifecycle_state", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name for this DNS resolution binding. The name is unique across all DNS resolution bindings for the VPC.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsVpcDnsResolutionBindingTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsVpcDnsResolutionBindingTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> Optional[pulumi.Input['IsVpcDnsResolutionBindingVpcArgs']]:
        """
        The VPC bound to for DNS resolution.The VPC may be remote and therefore may not be directly retrievable.
        """
        return pulumi.get(self, "vpc")

    @vpc.setter
    def vpc(self, value: Optional[pulumi.Input['IsVpcDnsResolutionBindingVpcArgs']]):
        pulumi.set(self, "vpc", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The VPC identifier.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.type_token("ibm:index/isVpcDnsResolutionBinding:IsVpcDnsResolutionBinding")
class IsVpcDnsResolutionBinding(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 is_vpc_dns_resolution_binding_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsVpcDnsResolutionBindingTimeoutsArgs', 'IsVpcDnsResolutionBindingTimeoutsArgsDict']]] = None,
                 vpc: Optional[pulumi.Input[Union['IsVpcDnsResolutionBindingVpcArgs', 'IsVpcDnsResolutionBindingVpcArgsDict']]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IsVpcDnsResolutionBinding resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: The name for this DNS resolution binding. The name is unique across all DNS resolution bindings for the VPC.
        :param pulumi.Input[Union['IsVpcDnsResolutionBindingVpcArgs', 'IsVpcDnsResolutionBindingVpcArgsDict']] vpc: The VPC bound to for DNS resolution.The VPC may be remote and therefore may not be directly retrievable.
        :param pulumi.Input[_builtins.str] vpc_id: The VPC identifier.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsVpcDnsResolutionBindingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsVpcDnsResolutionBinding resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsVpcDnsResolutionBindingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsVpcDnsResolutionBindingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 is_vpc_dns_resolution_binding_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsVpcDnsResolutionBindingTimeoutsArgs', 'IsVpcDnsResolutionBindingTimeoutsArgsDict']]] = None,
                 vpc: Optional[pulumi.Input[Union['IsVpcDnsResolutionBindingVpcArgs', 'IsVpcDnsResolutionBindingVpcArgsDict']]] = None,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsVpcDnsResolutionBindingArgs.__new__(IsVpcDnsResolutionBindingArgs)

            __props__.__dict__["is_vpc_dns_resolution_binding_id"] = is_vpc_dns_resolution_binding_id
            __props__.__dict__["name"] = name
            __props__.__dict__["timeouts"] = timeouts
            if vpc is None and not opts.urn:
                raise TypeError("Missing required property 'vpc'")
            __props__.__dict__["vpc"] = vpc
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["created_at"] = None
            __props__.__dict__["endpoint_gateways"] = None
            __props__.__dict__["health_reasons"] = None
            __props__.__dict__["health_state"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["lifecycle_state"] = None
            __props__.__dict__["resource_type"] = None
        super(IsVpcDnsResolutionBinding, __self__).__init__(
            'ibm:index/isVpcDnsResolutionBinding:IsVpcDnsResolutionBinding',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            endpoint_gateways: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVpcDnsResolutionBindingEndpointGatewayArgs', 'IsVpcDnsResolutionBindingEndpointGatewayArgsDict']]]]] = None,
            health_reasons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVpcDnsResolutionBindingHealthReasonArgs', 'IsVpcDnsResolutionBindingHealthReasonArgsDict']]]]] = None,
            health_state: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            is_vpc_dns_resolution_binding_id: Optional[pulumi.Input[_builtins.str]] = None,
            lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['IsVpcDnsResolutionBindingTimeoutsArgs', 'IsVpcDnsResolutionBindingTimeoutsArgsDict']]] = None,
            vpc: Optional[pulumi.Input[Union['IsVpcDnsResolutionBindingVpcArgs', 'IsVpcDnsResolutionBindingVpcArgsDict']]] = None,
            vpc_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsVpcDnsResolutionBinding':
        """
        Get an existing IsVpcDnsResolutionBinding resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: The date and time that the DNS resolution binding was created.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsVpcDnsResolutionBindingEndpointGatewayArgs', 'IsVpcDnsResolutionBindingEndpointGatewayArgsDict']]]] endpoint_gateways: The endpoint gateways in the bound to VPC that are allowed to participate in this DNS resolution binding.The endpoint
               gateways may be remote and therefore may not be directly retrievable.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsVpcDnsResolutionBindingHealthReasonArgs', 'IsVpcDnsResolutionBindingHealthReasonArgsDict']]]] health_reasons: The reasons for the current `health_state` (if any).The enumerated reason code values for this property will expand in
               the future. When processing this property, check for and log unknown values. Optionally halt processing and surface the
               error, or bypass the resource on which the unexpected reason code was encountered.
        :param pulumi.Input[_builtins.str] health_state: The health of this resource.- `ok`: No abnormal behavior detected- `degraded`: Experiencing compromised performance,
               capacity, or connectivity- `faulted`: Completely unreachable, inoperative, or otherwise entirely incapacitated-
               `inapplicable`: The health state does not apply because of the current lifecycle state. A resource with a lifecycle
               state of `failed` or `deleting` will have a health state of `inapplicable`. A `pending` resource may also have this
               state.
        :param pulumi.Input[_builtins.str] href: The URL for this DNS resolution binding.
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of the DNS resolution binding.
        :param pulumi.Input[_builtins.str] name: The name for this DNS resolution binding. The name is unique across all DNS resolution bindings for the VPC.
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input[Union['IsVpcDnsResolutionBindingVpcArgs', 'IsVpcDnsResolutionBindingVpcArgsDict']] vpc: The VPC bound to for DNS resolution.The VPC may be remote and therefore may not be directly retrievable.
        :param pulumi.Input[_builtins.str] vpc_id: The VPC identifier.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsVpcDnsResolutionBindingState.__new__(_IsVpcDnsResolutionBindingState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["endpoint_gateways"] = endpoint_gateways
        __props__.__dict__["health_reasons"] = health_reasons
        __props__.__dict__["health_state"] = health_state
        __props__.__dict__["href"] = href
        __props__.__dict__["is_vpc_dns_resolution_binding_id"] = is_vpc_dns_resolution_binding_id
        __props__.__dict__["lifecycle_state"] = lifecycle_state
        __props__.__dict__["name"] = name
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["vpc"] = vpc
        __props__.__dict__["vpc_id"] = vpc_id
        return IsVpcDnsResolutionBinding(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time that the DNS resolution binding was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="endpointGateways")
    def endpoint_gateways(self) -> pulumi.Output[Sequence['outputs.IsVpcDnsResolutionBindingEndpointGateway']]:
        """
        The endpoint gateways in the bound to VPC that are allowed to participate in this DNS resolution binding.The endpoint
        gateways may be remote and therefore may not be directly retrievable.
        """
        return pulumi.get(self, "endpoint_gateways")

    @_builtins.property
    @pulumi.getter(name="healthReasons")
    def health_reasons(self) -> pulumi.Output[Sequence['outputs.IsVpcDnsResolutionBindingHealthReason']]:
        """
        The reasons for the current `health_state` (if any).The enumerated reason code values for this property will expand in
        the future. When processing this property, check for and log unknown values. Optionally halt processing and surface the
        error, or bypass the resource on which the unexpected reason code was encountered.
        """
        return pulumi.get(self, "health_reasons")

    @_builtins.property
    @pulumi.getter(name="healthState")
    def health_state(self) -> pulumi.Output[_builtins.str]:
        """
        The health of this resource.- `ok`: No abnormal behavior detected- `degraded`: Experiencing compromised performance,
        capacity, or connectivity- `faulted`: Completely unreachable, inoperative, or otherwise entirely incapacitated-
        `inapplicable`: The health state does not apply because of the current lifecycle state. A resource with a lifecycle
        state of `failed` or `deleting` will have a health state of `inapplicable`. A `pending` resource may also have this
        state.
        """
        return pulumi.get(self, "health_state")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        The URL for this DNS resolution binding.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="isVpcDnsResolutionBindingId")
    def is_vpc_dns_resolution_binding_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_vpc_dns_resolution_binding_id")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> pulumi.Output[_builtins.str]:
        """
        The lifecycle state of the DNS resolution binding.
        """
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name for this DNS resolution binding. The name is unique across all DNS resolution bindings for the VPC.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IsVpcDnsResolutionBindingTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> pulumi.Output['outputs.IsVpcDnsResolutionBindingVpc']:
        """
        The VPC bound to for DNS resolution.The VPC may be remote and therefore may not be directly retrievable.
        """
        return pulumi.get(self, "vpc")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[_builtins.str]:
        """
        The VPC identifier.
        """
        return pulumi.get(self, "vpc_id")

