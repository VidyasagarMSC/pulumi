# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetBackupRecoverySearchObjectsResult',
    'AwaitableGetBackupRecoverySearchObjectsResult',
    'get_backup_recovery_search_objects',
    'get_backup_recovery_search_objects_output',
]

@pulumi.output_type
class GetBackupRecoverySearchObjectsResult:
    """
    A collection of values returned by getBackupRecoverySearchObjects.
    """
    def __init__(__self__, cluster_identifiers=None, environments=None, external_filters=None, id=None, include_deleted_objects=None, include_helios_tag_info_for_objects=None, is_deleted=None, is_protected=None, last_run_status_lists=None, might_have_snapshot_tag_ids=None, might_have_tag_ids=None, must_have_snapshot_tag_ids=None, must_have_tag_ids=None, object_count=None, object_ids=None, objects=None, os_types=None, pagination_cookie=None, protection_group_ids=None, protection_types=None, request_initiator_type=None, search_string=None, source_ids=None, source_uuids=None, tag_categories=None, tag_names=None, tag_search_name=None, tag_sub_categories=None, tag_types=None, x_ibm_tenant_id=None):
        if cluster_identifiers and not isinstance(cluster_identifiers, list):
            raise TypeError("Expected argument 'cluster_identifiers' to be a list")
        pulumi.set(__self__, "cluster_identifiers", cluster_identifiers)
        if environments and not isinstance(environments, list):
            raise TypeError("Expected argument 'environments' to be a list")
        pulumi.set(__self__, "environments", environments)
        if external_filters and not isinstance(external_filters, list):
            raise TypeError("Expected argument 'external_filters' to be a list")
        pulumi.set(__self__, "external_filters", external_filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if include_deleted_objects and not isinstance(include_deleted_objects, bool):
            raise TypeError("Expected argument 'include_deleted_objects' to be a bool")
        pulumi.set(__self__, "include_deleted_objects", include_deleted_objects)
        if include_helios_tag_info_for_objects and not isinstance(include_helios_tag_info_for_objects, bool):
            raise TypeError("Expected argument 'include_helios_tag_info_for_objects' to be a bool")
        pulumi.set(__self__, "include_helios_tag_info_for_objects", include_helios_tag_info_for_objects)
        if is_deleted and not isinstance(is_deleted, bool):
            raise TypeError("Expected argument 'is_deleted' to be a bool")
        pulumi.set(__self__, "is_deleted", is_deleted)
        if is_protected and not isinstance(is_protected, bool):
            raise TypeError("Expected argument 'is_protected' to be a bool")
        pulumi.set(__self__, "is_protected", is_protected)
        if last_run_status_lists and not isinstance(last_run_status_lists, list):
            raise TypeError("Expected argument 'last_run_status_lists' to be a list")
        pulumi.set(__self__, "last_run_status_lists", last_run_status_lists)
        if might_have_snapshot_tag_ids and not isinstance(might_have_snapshot_tag_ids, list):
            raise TypeError("Expected argument 'might_have_snapshot_tag_ids' to be a list")
        pulumi.set(__self__, "might_have_snapshot_tag_ids", might_have_snapshot_tag_ids)
        if might_have_tag_ids and not isinstance(might_have_tag_ids, list):
            raise TypeError("Expected argument 'might_have_tag_ids' to be a list")
        pulumi.set(__self__, "might_have_tag_ids", might_have_tag_ids)
        if must_have_snapshot_tag_ids and not isinstance(must_have_snapshot_tag_ids, list):
            raise TypeError("Expected argument 'must_have_snapshot_tag_ids' to be a list")
        pulumi.set(__self__, "must_have_snapshot_tag_ids", must_have_snapshot_tag_ids)
        if must_have_tag_ids and not isinstance(must_have_tag_ids, list):
            raise TypeError("Expected argument 'must_have_tag_ids' to be a list")
        pulumi.set(__self__, "must_have_tag_ids", must_have_tag_ids)
        if object_count and not isinstance(object_count, float):
            raise TypeError("Expected argument 'object_count' to be a float")
        pulumi.set(__self__, "object_count", object_count)
        if object_ids and not isinstance(object_ids, list):
            raise TypeError("Expected argument 'object_ids' to be a list")
        pulumi.set(__self__, "object_ids", object_ids)
        if objects and not isinstance(objects, list):
            raise TypeError("Expected argument 'objects' to be a list")
        pulumi.set(__self__, "objects", objects)
        if os_types and not isinstance(os_types, list):
            raise TypeError("Expected argument 'os_types' to be a list")
        pulumi.set(__self__, "os_types", os_types)
        if pagination_cookie and not isinstance(pagination_cookie, str):
            raise TypeError("Expected argument 'pagination_cookie' to be a str")
        pulumi.set(__self__, "pagination_cookie", pagination_cookie)
        if protection_group_ids and not isinstance(protection_group_ids, list):
            raise TypeError("Expected argument 'protection_group_ids' to be a list")
        pulumi.set(__self__, "protection_group_ids", protection_group_ids)
        if protection_types and not isinstance(protection_types, list):
            raise TypeError("Expected argument 'protection_types' to be a list")
        pulumi.set(__self__, "protection_types", protection_types)
        if request_initiator_type and not isinstance(request_initiator_type, str):
            raise TypeError("Expected argument 'request_initiator_type' to be a str")
        pulumi.set(__self__, "request_initiator_type", request_initiator_type)
        if search_string and not isinstance(search_string, str):
            raise TypeError("Expected argument 'search_string' to be a str")
        pulumi.set(__self__, "search_string", search_string)
        if source_ids and not isinstance(source_ids, list):
            raise TypeError("Expected argument 'source_ids' to be a list")
        pulumi.set(__self__, "source_ids", source_ids)
        if source_uuids and not isinstance(source_uuids, list):
            raise TypeError("Expected argument 'source_uuids' to be a list")
        pulumi.set(__self__, "source_uuids", source_uuids)
        if tag_categories and not isinstance(tag_categories, list):
            raise TypeError("Expected argument 'tag_categories' to be a list")
        pulumi.set(__self__, "tag_categories", tag_categories)
        if tag_names and not isinstance(tag_names, list):
            raise TypeError("Expected argument 'tag_names' to be a list")
        pulumi.set(__self__, "tag_names", tag_names)
        if tag_search_name and not isinstance(tag_search_name, str):
            raise TypeError("Expected argument 'tag_search_name' to be a str")
        pulumi.set(__self__, "tag_search_name", tag_search_name)
        if tag_sub_categories and not isinstance(tag_sub_categories, list):
            raise TypeError("Expected argument 'tag_sub_categories' to be a list")
        pulumi.set(__self__, "tag_sub_categories", tag_sub_categories)
        if tag_types and not isinstance(tag_types, list):
            raise TypeError("Expected argument 'tag_types' to be a list")
        pulumi.set(__self__, "tag_types", tag_types)
        if x_ibm_tenant_id and not isinstance(x_ibm_tenant_id, str):
            raise TypeError("Expected argument 'x_ibm_tenant_id' to be a str")
        pulumi.set(__self__, "x_ibm_tenant_id", x_ibm_tenant_id)

    @_builtins.property
    @pulumi.getter(name="clusterIdentifiers")
    def cluster_identifiers(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "cluster_identifiers")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="externalFilters")
    def external_filters(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "external_filters")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="includeDeletedObjects")
    def include_deleted_objects(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "include_deleted_objects")

    @_builtins.property
    @pulumi.getter(name="includeHeliosTagInfoForObjects")
    def include_helios_tag_info_for_objects(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "include_helios_tag_info_for_objects")

    @_builtins.property
    @pulumi.getter(name="isDeleted")
    def is_deleted(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "is_deleted")

    @_builtins.property
    @pulumi.getter(name="isProtected")
    def is_protected(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "is_protected")

    @_builtins.property
    @pulumi.getter(name="lastRunStatusLists")
    def last_run_status_lists(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "last_run_status_lists")

    @_builtins.property
    @pulumi.getter(name="mightHaveSnapshotTagIds")
    def might_have_snapshot_tag_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "might_have_snapshot_tag_ids")

    @_builtins.property
    @pulumi.getter(name="mightHaveTagIds")
    def might_have_tag_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "might_have_tag_ids")

    @_builtins.property
    @pulumi.getter(name="mustHaveSnapshotTagIds")
    def must_have_snapshot_tag_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "must_have_snapshot_tag_ids")

    @_builtins.property
    @pulumi.getter(name="mustHaveTagIds")
    def must_have_tag_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "must_have_tag_ids")

    @_builtins.property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "object_count")

    @_builtins.property
    @pulumi.getter(name="objectIds")
    def object_ids(self) -> Optional[Sequence[_builtins.float]]:
        return pulumi.get(self, "object_ids")

    @_builtins.property
    @pulumi.getter
    def objects(self) -> Sequence['outputs.GetBackupRecoverySearchObjectsObjectResult']:
        return pulumi.get(self, "objects")

    @_builtins.property
    @pulumi.getter(name="osTypes")
    def os_types(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "os_types")

    @_builtins.property
    @pulumi.getter(name="paginationCookie")
    def pagination_cookie(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "pagination_cookie")

    @_builtins.property
    @pulumi.getter(name="protectionGroupIds")
    def protection_group_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "protection_group_ids")

    @_builtins.property
    @pulumi.getter(name="protectionTypes")
    def protection_types(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "protection_types")

    @_builtins.property
    @pulumi.getter(name="requestInitiatorType")
    def request_initiator_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "request_initiator_type")

    @_builtins.property
    @pulumi.getter(name="searchString")
    def search_string(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "search_string")

    @_builtins.property
    @pulumi.getter(name="sourceIds")
    def source_ids(self) -> Optional[Sequence[_builtins.float]]:
        return pulumi.get(self, "source_ids")

    @_builtins.property
    @pulumi.getter(name="sourceUuids")
    def source_uuids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "source_uuids")

    @_builtins.property
    @pulumi.getter(name="tagCategories")
    def tag_categories(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "tag_categories")

    @_builtins.property
    @pulumi.getter(name="tagNames")
    def tag_names(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "tag_names")

    @_builtins.property
    @pulumi.getter(name="tagSearchName")
    def tag_search_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "tag_search_name")

    @_builtins.property
    @pulumi.getter(name="tagSubCategories")
    def tag_sub_categories(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "tag_sub_categories")

    @_builtins.property
    @pulumi.getter(name="tagTypes")
    def tag_types(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "tag_types")

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> _builtins.str:
        return pulumi.get(self, "x_ibm_tenant_id")


class AwaitableGetBackupRecoverySearchObjectsResult(GetBackupRecoverySearchObjectsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupRecoverySearchObjectsResult(
            cluster_identifiers=self.cluster_identifiers,
            environments=self.environments,
            external_filters=self.external_filters,
            id=self.id,
            include_deleted_objects=self.include_deleted_objects,
            include_helios_tag_info_for_objects=self.include_helios_tag_info_for_objects,
            is_deleted=self.is_deleted,
            is_protected=self.is_protected,
            last_run_status_lists=self.last_run_status_lists,
            might_have_snapshot_tag_ids=self.might_have_snapshot_tag_ids,
            might_have_tag_ids=self.might_have_tag_ids,
            must_have_snapshot_tag_ids=self.must_have_snapshot_tag_ids,
            must_have_tag_ids=self.must_have_tag_ids,
            object_count=self.object_count,
            object_ids=self.object_ids,
            objects=self.objects,
            os_types=self.os_types,
            pagination_cookie=self.pagination_cookie,
            protection_group_ids=self.protection_group_ids,
            protection_types=self.protection_types,
            request_initiator_type=self.request_initiator_type,
            search_string=self.search_string,
            source_ids=self.source_ids,
            source_uuids=self.source_uuids,
            tag_categories=self.tag_categories,
            tag_names=self.tag_names,
            tag_search_name=self.tag_search_name,
            tag_sub_categories=self.tag_sub_categories,
            tag_types=self.tag_types,
            x_ibm_tenant_id=self.x_ibm_tenant_id)


def get_backup_recovery_search_objects(cluster_identifiers: Optional[Sequence[_builtins.str]] = None,
                                       environments: Optional[Sequence[_builtins.str]] = None,
                                       external_filters: Optional[Sequence[_builtins.str]] = None,
                                       id: Optional[_builtins.str] = None,
                                       include_deleted_objects: Optional[_builtins.bool] = None,
                                       include_helios_tag_info_for_objects: Optional[_builtins.bool] = None,
                                       is_deleted: Optional[_builtins.bool] = None,
                                       is_protected: Optional[_builtins.bool] = None,
                                       last_run_status_lists: Optional[Sequence[_builtins.str]] = None,
                                       might_have_snapshot_tag_ids: Optional[Sequence[_builtins.str]] = None,
                                       might_have_tag_ids: Optional[Sequence[_builtins.str]] = None,
                                       must_have_snapshot_tag_ids: Optional[Sequence[_builtins.str]] = None,
                                       must_have_tag_ids: Optional[Sequence[_builtins.str]] = None,
                                       object_count: Optional[_builtins.float] = None,
                                       object_ids: Optional[Sequence[_builtins.float]] = None,
                                       os_types: Optional[Sequence[_builtins.str]] = None,
                                       pagination_cookie: Optional[_builtins.str] = None,
                                       protection_group_ids: Optional[Sequence[_builtins.str]] = None,
                                       protection_types: Optional[Sequence[_builtins.str]] = None,
                                       request_initiator_type: Optional[_builtins.str] = None,
                                       search_string: Optional[_builtins.str] = None,
                                       source_ids: Optional[Sequence[_builtins.float]] = None,
                                       source_uuids: Optional[Sequence[_builtins.str]] = None,
                                       tag_categories: Optional[Sequence[_builtins.str]] = None,
                                       tag_names: Optional[Sequence[_builtins.str]] = None,
                                       tag_search_name: Optional[_builtins.str] = None,
                                       tag_sub_categories: Optional[Sequence[_builtins.str]] = None,
                                       tag_types: Optional[Sequence[_builtins.str]] = None,
                                       x_ibm_tenant_id: Optional[_builtins.str] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupRecoverySearchObjectsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clusterIdentifiers'] = cluster_identifiers
    __args__['environments'] = environments
    __args__['externalFilters'] = external_filters
    __args__['id'] = id
    __args__['includeDeletedObjects'] = include_deleted_objects
    __args__['includeHeliosTagInfoForObjects'] = include_helios_tag_info_for_objects
    __args__['isDeleted'] = is_deleted
    __args__['isProtected'] = is_protected
    __args__['lastRunStatusLists'] = last_run_status_lists
    __args__['mightHaveSnapshotTagIds'] = might_have_snapshot_tag_ids
    __args__['mightHaveTagIds'] = might_have_tag_ids
    __args__['mustHaveSnapshotTagIds'] = must_have_snapshot_tag_ids
    __args__['mustHaveTagIds'] = must_have_tag_ids
    __args__['objectCount'] = object_count
    __args__['objectIds'] = object_ids
    __args__['osTypes'] = os_types
    __args__['paginationCookie'] = pagination_cookie
    __args__['protectionGroupIds'] = protection_group_ids
    __args__['protectionTypes'] = protection_types
    __args__['requestInitiatorType'] = request_initiator_type
    __args__['searchString'] = search_string
    __args__['sourceIds'] = source_ids
    __args__['sourceUuids'] = source_uuids
    __args__['tagCategories'] = tag_categories
    __args__['tagNames'] = tag_names
    __args__['tagSearchName'] = tag_search_name
    __args__['tagSubCategories'] = tag_sub_categories
    __args__['tagTypes'] = tag_types
    __args__['xIbmTenantId'] = x_ibm_tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getBackupRecoverySearchObjects:getBackupRecoverySearchObjects', __args__, opts=opts, typ=GetBackupRecoverySearchObjectsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetBackupRecoverySearchObjectsResult(
        cluster_identifiers=pulumi.get(__ret__, 'cluster_identifiers'),
        environments=pulumi.get(__ret__, 'environments'),
        external_filters=pulumi.get(__ret__, 'external_filters'),
        id=pulumi.get(__ret__, 'id'),
        include_deleted_objects=pulumi.get(__ret__, 'include_deleted_objects'),
        include_helios_tag_info_for_objects=pulumi.get(__ret__, 'include_helios_tag_info_for_objects'),
        is_deleted=pulumi.get(__ret__, 'is_deleted'),
        is_protected=pulumi.get(__ret__, 'is_protected'),
        last_run_status_lists=pulumi.get(__ret__, 'last_run_status_lists'),
        might_have_snapshot_tag_ids=pulumi.get(__ret__, 'might_have_snapshot_tag_ids'),
        might_have_tag_ids=pulumi.get(__ret__, 'might_have_tag_ids'),
        must_have_snapshot_tag_ids=pulumi.get(__ret__, 'must_have_snapshot_tag_ids'),
        must_have_tag_ids=pulumi.get(__ret__, 'must_have_tag_ids'),
        object_count=pulumi.get(__ret__, 'object_count'),
        object_ids=pulumi.get(__ret__, 'object_ids'),
        objects=pulumi.get(__ret__, 'objects'),
        os_types=pulumi.get(__ret__, 'os_types'),
        pagination_cookie=pulumi.get(__ret__, 'pagination_cookie'),
        protection_group_ids=pulumi.get(__ret__, 'protection_group_ids'),
        protection_types=pulumi.get(__ret__, 'protection_types'),
        request_initiator_type=pulumi.get(__ret__, 'request_initiator_type'),
        search_string=pulumi.get(__ret__, 'search_string'),
        source_ids=pulumi.get(__ret__, 'source_ids'),
        source_uuids=pulumi.get(__ret__, 'source_uuids'),
        tag_categories=pulumi.get(__ret__, 'tag_categories'),
        tag_names=pulumi.get(__ret__, 'tag_names'),
        tag_search_name=pulumi.get(__ret__, 'tag_search_name'),
        tag_sub_categories=pulumi.get(__ret__, 'tag_sub_categories'),
        tag_types=pulumi.get(__ret__, 'tag_types'),
        x_ibm_tenant_id=pulumi.get(__ret__, 'x_ibm_tenant_id'))
def get_backup_recovery_search_objects_output(cluster_identifiers: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                              environments: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                              external_filters: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                              id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              include_deleted_objects: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                              include_helios_tag_info_for_objects: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                              is_deleted: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                              is_protected: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                              last_run_status_lists: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                              might_have_snapshot_tag_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                              might_have_tag_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                              must_have_snapshot_tag_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                              must_have_tag_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                              object_count: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                                              object_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.float]]]] = None,
                                              os_types: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                              pagination_cookie: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              protection_group_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                              protection_types: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                              request_initiator_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              search_string: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              source_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.float]]]] = None,
                                              source_uuids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                              tag_categories: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                              tag_names: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                              tag_search_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              tag_sub_categories: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                              tag_types: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                              x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBackupRecoverySearchObjectsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clusterIdentifiers'] = cluster_identifiers
    __args__['environments'] = environments
    __args__['externalFilters'] = external_filters
    __args__['id'] = id
    __args__['includeDeletedObjects'] = include_deleted_objects
    __args__['includeHeliosTagInfoForObjects'] = include_helios_tag_info_for_objects
    __args__['isDeleted'] = is_deleted
    __args__['isProtected'] = is_protected
    __args__['lastRunStatusLists'] = last_run_status_lists
    __args__['mightHaveSnapshotTagIds'] = might_have_snapshot_tag_ids
    __args__['mightHaveTagIds'] = might_have_tag_ids
    __args__['mustHaveSnapshotTagIds'] = must_have_snapshot_tag_ids
    __args__['mustHaveTagIds'] = must_have_tag_ids
    __args__['objectCount'] = object_count
    __args__['objectIds'] = object_ids
    __args__['osTypes'] = os_types
    __args__['paginationCookie'] = pagination_cookie
    __args__['protectionGroupIds'] = protection_group_ids
    __args__['protectionTypes'] = protection_types
    __args__['requestInitiatorType'] = request_initiator_type
    __args__['searchString'] = search_string
    __args__['sourceIds'] = source_ids
    __args__['sourceUuids'] = source_uuids
    __args__['tagCategories'] = tag_categories
    __args__['tagNames'] = tag_names
    __args__['tagSearchName'] = tag_search_name
    __args__['tagSubCategories'] = tag_sub_categories
    __args__['tagTypes'] = tag_types
    __args__['xIbmTenantId'] = x_ibm_tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getBackupRecoverySearchObjects:getBackupRecoverySearchObjects', __args__, opts=opts, typ=GetBackupRecoverySearchObjectsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetBackupRecoverySearchObjectsResult(
        cluster_identifiers=pulumi.get(__response__, 'cluster_identifiers'),
        environments=pulumi.get(__response__, 'environments'),
        external_filters=pulumi.get(__response__, 'external_filters'),
        id=pulumi.get(__response__, 'id'),
        include_deleted_objects=pulumi.get(__response__, 'include_deleted_objects'),
        include_helios_tag_info_for_objects=pulumi.get(__response__, 'include_helios_tag_info_for_objects'),
        is_deleted=pulumi.get(__response__, 'is_deleted'),
        is_protected=pulumi.get(__response__, 'is_protected'),
        last_run_status_lists=pulumi.get(__response__, 'last_run_status_lists'),
        might_have_snapshot_tag_ids=pulumi.get(__response__, 'might_have_snapshot_tag_ids'),
        might_have_tag_ids=pulumi.get(__response__, 'might_have_tag_ids'),
        must_have_snapshot_tag_ids=pulumi.get(__response__, 'must_have_snapshot_tag_ids'),
        must_have_tag_ids=pulumi.get(__response__, 'must_have_tag_ids'),
        object_count=pulumi.get(__response__, 'object_count'),
        object_ids=pulumi.get(__response__, 'object_ids'),
        objects=pulumi.get(__response__, 'objects'),
        os_types=pulumi.get(__response__, 'os_types'),
        pagination_cookie=pulumi.get(__response__, 'pagination_cookie'),
        protection_group_ids=pulumi.get(__response__, 'protection_group_ids'),
        protection_types=pulumi.get(__response__, 'protection_types'),
        request_initiator_type=pulumi.get(__response__, 'request_initiator_type'),
        search_string=pulumi.get(__response__, 'search_string'),
        source_ids=pulumi.get(__response__, 'source_ids'),
        source_uuids=pulumi.get(__response__, 'source_uuids'),
        tag_categories=pulumi.get(__response__, 'tag_categories'),
        tag_names=pulumi.get(__response__, 'tag_names'),
        tag_search_name=pulumi.get(__response__, 'tag_search_name'),
        tag_sub_categories=pulumi.get(__response__, 'tag_sub_categories'),
        tag_types=pulumi.get(__response__, 'tag_types'),
        x_ibm_tenant_id=pulumi.get(__response__, 'x_ibm_tenant_id')))
