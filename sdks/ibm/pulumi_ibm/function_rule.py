# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['FunctionRuleArgs', 'FunctionRule']

@pulumi.input_type
class FunctionRuleArgs:
    def __init__(__self__, *,
                 action_name: pulumi.Input[_builtins.str],
                 namespace: pulumi.Input[_builtins.str],
                 trigger_name: pulumi.Input[_builtins.str],
                 function_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a FunctionRule resource.
        :param pulumi.Input[_builtins.str] action_name: Name of action.
        :param pulumi.Input[_builtins.str] namespace: IBM Cloud function namespace.
        :param pulumi.Input[_builtins.str] trigger_name: Name of trigger.
        :param pulumi.Input[_builtins.str] name: Name of rule.
        """
        pulumi.set(__self__, "action_name", action_name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "trigger_name", trigger_name)
        if function_rule_id is not None:
            pulumi.set(__self__, "function_rule_id", function_rule_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="actionName")
    def action_name(self) -> pulumi.Input[_builtins.str]:
        """
        Name of action.
        """
        return pulumi.get(self, "action_name")

    @action_name.setter
    def action_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "action_name", value)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[_builtins.str]:
        """
        IBM Cloud function namespace.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter(name="triggerName")
    def trigger_name(self) -> pulumi.Input[_builtins.str]:
        """
        Name of trigger.
        """
        return pulumi.get(self, "trigger_name")

    @trigger_name.setter
    def trigger_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "trigger_name", value)

    @_builtins.property
    @pulumi.getter(name="functionRuleId")
    def function_rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "function_rule_id")

    @function_rule_id.setter
    def function_rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "function_rule_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _FunctionRuleState:
    def __init__(__self__, *,
                 action_name: Optional[pulumi.Input[_builtins.str]] = None,
                 function_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 publish: Optional[pulumi.Input[_builtins.bool]] = None,
                 rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 trigger_name: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering FunctionRule resources.
        :param pulumi.Input[_builtins.str] action_name: Name of action.
        :param pulumi.Input[_builtins.str] name: Name of rule.
        :param pulumi.Input[_builtins.str] namespace: IBM Cloud function namespace.
        :param pulumi.Input[_builtins.bool] publish: Rule visbility.
        :param pulumi.Input[_builtins.str] status: Status of the rule.
        :param pulumi.Input[_builtins.str] trigger_name: Name of trigger.
        :param pulumi.Input[_builtins.str] version: Semantic version of the item.
        """
        if action_name is not None:
            pulumi.set(__self__, "action_name", action_name)
        if function_rule_id is not None:
            pulumi.set(__self__, "function_rule_id", function_rule_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if publish is not None:
            pulumi.set(__self__, "publish", publish)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if trigger_name is not None:
            pulumi.set(__self__, "trigger_name", trigger_name)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="actionName")
    def action_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of action.
        """
        return pulumi.get(self, "action_name")

    @action_name.setter
    def action_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action_name", value)

    @_builtins.property
    @pulumi.getter(name="functionRuleId")
    def function_rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "function_rule_id")

    @function_rule_id.setter
    def function_rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "function_rule_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IBM Cloud function namespace.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter
    def publish(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Rule visbility.
        """
        return pulumi.get(self, "publish")

    @publish.setter
    def publish(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "publish", value)

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rule_id", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Status of the rule.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="triggerName")
    def trigger_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of trigger.
        """
        return pulumi.get(self, "trigger_name")

    @trigger_name.setter
    def trigger_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "trigger_name", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Semantic version of the item.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


@pulumi.type_token("ibm:index/functionRule:FunctionRule")
class FunctionRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action_name: Optional[pulumi.Input[_builtins.str]] = None,
                 function_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 trigger_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a FunctionRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action_name: Name of action.
        :param pulumi.Input[_builtins.str] name: Name of rule.
        :param pulumi.Input[_builtins.str] namespace: IBM Cloud function namespace.
        :param pulumi.Input[_builtins.str] trigger_name: Name of trigger.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FunctionRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a FunctionRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param FunctionRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FunctionRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action_name: Optional[pulumi.Input[_builtins.str]] = None,
                 function_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 trigger_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FunctionRuleArgs.__new__(FunctionRuleArgs)

            if action_name is None and not opts.urn:
                raise TypeError("Missing required property 'action_name'")
            __props__.__dict__["action_name"] = action_name
            __props__.__dict__["function_rule_id"] = function_rule_id
            __props__.__dict__["name"] = name
            if namespace is None and not opts.urn:
                raise TypeError("Missing required property 'namespace'")
            __props__.__dict__["namespace"] = namespace
            if trigger_name is None and not opts.urn:
                raise TypeError("Missing required property 'trigger_name'")
            __props__.__dict__["trigger_name"] = trigger_name
            __props__.__dict__["publish"] = None
            __props__.__dict__["rule_id"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["version"] = None
        super(FunctionRule, __self__).__init__(
            'ibm:index/functionRule:FunctionRule',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action_name: Optional[pulumi.Input[_builtins.str]] = None,
            function_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            namespace: Optional[pulumi.Input[_builtins.str]] = None,
            publish: Optional[pulumi.Input[_builtins.bool]] = None,
            rule_id: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            trigger_name: Optional[pulumi.Input[_builtins.str]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None) -> 'FunctionRule':
        """
        Get an existing FunctionRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action_name: Name of action.
        :param pulumi.Input[_builtins.str] name: Name of rule.
        :param pulumi.Input[_builtins.str] namespace: IBM Cloud function namespace.
        :param pulumi.Input[_builtins.bool] publish: Rule visbility.
        :param pulumi.Input[_builtins.str] status: Status of the rule.
        :param pulumi.Input[_builtins.str] trigger_name: Name of trigger.
        :param pulumi.Input[_builtins.str] version: Semantic version of the item.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FunctionRuleState.__new__(_FunctionRuleState)

        __props__.__dict__["action_name"] = action_name
        __props__.__dict__["function_rule_id"] = function_rule_id
        __props__.__dict__["name"] = name
        __props__.__dict__["namespace"] = namespace
        __props__.__dict__["publish"] = publish
        __props__.__dict__["rule_id"] = rule_id
        __props__.__dict__["status"] = status
        __props__.__dict__["trigger_name"] = trigger_name
        __props__.__dict__["version"] = version
        return FunctionRule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="actionName")
    def action_name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of action.
        """
        return pulumi.get(self, "action_name")

    @_builtins.property
    @pulumi.getter(name="functionRuleId")
    def function_rule_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "function_rule_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of rule.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[_builtins.str]:
        """
        IBM Cloud function namespace.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def publish(self) -> pulumi.Output[_builtins.bool]:
        """
        Rule visbility.
        """
        return pulumi.get(self, "publish")

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "rule_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Status of the rule.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="triggerName")
    def trigger_name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of trigger.
        """
        return pulumi.get(self, "trigger_name")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.str]:
        """
        Semantic version of the item.
        """
        return pulumi.get(self, "version")

