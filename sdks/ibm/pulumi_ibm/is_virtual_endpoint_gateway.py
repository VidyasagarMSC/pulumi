# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsVirtualEndpointGatewayArgs', 'IsVirtualEndpointGateway']

@pulumi.input_type
class IsVirtualEndpointGatewayArgs:
    def __init__(__self__, *,
                 target: pulumi.Input['IsVirtualEndpointGatewayTargetArgs'],
                 vpc: pulumi.Input[_builtins.str],
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 allow_dns_resolution_binding: Optional[pulumi.Input[_builtins.bool]] = None,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input['IsVirtualEndpointGatewayIpArgs']]]] = None,
                 is_virtual_endpoint_gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['IsVirtualEndpointGatewayTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a IsVirtualEndpointGateway resource.
        :param pulumi.Input['IsVirtualEndpointGatewayTargetArgs'] target: Endpoint gateway target
        :param pulumi.Input[_builtins.str] vpc: The VPC id
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.bool] allow_dns_resolution_binding: Indicates whether to allow this endpoint gateway to participate in DNS resolution bindings with a VPC that has
               dns.enable_hub set to true.
        :param pulumi.Input[Sequence[pulumi.Input['IsVirtualEndpointGatewayIpArgs']]] ips: Endpoint gateway IPs
        :param pulumi.Input[_builtins.str] name: Endpoint gateway name
        :param pulumi.Input[_builtins.str] resource_group: The resource group id
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: Endpoint gateway securitygroups list
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags for VPE
        """
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "vpc", vpc)
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if allow_dns_resolution_binding is not None:
            pulumi.set(__self__, "allow_dns_resolution_binding", allow_dns_resolution_binding)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if is_virtual_endpoint_gateway_id is not None:
            pulumi.set(__self__, "is_virtual_endpoint_gateway_id", is_virtual_endpoint_gateway_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def target(self) -> pulumi.Input['IsVirtualEndpointGatewayTargetArgs']:
        """
        Endpoint gateway target
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input['IsVirtualEndpointGatewayTargetArgs']):
        pulumi.set(self, "target", value)

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> pulumi.Input[_builtins.str]:
        """
        The VPC id
        """
        return pulumi.get(self, "vpc")

    @vpc.setter
    def vpc(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vpc", value)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter(name="allowDnsResolutionBinding")
    def allow_dns_resolution_binding(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether to allow this endpoint gateway to participate in DNS resolution bindings with a VPC that has
        dns.enable_hub set to true.
        """
        return pulumi.get(self, "allow_dns_resolution_binding")

    @allow_dns_resolution_binding.setter
    def allow_dns_resolution_binding(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_dns_resolution_binding", value)

    @_builtins.property
    @pulumi.getter
    def ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsVirtualEndpointGatewayIpArgs']]]]:
        """
        Endpoint gateway IPs
        """
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsVirtualEndpointGatewayIpArgs']]]]):
        pulumi.set(self, "ips", value)

    @_builtins.property
    @pulumi.getter(name="isVirtualEndpointGatewayId")
    def is_virtual_endpoint_gateway_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_virtual_endpoint_gateway_id")

    @is_virtual_endpoint_gateway_id.setter
    def is_virtual_endpoint_gateway_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_virtual_endpoint_gateway_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Endpoint gateway name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource group id
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Endpoint gateway securitygroups list
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_groups", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags for VPE
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsVirtualEndpointGatewayTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsVirtualEndpointGatewayTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _IsVirtualEndpointGatewayState:
    def __init__(__self__, *,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 allow_dns_resolution_binding: Optional[pulumi.Input[_builtins.bool]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 health_state: Optional[pulumi.Input[_builtins.str]] = None,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input['IsVirtualEndpointGatewayIpArgs']]]] = None,
                 is_virtual_endpoint_gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lifecycle_reasons: Optional[pulumi.Input[Sequence[pulumi.Input['IsVirtualEndpointGatewayLifecycleReasonArgs']]]] = None,
                 lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 service_endpoints: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 target: Optional[pulumi.Input['IsVirtualEndpointGatewayTargetArgs']] = None,
                 timeouts: Optional[pulumi.Input['IsVirtualEndpointGatewayTimeoutsArgs']] = None,
                 vpc: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsVirtualEndpointGateway resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.bool] allow_dns_resolution_binding: Indicates whether to allow this endpoint gateway to participate in DNS resolution bindings with a VPC that has
               dns.enable_hub set to true.
        :param pulumi.Input[_builtins.str] created_at: Endpoint gateway created date and time
        :param pulumi.Input[_builtins.str] crn: The CRN for this Endpoint gateway
        :param pulumi.Input[_builtins.str] health_state: Endpoint gateway health state
        :param pulumi.Input[Sequence[pulumi.Input['IsVirtualEndpointGatewayIpArgs']]] ips: Endpoint gateway IPs
        :param pulumi.Input[Sequence[pulumi.Input['IsVirtualEndpointGatewayLifecycleReasonArgs']]] lifecycle_reasons: The reasons for the current lifecycle_state (if any).
        :param pulumi.Input[_builtins.str] lifecycle_state: Endpoint gateway lifecycle state
        :param pulumi.Input[_builtins.str] name: Endpoint gateway name
        :param pulumi.Input[_builtins.str] resource_group: The resource group id
        :param pulumi.Input[_builtins.str] resource_type: Endpoint gateway resource type
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: Endpoint gateway securitygroups list
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] service_endpoints: The fully qualified domain names for the target service. A fully qualified domain name for the target service
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags for VPE
        :param pulumi.Input['IsVirtualEndpointGatewayTargetArgs'] target: Endpoint gateway target
        :param pulumi.Input[_builtins.str] vpc: The VPC id
        """
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if allow_dns_resolution_binding is not None:
            pulumi.set(__self__, "allow_dns_resolution_binding", allow_dns_resolution_binding)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if health_state is not None:
            pulumi.set(__self__, "health_state", health_state)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if is_virtual_endpoint_gateway_id is not None:
            pulumi.set(__self__, "is_virtual_endpoint_gateway_id", is_virtual_endpoint_gateway_id)
        if lifecycle_reasons is not None:
            pulumi.set(__self__, "lifecycle_reasons", lifecycle_reasons)
        if lifecycle_state is not None:
            pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if service_endpoints is not None:
            pulumi.set(__self__, "service_endpoints", service_endpoints)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if vpc is not None:
            pulumi.set(__self__, "vpc", vpc)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter(name="allowDnsResolutionBinding")
    def allow_dns_resolution_binding(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether to allow this endpoint gateway to participate in DNS resolution bindings with a VPC that has
        dns.enable_hub set to true.
        """
        return pulumi.get(self, "allow_dns_resolution_binding")

    @allow_dns_resolution_binding.setter
    def allow_dns_resolution_binding(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_dns_resolution_binding", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Endpoint gateway created date and time
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN for this Endpoint gateway
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="healthState")
    def health_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Endpoint gateway health state
        """
        return pulumi.get(self, "health_state")

    @health_state.setter
    def health_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "health_state", value)

    @_builtins.property
    @pulumi.getter
    def ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsVirtualEndpointGatewayIpArgs']]]]:
        """
        Endpoint gateway IPs
        """
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsVirtualEndpointGatewayIpArgs']]]]):
        pulumi.set(self, "ips", value)

    @_builtins.property
    @pulumi.getter(name="isVirtualEndpointGatewayId")
    def is_virtual_endpoint_gateway_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_virtual_endpoint_gateway_id")

    @is_virtual_endpoint_gateway_id.setter
    def is_virtual_endpoint_gateway_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_virtual_endpoint_gateway_id", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleReasons")
    def lifecycle_reasons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsVirtualEndpointGatewayLifecycleReasonArgs']]]]:
        """
        The reasons for the current lifecycle_state (if any).
        """
        return pulumi.get(self, "lifecycle_reasons")

    @lifecycle_reasons.setter
    def lifecycle_reasons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsVirtualEndpointGatewayLifecycleReasonArgs']]]]):
        pulumi.set(self, "lifecycle_reasons", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Endpoint gateway lifecycle state
        """
        return pulumi.get(self, "lifecycle_state")

    @lifecycle_state.setter
    def lifecycle_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lifecycle_state", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Endpoint gateway name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource group id
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Endpoint gateway resource type
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Endpoint gateway securitygroups list
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_groups", value)

    @_builtins.property
    @pulumi.getter(name="serviceEndpoints")
    def service_endpoints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The fully qualified domain names for the target service. A fully qualified domain name for the target service
        """
        return pulumi.get(self, "service_endpoints")

    @service_endpoints.setter
    def service_endpoints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "service_endpoints", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags for VPE
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input['IsVirtualEndpointGatewayTargetArgs']]:
        """
        Endpoint gateway target
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input['IsVirtualEndpointGatewayTargetArgs']]):
        pulumi.set(self, "target", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsVirtualEndpointGatewayTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsVirtualEndpointGatewayTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The VPC id
        """
        return pulumi.get(self, "vpc")

    @vpc.setter
    def vpc(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc", value)


@pulumi.type_token("ibm:index/isVirtualEndpointGateway:IsVirtualEndpointGateway")
class IsVirtualEndpointGateway(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 allow_dns_resolution_binding: Optional[pulumi.Input[_builtins.bool]] = None,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVirtualEndpointGatewayIpArgs', 'IsVirtualEndpointGatewayIpArgsDict']]]]] = None,
                 is_virtual_endpoint_gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 target: Optional[pulumi.Input[Union['IsVirtualEndpointGatewayTargetArgs', 'IsVirtualEndpointGatewayTargetArgsDict']]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsVirtualEndpointGatewayTimeoutsArgs', 'IsVirtualEndpointGatewayTimeoutsArgsDict']]] = None,
                 vpc: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IsVirtualEndpointGateway resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.bool] allow_dns_resolution_binding: Indicates whether to allow this endpoint gateway to participate in DNS resolution bindings with a VPC that has
               dns.enable_hub set to true.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsVirtualEndpointGatewayIpArgs', 'IsVirtualEndpointGatewayIpArgsDict']]]] ips: Endpoint gateway IPs
        :param pulumi.Input[_builtins.str] name: Endpoint gateway name
        :param pulumi.Input[_builtins.str] resource_group: The resource group id
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: Endpoint gateway securitygroups list
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags for VPE
        :param pulumi.Input[Union['IsVirtualEndpointGatewayTargetArgs', 'IsVirtualEndpointGatewayTargetArgsDict']] target: Endpoint gateway target
        :param pulumi.Input[_builtins.str] vpc: The VPC id
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsVirtualEndpointGatewayArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsVirtualEndpointGateway resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsVirtualEndpointGatewayArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsVirtualEndpointGatewayArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 allow_dns_resolution_binding: Optional[pulumi.Input[_builtins.bool]] = None,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVirtualEndpointGatewayIpArgs', 'IsVirtualEndpointGatewayIpArgsDict']]]]] = None,
                 is_virtual_endpoint_gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 target: Optional[pulumi.Input[Union['IsVirtualEndpointGatewayTargetArgs', 'IsVirtualEndpointGatewayTargetArgsDict']]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsVirtualEndpointGatewayTimeoutsArgs', 'IsVirtualEndpointGatewayTimeoutsArgsDict']]] = None,
                 vpc: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsVirtualEndpointGatewayArgs.__new__(IsVirtualEndpointGatewayArgs)

            __props__.__dict__["access_tags"] = access_tags
            __props__.__dict__["allow_dns_resolution_binding"] = allow_dns_resolution_binding
            __props__.__dict__["ips"] = ips
            __props__.__dict__["is_virtual_endpoint_gateway_id"] = is_virtual_endpoint_gateway_id
            __props__.__dict__["name"] = name
            __props__.__dict__["resource_group"] = resource_group
            __props__.__dict__["security_groups"] = security_groups
            __props__.__dict__["tags"] = tags
            if target is None and not opts.urn:
                raise TypeError("Missing required property 'target'")
            __props__.__dict__["target"] = target
            __props__.__dict__["timeouts"] = timeouts
            if vpc is None and not opts.urn:
                raise TypeError("Missing required property 'vpc'")
            __props__.__dict__["vpc"] = vpc
            __props__.__dict__["created_at"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["health_state"] = None
            __props__.__dict__["lifecycle_reasons"] = None
            __props__.__dict__["lifecycle_state"] = None
            __props__.__dict__["resource_type"] = None
            __props__.__dict__["service_endpoints"] = None
        super(IsVirtualEndpointGateway, __self__).__init__(
            'ibm:index/isVirtualEndpointGateway:IsVirtualEndpointGateway',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            allow_dns_resolution_binding: Optional[pulumi.Input[_builtins.bool]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            health_state: Optional[pulumi.Input[_builtins.str]] = None,
            ips: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVirtualEndpointGatewayIpArgs', 'IsVirtualEndpointGatewayIpArgsDict']]]]] = None,
            is_virtual_endpoint_gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
            lifecycle_reasons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVirtualEndpointGatewayLifecycleReasonArgs', 'IsVirtualEndpointGatewayLifecycleReasonArgsDict']]]]] = None,
            lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group: Optional[pulumi.Input[_builtins.str]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            service_endpoints: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            target: Optional[pulumi.Input[Union['IsVirtualEndpointGatewayTargetArgs', 'IsVirtualEndpointGatewayTargetArgsDict']]] = None,
            timeouts: Optional[pulumi.Input[Union['IsVirtualEndpointGatewayTimeoutsArgs', 'IsVirtualEndpointGatewayTimeoutsArgsDict']]] = None,
            vpc: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsVirtualEndpointGateway':
        """
        Get an existing IsVirtualEndpointGateway resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.bool] allow_dns_resolution_binding: Indicates whether to allow this endpoint gateway to participate in DNS resolution bindings with a VPC that has
               dns.enable_hub set to true.
        :param pulumi.Input[_builtins.str] created_at: Endpoint gateway created date and time
        :param pulumi.Input[_builtins.str] crn: The CRN for this Endpoint gateway
        :param pulumi.Input[_builtins.str] health_state: Endpoint gateway health state
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsVirtualEndpointGatewayIpArgs', 'IsVirtualEndpointGatewayIpArgsDict']]]] ips: Endpoint gateway IPs
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsVirtualEndpointGatewayLifecycleReasonArgs', 'IsVirtualEndpointGatewayLifecycleReasonArgsDict']]]] lifecycle_reasons: The reasons for the current lifecycle_state (if any).
        :param pulumi.Input[_builtins.str] lifecycle_state: Endpoint gateway lifecycle state
        :param pulumi.Input[_builtins.str] name: Endpoint gateway name
        :param pulumi.Input[_builtins.str] resource_group: The resource group id
        :param pulumi.Input[_builtins.str] resource_type: Endpoint gateway resource type
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: Endpoint gateway securitygroups list
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] service_endpoints: The fully qualified domain names for the target service. A fully qualified domain name for the target service
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags for VPE
        :param pulumi.Input[Union['IsVirtualEndpointGatewayTargetArgs', 'IsVirtualEndpointGatewayTargetArgsDict']] target: Endpoint gateway target
        :param pulumi.Input[_builtins.str] vpc: The VPC id
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsVirtualEndpointGatewayState.__new__(_IsVirtualEndpointGatewayState)

        __props__.__dict__["access_tags"] = access_tags
        __props__.__dict__["allow_dns_resolution_binding"] = allow_dns_resolution_binding
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["crn"] = crn
        __props__.__dict__["health_state"] = health_state
        __props__.__dict__["ips"] = ips
        __props__.__dict__["is_virtual_endpoint_gateway_id"] = is_virtual_endpoint_gateway_id
        __props__.__dict__["lifecycle_reasons"] = lifecycle_reasons
        __props__.__dict__["lifecycle_state"] = lifecycle_state
        __props__.__dict__["name"] = name
        __props__.__dict__["resource_group"] = resource_group
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["security_groups"] = security_groups
        __props__.__dict__["service_endpoints"] = service_endpoints
        __props__.__dict__["tags"] = tags
        __props__.__dict__["target"] = target
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["vpc"] = vpc
        return IsVirtualEndpointGateway(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter(name="allowDnsResolutionBinding")
    def allow_dns_resolution_binding(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether to allow this endpoint gateway to participate in DNS resolution bindings with a VPC that has
        dns.enable_hub set to true.
        """
        return pulumi.get(self, "allow_dns_resolution_binding")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Endpoint gateway created date and time
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The CRN for this Endpoint gateway
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="healthState")
    def health_state(self) -> pulumi.Output[_builtins.str]:
        """
        Endpoint gateway health state
        """
        return pulumi.get(self, "health_state")

    @_builtins.property
    @pulumi.getter
    def ips(self) -> pulumi.Output[Optional[Sequence['outputs.IsVirtualEndpointGatewayIp']]]:
        """
        Endpoint gateway IPs
        """
        return pulumi.get(self, "ips")

    @_builtins.property
    @pulumi.getter(name="isVirtualEndpointGatewayId")
    def is_virtual_endpoint_gateway_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_virtual_endpoint_gateway_id")

    @_builtins.property
    @pulumi.getter(name="lifecycleReasons")
    def lifecycle_reasons(self) -> pulumi.Output[Sequence['outputs.IsVirtualEndpointGatewayLifecycleReason']]:
        """
        The reasons for the current lifecycle_state (if any).
        """
        return pulumi.get(self, "lifecycle_reasons")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> pulumi.Output[_builtins.str]:
        """
        Endpoint gateway lifecycle state
        """
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Endpoint gateway name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Output[_builtins.str]:
        """
        The resource group id
        """
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        Endpoint gateway resource type
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Endpoint gateway securitygroups list
        """
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter(name="serviceEndpoints")
    def service_endpoints(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The fully qualified domain names for the target service. A fully qualified domain name for the target service
        """
        return pulumi.get(self, "service_endpoints")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of tags for VPE
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def target(self) -> pulumi.Output['outputs.IsVirtualEndpointGatewayTarget']:
        """
        Endpoint gateway target
        """
        return pulumi.get(self, "target")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IsVirtualEndpointGatewayTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> pulumi.Output[_builtins.str]:
        """
        The VPC id
        """
        return pulumi.get(self, "vpc")

