# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetIsInstanceGroupManagerPolicyResult',
    'AwaitableGetIsInstanceGroupManagerPolicyResult',
    'get_is_instance_group_manager_policy',
    'get_is_instance_group_manager_policy_output',
]

@pulumi.output_type
class GetIsInstanceGroupManagerPolicyResult:
    """
    A collection of values returned by getIsInstanceGroupManagerPolicy.
    """
    def __init__(__self__, id=None, instance_group=None, instance_group_manager=None, metric_type=None, metric_value=None, name=None, policy_id=None, policy_type=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_group and not isinstance(instance_group, str):
            raise TypeError("Expected argument 'instance_group' to be a str")
        pulumi.set(__self__, "instance_group", instance_group)
        if instance_group_manager and not isinstance(instance_group_manager, str):
            raise TypeError("Expected argument 'instance_group_manager' to be a str")
        pulumi.set(__self__, "instance_group_manager", instance_group_manager)
        if metric_type and not isinstance(metric_type, str):
            raise TypeError("Expected argument 'metric_type' to be a str")
        pulumi.set(__self__, "metric_type", metric_type)
        if metric_value and not isinstance(metric_value, float):
            raise TypeError("Expected argument 'metric_value' to be a float")
        pulumi.set(__self__, "metric_value", metric_value)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if policy_id and not isinstance(policy_id, str):
            raise TypeError("Expected argument 'policy_id' to be a str")
        pulumi.set(__self__, "policy_id", policy_id)
        if policy_type and not isinstance(policy_type, str):
            raise TypeError("Expected argument 'policy_type' to be a str")
        pulumi.set(__self__, "policy_type", policy_type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceGroup")
    def instance_group(self) -> _builtins.str:
        return pulumi.get(self, "instance_group")

    @_builtins.property
    @pulumi.getter(name="instanceGroupManager")
    def instance_group_manager(self) -> _builtins.str:
        return pulumi.get(self, "instance_group_manager")

    @_builtins.property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> _builtins.str:
        return pulumi.get(self, "metric_type")

    @_builtins.property
    @pulumi.getter(name="metricValue")
    def metric_value(self) -> _builtins.float:
        return pulumi.get(self, "metric_value")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> _builtins.str:
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> _builtins.str:
        return pulumi.get(self, "policy_type")


class AwaitableGetIsInstanceGroupManagerPolicyResult(GetIsInstanceGroupManagerPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsInstanceGroupManagerPolicyResult(
            id=self.id,
            instance_group=self.instance_group,
            instance_group_manager=self.instance_group_manager,
            metric_type=self.metric_type,
            metric_value=self.metric_value,
            name=self.name,
            policy_id=self.policy_id,
            policy_type=self.policy_type)


def get_is_instance_group_manager_policy(id: Optional[_builtins.str] = None,
                                         instance_group: Optional[_builtins.str] = None,
                                         instance_group_manager: Optional[_builtins.str] = None,
                                         name: Optional[_builtins.str] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsInstanceGroupManagerPolicyResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceGroup'] = instance_group
    __args__['instanceGroupManager'] = instance_group_manager
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsInstanceGroupManagerPolicy:getIsInstanceGroupManagerPolicy', __args__, opts=opts, typ=GetIsInstanceGroupManagerPolicyResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsInstanceGroupManagerPolicyResult(
        id=pulumi.get(__ret__, 'id'),
        instance_group=pulumi.get(__ret__, 'instance_group'),
        instance_group_manager=pulumi.get(__ret__, 'instance_group_manager'),
        metric_type=pulumi.get(__ret__, 'metric_type'),
        metric_value=pulumi.get(__ret__, 'metric_value'),
        name=pulumi.get(__ret__, 'name'),
        policy_id=pulumi.get(__ret__, 'policy_id'),
        policy_type=pulumi.get(__ret__, 'policy_type'))
def get_is_instance_group_manager_policy_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                instance_group: Optional[pulumi.Input[_builtins.str]] = None,
                                                instance_group_manager: Optional[pulumi.Input[_builtins.str]] = None,
                                                name: Optional[pulumi.Input[_builtins.str]] = None,
                                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsInstanceGroupManagerPolicyResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceGroup'] = instance_group
    __args__['instanceGroupManager'] = instance_group_manager
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsInstanceGroupManagerPolicy:getIsInstanceGroupManagerPolicy', __args__, opts=opts, typ=GetIsInstanceGroupManagerPolicyResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsInstanceGroupManagerPolicyResult(
        id=pulumi.get(__response__, 'id'),
        instance_group=pulumi.get(__response__, 'instance_group'),
        instance_group_manager=pulumi.get(__response__, 'instance_group_manager'),
        metric_type=pulumi.get(__response__, 'metric_type'),
        metric_value=pulumi.get(__response__, 'metric_value'),
        name=pulumi.get(__response__, 'name'),
        policy_id=pulumi.get(__response__, 'policy_id'),
        policy_type=pulumi.get(__response__, 'policy_type')))
