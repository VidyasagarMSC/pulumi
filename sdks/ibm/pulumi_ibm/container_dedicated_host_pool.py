# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ContainerDedicatedHostPoolArgs', 'ContainerDedicatedHostPool']

@pulumi.input_type
class ContainerDedicatedHostPoolArgs:
    def __init__(__self__, *,
                 flavor_class: pulumi.Input[_builtins.str],
                 metro: pulumi.Input[_builtins.str],
                 container_dedicated_host_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['ContainerDedicatedHostPoolTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a ContainerDedicatedHostPool resource.
        :param pulumi.Input[_builtins.str] flavor_class: The flavor class of the dedicated host pool
        :param pulumi.Input[_builtins.str] metro: The metro to create the dedicated host pool in
        :param pulumi.Input[_builtins.str] name: The name of the dedicated host pool
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        """
        pulumi.set(__self__, "flavor_class", flavor_class)
        pulumi.set(__self__, "metro", metro)
        if container_dedicated_host_pool_id is not None:
            pulumi.set(__self__, "container_dedicated_host_pool_id", container_dedicated_host_pool_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="flavorClass")
    def flavor_class(self) -> pulumi.Input[_builtins.str]:
        """
        The flavor class of the dedicated host pool
        """
        return pulumi.get(self, "flavor_class")

    @flavor_class.setter
    def flavor_class(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "flavor_class", value)

    @_builtins.property
    @pulumi.getter
    def metro(self) -> pulumi.Input[_builtins.str]:
        """
        The metro to create the dedicated host pool in
        """
        return pulumi.get(self, "metro")

    @metro.setter
    def metro(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "metro", value)

    @_builtins.property
    @pulumi.getter(name="containerDedicatedHostPoolId")
    def container_dedicated_host_pool_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_dedicated_host_pool_id")

    @container_dedicated_host_pool_id.setter
    def container_dedicated_host_pool_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_dedicated_host_pool_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the dedicated host pool
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ContainerDedicatedHostPoolTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ContainerDedicatedHostPoolTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _ContainerDedicatedHostPoolState:
    def __init__(__self__, *,
                 container_dedicated_host_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor_class: Optional[pulumi.Input[_builtins.str]] = None,
                 host_count: Optional[pulumi.Input[_builtins.float]] = None,
                 metro: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['ContainerDedicatedHostPoolTimeoutsArgs']] = None,
                 worker_pools: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerDedicatedHostPoolWorkerPoolArgs']]]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerDedicatedHostPoolZoneArgs']]]] = None):
        """
        Input properties used for looking up and filtering ContainerDedicatedHostPool resources.
        :param pulumi.Input[_builtins.str] flavor_class: The flavor class of the dedicated host pool
        :param pulumi.Input[_builtins.float] host_count: The count of the hosts under the dedicated host pool
        :param pulumi.Input[_builtins.str] metro: The metro to create the dedicated host pool in
        :param pulumi.Input[_builtins.str] name: The name of the dedicated host pool
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.str] state: The state of the dedicated host pool
        :param pulumi.Input[Sequence[pulumi.Input['ContainerDedicatedHostPoolWorkerPoolArgs']]] worker_pools: The worker pools of the dedicated host pool
        :param pulumi.Input[Sequence[pulumi.Input['ContainerDedicatedHostPoolZoneArgs']]] zones: The zones of the dedicated host pool
        """
        if container_dedicated_host_pool_id is not None:
            pulumi.set(__self__, "container_dedicated_host_pool_id", container_dedicated_host_pool_id)
        if flavor_class is not None:
            pulumi.set(__self__, "flavor_class", flavor_class)
        if host_count is not None:
            pulumi.set(__self__, "host_count", host_count)
        if metro is not None:
            pulumi.set(__self__, "metro", metro)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if worker_pools is not None:
            pulumi.set(__self__, "worker_pools", worker_pools)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @_builtins.property
    @pulumi.getter(name="containerDedicatedHostPoolId")
    def container_dedicated_host_pool_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_dedicated_host_pool_id")

    @container_dedicated_host_pool_id.setter
    def container_dedicated_host_pool_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_dedicated_host_pool_id", value)

    @_builtins.property
    @pulumi.getter(name="flavorClass")
    def flavor_class(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The flavor class of the dedicated host pool
        """
        return pulumi.get(self, "flavor_class")

    @flavor_class.setter
    def flavor_class(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "flavor_class", value)

    @_builtins.property
    @pulumi.getter(name="hostCount")
    def host_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The count of the hosts under the dedicated host pool
        """
        return pulumi.get(self, "host_count")

    @host_count.setter
    def host_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "host_count", value)

    @_builtins.property
    @pulumi.getter
    def metro(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The metro to create the dedicated host pool in
        """
        return pulumi.get(self, "metro")

    @metro.setter
    def metro(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "metro", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the dedicated host pool
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The state of the dedicated host pool
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ContainerDedicatedHostPoolTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ContainerDedicatedHostPoolTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="workerPools")
    def worker_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerDedicatedHostPoolWorkerPoolArgs']]]]:
        """
        The worker pools of the dedicated host pool
        """
        return pulumi.get(self, "worker_pools")

    @worker_pools.setter
    def worker_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerDedicatedHostPoolWorkerPoolArgs']]]]):
        pulumi.set(self, "worker_pools", value)

    @_builtins.property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerDedicatedHostPoolZoneArgs']]]]:
        """
        The zones of the dedicated host pool
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerDedicatedHostPoolZoneArgs']]]]):
        pulumi.set(self, "zones", value)


@pulumi.type_token("ibm:index/containerDedicatedHostPool:ContainerDedicatedHostPool")
class ContainerDedicatedHostPool(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 container_dedicated_host_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor_class: Optional[pulumi.Input[_builtins.str]] = None,
                 metro: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['ContainerDedicatedHostPoolTimeoutsArgs', 'ContainerDedicatedHostPoolTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a ContainerDedicatedHostPool resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] flavor_class: The flavor class of the dedicated host pool
        :param pulumi.Input[_builtins.str] metro: The metro to create the dedicated host pool in
        :param pulumi.Input[_builtins.str] name: The name of the dedicated host pool
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ContainerDedicatedHostPoolArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ContainerDedicatedHostPool resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ContainerDedicatedHostPoolArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ContainerDedicatedHostPoolArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 container_dedicated_host_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor_class: Optional[pulumi.Input[_builtins.str]] = None,
                 metro: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['ContainerDedicatedHostPoolTimeoutsArgs', 'ContainerDedicatedHostPoolTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ContainerDedicatedHostPoolArgs.__new__(ContainerDedicatedHostPoolArgs)

            __props__.__dict__["container_dedicated_host_pool_id"] = container_dedicated_host_pool_id
            if flavor_class is None and not opts.urn:
                raise TypeError("Missing required property 'flavor_class'")
            __props__.__dict__["flavor_class"] = flavor_class
            if metro is None and not opts.urn:
                raise TypeError("Missing required property 'metro'")
            __props__.__dict__["metro"] = metro
            __props__.__dict__["name"] = name
            __props__.__dict__["resource_group_id"] = resource_group_id
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["host_count"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["worker_pools"] = None
            __props__.__dict__["zones"] = None
        super(ContainerDedicatedHostPool, __self__).__init__(
            'ibm:index/containerDedicatedHostPool:ContainerDedicatedHostPool',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            container_dedicated_host_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
            flavor_class: Optional[pulumi.Input[_builtins.str]] = None,
            host_count: Optional[pulumi.Input[_builtins.float]] = None,
            metro: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            state: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['ContainerDedicatedHostPoolTimeoutsArgs', 'ContainerDedicatedHostPoolTimeoutsArgsDict']]] = None,
            worker_pools: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerDedicatedHostPoolWorkerPoolArgs', 'ContainerDedicatedHostPoolWorkerPoolArgsDict']]]]] = None,
            zones: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ContainerDedicatedHostPoolZoneArgs', 'ContainerDedicatedHostPoolZoneArgsDict']]]]] = None) -> 'ContainerDedicatedHostPool':
        """
        Get an existing ContainerDedicatedHostPool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] flavor_class: The flavor class of the dedicated host pool
        :param pulumi.Input[_builtins.float] host_count: The count of the hosts under the dedicated host pool
        :param pulumi.Input[_builtins.str] metro: The metro to create the dedicated host pool in
        :param pulumi.Input[_builtins.str] name: The name of the dedicated host pool
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.str] state: The state of the dedicated host pool
        :param pulumi.Input[Sequence[pulumi.Input[Union['ContainerDedicatedHostPoolWorkerPoolArgs', 'ContainerDedicatedHostPoolWorkerPoolArgsDict']]]] worker_pools: The worker pools of the dedicated host pool
        :param pulumi.Input[Sequence[pulumi.Input[Union['ContainerDedicatedHostPoolZoneArgs', 'ContainerDedicatedHostPoolZoneArgsDict']]]] zones: The zones of the dedicated host pool
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ContainerDedicatedHostPoolState.__new__(_ContainerDedicatedHostPoolState)

        __props__.__dict__["container_dedicated_host_pool_id"] = container_dedicated_host_pool_id
        __props__.__dict__["flavor_class"] = flavor_class
        __props__.__dict__["host_count"] = host_count
        __props__.__dict__["metro"] = metro
        __props__.__dict__["name"] = name
        __props__.__dict__["resource_group_id"] = resource_group_id
        __props__.__dict__["state"] = state
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["worker_pools"] = worker_pools
        __props__.__dict__["zones"] = zones
        return ContainerDedicatedHostPool(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="containerDedicatedHostPoolId")
    def container_dedicated_host_pool_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "container_dedicated_host_pool_id")

    @_builtins.property
    @pulumi.getter(name="flavorClass")
    def flavor_class(self) -> pulumi.Output[_builtins.str]:
        """
        The flavor class of the dedicated host pool
        """
        return pulumi.get(self, "flavor_class")

    @_builtins.property
    @pulumi.getter(name="hostCount")
    def host_count(self) -> pulumi.Output[_builtins.float]:
        """
        The count of the hosts under the dedicated host pool
        """
        return pulumi.get(self, "host_count")

    @_builtins.property
    @pulumi.getter
    def metro(self) -> pulumi.Output[_builtins.str]:
        """
        The metro to create the dedicated host pool in
        """
        return pulumi.get(self, "metro")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the dedicated host pool
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> pulumi.Output[_builtins.str]:
        """
        The state of the dedicated host pool
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.ContainerDedicatedHostPoolTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter(name="workerPools")
    def worker_pools(self) -> pulumi.Output[Sequence['outputs.ContainerDedicatedHostPoolWorkerPool']]:
        """
        The worker pools of the dedicated host pool
        """
        return pulumi.get(self, "worker_pools")

    @_builtins.property
    @pulumi.getter
    def zones(self) -> pulumi.Output[Sequence['outputs.ContainerDedicatedHostPoolZone']]:
        """
        The zones of the dedicated host pool
        """
        return pulumi.get(self, "zones")

