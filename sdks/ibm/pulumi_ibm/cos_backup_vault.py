# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CosBackupVaultArgs', 'CosBackupVault']

@pulumi.input_type
class CosBackupVaultArgs:
    def __init__(__self__, *,
                 backup_vault_name: pulumi.Input[_builtins.str],
                 region: pulumi.Input[_builtins.str],
                 service_instance_id: pulumi.Input[_builtins.str],
                 activity_tracking_management_events: Optional[pulumi.Input[_builtins.bool]] = None,
                 cos_backup_vault_id: Optional[pulumi.Input[_builtins.str]] = None,
                 kms_key_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 metrics_monitoring_usage_metrics: Optional[pulumi.Input[_builtins.bool]] = None,
                 timeouts: Optional[pulumi.Input['CosBackupVaultTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a CosBackupVault resource.
        :param pulumi.Input[_builtins.str] backup_vault_name: Name of the Backup Vault.
        :param pulumi.Input[_builtins.str] region: Location where backup vault to be created.
        :param pulumi.Input[_builtins.str] service_instance_id: Instance id for the backup vault.
        :param pulumi.Input[_builtins.bool] activity_tracking_management_events: Activity Tracking configuration.Whether to send notifications for management events on the BackupVault.
        :param pulumi.Input[_builtins.str] kms_key_crn: The CRN for a KeyProtect root key.
        :param pulumi.Input[_builtins.bool] metrics_monitoring_usage_metrics: Metrics Monitoring configuration.Whether usage metrics are collected for this BackupVault.
        """
        pulumi.set(__self__, "backup_vault_name", backup_vault_name)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "service_instance_id", service_instance_id)
        if activity_tracking_management_events is not None:
            pulumi.set(__self__, "activity_tracking_management_events", activity_tracking_management_events)
        if cos_backup_vault_id is not None:
            pulumi.set(__self__, "cos_backup_vault_id", cos_backup_vault_id)
        if kms_key_crn is not None:
            pulumi.set(__self__, "kms_key_crn", kms_key_crn)
        if metrics_monitoring_usage_metrics is not None:
            pulumi.set(__self__, "metrics_monitoring_usage_metrics", metrics_monitoring_usage_metrics)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="backupVaultName")
    def backup_vault_name(self) -> pulumi.Input[_builtins.str]:
        """
        Name of the Backup Vault.
        """
        return pulumi.get(self, "backup_vault_name")

    @backup_vault_name.setter
    def backup_vault_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "backup_vault_name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Input[_builtins.str]:
        """
        Location where backup vault to be created.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="serviceInstanceId")
    def service_instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Instance id for the backup vault.
        """
        return pulumi.get(self, "service_instance_id")

    @service_instance_id.setter
    def service_instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "service_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="activityTrackingManagementEvents")
    def activity_tracking_management_events(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Activity Tracking configuration.Whether to send notifications for management events on the BackupVault.
        """
        return pulumi.get(self, "activity_tracking_management_events")

    @activity_tracking_management_events.setter
    def activity_tracking_management_events(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "activity_tracking_management_events", value)

    @_builtins.property
    @pulumi.getter(name="cosBackupVaultId")
    def cos_backup_vault_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cos_backup_vault_id")

    @cos_backup_vault_id.setter
    def cos_backup_vault_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cos_backup_vault_id", value)

    @_builtins.property
    @pulumi.getter(name="kmsKeyCrn")
    def kms_key_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN for a KeyProtect root key.
        """
        return pulumi.get(self, "kms_key_crn")

    @kms_key_crn.setter
    def kms_key_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kms_key_crn", value)

    @_builtins.property
    @pulumi.getter(name="metricsMonitoringUsageMetrics")
    def metrics_monitoring_usage_metrics(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Metrics Monitoring configuration.Whether usage metrics are collected for this BackupVault.
        """
        return pulumi.get(self, "metrics_monitoring_usage_metrics")

    @metrics_monitoring_usage_metrics.setter
    def metrics_monitoring_usage_metrics(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "metrics_monitoring_usage_metrics", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['CosBackupVaultTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['CosBackupVaultTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _CosBackupVaultState:
    def __init__(__self__, *,
                 activity_tracking_management_events: Optional[pulumi.Input[_builtins.bool]] = None,
                 backup_vault_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 backup_vault_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cos_backup_vault_id: Optional[pulumi.Input[_builtins.str]] = None,
                 kms_key_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 metrics_monitoring_usage_metrics: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 service_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['CosBackupVaultTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering CosBackupVault resources.
        :param pulumi.Input[_builtins.bool] activity_tracking_management_events: Activity Tracking configuration.Whether to send notifications for management events on the BackupVault.
        :param pulumi.Input[_builtins.str] backup_vault_crn: CRN of resource instance
        :param pulumi.Input[_builtins.str] backup_vault_name: Name of the Backup Vault.
        :param pulumi.Input[_builtins.str] kms_key_crn: The CRN for a KeyProtect root key.
        :param pulumi.Input[_builtins.bool] metrics_monitoring_usage_metrics: Metrics Monitoring configuration.Whether usage metrics are collected for this BackupVault.
        :param pulumi.Input[_builtins.str] region: Location where backup vault to be created.
        :param pulumi.Input[_builtins.str] service_instance_id: Instance id for the backup vault.
        """
        if activity_tracking_management_events is not None:
            pulumi.set(__self__, "activity_tracking_management_events", activity_tracking_management_events)
        if backup_vault_crn is not None:
            pulumi.set(__self__, "backup_vault_crn", backup_vault_crn)
        if backup_vault_name is not None:
            pulumi.set(__self__, "backup_vault_name", backup_vault_name)
        if cos_backup_vault_id is not None:
            pulumi.set(__self__, "cos_backup_vault_id", cos_backup_vault_id)
        if kms_key_crn is not None:
            pulumi.set(__self__, "kms_key_crn", kms_key_crn)
        if metrics_monitoring_usage_metrics is not None:
            pulumi.set(__self__, "metrics_monitoring_usage_metrics", metrics_monitoring_usage_metrics)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if service_instance_id is not None:
            pulumi.set(__self__, "service_instance_id", service_instance_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="activityTrackingManagementEvents")
    def activity_tracking_management_events(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Activity Tracking configuration.Whether to send notifications for management events on the BackupVault.
        """
        return pulumi.get(self, "activity_tracking_management_events")

    @activity_tracking_management_events.setter
    def activity_tracking_management_events(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "activity_tracking_management_events", value)

    @_builtins.property
    @pulumi.getter(name="backupVaultCrn")
    def backup_vault_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CRN of resource instance
        """
        return pulumi.get(self, "backup_vault_crn")

    @backup_vault_crn.setter
    def backup_vault_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_vault_crn", value)

    @_builtins.property
    @pulumi.getter(name="backupVaultName")
    def backup_vault_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the Backup Vault.
        """
        return pulumi.get(self, "backup_vault_name")

    @backup_vault_name.setter
    def backup_vault_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_vault_name", value)

    @_builtins.property
    @pulumi.getter(name="cosBackupVaultId")
    def cos_backup_vault_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cos_backup_vault_id")

    @cos_backup_vault_id.setter
    def cos_backup_vault_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cos_backup_vault_id", value)

    @_builtins.property
    @pulumi.getter(name="kmsKeyCrn")
    def kms_key_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN for a KeyProtect root key.
        """
        return pulumi.get(self, "kms_key_crn")

    @kms_key_crn.setter
    def kms_key_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kms_key_crn", value)

    @_builtins.property
    @pulumi.getter(name="metricsMonitoringUsageMetrics")
    def metrics_monitoring_usage_metrics(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Metrics Monitoring configuration.Whether usage metrics are collected for this BackupVault.
        """
        return pulumi.get(self, "metrics_monitoring_usage_metrics")

    @metrics_monitoring_usage_metrics.setter
    def metrics_monitoring_usage_metrics(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "metrics_monitoring_usage_metrics", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Location where backup vault to be created.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="serviceInstanceId")
    def service_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Instance id for the backup vault.
        """
        return pulumi.get(self, "service_instance_id")

    @service_instance_id.setter
    def service_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_instance_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['CosBackupVaultTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['CosBackupVaultTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/cosBackupVault:CosBackupVault")
class CosBackupVault(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 activity_tracking_management_events: Optional[pulumi.Input[_builtins.bool]] = None,
                 backup_vault_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cos_backup_vault_id: Optional[pulumi.Input[_builtins.str]] = None,
                 kms_key_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 metrics_monitoring_usage_metrics: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 service_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['CosBackupVaultTimeoutsArgs', 'CosBackupVaultTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a CosBackupVault resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] activity_tracking_management_events: Activity Tracking configuration.Whether to send notifications for management events on the BackupVault.
        :param pulumi.Input[_builtins.str] backup_vault_name: Name of the Backup Vault.
        :param pulumi.Input[_builtins.str] kms_key_crn: The CRN for a KeyProtect root key.
        :param pulumi.Input[_builtins.bool] metrics_monitoring_usage_metrics: Metrics Monitoring configuration.Whether usage metrics are collected for this BackupVault.
        :param pulumi.Input[_builtins.str] region: Location where backup vault to be created.
        :param pulumi.Input[_builtins.str] service_instance_id: Instance id for the backup vault.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CosBackupVaultArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CosBackupVault resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CosBackupVaultArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CosBackupVaultArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 activity_tracking_management_events: Optional[pulumi.Input[_builtins.bool]] = None,
                 backup_vault_name: Optional[pulumi.Input[_builtins.str]] = None,
                 cos_backup_vault_id: Optional[pulumi.Input[_builtins.str]] = None,
                 kms_key_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 metrics_monitoring_usage_metrics: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 service_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['CosBackupVaultTimeoutsArgs', 'CosBackupVaultTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CosBackupVaultArgs.__new__(CosBackupVaultArgs)

            __props__.__dict__["activity_tracking_management_events"] = activity_tracking_management_events
            if backup_vault_name is None and not opts.urn:
                raise TypeError("Missing required property 'backup_vault_name'")
            __props__.__dict__["backup_vault_name"] = backup_vault_name
            __props__.__dict__["cos_backup_vault_id"] = cos_backup_vault_id
            __props__.__dict__["kms_key_crn"] = kms_key_crn
            __props__.__dict__["metrics_monitoring_usage_metrics"] = metrics_monitoring_usage_metrics
            if region is None and not opts.urn:
                raise TypeError("Missing required property 'region'")
            __props__.__dict__["region"] = region
            if service_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'service_instance_id'")
            __props__.__dict__["service_instance_id"] = service_instance_id
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["backup_vault_crn"] = None
        super(CosBackupVault, __self__).__init__(
            'ibm:index/cosBackupVault:CosBackupVault',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            activity_tracking_management_events: Optional[pulumi.Input[_builtins.bool]] = None,
            backup_vault_crn: Optional[pulumi.Input[_builtins.str]] = None,
            backup_vault_name: Optional[pulumi.Input[_builtins.str]] = None,
            cos_backup_vault_id: Optional[pulumi.Input[_builtins.str]] = None,
            kms_key_crn: Optional[pulumi.Input[_builtins.str]] = None,
            metrics_monitoring_usage_metrics: Optional[pulumi.Input[_builtins.bool]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            service_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['CosBackupVaultTimeoutsArgs', 'CosBackupVaultTimeoutsArgsDict']]] = None) -> 'CosBackupVault':
        """
        Get an existing CosBackupVault resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] activity_tracking_management_events: Activity Tracking configuration.Whether to send notifications for management events on the BackupVault.
        :param pulumi.Input[_builtins.str] backup_vault_crn: CRN of resource instance
        :param pulumi.Input[_builtins.str] backup_vault_name: Name of the Backup Vault.
        :param pulumi.Input[_builtins.str] kms_key_crn: The CRN for a KeyProtect root key.
        :param pulumi.Input[_builtins.bool] metrics_monitoring_usage_metrics: Metrics Monitoring configuration.Whether usage metrics are collected for this BackupVault.
        :param pulumi.Input[_builtins.str] region: Location where backup vault to be created.
        :param pulumi.Input[_builtins.str] service_instance_id: Instance id for the backup vault.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CosBackupVaultState.__new__(_CosBackupVaultState)

        __props__.__dict__["activity_tracking_management_events"] = activity_tracking_management_events
        __props__.__dict__["backup_vault_crn"] = backup_vault_crn
        __props__.__dict__["backup_vault_name"] = backup_vault_name
        __props__.__dict__["cos_backup_vault_id"] = cos_backup_vault_id
        __props__.__dict__["kms_key_crn"] = kms_key_crn
        __props__.__dict__["metrics_monitoring_usage_metrics"] = metrics_monitoring_usage_metrics
        __props__.__dict__["region"] = region
        __props__.__dict__["service_instance_id"] = service_instance_id
        __props__.__dict__["timeouts"] = timeouts
        return CosBackupVault(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="activityTrackingManagementEvents")
    def activity_tracking_management_events(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Activity Tracking configuration.Whether to send notifications for management events on the BackupVault.
        """
        return pulumi.get(self, "activity_tracking_management_events")

    @_builtins.property
    @pulumi.getter(name="backupVaultCrn")
    def backup_vault_crn(self) -> pulumi.Output[_builtins.str]:
        """
        CRN of resource instance
        """
        return pulumi.get(self, "backup_vault_crn")

    @_builtins.property
    @pulumi.getter(name="backupVaultName")
    def backup_vault_name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the Backup Vault.
        """
        return pulumi.get(self, "backup_vault_name")

    @_builtins.property
    @pulumi.getter(name="cosBackupVaultId")
    def cos_backup_vault_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cos_backup_vault_id")

    @_builtins.property
    @pulumi.getter(name="kmsKeyCrn")
    def kms_key_crn(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The CRN for a KeyProtect root key.
        """
        return pulumi.get(self, "kms_key_crn")

    @_builtins.property
    @pulumi.getter(name="metricsMonitoringUsageMetrics")
    def metrics_monitoring_usage_metrics(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Metrics Monitoring configuration.Whether usage metrics are collected for this BackupVault.
        """
        return pulumi.get(self, "metrics_monitoring_usage_metrics")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Location where backup vault to be created.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="serviceInstanceId")
    def service_instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Instance id for the backup vault.
        """
        return pulumi.get(self, "service_instance_id")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.CosBackupVaultTimeouts']]:
        return pulumi.get(self, "timeouts")

