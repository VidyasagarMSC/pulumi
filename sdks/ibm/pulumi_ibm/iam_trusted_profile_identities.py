# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IamTrustedProfileIdentitiesArgs', 'IamTrustedProfileIdentities']

@pulumi.input_type
class IamTrustedProfileIdentitiesArgs:
    def __init__(__self__, *,
                 profile_id: pulumi.Input[_builtins.str],
                 iam_trusted_profile_identities_id: Optional[pulumi.Input[_builtins.str]] = None,
                 identities: Optional[pulumi.Input[Sequence[pulumi.Input['IamTrustedProfileIdentitiesIdentityArgs']]]] = None):
        """
        The set of arguments for constructing a IamTrustedProfileIdentities resource.
        :param pulumi.Input[_builtins.str] profile_id: ID of the trusted profile.
        :param pulumi.Input[Sequence[pulumi.Input['IamTrustedProfileIdentitiesIdentityArgs']]] identities: List of identities.
        """
        pulumi.set(__self__, "profile_id", profile_id)
        if iam_trusted_profile_identities_id is not None:
            pulumi.set(__self__, "iam_trusted_profile_identities_id", iam_trusted_profile_identities_id)
        if identities is not None:
            pulumi.set(__self__, "identities", identities)

    @_builtins.property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> pulumi.Input[_builtins.str]:
        """
        ID of the trusted profile.
        """
        return pulumi.get(self, "profile_id")

    @profile_id.setter
    def profile_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "profile_id", value)

    @_builtins.property
    @pulumi.getter(name="iamTrustedProfileIdentitiesId")
    def iam_trusted_profile_identities_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "iam_trusted_profile_identities_id")

    @iam_trusted_profile_identities_id.setter
    def iam_trusted_profile_identities_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_trusted_profile_identities_id", value)

    @_builtins.property
    @pulumi.getter
    def identities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IamTrustedProfileIdentitiesIdentityArgs']]]]:
        """
        List of identities.
        """
        return pulumi.get(self, "identities")

    @identities.setter
    def identities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IamTrustedProfileIdentitiesIdentityArgs']]]]):
        pulumi.set(self, "identities", value)


@pulumi.input_type
class _IamTrustedProfileIdentitiesState:
    def __init__(__self__, *,
                 iam_trusted_profile_identities_id: Optional[pulumi.Input[_builtins.str]] = None,
                 identities: Optional[pulumi.Input[Sequence[pulumi.Input['IamTrustedProfileIdentitiesIdentityArgs']]]] = None,
                 if_match: Optional[pulumi.Input[_builtins.str]] = None,
                 profile_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IamTrustedProfileIdentities resources.
        :param pulumi.Input[Sequence[pulumi.Input['IamTrustedProfileIdentitiesIdentityArgs']]] identities: List of identities.
        :param pulumi.Input[_builtins.str] if_match: Entity tag of the Identities to be updated. Specify the tag that you retrieved when reading the Profile Identities. This
               value helps identify parallel usage of this API. Pass * to indicate updating any available version, which may result in
               stale updates.
        :param pulumi.Input[_builtins.str] profile_id: ID of the trusted profile.
        """
        if iam_trusted_profile_identities_id is not None:
            pulumi.set(__self__, "iam_trusted_profile_identities_id", iam_trusted_profile_identities_id)
        if identities is not None:
            pulumi.set(__self__, "identities", identities)
        if if_match is not None:
            pulumi.set(__self__, "if_match", if_match)
        if profile_id is not None:
            pulumi.set(__self__, "profile_id", profile_id)

    @_builtins.property
    @pulumi.getter(name="iamTrustedProfileIdentitiesId")
    def iam_trusted_profile_identities_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "iam_trusted_profile_identities_id")

    @iam_trusted_profile_identities_id.setter
    def iam_trusted_profile_identities_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "iam_trusted_profile_identities_id", value)

    @_builtins.property
    @pulumi.getter
    def identities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IamTrustedProfileIdentitiesIdentityArgs']]]]:
        """
        List of identities.
        """
        return pulumi.get(self, "identities")

    @identities.setter
    def identities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IamTrustedProfileIdentitiesIdentityArgs']]]]):
        pulumi.set(self, "identities", value)

    @_builtins.property
    @pulumi.getter(name="ifMatch")
    def if_match(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Entity tag of the Identities to be updated. Specify the tag that you retrieved when reading the Profile Identities. This
        value helps identify parallel usage of this API. Pass * to indicate updating any available version, which may result in
        stale updates.
        """
        return pulumi.get(self, "if_match")

    @if_match.setter
    def if_match(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "if_match", value)

    @_builtins.property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the trusted profile.
        """
        return pulumi.get(self, "profile_id")

    @profile_id.setter
    def profile_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "profile_id", value)


@pulumi.type_token("ibm:index/iamTrustedProfileIdentities:IamTrustedProfileIdentities")
class IamTrustedProfileIdentities(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 iam_trusted_profile_identities_id: Optional[pulumi.Input[_builtins.str]] = None,
                 identities: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamTrustedProfileIdentitiesIdentityArgs', 'IamTrustedProfileIdentitiesIdentityArgsDict']]]]] = None,
                 profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IamTrustedProfileIdentities resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IamTrustedProfileIdentitiesIdentityArgs', 'IamTrustedProfileIdentitiesIdentityArgsDict']]]] identities: List of identities.
        :param pulumi.Input[_builtins.str] profile_id: ID of the trusted profile.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IamTrustedProfileIdentitiesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IamTrustedProfileIdentities resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IamTrustedProfileIdentitiesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IamTrustedProfileIdentitiesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 iam_trusted_profile_identities_id: Optional[pulumi.Input[_builtins.str]] = None,
                 identities: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamTrustedProfileIdentitiesIdentityArgs', 'IamTrustedProfileIdentitiesIdentityArgsDict']]]]] = None,
                 profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IamTrustedProfileIdentitiesArgs.__new__(IamTrustedProfileIdentitiesArgs)

            __props__.__dict__["iam_trusted_profile_identities_id"] = iam_trusted_profile_identities_id
            __props__.__dict__["identities"] = identities
            if profile_id is None and not opts.urn:
                raise TypeError("Missing required property 'profile_id'")
            __props__.__dict__["profile_id"] = profile_id
            __props__.__dict__["if_match"] = None
        super(IamTrustedProfileIdentities, __self__).__init__(
            'ibm:index/iamTrustedProfileIdentities:IamTrustedProfileIdentities',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            iam_trusted_profile_identities_id: Optional[pulumi.Input[_builtins.str]] = None,
            identities: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IamTrustedProfileIdentitiesIdentityArgs', 'IamTrustedProfileIdentitiesIdentityArgsDict']]]]] = None,
            if_match: Optional[pulumi.Input[_builtins.str]] = None,
            profile_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'IamTrustedProfileIdentities':
        """
        Get an existing IamTrustedProfileIdentities resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IamTrustedProfileIdentitiesIdentityArgs', 'IamTrustedProfileIdentitiesIdentityArgsDict']]]] identities: List of identities.
        :param pulumi.Input[_builtins.str] if_match: Entity tag of the Identities to be updated. Specify the tag that you retrieved when reading the Profile Identities. This
               value helps identify parallel usage of this API. Pass * to indicate updating any available version, which may result in
               stale updates.
        :param pulumi.Input[_builtins.str] profile_id: ID of the trusted profile.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IamTrustedProfileIdentitiesState.__new__(_IamTrustedProfileIdentitiesState)

        __props__.__dict__["iam_trusted_profile_identities_id"] = iam_trusted_profile_identities_id
        __props__.__dict__["identities"] = identities
        __props__.__dict__["if_match"] = if_match
        __props__.__dict__["profile_id"] = profile_id
        return IamTrustedProfileIdentities(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="iamTrustedProfileIdentitiesId")
    def iam_trusted_profile_identities_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "iam_trusted_profile_identities_id")

    @_builtins.property
    @pulumi.getter
    def identities(self) -> pulumi.Output[Optional[Sequence['outputs.IamTrustedProfileIdentitiesIdentity']]]:
        """
        List of identities.
        """
        return pulumi.get(self, "identities")

    @_builtins.property
    @pulumi.getter(name="ifMatch")
    def if_match(self) -> pulumi.Output[_builtins.str]:
        """
        Entity tag of the Identities to be updated. Specify the tag that you retrieved when reading the Profile Identities. This
        value helps identify parallel usage of this API. Pass * to indicate updating any available version, which may result in
        stale updates.
        """
        return pulumi.get(self, "if_match")

    @_builtins.property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> pulumi.Output[_builtins.str]:
        """
        ID of the trusted profile.
        """
        return pulumi.get(self, "profile_id")

