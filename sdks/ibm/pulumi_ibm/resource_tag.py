# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ResourceTagArgs', 'ResourceTag']

@pulumi.input_type
class ResourceTagArgs:
    def __init__(__self__, *,
                 resource_id: pulumi.Input[_builtins.str],
                 replace: Optional[pulumi.Input[_builtins.bool]] = None,
                 resource_tag_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tag_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['ResourceTagTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a ResourceTag resource.
        :param pulumi.Input[_builtins.str] resource_id: CRN of the resource on which the tags should be attached
        :param pulumi.Input[_builtins.bool] replace: If true, it indicates that the attaching operation is a replacement operation
        :param pulumi.Input[_builtins.str] resource_type: Resource type on which the tags should be attached
        :param pulumi.Input[_builtins.str] tag_type: Type of the tag. Only allowed values are: user, or service or access (default value : user)
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags associated with resource instance
        """
        pulumi.set(__self__, "resource_id", resource_id)
        if replace is not None:
            pulumi.set(__self__, "replace", replace)
        if resource_tag_id is not None:
            pulumi.set(__self__, "resource_tag_id", resource_tag_id)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if tag_type is not None:
            pulumi.set(__self__, "tag_type", tag_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Input[_builtins.str]:
        """
        CRN of the resource on which the tags should be attached
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter
    def replace(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If true, it indicates that the attaching operation is a replacement operation
        """
        return pulumi.get(self, "replace")

    @replace.setter
    def replace(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "replace", value)

    @_builtins.property
    @pulumi.getter(name="resourceTagId")
    def resource_tag_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "resource_tag_id")

    @resource_tag_id.setter
    def resource_tag_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_tag_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource type on which the tags should be attached
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of the tag. Only allowed values are: user, or service or access (default value : user)
        """
        return pulumi.get(self, "tag_type")

    @tag_type.setter
    def tag_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tag_type", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags associated with resource instance
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ResourceTagTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ResourceTagTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _ResourceTagState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 replace: Optional[pulumi.Input[_builtins.bool]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_tag_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tag_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['ResourceTagTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering ResourceTag resources.
        :param pulumi.Input[_builtins.str] account_id: The ID of the account that owns the resources to be tagged (required if tag-type is set to service)
        :param pulumi.Input[_builtins.bool] replace: If true, it indicates that the attaching operation is a replacement operation
        :param pulumi.Input[_builtins.str] resource_id: CRN of the resource on which the tags should be attached
        :param pulumi.Input[_builtins.str] resource_type: Resource type on which the tags should be attached
        :param pulumi.Input[_builtins.str] tag_type: Type of the tag. Only allowed values are: user, or service or access (default value : user)
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags associated with resource instance
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if replace is not None:
            pulumi.set(__self__, "replace", replace)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_tag_id is not None:
            pulumi.set(__self__, "resource_tag_id", resource_tag_id)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if tag_type is not None:
            pulumi.set(__self__, "tag_type", tag_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the account that owns the resources to be tagged (required if tag-type is set to service)
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_id", value)

    @_builtins.property
    @pulumi.getter
    def replace(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If true, it indicates that the attaching operation is a replacement operation
        """
        return pulumi.get(self, "replace")

    @replace.setter
    def replace(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "replace", value)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CRN of the resource on which the tags should be attached
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceTagId")
    def resource_tag_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "resource_tag_id")

    @resource_tag_id.setter
    def resource_tag_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_tag_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource type on which the tags should be attached
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of the tag. Only allowed values are: user, or service or access (default value : user)
        """
        return pulumi.get(self, "tag_type")

    @tag_type.setter
    def tag_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tag_type", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags associated with resource instance
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ResourceTagTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ResourceTagTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/resourceTag:ResourceTag")
class ResourceTag(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 replace: Optional[pulumi.Input[_builtins.bool]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_tag_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tag_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['ResourceTagTimeoutsArgs', 'ResourceTagTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a ResourceTag resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] replace: If true, it indicates that the attaching operation is a replacement operation
        :param pulumi.Input[_builtins.str] resource_id: CRN of the resource on which the tags should be attached
        :param pulumi.Input[_builtins.str] resource_type: Resource type on which the tags should be attached
        :param pulumi.Input[_builtins.str] tag_type: Type of the tag. Only allowed values are: user, or service or access (default value : user)
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags associated with resource instance
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ResourceTagArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ResourceTag resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ResourceTagArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResourceTagArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 replace: Optional[pulumi.Input[_builtins.bool]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_tag_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tag_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['ResourceTagTimeoutsArgs', 'ResourceTagTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResourceTagArgs.__new__(ResourceTagArgs)

            __props__.__dict__["replace"] = replace
            if resource_id is None and not opts.urn:
                raise TypeError("Missing required property 'resource_id'")
            __props__.__dict__["resource_id"] = resource_id
            __props__.__dict__["resource_tag_id"] = resource_tag_id
            __props__.__dict__["resource_type"] = resource_type
            __props__.__dict__["tag_type"] = tag_type
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["account_id"] = None
        super(ResourceTag, __self__).__init__(
            'ibm:index/resourceTag:ResourceTag',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[_builtins.str]] = None,
            replace: Optional[pulumi.Input[_builtins.bool]] = None,
            resource_id: Optional[pulumi.Input[_builtins.str]] = None,
            resource_tag_id: Optional[pulumi.Input[_builtins.str]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            tag_type: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            timeouts: Optional[pulumi.Input[Union['ResourceTagTimeoutsArgs', 'ResourceTagTimeoutsArgsDict']]] = None) -> 'ResourceTag':
        """
        Get an existing ResourceTag resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] account_id: The ID of the account that owns the resources to be tagged (required if tag-type is set to service)
        :param pulumi.Input[_builtins.bool] replace: If true, it indicates that the attaching operation is a replacement operation
        :param pulumi.Input[_builtins.str] resource_id: CRN of the resource on which the tags should be attached
        :param pulumi.Input[_builtins.str] resource_type: Resource type on which the tags should be attached
        :param pulumi.Input[_builtins.str] tag_type: Type of the tag. Only allowed values are: user, or service or access (default value : user)
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags associated with resource instance
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ResourceTagState.__new__(_ResourceTagState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["replace"] = replace
        __props__.__dict__["resource_id"] = resource_id
        __props__.__dict__["resource_tag_id"] = resource_tag_id
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["tag_type"] = tag_type
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timeouts"] = timeouts
        return ResourceTag(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the account that owns the resources to be tagged (required if tag-type is set to service)
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter
    def replace(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        If true, it indicates that the attaching operation is a replacement operation
        """
        return pulumi.get(self, "replace")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Output[_builtins.str]:
        """
        CRN of the resource on which the tags should be attached
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceTagId")
    def resource_tag_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "resource_tag_id")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Resource type on which the tags should be attached
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> pulumi.Output[_builtins.str]:
        """
        Type of the tag. Only allowed values are: user, or service or access (default value : user)
        """
        return pulumi.get(self, "tag_type")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of tags associated with resource instance
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.ResourceTagTimeouts']]:
        return pulumi.get(self, "timeouts")

