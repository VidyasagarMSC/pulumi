# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['LbVpxHaArgs', 'LbVpxHa']

@pulumi.input_type
class LbVpxHaArgs:
    def __init__(__self__, *,
                 primary_id: pulumi.Input[_builtins.float],
                 secondary_id: pulumi.Input[_builtins.float],
                 lb_vpx_ha_id: Optional[pulumi.Input[_builtins.str]] = None,
                 stay_secondary: Optional[pulumi.Input[_builtins.bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a LbVpxHa resource.
        :param pulumi.Input[_builtins.float] primary_id: primary ID
        :param pulumi.Input[_builtins.float] secondary_id: Secondary ID
        :param pulumi.Input[_builtins.bool] stay_secondary: Boolean value for stay secondary
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags set for the resource
        """
        pulumi.set(__self__, "primary_id", primary_id)
        pulumi.set(__self__, "secondary_id", secondary_id)
        if lb_vpx_ha_id is not None:
            pulumi.set(__self__, "lb_vpx_ha_id", lb_vpx_ha_id)
        if stay_secondary is not None:
            pulumi.set(__self__, "stay_secondary", stay_secondary)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="primaryId")
    def primary_id(self) -> pulumi.Input[_builtins.float]:
        """
        primary ID
        """
        return pulumi.get(self, "primary_id")

    @primary_id.setter
    def primary_id(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "primary_id", value)

    @_builtins.property
    @pulumi.getter(name="secondaryId")
    def secondary_id(self) -> pulumi.Input[_builtins.float]:
        """
        Secondary ID
        """
        return pulumi.get(self, "secondary_id")

    @secondary_id.setter
    def secondary_id(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "secondary_id", value)

    @_builtins.property
    @pulumi.getter(name="lbVpxHaId")
    def lb_vpx_ha_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "lb_vpx_ha_id")

    @lb_vpx_ha_id.setter
    def lb_vpx_ha_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lb_vpx_ha_id", value)

    @_builtins.property
    @pulumi.getter(name="staySecondary")
    def stay_secondary(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Boolean value for stay secondary
        """
        return pulumi.get(self, "stay_secondary")

    @stay_secondary.setter
    def stay_secondary(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "stay_secondary", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Tags set for the resource
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _LbVpxHaState:
    def __init__(__self__, *,
                 lb_vpx_ha_id: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_id: Optional[pulumi.Input[_builtins.float]] = None,
                 secondary_id: Optional[pulumi.Input[_builtins.float]] = None,
                 stay_secondary: Optional[pulumi.Input[_builtins.bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering LbVpxHa resources.
        :param pulumi.Input[_builtins.float] primary_id: primary ID
        :param pulumi.Input[_builtins.float] secondary_id: Secondary ID
        :param pulumi.Input[_builtins.bool] stay_secondary: Boolean value for stay secondary
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags set for the resource
        """
        if lb_vpx_ha_id is not None:
            pulumi.set(__self__, "lb_vpx_ha_id", lb_vpx_ha_id)
        if primary_id is not None:
            pulumi.set(__self__, "primary_id", primary_id)
        if secondary_id is not None:
            pulumi.set(__self__, "secondary_id", secondary_id)
        if stay_secondary is not None:
            pulumi.set(__self__, "stay_secondary", stay_secondary)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="lbVpxHaId")
    def lb_vpx_ha_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "lb_vpx_ha_id")

    @lb_vpx_ha_id.setter
    def lb_vpx_ha_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lb_vpx_ha_id", value)

    @_builtins.property
    @pulumi.getter(name="primaryId")
    def primary_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        primary ID
        """
        return pulumi.get(self, "primary_id")

    @primary_id.setter
    def primary_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "primary_id", value)

    @_builtins.property
    @pulumi.getter(name="secondaryId")
    def secondary_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Secondary ID
        """
        return pulumi.get(self, "secondary_id")

    @secondary_id.setter
    def secondary_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "secondary_id", value)

    @_builtins.property
    @pulumi.getter(name="staySecondary")
    def stay_secondary(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Boolean value for stay secondary
        """
        return pulumi.get(self, "stay_secondary")

    @stay_secondary.setter
    def stay_secondary(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "stay_secondary", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Tags set for the resource
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("ibm:index/lbVpxHa:LbVpxHa")
class LbVpxHa(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 lb_vpx_ha_id: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_id: Optional[pulumi.Input[_builtins.float]] = None,
                 secondary_id: Optional[pulumi.Input[_builtins.float]] = None,
                 stay_secondary: Optional[pulumi.Input[_builtins.bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Create a LbVpxHa resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] primary_id: primary ID
        :param pulumi.Input[_builtins.float] secondary_id: Secondary ID
        :param pulumi.Input[_builtins.bool] stay_secondary: Boolean value for stay secondary
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags set for the resource
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LbVpxHaArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a LbVpxHa resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LbVpxHaArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LbVpxHaArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 lb_vpx_ha_id: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_id: Optional[pulumi.Input[_builtins.float]] = None,
                 secondary_id: Optional[pulumi.Input[_builtins.float]] = None,
                 stay_secondary: Optional[pulumi.Input[_builtins.bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LbVpxHaArgs.__new__(LbVpxHaArgs)

            __props__.__dict__["lb_vpx_ha_id"] = lb_vpx_ha_id
            if primary_id is None and not opts.urn:
                raise TypeError("Missing required property 'primary_id'")
            __props__.__dict__["primary_id"] = primary_id
            if secondary_id is None and not opts.urn:
                raise TypeError("Missing required property 'secondary_id'")
            __props__.__dict__["secondary_id"] = secondary_id
            __props__.__dict__["stay_secondary"] = stay_secondary
            __props__.__dict__["tags"] = tags
        super(LbVpxHa, __self__).__init__(
            'ibm:index/lbVpxHa:LbVpxHa',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            lb_vpx_ha_id: Optional[pulumi.Input[_builtins.str]] = None,
            primary_id: Optional[pulumi.Input[_builtins.float]] = None,
            secondary_id: Optional[pulumi.Input[_builtins.float]] = None,
            stay_secondary: Optional[pulumi.Input[_builtins.bool]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'LbVpxHa':
        """
        Get an existing LbVpxHa resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] primary_id: primary ID
        :param pulumi.Input[_builtins.float] secondary_id: Secondary ID
        :param pulumi.Input[_builtins.bool] stay_secondary: Boolean value for stay secondary
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags set for the resource
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LbVpxHaState.__new__(_LbVpxHaState)

        __props__.__dict__["lb_vpx_ha_id"] = lb_vpx_ha_id
        __props__.__dict__["primary_id"] = primary_id
        __props__.__dict__["secondary_id"] = secondary_id
        __props__.__dict__["stay_secondary"] = stay_secondary
        __props__.__dict__["tags"] = tags
        return LbVpxHa(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="lbVpxHaId")
    def lb_vpx_ha_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "lb_vpx_ha_id")

    @_builtins.property
    @pulumi.getter(name="primaryId")
    def primary_id(self) -> pulumi.Output[_builtins.float]:
        """
        primary ID
        """
        return pulumi.get(self, "primary_id")

    @_builtins.property
    @pulumi.getter(name="secondaryId")
    def secondary_id(self) -> pulumi.Output[_builtins.float]:
        """
        Secondary ID
        """
        return pulumi.get(self, "secondary_id")

    @_builtins.property
    @pulumi.getter(name="staySecondary")
    def stay_secondary(self) -> pulumi.Output[_builtins.bool]:
        """
        Boolean value for stay secondary
        """
        return pulumi.get(self, "stay_secondary")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Tags set for the resource
        """
        return pulumi.get(self, "tags")

