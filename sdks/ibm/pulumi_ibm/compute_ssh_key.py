# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ComputeSshKeyArgs', 'ComputeSshKey']

@pulumi.input_type
class ComputeSshKeyArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[_builtins.str],
                 public_key: pulumi.Input[_builtins.str],
                 compute_ssh_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 notes: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a ComputeSshKey resource.
        :param pulumi.Input[_builtins.str] label: SSH Key label
        :param pulumi.Input[_builtins.str] public_key: Plublic Key info
        :param pulumi.Input[_builtins.str] notes: Additional notes
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags for the resource
        """
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "public_key", public_key)
        if compute_ssh_key_id is not None:
            pulumi.set(__self__, "compute_ssh_key_id", compute_ssh_key_id)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def label(self) -> pulumi.Input[_builtins.str]:
        """
        SSH Key label
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "label", value)

    @_builtins.property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> pulumi.Input[_builtins.str]:
        """
        Plublic Key info
        """
        return pulumi.get(self, "public_key")

    @public_key.setter
    def public_key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "public_key", value)

    @_builtins.property
    @pulumi.getter(name="computeSshKeyId")
    def compute_ssh_key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compute_ssh_key_id")

    @compute_ssh_key_id.setter
    def compute_ssh_key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_ssh_key_id", value)

    @_builtins.property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Additional notes
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "notes", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags for the resource
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _ComputeSshKeyState:
    def __init__(__self__, *,
                 compute_ssh_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 fingerprint: Optional[pulumi.Input[_builtins.str]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 notes: Optional[pulumi.Input[_builtins.str]] = None,
                 public_key: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering ComputeSshKey resources.
        :param pulumi.Input[_builtins.str] fingerprint: SSH key fingerprint
        :param pulumi.Input[_builtins.str] label: SSH Key label
        :param pulumi.Input[_builtins.str] notes: Additional notes
        :param pulumi.Input[_builtins.str] public_key: Plublic Key info
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags for the resource
        """
        if compute_ssh_key_id is not None:
            pulumi.set(__self__, "compute_ssh_key_id", compute_ssh_key_id)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if public_key is not None:
            pulumi.set(__self__, "public_key", public_key)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="computeSshKeyId")
    def compute_ssh_key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compute_ssh_key_id")

    @compute_ssh_key_id.setter
    def compute_ssh_key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_ssh_key_id", value)

    @_builtins.property
    @pulumi.getter
    def fingerprint(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        SSH key fingerprint
        """
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fingerprint", value)

    @_builtins.property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        SSH Key label
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "label", value)

    @_builtins.property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Additional notes
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "notes", value)

    @_builtins.property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Plublic Key info
        """
        return pulumi.get(self, "public_key")

    @public_key.setter
    def public_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_key", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags for the resource
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("ibm:index/computeSshKey:ComputeSshKey")
class ComputeSshKey(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compute_ssh_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 notes: Optional[pulumi.Input[_builtins.str]] = None,
                 public_key: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Create a ComputeSshKey resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] label: SSH Key label
        :param pulumi.Input[_builtins.str] notes: Additional notes
        :param pulumi.Input[_builtins.str] public_key: Plublic Key info
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags for the resource
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ComputeSshKeyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ComputeSshKey resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ComputeSshKeyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ComputeSshKeyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compute_ssh_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 notes: Optional[pulumi.Input[_builtins.str]] = None,
                 public_key: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ComputeSshKeyArgs.__new__(ComputeSshKeyArgs)

            __props__.__dict__["compute_ssh_key_id"] = compute_ssh_key_id
            if label is None and not opts.urn:
                raise TypeError("Missing required property 'label'")
            __props__.__dict__["label"] = label
            __props__.__dict__["notes"] = notes
            if public_key is None and not opts.urn:
                raise TypeError("Missing required property 'public_key'")
            __props__.__dict__["public_key"] = public_key
            __props__.__dict__["tags"] = tags
            __props__.__dict__["fingerprint"] = None
        super(ComputeSshKey, __self__).__init__(
            'ibm:index/computeSshKey:ComputeSshKey',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            compute_ssh_key_id: Optional[pulumi.Input[_builtins.str]] = None,
            fingerprint: Optional[pulumi.Input[_builtins.str]] = None,
            label: Optional[pulumi.Input[_builtins.str]] = None,
            notes: Optional[pulumi.Input[_builtins.str]] = None,
            public_key: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'ComputeSshKey':
        """
        Get an existing ComputeSshKey resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] fingerprint: SSH key fingerprint
        :param pulumi.Input[_builtins.str] label: SSH Key label
        :param pulumi.Input[_builtins.str] notes: Additional notes
        :param pulumi.Input[_builtins.str] public_key: Plublic Key info
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags for the resource
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ComputeSshKeyState.__new__(_ComputeSshKeyState)

        __props__.__dict__["compute_ssh_key_id"] = compute_ssh_key_id
        __props__.__dict__["fingerprint"] = fingerprint
        __props__.__dict__["label"] = label
        __props__.__dict__["notes"] = notes
        __props__.__dict__["public_key"] = public_key
        __props__.__dict__["tags"] = tags
        return ComputeSshKey(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="computeSshKeyId")
    def compute_ssh_key_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "compute_ssh_key_id")

    @_builtins.property
    @pulumi.getter
    def fingerprint(self) -> pulumi.Output[_builtins.str]:
        """
        SSH key fingerprint
        """
        return pulumi.get(self, "fingerprint")

    @_builtins.property
    @pulumi.getter
    def label(self) -> pulumi.Output[_builtins.str]:
        """
        SSH Key label
        """
        return pulumi.get(self, "label")

    @_builtins.property
    @pulumi.getter
    def notes(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Additional notes
        """
        return pulumi.get(self, "notes")

    @_builtins.property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> pulumi.Output[_builtins.str]:
        """
        Plublic Key info
        """
        return pulumi.get(self, "public_key")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of tags for the resource
        """
        return pulumi.get(self, "tags")

