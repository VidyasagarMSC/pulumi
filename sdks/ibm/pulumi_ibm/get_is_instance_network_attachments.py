# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsInstanceNetworkAttachmentsResult',
    'AwaitableGetIsInstanceNetworkAttachmentsResult',
    'get_is_instance_network_attachments',
    'get_is_instance_network_attachments_output',
]

@pulumi.output_type
class GetIsInstanceNetworkAttachmentsResult:
    """
    A collection of values returned by getIsInstanceNetworkAttachments.
    """
    def __init__(__self__, id=None, instance=None, network_attachments=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance and not isinstance(instance, str):
            raise TypeError("Expected argument 'instance' to be a str")
        pulumi.set(__self__, "instance", instance)
        if network_attachments and not isinstance(network_attachments, list):
            raise TypeError("Expected argument 'network_attachments' to be a list")
        pulumi.set(__self__, "network_attachments", network_attachments)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def instance(self) -> _builtins.str:
        return pulumi.get(self, "instance")

    @_builtins.property
    @pulumi.getter(name="networkAttachments")
    def network_attachments(self) -> Sequence['outputs.GetIsInstanceNetworkAttachmentsNetworkAttachmentResult']:
        return pulumi.get(self, "network_attachments")


class AwaitableGetIsInstanceNetworkAttachmentsResult(GetIsInstanceNetworkAttachmentsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsInstanceNetworkAttachmentsResult(
            id=self.id,
            instance=self.instance,
            network_attachments=self.network_attachments)


def get_is_instance_network_attachments(id: Optional[_builtins.str] = None,
                                        instance: Optional[_builtins.str] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsInstanceNetworkAttachmentsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instance'] = instance
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsInstanceNetworkAttachments:getIsInstanceNetworkAttachments', __args__, opts=opts, typ=GetIsInstanceNetworkAttachmentsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsInstanceNetworkAttachmentsResult(
        id=pulumi.get(__ret__, 'id'),
        instance=pulumi.get(__ret__, 'instance'),
        network_attachments=pulumi.get(__ret__, 'network_attachments'))
def get_is_instance_network_attachments_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                               instance: Optional[pulumi.Input[_builtins.str]] = None,
                                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsInstanceNetworkAttachmentsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instance'] = instance
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsInstanceNetworkAttachments:getIsInstanceNetworkAttachments', __args__, opts=opts, typ=GetIsInstanceNetworkAttachmentsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsInstanceNetworkAttachmentsResult(
        id=pulumi.get(__response__, 'id'),
        instance=pulumi.get(__response__, 'instance'),
        network_attachments=pulumi.get(__response__, 'network_attachments')))
