# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CisRateLimitArgs', 'CisRateLimit']

@pulumi.input_type
class CisRateLimitArgs:
    def __init__(__self__, *,
                 action: pulumi.Input['CisRateLimitActionArgs'],
                 cis_id: pulumi.Input[_builtins.str],
                 domain_id: pulumi.Input[_builtins.str],
                 period: pulumi.Input[_builtins.float],
                 threshold: pulumi.Input[_builtins.float],
                 bypasses: Optional[pulumi.Input[Sequence[pulumi.Input['CisRateLimitBypassArgs']]]] = None,
                 cis_rate_limit_id: Optional[pulumi.Input[_builtins.str]] = None,
                 correlate: Optional[pulumi.Input['CisRateLimitCorrelateArgs']] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 disabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 match: Optional[pulumi.Input['CisRateLimitMatchArgs']] = None):
        """
        The set of arguments for constructing a CisRateLimit resource.
        :param pulumi.Input['CisRateLimitActionArgs'] action: Rate Limiting Action
        :param pulumi.Input[_builtins.str] cis_id: CIS Intance CRN
        :param pulumi.Input[_builtins.str] domain_id: CIS Domain ID
        :param pulumi.Input[_builtins.float] period: Rate Limiting Period
        :param pulumi.Input[_builtins.float] threshold: Rate Limiting Threshold
        :param pulumi.Input[Sequence[pulumi.Input['CisRateLimitBypassArgs']]] bypasses: Bypass URL
        :param pulumi.Input['CisRateLimitCorrelateArgs'] correlate: Ratelimiting Correlate
        :param pulumi.Input[_builtins.str] description: A note that you can use to describe the reason for a rate limiting rule.
        :param pulumi.Input[_builtins.bool] disabled: Whether this rate limiting rule is currently disabled.
        :param pulumi.Input['CisRateLimitMatchArgs'] match: Rate Limiting Match
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "cis_id", cis_id)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "threshold", threshold)
        if bypasses is not None:
            pulumi.set(__self__, "bypasses", bypasses)
        if cis_rate_limit_id is not None:
            pulumi.set(__self__, "cis_rate_limit_id", cis_rate_limit_id)
        if correlate is not None:
            pulumi.set(__self__, "correlate", correlate)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if match is not None:
            pulumi.set(__self__, "match", match)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Input['CisRateLimitActionArgs']:
        """
        Rate Limiting Action
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input['CisRateLimitActionArgs']):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Input[_builtins.str]:
        """
        CIS Intance CRN
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Input[_builtins.str]:
        """
        CIS Domain ID
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter
    def period(self) -> pulumi.Input[_builtins.float]:
        """
        Rate Limiting Period
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "period", value)

    @_builtins.property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[_builtins.float]:
        """
        Rate Limiting Threshold
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "threshold", value)

    @_builtins.property
    @pulumi.getter
    def bypasses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CisRateLimitBypassArgs']]]]:
        """
        Bypass URL
        """
        return pulumi.get(self, "bypasses")

    @bypasses.setter
    def bypasses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CisRateLimitBypassArgs']]]]):
        pulumi.set(self, "bypasses", value)

    @_builtins.property
    @pulumi.getter(name="cisRateLimitId")
    def cis_rate_limit_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_rate_limit_id")

    @cis_rate_limit_id.setter
    def cis_rate_limit_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_rate_limit_id", value)

    @_builtins.property
    @pulumi.getter
    def correlate(self) -> Optional[pulumi.Input['CisRateLimitCorrelateArgs']]:
        """
        Ratelimiting Correlate
        """
        return pulumi.get(self, "correlate")

    @correlate.setter
    def correlate(self, value: Optional[pulumi.Input['CisRateLimitCorrelateArgs']]):
        pulumi.set(self, "correlate", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A note that you can use to describe the reason for a rate limiting rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether this rate limiting rule is currently disabled.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disabled", value)

    @_builtins.property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input['CisRateLimitMatchArgs']]:
        """
        Rate Limiting Match
        """
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input['CisRateLimitMatchArgs']]):
        pulumi.set(self, "match", value)


@pulumi.input_type
class _CisRateLimitState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input['CisRateLimitActionArgs']] = None,
                 bypasses: Optional[pulumi.Input[Sequence[pulumi.Input['CisRateLimitBypassArgs']]]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_rate_limit_id: Optional[pulumi.Input[_builtins.str]] = None,
                 correlate: Optional[pulumi.Input['CisRateLimitCorrelateArgs']] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 disabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 match: Optional[pulumi.Input['CisRateLimitMatchArgs']] = None,
                 period: Optional[pulumi.Input[_builtins.float]] = None,
                 rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 threshold: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering CisRateLimit resources.
        :param pulumi.Input['CisRateLimitActionArgs'] action: Rate Limiting Action
        :param pulumi.Input[Sequence[pulumi.Input['CisRateLimitBypassArgs']]] bypasses: Bypass URL
        :param pulumi.Input[_builtins.str] cis_id: CIS Intance CRN
        :param pulumi.Input['CisRateLimitCorrelateArgs'] correlate: Ratelimiting Correlate
        :param pulumi.Input[_builtins.str] description: A note that you can use to describe the reason for a rate limiting rule.
        :param pulumi.Input[_builtins.bool] disabled: Whether this rate limiting rule is currently disabled.
        :param pulumi.Input[_builtins.str] domain_id: CIS Domain ID
        :param pulumi.Input['CisRateLimitMatchArgs'] match: Rate Limiting Match
        :param pulumi.Input[_builtins.float] period: Rate Limiting Period
        :param pulumi.Input[_builtins.str] rule_id: Rate Limit rule Id
        :param pulumi.Input[_builtins.float] threshold: Rate Limiting Threshold
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if bypasses is not None:
            pulumi.set(__self__, "bypasses", bypasses)
        if cis_id is not None:
            pulumi.set(__self__, "cis_id", cis_id)
        if cis_rate_limit_id is not None:
            pulumi.set(__self__, "cis_rate_limit_id", cis_rate_limit_id)
        if correlate is not None:
            pulumi.set(__self__, "correlate", correlate)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input['CisRateLimitActionArgs']]:
        """
        Rate Limiting Action
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input['CisRateLimitActionArgs']]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter
    def bypasses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CisRateLimitBypassArgs']]]]:
        """
        Bypass URL
        """
        return pulumi.get(self, "bypasses")

    @bypasses.setter
    def bypasses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CisRateLimitBypassArgs']]]]):
        pulumi.set(self, "bypasses", value)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CIS Intance CRN
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter(name="cisRateLimitId")
    def cis_rate_limit_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_rate_limit_id")

    @cis_rate_limit_id.setter
    def cis_rate_limit_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_rate_limit_id", value)

    @_builtins.property
    @pulumi.getter
    def correlate(self) -> Optional[pulumi.Input['CisRateLimitCorrelateArgs']]:
        """
        Ratelimiting Correlate
        """
        return pulumi.get(self, "correlate")

    @correlate.setter
    def correlate(self, value: Optional[pulumi.Input['CisRateLimitCorrelateArgs']]):
        pulumi.set(self, "correlate", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A note that you can use to describe the reason for a rate limiting rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether this rate limiting rule is currently disabled.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disabled", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CIS Domain ID
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input['CisRateLimitMatchArgs']]:
        """
        Rate Limiting Match
        """
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input['CisRateLimitMatchArgs']]):
        pulumi.set(self, "match", value)

    @_builtins.property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Rate Limiting Period
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "period", value)

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Rate Limit rule Id
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rule_id", value)

    @_builtins.property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Rate Limiting Threshold
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "threshold", value)


@pulumi.type_token("ibm:index/cisRateLimit:CisRateLimit")
class CisRateLimit(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[Union['CisRateLimitActionArgs', 'CisRateLimitActionArgsDict']]] = None,
                 bypasses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CisRateLimitBypassArgs', 'CisRateLimitBypassArgsDict']]]]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_rate_limit_id: Optional[pulumi.Input[_builtins.str]] = None,
                 correlate: Optional[pulumi.Input[Union['CisRateLimitCorrelateArgs', 'CisRateLimitCorrelateArgsDict']]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 disabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 match: Optional[pulumi.Input[Union['CisRateLimitMatchArgs', 'CisRateLimitMatchArgsDict']]] = None,
                 period: Optional[pulumi.Input[_builtins.float]] = None,
                 threshold: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a CisRateLimit resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['CisRateLimitActionArgs', 'CisRateLimitActionArgsDict']] action: Rate Limiting Action
        :param pulumi.Input[Sequence[pulumi.Input[Union['CisRateLimitBypassArgs', 'CisRateLimitBypassArgsDict']]]] bypasses: Bypass URL
        :param pulumi.Input[_builtins.str] cis_id: CIS Intance CRN
        :param pulumi.Input[Union['CisRateLimitCorrelateArgs', 'CisRateLimitCorrelateArgsDict']] correlate: Ratelimiting Correlate
        :param pulumi.Input[_builtins.str] description: A note that you can use to describe the reason for a rate limiting rule.
        :param pulumi.Input[_builtins.bool] disabled: Whether this rate limiting rule is currently disabled.
        :param pulumi.Input[_builtins.str] domain_id: CIS Domain ID
        :param pulumi.Input[Union['CisRateLimitMatchArgs', 'CisRateLimitMatchArgsDict']] match: Rate Limiting Match
        :param pulumi.Input[_builtins.float] period: Rate Limiting Period
        :param pulumi.Input[_builtins.float] threshold: Rate Limiting Threshold
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CisRateLimitArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CisRateLimit resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CisRateLimitArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CisRateLimitArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[Union['CisRateLimitActionArgs', 'CisRateLimitActionArgsDict']]] = None,
                 bypasses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CisRateLimitBypassArgs', 'CisRateLimitBypassArgsDict']]]]] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_rate_limit_id: Optional[pulumi.Input[_builtins.str]] = None,
                 correlate: Optional[pulumi.Input[Union['CisRateLimitCorrelateArgs', 'CisRateLimitCorrelateArgsDict']]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 disabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 match: Optional[pulumi.Input[Union['CisRateLimitMatchArgs', 'CisRateLimitMatchArgsDict']]] = None,
                 period: Optional[pulumi.Input[_builtins.float]] = None,
                 threshold: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CisRateLimitArgs.__new__(CisRateLimitArgs)

            if action is None and not opts.urn:
                raise TypeError("Missing required property 'action'")
            __props__.__dict__["action"] = action
            __props__.__dict__["bypasses"] = bypasses
            if cis_id is None and not opts.urn:
                raise TypeError("Missing required property 'cis_id'")
            __props__.__dict__["cis_id"] = cis_id
            __props__.__dict__["cis_rate_limit_id"] = cis_rate_limit_id
            __props__.__dict__["correlate"] = correlate
            __props__.__dict__["description"] = description
            __props__.__dict__["disabled"] = disabled
            if domain_id is None and not opts.urn:
                raise TypeError("Missing required property 'domain_id'")
            __props__.__dict__["domain_id"] = domain_id
            __props__.__dict__["match"] = match
            if period is None and not opts.urn:
                raise TypeError("Missing required property 'period'")
            __props__.__dict__["period"] = period
            if threshold is None and not opts.urn:
                raise TypeError("Missing required property 'threshold'")
            __props__.__dict__["threshold"] = threshold
            __props__.__dict__["rule_id"] = None
        super(CisRateLimit, __self__).__init__(
            'ibm:index/cisRateLimit:CisRateLimit',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[Union['CisRateLimitActionArgs', 'CisRateLimitActionArgsDict']]] = None,
            bypasses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CisRateLimitBypassArgs', 'CisRateLimitBypassArgsDict']]]]] = None,
            cis_id: Optional[pulumi.Input[_builtins.str]] = None,
            cis_rate_limit_id: Optional[pulumi.Input[_builtins.str]] = None,
            correlate: Optional[pulumi.Input[Union['CisRateLimitCorrelateArgs', 'CisRateLimitCorrelateArgsDict']]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            disabled: Optional[pulumi.Input[_builtins.bool]] = None,
            domain_id: Optional[pulumi.Input[_builtins.str]] = None,
            match: Optional[pulumi.Input[Union['CisRateLimitMatchArgs', 'CisRateLimitMatchArgsDict']]] = None,
            period: Optional[pulumi.Input[_builtins.float]] = None,
            rule_id: Optional[pulumi.Input[_builtins.str]] = None,
            threshold: Optional[pulumi.Input[_builtins.float]] = None) -> 'CisRateLimit':
        """
        Get an existing CisRateLimit resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['CisRateLimitActionArgs', 'CisRateLimitActionArgsDict']] action: Rate Limiting Action
        :param pulumi.Input[Sequence[pulumi.Input[Union['CisRateLimitBypassArgs', 'CisRateLimitBypassArgsDict']]]] bypasses: Bypass URL
        :param pulumi.Input[_builtins.str] cis_id: CIS Intance CRN
        :param pulumi.Input[Union['CisRateLimitCorrelateArgs', 'CisRateLimitCorrelateArgsDict']] correlate: Ratelimiting Correlate
        :param pulumi.Input[_builtins.str] description: A note that you can use to describe the reason for a rate limiting rule.
        :param pulumi.Input[_builtins.bool] disabled: Whether this rate limiting rule is currently disabled.
        :param pulumi.Input[_builtins.str] domain_id: CIS Domain ID
        :param pulumi.Input[Union['CisRateLimitMatchArgs', 'CisRateLimitMatchArgsDict']] match: Rate Limiting Match
        :param pulumi.Input[_builtins.float] period: Rate Limiting Period
        :param pulumi.Input[_builtins.str] rule_id: Rate Limit rule Id
        :param pulumi.Input[_builtins.float] threshold: Rate Limiting Threshold
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CisRateLimitState.__new__(_CisRateLimitState)

        __props__.__dict__["action"] = action
        __props__.__dict__["bypasses"] = bypasses
        __props__.__dict__["cis_id"] = cis_id
        __props__.__dict__["cis_rate_limit_id"] = cis_rate_limit_id
        __props__.__dict__["correlate"] = correlate
        __props__.__dict__["description"] = description
        __props__.__dict__["disabled"] = disabled
        __props__.__dict__["domain_id"] = domain_id
        __props__.__dict__["match"] = match
        __props__.__dict__["period"] = period
        __props__.__dict__["rule_id"] = rule_id
        __props__.__dict__["threshold"] = threshold
        return CisRateLimit(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Output['outputs.CisRateLimitAction']:
        """
        Rate Limiting Action
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter
    def bypasses(self) -> pulumi.Output[Optional[Sequence['outputs.CisRateLimitBypass']]]:
        """
        Bypass URL
        """
        return pulumi.get(self, "bypasses")

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Output[_builtins.str]:
        """
        CIS Intance CRN
        """
        return pulumi.get(self, "cis_id")

    @_builtins.property
    @pulumi.getter(name="cisRateLimitId")
    def cis_rate_limit_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cis_rate_limit_id")

    @_builtins.property
    @pulumi.getter
    def correlate(self) -> pulumi.Output[Optional['outputs.CisRateLimitCorrelate']]:
        """
        Ratelimiting Correlate
        """
        return pulumi.get(self, "correlate")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        A note that you can use to describe the reason for a rate limiting rule.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def disabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Whether this rate limiting rule is currently disabled.
        """
        return pulumi.get(self, "disabled")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Output[_builtins.str]:
        """
        CIS Domain ID
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter
    def match(self) -> pulumi.Output[Optional['outputs.CisRateLimitMatch']]:
        """
        Rate Limiting Match
        """
        return pulumi.get(self, "match")

    @_builtins.property
    @pulumi.getter
    def period(self) -> pulumi.Output[_builtins.float]:
        """
        Rate Limiting Period
        """
        return pulumi.get(self, "period")

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> pulumi.Output[_builtins.str]:
        """
        Rate Limit rule Id
        """
        return pulumi.get(self, "rule_id")

    @_builtins.property
    @pulumi.getter
    def threshold(self) -> pulumi.Output[_builtins.float]:
        """
        Rate Limiting Threshold
        """
        return pulumi.get(self, "threshold")

