# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetLogsPolicyResult',
    'AwaitableGetLogsPolicyResult',
    'get_logs_policy',
    'get_logs_policy_output',
]

@pulumi.output_type
class GetLogsPolicyResult:
    """
    A collection of values returned by getLogsPolicy.
    """
    def __init__(__self__, application_rules=None, archive_retentions=None, company_id=None, created_at=None, deleted=None, description=None, enabled=None, endpoint_type=None, id=None, instance_id=None, log_rules=None, logs_policy_id=None, name=None, order=None, priority=None, region=None, subsystem_rules=None, updated_at=None):
        if application_rules and not isinstance(application_rules, list):
            raise TypeError("Expected argument 'application_rules' to be a list")
        pulumi.set(__self__, "application_rules", application_rules)
        if archive_retentions and not isinstance(archive_retentions, list):
            raise TypeError("Expected argument 'archive_retentions' to be a list")
        pulumi.set(__self__, "archive_retentions", archive_retentions)
        if company_id and not isinstance(company_id, float):
            raise TypeError("Expected argument 'company_id' to be a float")
        pulumi.set(__self__, "company_id", company_id)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if deleted and not isinstance(deleted, bool):
            raise TypeError("Expected argument 'deleted' to be a bool")
        pulumi.set(__self__, "deleted", deleted)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if endpoint_type and not isinstance(endpoint_type, str):
            raise TypeError("Expected argument 'endpoint_type' to be a str")
        pulumi.set(__self__, "endpoint_type", endpoint_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if log_rules and not isinstance(log_rules, list):
            raise TypeError("Expected argument 'log_rules' to be a list")
        pulumi.set(__self__, "log_rules", log_rules)
        if logs_policy_id and not isinstance(logs_policy_id, str):
            raise TypeError("Expected argument 'logs_policy_id' to be a str")
        pulumi.set(__self__, "logs_policy_id", logs_policy_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if order and not isinstance(order, float):
            raise TypeError("Expected argument 'order' to be a float")
        pulumi.set(__self__, "order", order)
        if priority and not isinstance(priority, str):
            raise TypeError("Expected argument 'priority' to be a str")
        pulumi.set(__self__, "priority", priority)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if subsystem_rules and not isinstance(subsystem_rules, list):
            raise TypeError("Expected argument 'subsystem_rules' to be a list")
        pulumi.set(__self__, "subsystem_rules", subsystem_rules)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="applicationRules")
    def application_rules(self) -> Sequence['outputs.GetLogsPolicyApplicationRuleResult']:
        return pulumi.get(self, "application_rules")

    @_builtins.property
    @pulumi.getter(name="archiveRetentions")
    def archive_retentions(self) -> Sequence['outputs.GetLogsPolicyArchiveRetentionResult']:
        return pulumi.get(self, "archive_retentions")

    @_builtins.property
    @pulumi.getter(name="companyId")
    def company_id(self) -> _builtins.float:
        return pulumi.get(self, "company_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def deleted(self) -> _builtins.bool:
        return pulumi.get(self, "deleted")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="logRules")
    def log_rules(self) -> Sequence['outputs.GetLogsPolicyLogRuleResult']:
        return pulumi.get(self, "log_rules")

    @_builtins.property
    @pulumi.getter(name="logsPolicyId")
    def logs_policy_id(self) -> _builtins.str:
        return pulumi.get(self, "logs_policy_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def order(self) -> _builtins.float:
        return pulumi.get(self, "order")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.str:
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="subsystemRules")
    def subsystem_rules(self) -> Sequence['outputs.GetLogsPolicySubsystemRuleResult']:
        return pulumi.get(self, "subsystem_rules")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")


class AwaitableGetLogsPolicyResult(GetLogsPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLogsPolicyResult(
            application_rules=self.application_rules,
            archive_retentions=self.archive_retentions,
            company_id=self.company_id,
            created_at=self.created_at,
            deleted=self.deleted,
            description=self.description,
            enabled=self.enabled,
            endpoint_type=self.endpoint_type,
            id=self.id,
            instance_id=self.instance_id,
            log_rules=self.log_rules,
            logs_policy_id=self.logs_policy_id,
            name=self.name,
            order=self.order,
            priority=self.priority,
            region=self.region,
            subsystem_rules=self.subsystem_rules,
            updated_at=self.updated_at)


def get_logs_policy(endpoint_type: Optional[_builtins.str] = None,
                    id: Optional[_builtins.str] = None,
                    instance_id: Optional[_builtins.str] = None,
                    logs_policy_id: Optional[_builtins.str] = None,
                    region: Optional[_builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLogsPolicyResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['logsPolicyId'] = logs_policy_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getLogsPolicy:getLogsPolicy', __args__, opts=opts, typ=GetLogsPolicyResult, package_ref=_utilities.get_package()).value

    return AwaitableGetLogsPolicyResult(
        application_rules=pulumi.get(__ret__, 'application_rules'),
        archive_retentions=pulumi.get(__ret__, 'archive_retentions'),
        company_id=pulumi.get(__ret__, 'company_id'),
        created_at=pulumi.get(__ret__, 'created_at'),
        deleted=pulumi.get(__ret__, 'deleted'),
        description=pulumi.get(__ret__, 'description'),
        enabled=pulumi.get(__ret__, 'enabled'),
        endpoint_type=pulumi.get(__ret__, 'endpoint_type'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        log_rules=pulumi.get(__ret__, 'log_rules'),
        logs_policy_id=pulumi.get(__ret__, 'logs_policy_id'),
        name=pulumi.get(__ret__, 'name'),
        order=pulumi.get(__ret__, 'order'),
        priority=pulumi.get(__ret__, 'priority'),
        region=pulumi.get(__ret__, 'region'),
        subsystem_rules=pulumi.get(__ret__, 'subsystem_rules'),
        updated_at=pulumi.get(__ret__, 'updated_at'))
def get_logs_policy_output(endpoint_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                           logs_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                           region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetLogsPolicyResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['logsPolicyId'] = logs_policy_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getLogsPolicy:getLogsPolicy', __args__, opts=opts, typ=GetLogsPolicyResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetLogsPolicyResult(
        application_rules=pulumi.get(__response__, 'application_rules'),
        archive_retentions=pulumi.get(__response__, 'archive_retentions'),
        company_id=pulumi.get(__response__, 'company_id'),
        created_at=pulumi.get(__response__, 'created_at'),
        deleted=pulumi.get(__response__, 'deleted'),
        description=pulumi.get(__response__, 'description'),
        enabled=pulumi.get(__response__, 'enabled'),
        endpoint_type=pulumi.get(__response__, 'endpoint_type'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        log_rules=pulumi.get(__response__, 'log_rules'),
        logs_policy_id=pulumi.get(__response__, 'logs_policy_id'),
        name=pulumi.get(__response__, 'name'),
        order=pulumi.get(__response__, 'order'),
        priority=pulumi.get(__response__, 'priority'),
        region=pulumi.get(__response__, 'region'),
        subsystem_rules=pulumi.get(__response__, 'subsystem_rules'),
        updated_at=pulumi.get(__response__, 'updated_at')))
