# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CosBucketWebsiteConfigurationArgs', 'CosBucketWebsiteConfiguration']

@pulumi.input_type
class CosBucketWebsiteConfigurationArgs:
    def __init__(__self__, *,
                 bucket_crn: pulumi.Input[_builtins.str],
                 bucket_location: pulumi.Input[_builtins.str],
                 website_configuration: pulumi.Input['CosBucketWebsiteConfigurationWebsiteConfigurationArgs'],
                 cos_bucket_website_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['CosBucketWebsiteConfigurationTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a CosBucketWebsiteConfiguration resource.
        :param pulumi.Input[_builtins.str] bucket_crn: COS bucket CRN
        :param pulumi.Input[_builtins.str] bucket_location: COS bucket location
        :param pulumi.Input['CosBucketWebsiteConfigurationWebsiteConfigurationArgs'] website_configuration: Configuration for Hosting a static website on COS with public access.
        :param pulumi.Input[_builtins.str] endpoint_type: COS endpoint type: public, private, direct
        """
        pulumi.set(__self__, "bucket_crn", bucket_crn)
        pulumi.set(__self__, "bucket_location", bucket_location)
        pulumi.set(__self__, "website_configuration", website_configuration)
        if cos_bucket_website_configuration_id is not None:
            pulumi.set(__self__, "cos_bucket_website_configuration_id", cos_bucket_website_configuration_id)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="bucketCrn")
    def bucket_crn(self) -> pulumi.Input[_builtins.str]:
        """
        COS bucket CRN
        """
        return pulumi.get(self, "bucket_crn")

    @bucket_crn.setter
    def bucket_crn(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "bucket_crn", value)

    @_builtins.property
    @pulumi.getter(name="bucketLocation")
    def bucket_location(self) -> pulumi.Input[_builtins.str]:
        """
        COS bucket location
        """
        return pulumi.get(self, "bucket_location")

    @bucket_location.setter
    def bucket_location(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "bucket_location", value)

    @_builtins.property
    @pulumi.getter(name="websiteConfiguration")
    def website_configuration(self) -> pulumi.Input['CosBucketWebsiteConfigurationWebsiteConfigurationArgs']:
        """
        Configuration for Hosting a static website on COS with public access.
        """
        return pulumi.get(self, "website_configuration")

    @website_configuration.setter
    def website_configuration(self, value: pulumi.Input['CosBucketWebsiteConfigurationWebsiteConfigurationArgs']):
        pulumi.set(self, "website_configuration", value)

    @_builtins.property
    @pulumi.getter(name="cosBucketWebsiteConfigurationId")
    def cos_bucket_website_configuration_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cos_bucket_website_configuration_id")

    @cos_bucket_website_configuration_id.setter
    def cos_bucket_website_configuration_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cos_bucket_website_configuration_id", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        COS endpoint type: public, private, direct
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['CosBucketWebsiteConfigurationTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['CosBucketWebsiteConfigurationTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _CosBucketWebsiteConfigurationState:
    def __init__(__self__, *,
                 bucket_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 bucket_location: Optional[pulumi.Input[_builtins.str]] = None,
                 cos_bucket_website_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['CosBucketWebsiteConfigurationTimeoutsArgs']] = None,
                 website_configuration: Optional[pulumi.Input['CosBucketWebsiteConfigurationWebsiteConfigurationArgs']] = None,
                 website_endpoint: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CosBucketWebsiteConfiguration resources.
        :param pulumi.Input[_builtins.str] bucket_crn: COS bucket CRN
        :param pulumi.Input[_builtins.str] bucket_location: COS bucket location
        :param pulumi.Input[_builtins.str] endpoint_type: COS endpoint type: public, private, direct
        :param pulumi.Input['CosBucketWebsiteConfigurationWebsiteConfigurationArgs'] website_configuration: Configuration for Hosting a static website on COS with public access.
        """
        if bucket_crn is not None:
            pulumi.set(__self__, "bucket_crn", bucket_crn)
        if bucket_location is not None:
            pulumi.set(__self__, "bucket_location", bucket_location)
        if cos_bucket_website_configuration_id is not None:
            pulumi.set(__self__, "cos_bucket_website_configuration_id", cos_bucket_website_configuration_id)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if website_configuration is not None:
            pulumi.set(__self__, "website_configuration", website_configuration)
        if website_endpoint is not None:
            pulumi.set(__self__, "website_endpoint", website_endpoint)

    @_builtins.property
    @pulumi.getter(name="bucketCrn")
    def bucket_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        COS bucket CRN
        """
        return pulumi.get(self, "bucket_crn")

    @bucket_crn.setter
    def bucket_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bucket_crn", value)

    @_builtins.property
    @pulumi.getter(name="bucketLocation")
    def bucket_location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        COS bucket location
        """
        return pulumi.get(self, "bucket_location")

    @bucket_location.setter
    def bucket_location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bucket_location", value)

    @_builtins.property
    @pulumi.getter(name="cosBucketWebsiteConfigurationId")
    def cos_bucket_website_configuration_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cos_bucket_website_configuration_id")

    @cos_bucket_website_configuration_id.setter
    def cos_bucket_website_configuration_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cos_bucket_website_configuration_id", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        COS endpoint type: public, private, direct
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['CosBucketWebsiteConfigurationTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['CosBucketWebsiteConfigurationTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="websiteConfiguration")
    def website_configuration(self) -> Optional[pulumi.Input['CosBucketWebsiteConfigurationWebsiteConfigurationArgs']]:
        """
        Configuration for Hosting a static website on COS with public access.
        """
        return pulumi.get(self, "website_configuration")

    @website_configuration.setter
    def website_configuration(self, value: Optional[pulumi.Input['CosBucketWebsiteConfigurationWebsiteConfigurationArgs']]):
        pulumi.set(self, "website_configuration", value)

    @_builtins.property
    @pulumi.getter(name="websiteEndpoint")
    def website_endpoint(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "website_endpoint")

    @website_endpoint.setter
    def website_endpoint(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "website_endpoint", value)


@pulumi.type_token("ibm:index/cosBucketWebsiteConfiguration:CosBucketWebsiteConfiguration")
class CosBucketWebsiteConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 bucket_location: Optional[pulumi.Input[_builtins.str]] = None,
                 cos_bucket_website_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['CosBucketWebsiteConfigurationTimeoutsArgs', 'CosBucketWebsiteConfigurationTimeoutsArgsDict']]] = None,
                 website_configuration: Optional[pulumi.Input[Union['CosBucketWebsiteConfigurationWebsiteConfigurationArgs', 'CosBucketWebsiteConfigurationWebsiteConfigurationArgsDict']]] = None,
                 __props__=None):
        """
        Create a CosBucketWebsiteConfiguration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] bucket_crn: COS bucket CRN
        :param pulumi.Input[_builtins.str] bucket_location: COS bucket location
        :param pulumi.Input[_builtins.str] endpoint_type: COS endpoint type: public, private, direct
        :param pulumi.Input[Union['CosBucketWebsiteConfigurationWebsiteConfigurationArgs', 'CosBucketWebsiteConfigurationWebsiteConfigurationArgsDict']] website_configuration: Configuration for Hosting a static website on COS with public access.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CosBucketWebsiteConfigurationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CosBucketWebsiteConfiguration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CosBucketWebsiteConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CosBucketWebsiteConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 bucket_location: Optional[pulumi.Input[_builtins.str]] = None,
                 cos_bucket_website_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['CosBucketWebsiteConfigurationTimeoutsArgs', 'CosBucketWebsiteConfigurationTimeoutsArgsDict']]] = None,
                 website_configuration: Optional[pulumi.Input[Union['CosBucketWebsiteConfigurationWebsiteConfigurationArgs', 'CosBucketWebsiteConfigurationWebsiteConfigurationArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CosBucketWebsiteConfigurationArgs.__new__(CosBucketWebsiteConfigurationArgs)

            if bucket_crn is None and not opts.urn:
                raise TypeError("Missing required property 'bucket_crn'")
            __props__.__dict__["bucket_crn"] = bucket_crn
            if bucket_location is None and not opts.urn:
                raise TypeError("Missing required property 'bucket_location'")
            __props__.__dict__["bucket_location"] = bucket_location
            __props__.__dict__["cos_bucket_website_configuration_id"] = cos_bucket_website_configuration_id
            __props__.__dict__["endpoint_type"] = endpoint_type
            __props__.__dict__["timeouts"] = timeouts
            if website_configuration is None and not opts.urn:
                raise TypeError("Missing required property 'website_configuration'")
            __props__.__dict__["website_configuration"] = website_configuration
            __props__.__dict__["website_endpoint"] = None
        super(CosBucketWebsiteConfiguration, __self__).__init__(
            'ibm:index/cosBucketWebsiteConfiguration:CosBucketWebsiteConfiguration',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bucket_crn: Optional[pulumi.Input[_builtins.str]] = None,
            bucket_location: Optional[pulumi.Input[_builtins.str]] = None,
            cos_bucket_website_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
            endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['CosBucketWebsiteConfigurationTimeoutsArgs', 'CosBucketWebsiteConfigurationTimeoutsArgsDict']]] = None,
            website_configuration: Optional[pulumi.Input[Union['CosBucketWebsiteConfigurationWebsiteConfigurationArgs', 'CosBucketWebsiteConfigurationWebsiteConfigurationArgsDict']]] = None,
            website_endpoint: Optional[pulumi.Input[_builtins.str]] = None) -> 'CosBucketWebsiteConfiguration':
        """
        Get an existing CosBucketWebsiteConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] bucket_crn: COS bucket CRN
        :param pulumi.Input[_builtins.str] bucket_location: COS bucket location
        :param pulumi.Input[_builtins.str] endpoint_type: COS endpoint type: public, private, direct
        :param pulumi.Input[Union['CosBucketWebsiteConfigurationWebsiteConfigurationArgs', 'CosBucketWebsiteConfigurationWebsiteConfigurationArgsDict']] website_configuration: Configuration for Hosting a static website on COS with public access.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CosBucketWebsiteConfigurationState.__new__(_CosBucketWebsiteConfigurationState)

        __props__.__dict__["bucket_crn"] = bucket_crn
        __props__.__dict__["bucket_location"] = bucket_location
        __props__.__dict__["cos_bucket_website_configuration_id"] = cos_bucket_website_configuration_id
        __props__.__dict__["endpoint_type"] = endpoint_type
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["website_configuration"] = website_configuration
        __props__.__dict__["website_endpoint"] = website_endpoint
        return CosBucketWebsiteConfiguration(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="bucketCrn")
    def bucket_crn(self) -> pulumi.Output[_builtins.str]:
        """
        COS bucket CRN
        """
        return pulumi.get(self, "bucket_crn")

    @_builtins.property
    @pulumi.getter(name="bucketLocation")
    def bucket_location(self) -> pulumi.Output[_builtins.str]:
        """
        COS bucket location
        """
        return pulumi.get(self, "bucket_location")

    @_builtins.property
    @pulumi.getter(name="cosBucketWebsiteConfigurationId")
    def cos_bucket_website_configuration_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cos_bucket_website_configuration_id")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        COS endpoint type: public, private, direct
        """
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.CosBucketWebsiteConfigurationTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter(name="websiteConfiguration")
    def website_configuration(self) -> pulumi.Output['outputs.CosBucketWebsiteConfigurationWebsiteConfiguration']:
        """
        Configuration for Hosting a static website on COS with public access.
        """
        return pulumi.get(self, "website_configuration")

    @_builtins.property
    @pulumi.getter(name="websiteEndpoint")
    def website_endpoint(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "website_endpoint")

