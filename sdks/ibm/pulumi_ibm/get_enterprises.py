# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetEnterprisesResult',
    'AwaitableGetEnterprisesResult',
    'get_enterprises',
    'get_enterprises_output',
]

@pulumi.output_type
class GetEnterprisesResult:
    """
    A collection of values returned by getEnterprises.
    """
    def __init__(__self__, enterprises=None, id=None, name=None):
        if enterprises and not isinstance(enterprises, list):
            raise TypeError("Expected argument 'enterprises' to be a list")
        pulumi.set(__self__, "enterprises", enterprises)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def enterprises(self) -> Sequence['outputs.GetEnterprisesEnterpriseResult']:
        return pulumi.get(self, "enterprises")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")


class AwaitableGetEnterprisesResult(GetEnterprisesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEnterprisesResult(
            enterprises=self.enterprises,
            id=self.id,
            name=self.name)


def get_enterprises(id: Optional[_builtins.str] = None,
                    name: Optional[_builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEnterprisesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getEnterprises:getEnterprises', __args__, opts=opts, typ=GetEnterprisesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetEnterprisesResult(
        enterprises=pulumi.get(__ret__, 'enterprises'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'))
def get_enterprises_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEnterprisesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getEnterprises:getEnterprises', __args__, opts=opts, typ=GetEnterprisesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetEnterprisesResult(
        enterprises=pulumi.get(__response__, 'enterprises'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name')))
