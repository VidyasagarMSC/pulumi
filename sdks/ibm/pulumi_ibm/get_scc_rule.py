# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetSccRuleResult',
    'AwaitableGetSccRuleResult',
    'get_scc_rule',
    'get_scc_rule_output',
]

@pulumi.output_type
class GetSccRuleResult:
    """
    A collection of values returned by getSccRule.
    """
    def __init__(__self__, account_id=None, created_by=None, created_on=None, description=None, id=None, imports=None, instance_id=None, labels=None, required_configs=None, rule_id=None, targets=None, timeouts=None, type=None, updated_by=None, updated_on=None, version=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if created_on and not isinstance(created_on, str):
            raise TypeError("Expected argument 'created_on' to be a str")
        pulumi.set(__self__, "created_on", created_on)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if imports and not isinstance(imports, list):
            raise TypeError("Expected argument 'imports' to be a list")
        pulumi.set(__self__, "imports", imports)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if labels and not isinstance(labels, list):
            raise TypeError("Expected argument 'labels' to be a list")
        pulumi.set(__self__, "labels", labels)
        if required_configs and not isinstance(required_configs, list):
            raise TypeError("Expected argument 'required_configs' to be a list")
        pulumi.set(__self__, "required_configs", required_configs)
        if rule_id and not isinstance(rule_id, str):
            raise TypeError("Expected argument 'rule_id' to be a str")
        pulumi.set(__self__, "rule_id", rule_id)
        if targets and not isinstance(targets, list):
            raise TypeError("Expected argument 'targets' to be a list")
        pulumi.set(__self__, "targets", targets)
        if timeouts and not isinstance(timeouts, dict):
            raise TypeError("Expected argument 'timeouts' to be a dict")
        pulumi.set(__self__, "timeouts", timeouts)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if updated_by and not isinstance(updated_by, str):
            raise TypeError("Expected argument 'updated_by' to be a str")
        pulumi.set(__self__, "updated_by", updated_by)
        if updated_on and not isinstance(updated_on, str):
            raise TypeError("Expected argument 'updated_on' to be a str")
        pulumi.set(__self__, "updated_on", updated_on)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> _builtins.str:
        return pulumi.get(self, "created_on")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def imports(self) -> Sequence['outputs.GetSccRuleImportResult']:
        return pulumi.get(self, "imports")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="requiredConfigs")
    def required_configs(self) -> Sequence['outputs.GetSccRuleRequiredConfigResult']:
        return pulumi.get(self, "required_configs")

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> _builtins.str:
        return pulumi.get(self, "rule_id")

    @_builtins.property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetSccRuleTargetResult']:
        return pulumi.get(self, "targets")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional['outputs.GetSccRuleTimeoutsResult']:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> _builtins.str:
        return pulumi.get(self, "updated_by")

    @_builtins.property
    @pulumi.getter(name="updatedOn")
    def updated_on(self) -> _builtins.str:
        return pulumi.get(self, "updated_on")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        return pulumi.get(self, "version")


class AwaitableGetSccRuleResult(GetSccRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSccRuleResult(
            account_id=self.account_id,
            created_by=self.created_by,
            created_on=self.created_on,
            description=self.description,
            id=self.id,
            imports=self.imports,
            instance_id=self.instance_id,
            labels=self.labels,
            required_configs=self.required_configs,
            rule_id=self.rule_id,
            targets=self.targets,
            timeouts=self.timeouts,
            type=self.type,
            updated_by=self.updated_by,
            updated_on=self.updated_on,
            version=self.version)


def get_scc_rule(instance_id: Optional[_builtins.str] = None,
                 rule_id: Optional[_builtins.str] = None,
                 timeouts: Optional[Union['GetSccRuleTimeoutsArgs', 'GetSccRuleTimeoutsArgsDict']] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSccRuleResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['ruleId'] = rule_id
    __args__['timeouts'] = timeouts
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSccRule:getSccRule', __args__, opts=opts, typ=GetSccRuleResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSccRuleResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        created_by=pulumi.get(__ret__, 'created_by'),
        created_on=pulumi.get(__ret__, 'created_on'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        imports=pulumi.get(__ret__, 'imports'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        labels=pulumi.get(__ret__, 'labels'),
        required_configs=pulumi.get(__ret__, 'required_configs'),
        rule_id=pulumi.get(__ret__, 'rule_id'),
        targets=pulumi.get(__ret__, 'targets'),
        timeouts=pulumi.get(__ret__, 'timeouts'),
        type=pulumi.get(__ret__, 'type'),
        updated_by=pulumi.get(__ret__, 'updated_by'),
        updated_on=pulumi.get(__ret__, 'updated_on'),
        version=pulumi.get(__ret__, 'version'))
def get_scc_rule_output(instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                        rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                        timeouts: Optional[pulumi.Input[Optional[Union['GetSccRuleTimeoutsArgs', 'GetSccRuleTimeoutsArgsDict']]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSccRuleResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['ruleId'] = rule_id
    __args__['timeouts'] = timeouts
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSccRule:getSccRule', __args__, opts=opts, typ=GetSccRuleResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSccRuleResult(
        account_id=pulumi.get(__response__, 'account_id'),
        created_by=pulumi.get(__response__, 'created_by'),
        created_on=pulumi.get(__response__, 'created_on'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        imports=pulumi.get(__response__, 'imports'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        labels=pulumi.get(__response__, 'labels'),
        required_configs=pulumi.get(__response__, 'required_configs'),
        rule_id=pulumi.get(__response__, 'rule_id'),
        targets=pulumi.get(__response__, 'targets'),
        timeouts=pulumi.get(__response__, 'timeouts'),
        type=pulumi.get(__response__, 'type'),
        updated_by=pulumi.get(__response__, 'updated_by'),
        updated_on=pulumi.get(__response__, 'updated_on'),
        version=pulumi.get(__response__, 'version')))
