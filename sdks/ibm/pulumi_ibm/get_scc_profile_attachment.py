# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSccProfileAttachmentResult',
    'AwaitableGetSccProfileAttachmentResult',
    'get_scc_profile_attachment',
    'get_scc_profile_attachment_output',
]

@pulumi.output_type
class GetSccProfileAttachmentResult:
    """
    A collection of values returned by getSccProfileAttachment.
    """
    def __init__(__self__, account_id=None, attachment_id=None, attachment_item_id=None, attachment_parameters=None, created_by=None, created_on=None, description=None, id=None, instance_id=None, last_scans=None, name=None, next_scan_time=None, notifications=None, profile_id=None, schedule=None, scopes=None, status=None, updated_by=None, updated_on=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if attachment_id and not isinstance(attachment_id, str):
            raise TypeError("Expected argument 'attachment_id' to be a str")
        pulumi.set(__self__, "attachment_id", attachment_id)
        if attachment_item_id and not isinstance(attachment_item_id, str):
            raise TypeError("Expected argument 'attachment_item_id' to be a str")
        pulumi.set(__self__, "attachment_item_id", attachment_item_id)
        if attachment_parameters and not isinstance(attachment_parameters, list):
            raise TypeError("Expected argument 'attachment_parameters' to be a list")
        pulumi.set(__self__, "attachment_parameters", attachment_parameters)
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if created_on and not isinstance(created_on, str):
            raise TypeError("Expected argument 'created_on' to be a str")
        pulumi.set(__self__, "created_on", created_on)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if last_scans and not isinstance(last_scans, list):
            raise TypeError("Expected argument 'last_scans' to be a list")
        pulumi.set(__self__, "last_scans", last_scans)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if next_scan_time and not isinstance(next_scan_time, str):
            raise TypeError("Expected argument 'next_scan_time' to be a str")
        pulumi.set(__self__, "next_scan_time", next_scan_time)
        if notifications and not isinstance(notifications, list):
            raise TypeError("Expected argument 'notifications' to be a list")
        pulumi.set(__self__, "notifications", notifications)
        if profile_id and not isinstance(profile_id, str):
            raise TypeError("Expected argument 'profile_id' to be a str")
        pulumi.set(__self__, "profile_id", profile_id)
        if schedule and not isinstance(schedule, str):
            raise TypeError("Expected argument 'schedule' to be a str")
        pulumi.set(__self__, "schedule", schedule)
        if scopes and not isinstance(scopes, list):
            raise TypeError("Expected argument 'scopes' to be a list")
        pulumi.set(__self__, "scopes", scopes)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if updated_by and not isinstance(updated_by, str):
            raise TypeError("Expected argument 'updated_by' to be a str")
        pulumi.set(__self__, "updated_by", updated_by)
        if updated_on and not isinstance(updated_on, str):
            raise TypeError("Expected argument 'updated_on' to be a str")
        pulumi.set(__self__, "updated_on", updated_on)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="attachmentId")
    def attachment_id(self) -> _builtins.str:
        return pulumi.get(self, "attachment_id")

    @_builtins.property
    @pulumi.getter(name="attachmentItemId")
    def attachment_item_id(self) -> _builtins.str:
        return pulumi.get(self, "attachment_item_id")

    @_builtins.property
    @pulumi.getter(name="attachmentParameters")
    def attachment_parameters(self) -> Sequence['outputs.GetSccProfileAttachmentAttachmentParameterResult']:
        return pulumi.get(self, "attachment_parameters")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> _builtins.str:
        return pulumi.get(self, "created_on")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="lastScans")
    def last_scans(self) -> Sequence['outputs.GetSccProfileAttachmentLastScanResult']:
        return pulumi.get(self, "last_scans")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nextScanTime")
    def next_scan_time(self) -> _builtins.str:
        return pulumi.get(self, "next_scan_time")

    @_builtins.property
    @pulumi.getter
    def notifications(self) -> Sequence['outputs.GetSccProfileAttachmentNotificationResult']:
        return pulumi.get(self, "notifications")

    @_builtins.property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> _builtins.str:
        return pulumi.get(self, "profile_id")

    @_builtins.property
    @pulumi.getter
    def schedule(self) -> _builtins.str:
        return pulumi.get(self, "schedule")

    @_builtins.property
    @pulumi.getter
    def scopes(self) -> Sequence['outputs.GetSccProfileAttachmentScopeResult']:
        return pulumi.get(self, "scopes")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> _builtins.str:
        return pulumi.get(self, "updated_by")

    @_builtins.property
    @pulumi.getter(name="updatedOn")
    def updated_on(self) -> _builtins.str:
        return pulumi.get(self, "updated_on")


class AwaitableGetSccProfileAttachmentResult(GetSccProfileAttachmentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSccProfileAttachmentResult(
            account_id=self.account_id,
            attachment_id=self.attachment_id,
            attachment_item_id=self.attachment_item_id,
            attachment_parameters=self.attachment_parameters,
            created_by=self.created_by,
            created_on=self.created_on,
            description=self.description,
            id=self.id,
            instance_id=self.instance_id,
            last_scans=self.last_scans,
            name=self.name,
            next_scan_time=self.next_scan_time,
            notifications=self.notifications,
            profile_id=self.profile_id,
            schedule=self.schedule,
            scopes=self.scopes,
            status=self.status,
            updated_by=self.updated_by,
            updated_on=self.updated_on)


def get_scc_profile_attachment(attachment_id: Optional[_builtins.str] = None,
                               id: Optional[_builtins.str] = None,
                               instance_id: Optional[_builtins.str] = None,
                               profile_id: Optional[_builtins.str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSccProfileAttachmentResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['attachmentId'] = attachment_id
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['profileId'] = profile_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSccProfileAttachment:getSccProfileAttachment', __args__, opts=opts, typ=GetSccProfileAttachmentResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSccProfileAttachmentResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        attachment_id=pulumi.get(__ret__, 'attachment_id'),
        attachment_item_id=pulumi.get(__ret__, 'attachment_item_id'),
        attachment_parameters=pulumi.get(__ret__, 'attachment_parameters'),
        created_by=pulumi.get(__ret__, 'created_by'),
        created_on=pulumi.get(__ret__, 'created_on'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        last_scans=pulumi.get(__ret__, 'last_scans'),
        name=pulumi.get(__ret__, 'name'),
        next_scan_time=pulumi.get(__ret__, 'next_scan_time'),
        notifications=pulumi.get(__ret__, 'notifications'),
        profile_id=pulumi.get(__ret__, 'profile_id'),
        schedule=pulumi.get(__ret__, 'schedule'),
        scopes=pulumi.get(__ret__, 'scopes'),
        status=pulumi.get(__ret__, 'status'),
        updated_by=pulumi.get(__ret__, 'updated_by'),
        updated_on=pulumi.get(__ret__, 'updated_on'))
def get_scc_profile_attachment_output(attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                                      id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                      profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSccProfileAttachmentResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['attachmentId'] = attachment_id
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['profileId'] = profile_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSccProfileAttachment:getSccProfileAttachment', __args__, opts=opts, typ=GetSccProfileAttachmentResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSccProfileAttachmentResult(
        account_id=pulumi.get(__response__, 'account_id'),
        attachment_id=pulumi.get(__response__, 'attachment_id'),
        attachment_item_id=pulumi.get(__response__, 'attachment_item_id'),
        attachment_parameters=pulumi.get(__response__, 'attachment_parameters'),
        created_by=pulumi.get(__response__, 'created_by'),
        created_on=pulumi.get(__response__, 'created_on'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        last_scans=pulumi.get(__response__, 'last_scans'),
        name=pulumi.get(__response__, 'name'),
        next_scan_time=pulumi.get(__response__, 'next_scan_time'),
        notifications=pulumi.get(__response__, 'notifications'),
        profile_id=pulumi.get(__response__, 'profile_id'),
        schedule=pulumi.get(__response__, 'schedule'),
        scopes=pulumi.get(__response__, 'scopes'),
        status=pulumi.get(__response__, 'status'),
        updated_by=pulumi.get(__response__, 'updated_by'),
        updated_on=pulumi.get(__response__, 'updated_on')))
