# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsIpsecPolicyResult',
    'AwaitableGetIsIpsecPolicyResult',
    'get_is_ipsec_policy',
    'get_is_ipsec_policy_output',
]

@pulumi.output_type
class GetIsIpsecPolicyResult:
    """
    A collection of values returned by getIsIpsecPolicy.
    """
    def __init__(__self__, authentication_algorithm=None, connections=None, created_at=None, encapsulation_mode=None, encryption_algorithm=None, href=None, id=None, ipsec_policy=None, key_lifetime=None, name=None, pfs=None, resource_groups=None, resource_type=None, transform_protocol=None):
        if authentication_algorithm and not isinstance(authentication_algorithm, str):
            raise TypeError("Expected argument 'authentication_algorithm' to be a str")
        pulumi.set(__self__, "authentication_algorithm", authentication_algorithm)
        if connections and not isinstance(connections, list):
            raise TypeError("Expected argument 'connections' to be a list")
        pulumi.set(__self__, "connections", connections)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if encapsulation_mode and not isinstance(encapsulation_mode, str):
            raise TypeError("Expected argument 'encapsulation_mode' to be a str")
        pulumi.set(__self__, "encapsulation_mode", encapsulation_mode)
        if encryption_algorithm and not isinstance(encryption_algorithm, str):
            raise TypeError("Expected argument 'encryption_algorithm' to be a str")
        pulumi.set(__self__, "encryption_algorithm", encryption_algorithm)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ipsec_policy and not isinstance(ipsec_policy, str):
            raise TypeError("Expected argument 'ipsec_policy' to be a str")
        pulumi.set(__self__, "ipsec_policy", ipsec_policy)
        if key_lifetime and not isinstance(key_lifetime, float):
            raise TypeError("Expected argument 'key_lifetime' to be a float")
        pulumi.set(__self__, "key_lifetime", key_lifetime)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if pfs and not isinstance(pfs, str):
            raise TypeError("Expected argument 'pfs' to be a str")
        pulumi.set(__self__, "pfs", pfs)
        if resource_groups and not isinstance(resource_groups, list):
            raise TypeError("Expected argument 'resource_groups' to be a list")
        pulumi.set(__self__, "resource_groups", resource_groups)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if transform_protocol and not isinstance(transform_protocol, str):
            raise TypeError("Expected argument 'transform_protocol' to be a str")
        pulumi.set(__self__, "transform_protocol", transform_protocol)

    @_builtins.property
    @pulumi.getter(name="authenticationAlgorithm")
    def authentication_algorithm(self) -> _builtins.str:
        return pulumi.get(self, "authentication_algorithm")

    @_builtins.property
    @pulumi.getter
    def connections(self) -> Sequence['outputs.GetIsIpsecPolicyConnectionResult']:
        return pulumi.get(self, "connections")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="encapsulationMode")
    def encapsulation_mode(self) -> _builtins.str:
        return pulumi.get(self, "encapsulation_mode")

    @_builtins.property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> _builtins.str:
        return pulumi.get(self, "encryption_algorithm")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipsecPolicy")
    def ipsec_policy(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ipsec_policy")

    @_builtins.property
    @pulumi.getter(name="keyLifetime")
    def key_lifetime(self) -> _builtins.float:
        return pulumi.get(self, "key_lifetime")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def pfs(self) -> _builtins.str:
        return pulumi.get(self, "pfs")

    @_builtins.property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Sequence['outputs.GetIsIpsecPolicyResourceGroupResult']:
        return pulumi.get(self, "resource_groups")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="transformProtocol")
    def transform_protocol(self) -> _builtins.str:
        return pulumi.get(self, "transform_protocol")


class AwaitableGetIsIpsecPolicyResult(GetIsIpsecPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsIpsecPolicyResult(
            authentication_algorithm=self.authentication_algorithm,
            connections=self.connections,
            created_at=self.created_at,
            encapsulation_mode=self.encapsulation_mode,
            encryption_algorithm=self.encryption_algorithm,
            href=self.href,
            id=self.id,
            ipsec_policy=self.ipsec_policy,
            key_lifetime=self.key_lifetime,
            name=self.name,
            pfs=self.pfs,
            resource_groups=self.resource_groups,
            resource_type=self.resource_type,
            transform_protocol=self.transform_protocol)


def get_is_ipsec_policy(id: Optional[_builtins.str] = None,
                        ipsec_policy: Optional[_builtins.str] = None,
                        name: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsIpsecPolicyResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['ipsecPolicy'] = ipsec_policy
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsIpsecPolicy:getIsIpsecPolicy', __args__, opts=opts, typ=GetIsIpsecPolicyResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsIpsecPolicyResult(
        authentication_algorithm=pulumi.get(__ret__, 'authentication_algorithm'),
        connections=pulumi.get(__ret__, 'connections'),
        created_at=pulumi.get(__ret__, 'created_at'),
        encapsulation_mode=pulumi.get(__ret__, 'encapsulation_mode'),
        encryption_algorithm=pulumi.get(__ret__, 'encryption_algorithm'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        ipsec_policy=pulumi.get(__ret__, 'ipsec_policy'),
        key_lifetime=pulumi.get(__ret__, 'key_lifetime'),
        name=pulumi.get(__ret__, 'name'),
        pfs=pulumi.get(__ret__, 'pfs'),
        resource_groups=pulumi.get(__ret__, 'resource_groups'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        transform_protocol=pulumi.get(__ret__, 'transform_protocol'))
def get_is_ipsec_policy_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               ipsec_policy: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsIpsecPolicyResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['ipsecPolicy'] = ipsec_policy
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsIpsecPolicy:getIsIpsecPolicy', __args__, opts=opts, typ=GetIsIpsecPolicyResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsIpsecPolicyResult(
        authentication_algorithm=pulumi.get(__response__, 'authentication_algorithm'),
        connections=pulumi.get(__response__, 'connections'),
        created_at=pulumi.get(__response__, 'created_at'),
        encapsulation_mode=pulumi.get(__response__, 'encapsulation_mode'),
        encryption_algorithm=pulumi.get(__response__, 'encryption_algorithm'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        ipsec_policy=pulumi.get(__response__, 'ipsec_policy'),
        key_lifetime=pulumi.get(__response__, 'key_lifetime'),
        name=pulumi.get(__response__, 'name'),
        pfs=pulumi.get(__response__, 'pfs'),
        resource_groups=pulumi.get(__response__, 'resource_groups'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        transform_protocol=pulumi.get(__response__, 'transform_protocol')))
