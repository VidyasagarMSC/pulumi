# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsPrivatePathServiceGatewayAccountPolicyResult',
    'AwaitableGetIsPrivatePathServiceGatewayAccountPolicyResult',
    'get_is_private_path_service_gateway_account_policy',
    'get_is_private_path_service_gateway_account_policy_output',
]

@pulumi.output_type
class GetIsPrivatePathServiceGatewayAccountPolicyResult:
    """
    A collection of values returned by getIsPrivatePathServiceGatewayAccountPolicy.
    """
    def __init__(__self__, access_policy=None, account_policy=None, accounts=None, created_at=None, href=None, id=None, private_path_service_gateway=None, resource_type=None, updated_at=None):
        if access_policy and not isinstance(access_policy, str):
            raise TypeError("Expected argument 'access_policy' to be a str")
        pulumi.set(__self__, "access_policy", access_policy)
        if account_policy and not isinstance(account_policy, str):
            raise TypeError("Expected argument 'account_policy' to be a str")
        pulumi.set(__self__, "account_policy", account_policy)
        if accounts and not isinstance(accounts, list):
            raise TypeError("Expected argument 'accounts' to be a list")
        pulumi.set(__self__, "accounts", accounts)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if private_path_service_gateway and not isinstance(private_path_service_gateway, str):
            raise TypeError("Expected argument 'private_path_service_gateway' to be a str")
        pulumi.set(__self__, "private_path_service_gateway", private_path_service_gateway)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="accessPolicy")
    def access_policy(self) -> _builtins.str:
        return pulumi.get(self, "access_policy")

    @_builtins.property
    @pulumi.getter(name="accountPolicy")
    def account_policy(self) -> _builtins.str:
        return pulumi.get(self, "account_policy")

    @_builtins.property
    @pulumi.getter
    def accounts(self) -> Sequence['outputs.GetIsPrivatePathServiceGatewayAccountPolicyAccountResult']:
        return pulumi.get(self, "accounts")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="privatePathServiceGateway")
    def private_path_service_gateway(self) -> _builtins.str:
        return pulumi.get(self, "private_path_service_gateway")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")


class AwaitableGetIsPrivatePathServiceGatewayAccountPolicyResult(GetIsPrivatePathServiceGatewayAccountPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsPrivatePathServiceGatewayAccountPolicyResult(
            access_policy=self.access_policy,
            account_policy=self.account_policy,
            accounts=self.accounts,
            created_at=self.created_at,
            href=self.href,
            id=self.id,
            private_path_service_gateway=self.private_path_service_gateway,
            resource_type=self.resource_type,
            updated_at=self.updated_at)


def get_is_private_path_service_gateway_account_policy(account_policy: Optional[_builtins.str] = None,
                                                       id: Optional[_builtins.str] = None,
                                                       private_path_service_gateway: Optional[_builtins.str] = None,
                                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsPrivatePathServiceGatewayAccountPolicyResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountPolicy'] = account_policy
    __args__['id'] = id
    __args__['privatePathServiceGateway'] = private_path_service_gateway
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsPrivatePathServiceGatewayAccountPolicy:getIsPrivatePathServiceGatewayAccountPolicy', __args__, opts=opts, typ=GetIsPrivatePathServiceGatewayAccountPolicyResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsPrivatePathServiceGatewayAccountPolicyResult(
        access_policy=pulumi.get(__ret__, 'access_policy'),
        account_policy=pulumi.get(__ret__, 'account_policy'),
        accounts=pulumi.get(__ret__, 'accounts'),
        created_at=pulumi.get(__ret__, 'created_at'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        private_path_service_gateway=pulumi.get(__ret__, 'private_path_service_gateway'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        updated_at=pulumi.get(__ret__, 'updated_at'))
def get_is_private_path_service_gateway_account_policy_output(account_policy: Optional[pulumi.Input[_builtins.str]] = None,
                                                              id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                              private_path_service_gateway: Optional[pulumi.Input[_builtins.str]] = None,
                                                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsPrivatePathServiceGatewayAccountPolicyResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountPolicy'] = account_policy
    __args__['id'] = id
    __args__['privatePathServiceGateway'] = private_path_service_gateway
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsPrivatePathServiceGatewayAccountPolicy:getIsPrivatePathServiceGatewayAccountPolicy', __args__, opts=opts, typ=GetIsPrivatePathServiceGatewayAccountPolicyResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsPrivatePathServiceGatewayAccountPolicyResult(
        access_policy=pulumi.get(__response__, 'access_policy'),
        account_policy=pulumi.get(__response__, 'account_policy'),
        accounts=pulumi.get(__response__, 'accounts'),
        created_at=pulumi.get(__response__, 'created_at'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        private_path_service_gateway=pulumi.get(__response__, 'private_path_service_gateway'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        updated_at=pulumi.get(__response__, 'updated_at')))
