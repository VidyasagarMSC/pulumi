# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['SmEnRegistrationArgs', 'SmEnRegistration']

@pulumi.input_type
class SmEnRegistrationArgs:
    def __init__(__self__, *,
                 event_notifications_instance_crn: pulumi.Input[_builtins.str],
                 event_notifications_source_name: pulumi.Input[_builtins.str],
                 instance_id: pulumi.Input[_builtins.str],
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 event_notifications_source_description: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sm_en_registration_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a SmEnRegistration resource.
        :param pulumi.Input[_builtins.str] event_notifications_instance_crn: A CRN that uniquely identifies an IBM Cloud resource.
        :param pulumi.Input[_builtins.str] event_notifications_source_name: The name that is displayed as a source that is in your Event Notifications instance.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.str] event_notifications_source_description: An optional description for the source that is in your Event Notifications instance.
        :param pulumi.Input[_builtins.str] region: The region of the Secrets Manager instance.
        """
        pulumi.set(__self__, "event_notifications_instance_crn", event_notifications_instance_crn)
        pulumi.set(__self__, "event_notifications_source_name", event_notifications_source_name)
        pulumi.set(__self__, "instance_id", instance_id)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if event_notifications_source_description is not None:
            pulumi.set(__self__, "event_notifications_source_description", event_notifications_source_description)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if sm_en_registration_id is not None:
            pulumi.set(__self__, "sm_en_registration_id", sm_en_registration_id)

    @_builtins.property
    @pulumi.getter(name="eventNotificationsInstanceCrn")
    def event_notifications_instance_crn(self) -> pulumi.Input[_builtins.str]:
        """
        A CRN that uniquely identifies an IBM Cloud resource.
        """
        return pulumi.get(self, "event_notifications_instance_crn")

    @event_notifications_instance_crn.setter
    def event_notifications_instance_crn(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "event_notifications_instance_crn", value)

    @_builtins.property
    @pulumi.getter(name="eventNotificationsSourceName")
    def event_notifications_source_name(self) -> pulumi.Input[_builtins.str]:
        """
        The name that is displayed as a source that is in your Event Notifications instance.
        """
        return pulumi.get(self, "event_notifications_source_name")

    @event_notifications_source_name.setter
    def event_notifications_source_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "event_notifications_source_name", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the Secrets Manager instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter(name="eventNotificationsSourceDescription")
    def event_notifications_source_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        An optional description for the source that is in your Event Notifications instance.
        """
        return pulumi.get(self, "event_notifications_source_description")

    @event_notifications_source_description.setter
    def event_notifications_source_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "event_notifications_source_description", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the Secrets Manager instance.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="smEnRegistrationId")
    def sm_en_registration_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "sm_en_registration_id")

    @sm_en_registration_id.setter
    def sm_en_registration_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sm_en_registration_id", value)


@pulumi.input_type
class _SmEnRegistrationState:
    def __init__(__self__, *,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 event_notifications_instance_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 event_notifications_source_description: Optional[pulumi.Input[_builtins.str]] = None,
                 event_notifications_source_name: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sm_en_registration_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SmEnRegistration resources.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.str] event_notifications_instance_crn: A CRN that uniquely identifies an IBM Cloud resource.
        :param pulumi.Input[_builtins.str] event_notifications_source_description: An optional description for the source that is in your Event Notifications instance.
        :param pulumi.Input[_builtins.str] event_notifications_source_name: The name that is displayed as a source that is in your Event Notifications instance.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] region: The region of the Secrets Manager instance.
        """
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if event_notifications_instance_crn is not None:
            pulumi.set(__self__, "event_notifications_instance_crn", event_notifications_instance_crn)
        if event_notifications_source_description is not None:
            pulumi.set(__self__, "event_notifications_source_description", event_notifications_source_description)
        if event_notifications_source_name is not None:
            pulumi.set(__self__, "event_notifications_source_name", event_notifications_source_name)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if sm_en_registration_id is not None:
            pulumi.set(__self__, "sm_en_registration_id", sm_en_registration_id)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter(name="eventNotificationsInstanceCrn")
    def event_notifications_instance_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A CRN that uniquely identifies an IBM Cloud resource.
        """
        return pulumi.get(self, "event_notifications_instance_crn")

    @event_notifications_instance_crn.setter
    def event_notifications_instance_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "event_notifications_instance_crn", value)

    @_builtins.property
    @pulumi.getter(name="eventNotificationsSourceDescription")
    def event_notifications_source_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        An optional description for the source that is in your Event Notifications instance.
        """
        return pulumi.get(self, "event_notifications_source_description")

    @event_notifications_source_description.setter
    def event_notifications_source_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "event_notifications_source_description", value)

    @_builtins.property
    @pulumi.getter(name="eventNotificationsSourceName")
    def event_notifications_source_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name that is displayed as a source that is in your Event Notifications instance.
        """
        return pulumi.get(self, "event_notifications_source_name")

    @event_notifications_source_name.setter
    def event_notifications_source_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "event_notifications_source_name", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the Secrets Manager instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the Secrets Manager instance.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="smEnRegistrationId")
    def sm_en_registration_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "sm_en_registration_id")

    @sm_en_registration_id.setter
    def sm_en_registration_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sm_en_registration_id", value)


@pulumi.type_token("ibm:index/smEnRegistration:SmEnRegistration")
class SmEnRegistration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 event_notifications_instance_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 event_notifications_source_description: Optional[pulumi.Input[_builtins.str]] = None,
                 event_notifications_source_name: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sm_en_registration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a SmEnRegistration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.str] event_notifications_instance_crn: A CRN that uniquely identifies an IBM Cloud resource.
        :param pulumi.Input[_builtins.str] event_notifications_source_description: An optional description for the source that is in your Event Notifications instance.
        :param pulumi.Input[_builtins.str] event_notifications_source_name: The name that is displayed as a source that is in your Event Notifications instance.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] region: The region of the Secrets Manager instance.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SmEnRegistrationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SmEnRegistration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SmEnRegistrationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SmEnRegistrationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 event_notifications_instance_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 event_notifications_source_description: Optional[pulumi.Input[_builtins.str]] = None,
                 event_notifications_source_name: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 sm_en_registration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SmEnRegistrationArgs.__new__(SmEnRegistrationArgs)

            __props__.__dict__["endpoint_type"] = endpoint_type
            if event_notifications_instance_crn is None and not opts.urn:
                raise TypeError("Missing required property 'event_notifications_instance_crn'")
            __props__.__dict__["event_notifications_instance_crn"] = event_notifications_instance_crn
            __props__.__dict__["event_notifications_source_description"] = event_notifications_source_description
            if event_notifications_source_name is None and not opts.urn:
                raise TypeError("Missing required property 'event_notifications_source_name'")
            __props__.__dict__["event_notifications_source_name"] = event_notifications_source_name
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["region"] = region
            __props__.__dict__["sm_en_registration_id"] = sm_en_registration_id
        super(SmEnRegistration, __self__).__init__(
            'ibm:index/smEnRegistration:SmEnRegistration',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
            event_notifications_instance_crn: Optional[pulumi.Input[_builtins.str]] = None,
            event_notifications_source_description: Optional[pulumi.Input[_builtins.str]] = None,
            event_notifications_source_name: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            sm_en_registration_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'SmEnRegistration':
        """
        Get an existing SmEnRegistration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.str] event_notifications_instance_crn: A CRN that uniquely identifies an IBM Cloud resource.
        :param pulumi.Input[_builtins.str] event_notifications_source_description: An optional description for the source that is in your Event Notifications instance.
        :param pulumi.Input[_builtins.str] event_notifications_source_name: The name that is displayed as a source that is in your Event Notifications instance.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Secrets Manager instance.
        :param pulumi.Input[_builtins.str] region: The region of the Secrets Manager instance.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SmEnRegistrationState.__new__(_SmEnRegistrationState)

        __props__.__dict__["endpoint_type"] = endpoint_type
        __props__.__dict__["event_notifications_instance_crn"] = event_notifications_instance_crn
        __props__.__dict__["event_notifications_source_description"] = event_notifications_source_description
        __props__.__dict__["event_notifications_source_name"] = event_notifications_source_name
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["region"] = region
        __props__.__dict__["sm_en_registration_id"] = sm_en_registration_id
        return SmEnRegistration(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter(name="eventNotificationsInstanceCrn")
    def event_notifications_instance_crn(self) -> pulumi.Output[_builtins.str]:
        """
        A CRN that uniquely identifies an IBM Cloud resource.
        """
        return pulumi.get(self, "event_notifications_instance_crn")

    @_builtins.property
    @pulumi.getter(name="eventNotificationsSourceDescription")
    def event_notifications_source_description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        An optional description for the source that is in your Event Notifications instance.
        """
        return pulumi.get(self, "event_notifications_source_description")

    @_builtins.property
    @pulumi.getter(name="eventNotificationsSourceName")
    def event_notifications_source_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name that is displayed as a source that is in your Event Notifications instance.
        """
        return pulumi.get(self, "event_notifications_source_name")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the Secrets Manager instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region of the Secrets Manager instance.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="smEnRegistrationId")
    def sm_en_registration_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "sm_en_registration_id")

