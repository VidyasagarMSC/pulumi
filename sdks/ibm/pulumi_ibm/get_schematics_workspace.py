# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetSchematicsWorkspaceResult',
    'AwaitableGetSchematicsWorkspaceResult',
    'get_schematics_workspace',
    'get_schematics_workspace_output',
]

@pulumi.output_type
class GetSchematicsWorkspaceResult:
    """
    A collection of values returned by getSchematicsWorkspace.
    """
    def __init__(__self__, applied_shareddata_ids=None, catalog_reves=None, created_at=None, created_by=None, crn=None, description=None, frozen=None, frozen_at=None, frozen_by=None, id=None, is_frozen=None, is_locked=None, last_health_check_at=None, location=None, locked=None, locked_by=None, locked_time=None, name=None, resource_controller_url=None, resource_group=None, runtime_datas=None, shared_datas=None, status=None, status_code=None, status_msg=None, tags=None, template_env_settings=None, template_git_branch=None, template_git_folder=None, template_git_full_url=None, template_git_has_uploadedgitrepotar=None, template_git_release=None, template_git_repo_sha_value=None, template_git_repo_url=None, template_git_url=None, template_init_state_file=None, template_inputs=None, template_ref=None, template_type=None, template_uninstall_script_name=None, template_values=None, template_values_metadatas=None, updated_at=None, updated_by=None, workspace_id=None):
        if applied_shareddata_ids and not isinstance(applied_shareddata_ids, list):
            raise TypeError("Expected argument 'applied_shareddata_ids' to be a list")
        pulumi.set(__self__, "applied_shareddata_ids", applied_shareddata_ids)
        if catalog_reves and not isinstance(catalog_reves, list):
            raise TypeError("Expected argument 'catalog_reves' to be a list")
        pulumi.set(__self__, "catalog_reves", catalog_reves)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if frozen and not isinstance(frozen, bool):
            raise TypeError("Expected argument 'frozen' to be a bool")
        pulumi.set(__self__, "frozen", frozen)
        if frozen_at and not isinstance(frozen_at, str):
            raise TypeError("Expected argument 'frozen_at' to be a str")
        pulumi.set(__self__, "frozen_at", frozen_at)
        if frozen_by and not isinstance(frozen_by, str):
            raise TypeError("Expected argument 'frozen_by' to be a str")
        pulumi.set(__self__, "frozen_by", frozen_by)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_frozen and not isinstance(is_frozen, bool):
            raise TypeError("Expected argument 'is_frozen' to be a bool")
        pulumi.set(__self__, "is_frozen", is_frozen)
        if is_locked and not isinstance(is_locked, bool):
            raise TypeError("Expected argument 'is_locked' to be a bool")
        pulumi.set(__self__, "is_locked", is_locked)
        if last_health_check_at and not isinstance(last_health_check_at, str):
            raise TypeError("Expected argument 'last_health_check_at' to be a str")
        pulumi.set(__self__, "last_health_check_at", last_health_check_at)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if locked and not isinstance(locked, bool):
            raise TypeError("Expected argument 'locked' to be a bool")
        pulumi.set(__self__, "locked", locked)
        if locked_by and not isinstance(locked_by, str):
            raise TypeError("Expected argument 'locked_by' to be a str")
        pulumi.set(__self__, "locked_by", locked_by)
        if locked_time and not isinstance(locked_time, str):
            raise TypeError("Expected argument 'locked_time' to be a str")
        pulumi.set(__self__, "locked_time", locked_time)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resource_controller_url and not isinstance(resource_controller_url, str):
            raise TypeError("Expected argument 'resource_controller_url' to be a str")
        pulumi.set(__self__, "resource_controller_url", resource_controller_url)
        if resource_group and not isinstance(resource_group, str):
            raise TypeError("Expected argument 'resource_group' to be a str")
        pulumi.set(__self__, "resource_group", resource_group)
        if runtime_datas and not isinstance(runtime_datas, list):
            raise TypeError("Expected argument 'runtime_datas' to be a list")
        pulumi.set(__self__, "runtime_datas", runtime_datas)
        if shared_datas and not isinstance(shared_datas, list):
            raise TypeError("Expected argument 'shared_datas' to be a list")
        pulumi.set(__self__, "shared_datas", shared_datas)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if status_code and not isinstance(status_code, str):
            raise TypeError("Expected argument 'status_code' to be a str")
        pulumi.set(__self__, "status_code", status_code)
        if status_msg and not isinstance(status_msg, str):
            raise TypeError("Expected argument 'status_msg' to be a str")
        pulumi.set(__self__, "status_msg", status_msg)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if template_env_settings and not isinstance(template_env_settings, list):
            raise TypeError("Expected argument 'template_env_settings' to be a list")
        pulumi.set(__self__, "template_env_settings", template_env_settings)
        if template_git_branch and not isinstance(template_git_branch, str):
            raise TypeError("Expected argument 'template_git_branch' to be a str")
        pulumi.set(__self__, "template_git_branch", template_git_branch)
        if template_git_folder and not isinstance(template_git_folder, str):
            raise TypeError("Expected argument 'template_git_folder' to be a str")
        pulumi.set(__self__, "template_git_folder", template_git_folder)
        if template_git_full_url and not isinstance(template_git_full_url, str):
            raise TypeError("Expected argument 'template_git_full_url' to be a str")
        pulumi.set(__self__, "template_git_full_url", template_git_full_url)
        if template_git_has_uploadedgitrepotar and not isinstance(template_git_has_uploadedgitrepotar, bool):
            raise TypeError("Expected argument 'template_git_has_uploadedgitrepotar' to be a bool")
        pulumi.set(__self__, "template_git_has_uploadedgitrepotar", template_git_has_uploadedgitrepotar)
        if template_git_release and not isinstance(template_git_release, str):
            raise TypeError("Expected argument 'template_git_release' to be a str")
        pulumi.set(__self__, "template_git_release", template_git_release)
        if template_git_repo_sha_value and not isinstance(template_git_repo_sha_value, str):
            raise TypeError("Expected argument 'template_git_repo_sha_value' to be a str")
        pulumi.set(__self__, "template_git_repo_sha_value", template_git_repo_sha_value)
        if template_git_repo_url and not isinstance(template_git_repo_url, str):
            raise TypeError("Expected argument 'template_git_repo_url' to be a str")
        pulumi.set(__self__, "template_git_repo_url", template_git_repo_url)
        if template_git_url and not isinstance(template_git_url, str):
            raise TypeError("Expected argument 'template_git_url' to be a str")
        pulumi.set(__self__, "template_git_url", template_git_url)
        if template_init_state_file and not isinstance(template_init_state_file, str):
            raise TypeError("Expected argument 'template_init_state_file' to be a str")
        pulumi.set(__self__, "template_init_state_file", template_init_state_file)
        if template_inputs and not isinstance(template_inputs, list):
            raise TypeError("Expected argument 'template_inputs' to be a list")
        pulumi.set(__self__, "template_inputs", template_inputs)
        if template_ref and not isinstance(template_ref, str):
            raise TypeError("Expected argument 'template_ref' to be a str")
        pulumi.set(__self__, "template_ref", template_ref)
        if template_type and not isinstance(template_type, str):
            raise TypeError("Expected argument 'template_type' to be a str")
        pulumi.set(__self__, "template_type", template_type)
        if template_uninstall_script_name and not isinstance(template_uninstall_script_name, str):
            raise TypeError("Expected argument 'template_uninstall_script_name' to be a str")
        pulumi.set(__self__, "template_uninstall_script_name", template_uninstall_script_name)
        if template_values and not isinstance(template_values, str):
            raise TypeError("Expected argument 'template_values' to be a str")
        pulumi.set(__self__, "template_values", template_values)
        if template_values_metadatas and not isinstance(template_values_metadatas, list):
            raise TypeError("Expected argument 'template_values_metadatas' to be a list")
        pulumi.set(__self__, "template_values_metadatas", template_values_metadatas)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)
        if updated_by and not isinstance(updated_by, str):
            raise TypeError("Expected argument 'updated_by' to be a str")
        pulumi.set(__self__, "updated_by", updated_by)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter(name="appliedShareddataIds")
    def applied_shareddata_ids(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "applied_shareddata_ids")

    @_builtins.property
    @pulumi.getter(name="catalogReves")
    def catalog_reves(self) -> Sequence['outputs.GetSchematicsWorkspaceCatalogRefResult']:
        return pulumi.get(self, "catalog_reves")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def frozen(self) -> _builtins.bool:
        return pulumi.get(self, "frozen")

    @_builtins.property
    @pulumi.getter(name="frozenAt")
    def frozen_at(self) -> _builtins.str:
        return pulumi.get(self, "frozen_at")

    @_builtins.property
    @pulumi.getter(name="frozenBy")
    def frozen_by(self) -> _builtins.str:
        return pulumi.get(self, "frozen_by")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isFrozen")
    @_utilities.deprecated("""Deprecated""")
    def is_frozen(self) -> _builtins.bool:
        return pulumi.get(self, "is_frozen")

    @_builtins.property
    @pulumi.getter(name="isLocked")
    @_utilities.deprecated("""Deprecated""")
    def is_locked(self) -> _builtins.bool:
        return pulumi.get(self, "is_locked")

    @_builtins.property
    @pulumi.getter(name="lastHealthCheckAt")
    def last_health_check_at(self) -> _builtins.str:
        return pulumi.get(self, "last_health_check_at")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def locked(self) -> _builtins.bool:
        return pulumi.get(self, "locked")

    @_builtins.property
    @pulumi.getter(name="lockedBy")
    def locked_by(self) -> _builtins.str:
        return pulumi.get(self, "locked_by")

    @_builtins.property
    @pulumi.getter(name="lockedTime")
    def locked_time(self) -> _builtins.str:
        return pulumi.get(self, "locked_time")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> _builtins.str:
        return pulumi.get(self, "resource_controller_url")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> _builtins.str:
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="runtimeDatas")
    def runtime_datas(self) -> Sequence['outputs.GetSchematicsWorkspaceRuntimeDataResult']:
        return pulumi.get(self, "runtime_datas")

    @_builtins.property
    @pulumi.getter(name="sharedDatas")
    def shared_datas(self) -> Sequence['outputs.GetSchematicsWorkspaceSharedDataResult']:
        return pulumi.get(self, "shared_datas")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> _builtins.str:
        return pulumi.get(self, "status_code")

    @_builtins.property
    @pulumi.getter(name="statusMsg")
    def status_msg(self) -> _builtins.str:
        return pulumi.get(self, "status_msg")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="templateEnvSettings")
    def template_env_settings(self) -> Sequence['outputs.GetSchematicsWorkspaceTemplateEnvSettingResult']:
        return pulumi.get(self, "template_env_settings")

    @_builtins.property
    @pulumi.getter(name="templateGitBranch")
    def template_git_branch(self) -> _builtins.str:
        return pulumi.get(self, "template_git_branch")

    @_builtins.property
    @pulumi.getter(name="templateGitFolder")
    def template_git_folder(self) -> _builtins.str:
        return pulumi.get(self, "template_git_folder")

    @_builtins.property
    @pulumi.getter(name="templateGitFullUrl")
    def template_git_full_url(self) -> _builtins.str:
        return pulumi.get(self, "template_git_full_url")

    @_builtins.property
    @pulumi.getter(name="templateGitHasUploadedgitrepotar")
    def template_git_has_uploadedgitrepotar(self) -> _builtins.bool:
        return pulumi.get(self, "template_git_has_uploadedgitrepotar")

    @_builtins.property
    @pulumi.getter(name="templateGitRelease")
    def template_git_release(self) -> _builtins.str:
        return pulumi.get(self, "template_git_release")

    @_builtins.property
    @pulumi.getter(name="templateGitRepoShaValue")
    def template_git_repo_sha_value(self) -> _builtins.str:
        return pulumi.get(self, "template_git_repo_sha_value")

    @_builtins.property
    @pulumi.getter(name="templateGitRepoUrl")
    def template_git_repo_url(self) -> _builtins.str:
        return pulumi.get(self, "template_git_repo_url")

    @_builtins.property
    @pulumi.getter(name="templateGitUrl")
    def template_git_url(self) -> _builtins.str:
        return pulumi.get(self, "template_git_url")

    @_builtins.property
    @pulumi.getter(name="templateInitStateFile")
    def template_init_state_file(self) -> _builtins.str:
        return pulumi.get(self, "template_init_state_file")

    @_builtins.property
    @pulumi.getter(name="templateInputs")
    def template_inputs(self) -> Sequence['outputs.GetSchematicsWorkspaceTemplateInputResult']:
        return pulumi.get(self, "template_inputs")

    @_builtins.property
    @pulumi.getter(name="templateRef")
    def template_ref(self) -> _builtins.str:
        return pulumi.get(self, "template_ref")

    @_builtins.property
    @pulumi.getter(name="templateType")
    def template_type(self) -> _builtins.str:
        return pulumi.get(self, "template_type")

    @_builtins.property
    @pulumi.getter(name="templateUninstallScriptName")
    def template_uninstall_script_name(self) -> _builtins.str:
        return pulumi.get(self, "template_uninstall_script_name")

    @_builtins.property
    @pulumi.getter(name="templateValues")
    def template_values(self) -> _builtins.str:
        return pulumi.get(self, "template_values")

    @_builtins.property
    @pulumi.getter(name="templateValuesMetadatas")
    def template_values_metadatas(self) -> Optional[Sequence['outputs.GetSchematicsWorkspaceTemplateValuesMetadataResult']]:
        return pulumi.get(self, "template_values_metadatas")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> _builtins.str:
        return pulumi.get(self, "updated_by")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        return pulumi.get(self, "workspace_id")


class AwaitableGetSchematicsWorkspaceResult(GetSchematicsWorkspaceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSchematicsWorkspaceResult(
            applied_shareddata_ids=self.applied_shareddata_ids,
            catalog_reves=self.catalog_reves,
            created_at=self.created_at,
            created_by=self.created_by,
            crn=self.crn,
            description=self.description,
            frozen=self.frozen,
            frozen_at=self.frozen_at,
            frozen_by=self.frozen_by,
            id=self.id,
            is_frozen=self.is_frozen,
            is_locked=self.is_locked,
            last_health_check_at=self.last_health_check_at,
            location=self.location,
            locked=self.locked,
            locked_by=self.locked_by,
            locked_time=self.locked_time,
            name=self.name,
            resource_controller_url=self.resource_controller_url,
            resource_group=self.resource_group,
            runtime_datas=self.runtime_datas,
            shared_datas=self.shared_datas,
            status=self.status,
            status_code=self.status_code,
            status_msg=self.status_msg,
            tags=self.tags,
            template_env_settings=self.template_env_settings,
            template_git_branch=self.template_git_branch,
            template_git_folder=self.template_git_folder,
            template_git_full_url=self.template_git_full_url,
            template_git_has_uploadedgitrepotar=self.template_git_has_uploadedgitrepotar,
            template_git_release=self.template_git_release,
            template_git_repo_sha_value=self.template_git_repo_sha_value,
            template_git_repo_url=self.template_git_repo_url,
            template_git_url=self.template_git_url,
            template_init_state_file=self.template_init_state_file,
            template_inputs=self.template_inputs,
            template_ref=self.template_ref,
            template_type=self.template_type,
            template_uninstall_script_name=self.template_uninstall_script_name,
            template_values=self.template_values,
            template_values_metadatas=self.template_values_metadatas,
            updated_at=self.updated_at,
            updated_by=self.updated_by,
            workspace_id=self.workspace_id)


def get_schematics_workspace(id: Optional[_builtins.str] = None,
                             location: Optional[_builtins.str] = None,
                             template_git_has_uploadedgitrepotar: Optional[_builtins.bool] = None,
                             template_values_metadatas: Optional[Sequence[Union['GetSchematicsWorkspaceTemplateValuesMetadataArgs', 'GetSchematicsWorkspaceTemplateValuesMetadataArgsDict']]] = None,
                             workspace_id: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSchematicsWorkspaceResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['location'] = location
    __args__['templateGitHasUploadedgitrepotar'] = template_git_has_uploadedgitrepotar
    __args__['templateValuesMetadatas'] = template_values_metadatas
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSchematicsWorkspace:getSchematicsWorkspace', __args__, opts=opts, typ=GetSchematicsWorkspaceResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSchematicsWorkspaceResult(
        applied_shareddata_ids=pulumi.get(__ret__, 'applied_shareddata_ids'),
        catalog_reves=pulumi.get(__ret__, 'catalog_reves'),
        created_at=pulumi.get(__ret__, 'created_at'),
        created_by=pulumi.get(__ret__, 'created_by'),
        crn=pulumi.get(__ret__, 'crn'),
        description=pulumi.get(__ret__, 'description'),
        frozen=pulumi.get(__ret__, 'frozen'),
        frozen_at=pulumi.get(__ret__, 'frozen_at'),
        frozen_by=pulumi.get(__ret__, 'frozen_by'),
        id=pulumi.get(__ret__, 'id'),
        is_frozen=pulumi.get(__ret__, 'is_frozen'),
        is_locked=pulumi.get(__ret__, 'is_locked'),
        last_health_check_at=pulumi.get(__ret__, 'last_health_check_at'),
        location=pulumi.get(__ret__, 'location'),
        locked=pulumi.get(__ret__, 'locked'),
        locked_by=pulumi.get(__ret__, 'locked_by'),
        locked_time=pulumi.get(__ret__, 'locked_time'),
        name=pulumi.get(__ret__, 'name'),
        resource_controller_url=pulumi.get(__ret__, 'resource_controller_url'),
        resource_group=pulumi.get(__ret__, 'resource_group'),
        runtime_datas=pulumi.get(__ret__, 'runtime_datas'),
        shared_datas=pulumi.get(__ret__, 'shared_datas'),
        status=pulumi.get(__ret__, 'status'),
        status_code=pulumi.get(__ret__, 'status_code'),
        status_msg=pulumi.get(__ret__, 'status_msg'),
        tags=pulumi.get(__ret__, 'tags'),
        template_env_settings=pulumi.get(__ret__, 'template_env_settings'),
        template_git_branch=pulumi.get(__ret__, 'template_git_branch'),
        template_git_folder=pulumi.get(__ret__, 'template_git_folder'),
        template_git_full_url=pulumi.get(__ret__, 'template_git_full_url'),
        template_git_has_uploadedgitrepotar=pulumi.get(__ret__, 'template_git_has_uploadedgitrepotar'),
        template_git_release=pulumi.get(__ret__, 'template_git_release'),
        template_git_repo_sha_value=pulumi.get(__ret__, 'template_git_repo_sha_value'),
        template_git_repo_url=pulumi.get(__ret__, 'template_git_repo_url'),
        template_git_url=pulumi.get(__ret__, 'template_git_url'),
        template_init_state_file=pulumi.get(__ret__, 'template_init_state_file'),
        template_inputs=pulumi.get(__ret__, 'template_inputs'),
        template_ref=pulumi.get(__ret__, 'template_ref'),
        template_type=pulumi.get(__ret__, 'template_type'),
        template_uninstall_script_name=pulumi.get(__ret__, 'template_uninstall_script_name'),
        template_values=pulumi.get(__ret__, 'template_values'),
        template_values_metadatas=pulumi.get(__ret__, 'template_values_metadatas'),
        updated_at=pulumi.get(__ret__, 'updated_at'),
        updated_by=pulumi.get(__ret__, 'updated_by'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_schematics_workspace_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    location: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    template_git_has_uploadedgitrepotar: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                    template_values_metadatas: Optional[pulumi.Input[Optional[Sequence[Union['GetSchematicsWorkspaceTemplateValuesMetadataArgs', 'GetSchematicsWorkspaceTemplateValuesMetadataArgsDict']]]]] = None,
                                    workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSchematicsWorkspaceResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['location'] = location
    __args__['templateGitHasUploadedgitrepotar'] = template_git_has_uploadedgitrepotar
    __args__['templateValuesMetadatas'] = template_values_metadatas
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSchematicsWorkspace:getSchematicsWorkspace', __args__, opts=opts, typ=GetSchematicsWorkspaceResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSchematicsWorkspaceResult(
        applied_shareddata_ids=pulumi.get(__response__, 'applied_shareddata_ids'),
        catalog_reves=pulumi.get(__response__, 'catalog_reves'),
        created_at=pulumi.get(__response__, 'created_at'),
        created_by=pulumi.get(__response__, 'created_by'),
        crn=pulumi.get(__response__, 'crn'),
        description=pulumi.get(__response__, 'description'),
        frozen=pulumi.get(__response__, 'frozen'),
        frozen_at=pulumi.get(__response__, 'frozen_at'),
        frozen_by=pulumi.get(__response__, 'frozen_by'),
        id=pulumi.get(__response__, 'id'),
        is_frozen=pulumi.get(__response__, 'is_frozen'),
        is_locked=pulumi.get(__response__, 'is_locked'),
        last_health_check_at=pulumi.get(__response__, 'last_health_check_at'),
        location=pulumi.get(__response__, 'location'),
        locked=pulumi.get(__response__, 'locked'),
        locked_by=pulumi.get(__response__, 'locked_by'),
        locked_time=pulumi.get(__response__, 'locked_time'),
        name=pulumi.get(__response__, 'name'),
        resource_controller_url=pulumi.get(__response__, 'resource_controller_url'),
        resource_group=pulumi.get(__response__, 'resource_group'),
        runtime_datas=pulumi.get(__response__, 'runtime_datas'),
        shared_datas=pulumi.get(__response__, 'shared_datas'),
        status=pulumi.get(__response__, 'status'),
        status_code=pulumi.get(__response__, 'status_code'),
        status_msg=pulumi.get(__response__, 'status_msg'),
        tags=pulumi.get(__response__, 'tags'),
        template_env_settings=pulumi.get(__response__, 'template_env_settings'),
        template_git_branch=pulumi.get(__response__, 'template_git_branch'),
        template_git_folder=pulumi.get(__response__, 'template_git_folder'),
        template_git_full_url=pulumi.get(__response__, 'template_git_full_url'),
        template_git_has_uploadedgitrepotar=pulumi.get(__response__, 'template_git_has_uploadedgitrepotar'),
        template_git_release=pulumi.get(__response__, 'template_git_release'),
        template_git_repo_sha_value=pulumi.get(__response__, 'template_git_repo_sha_value'),
        template_git_repo_url=pulumi.get(__response__, 'template_git_repo_url'),
        template_git_url=pulumi.get(__response__, 'template_git_url'),
        template_init_state_file=pulumi.get(__response__, 'template_init_state_file'),
        template_inputs=pulumi.get(__response__, 'template_inputs'),
        template_ref=pulumi.get(__response__, 'template_ref'),
        template_type=pulumi.get(__response__, 'template_type'),
        template_uninstall_script_name=pulumi.get(__response__, 'template_uninstall_script_name'),
        template_values=pulumi.get(__response__, 'template_values'),
        template_values_metadatas=pulumi.get(__response__, 'template_values_metadatas'),
        updated_at=pulumi.get(__response__, 'updated_at'),
        updated_by=pulumi.get(__response__, 'updated_by'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
