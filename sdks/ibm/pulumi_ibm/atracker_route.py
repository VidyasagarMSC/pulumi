# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AtrackerRouteArgs', 'AtrackerRoute']

@pulumi.input_type
class AtrackerRouteArgs:
    def __init__(__self__, *,
                 rules: pulumi.Input[Sequence[pulumi.Input['AtrackerRouteRuleArgs']]],
                 atracker_route_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AtrackerRoute resource.
        :param pulumi.Input[Sequence[pulumi.Input['AtrackerRouteRuleArgs']]] rules: The routing rules that will be evaluated in their order of the array. Once a rule is matched, the remaining rules in the
               route definition will be skipped.
        :param pulumi.Input[_builtins.str] name: The name of the route.
        """
        pulumi.set(__self__, "rules", rules)
        if atracker_route_id is not None:
            pulumi.set(__self__, "atracker_route_id", atracker_route_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input['AtrackerRouteRuleArgs']]]:
        """
        The routing rules that will be evaluated in their order of the array. Once a rule is matched, the remaining rules in the
        route definition will be skipped.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input['AtrackerRouteRuleArgs']]]):
        pulumi.set(self, "rules", value)

    @_builtins.property
    @pulumi.getter(name="atrackerRouteId")
    def atracker_route_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "atracker_route_id")

    @atracker_route_id.setter
    def atracker_route_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "atracker_route_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the route.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _AtrackerRouteState:
    def __init__(__self__, *,
                 api_version: Optional[pulumi.Input[_builtins.float]] = None,
                 atracker_route_id: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 message: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['AtrackerRouteRuleArgs']]]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering AtrackerRoute resources.
        :param pulumi.Input[_builtins.float] api_version: The API version of the route.
        :param pulumi.Input[_builtins.str] created_at: The timestamp of the route creation time.
        :param pulumi.Input[_builtins.str] crn: The crn of the route resource.
        :param pulumi.Input[_builtins.str] message: An optional message containing information about the route.
        :param pulumi.Input[_builtins.str] name: The name of the route.
        :param pulumi.Input[Sequence[pulumi.Input['AtrackerRouteRuleArgs']]] rules: The routing rules that will be evaluated in their order of the array. Once a rule is matched, the remaining rules in the
               route definition will be skipped.
        :param pulumi.Input[_builtins.str] updated_at: The timestamp of the route last updated time.
        :param pulumi.Input[_builtins.float] version: The version of the route.
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if atracker_route_id is not None:
            pulumi.set(__self__, "atracker_route_id", atracker_route_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The API version of the route.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "api_version", value)

    @_builtins.property
    @pulumi.getter(name="atrackerRouteId")
    def atracker_route_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "atracker_route_id")

    @atracker_route_id.setter
    def atracker_route_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "atracker_route_id", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The timestamp of the route creation time.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The crn of the route resource.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        An optional message containing information about the route.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "message", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the route.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AtrackerRouteRuleArgs']]]]:
        """
        The routing rules that will be evaluated in their order of the array. Once a rule is matched, the remaining rules in the
        route definition will be skipped.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AtrackerRouteRuleArgs']]]]):
        pulumi.set(self, "rules", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The timestamp of the route last updated time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The version of the route.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "version", value)


@pulumi.type_token("ibm:index/atrackerRoute:AtrackerRoute")
class AtrackerRoute(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 atracker_route_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AtrackerRouteRuleArgs', 'AtrackerRouteRuleArgsDict']]]]] = None,
                 __props__=None):
        """
        Create a AtrackerRoute resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: The name of the route.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AtrackerRouteRuleArgs', 'AtrackerRouteRuleArgsDict']]]] rules: The routing rules that will be evaluated in their order of the array. Once a rule is matched, the remaining rules in the
               route definition will be skipped.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AtrackerRouteArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AtrackerRoute resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AtrackerRouteArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AtrackerRouteArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 atracker_route_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AtrackerRouteRuleArgs', 'AtrackerRouteRuleArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AtrackerRouteArgs.__new__(AtrackerRouteArgs)

            __props__.__dict__["atracker_route_id"] = atracker_route_id
            __props__.__dict__["name"] = name
            if rules is None and not opts.urn:
                raise TypeError("Missing required property 'rules'")
            __props__.__dict__["rules"] = rules
            __props__.__dict__["api_version"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["message"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["version"] = None
        super(AtrackerRoute, __self__).__init__(
            'ibm:index/atrackerRoute:AtrackerRoute',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            api_version: Optional[pulumi.Input[_builtins.float]] = None,
            atracker_route_id: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            message: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AtrackerRouteRuleArgs', 'AtrackerRouteRuleArgsDict']]]]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            version: Optional[pulumi.Input[_builtins.float]] = None) -> 'AtrackerRoute':
        """
        Get an existing AtrackerRoute resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] api_version: The API version of the route.
        :param pulumi.Input[_builtins.str] created_at: The timestamp of the route creation time.
        :param pulumi.Input[_builtins.str] crn: The crn of the route resource.
        :param pulumi.Input[_builtins.str] message: An optional message containing information about the route.
        :param pulumi.Input[_builtins.str] name: The name of the route.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AtrackerRouteRuleArgs', 'AtrackerRouteRuleArgsDict']]]] rules: The routing rules that will be evaluated in their order of the array. Once a rule is matched, the remaining rules in the
               route definition will be skipped.
        :param pulumi.Input[_builtins.str] updated_at: The timestamp of the route last updated time.
        :param pulumi.Input[_builtins.float] version: The version of the route.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AtrackerRouteState.__new__(_AtrackerRouteState)

        __props__.__dict__["api_version"] = api_version
        __props__.__dict__["atracker_route_id"] = atracker_route_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["crn"] = crn
        __props__.__dict__["message"] = message
        __props__.__dict__["name"] = name
        __props__.__dict__["rules"] = rules
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["version"] = version
        return AtrackerRoute(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> pulumi.Output[_builtins.float]:
        """
        The API version of the route.
        """
        return pulumi.get(self, "api_version")

    @_builtins.property
    @pulumi.getter(name="atrackerRouteId")
    def atracker_route_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "atracker_route_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The timestamp of the route creation time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The crn of the route resource.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def message(self) -> pulumi.Output[_builtins.str]:
        """
        An optional message containing information about the route.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the route.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def rules(self) -> pulumi.Output[Sequence['outputs.AtrackerRouteRule']]:
        """
        The routing rules that will be evaluated in their order of the array. Once a rule is matched, the remaining rules in the
        route definition will be skipped.
        """
        return pulumi.get(self, "rules")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The timestamp of the route last updated time.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.float]:
        """
        The version of the route.
        """
        return pulumi.get(self, "version")

