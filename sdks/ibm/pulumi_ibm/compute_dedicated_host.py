# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ComputeDedicatedHostArgs', 'ComputeDedicatedHost']

@pulumi.input_type
class ComputeDedicatedHostArgs:
    def __init__(__self__, *,
                 datacenter: pulumi.Input[_builtins.str],
                 domain: pulumi.Input[_builtins.str],
                 hostname: pulumi.Input[_builtins.str],
                 router_hostname: pulumi.Input[_builtins.str],
                 compute_dedicated_host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor: Optional[pulumi.Input[_builtins.str]] = None,
                 hourly_billing: Optional[pulumi.Input[_builtins.bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 wait_time_minutes: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a ComputeDedicatedHost resource.
        :param pulumi.Input[_builtins.str] datacenter: The data center in which the dedicatated host is to be provisioned.
        :param pulumi.Input[_builtins.str] domain: The domain of dedicatated host.
        :param pulumi.Input[_builtins.str] hostname: The host name of dedicatated host.
        :param pulumi.Input[_builtins.str] router_hostname: The hostname of the primary router that the dedicated host is associated with.
        :param pulumi.Input[_builtins.str] flavor: The flavor of the dedicatated host.
        :param pulumi.Input[_builtins.bool] hourly_billing: The billing type for the dedicatated host.
        """
        pulumi.set(__self__, "datacenter", datacenter)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "router_hostname", router_hostname)
        if compute_dedicated_host_id is not None:
            pulumi.set(__self__, "compute_dedicated_host_id", compute_dedicated_host_id)
        if flavor is not None:
            pulumi.set(__self__, "flavor", flavor)
        if hourly_billing is not None:
            pulumi.set(__self__, "hourly_billing", hourly_billing)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if wait_time_minutes is not None:
            pulumi.set(__self__, "wait_time_minutes", wait_time_minutes)

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> pulumi.Input[_builtins.str]:
        """
        The data center in which the dedicatated host is to be provisioned.
        """
        return pulumi.get(self, "datacenter")

    @datacenter.setter
    def datacenter(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "datacenter", value)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> pulumi.Input[_builtins.str]:
        """
        The domain of dedicatated host.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain", value)

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[_builtins.str]:
        """
        The host name of dedicatated host.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "hostname", value)

    @_builtins.property
    @pulumi.getter(name="routerHostname")
    def router_hostname(self) -> pulumi.Input[_builtins.str]:
        """
        The hostname of the primary router that the dedicated host is associated with.
        """
        return pulumi.get(self, "router_hostname")

    @router_hostname.setter
    def router_hostname(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "router_hostname", value)

    @_builtins.property
    @pulumi.getter(name="computeDedicatedHostId")
    def compute_dedicated_host_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compute_dedicated_host_id")

    @compute_dedicated_host_id.setter
    def compute_dedicated_host_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_dedicated_host_id", value)

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The flavor of the dedicatated host.
        """
        return pulumi.get(self, "flavor")

    @flavor.setter
    def flavor(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "flavor", value)

    @_builtins.property
    @pulumi.getter(name="hourlyBilling")
    def hourly_billing(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The billing type for the dedicatated host.
        """
        return pulumi.get(self, "hourly_billing")

    @hourly_billing.setter
    def hourly_billing(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "hourly_billing", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="waitTimeMinutes")
    def wait_time_minutes(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "wait_time_minutes")

    @wait_time_minutes.setter
    def wait_time_minutes(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "wait_time_minutes", value)


@pulumi.input_type
class _ComputeDedicatedHostState:
    def __init__(__self__, *,
                 compute_dedicated_host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cpu_count: Optional[pulumi.Input[_builtins.float]] = None,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 disk_capacity: Optional[pulumi.Input[_builtins.float]] = None,
                 domain: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 hourly_billing: Optional[pulumi.Input[_builtins.bool]] = None,
                 memory_capacity: Optional[pulumi.Input[_builtins.float]] = None,
                 router_hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 wait_time_minutes: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering ComputeDedicatedHost resources.
        :param pulumi.Input[_builtins.float] cpu_count: The capacity that the dedicated host's CPU allocation is restricted to.
        :param pulumi.Input[_builtins.str] datacenter: The data center in which the dedicatated host is to be provisioned.
        :param pulumi.Input[_builtins.float] disk_capacity: The capacity that the dedicated host's disk allocation is restricted to.
        :param pulumi.Input[_builtins.str] domain: The domain of dedicatated host.
        :param pulumi.Input[_builtins.str] flavor: The flavor of the dedicatated host.
        :param pulumi.Input[_builtins.str] hostname: The host name of dedicatated host.
        :param pulumi.Input[_builtins.bool] hourly_billing: The billing type for the dedicatated host.
        :param pulumi.Input[_builtins.float] memory_capacity: The capacity that the dedicated host's memory allocation is restricted to.
        :param pulumi.Input[_builtins.str] router_hostname: The hostname of the primary router that the dedicated host is associated with.
        """
        if compute_dedicated_host_id is not None:
            pulumi.set(__self__, "compute_dedicated_host_id", compute_dedicated_host_id)
        if cpu_count is not None:
            pulumi.set(__self__, "cpu_count", cpu_count)
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if disk_capacity is not None:
            pulumi.set(__self__, "disk_capacity", disk_capacity)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if flavor is not None:
            pulumi.set(__self__, "flavor", flavor)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if hourly_billing is not None:
            pulumi.set(__self__, "hourly_billing", hourly_billing)
        if memory_capacity is not None:
            pulumi.set(__self__, "memory_capacity", memory_capacity)
        if router_hostname is not None:
            pulumi.set(__self__, "router_hostname", router_hostname)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if wait_time_minutes is not None:
            pulumi.set(__self__, "wait_time_minutes", wait_time_minutes)

    @_builtins.property
    @pulumi.getter(name="computeDedicatedHostId")
    def compute_dedicated_host_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compute_dedicated_host_id")

    @compute_dedicated_host_id.setter
    def compute_dedicated_host_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_dedicated_host_id", value)

    @_builtins.property
    @pulumi.getter(name="cpuCount")
    def cpu_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The capacity that the dedicated host's CPU allocation is restricted to.
        """
        return pulumi.get(self, "cpu_count")

    @cpu_count.setter
    def cpu_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "cpu_count", value)

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The data center in which the dedicatated host is to be provisioned.
        """
        return pulumi.get(self, "datacenter")

    @datacenter.setter
    def datacenter(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "datacenter", value)

    @_builtins.property
    @pulumi.getter(name="diskCapacity")
    def disk_capacity(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The capacity that the dedicated host's disk allocation is restricted to.
        """
        return pulumi.get(self, "disk_capacity")

    @disk_capacity.setter
    def disk_capacity(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "disk_capacity", value)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The domain of dedicatated host.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain", value)

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The flavor of the dedicatated host.
        """
        return pulumi.get(self, "flavor")

    @flavor.setter
    def flavor(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "flavor", value)

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The host name of dedicatated host.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hostname", value)

    @_builtins.property
    @pulumi.getter(name="hourlyBilling")
    def hourly_billing(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The billing type for the dedicatated host.
        """
        return pulumi.get(self, "hourly_billing")

    @hourly_billing.setter
    def hourly_billing(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "hourly_billing", value)

    @_builtins.property
    @pulumi.getter(name="memoryCapacity")
    def memory_capacity(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The capacity that the dedicated host's memory allocation is restricted to.
        """
        return pulumi.get(self, "memory_capacity")

    @memory_capacity.setter
    def memory_capacity(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "memory_capacity", value)

    @_builtins.property
    @pulumi.getter(name="routerHostname")
    def router_hostname(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The hostname of the primary router that the dedicated host is associated with.
        """
        return pulumi.get(self, "router_hostname")

    @router_hostname.setter
    def router_hostname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "router_hostname", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="waitTimeMinutes")
    def wait_time_minutes(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "wait_time_minutes")

    @wait_time_minutes.setter
    def wait_time_minutes(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "wait_time_minutes", value)


@pulumi.type_token("ibm:index/computeDedicatedHost:ComputeDedicatedHost")
class ComputeDedicatedHost(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compute_dedicated_host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 domain: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 hourly_billing: Optional[pulumi.Input[_builtins.bool]] = None,
                 router_hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 wait_time_minutes: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a ComputeDedicatedHost resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] datacenter: The data center in which the dedicatated host is to be provisioned.
        :param pulumi.Input[_builtins.str] domain: The domain of dedicatated host.
        :param pulumi.Input[_builtins.str] flavor: The flavor of the dedicatated host.
        :param pulumi.Input[_builtins.str] hostname: The host name of dedicatated host.
        :param pulumi.Input[_builtins.bool] hourly_billing: The billing type for the dedicatated host.
        :param pulumi.Input[_builtins.str] router_hostname: The hostname of the primary router that the dedicated host is associated with.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ComputeDedicatedHostArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ComputeDedicatedHost resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ComputeDedicatedHostArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ComputeDedicatedHostArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compute_dedicated_host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 domain: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 hourly_billing: Optional[pulumi.Input[_builtins.bool]] = None,
                 router_hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 wait_time_minutes: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ComputeDedicatedHostArgs.__new__(ComputeDedicatedHostArgs)

            __props__.__dict__["compute_dedicated_host_id"] = compute_dedicated_host_id
            if datacenter is None and not opts.urn:
                raise TypeError("Missing required property 'datacenter'")
            __props__.__dict__["datacenter"] = datacenter
            if domain is None and not opts.urn:
                raise TypeError("Missing required property 'domain'")
            __props__.__dict__["domain"] = domain
            __props__.__dict__["flavor"] = flavor
            if hostname is None and not opts.urn:
                raise TypeError("Missing required property 'hostname'")
            __props__.__dict__["hostname"] = hostname
            __props__.__dict__["hourly_billing"] = hourly_billing
            if router_hostname is None and not opts.urn:
                raise TypeError("Missing required property 'router_hostname'")
            __props__.__dict__["router_hostname"] = router_hostname
            __props__.__dict__["tags"] = tags
            __props__.__dict__["wait_time_minutes"] = wait_time_minutes
            __props__.__dict__["cpu_count"] = None
            __props__.__dict__["disk_capacity"] = None
            __props__.__dict__["memory_capacity"] = None
        super(ComputeDedicatedHost, __self__).__init__(
            'ibm:index/computeDedicatedHost:ComputeDedicatedHost',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            compute_dedicated_host_id: Optional[pulumi.Input[_builtins.str]] = None,
            cpu_count: Optional[pulumi.Input[_builtins.float]] = None,
            datacenter: Optional[pulumi.Input[_builtins.str]] = None,
            disk_capacity: Optional[pulumi.Input[_builtins.float]] = None,
            domain: Optional[pulumi.Input[_builtins.str]] = None,
            flavor: Optional[pulumi.Input[_builtins.str]] = None,
            hostname: Optional[pulumi.Input[_builtins.str]] = None,
            hourly_billing: Optional[pulumi.Input[_builtins.bool]] = None,
            memory_capacity: Optional[pulumi.Input[_builtins.float]] = None,
            router_hostname: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            wait_time_minutes: Optional[pulumi.Input[_builtins.float]] = None) -> 'ComputeDedicatedHost':
        """
        Get an existing ComputeDedicatedHost resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] cpu_count: The capacity that the dedicated host's CPU allocation is restricted to.
        :param pulumi.Input[_builtins.str] datacenter: The data center in which the dedicatated host is to be provisioned.
        :param pulumi.Input[_builtins.float] disk_capacity: The capacity that the dedicated host's disk allocation is restricted to.
        :param pulumi.Input[_builtins.str] domain: The domain of dedicatated host.
        :param pulumi.Input[_builtins.str] flavor: The flavor of the dedicatated host.
        :param pulumi.Input[_builtins.str] hostname: The host name of dedicatated host.
        :param pulumi.Input[_builtins.bool] hourly_billing: The billing type for the dedicatated host.
        :param pulumi.Input[_builtins.float] memory_capacity: The capacity that the dedicated host's memory allocation is restricted to.
        :param pulumi.Input[_builtins.str] router_hostname: The hostname of the primary router that the dedicated host is associated with.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ComputeDedicatedHostState.__new__(_ComputeDedicatedHostState)

        __props__.__dict__["compute_dedicated_host_id"] = compute_dedicated_host_id
        __props__.__dict__["cpu_count"] = cpu_count
        __props__.__dict__["datacenter"] = datacenter
        __props__.__dict__["disk_capacity"] = disk_capacity
        __props__.__dict__["domain"] = domain
        __props__.__dict__["flavor"] = flavor
        __props__.__dict__["hostname"] = hostname
        __props__.__dict__["hourly_billing"] = hourly_billing
        __props__.__dict__["memory_capacity"] = memory_capacity
        __props__.__dict__["router_hostname"] = router_hostname
        __props__.__dict__["tags"] = tags
        __props__.__dict__["wait_time_minutes"] = wait_time_minutes
        return ComputeDedicatedHost(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="computeDedicatedHostId")
    def compute_dedicated_host_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "compute_dedicated_host_id")

    @_builtins.property
    @pulumi.getter(name="cpuCount")
    def cpu_count(self) -> pulumi.Output[_builtins.float]:
        """
        The capacity that the dedicated host's CPU allocation is restricted to.
        """
        return pulumi.get(self, "cpu_count")

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> pulumi.Output[_builtins.str]:
        """
        The data center in which the dedicatated host is to be provisioned.
        """
        return pulumi.get(self, "datacenter")

    @_builtins.property
    @pulumi.getter(name="diskCapacity")
    def disk_capacity(self) -> pulumi.Output[_builtins.float]:
        """
        The capacity that the dedicated host's disk allocation is restricted to.
        """
        return pulumi.get(self, "disk_capacity")

    @_builtins.property
    @pulumi.getter
    def domain(self) -> pulumi.Output[_builtins.str]:
        """
        The domain of dedicatated host.
        """
        return pulumi.get(self, "domain")

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The flavor of the dedicatated host.
        """
        return pulumi.get(self, "flavor")

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[_builtins.str]:
        """
        The host name of dedicatated host.
        """
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter(name="hourlyBilling")
    def hourly_billing(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        The billing type for the dedicatated host.
        """
        return pulumi.get(self, "hourly_billing")

    @_builtins.property
    @pulumi.getter(name="memoryCapacity")
    def memory_capacity(self) -> pulumi.Output[_builtins.float]:
        """
        The capacity that the dedicated host's memory allocation is restricted to.
        """
        return pulumi.get(self, "memory_capacity")

    @_builtins.property
    @pulumi.getter(name="routerHostname")
    def router_hostname(self) -> pulumi.Output[_builtins.str]:
        """
        The hostname of the primary router that the dedicated host is associated with.
        """
        return pulumi.get(self, "router_hostname")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="waitTimeMinutes")
    def wait_time_minutes(self) -> pulumi.Output[Optional[_builtins.float]]:
        return pulumi.get(self, "wait_time_minutes")

