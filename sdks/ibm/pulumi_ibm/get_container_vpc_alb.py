# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetContainerVpcAlbResult',
    'AwaitableGetContainerVpcAlbResult',
    'get_container_vpc_alb',
    'get_container_vpc_alb_output',
]

@pulumi.output_type
class GetContainerVpcAlbResult:
    """
    A collection of values returned by getContainerVpcAlb.
    """
    def __init__(__self__, alb_id=None, alb_type=None, cluster=None, disable_deployment=None, enable=None, id=None, load_balancer_hostname=None, name=None, resize=None, resource_group_id=None, state=None, status=None, zone=None):
        if alb_id and not isinstance(alb_id, str):
            raise TypeError("Expected argument 'alb_id' to be a str")
        pulumi.set(__self__, "alb_id", alb_id)
        if alb_type and not isinstance(alb_type, str):
            raise TypeError("Expected argument 'alb_type' to be a str")
        pulumi.set(__self__, "alb_type", alb_type)
        if cluster and not isinstance(cluster, str):
            raise TypeError("Expected argument 'cluster' to be a str")
        pulumi.set(__self__, "cluster", cluster)
        if disable_deployment and not isinstance(disable_deployment, bool):
            raise TypeError("Expected argument 'disable_deployment' to be a bool")
        pulumi.set(__self__, "disable_deployment", disable_deployment)
        if enable and not isinstance(enable, bool):
            raise TypeError("Expected argument 'enable' to be a bool")
        pulumi.set(__self__, "enable", enable)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if load_balancer_hostname and not isinstance(load_balancer_hostname, str):
            raise TypeError("Expected argument 'load_balancer_hostname' to be a str")
        pulumi.set(__self__, "load_balancer_hostname", load_balancer_hostname)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resize and not isinstance(resize, bool):
            raise TypeError("Expected argument 'resize' to be a bool")
        pulumi.set(__self__, "resize", resize)
        if resource_group_id and not isinstance(resource_group_id, str):
            raise TypeError("Expected argument 'resource_group_id' to be a str")
        pulumi.set(__self__, "resource_group_id", resource_group_id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter(name="albId")
    def alb_id(self) -> _builtins.str:
        return pulumi.get(self, "alb_id")

    @_builtins.property
    @pulumi.getter(name="albType")
    def alb_type(self) -> _builtins.str:
        return pulumi.get(self, "alb_type")

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> _builtins.str:
        return pulumi.get(self, "cluster")

    @_builtins.property
    @pulumi.getter(name="disableDeployment")
    def disable_deployment(self) -> _builtins.bool:
        return pulumi.get(self, "disable_deployment")

    @_builtins.property
    @pulumi.getter
    def enable(self) -> _builtins.bool:
        return pulumi.get(self, "enable")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="loadBalancerHostname")
    def load_balancer_hostname(self) -> _builtins.str:
        return pulumi.get(self, "load_balancer_hostname")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def resize(self) -> _builtins.bool:
        return pulumi.get(self, "resize")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> _builtins.str:
        return pulumi.get(self, "zone")


class AwaitableGetContainerVpcAlbResult(GetContainerVpcAlbResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetContainerVpcAlbResult(
            alb_id=self.alb_id,
            alb_type=self.alb_type,
            cluster=self.cluster,
            disable_deployment=self.disable_deployment,
            enable=self.enable,
            id=self.id,
            load_balancer_hostname=self.load_balancer_hostname,
            name=self.name,
            resize=self.resize,
            resource_group_id=self.resource_group_id,
            state=self.state,
            status=self.status,
            zone=self.zone)


def get_container_vpc_alb(alb_id: Optional[_builtins.str] = None,
                          id: Optional[_builtins.str] = None,
                          resource_group_id: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetContainerVpcAlbResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['albId'] = alb_id
    __args__['id'] = id
    __args__['resourceGroupId'] = resource_group_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getContainerVpcAlb:getContainerVpcAlb', __args__, opts=opts, typ=GetContainerVpcAlbResult, package_ref=_utilities.get_package()).value

    return AwaitableGetContainerVpcAlbResult(
        alb_id=pulumi.get(__ret__, 'alb_id'),
        alb_type=pulumi.get(__ret__, 'alb_type'),
        cluster=pulumi.get(__ret__, 'cluster'),
        disable_deployment=pulumi.get(__ret__, 'disable_deployment'),
        enable=pulumi.get(__ret__, 'enable'),
        id=pulumi.get(__ret__, 'id'),
        load_balancer_hostname=pulumi.get(__ret__, 'load_balancer_hostname'),
        name=pulumi.get(__ret__, 'name'),
        resize=pulumi.get(__ret__, 'resize'),
        resource_group_id=pulumi.get(__ret__, 'resource_group_id'),
        state=pulumi.get(__ret__, 'state'),
        status=pulumi.get(__ret__, 'status'),
        zone=pulumi.get(__ret__, 'zone'))
def get_container_vpc_alb_output(alb_id: Optional[pulumi.Input[_builtins.str]] = None,
                                 id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 resource_group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetContainerVpcAlbResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['albId'] = alb_id
    __args__['id'] = id
    __args__['resourceGroupId'] = resource_group_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getContainerVpcAlb:getContainerVpcAlb', __args__, opts=opts, typ=GetContainerVpcAlbResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetContainerVpcAlbResult(
        alb_id=pulumi.get(__response__, 'alb_id'),
        alb_type=pulumi.get(__response__, 'alb_type'),
        cluster=pulumi.get(__response__, 'cluster'),
        disable_deployment=pulumi.get(__response__, 'disable_deployment'),
        enable=pulumi.get(__response__, 'enable'),
        id=pulumi.get(__response__, 'id'),
        load_balancer_hostname=pulumi.get(__response__, 'load_balancer_hostname'),
        name=pulumi.get(__response__, 'name'),
        resize=pulumi.get(__response__, 'resize'),
        resource_group_id=pulumi.get(__response__, 'resource_group_id'),
        state=pulumi.get(__response__, 'state'),
        status=pulumi.get(__response__, 'status'),
        zone=pulumi.get(__response__, 'zone')))
