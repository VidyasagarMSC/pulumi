# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsSnapshotClonesResult',
    'AwaitableGetIsSnapshotClonesResult',
    'get_is_snapshot_clones',
    'get_is_snapshot_clones_output',
]

@pulumi.output_type
class GetIsSnapshotClonesResult:
    """
    A collection of values returned by getIsSnapshotClones.
    """
    def __init__(__self__, clones=None, id=None, snapshot=None):
        if clones and not isinstance(clones, list):
            raise TypeError("Expected argument 'clones' to be a list")
        pulumi.set(__self__, "clones", clones)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if snapshot and not isinstance(snapshot, str):
            raise TypeError("Expected argument 'snapshot' to be a str")
        pulumi.set(__self__, "snapshot", snapshot)

    @_builtins.property
    @pulumi.getter
    def clones(self) -> Sequence['outputs.GetIsSnapshotClonesCloneResult']:
        return pulumi.get(self, "clones")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def snapshot(self) -> _builtins.str:
        return pulumi.get(self, "snapshot")


class AwaitableGetIsSnapshotClonesResult(GetIsSnapshotClonesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsSnapshotClonesResult(
            clones=self.clones,
            id=self.id,
            snapshot=self.snapshot)


def get_is_snapshot_clones(id: Optional[_builtins.str] = None,
                           snapshot: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsSnapshotClonesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['snapshot'] = snapshot
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsSnapshotClones:getIsSnapshotClones', __args__, opts=opts, typ=GetIsSnapshotClonesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsSnapshotClonesResult(
        clones=pulumi.get(__ret__, 'clones'),
        id=pulumi.get(__ret__, 'id'),
        snapshot=pulumi.get(__ret__, 'snapshot'))
def get_is_snapshot_clones_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  snapshot: Optional[pulumi.Input[_builtins.str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsSnapshotClonesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['snapshot'] = snapshot
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsSnapshotClones:getIsSnapshotClones', __args__, opts=opts, typ=GetIsSnapshotClonesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsSnapshotClonesResult(
        clones=pulumi.get(__response__, 'clones'),
        id=pulumi.get(__response__, 'id'),
        snapshot=pulumi.get(__response__, 'snapshot')))
