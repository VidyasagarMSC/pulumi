# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LogsDashboardArgs', 'LogsDashboard']

@pulumi.input_type
class LogsDashboardArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 layout: pulumi.Input['LogsDashboardLayoutArgs'],
                 absolute_time_frame: Optional[pulumi.Input['LogsDashboardAbsoluteTimeFrameArgs']] = None,
                 annotations: Optional[pulumi.Input[Sequence[pulumi.Input['LogsDashboardAnnotationArgs']]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 false: Optional[pulumi.Input['LogsDashboardFalseArgs']] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['LogsDashboardFilterArgs']]]] = None,
                 five_minutes: Optional[pulumi.Input['LogsDashboardFiveMinutesArgs']] = None,
                 folder_id: Optional[pulumi.Input['LogsDashboardFolderIdArgs']] = None,
                 folder_path: Optional[pulumi.Input['LogsDashboardFolderPathArgs']] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 logs_dashboard_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 relative_time_frame: Optional[pulumi.Input[_builtins.str]] = None,
                 two_minutes: Optional[pulumi.Input['LogsDashboardTwoMinutesArgs']] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['LogsDashboardVariableArgs']]]] = None):
        """
        The set of arguments for constructing a LogsDashboard resource.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the logs instance.
        :param pulumi.Input['LogsDashboardLayoutArgs'] layout: Layout configuration for the dashboard's visual elements.
        :param pulumi.Input['LogsDashboardAbsoluteTimeFrameArgs'] absolute_time_frame: Absolute time frame specifying a fixed start and end time.
        :param pulumi.Input[Sequence[pulumi.Input['LogsDashboardAnnotationArgs']]] annotations: List of annotations that can be applied to the dashboard's visual elements.
        :param pulumi.Input[_builtins.str] description: Brief description or summary of the dashboard's purpose or content.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input['LogsDashboardFalseArgs'] false: Auto refresh interval is set to off.
        :param pulumi.Input[Sequence[pulumi.Input['LogsDashboardFilterArgs']]] filters: List of filters that can be applied to the dashboard's data.
        :param pulumi.Input['LogsDashboardFiveMinutesArgs'] five_minutes: Auto refresh interval is set to five minutes.
        :param pulumi.Input['LogsDashboardFolderIdArgs'] folder_id: Unique identifier of the folder containing the dashboard.
        :param pulumi.Input['LogsDashboardFolderPathArgs'] folder_path: Path of the folder containing the dashboard.
        :param pulumi.Input[_builtins.str] href: Unique identifier for the dashboard.
        :param pulumi.Input[_builtins.str] name: Display name of the dashboard.
        :param pulumi.Input[_builtins.str] region: The region of the logs instance.
        :param pulumi.Input[_builtins.str] relative_time_frame: Relative time frame specifying a duration from the current time.
        :param pulumi.Input['LogsDashboardTwoMinutesArgs'] two_minutes: Auto refresh interval is set to two minutes.
        :param pulumi.Input[Sequence[pulumi.Input['LogsDashboardVariableArgs']]] variables: List of variables that can be used within the dashboard for dynamic content.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "layout", layout)
        if absolute_time_frame is not None:
            pulumi.set(__self__, "absolute_time_frame", absolute_time_frame)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if false is not None:
            pulumi.set(__self__, "false", false)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if five_minutes is not None:
            pulumi.set(__self__, "five_minutes", five_minutes)
        if folder_id is not None:
            pulumi.set(__self__, "folder_id", folder_id)
        if folder_path is not None:
            pulumi.set(__self__, "folder_path", folder_path)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if logs_dashboard_id is not None:
            pulumi.set(__self__, "logs_dashboard_id", logs_dashboard_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if relative_time_frame is not None:
            pulumi.set(__self__, "relative_time_frame", relative_time_frame)
        if two_minutes is not None:
            pulumi.set(__self__, "two_minutes", two_minutes)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the logs instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def layout(self) -> pulumi.Input['LogsDashboardLayoutArgs']:
        """
        Layout configuration for the dashboard's visual elements.
        """
        return pulumi.get(self, "layout")

    @layout.setter
    def layout(self, value: pulumi.Input['LogsDashboardLayoutArgs']):
        pulumi.set(self, "layout", value)

    @_builtins.property
    @pulumi.getter(name="absoluteTimeFrame")
    def absolute_time_frame(self) -> Optional[pulumi.Input['LogsDashboardAbsoluteTimeFrameArgs']]:
        """
        Absolute time frame specifying a fixed start and end time.
        """
        return pulumi.get(self, "absolute_time_frame")

    @absolute_time_frame.setter
    def absolute_time_frame(self, value: Optional[pulumi.Input['LogsDashboardAbsoluteTimeFrameArgs']]):
        pulumi.set(self, "absolute_time_frame", value)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogsDashboardAnnotationArgs']]]]:
        """
        List of annotations that can be applied to the dashboard's visual elements.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogsDashboardAnnotationArgs']]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Brief description or summary of the dashboard's purpose or content.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter
    def false(self) -> Optional[pulumi.Input['LogsDashboardFalseArgs']]:
        """
        Auto refresh interval is set to off.
        """
        return pulumi.get(self, "false")

    @false.setter
    def false(self, value: Optional[pulumi.Input['LogsDashboardFalseArgs']]):
        pulumi.set(self, "false", value)

    @_builtins.property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogsDashboardFilterArgs']]]]:
        """
        List of filters that can be applied to the dashboard's data.
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogsDashboardFilterArgs']]]]):
        pulumi.set(self, "filters", value)

    @_builtins.property
    @pulumi.getter(name="fiveMinutes")
    def five_minutes(self) -> Optional[pulumi.Input['LogsDashboardFiveMinutesArgs']]:
        """
        Auto refresh interval is set to five minutes.
        """
        return pulumi.get(self, "five_minutes")

    @five_minutes.setter
    def five_minutes(self, value: Optional[pulumi.Input['LogsDashboardFiveMinutesArgs']]):
        pulumi.set(self, "five_minutes", value)

    @_builtins.property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> Optional[pulumi.Input['LogsDashboardFolderIdArgs']]:
        """
        Unique identifier of the folder containing the dashboard.
        """
        return pulumi.get(self, "folder_id")

    @folder_id.setter
    def folder_id(self, value: Optional[pulumi.Input['LogsDashboardFolderIdArgs']]):
        pulumi.set(self, "folder_id", value)

    @_builtins.property
    @pulumi.getter(name="folderPath")
    def folder_path(self) -> Optional[pulumi.Input['LogsDashboardFolderPathArgs']]:
        """
        Path of the folder containing the dashboard.
        """
        return pulumi.get(self, "folder_path")

    @folder_path.setter
    def folder_path(self, value: Optional[pulumi.Input['LogsDashboardFolderPathArgs']]):
        pulumi.set(self, "folder_path", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique identifier for the dashboard.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="logsDashboardId")
    def logs_dashboard_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "logs_dashboard_id")

    @logs_dashboard_id.setter
    def logs_dashboard_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logs_dashboard_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Display name of the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the logs instance.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="relativeTimeFrame")
    def relative_time_frame(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Relative time frame specifying a duration from the current time.
        """
        return pulumi.get(self, "relative_time_frame")

    @relative_time_frame.setter
    def relative_time_frame(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "relative_time_frame", value)

    @_builtins.property
    @pulumi.getter(name="twoMinutes")
    def two_minutes(self) -> Optional[pulumi.Input['LogsDashboardTwoMinutesArgs']]:
        """
        Auto refresh interval is set to two minutes.
        """
        return pulumi.get(self, "two_minutes")

    @two_minutes.setter
    def two_minutes(self, value: Optional[pulumi.Input['LogsDashboardTwoMinutesArgs']]):
        pulumi.set(self, "two_minutes", value)

    @_builtins.property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogsDashboardVariableArgs']]]]:
        """
        List of variables that can be used within the dashboard for dynamic content.
        """
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogsDashboardVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class _LogsDashboardState:
    def __init__(__self__, *,
                 absolute_time_frame: Optional[pulumi.Input['LogsDashboardAbsoluteTimeFrameArgs']] = None,
                 annotations: Optional[pulumi.Input[Sequence[pulumi.Input['LogsDashboardAnnotationArgs']]]] = None,
                 dashboard_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 false: Optional[pulumi.Input['LogsDashboardFalseArgs']] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['LogsDashboardFilterArgs']]]] = None,
                 five_minutes: Optional[pulumi.Input['LogsDashboardFiveMinutesArgs']] = None,
                 folder_id: Optional[pulumi.Input['LogsDashboardFolderIdArgs']] = None,
                 folder_path: Optional[pulumi.Input['LogsDashboardFolderPathArgs']] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 layout: Optional[pulumi.Input['LogsDashboardLayoutArgs']] = None,
                 logs_dashboard_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 relative_time_frame: Optional[pulumi.Input[_builtins.str]] = None,
                 two_minutes: Optional[pulumi.Input['LogsDashboardTwoMinutesArgs']] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['LogsDashboardVariableArgs']]]] = None):
        """
        Input properties used for looking up and filtering LogsDashboard resources.
        :param pulumi.Input['LogsDashboardAbsoluteTimeFrameArgs'] absolute_time_frame: Absolute time frame specifying a fixed start and end time.
        :param pulumi.Input[Sequence[pulumi.Input['LogsDashboardAnnotationArgs']]] annotations: List of annotations that can be applied to the dashboard's visual elements.
        :param pulumi.Input[_builtins.str] dashboard_id: Dashboard Id.
        :param pulumi.Input[_builtins.str] description: Brief description or summary of the dashboard's purpose or content.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input['LogsDashboardFalseArgs'] false: Auto refresh interval is set to off.
        :param pulumi.Input[Sequence[pulumi.Input['LogsDashboardFilterArgs']]] filters: List of filters that can be applied to the dashboard's data.
        :param pulumi.Input['LogsDashboardFiveMinutesArgs'] five_minutes: Auto refresh interval is set to five minutes.
        :param pulumi.Input['LogsDashboardFolderIdArgs'] folder_id: Unique identifier of the folder containing the dashboard.
        :param pulumi.Input['LogsDashboardFolderPathArgs'] folder_path: Path of the folder containing the dashboard.
        :param pulumi.Input[_builtins.str] href: Unique identifier for the dashboard.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the logs instance.
        :param pulumi.Input['LogsDashboardLayoutArgs'] layout: Layout configuration for the dashboard's visual elements.
        :param pulumi.Input[_builtins.str] name: Display name of the dashboard.
        :param pulumi.Input[_builtins.str] region: The region of the logs instance.
        :param pulumi.Input[_builtins.str] relative_time_frame: Relative time frame specifying a duration from the current time.
        :param pulumi.Input['LogsDashboardTwoMinutesArgs'] two_minutes: Auto refresh interval is set to two minutes.
        :param pulumi.Input[Sequence[pulumi.Input['LogsDashboardVariableArgs']]] variables: List of variables that can be used within the dashboard for dynamic content.
        """
        if absolute_time_frame is not None:
            pulumi.set(__self__, "absolute_time_frame", absolute_time_frame)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if dashboard_id is not None:
            pulumi.set(__self__, "dashboard_id", dashboard_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if false is not None:
            pulumi.set(__self__, "false", false)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if five_minutes is not None:
            pulumi.set(__self__, "five_minutes", five_minutes)
        if folder_id is not None:
            pulumi.set(__self__, "folder_id", folder_id)
        if folder_path is not None:
            pulumi.set(__self__, "folder_path", folder_path)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if layout is not None:
            pulumi.set(__self__, "layout", layout)
        if logs_dashboard_id is not None:
            pulumi.set(__self__, "logs_dashboard_id", logs_dashboard_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if relative_time_frame is not None:
            pulumi.set(__self__, "relative_time_frame", relative_time_frame)
        if two_minutes is not None:
            pulumi.set(__self__, "two_minutes", two_minutes)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @_builtins.property
    @pulumi.getter(name="absoluteTimeFrame")
    def absolute_time_frame(self) -> Optional[pulumi.Input['LogsDashboardAbsoluteTimeFrameArgs']]:
        """
        Absolute time frame specifying a fixed start and end time.
        """
        return pulumi.get(self, "absolute_time_frame")

    @absolute_time_frame.setter
    def absolute_time_frame(self, value: Optional[pulumi.Input['LogsDashboardAbsoluteTimeFrameArgs']]):
        pulumi.set(self, "absolute_time_frame", value)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogsDashboardAnnotationArgs']]]]:
        """
        List of annotations that can be applied to the dashboard's visual elements.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogsDashboardAnnotationArgs']]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter(name="dashboardId")
    def dashboard_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Dashboard Id.
        """
        return pulumi.get(self, "dashboard_id")

    @dashboard_id.setter
    def dashboard_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dashboard_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Brief description or summary of the dashboard's purpose or content.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter
    def false(self) -> Optional[pulumi.Input['LogsDashboardFalseArgs']]:
        """
        Auto refresh interval is set to off.
        """
        return pulumi.get(self, "false")

    @false.setter
    def false(self, value: Optional[pulumi.Input['LogsDashboardFalseArgs']]):
        pulumi.set(self, "false", value)

    @_builtins.property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogsDashboardFilterArgs']]]]:
        """
        List of filters that can be applied to the dashboard's data.
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogsDashboardFilterArgs']]]]):
        pulumi.set(self, "filters", value)

    @_builtins.property
    @pulumi.getter(name="fiveMinutes")
    def five_minutes(self) -> Optional[pulumi.Input['LogsDashboardFiveMinutesArgs']]:
        """
        Auto refresh interval is set to five minutes.
        """
        return pulumi.get(self, "five_minutes")

    @five_minutes.setter
    def five_minutes(self, value: Optional[pulumi.Input['LogsDashboardFiveMinutesArgs']]):
        pulumi.set(self, "five_minutes", value)

    @_builtins.property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> Optional[pulumi.Input['LogsDashboardFolderIdArgs']]:
        """
        Unique identifier of the folder containing the dashboard.
        """
        return pulumi.get(self, "folder_id")

    @folder_id.setter
    def folder_id(self, value: Optional[pulumi.Input['LogsDashboardFolderIdArgs']]):
        pulumi.set(self, "folder_id", value)

    @_builtins.property
    @pulumi.getter(name="folderPath")
    def folder_path(self) -> Optional[pulumi.Input['LogsDashboardFolderPathArgs']]:
        """
        Path of the folder containing the dashboard.
        """
        return pulumi.get(self, "folder_path")

    @folder_path.setter
    def folder_path(self, value: Optional[pulumi.Input['LogsDashboardFolderPathArgs']]):
        pulumi.set(self, "folder_path", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique identifier for the dashboard.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the logs instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def layout(self) -> Optional[pulumi.Input['LogsDashboardLayoutArgs']]:
        """
        Layout configuration for the dashboard's visual elements.
        """
        return pulumi.get(self, "layout")

    @layout.setter
    def layout(self, value: Optional[pulumi.Input['LogsDashboardLayoutArgs']]):
        pulumi.set(self, "layout", value)

    @_builtins.property
    @pulumi.getter(name="logsDashboardId")
    def logs_dashboard_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "logs_dashboard_id")

    @logs_dashboard_id.setter
    def logs_dashboard_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logs_dashboard_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Display name of the dashboard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the logs instance.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="relativeTimeFrame")
    def relative_time_frame(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Relative time frame specifying a duration from the current time.
        """
        return pulumi.get(self, "relative_time_frame")

    @relative_time_frame.setter
    def relative_time_frame(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "relative_time_frame", value)

    @_builtins.property
    @pulumi.getter(name="twoMinutes")
    def two_minutes(self) -> Optional[pulumi.Input['LogsDashboardTwoMinutesArgs']]:
        """
        Auto refresh interval is set to two minutes.
        """
        return pulumi.get(self, "two_minutes")

    @two_minutes.setter
    def two_minutes(self, value: Optional[pulumi.Input['LogsDashboardTwoMinutesArgs']]):
        pulumi.set(self, "two_minutes", value)

    @_builtins.property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogsDashboardVariableArgs']]]]:
        """
        List of variables that can be used within the dashboard for dynamic content.
        """
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogsDashboardVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.type_token("ibm:index/logsDashboard:LogsDashboard")
class LogsDashboard(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 absolute_time_frame: Optional[pulumi.Input[Union['LogsDashboardAbsoluteTimeFrameArgs', 'LogsDashboardAbsoluteTimeFrameArgsDict']]] = None,
                 annotations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogsDashboardAnnotationArgs', 'LogsDashboardAnnotationArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 false: Optional[pulumi.Input[Union['LogsDashboardFalseArgs', 'LogsDashboardFalseArgsDict']]] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogsDashboardFilterArgs', 'LogsDashboardFilterArgsDict']]]]] = None,
                 five_minutes: Optional[pulumi.Input[Union['LogsDashboardFiveMinutesArgs', 'LogsDashboardFiveMinutesArgsDict']]] = None,
                 folder_id: Optional[pulumi.Input[Union['LogsDashboardFolderIdArgs', 'LogsDashboardFolderIdArgsDict']]] = None,
                 folder_path: Optional[pulumi.Input[Union['LogsDashboardFolderPathArgs', 'LogsDashboardFolderPathArgsDict']]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 layout: Optional[pulumi.Input[Union['LogsDashboardLayoutArgs', 'LogsDashboardLayoutArgsDict']]] = None,
                 logs_dashboard_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 relative_time_frame: Optional[pulumi.Input[_builtins.str]] = None,
                 two_minutes: Optional[pulumi.Input[Union['LogsDashboardTwoMinutesArgs', 'LogsDashboardTwoMinutesArgsDict']]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogsDashboardVariableArgs', 'LogsDashboardVariableArgsDict']]]]] = None,
                 __props__=None):
        """
        Create a LogsDashboard resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['LogsDashboardAbsoluteTimeFrameArgs', 'LogsDashboardAbsoluteTimeFrameArgsDict']] absolute_time_frame: Absolute time frame specifying a fixed start and end time.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LogsDashboardAnnotationArgs', 'LogsDashboardAnnotationArgsDict']]]] annotations: List of annotations that can be applied to the dashboard's visual elements.
        :param pulumi.Input[_builtins.str] description: Brief description or summary of the dashboard's purpose or content.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[Union['LogsDashboardFalseArgs', 'LogsDashboardFalseArgsDict']] false: Auto refresh interval is set to off.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LogsDashboardFilterArgs', 'LogsDashboardFilterArgsDict']]]] filters: List of filters that can be applied to the dashboard's data.
        :param pulumi.Input[Union['LogsDashboardFiveMinutesArgs', 'LogsDashboardFiveMinutesArgsDict']] five_minutes: Auto refresh interval is set to five minutes.
        :param pulumi.Input[Union['LogsDashboardFolderIdArgs', 'LogsDashboardFolderIdArgsDict']] folder_id: Unique identifier of the folder containing the dashboard.
        :param pulumi.Input[Union['LogsDashboardFolderPathArgs', 'LogsDashboardFolderPathArgsDict']] folder_path: Path of the folder containing the dashboard.
        :param pulumi.Input[_builtins.str] href: Unique identifier for the dashboard.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the logs instance.
        :param pulumi.Input[Union['LogsDashboardLayoutArgs', 'LogsDashboardLayoutArgsDict']] layout: Layout configuration for the dashboard's visual elements.
        :param pulumi.Input[_builtins.str] name: Display name of the dashboard.
        :param pulumi.Input[_builtins.str] region: The region of the logs instance.
        :param pulumi.Input[_builtins.str] relative_time_frame: Relative time frame specifying a duration from the current time.
        :param pulumi.Input[Union['LogsDashboardTwoMinutesArgs', 'LogsDashboardTwoMinutesArgsDict']] two_minutes: Auto refresh interval is set to two minutes.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LogsDashboardVariableArgs', 'LogsDashboardVariableArgsDict']]]] variables: List of variables that can be used within the dashboard for dynamic content.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LogsDashboardArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a LogsDashboard resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LogsDashboardArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LogsDashboardArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 absolute_time_frame: Optional[pulumi.Input[Union['LogsDashboardAbsoluteTimeFrameArgs', 'LogsDashboardAbsoluteTimeFrameArgsDict']]] = None,
                 annotations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogsDashboardAnnotationArgs', 'LogsDashboardAnnotationArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 false: Optional[pulumi.Input[Union['LogsDashboardFalseArgs', 'LogsDashboardFalseArgsDict']]] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogsDashboardFilterArgs', 'LogsDashboardFilterArgsDict']]]]] = None,
                 five_minutes: Optional[pulumi.Input[Union['LogsDashboardFiveMinutesArgs', 'LogsDashboardFiveMinutesArgsDict']]] = None,
                 folder_id: Optional[pulumi.Input[Union['LogsDashboardFolderIdArgs', 'LogsDashboardFolderIdArgsDict']]] = None,
                 folder_path: Optional[pulumi.Input[Union['LogsDashboardFolderPathArgs', 'LogsDashboardFolderPathArgsDict']]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 layout: Optional[pulumi.Input[Union['LogsDashboardLayoutArgs', 'LogsDashboardLayoutArgsDict']]] = None,
                 logs_dashboard_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 relative_time_frame: Optional[pulumi.Input[_builtins.str]] = None,
                 two_minutes: Optional[pulumi.Input[Union['LogsDashboardTwoMinutesArgs', 'LogsDashboardTwoMinutesArgsDict']]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogsDashboardVariableArgs', 'LogsDashboardVariableArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LogsDashboardArgs.__new__(LogsDashboardArgs)

            __props__.__dict__["absolute_time_frame"] = absolute_time_frame
            __props__.__dict__["annotations"] = annotations
            __props__.__dict__["description"] = description
            __props__.__dict__["endpoint_type"] = endpoint_type
            __props__.__dict__["false"] = false
            __props__.__dict__["filters"] = filters
            __props__.__dict__["five_minutes"] = five_minutes
            __props__.__dict__["folder_id"] = folder_id
            __props__.__dict__["folder_path"] = folder_path
            __props__.__dict__["href"] = href
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if layout is None and not opts.urn:
                raise TypeError("Missing required property 'layout'")
            __props__.__dict__["layout"] = layout
            __props__.__dict__["logs_dashboard_id"] = logs_dashboard_id
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["relative_time_frame"] = relative_time_frame
            __props__.__dict__["two_minutes"] = two_minutes
            __props__.__dict__["variables"] = variables
            __props__.__dict__["dashboard_id"] = None
        super(LogsDashboard, __self__).__init__(
            'ibm:index/logsDashboard:LogsDashboard',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            absolute_time_frame: Optional[pulumi.Input[Union['LogsDashboardAbsoluteTimeFrameArgs', 'LogsDashboardAbsoluteTimeFrameArgsDict']]] = None,
            annotations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogsDashboardAnnotationArgs', 'LogsDashboardAnnotationArgsDict']]]]] = None,
            dashboard_id: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
            false: Optional[pulumi.Input[Union['LogsDashboardFalseArgs', 'LogsDashboardFalseArgsDict']]] = None,
            filters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogsDashboardFilterArgs', 'LogsDashboardFilterArgsDict']]]]] = None,
            five_minutes: Optional[pulumi.Input[Union['LogsDashboardFiveMinutesArgs', 'LogsDashboardFiveMinutesArgsDict']]] = None,
            folder_id: Optional[pulumi.Input[Union['LogsDashboardFolderIdArgs', 'LogsDashboardFolderIdArgsDict']]] = None,
            folder_path: Optional[pulumi.Input[Union['LogsDashboardFolderPathArgs', 'LogsDashboardFolderPathArgsDict']]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            layout: Optional[pulumi.Input[Union['LogsDashboardLayoutArgs', 'LogsDashboardLayoutArgsDict']]] = None,
            logs_dashboard_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            relative_time_frame: Optional[pulumi.Input[_builtins.str]] = None,
            two_minutes: Optional[pulumi.Input[Union['LogsDashboardTwoMinutesArgs', 'LogsDashboardTwoMinutesArgsDict']]] = None,
            variables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogsDashboardVariableArgs', 'LogsDashboardVariableArgsDict']]]]] = None) -> 'LogsDashboard':
        """
        Get an existing LogsDashboard resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['LogsDashboardAbsoluteTimeFrameArgs', 'LogsDashboardAbsoluteTimeFrameArgsDict']] absolute_time_frame: Absolute time frame specifying a fixed start and end time.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LogsDashboardAnnotationArgs', 'LogsDashboardAnnotationArgsDict']]]] annotations: List of annotations that can be applied to the dashboard's visual elements.
        :param pulumi.Input[_builtins.str] dashboard_id: Dashboard Id.
        :param pulumi.Input[_builtins.str] description: Brief description or summary of the dashboard's purpose or content.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[Union['LogsDashboardFalseArgs', 'LogsDashboardFalseArgsDict']] false: Auto refresh interval is set to off.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LogsDashboardFilterArgs', 'LogsDashboardFilterArgsDict']]]] filters: List of filters that can be applied to the dashboard's data.
        :param pulumi.Input[Union['LogsDashboardFiveMinutesArgs', 'LogsDashboardFiveMinutesArgsDict']] five_minutes: Auto refresh interval is set to five minutes.
        :param pulumi.Input[Union['LogsDashboardFolderIdArgs', 'LogsDashboardFolderIdArgsDict']] folder_id: Unique identifier of the folder containing the dashboard.
        :param pulumi.Input[Union['LogsDashboardFolderPathArgs', 'LogsDashboardFolderPathArgsDict']] folder_path: Path of the folder containing the dashboard.
        :param pulumi.Input[_builtins.str] href: Unique identifier for the dashboard.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the logs instance.
        :param pulumi.Input[Union['LogsDashboardLayoutArgs', 'LogsDashboardLayoutArgsDict']] layout: Layout configuration for the dashboard's visual elements.
        :param pulumi.Input[_builtins.str] name: Display name of the dashboard.
        :param pulumi.Input[_builtins.str] region: The region of the logs instance.
        :param pulumi.Input[_builtins.str] relative_time_frame: Relative time frame specifying a duration from the current time.
        :param pulumi.Input[Union['LogsDashboardTwoMinutesArgs', 'LogsDashboardTwoMinutesArgsDict']] two_minutes: Auto refresh interval is set to two minutes.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LogsDashboardVariableArgs', 'LogsDashboardVariableArgsDict']]]] variables: List of variables that can be used within the dashboard for dynamic content.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LogsDashboardState.__new__(_LogsDashboardState)

        __props__.__dict__["absolute_time_frame"] = absolute_time_frame
        __props__.__dict__["annotations"] = annotations
        __props__.__dict__["dashboard_id"] = dashboard_id
        __props__.__dict__["description"] = description
        __props__.__dict__["endpoint_type"] = endpoint_type
        __props__.__dict__["false"] = false
        __props__.__dict__["filters"] = filters
        __props__.__dict__["five_minutes"] = five_minutes
        __props__.__dict__["folder_id"] = folder_id
        __props__.__dict__["folder_path"] = folder_path
        __props__.__dict__["href"] = href
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["layout"] = layout
        __props__.__dict__["logs_dashboard_id"] = logs_dashboard_id
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["relative_time_frame"] = relative_time_frame
        __props__.__dict__["two_minutes"] = two_minutes
        __props__.__dict__["variables"] = variables
        return LogsDashboard(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="absoluteTimeFrame")
    def absolute_time_frame(self) -> pulumi.Output[Optional['outputs.LogsDashboardAbsoluteTimeFrame']]:
        """
        Absolute time frame specifying a fixed start and end time.
        """
        return pulumi.get(self, "absolute_time_frame")

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Optional[Sequence['outputs.LogsDashboardAnnotation']]]:
        """
        List of annotations that can be applied to the dashboard's visual elements.
        """
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="dashboardId")
    def dashboard_id(self) -> pulumi.Output[_builtins.str]:
        """
        Dashboard Id.
        """
        return pulumi.get(self, "dashboard_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Brief description or summary of the dashboard's purpose or content.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter
    def false(self) -> pulumi.Output[Optional['outputs.LogsDashboardFalse']]:
        """
        Auto refresh interval is set to off.
        """
        return pulumi.get(self, "false")

    @_builtins.property
    @pulumi.getter
    def filters(self) -> pulumi.Output[Optional[Sequence['outputs.LogsDashboardFilter']]]:
        """
        List of filters that can be applied to the dashboard's data.
        """
        return pulumi.get(self, "filters")

    @_builtins.property
    @pulumi.getter(name="fiveMinutes")
    def five_minutes(self) -> pulumi.Output[Optional['outputs.LogsDashboardFiveMinutes']]:
        """
        Auto refresh interval is set to five minutes.
        """
        return pulumi.get(self, "five_minutes")

    @_builtins.property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> pulumi.Output[Optional['outputs.LogsDashboardFolderId']]:
        """
        Unique identifier of the folder containing the dashboard.
        """
        return pulumi.get(self, "folder_id")

    @_builtins.property
    @pulumi.getter(name="folderPath")
    def folder_path(self) -> pulumi.Output[Optional['outputs.LogsDashboardFolderPath']]:
        """
        Path of the folder containing the dashboard.
        """
        return pulumi.get(self, "folder_path")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Unique identifier for the dashboard.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the logs instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def layout(self) -> pulumi.Output['outputs.LogsDashboardLayout']:
        """
        Layout configuration for the dashboard's visual elements.
        """
        return pulumi.get(self, "layout")

    @_builtins.property
    @pulumi.getter(name="logsDashboardId")
    def logs_dashboard_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "logs_dashboard_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Display name of the dashboard.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region of the logs instance.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="relativeTimeFrame")
    def relative_time_frame(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Relative time frame specifying a duration from the current time.
        """
        return pulumi.get(self, "relative_time_frame")

    @_builtins.property
    @pulumi.getter(name="twoMinutes")
    def two_minutes(self) -> pulumi.Output[Optional['outputs.LogsDashboardTwoMinutes']]:
        """
        Auto refresh interval is set to two minutes.
        """
        return pulumi.get(self, "two_minutes")

    @_builtins.property
    @pulumi.getter
    def variables(self) -> pulumi.Output[Optional[Sequence['outputs.LogsDashboardVariable']]]:
        """
        List of variables that can be used within the dashboard for dynamic content.
        """
        return pulumi.get(self, "variables")

