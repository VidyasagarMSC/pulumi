# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetDlGatewayResult',
    'AwaitableGetDlGatewayResult',
    'get_dl_gateway',
    'get_dl_gateway_output',
]

@pulumi.output_type
class GetDlGatewayResult:
    """
    A collection of values returned by getDlGateway.
    """
    def __init__(__self__, as_prepends=None, authentication_key=None, bfd_interval=None, bfd_multiplier=None, bfd_status=None, bfd_status_updated_at=None, bgp_asn=None, bgp_base_cidr=None, bgp_cer_cidr=None, bgp_ibm_asn=None, bgp_ibm_cidr=None, bgp_status=None, bgp_status_updated_at=None, change_request=None, completion_notice_reject_reason=None, connection_mode=None, created_at=None, crn=None, cross_connect_router=None, default_export_route_filter=None, default_import_route_filter=None, gateway_vcs=None, global_=None, id=None, link_status=None, link_status_updated_at=None, location_display_name=None, location_name=None, macsec_configs=None, metered=None, name=None, operational_status=None, port=None, provider_api_managed=None, resource_group=None, speed_mbps=None, type=None, vlan=None):
        if as_prepends and not isinstance(as_prepends, list):
            raise TypeError("Expected argument 'as_prepends' to be a list")
        pulumi.set(__self__, "as_prepends", as_prepends)
        if authentication_key and not isinstance(authentication_key, str):
            raise TypeError("Expected argument 'authentication_key' to be a str")
        pulumi.set(__self__, "authentication_key", authentication_key)
        if bfd_interval and not isinstance(bfd_interval, float):
            raise TypeError("Expected argument 'bfd_interval' to be a float")
        pulumi.set(__self__, "bfd_interval", bfd_interval)
        if bfd_multiplier and not isinstance(bfd_multiplier, float):
            raise TypeError("Expected argument 'bfd_multiplier' to be a float")
        pulumi.set(__self__, "bfd_multiplier", bfd_multiplier)
        if bfd_status and not isinstance(bfd_status, str):
            raise TypeError("Expected argument 'bfd_status' to be a str")
        pulumi.set(__self__, "bfd_status", bfd_status)
        if bfd_status_updated_at and not isinstance(bfd_status_updated_at, str):
            raise TypeError("Expected argument 'bfd_status_updated_at' to be a str")
        pulumi.set(__self__, "bfd_status_updated_at", bfd_status_updated_at)
        if bgp_asn and not isinstance(bgp_asn, float):
            raise TypeError("Expected argument 'bgp_asn' to be a float")
        pulumi.set(__self__, "bgp_asn", bgp_asn)
        if bgp_base_cidr and not isinstance(bgp_base_cidr, str):
            raise TypeError("Expected argument 'bgp_base_cidr' to be a str")
        pulumi.set(__self__, "bgp_base_cidr", bgp_base_cidr)
        if bgp_cer_cidr and not isinstance(bgp_cer_cidr, str):
            raise TypeError("Expected argument 'bgp_cer_cidr' to be a str")
        pulumi.set(__self__, "bgp_cer_cidr", bgp_cer_cidr)
        if bgp_ibm_asn and not isinstance(bgp_ibm_asn, float):
            raise TypeError("Expected argument 'bgp_ibm_asn' to be a float")
        pulumi.set(__self__, "bgp_ibm_asn", bgp_ibm_asn)
        if bgp_ibm_cidr and not isinstance(bgp_ibm_cidr, str):
            raise TypeError("Expected argument 'bgp_ibm_cidr' to be a str")
        pulumi.set(__self__, "bgp_ibm_cidr", bgp_ibm_cidr)
        if bgp_status and not isinstance(bgp_status, str):
            raise TypeError("Expected argument 'bgp_status' to be a str")
        pulumi.set(__self__, "bgp_status", bgp_status)
        if bgp_status_updated_at and not isinstance(bgp_status_updated_at, str):
            raise TypeError("Expected argument 'bgp_status_updated_at' to be a str")
        pulumi.set(__self__, "bgp_status_updated_at", bgp_status_updated_at)
        if change_request and not isinstance(change_request, str):
            raise TypeError("Expected argument 'change_request' to be a str")
        pulumi.set(__self__, "change_request", change_request)
        if completion_notice_reject_reason and not isinstance(completion_notice_reject_reason, str):
            raise TypeError("Expected argument 'completion_notice_reject_reason' to be a str")
        pulumi.set(__self__, "completion_notice_reject_reason", completion_notice_reject_reason)
        if connection_mode and not isinstance(connection_mode, str):
            raise TypeError("Expected argument 'connection_mode' to be a str")
        pulumi.set(__self__, "connection_mode", connection_mode)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if cross_connect_router and not isinstance(cross_connect_router, str):
            raise TypeError("Expected argument 'cross_connect_router' to be a str")
        pulumi.set(__self__, "cross_connect_router", cross_connect_router)
        if default_export_route_filter and not isinstance(default_export_route_filter, str):
            raise TypeError("Expected argument 'default_export_route_filter' to be a str")
        pulumi.set(__self__, "default_export_route_filter", default_export_route_filter)
        if default_import_route_filter and not isinstance(default_import_route_filter, str):
            raise TypeError("Expected argument 'default_import_route_filter' to be a str")
        pulumi.set(__self__, "default_import_route_filter", default_import_route_filter)
        if gateway_vcs and not isinstance(gateway_vcs, list):
            raise TypeError("Expected argument 'gateway_vcs' to be a list")
        pulumi.set(__self__, "gateway_vcs", gateway_vcs)
        if global_ and not isinstance(global_, bool):
            raise TypeError("Expected argument 'global_' to be a bool")
        pulumi.set(__self__, "global_", global_)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if link_status and not isinstance(link_status, str):
            raise TypeError("Expected argument 'link_status' to be a str")
        pulumi.set(__self__, "link_status", link_status)
        if link_status_updated_at and not isinstance(link_status_updated_at, str):
            raise TypeError("Expected argument 'link_status_updated_at' to be a str")
        pulumi.set(__self__, "link_status_updated_at", link_status_updated_at)
        if location_display_name and not isinstance(location_display_name, str):
            raise TypeError("Expected argument 'location_display_name' to be a str")
        pulumi.set(__self__, "location_display_name", location_display_name)
        if location_name and not isinstance(location_name, str):
            raise TypeError("Expected argument 'location_name' to be a str")
        pulumi.set(__self__, "location_name", location_name)
        if macsec_configs and not isinstance(macsec_configs, list):
            raise TypeError("Expected argument 'macsec_configs' to be a list")
        pulumi.set(__self__, "macsec_configs", macsec_configs)
        if metered and not isinstance(metered, bool):
            raise TypeError("Expected argument 'metered' to be a bool")
        pulumi.set(__self__, "metered", metered)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if operational_status and not isinstance(operational_status, str):
            raise TypeError("Expected argument 'operational_status' to be a str")
        pulumi.set(__self__, "operational_status", operational_status)
        if port and not isinstance(port, str):
            raise TypeError("Expected argument 'port' to be a str")
        pulumi.set(__self__, "port", port)
        if provider_api_managed and not isinstance(provider_api_managed, bool):
            raise TypeError("Expected argument 'provider_api_managed' to be a bool")
        pulumi.set(__self__, "provider_api_managed", provider_api_managed)
        if resource_group and not isinstance(resource_group, str):
            raise TypeError("Expected argument 'resource_group' to be a str")
        pulumi.set(__self__, "resource_group", resource_group)
        if speed_mbps and not isinstance(speed_mbps, float):
            raise TypeError("Expected argument 'speed_mbps' to be a float")
        pulumi.set(__self__, "speed_mbps", speed_mbps)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if vlan and not isinstance(vlan, float):
            raise TypeError("Expected argument 'vlan' to be a float")
        pulumi.set(__self__, "vlan", vlan)

    @_builtins.property
    @pulumi.getter(name="asPrepends")
    def as_prepends(self) -> Sequence['outputs.GetDlGatewayAsPrependResult']:
        return pulumi.get(self, "as_prepends")

    @_builtins.property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> _builtins.str:
        return pulumi.get(self, "authentication_key")

    @_builtins.property
    @pulumi.getter(name="bfdInterval")
    def bfd_interval(self) -> _builtins.float:
        return pulumi.get(self, "bfd_interval")

    @_builtins.property
    @pulumi.getter(name="bfdMultiplier")
    def bfd_multiplier(self) -> _builtins.float:
        return pulumi.get(self, "bfd_multiplier")

    @_builtins.property
    @pulumi.getter(name="bfdStatus")
    def bfd_status(self) -> _builtins.str:
        return pulumi.get(self, "bfd_status")

    @_builtins.property
    @pulumi.getter(name="bfdStatusUpdatedAt")
    def bfd_status_updated_at(self) -> _builtins.str:
        return pulumi.get(self, "bfd_status_updated_at")

    @_builtins.property
    @pulumi.getter(name="bgpAsn")
    def bgp_asn(self) -> _builtins.float:
        return pulumi.get(self, "bgp_asn")

    @_builtins.property
    @pulumi.getter(name="bgpBaseCidr")
    def bgp_base_cidr(self) -> _builtins.str:
        return pulumi.get(self, "bgp_base_cidr")

    @_builtins.property
    @pulumi.getter(name="bgpCerCidr")
    def bgp_cer_cidr(self) -> _builtins.str:
        return pulumi.get(self, "bgp_cer_cidr")

    @_builtins.property
    @pulumi.getter(name="bgpIbmAsn")
    def bgp_ibm_asn(self) -> _builtins.float:
        return pulumi.get(self, "bgp_ibm_asn")

    @_builtins.property
    @pulumi.getter(name="bgpIbmCidr")
    def bgp_ibm_cidr(self) -> _builtins.str:
        return pulumi.get(self, "bgp_ibm_cidr")

    @_builtins.property
    @pulumi.getter(name="bgpStatus")
    def bgp_status(self) -> _builtins.str:
        return pulumi.get(self, "bgp_status")

    @_builtins.property
    @pulumi.getter(name="bgpStatusUpdatedAt")
    def bgp_status_updated_at(self) -> _builtins.str:
        return pulumi.get(self, "bgp_status_updated_at")

    @_builtins.property
    @pulumi.getter(name="changeRequest")
    def change_request(self) -> _builtins.str:
        return pulumi.get(self, "change_request")

    @_builtins.property
    @pulumi.getter(name="completionNoticeRejectReason")
    def completion_notice_reject_reason(self) -> _builtins.str:
        return pulumi.get(self, "completion_notice_reject_reason")

    @_builtins.property
    @pulumi.getter(name="connectionMode")
    def connection_mode(self) -> _builtins.str:
        return pulumi.get(self, "connection_mode")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="crossConnectRouter")
    def cross_connect_router(self) -> _builtins.str:
        return pulumi.get(self, "cross_connect_router")

    @_builtins.property
    @pulumi.getter(name="defaultExportRouteFilter")
    def default_export_route_filter(self) -> _builtins.str:
        return pulumi.get(self, "default_export_route_filter")

    @_builtins.property
    @pulumi.getter(name="defaultImportRouteFilter")
    def default_import_route_filter(self) -> _builtins.str:
        return pulumi.get(self, "default_import_route_filter")

    @_builtins.property
    @pulumi.getter(name="gatewayVcs")
    def gateway_vcs(self) -> Sequence['outputs.GetDlGatewayGatewayVcResult']:
        return pulumi.get(self, "gateway_vcs")

    @_builtins.property
    @pulumi.getter(name="global")
    def global_(self) -> _builtins.bool:
        return pulumi.get(self, "global_")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="linkStatus")
    def link_status(self) -> _builtins.str:
        return pulumi.get(self, "link_status")

    @_builtins.property
    @pulumi.getter(name="linkStatusUpdatedAt")
    def link_status_updated_at(self) -> _builtins.str:
        return pulumi.get(self, "link_status_updated_at")

    @_builtins.property
    @pulumi.getter(name="locationDisplayName")
    def location_display_name(self) -> _builtins.str:
        return pulumi.get(self, "location_display_name")

    @_builtins.property
    @pulumi.getter(name="locationName")
    def location_name(self) -> _builtins.str:
        return pulumi.get(self, "location_name")

    @_builtins.property
    @pulumi.getter(name="macsecConfigs")
    def macsec_configs(self) -> Sequence['outputs.GetDlGatewayMacsecConfigResult']:
        return pulumi.get(self, "macsec_configs")

    @_builtins.property
    @pulumi.getter
    def metered(self) -> _builtins.bool:
        return pulumi.get(self, "metered")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="operationalStatus")
    def operational_status(self) -> _builtins.str:
        return pulumi.get(self, "operational_status")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="providerApiManaged")
    def provider_api_managed(self) -> _builtins.bool:
        return pulumi.get(self, "provider_api_managed")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> _builtins.str:
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="speedMbps")
    def speed_mbps(self) -> _builtins.float:
        return pulumi.get(self, "speed_mbps")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def vlan(self) -> _builtins.float:
        return pulumi.get(self, "vlan")


class AwaitableGetDlGatewayResult(GetDlGatewayResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDlGatewayResult(
            as_prepends=self.as_prepends,
            authentication_key=self.authentication_key,
            bfd_interval=self.bfd_interval,
            bfd_multiplier=self.bfd_multiplier,
            bfd_status=self.bfd_status,
            bfd_status_updated_at=self.bfd_status_updated_at,
            bgp_asn=self.bgp_asn,
            bgp_base_cidr=self.bgp_base_cidr,
            bgp_cer_cidr=self.bgp_cer_cidr,
            bgp_ibm_asn=self.bgp_ibm_asn,
            bgp_ibm_cidr=self.bgp_ibm_cidr,
            bgp_status=self.bgp_status,
            bgp_status_updated_at=self.bgp_status_updated_at,
            change_request=self.change_request,
            completion_notice_reject_reason=self.completion_notice_reject_reason,
            connection_mode=self.connection_mode,
            created_at=self.created_at,
            crn=self.crn,
            cross_connect_router=self.cross_connect_router,
            default_export_route_filter=self.default_export_route_filter,
            default_import_route_filter=self.default_import_route_filter,
            gateway_vcs=self.gateway_vcs,
            global_=self.global_,
            id=self.id,
            link_status=self.link_status,
            link_status_updated_at=self.link_status_updated_at,
            location_display_name=self.location_display_name,
            location_name=self.location_name,
            macsec_configs=self.macsec_configs,
            metered=self.metered,
            name=self.name,
            operational_status=self.operational_status,
            port=self.port,
            provider_api_managed=self.provider_api_managed,
            resource_group=self.resource_group,
            speed_mbps=self.speed_mbps,
            type=self.type,
            vlan=self.vlan)


def get_dl_gateway(bgp_status_updated_at: Optional[_builtins.str] = None,
                   id: Optional[_builtins.str] = None,
                   link_status_updated_at: Optional[_builtins.str] = None,
                   name: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDlGatewayResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['bgpStatusUpdatedAt'] = bgp_status_updated_at
    __args__['id'] = id
    __args__['linkStatusUpdatedAt'] = link_status_updated_at
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getDlGateway:getDlGateway', __args__, opts=opts, typ=GetDlGatewayResult, package_ref=_utilities.get_package()).value

    return AwaitableGetDlGatewayResult(
        as_prepends=pulumi.get(__ret__, 'as_prepends'),
        authentication_key=pulumi.get(__ret__, 'authentication_key'),
        bfd_interval=pulumi.get(__ret__, 'bfd_interval'),
        bfd_multiplier=pulumi.get(__ret__, 'bfd_multiplier'),
        bfd_status=pulumi.get(__ret__, 'bfd_status'),
        bfd_status_updated_at=pulumi.get(__ret__, 'bfd_status_updated_at'),
        bgp_asn=pulumi.get(__ret__, 'bgp_asn'),
        bgp_base_cidr=pulumi.get(__ret__, 'bgp_base_cidr'),
        bgp_cer_cidr=pulumi.get(__ret__, 'bgp_cer_cidr'),
        bgp_ibm_asn=pulumi.get(__ret__, 'bgp_ibm_asn'),
        bgp_ibm_cidr=pulumi.get(__ret__, 'bgp_ibm_cidr'),
        bgp_status=pulumi.get(__ret__, 'bgp_status'),
        bgp_status_updated_at=pulumi.get(__ret__, 'bgp_status_updated_at'),
        change_request=pulumi.get(__ret__, 'change_request'),
        completion_notice_reject_reason=pulumi.get(__ret__, 'completion_notice_reject_reason'),
        connection_mode=pulumi.get(__ret__, 'connection_mode'),
        created_at=pulumi.get(__ret__, 'created_at'),
        crn=pulumi.get(__ret__, 'crn'),
        cross_connect_router=pulumi.get(__ret__, 'cross_connect_router'),
        default_export_route_filter=pulumi.get(__ret__, 'default_export_route_filter'),
        default_import_route_filter=pulumi.get(__ret__, 'default_import_route_filter'),
        gateway_vcs=pulumi.get(__ret__, 'gateway_vcs'),
        global_=pulumi.get(__ret__, 'global_'),
        id=pulumi.get(__ret__, 'id'),
        link_status=pulumi.get(__ret__, 'link_status'),
        link_status_updated_at=pulumi.get(__ret__, 'link_status_updated_at'),
        location_display_name=pulumi.get(__ret__, 'location_display_name'),
        location_name=pulumi.get(__ret__, 'location_name'),
        macsec_configs=pulumi.get(__ret__, 'macsec_configs'),
        metered=pulumi.get(__ret__, 'metered'),
        name=pulumi.get(__ret__, 'name'),
        operational_status=pulumi.get(__ret__, 'operational_status'),
        port=pulumi.get(__ret__, 'port'),
        provider_api_managed=pulumi.get(__ret__, 'provider_api_managed'),
        resource_group=pulumi.get(__ret__, 'resource_group'),
        speed_mbps=pulumi.get(__ret__, 'speed_mbps'),
        type=pulumi.get(__ret__, 'type'),
        vlan=pulumi.get(__ret__, 'vlan'))
def get_dl_gateway_output(bgp_status_updated_at: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          link_status_updated_at: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          name: Optional[pulumi.Input[_builtins.str]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDlGatewayResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['bgpStatusUpdatedAt'] = bgp_status_updated_at
    __args__['id'] = id
    __args__['linkStatusUpdatedAt'] = link_status_updated_at
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getDlGateway:getDlGateway', __args__, opts=opts, typ=GetDlGatewayResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetDlGatewayResult(
        as_prepends=pulumi.get(__response__, 'as_prepends'),
        authentication_key=pulumi.get(__response__, 'authentication_key'),
        bfd_interval=pulumi.get(__response__, 'bfd_interval'),
        bfd_multiplier=pulumi.get(__response__, 'bfd_multiplier'),
        bfd_status=pulumi.get(__response__, 'bfd_status'),
        bfd_status_updated_at=pulumi.get(__response__, 'bfd_status_updated_at'),
        bgp_asn=pulumi.get(__response__, 'bgp_asn'),
        bgp_base_cidr=pulumi.get(__response__, 'bgp_base_cidr'),
        bgp_cer_cidr=pulumi.get(__response__, 'bgp_cer_cidr'),
        bgp_ibm_asn=pulumi.get(__response__, 'bgp_ibm_asn'),
        bgp_ibm_cidr=pulumi.get(__response__, 'bgp_ibm_cidr'),
        bgp_status=pulumi.get(__response__, 'bgp_status'),
        bgp_status_updated_at=pulumi.get(__response__, 'bgp_status_updated_at'),
        change_request=pulumi.get(__response__, 'change_request'),
        completion_notice_reject_reason=pulumi.get(__response__, 'completion_notice_reject_reason'),
        connection_mode=pulumi.get(__response__, 'connection_mode'),
        created_at=pulumi.get(__response__, 'created_at'),
        crn=pulumi.get(__response__, 'crn'),
        cross_connect_router=pulumi.get(__response__, 'cross_connect_router'),
        default_export_route_filter=pulumi.get(__response__, 'default_export_route_filter'),
        default_import_route_filter=pulumi.get(__response__, 'default_import_route_filter'),
        gateway_vcs=pulumi.get(__response__, 'gateway_vcs'),
        global_=pulumi.get(__response__, 'global_'),
        id=pulumi.get(__response__, 'id'),
        link_status=pulumi.get(__response__, 'link_status'),
        link_status_updated_at=pulumi.get(__response__, 'link_status_updated_at'),
        location_display_name=pulumi.get(__response__, 'location_display_name'),
        location_name=pulumi.get(__response__, 'location_name'),
        macsec_configs=pulumi.get(__response__, 'macsec_configs'),
        metered=pulumi.get(__response__, 'metered'),
        name=pulumi.get(__response__, 'name'),
        operational_status=pulumi.get(__response__, 'operational_status'),
        port=pulumi.get(__response__, 'port'),
        provider_api_managed=pulumi.get(__response__, 'provider_api_managed'),
        resource_group=pulumi.get(__response__, 'resource_group'),
        speed_mbps=pulumi.get(__response__, 'speed_mbps'),
        type=pulumi.get(__response__, 'type'),
        vlan=pulumi.get(__response__, 'vlan')))
