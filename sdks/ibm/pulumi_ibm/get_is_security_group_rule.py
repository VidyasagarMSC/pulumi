# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsSecurityGroupRuleResult',
    'AwaitableGetIsSecurityGroupRuleResult',
    'get_is_security_group_rule',
    'get_is_security_group_rule_output',
]

@pulumi.output_type
class GetIsSecurityGroupRuleResult:
    """
    A collection of values returned by getIsSecurityGroupRule.
    """
    def __init__(__self__, code=None, direction=None, href=None, id=None, ip_version=None, locals=None, port_max=None, port_min=None, protocol=None, remotes=None, security_group=None, security_group_rule=None, type=None):
        if code and not isinstance(code, float):
            raise TypeError("Expected argument 'code' to be a float")
        pulumi.set(__self__, "code", code)
        if direction and not isinstance(direction, str):
            raise TypeError("Expected argument 'direction' to be a str")
        pulumi.set(__self__, "direction", direction)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_version and not isinstance(ip_version, str):
            raise TypeError("Expected argument 'ip_version' to be a str")
        pulumi.set(__self__, "ip_version", ip_version)
        if locals and not isinstance(locals, list):
            raise TypeError("Expected argument 'locals' to be a list")
        pulumi.set(__self__, "locals", locals)
        if port_max and not isinstance(port_max, float):
            raise TypeError("Expected argument 'port_max' to be a float")
        pulumi.set(__self__, "port_max", port_max)
        if port_min and not isinstance(port_min, float):
            raise TypeError("Expected argument 'port_min' to be a float")
        pulumi.set(__self__, "port_min", port_min)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if remotes and not isinstance(remotes, list):
            raise TypeError("Expected argument 'remotes' to be a list")
        pulumi.set(__self__, "remotes", remotes)
        if security_group and not isinstance(security_group, str):
            raise TypeError("Expected argument 'security_group' to be a str")
        pulumi.set(__self__, "security_group", security_group)
        if security_group_rule and not isinstance(security_group_rule, str):
            raise TypeError("Expected argument 'security_group_rule' to be a str")
        pulumi.set(__self__, "security_group_rule", security_group_rule)
        if type and not isinstance(type, float):
            raise TypeError("Expected argument 'type' to be a float")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def code(self) -> _builtins.float:
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter
    def direction(self) -> _builtins.str:
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> _builtins.str:
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter
    def locals(self) -> Sequence['outputs.GetIsSecurityGroupRuleLocalResult']:
        return pulumi.get(self, "locals")

    @_builtins.property
    @pulumi.getter(name="portMax")
    def port_max(self) -> _builtins.float:
        return pulumi.get(self, "port_max")

    @_builtins.property
    @pulumi.getter(name="portMin")
    def port_min(self) -> _builtins.float:
        return pulumi.get(self, "port_min")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def remotes(self) -> Sequence['outputs.GetIsSecurityGroupRuleRemoteResult']:
        return pulumi.get(self, "remotes")

    @_builtins.property
    @pulumi.getter(name="securityGroup")
    def security_group(self) -> _builtins.str:
        return pulumi.get(self, "security_group")

    @_builtins.property
    @pulumi.getter(name="securityGroupRule")
    def security_group_rule(self) -> _builtins.str:
        return pulumi.get(self, "security_group_rule")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.float:
        return pulumi.get(self, "type")


class AwaitableGetIsSecurityGroupRuleResult(GetIsSecurityGroupRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsSecurityGroupRuleResult(
            code=self.code,
            direction=self.direction,
            href=self.href,
            id=self.id,
            ip_version=self.ip_version,
            locals=self.locals,
            port_max=self.port_max,
            port_min=self.port_min,
            protocol=self.protocol,
            remotes=self.remotes,
            security_group=self.security_group,
            security_group_rule=self.security_group_rule,
            type=self.type)


def get_is_security_group_rule(id: Optional[_builtins.str] = None,
                               security_group: Optional[_builtins.str] = None,
                               security_group_rule: Optional[_builtins.str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsSecurityGroupRuleResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['securityGroup'] = security_group
    __args__['securityGroupRule'] = security_group_rule
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsSecurityGroupRule:getIsSecurityGroupRule', __args__, opts=opts, typ=GetIsSecurityGroupRuleResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsSecurityGroupRuleResult(
        code=pulumi.get(__ret__, 'code'),
        direction=pulumi.get(__ret__, 'direction'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        ip_version=pulumi.get(__ret__, 'ip_version'),
        locals=pulumi.get(__ret__, 'locals'),
        port_max=pulumi.get(__ret__, 'port_max'),
        port_min=pulumi.get(__ret__, 'port_min'),
        protocol=pulumi.get(__ret__, 'protocol'),
        remotes=pulumi.get(__ret__, 'remotes'),
        security_group=pulumi.get(__ret__, 'security_group'),
        security_group_rule=pulumi.get(__ret__, 'security_group_rule'),
        type=pulumi.get(__ret__, 'type'))
def get_is_security_group_rule_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      security_group: Optional[pulumi.Input[_builtins.str]] = None,
                                      security_group_rule: Optional[pulumi.Input[_builtins.str]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsSecurityGroupRuleResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['securityGroup'] = security_group
    __args__['securityGroupRule'] = security_group_rule
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsSecurityGroupRule:getIsSecurityGroupRule', __args__, opts=opts, typ=GetIsSecurityGroupRuleResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsSecurityGroupRuleResult(
        code=pulumi.get(__response__, 'code'),
        direction=pulumi.get(__response__, 'direction'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        ip_version=pulumi.get(__response__, 'ip_version'),
        locals=pulumi.get(__response__, 'locals'),
        port_max=pulumi.get(__response__, 'port_max'),
        port_min=pulumi.get(__response__, 'port_min'),
        protocol=pulumi.get(__response__, 'protocol'),
        remotes=pulumi.get(__response__, 'remotes'),
        security_group=pulumi.get(__response__, 'security_group'),
        security_group_rule=pulumi.get(__response__, 'security_group_rule'),
        type=pulumi.get(__response__, 'type')))
