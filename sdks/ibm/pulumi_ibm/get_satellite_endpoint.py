# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSatelliteEndpointResult',
    'AwaitableGetSatelliteEndpointResult',
    'get_satellite_endpoint',
    'get_satellite_endpoint_output',
]

@pulumi.output_type
class GetSatelliteEndpointResult:
    """
    A collection of values returned by getSatelliteEndpoint.
    """
    def __init__(__self__, certs=None, client_host=None, client_mutual_auth=None, client_port=None, client_protocol=None, connection_type=None, connector_port=None, created_at=None, created_by=None, crn=None, display_name=None, endpoint_id=None, id=None, last_change=None, location=None, performances=None, reject_unauth=None, server_host=None, server_mutual_auth=None, server_port=None, server_protocol=None, service_name=None, sni=None, sources=None, status=None, timeout=None):
        if certs and not isinstance(certs, list):
            raise TypeError("Expected argument 'certs' to be a list")
        pulumi.set(__self__, "certs", certs)
        if client_host and not isinstance(client_host, str):
            raise TypeError("Expected argument 'client_host' to be a str")
        pulumi.set(__self__, "client_host", client_host)
        if client_mutual_auth and not isinstance(client_mutual_auth, bool):
            raise TypeError("Expected argument 'client_mutual_auth' to be a bool")
        pulumi.set(__self__, "client_mutual_auth", client_mutual_auth)
        if client_port and not isinstance(client_port, float):
            raise TypeError("Expected argument 'client_port' to be a float")
        pulumi.set(__self__, "client_port", client_port)
        if client_protocol and not isinstance(client_protocol, str):
            raise TypeError("Expected argument 'client_protocol' to be a str")
        pulumi.set(__self__, "client_protocol", client_protocol)
        if connection_type and not isinstance(connection_type, str):
            raise TypeError("Expected argument 'connection_type' to be a str")
        pulumi.set(__self__, "connection_type", connection_type)
        if connector_port and not isinstance(connector_port, float):
            raise TypeError("Expected argument 'connector_port' to be a float")
        pulumi.set(__self__, "connector_port", connector_port)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if endpoint_id and not isinstance(endpoint_id, str):
            raise TypeError("Expected argument 'endpoint_id' to be a str")
        pulumi.set(__self__, "endpoint_id", endpoint_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_change and not isinstance(last_change, str):
            raise TypeError("Expected argument 'last_change' to be a str")
        pulumi.set(__self__, "last_change", last_change)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if performances and not isinstance(performances, list):
            raise TypeError("Expected argument 'performances' to be a list")
        pulumi.set(__self__, "performances", performances)
        if reject_unauth and not isinstance(reject_unauth, bool):
            raise TypeError("Expected argument 'reject_unauth' to be a bool")
        pulumi.set(__self__, "reject_unauth", reject_unauth)
        if server_host and not isinstance(server_host, str):
            raise TypeError("Expected argument 'server_host' to be a str")
        pulumi.set(__self__, "server_host", server_host)
        if server_mutual_auth and not isinstance(server_mutual_auth, bool):
            raise TypeError("Expected argument 'server_mutual_auth' to be a bool")
        pulumi.set(__self__, "server_mutual_auth", server_mutual_auth)
        if server_port and not isinstance(server_port, float):
            raise TypeError("Expected argument 'server_port' to be a float")
        pulumi.set(__self__, "server_port", server_port)
        if server_protocol and not isinstance(server_protocol, str):
            raise TypeError("Expected argument 'server_protocol' to be a str")
        pulumi.set(__self__, "server_protocol", server_protocol)
        if service_name and not isinstance(service_name, str):
            raise TypeError("Expected argument 'service_name' to be a str")
        pulumi.set(__self__, "service_name", service_name)
        if sni and not isinstance(sni, str):
            raise TypeError("Expected argument 'sni' to be a str")
        pulumi.set(__self__, "sni", sni)
        if sources and not isinstance(sources, list):
            raise TypeError("Expected argument 'sources' to be a list")
        pulumi.set(__self__, "sources", sources)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if timeout and not isinstance(timeout, float):
            raise TypeError("Expected argument 'timeout' to be a float")
        pulumi.set(__self__, "timeout", timeout)

    @_builtins.property
    @pulumi.getter
    def certs(self) -> Sequence['outputs.GetSatelliteEndpointCertResult']:
        return pulumi.get(self, "certs")

    @_builtins.property
    @pulumi.getter(name="clientHost")
    def client_host(self) -> _builtins.str:
        return pulumi.get(self, "client_host")

    @_builtins.property
    @pulumi.getter(name="clientMutualAuth")
    def client_mutual_auth(self) -> _builtins.bool:
        return pulumi.get(self, "client_mutual_auth")

    @_builtins.property
    @pulumi.getter(name="clientPort")
    def client_port(self) -> _builtins.float:
        return pulumi.get(self, "client_port")

    @_builtins.property
    @pulumi.getter(name="clientProtocol")
    def client_protocol(self) -> _builtins.str:
        return pulumi.get(self, "client_protocol")

    @_builtins.property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> _builtins.str:
        return pulumi.get(self, "connection_type")

    @_builtins.property
    @pulumi.getter(name="connectorPort")
    def connector_port(self) -> _builtins.float:
        return pulumi.get(self, "connector_port")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> _builtins.str:
        return pulumi.get(self, "endpoint_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastChange")
    def last_change(self) -> _builtins.str:
        return pulumi.get(self, "last_change")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def performances(self) -> Sequence['outputs.GetSatelliteEndpointPerformanceResult']:
        return pulumi.get(self, "performances")

    @_builtins.property
    @pulumi.getter(name="rejectUnauth")
    def reject_unauth(self) -> _builtins.bool:
        return pulumi.get(self, "reject_unauth")

    @_builtins.property
    @pulumi.getter(name="serverHost")
    def server_host(self) -> _builtins.str:
        return pulumi.get(self, "server_host")

    @_builtins.property
    @pulumi.getter(name="serverMutualAuth")
    def server_mutual_auth(self) -> _builtins.bool:
        return pulumi.get(self, "server_mutual_auth")

    @_builtins.property
    @pulumi.getter(name="serverPort")
    def server_port(self) -> _builtins.float:
        return pulumi.get(self, "server_port")

    @_builtins.property
    @pulumi.getter(name="serverProtocol")
    def server_protocol(self) -> _builtins.str:
        return pulumi.get(self, "server_protocol")

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> _builtins.str:
        return pulumi.get(self, "service_name")

    @_builtins.property
    @pulumi.getter
    def sni(self) -> _builtins.str:
        return pulumi.get(self, "sni")

    @_builtins.property
    @pulumi.getter
    def sources(self) -> Sequence['outputs.GetSatelliteEndpointSourceResult']:
        return pulumi.get(self, "sources")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> _builtins.float:
        return pulumi.get(self, "timeout")


class AwaitableGetSatelliteEndpointResult(GetSatelliteEndpointResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSatelliteEndpointResult(
            certs=self.certs,
            client_host=self.client_host,
            client_mutual_auth=self.client_mutual_auth,
            client_port=self.client_port,
            client_protocol=self.client_protocol,
            connection_type=self.connection_type,
            connector_port=self.connector_port,
            created_at=self.created_at,
            created_by=self.created_by,
            crn=self.crn,
            display_name=self.display_name,
            endpoint_id=self.endpoint_id,
            id=self.id,
            last_change=self.last_change,
            location=self.location,
            performances=self.performances,
            reject_unauth=self.reject_unauth,
            server_host=self.server_host,
            server_mutual_auth=self.server_mutual_auth,
            server_port=self.server_port,
            server_protocol=self.server_protocol,
            service_name=self.service_name,
            sni=self.sni,
            sources=self.sources,
            status=self.status,
            timeout=self.timeout)


def get_satellite_endpoint(endpoint_id: Optional[_builtins.str] = None,
                           id: Optional[_builtins.str] = None,
                           location: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSatelliteEndpointResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['endpointId'] = endpoint_id
    __args__['id'] = id
    __args__['location'] = location
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSatelliteEndpoint:getSatelliteEndpoint', __args__, opts=opts, typ=GetSatelliteEndpointResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSatelliteEndpointResult(
        certs=pulumi.get(__ret__, 'certs'),
        client_host=pulumi.get(__ret__, 'client_host'),
        client_mutual_auth=pulumi.get(__ret__, 'client_mutual_auth'),
        client_port=pulumi.get(__ret__, 'client_port'),
        client_protocol=pulumi.get(__ret__, 'client_protocol'),
        connection_type=pulumi.get(__ret__, 'connection_type'),
        connector_port=pulumi.get(__ret__, 'connector_port'),
        created_at=pulumi.get(__ret__, 'created_at'),
        created_by=pulumi.get(__ret__, 'created_by'),
        crn=pulumi.get(__ret__, 'crn'),
        display_name=pulumi.get(__ret__, 'display_name'),
        endpoint_id=pulumi.get(__ret__, 'endpoint_id'),
        id=pulumi.get(__ret__, 'id'),
        last_change=pulumi.get(__ret__, 'last_change'),
        location=pulumi.get(__ret__, 'location'),
        performances=pulumi.get(__ret__, 'performances'),
        reject_unauth=pulumi.get(__ret__, 'reject_unauth'),
        server_host=pulumi.get(__ret__, 'server_host'),
        server_mutual_auth=pulumi.get(__ret__, 'server_mutual_auth'),
        server_port=pulumi.get(__ret__, 'server_port'),
        server_protocol=pulumi.get(__ret__, 'server_protocol'),
        service_name=pulumi.get(__ret__, 'service_name'),
        sni=pulumi.get(__ret__, 'sni'),
        sources=pulumi.get(__ret__, 'sources'),
        status=pulumi.get(__ret__, 'status'),
        timeout=pulumi.get(__ret__, 'timeout'))
def get_satellite_endpoint_output(endpoint_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  location: Optional[pulumi.Input[_builtins.str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSatelliteEndpointResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['endpointId'] = endpoint_id
    __args__['id'] = id
    __args__['location'] = location
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSatelliteEndpoint:getSatelliteEndpoint', __args__, opts=opts, typ=GetSatelliteEndpointResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSatelliteEndpointResult(
        certs=pulumi.get(__response__, 'certs'),
        client_host=pulumi.get(__response__, 'client_host'),
        client_mutual_auth=pulumi.get(__response__, 'client_mutual_auth'),
        client_port=pulumi.get(__response__, 'client_port'),
        client_protocol=pulumi.get(__response__, 'client_protocol'),
        connection_type=pulumi.get(__response__, 'connection_type'),
        connector_port=pulumi.get(__response__, 'connector_port'),
        created_at=pulumi.get(__response__, 'created_at'),
        created_by=pulumi.get(__response__, 'created_by'),
        crn=pulumi.get(__response__, 'crn'),
        display_name=pulumi.get(__response__, 'display_name'),
        endpoint_id=pulumi.get(__response__, 'endpoint_id'),
        id=pulumi.get(__response__, 'id'),
        last_change=pulumi.get(__response__, 'last_change'),
        location=pulumi.get(__response__, 'location'),
        performances=pulumi.get(__response__, 'performances'),
        reject_unauth=pulumi.get(__response__, 'reject_unauth'),
        server_host=pulumi.get(__response__, 'server_host'),
        server_mutual_auth=pulumi.get(__response__, 'server_mutual_auth'),
        server_port=pulumi.get(__response__, 'server_port'),
        server_protocol=pulumi.get(__response__, 'server_protocol'),
        service_name=pulumi.get(__response__, 'service_name'),
        sni=pulumi.get(__response__, 'sni'),
        sources=pulumi.get(__response__, 'sources'),
        status=pulumi.get(__response__, 'status'),
        timeout=pulumi.get(__response__, 'timeout')))
