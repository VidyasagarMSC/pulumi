# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCrNamespacesResult',
    'AwaitableGetCrNamespacesResult',
    'get_cr_namespaces',
    'get_cr_namespaces_output',
]

@pulumi.output_type
class GetCrNamespacesResult:
    """
    A collection of values returned by getCrNamespaces.
    """
    def __init__(__self__, id=None, namespaces=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if namespaces and not isinstance(namespaces, list):
            raise TypeError("Expected argument 'namespaces' to be a list")
        pulumi.set(__self__, "namespaces", namespaces)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def namespaces(self) -> Sequence['outputs.GetCrNamespacesNamespaceResult']:
        return pulumi.get(self, "namespaces")


class AwaitableGetCrNamespacesResult(GetCrNamespacesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCrNamespacesResult(
            id=self.id,
            namespaces=self.namespaces)


def get_cr_namespaces(id: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCrNamespacesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCrNamespaces:getCrNamespaces', __args__, opts=opts, typ=GetCrNamespacesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCrNamespacesResult(
        id=pulumi.get(__ret__, 'id'),
        namespaces=pulumi.get(__ret__, 'namespaces'))
def get_cr_namespaces_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCrNamespacesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCrNamespaces:getCrNamespaces', __args__, opts=opts, typ=GetCrNamespacesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCrNamespacesResult(
        id=pulumi.get(__response__, 'id'),
        namespaces=pulumi.get(__response__, 'namespaces')))
