# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DlGatewayMacsecConfigInitArgs', 'DlGatewayMacsecConfig']

@pulumi.input_type
class DlGatewayMacsecConfigInitArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[_builtins.bool],
                 caks: pulumi.Input[Sequence[pulumi.Input['DlGatewayMacsecConfigCakArgs']]],
                 gateway: pulumi.Input[_builtins.str],
                 sak_rekeys: pulumi.Input[Sequence[pulumi.Input['DlGatewayMacsecConfigSakRekeyArgs']]],
                 security_policy: pulumi.Input[_builtins.str],
                 dl_gateway_macsec_config_id: Optional[pulumi.Input[_builtins.str]] = None,
                 window_size: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a DlGatewayMacsecConfig resource.
        :param pulumi.Input[_builtins.bool] active: Indicate whether MACsec protection should be active (true) or inactive (false) for this MACsec enabled gateway
        :param pulumi.Input[Sequence[pulumi.Input['DlGatewayMacsecConfigCakArgs']]] caks: CAKs
        :param pulumi.Input[_builtins.str] gateway: Gateway ID
        :param pulumi.Input[Sequence[pulumi.Input['DlGatewayMacsecConfigSakRekeyArgs']]] sak_rekeys: Determines how SAK rekeying occurs.
        :param pulumi.Input[_builtins.str] security_policy: Determines how packets without MACsec headers are handled.
        :param pulumi.Input[_builtins.float] window_size: The window size determines the number of frames in a window for replay protection.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "caks", caks)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "sak_rekeys", sak_rekeys)
        pulumi.set(__self__, "security_policy", security_policy)
        if dl_gateway_macsec_config_id is not None:
            pulumi.set(__self__, "dl_gateway_macsec_config_id", dl_gateway_macsec_config_id)
        if window_size is not None:
            pulumi.set(__self__, "window_size", window_size)

    @_builtins.property
    @pulumi.getter
    def active(self) -> pulumi.Input[_builtins.bool]:
        """
        Indicate whether MACsec protection should be active (true) or inactive (false) for this MACsec enabled gateway
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "active", value)

    @_builtins.property
    @pulumi.getter
    def caks(self) -> pulumi.Input[Sequence[pulumi.Input['DlGatewayMacsecConfigCakArgs']]]:
        """
        CAKs
        """
        return pulumi.get(self, "caks")

    @caks.setter
    def caks(self, value: pulumi.Input[Sequence[pulumi.Input['DlGatewayMacsecConfigCakArgs']]]):
        pulumi.set(self, "caks", value)

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> pulumi.Input[_builtins.str]:
        """
        Gateway ID
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "gateway", value)

    @_builtins.property
    @pulumi.getter(name="sakRekeys")
    def sak_rekeys(self) -> pulumi.Input[Sequence[pulumi.Input['DlGatewayMacsecConfigSakRekeyArgs']]]:
        """
        Determines how SAK rekeying occurs.
        """
        return pulumi.get(self, "sak_rekeys")

    @sak_rekeys.setter
    def sak_rekeys(self, value: pulumi.Input[Sequence[pulumi.Input['DlGatewayMacsecConfigSakRekeyArgs']]]):
        pulumi.set(self, "sak_rekeys", value)

    @_builtins.property
    @pulumi.getter(name="securityPolicy")
    def security_policy(self) -> pulumi.Input[_builtins.str]:
        """
        Determines how packets without MACsec headers are handled.
        """
        return pulumi.get(self, "security_policy")

    @security_policy.setter
    def security_policy(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "security_policy", value)

    @_builtins.property
    @pulumi.getter(name="dlGatewayMacsecConfigId")
    def dl_gateway_macsec_config_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dl_gateway_macsec_config_id")

    @dl_gateway_macsec_config_id.setter
    def dl_gateway_macsec_config_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dl_gateway_macsec_config_id", value)

    @_builtins.property
    @pulumi.getter(name="windowSize")
    def window_size(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The window size determines the number of frames in a window for replay protection.
        """
        return pulumi.get(self, "window_size")

    @window_size.setter
    def window_size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "window_size", value)


@pulumi.input_type
class _DlGatewayMacsecConfigState:
    def __init__(__self__, *,
                 active: Optional[pulumi.Input[_builtins.bool]] = None,
                 caks: Optional[pulumi.Input[Sequence[pulumi.Input['DlGatewayMacsecConfigCakArgs']]]] = None,
                 cipher_suite: Optional[pulumi.Input[_builtins.str]] = None,
                 confidentiality_offset: Optional[pulumi.Input[_builtins.float]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 dl_gateway_macsec_config_id: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 key_server_priority: Optional[pulumi.Input[_builtins.float]] = None,
                 sak_rekeys: Optional[pulumi.Input[Sequence[pulumi.Input['DlGatewayMacsecConfigSakRekeyArgs']]]] = None,
                 security_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 status_reasons: Optional[pulumi.Input[Sequence[pulumi.Input['DlGatewayMacsecConfigStatusReasonArgs']]]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 window_size: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering DlGatewayMacsecConfig resources.
        :param pulumi.Input[_builtins.bool] active: Indicate whether MACsec protection should be active (true) or inactive (false) for this MACsec enabled gateway
        :param pulumi.Input[Sequence[pulumi.Input['DlGatewayMacsecConfigCakArgs']]] caks: CAKs
        :param pulumi.Input[_builtins.str] cipher_suite: The cipher suite used in generating the security association key (SAK).
        :param pulumi.Input[_builtins.float] confidentiality_offset: The confidentiality offset determines the number of octets in an Ethernet frame that are not encrypted.
        :param pulumi.Input[_builtins.str] created_at: The date and time the resource was created
        :param pulumi.Input[_builtins.str] gateway: Gateway ID
        :param pulumi.Input[_builtins.float] key_server_priority: Key Server Priority
        :param pulumi.Input[Sequence[pulumi.Input['DlGatewayMacsecConfigSakRekeyArgs']]] sak_rekeys: Determines how SAK rekeying occurs.
        :param pulumi.Input[_builtins.str] security_policy: Determines how packets without MACsec headers are handled.
        :param pulumi.Input[_builtins.str] status: The current status of MACsec on the device for this gateway
        :param pulumi.Input[Sequence[pulumi.Input['DlGatewayMacsecConfigStatusReasonArgs']]] status_reasons: A reason for the current status.
        :param pulumi.Input[_builtins.str] updated_at: The date and time the resource was last updated
        :param pulumi.Input[_builtins.float] window_size: The window size determines the number of frames in a window for replay protection.
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if caks is not None:
            pulumi.set(__self__, "caks", caks)
        if cipher_suite is not None:
            pulumi.set(__self__, "cipher_suite", cipher_suite)
        if confidentiality_offset is not None:
            pulumi.set(__self__, "confidentiality_offset", confidentiality_offset)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if dl_gateway_macsec_config_id is not None:
            pulumi.set(__self__, "dl_gateway_macsec_config_id", dl_gateway_macsec_config_id)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if key_server_priority is not None:
            pulumi.set(__self__, "key_server_priority", key_server_priority)
        if sak_rekeys is not None:
            pulumi.set(__self__, "sak_rekeys", sak_rekeys)
        if security_policy is not None:
            pulumi.set(__self__, "security_policy", security_policy)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_reasons is not None:
            pulumi.set(__self__, "status_reasons", status_reasons)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if window_size is not None:
            pulumi.set(__self__, "window_size", window_size)

    @_builtins.property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicate whether MACsec protection should be active (true) or inactive (false) for this MACsec enabled gateway
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "active", value)

    @_builtins.property
    @pulumi.getter
    def caks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DlGatewayMacsecConfigCakArgs']]]]:
        """
        CAKs
        """
        return pulumi.get(self, "caks")

    @caks.setter
    def caks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DlGatewayMacsecConfigCakArgs']]]]):
        pulumi.set(self, "caks", value)

    @_builtins.property
    @pulumi.getter(name="cipherSuite")
    def cipher_suite(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cipher suite used in generating the security association key (SAK).
        """
        return pulumi.get(self, "cipher_suite")

    @cipher_suite.setter
    def cipher_suite(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cipher_suite", value)

    @_builtins.property
    @pulumi.getter(name="confidentialityOffset")
    def confidentiality_offset(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The confidentiality offset determines the number of octets in an Ethernet frame that are not encrypted.
        """
        return pulumi.get(self, "confidentiality_offset")

    @confidentiality_offset.setter
    def confidentiality_offset(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "confidentiality_offset", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time the resource was created
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="dlGatewayMacsecConfigId")
    def dl_gateway_macsec_config_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dl_gateway_macsec_config_id")

    @dl_gateway_macsec_config_id.setter
    def dl_gateway_macsec_config_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dl_gateway_macsec_config_id", value)

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Gateway ID
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gateway", value)

    @_builtins.property
    @pulumi.getter(name="keyServerPriority")
    def key_server_priority(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Key Server Priority
        """
        return pulumi.get(self, "key_server_priority")

    @key_server_priority.setter
    def key_server_priority(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "key_server_priority", value)

    @_builtins.property
    @pulumi.getter(name="sakRekeys")
    def sak_rekeys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DlGatewayMacsecConfigSakRekeyArgs']]]]:
        """
        Determines how SAK rekeying occurs.
        """
        return pulumi.get(self, "sak_rekeys")

    @sak_rekeys.setter
    def sak_rekeys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DlGatewayMacsecConfigSakRekeyArgs']]]]):
        pulumi.set(self, "sak_rekeys", value)

    @_builtins.property
    @pulumi.getter(name="securityPolicy")
    def security_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Determines how packets without MACsec headers are handled.
        """
        return pulumi.get(self, "security_policy")

    @security_policy.setter
    def security_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "security_policy", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The current status of MACsec on the device for this gateway
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DlGatewayMacsecConfigStatusReasonArgs']]]]:
        """
        A reason for the current status.
        """
        return pulumi.get(self, "status_reasons")

    @status_reasons.setter
    def status_reasons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DlGatewayMacsecConfigStatusReasonArgs']]]]):
        pulumi.set(self, "status_reasons", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time the resource was last updated
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="windowSize")
    def window_size(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The window size determines the number of frames in a window for replay protection.
        """
        return pulumi.get(self, "window_size")

    @window_size.setter
    def window_size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "window_size", value)


@pulumi.type_token("ibm:index/dlGatewayMacsecConfig:DlGatewayMacsecConfig")
class DlGatewayMacsecConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active: Optional[pulumi.Input[_builtins.bool]] = None,
                 caks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DlGatewayMacsecConfigCakArgs', 'DlGatewayMacsecConfigCakArgsDict']]]]] = None,
                 dl_gateway_macsec_config_id: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 sak_rekeys: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DlGatewayMacsecConfigSakRekeyArgs', 'DlGatewayMacsecConfigSakRekeyArgsDict']]]]] = None,
                 security_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 window_size: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a DlGatewayMacsecConfig resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] active: Indicate whether MACsec protection should be active (true) or inactive (false) for this MACsec enabled gateway
        :param pulumi.Input[Sequence[pulumi.Input[Union['DlGatewayMacsecConfigCakArgs', 'DlGatewayMacsecConfigCakArgsDict']]]] caks: CAKs
        :param pulumi.Input[_builtins.str] gateway: Gateway ID
        :param pulumi.Input[Sequence[pulumi.Input[Union['DlGatewayMacsecConfigSakRekeyArgs', 'DlGatewayMacsecConfigSakRekeyArgsDict']]]] sak_rekeys: Determines how SAK rekeying occurs.
        :param pulumi.Input[_builtins.str] security_policy: Determines how packets without MACsec headers are handled.
        :param pulumi.Input[_builtins.float] window_size: The window size determines the number of frames in a window for replay protection.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DlGatewayMacsecConfigInitArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DlGatewayMacsecConfig resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DlGatewayMacsecConfigInitArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DlGatewayMacsecConfigInitArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active: Optional[pulumi.Input[_builtins.bool]] = None,
                 caks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DlGatewayMacsecConfigCakArgs', 'DlGatewayMacsecConfigCakArgsDict']]]]] = None,
                 dl_gateway_macsec_config_id: Optional[pulumi.Input[_builtins.str]] = None,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 sak_rekeys: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DlGatewayMacsecConfigSakRekeyArgs', 'DlGatewayMacsecConfigSakRekeyArgsDict']]]]] = None,
                 security_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 window_size: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DlGatewayMacsecConfigInitArgs.__new__(DlGatewayMacsecConfigInitArgs)

            if active is None and not opts.urn:
                raise TypeError("Missing required property 'active'")
            __props__.__dict__["active"] = active
            if caks is None and not opts.urn:
                raise TypeError("Missing required property 'caks'")
            __props__.__dict__["caks"] = caks
            __props__.__dict__["dl_gateway_macsec_config_id"] = dl_gateway_macsec_config_id
            if gateway is None and not opts.urn:
                raise TypeError("Missing required property 'gateway'")
            __props__.__dict__["gateway"] = gateway
            if sak_rekeys is None and not opts.urn:
                raise TypeError("Missing required property 'sak_rekeys'")
            __props__.__dict__["sak_rekeys"] = sak_rekeys
            if security_policy is None and not opts.urn:
                raise TypeError("Missing required property 'security_policy'")
            __props__.__dict__["security_policy"] = security_policy
            __props__.__dict__["window_size"] = window_size
            __props__.__dict__["cipher_suite"] = None
            __props__.__dict__["confidentiality_offset"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["key_server_priority"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["status_reasons"] = None
            __props__.__dict__["updated_at"] = None
        super(DlGatewayMacsecConfig, __self__).__init__(
            'ibm:index/dlGatewayMacsecConfig:DlGatewayMacsecConfig',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            active: Optional[pulumi.Input[_builtins.bool]] = None,
            caks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DlGatewayMacsecConfigCakArgs', 'DlGatewayMacsecConfigCakArgsDict']]]]] = None,
            cipher_suite: Optional[pulumi.Input[_builtins.str]] = None,
            confidentiality_offset: Optional[pulumi.Input[_builtins.float]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            dl_gateway_macsec_config_id: Optional[pulumi.Input[_builtins.str]] = None,
            gateway: Optional[pulumi.Input[_builtins.str]] = None,
            key_server_priority: Optional[pulumi.Input[_builtins.float]] = None,
            sak_rekeys: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DlGatewayMacsecConfigSakRekeyArgs', 'DlGatewayMacsecConfigSakRekeyArgsDict']]]]] = None,
            security_policy: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            status_reasons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DlGatewayMacsecConfigStatusReasonArgs', 'DlGatewayMacsecConfigStatusReasonArgsDict']]]]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            window_size: Optional[pulumi.Input[_builtins.float]] = None) -> 'DlGatewayMacsecConfig':
        """
        Get an existing DlGatewayMacsecConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] active: Indicate whether MACsec protection should be active (true) or inactive (false) for this MACsec enabled gateway
        :param pulumi.Input[Sequence[pulumi.Input[Union['DlGatewayMacsecConfigCakArgs', 'DlGatewayMacsecConfigCakArgsDict']]]] caks: CAKs
        :param pulumi.Input[_builtins.str] cipher_suite: The cipher suite used in generating the security association key (SAK).
        :param pulumi.Input[_builtins.float] confidentiality_offset: The confidentiality offset determines the number of octets in an Ethernet frame that are not encrypted.
        :param pulumi.Input[_builtins.str] created_at: The date and time the resource was created
        :param pulumi.Input[_builtins.str] gateway: Gateway ID
        :param pulumi.Input[_builtins.float] key_server_priority: Key Server Priority
        :param pulumi.Input[Sequence[pulumi.Input[Union['DlGatewayMacsecConfigSakRekeyArgs', 'DlGatewayMacsecConfigSakRekeyArgsDict']]]] sak_rekeys: Determines how SAK rekeying occurs.
        :param pulumi.Input[_builtins.str] security_policy: Determines how packets without MACsec headers are handled.
        :param pulumi.Input[_builtins.str] status: The current status of MACsec on the device for this gateway
        :param pulumi.Input[Sequence[pulumi.Input[Union['DlGatewayMacsecConfigStatusReasonArgs', 'DlGatewayMacsecConfigStatusReasonArgsDict']]]] status_reasons: A reason for the current status.
        :param pulumi.Input[_builtins.str] updated_at: The date and time the resource was last updated
        :param pulumi.Input[_builtins.float] window_size: The window size determines the number of frames in a window for replay protection.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DlGatewayMacsecConfigState.__new__(_DlGatewayMacsecConfigState)

        __props__.__dict__["active"] = active
        __props__.__dict__["caks"] = caks
        __props__.__dict__["cipher_suite"] = cipher_suite
        __props__.__dict__["confidentiality_offset"] = confidentiality_offset
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["dl_gateway_macsec_config_id"] = dl_gateway_macsec_config_id
        __props__.__dict__["gateway"] = gateway
        __props__.__dict__["key_server_priority"] = key_server_priority
        __props__.__dict__["sak_rekeys"] = sak_rekeys
        __props__.__dict__["security_policy"] = security_policy
        __props__.__dict__["status"] = status
        __props__.__dict__["status_reasons"] = status_reasons
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["window_size"] = window_size
        return DlGatewayMacsecConfig(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def active(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicate whether MACsec protection should be active (true) or inactive (false) for this MACsec enabled gateway
        """
        return pulumi.get(self, "active")

    @_builtins.property
    @pulumi.getter
    def caks(self) -> pulumi.Output[Sequence['outputs.DlGatewayMacsecConfigCak']]:
        """
        CAKs
        """
        return pulumi.get(self, "caks")

    @_builtins.property
    @pulumi.getter(name="cipherSuite")
    def cipher_suite(self) -> pulumi.Output[_builtins.str]:
        """
        The cipher suite used in generating the security association key (SAK).
        """
        return pulumi.get(self, "cipher_suite")

    @_builtins.property
    @pulumi.getter(name="confidentialityOffset")
    def confidentiality_offset(self) -> pulumi.Output[_builtins.float]:
        """
        The confidentiality offset determines the number of octets in an Ethernet frame that are not encrypted.
        """
        return pulumi.get(self, "confidentiality_offset")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time the resource was created
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="dlGatewayMacsecConfigId")
    def dl_gateway_macsec_config_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "dl_gateway_macsec_config_id")

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> pulumi.Output[_builtins.str]:
        """
        Gateway ID
        """
        return pulumi.get(self, "gateway")

    @_builtins.property
    @pulumi.getter(name="keyServerPriority")
    def key_server_priority(self) -> pulumi.Output[_builtins.float]:
        """
        Key Server Priority
        """
        return pulumi.get(self, "key_server_priority")

    @_builtins.property
    @pulumi.getter(name="sakRekeys")
    def sak_rekeys(self) -> pulumi.Output[Sequence['outputs.DlGatewayMacsecConfigSakRekey']]:
        """
        Determines how SAK rekeying occurs.
        """
        return pulumi.get(self, "sak_rekeys")

    @_builtins.property
    @pulumi.getter(name="securityPolicy")
    def security_policy(self) -> pulumi.Output[_builtins.str]:
        """
        Determines how packets without MACsec headers are handled.
        """
        return pulumi.get(self, "security_policy")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The current status of MACsec on the device for this gateway
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> pulumi.Output[Sequence['outputs.DlGatewayMacsecConfigStatusReason']]:
        """
        A reason for the current status.
        """
        return pulumi.get(self, "status_reasons")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time the resource was last updated
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="windowSize")
    def window_size(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        The window size determines the number of frames in a window for replay protection.
        """
        return pulumi.get(self, "window_size")

