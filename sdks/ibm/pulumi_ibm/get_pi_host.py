# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetPiHostResult',
    'AwaitableGetPiHostResult',
    'get_pi_host',
    'get_pi_host_output',
]

@pulumi.output_type
class GetPiHostResult:
    """
    A collection of values returned by getPiHost.
    """
    def __init__(__self__, capacities=None, crn=None, display_name=None, host_group=None, host_reference=None, id=None, pi_cloud_instance_id=None, pi_host_id=None, state=None, status=None, sys_type=None, user_tags=None):
        if capacities and not isinstance(capacities, list):
            raise TypeError("Expected argument 'capacities' to be a list")
        pulumi.set(__self__, "capacities", capacities)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if host_group and not isinstance(host_group, dict):
            raise TypeError("Expected argument 'host_group' to be a dict")
        pulumi.set(__self__, "host_group", host_group)
        if host_reference and not isinstance(host_reference, float):
            raise TypeError("Expected argument 'host_reference' to be a float")
        pulumi.set(__self__, "host_reference", host_reference)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if pi_cloud_instance_id and not isinstance(pi_cloud_instance_id, str):
            raise TypeError("Expected argument 'pi_cloud_instance_id' to be a str")
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_host_id and not isinstance(pi_host_id, str):
            raise TypeError("Expected argument 'pi_host_id' to be a str")
        pulumi.set(__self__, "pi_host_id", pi_host_id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if sys_type and not isinstance(sys_type, str):
            raise TypeError("Expected argument 'sys_type' to be a str")
        pulumi.set(__self__, "sys_type", sys_type)
        if user_tags and not isinstance(user_tags, list):
            raise TypeError("Expected argument 'user_tags' to be a list")
        pulumi.set(__self__, "user_tags", user_tags)

    @_builtins.property
    @pulumi.getter
    def capacities(self) -> Sequence['outputs.GetPiHostCapacityResult']:
        return pulumi.get(self, "capacities")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="hostGroup")
    def host_group(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "host_group")

    @_builtins.property
    @pulumi.getter(name="hostReference")
    def host_reference(self) -> _builtins.float:
        return pulumi.get(self, "host_reference")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piHostId")
    def pi_host_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_host_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="sysType")
    def sys_type(self) -> _builtins.str:
        return pulumi.get(self, "sys_type")

    @_builtins.property
    @pulumi.getter(name="userTags")
    def user_tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "user_tags")


class AwaitableGetPiHostResult(GetPiHostResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPiHostResult(
            capacities=self.capacities,
            crn=self.crn,
            display_name=self.display_name,
            host_group=self.host_group,
            host_reference=self.host_reference,
            id=self.id,
            pi_cloud_instance_id=self.pi_cloud_instance_id,
            pi_host_id=self.pi_host_id,
            state=self.state,
            status=self.status,
            sys_type=self.sys_type,
            user_tags=self.user_tags)


def get_pi_host(id: Optional[_builtins.str] = None,
                pi_cloud_instance_id: Optional[_builtins.str] = None,
                pi_host_id: Optional[_builtins.str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPiHostResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piHostId'] = pi_host_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getPiHost:getPiHost', __args__, opts=opts, typ=GetPiHostResult, package_ref=_utilities.get_package()).value

    return AwaitableGetPiHostResult(
        capacities=pulumi.get(__ret__, 'capacities'),
        crn=pulumi.get(__ret__, 'crn'),
        display_name=pulumi.get(__ret__, 'display_name'),
        host_group=pulumi.get(__ret__, 'host_group'),
        host_reference=pulumi.get(__ret__, 'host_reference'),
        id=pulumi.get(__ret__, 'id'),
        pi_cloud_instance_id=pulumi.get(__ret__, 'pi_cloud_instance_id'),
        pi_host_id=pulumi.get(__ret__, 'pi_host_id'),
        state=pulumi.get(__ret__, 'state'),
        status=pulumi.get(__ret__, 'status'),
        sys_type=pulumi.get(__ret__, 'sys_type'),
        user_tags=pulumi.get(__ret__, 'user_tags'))
def get_pi_host_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                       pi_host_id: Optional[pulumi.Input[_builtins.str]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPiHostResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piHostId'] = pi_host_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getPiHost:getPiHost', __args__, opts=opts, typ=GetPiHostResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetPiHostResult(
        capacities=pulumi.get(__response__, 'capacities'),
        crn=pulumi.get(__response__, 'crn'),
        display_name=pulumi.get(__response__, 'display_name'),
        host_group=pulumi.get(__response__, 'host_group'),
        host_reference=pulumi.get(__response__, 'host_reference'),
        id=pulumi.get(__response__, 'id'),
        pi_cloud_instance_id=pulumi.get(__response__, 'pi_cloud_instance_id'),
        pi_host_id=pulumi.get(__response__, 'pi_host_id'),
        state=pulumi.get(__response__, 'state'),
        status=pulumi.get(__response__, 'status'),
        sys_type=pulumi.get(__response__, 'sys_type'),
        user_tags=pulumi.get(__response__, 'user_tags')))
