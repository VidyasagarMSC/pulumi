# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetPiDhcpResult',
    'AwaitableGetPiDhcpResult',
    'get_pi_dhcp',
    'get_pi_dhcp_output',
]

@pulumi.output_type
class GetPiDhcpResult:
    """
    A collection of values returned by getPiDhcp.
    """
    def __init__(__self__, dhcp_id=None, id=None, leases=None, network_id=None, network_name=None, pi_cloud_instance_id=None, pi_dhcp_id=None, status=None):
        if dhcp_id and not isinstance(dhcp_id, str):
            raise TypeError("Expected argument 'dhcp_id' to be a str")
        pulumi.set(__self__, "dhcp_id", dhcp_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if leases and not isinstance(leases, list):
            raise TypeError("Expected argument 'leases' to be a list")
        pulumi.set(__self__, "leases", leases)
        if network_id and not isinstance(network_id, str):
            raise TypeError("Expected argument 'network_id' to be a str")
        pulumi.set(__self__, "network_id", network_id)
        if network_name and not isinstance(network_name, str):
            raise TypeError("Expected argument 'network_name' to be a str")
        pulumi.set(__self__, "network_name", network_name)
        if pi_cloud_instance_id and not isinstance(pi_cloud_instance_id, str):
            raise TypeError("Expected argument 'pi_cloud_instance_id' to be a str")
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_dhcp_id and not isinstance(pi_dhcp_id, str):
            raise TypeError("Expected argument 'pi_dhcp_id' to be a str")
        pulumi.set(__self__, "pi_dhcp_id", pi_dhcp_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="dhcpId")
    @_utilities.deprecated("""Deprecated""")
    def dhcp_id(self) -> _builtins.str:
        return pulumi.get(self, "dhcp_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def leases(self) -> Sequence['outputs.GetPiDhcpLeaseResult']:
        return pulumi.get(self, "leases")

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> _builtins.str:
        return pulumi.get(self, "network_id")

    @_builtins.property
    @pulumi.getter(name="networkName")
    def network_name(self) -> _builtins.str:
        return pulumi.get(self, "network_name")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piDhcpId")
    def pi_dhcp_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_dhcp_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")


class AwaitableGetPiDhcpResult(GetPiDhcpResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPiDhcpResult(
            dhcp_id=self.dhcp_id,
            id=self.id,
            leases=self.leases,
            network_id=self.network_id,
            network_name=self.network_name,
            pi_cloud_instance_id=self.pi_cloud_instance_id,
            pi_dhcp_id=self.pi_dhcp_id,
            status=self.status)


def get_pi_dhcp(id: Optional[_builtins.str] = None,
                pi_cloud_instance_id: Optional[_builtins.str] = None,
                pi_dhcp_id: Optional[_builtins.str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPiDhcpResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piDhcpId'] = pi_dhcp_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getPiDhcp:getPiDhcp', __args__, opts=opts, typ=GetPiDhcpResult, package_ref=_utilities.get_package()).value

    return AwaitableGetPiDhcpResult(
        dhcp_id=pulumi.get(__ret__, 'dhcp_id'),
        id=pulumi.get(__ret__, 'id'),
        leases=pulumi.get(__ret__, 'leases'),
        network_id=pulumi.get(__ret__, 'network_id'),
        network_name=pulumi.get(__ret__, 'network_name'),
        pi_cloud_instance_id=pulumi.get(__ret__, 'pi_cloud_instance_id'),
        pi_dhcp_id=pulumi.get(__ret__, 'pi_dhcp_id'),
        status=pulumi.get(__ret__, 'status'))
def get_pi_dhcp_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                       pi_dhcp_id: Optional[pulumi.Input[_builtins.str]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPiDhcpResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piDhcpId'] = pi_dhcp_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getPiDhcp:getPiDhcp', __args__, opts=opts, typ=GetPiDhcpResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetPiDhcpResult(
        dhcp_id=pulumi.get(__response__, 'dhcp_id'),
        id=pulumi.get(__response__, 'id'),
        leases=pulumi.get(__response__, 'leases'),
        network_id=pulumi.get(__response__, 'network_id'),
        network_name=pulumi.get(__response__, 'network_name'),
        pi_cloud_instance_id=pulumi.get(__response__, 'pi_cloud_instance_id'),
        pi_dhcp_id=pulumi.get(__response__, 'pi_dhcp_id'),
        status=pulumi.get(__response__, 'status')))
