# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ContainerWorkerPoolZoneAttachmentArgs', 'ContainerWorkerPoolZoneAttachment']

@pulumi.input_type
class ContainerWorkerPoolZoneAttachmentArgs:
    def __init__(__self__, *,
                 cluster: pulumi.Input[_builtins.str],
                 worker_pool: pulumi.Input[_builtins.str],
                 zone: pulumi.Input[_builtins.str],
                 container_worker_pool_zone_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 private_vlan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 public_vlan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['ContainerWorkerPoolZoneAttachmentTimeoutsArgs']] = None,
                 wait_till_albs: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a ContainerWorkerPoolZoneAttachment resource.
        :param pulumi.Input[_builtins.str] cluster: cluster name or ID
        :param pulumi.Input[_builtins.str] worker_pool: Workerpool name
        :param pulumi.Input[_builtins.str] zone: Zone name
        :param pulumi.Input[_builtins.str] region: The zone region
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.bool] wait_till_albs: wait_till_albs can be configured to wait for albs during the worker pool zone attachment.
        """
        pulumi.set(__self__, "cluster", cluster)
        pulumi.set(__self__, "worker_pool", worker_pool)
        pulumi.set(__self__, "zone", zone)
        if container_worker_pool_zone_attachment_id is not None:
            pulumi.set(__self__, "container_worker_pool_zone_attachment_id", container_worker_pool_zone_attachment_id)
        if private_vlan_id is not None:
            pulumi.set(__self__, "private_vlan_id", private_vlan_id)
        if public_vlan_id is not None:
            pulumi.set(__self__, "public_vlan_id", public_vlan_id)
        if region is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""region is deprecated: Deprecated""")
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if wait_till_albs is not None:
            pulumi.set(__self__, "wait_till_albs", wait_till_albs)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> pulumi.Input[_builtins.str]:
        """
        cluster name or ID
        """
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster", value)

    @_builtins.property
    @pulumi.getter(name="workerPool")
    def worker_pool(self) -> pulumi.Input[_builtins.str]:
        """
        Workerpool name
        """
        return pulumi.get(self, "worker_pool")

    @worker_pool.setter
    def worker_pool(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "worker_pool", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> pulumi.Input[_builtins.str]:
        """
        Zone name
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "zone", value)

    @_builtins.property
    @pulumi.getter(name="containerWorkerPoolZoneAttachmentId")
    def container_worker_pool_zone_attachment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_worker_pool_zone_attachment_id")

    @container_worker_pool_zone_attachment_id.setter
    def container_worker_pool_zone_attachment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_worker_pool_zone_attachment_id", value)

    @_builtins.property
    @pulumi.getter(name="privateVlanId")
    def private_vlan_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "private_vlan_id")

    @private_vlan_id.setter
    def private_vlan_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_vlan_id", value)

    @_builtins.property
    @pulumi.getter(name="publicVlanId")
    def public_vlan_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "public_vlan_id")

    @public_vlan_id.setter
    def public_vlan_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_vlan_id", value)

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The zone region
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ContainerWorkerPoolZoneAttachmentTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ContainerWorkerPoolZoneAttachmentTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="waitTillAlbs")
    def wait_till_albs(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        wait_till_albs can be configured to wait for albs during the worker pool zone attachment.
        """
        return pulumi.get(self, "wait_till_albs")

    @wait_till_albs.setter
    def wait_till_albs(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "wait_till_albs", value)


@pulumi.input_type
class _ContainerWorkerPoolZoneAttachmentState:
    def __init__(__self__, *,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 container_worker_pool_zone_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 private_vlan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 public_vlan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['ContainerWorkerPoolZoneAttachmentTimeoutsArgs']] = None,
                 wait_till_albs: Optional[pulumi.Input[_builtins.bool]] = None,
                 worker_count: Optional[pulumi.Input[_builtins.float]] = None,
                 worker_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ContainerWorkerPoolZoneAttachment resources.
        :param pulumi.Input[_builtins.str] cluster: cluster name or ID
        :param pulumi.Input[_builtins.str] region: The zone region
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.bool] wait_till_albs: wait_till_albs can be configured to wait for albs during the worker pool zone attachment.
        :param pulumi.Input[_builtins.str] worker_pool: Workerpool name
        :param pulumi.Input[_builtins.str] zone: Zone name
        """
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if container_worker_pool_zone_attachment_id is not None:
            pulumi.set(__self__, "container_worker_pool_zone_attachment_id", container_worker_pool_zone_attachment_id)
        if private_vlan_id is not None:
            pulumi.set(__self__, "private_vlan_id", private_vlan_id)
        if public_vlan_id is not None:
            pulumi.set(__self__, "public_vlan_id", public_vlan_id)
        if region is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""region is deprecated: Deprecated""")
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if wait_till_albs is not None:
            pulumi.set(__self__, "wait_till_albs", wait_till_albs)
        if worker_count is not None:
            pulumi.set(__self__, "worker_count", worker_count)
        if worker_pool is not None:
            pulumi.set(__self__, "worker_pool", worker_pool)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        cluster name or ID
        """
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster", value)

    @_builtins.property
    @pulumi.getter(name="containerWorkerPoolZoneAttachmentId")
    def container_worker_pool_zone_attachment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_worker_pool_zone_attachment_id")

    @container_worker_pool_zone_attachment_id.setter
    def container_worker_pool_zone_attachment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_worker_pool_zone_attachment_id", value)

    @_builtins.property
    @pulumi.getter(name="privateVlanId")
    def private_vlan_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "private_vlan_id")

    @private_vlan_id.setter
    def private_vlan_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_vlan_id", value)

    @_builtins.property
    @pulumi.getter(name="publicVlanId")
    def public_vlan_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "public_vlan_id")

    @public_vlan_id.setter
    def public_vlan_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_vlan_id", value)

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The zone region
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ContainerWorkerPoolZoneAttachmentTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ContainerWorkerPoolZoneAttachmentTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="waitTillAlbs")
    def wait_till_albs(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        wait_till_albs can be configured to wait for albs during the worker pool zone attachment.
        """
        return pulumi.get(self, "wait_till_albs")

    @wait_till_albs.setter
    def wait_till_albs(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "wait_till_albs", value)

    @_builtins.property
    @pulumi.getter(name="workerCount")
    def worker_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "worker_count")

    @worker_count.setter
    def worker_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "worker_count", value)

    @_builtins.property
    @pulumi.getter(name="workerPool")
    def worker_pool(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Workerpool name
        """
        return pulumi.get(self, "worker_pool")

    @worker_pool.setter
    def worker_pool(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "worker_pool", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Zone name
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zone", value)


@pulumi.type_token("ibm:index/containerWorkerPoolZoneAttachment:ContainerWorkerPoolZoneAttachment")
class ContainerWorkerPoolZoneAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 container_worker_pool_zone_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 private_vlan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 public_vlan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['ContainerWorkerPoolZoneAttachmentTimeoutsArgs', 'ContainerWorkerPoolZoneAttachmentTimeoutsArgsDict']]] = None,
                 wait_till_albs: Optional[pulumi.Input[_builtins.bool]] = None,
                 worker_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a ContainerWorkerPoolZoneAttachment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster: cluster name or ID
        :param pulumi.Input[_builtins.str] region: The zone region
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.bool] wait_till_albs: wait_till_albs can be configured to wait for albs during the worker pool zone attachment.
        :param pulumi.Input[_builtins.str] worker_pool: Workerpool name
        :param pulumi.Input[_builtins.str] zone: Zone name
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ContainerWorkerPoolZoneAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ContainerWorkerPoolZoneAttachment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ContainerWorkerPoolZoneAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ContainerWorkerPoolZoneAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 container_worker_pool_zone_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 private_vlan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 public_vlan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['ContainerWorkerPoolZoneAttachmentTimeoutsArgs', 'ContainerWorkerPoolZoneAttachmentTimeoutsArgsDict']]] = None,
                 wait_till_albs: Optional[pulumi.Input[_builtins.bool]] = None,
                 worker_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ContainerWorkerPoolZoneAttachmentArgs.__new__(ContainerWorkerPoolZoneAttachmentArgs)

            if cluster is None and not opts.urn:
                raise TypeError("Missing required property 'cluster'")
            __props__.__dict__["cluster"] = cluster
            __props__.__dict__["container_worker_pool_zone_attachment_id"] = container_worker_pool_zone_attachment_id
            __props__.__dict__["private_vlan_id"] = private_vlan_id
            __props__.__dict__["public_vlan_id"] = public_vlan_id
            __props__.__dict__["region"] = region
            __props__.__dict__["resource_group_id"] = resource_group_id
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["wait_till_albs"] = wait_till_albs
            if worker_pool is None and not opts.urn:
                raise TypeError("Missing required property 'worker_pool'")
            __props__.__dict__["worker_pool"] = worker_pool
            if zone is None and not opts.urn:
                raise TypeError("Missing required property 'zone'")
            __props__.__dict__["zone"] = zone
            __props__.__dict__["worker_count"] = None
        super(ContainerWorkerPoolZoneAttachment, __self__).__init__(
            'ibm:index/containerWorkerPoolZoneAttachment:ContainerWorkerPoolZoneAttachment',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster: Optional[pulumi.Input[_builtins.str]] = None,
            container_worker_pool_zone_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
            private_vlan_id: Optional[pulumi.Input[_builtins.str]] = None,
            public_vlan_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['ContainerWorkerPoolZoneAttachmentTimeoutsArgs', 'ContainerWorkerPoolZoneAttachmentTimeoutsArgsDict']]] = None,
            wait_till_albs: Optional[pulumi.Input[_builtins.bool]] = None,
            worker_count: Optional[pulumi.Input[_builtins.float]] = None,
            worker_pool: Optional[pulumi.Input[_builtins.str]] = None,
            zone: Optional[pulumi.Input[_builtins.str]] = None) -> 'ContainerWorkerPoolZoneAttachment':
        """
        Get an existing ContainerWorkerPoolZoneAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster: cluster name or ID
        :param pulumi.Input[_builtins.str] region: The zone region
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.bool] wait_till_albs: wait_till_albs can be configured to wait for albs during the worker pool zone attachment.
        :param pulumi.Input[_builtins.str] worker_pool: Workerpool name
        :param pulumi.Input[_builtins.str] zone: Zone name
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ContainerWorkerPoolZoneAttachmentState.__new__(_ContainerWorkerPoolZoneAttachmentState)

        __props__.__dict__["cluster"] = cluster
        __props__.__dict__["container_worker_pool_zone_attachment_id"] = container_worker_pool_zone_attachment_id
        __props__.__dict__["private_vlan_id"] = private_vlan_id
        __props__.__dict__["public_vlan_id"] = public_vlan_id
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_group_id"] = resource_group_id
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["wait_till_albs"] = wait_till_albs
        __props__.__dict__["worker_count"] = worker_count
        __props__.__dict__["worker_pool"] = worker_pool
        __props__.__dict__["zone"] = zone
        return ContainerWorkerPoolZoneAttachment(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> pulumi.Output[_builtins.str]:
        """
        cluster name or ID
        """
        return pulumi.get(self, "cluster")

    @_builtins.property
    @pulumi.getter(name="containerWorkerPoolZoneAttachmentId")
    def container_worker_pool_zone_attachment_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "container_worker_pool_zone_attachment_id")

    @_builtins.property
    @pulumi.getter(name="privateVlanId")
    def private_vlan_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "private_vlan_id")

    @_builtins.property
    @pulumi.getter(name="publicVlanId")
    def public_vlan_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "public_vlan_id")

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The zone region
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.ContainerWorkerPoolZoneAttachmentTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter(name="waitTillAlbs")
    def wait_till_albs(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        wait_till_albs can be configured to wait for albs during the worker pool zone attachment.
        """
        return pulumi.get(self, "wait_till_albs")

    @_builtins.property
    @pulumi.getter(name="workerCount")
    def worker_count(self) -> pulumi.Output[_builtins.float]:
        return pulumi.get(self, "worker_count")

    @_builtins.property
    @pulumi.getter(name="workerPool")
    def worker_pool(self) -> pulumi.Output[_builtins.str]:
        """
        Workerpool name
        """
        return pulumi.get(self, "worker_pool")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> pulumi.Output[_builtins.str]:
        """
        Zone name
        """
        return pulumi.get(self, "zone")

