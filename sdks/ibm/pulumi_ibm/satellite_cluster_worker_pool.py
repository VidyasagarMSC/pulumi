# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SatelliteClusterWorkerPoolArgs', 'SatelliteClusterWorkerPool']

@pulumi.input_type
class SatelliteClusterWorkerPoolArgs:
    def __init__(__self__, *,
                 cluster: pulumi.Input[_builtins.str],
                 disk_encryption: Optional[pulumi.Input[_builtins.bool]] = None,
                 entitlement: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor: Optional[pulumi.Input[_builtins.str]] = None,
                 host_labels: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 isolation: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 operating_system: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 satellite_cluster_worker_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['SatelliteClusterWorkerPoolTimeoutsArgs']] = None,
                 worker_count: Optional[pulumi.Input[_builtins.float]] = None,
                 worker_pool_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input['SatelliteClusterWorkerPoolZoneArgs']]]] = None):
        """
        The set of arguments for constructing a SatelliteClusterWorkerPool resource.
        :param pulumi.Input[_builtins.str] cluster: The unique name for the new IBM Cloud Satellite cluster
        :param pulumi.Input[_builtins.bool] disk_encryption: Disk encryption for worker node
        :param pulumi.Input[_builtins.str] entitlement: Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        :param pulumi.Input[_builtins.str] flavor: The flavor defines the amount of virtual CPU, memory, and disk space that is set up in each worker node
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] host_labels: Labels that describe a Satellite host
        :param pulumi.Input[_builtins.str] name: The name for the worker pool
        :param pulumi.Input[_builtins.str] operating_system: Operating system of the worker pool. Options are REDHAT_7_64, REDHAT_8_64, or RHCOS.
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.float] worker_count: Specify the desired number of workers per zone in this worker pool
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] worker_pool_labels: Labels on all the workers in the worker pool
        :param pulumi.Input[Sequence[pulumi.Input['SatelliteClusterWorkerPoolZoneArgs']]] zones: Zone info for worker pool
        """
        pulumi.set(__self__, "cluster", cluster)
        if disk_encryption is not None:
            pulumi.set(__self__, "disk_encryption", disk_encryption)
        if entitlement is not None:
            pulumi.set(__self__, "entitlement", entitlement)
        if flavor is not None:
            pulumi.set(__self__, "flavor", flavor)
        if host_labels is not None:
            pulumi.set(__self__, "host_labels", host_labels)
        if isolation is not None:
            pulumi.set(__self__, "isolation", isolation)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operating_system is not None:
            pulumi.set(__self__, "operating_system", operating_system)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if satellite_cluster_worker_pool_id is not None:
            pulumi.set(__self__, "satellite_cluster_worker_pool_id", satellite_cluster_worker_pool_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if worker_count is not None:
            pulumi.set(__self__, "worker_count", worker_count)
        if worker_pool_labels is not None:
            pulumi.set(__self__, "worker_pool_labels", worker_pool_labels)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> pulumi.Input[_builtins.str]:
        """
        The unique name for the new IBM Cloud Satellite cluster
        """
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster", value)

    @_builtins.property
    @pulumi.getter(name="diskEncryption")
    def disk_encryption(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Disk encryption for worker node
        """
        return pulumi.get(self, "disk_encryption")

    @disk_encryption.setter
    def disk_encryption(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disk_encryption", value)

    @_builtins.property
    @pulumi.getter
    def entitlement(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        """
        return pulumi.get(self, "entitlement")

    @entitlement.setter
    def entitlement(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entitlement", value)

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The flavor defines the amount of virtual CPU, memory, and disk space that is set up in each worker node
        """
        return pulumi.get(self, "flavor")

    @flavor.setter
    def flavor(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "flavor", value)

    @_builtins.property
    @pulumi.getter(name="hostLabels")
    def host_labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Labels that describe a Satellite host
        """
        return pulumi.get(self, "host_labels")

    @host_labels.setter
    def host_labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "host_labels", value)

    @_builtins.property
    @pulumi.getter
    def isolation(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "isolation")

    @isolation.setter
    def isolation(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "isolation", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name for the worker pool
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Operating system of the worker pool. Options are REDHAT_7_64, REDHAT_8_64, or RHCOS.
        """
        return pulumi.get(self, "operating_system")

    @operating_system.setter
    def operating_system(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "operating_system", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter(name="satelliteClusterWorkerPoolId")
    def satellite_cluster_worker_pool_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "satellite_cluster_worker_pool_id")

    @satellite_cluster_worker_pool_id.setter
    def satellite_cluster_worker_pool_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "satellite_cluster_worker_pool_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['SatelliteClusterWorkerPoolTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['SatelliteClusterWorkerPoolTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="workerCount")
    def worker_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specify the desired number of workers per zone in this worker pool
        """
        return pulumi.get(self, "worker_count")

    @worker_count.setter
    def worker_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "worker_count", value)

    @_builtins.property
    @pulumi.getter(name="workerPoolLabels")
    def worker_pool_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Labels on all the workers in the worker pool
        """
        return pulumi.get(self, "worker_pool_labels")

    @worker_pool_labels.setter
    def worker_pool_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "worker_pool_labels", value)

    @_builtins.property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SatelliteClusterWorkerPoolZoneArgs']]]]:
        """
        Zone info for worker pool
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SatelliteClusterWorkerPoolZoneArgs']]]]):
        pulumi.set(self, "zones", value)


@pulumi.input_type
class _SatelliteClusterWorkerPoolState:
    def __init__(__self__, *,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 disk_encryption: Optional[pulumi.Input[_builtins.bool]] = None,
                 entitlement: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor: Optional[pulumi.Input[_builtins.str]] = None,
                 host_labels: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 isolation: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 operating_system: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 satellite_cluster_worker_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['SatelliteClusterWorkerPoolTimeoutsArgs']] = None,
                 worker_count: Optional[pulumi.Input[_builtins.float]] = None,
                 worker_pool_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input['SatelliteClusterWorkerPoolZoneArgs']]]] = None):
        """
        Input properties used for looking up and filtering SatelliteClusterWorkerPool resources.
        :param pulumi.Input[_builtins.str] cluster: The unique name for the new IBM Cloud Satellite cluster
        :param pulumi.Input[_builtins.bool] disk_encryption: Disk encryption for worker node
        :param pulumi.Input[_builtins.str] entitlement: Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        :param pulumi.Input[_builtins.str] flavor: The flavor defines the amount of virtual CPU, memory, and disk space that is set up in each worker node
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] host_labels: Labels that describe a Satellite host
        :param pulumi.Input[_builtins.str] name: The name for the worker pool
        :param pulumi.Input[_builtins.str] operating_system: Operating system of the worker pool. Options are REDHAT_7_64, REDHAT_8_64, or RHCOS.
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.float] worker_count: Specify the desired number of workers per zone in this worker pool
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] worker_pool_labels: Labels on all the workers in the worker pool
        :param pulumi.Input[Sequence[pulumi.Input['SatelliteClusterWorkerPoolZoneArgs']]] zones: Zone info for worker pool
        """
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if disk_encryption is not None:
            pulumi.set(__self__, "disk_encryption", disk_encryption)
        if entitlement is not None:
            pulumi.set(__self__, "entitlement", entitlement)
        if flavor is not None:
            pulumi.set(__self__, "flavor", flavor)
        if host_labels is not None:
            pulumi.set(__self__, "host_labels", host_labels)
        if isolation is not None:
            pulumi.set(__self__, "isolation", isolation)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operating_system is not None:
            pulumi.set(__self__, "operating_system", operating_system)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if satellite_cluster_worker_pool_id is not None:
            pulumi.set(__self__, "satellite_cluster_worker_pool_id", satellite_cluster_worker_pool_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if worker_count is not None:
            pulumi.set(__self__, "worker_count", worker_count)
        if worker_pool_labels is not None:
            pulumi.set(__self__, "worker_pool_labels", worker_pool_labels)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique name for the new IBM Cloud Satellite cluster
        """
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster", value)

    @_builtins.property
    @pulumi.getter(name="diskEncryption")
    def disk_encryption(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Disk encryption for worker node
        """
        return pulumi.get(self, "disk_encryption")

    @disk_encryption.setter
    def disk_encryption(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disk_encryption", value)

    @_builtins.property
    @pulumi.getter
    def entitlement(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        """
        return pulumi.get(self, "entitlement")

    @entitlement.setter
    def entitlement(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entitlement", value)

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The flavor defines the amount of virtual CPU, memory, and disk space that is set up in each worker node
        """
        return pulumi.get(self, "flavor")

    @flavor.setter
    def flavor(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "flavor", value)

    @_builtins.property
    @pulumi.getter(name="hostLabels")
    def host_labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Labels that describe a Satellite host
        """
        return pulumi.get(self, "host_labels")

    @host_labels.setter
    def host_labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "host_labels", value)

    @_builtins.property
    @pulumi.getter
    def isolation(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "isolation")

    @isolation.setter
    def isolation(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "isolation", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name for the worker pool
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Operating system of the worker pool. Options are REDHAT_7_64, REDHAT_8_64, or RHCOS.
        """
        return pulumi.get(self, "operating_system")

    @operating_system.setter
    def operating_system(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "operating_system", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter(name="satelliteClusterWorkerPoolId")
    def satellite_cluster_worker_pool_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "satellite_cluster_worker_pool_id")

    @satellite_cluster_worker_pool_id.setter
    def satellite_cluster_worker_pool_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "satellite_cluster_worker_pool_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['SatelliteClusterWorkerPoolTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['SatelliteClusterWorkerPoolTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="workerCount")
    def worker_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specify the desired number of workers per zone in this worker pool
        """
        return pulumi.get(self, "worker_count")

    @worker_count.setter
    def worker_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "worker_count", value)

    @_builtins.property
    @pulumi.getter(name="workerPoolLabels")
    def worker_pool_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Labels on all the workers in the worker pool
        """
        return pulumi.get(self, "worker_pool_labels")

    @worker_pool_labels.setter
    def worker_pool_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "worker_pool_labels", value)

    @_builtins.property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SatelliteClusterWorkerPoolZoneArgs']]]]:
        """
        Zone info for worker pool
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SatelliteClusterWorkerPoolZoneArgs']]]]):
        pulumi.set(self, "zones", value)


@pulumi.type_token("ibm:index/satelliteClusterWorkerPool:SatelliteClusterWorkerPool")
class SatelliteClusterWorkerPool(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 disk_encryption: Optional[pulumi.Input[_builtins.bool]] = None,
                 entitlement: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor: Optional[pulumi.Input[_builtins.str]] = None,
                 host_labels: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 isolation: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 operating_system: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 satellite_cluster_worker_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['SatelliteClusterWorkerPoolTimeoutsArgs', 'SatelliteClusterWorkerPoolTimeoutsArgsDict']]] = None,
                 worker_count: Optional[pulumi.Input[_builtins.float]] = None,
                 worker_pool_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SatelliteClusterWorkerPoolZoneArgs', 'SatelliteClusterWorkerPoolZoneArgsDict']]]]] = None,
                 __props__=None):
        """
        Create a SatelliteClusterWorkerPool resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster: The unique name for the new IBM Cloud Satellite cluster
        :param pulumi.Input[_builtins.bool] disk_encryption: Disk encryption for worker node
        :param pulumi.Input[_builtins.str] entitlement: Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        :param pulumi.Input[_builtins.str] flavor: The flavor defines the amount of virtual CPU, memory, and disk space that is set up in each worker node
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] host_labels: Labels that describe a Satellite host
        :param pulumi.Input[_builtins.str] name: The name for the worker pool
        :param pulumi.Input[_builtins.str] operating_system: Operating system of the worker pool. Options are REDHAT_7_64, REDHAT_8_64, or RHCOS.
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.float] worker_count: Specify the desired number of workers per zone in this worker pool
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] worker_pool_labels: Labels on all the workers in the worker pool
        :param pulumi.Input[Sequence[pulumi.Input[Union['SatelliteClusterWorkerPoolZoneArgs', 'SatelliteClusterWorkerPoolZoneArgsDict']]]] zones: Zone info for worker pool
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SatelliteClusterWorkerPoolArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SatelliteClusterWorkerPool resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SatelliteClusterWorkerPoolArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SatelliteClusterWorkerPoolArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 disk_encryption: Optional[pulumi.Input[_builtins.bool]] = None,
                 entitlement: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor: Optional[pulumi.Input[_builtins.str]] = None,
                 host_labels: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 isolation: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 operating_system: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 satellite_cluster_worker_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['SatelliteClusterWorkerPoolTimeoutsArgs', 'SatelliteClusterWorkerPoolTimeoutsArgsDict']]] = None,
                 worker_count: Optional[pulumi.Input[_builtins.float]] = None,
                 worker_pool_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SatelliteClusterWorkerPoolZoneArgs', 'SatelliteClusterWorkerPoolZoneArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SatelliteClusterWorkerPoolArgs.__new__(SatelliteClusterWorkerPoolArgs)

            if cluster is None and not opts.urn:
                raise TypeError("Missing required property 'cluster'")
            __props__.__dict__["cluster"] = cluster
            __props__.__dict__["disk_encryption"] = disk_encryption
            __props__.__dict__["entitlement"] = entitlement
            __props__.__dict__["flavor"] = flavor
            __props__.__dict__["host_labels"] = host_labels
            __props__.__dict__["isolation"] = isolation
            __props__.__dict__["name"] = name
            __props__.__dict__["operating_system"] = operating_system
            __props__.__dict__["resource_group_id"] = resource_group_id
            __props__.__dict__["satellite_cluster_worker_pool_id"] = satellite_cluster_worker_pool_id
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["worker_count"] = worker_count
            __props__.__dict__["worker_pool_labels"] = worker_pool_labels
            __props__.__dict__["zones"] = zones
        super(SatelliteClusterWorkerPool, __self__).__init__(
            'ibm:index/satelliteClusterWorkerPool:SatelliteClusterWorkerPool',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster: Optional[pulumi.Input[_builtins.str]] = None,
            disk_encryption: Optional[pulumi.Input[_builtins.bool]] = None,
            entitlement: Optional[pulumi.Input[_builtins.str]] = None,
            flavor: Optional[pulumi.Input[_builtins.str]] = None,
            host_labels: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            isolation: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            operating_system: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            satellite_cluster_worker_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['SatelliteClusterWorkerPoolTimeoutsArgs', 'SatelliteClusterWorkerPoolTimeoutsArgsDict']]] = None,
            worker_count: Optional[pulumi.Input[_builtins.float]] = None,
            worker_pool_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            zones: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SatelliteClusterWorkerPoolZoneArgs', 'SatelliteClusterWorkerPoolZoneArgsDict']]]]] = None) -> 'SatelliteClusterWorkerPool':
        """
        Get an existing SatelliteClusterWorkerPool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster: The unique name for the new IBM Cloud Satellite cluster
        :param pulumi.Input[_builtins.bool] disk_encryption: Disk encryption for worker node
        :param pulumi.Input[_builtins.str] entitlement: Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        :param pulumi.Input[_builtins.str] flavor: The flavor defines the amount of virtual CPU, memory, and disk space that is set up in each worker node
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] host_labels: Labels that describe a Satellite host
        :param pulumi.Input[_builtins.str] name: The name for the worker pool
        :param pulumi.Input[_builtins.str] operating_system: Operating system of the worker pool. Options are REDHAT_7_64, REDHAT_8_64, or RHCOS.
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.float] worker_count: Specify the desired number of workers per zone in this worker pool
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] worker_pool_labels: Labels on all the workers in the worker pool
        :param pulumi.Input[Sequence[pulumi.Input[Union['SatelliteClusterWorkerPoolZoneArgs', 'SatelliteClusterWorkerPoolZoneArgsDict']]]] zones: Zone info for worker pool
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SatelliteClusterWorkerPoolState.__new__(_SatelliteClusterWorkerPoolState)

        __props__.__dict__["cluster"] = cluster
        __props__.__dict__["disk_encryption"] = disk_encryption
        __props__.__dict__["entitlement"] = entitlement
        __props__.__dict__["flavor"] = flavor
        __props__.__dict__["host_labels"] = host_labels
        __props__.__dict__["isolation"] = isolation
        __props__.__dict__["name"] = name
        __props__.__dict__["operating_system"] = operating_system
        __props__.__dict__["resource_group_id"] = resource_group_id
        __props__.__dict__["satellite_cluster_worker_pool_id"] = satellite_cluster_worker_pool_id
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["worker_count"] = worker_count
        __props__.__dict__["worker_pool_labels"] = worker_pool_labels
        __props__.__dict__["zones"] = zones
        return SatelliteClusterWorkerPool(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> pulumi.Output[_builtins.str]:
        """
        The unique name for the new IBM Cloud Satellite cluster
        """
        return pulumi.get(self, "cluster")

    @_builtins.property
    @pulumi.getter(name="diskEncryption")
    def disk_encryption(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Disk encryption for worker node
        """
        return pulumi.get(self, "disk_encryption")

    @_builtins.property
    @pulumi.getter
    def entitlement(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Entitlement option reduces additional OCP Licence cost in Openshift Clusters
        """
        return pulumi.get(self, "entitlement")

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> pulumi.Output[_builtins.str]:
        """
        The flavor defines the amount of virtual CPU, memory, and disk space that is set up in each worker node
        """
        return pulumi.get(self, "flavor")

    @_builtins.property
    @pulumi.getter(name="hostLabels")
    def host_labels(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Labels that describe a Satellite host
        """
        return pulumi.get(self, "host_labels")

    @_builtins.property
    @pulumi.getter
    def isolation(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "isolation")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name for the worker pool
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> pulumi.Output[_builtins.str]:
        """
        Operating system of the worker pool. Options are REDHAT_7_64, REDHAT_8_64, or RHCOS.
        """
        return pulumi.get(self, "operating_system")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter(name="satelliteClusterWorkerPoolId")
    def satellite_cluster_worker_pool_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "satellite_cluster_worker_pool_id")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.SatelliteClusterWorkerPoolTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter(name="workerCount")
    def worker_count(self) -> pulumi.Output[_builtins.float]:
        """
        Specify the desired number of workers per zone in this worker pool
        """
        return pulumi.get(self, "worker_count")

    @_builtins.property
    @pulumi.getter(name="workerPoolLabels")
    def worker_pool_labels(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Labels on all the workers in the worker pool
        """
        return pulumi.get(self, "worker_pool_labels")

    @_builtins.property
    @pulumi.getter
    def zones(self) -> pulumi.Output[Optional[Sequence['outputs.SatelliteClusterWorkerPoolZone']]]:
        """
        Zone info for worker pool
        """
        return pulumi.get(self, "zones")

