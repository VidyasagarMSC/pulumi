# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ContainerAlbCreateArgs', 'ContainerAlbCreate']

@pulumi.input_type
class ContainerAlbCreateArgs:
    def __init__(__self__, *,
                 alb_type: pulumi.Input[_builtins.str],
                 cluster: pulumi.Input[_builtins.str],
                 vlan_id: pulumi.Input[_builtins.str],
                 zone: pulumi.Input[_builtins.str],
                 container_alb_create_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 ingress_image: Optional[pulumi.Input[_builtins.str]] = None,
                 ip: Optional[pulumi.Input[_builtins.str]] = None,
                 nlb_version: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['ContainerAlbCreateTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a ContainerAlbCreate resource.
        :param pulumi.Input[_builtins.str] alb_type: The type of ALB that you want to create.
        :param pulumi.Input[_builtins.str] cluster: The ID of the cluster that the ALB belongs to.
        :param pulumi.Input[_builtins.str] vlan_id: The VLAN ID that you want to use for your ALBs.
        :param pulumi.Input[_builtins.str] zone: The zone where you want to deploy the ALB.
        :param pulumi.Input[_builtins.bool] enable: If set to true, the ALB is enabled by default.
        :param pulumi.Input[_builtins.str] ingress_image: The type of Ingress image that you want to use for your ALB deployment.
        :param pulumi.Input[_builtins.str] ip: The IP address that you want to assign to the ALB.
        :param pulumi.Input[_builtins.str] nlb_version: The version of the network load balancer that you want to use for the ALB.
        """
        pulumi.set(__self__, "alb_type", alb_type)
        pulumi.set(__self__, "cluster", cluster)
        pulumi.set(__self__, "vlan_id", vlan_id)
        pulumi.set(__self__, "zone", zone)
        if container_alb_create_id is not None:
            pulumi.set(__self__, "container_alb_create_id", container_alb_create_id)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if ingress_image is not None:
            pulumi.set(__self__, "ingress_image", ingress_image)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if nlb_version is not None:
            pulumi.set(__self__, "nlb_version", nlb_version)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="albType")
    def alb_type(self) -> pulumi.Input[_builtins.str]:
        """
        The type of ALB that you want to create.
        """
        return pulumi.get(self, "alb_type")

    @alb_type.setter
    def alb_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "alb_type", value)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the cluster that the ALB belongs to.
        """
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster", value)

    @_builtins.property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> pulumi.Input[_builtins.str]:
        """
        The VLAN ID that you want to use for your ALBs.
        """
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vlan_id", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> pulumi.Input[_builtins.str]:
        """
        The zone where you want to deploy the ALB.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "zone", value)

    @_builtins.property
    @pulumi.getter(name="containerAlbCreateId")
    def container_alb_create_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_alb_create_id")

    @container_alb_create_id.setter
    def container_alb_create_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_alb_create_id", value)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, the ALB is enabled by default.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable", value)

    @_builtins.property
    @pulumi.getter(name="ingressImage")
    def ingress_image(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of Ingress image that you want to use for your ALB deployment.
        """
        return pulumi.get(self, "ingress_image")

    @ingress_image.setter
    def ingress_image(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ingress_image", value)

    @_builtins.property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IP address that you want to assign to the ALB.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip", value)

    @_builtins.property
    @pulumi.getter(name="nlbVersion")
    def nlb_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The version of the network load balancer that you want to use for the ALB.
        """
        return pulumi.get(self, "nlb_version")

    @nlb_version.setter
    def nlb_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nlb_version", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ContainerAlbCreateTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ContainerAlbCreateTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _ContainerAlbCreateState:
    def __init__(__self__, *,
                 alb_id: Optional[pulumi.Input[_builtins.str]] = None,
                 alb_type: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 container_alb_create_id: Optional[pulumi.Input[_builtins.str]] = None,
                 disable_deployment: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 ingress_image: Optional[pulumi.Input[_builtins.str]] = None,
                 ip: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 nlb_version: Optional[pulumi.Input[_builtins.str]] = None,
                 replicas: Optional[pulumi.Input[_builtins.str]] = None,
                 resize: Optional[pulumi.Input[_builtins.bool]] = None,
                 timeouts: Optional[pulumi.Input['ContainerAlbCreateTimeoutsArgs']] = None,
                 user_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 vlan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ContainerAlbCreate resources.
        :param pulumi.Input[_builtins.str] alb_id: The ID of the application load balancer (ALB).
        :param pulumi.Input[_builtins.str] alb_type: The type of ALB that you want to create.
        :param pulumi.Input[_builtins.str] cluster: The ID of the cluster that the ALB belongs to.
        :param pulumi.Input[_builtins.bool] disable_deployment: Set to true if ALB needs to be disabled
        :param pulumi.Input[_builtins.bool] enable: If set to true, the ALB is enabled by default.
        :param pulumi.Input[_builtins.str] ingress_image: The type of Ingress image that you want to use for your ALB deployment.
        :param pulumi.Input[_builtins.str] ip: The IP address that you want to assign to the ALB.
        :param pulumi.Input[_builtins.str] name: ALB name
        :param pulumi.Input[_builtins.str] nlb_version: The version of the network load balancer that you want to use for the ALB.
        :param pulumi.Input[_builtins.str] replicas: number of instances
        :param pulumi.Input[_builtins.bool] resize: resize
        :param pulumi.Input[_builtins.str] user_ip: IP assigned by the user
        :param pulumi.Input[_builtins.str] vlan_id: The VLAN ID that you want to use for your ALBs.
        :param pulumi.Input[_builtins.str] zone: The zone where you want to deploy the ALB.
        """
        if alb_id is not None:
            pulumi.set(__self__, "alb_id", alb_id)
        if alb_type is not None:
            pulumi.set(__self__, "alb_type", alb_type)
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if container_alb_create_id is not None:
            pulumi.set(__self__, "container_alb_create_id", container_alb_create_id)
        if disable_deployment is not None:
            pulumi.set(__self__, "disable_deployment", disable_deployment)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if ingress_image is not None:
            pulumi.set(__self__, "ingress_image", ingress_image)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nlb_version is not None:
            pulumi.set(__self__, "nlb_version", nlb_version)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if resize is not None:
            pulumi.set(__self__, "resize", resize)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if user_ip is not None:
            pulumi.set(__self__, "user_ip", user_ip)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter(name="albId")
    def alb_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the application load balancer (ALB).
        """
        return pulumi.get(self, "alb_id")

    @alb_id.setter
    def alb_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alb_id", value)

    @_builtins.property
    @pulumi.getter(name="albType")
    def alb_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of ALB that you want to create.
        """
        return pulumi.get(self, "alb_type")

    @alb_type.setter
    def alb_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alb_type", value)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the cluster that the ALB belongs to.
        """
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster", value)

    @_builtins.property
    @pulumi.getter(name="containerAlbCreateId")
    def container_alb_create_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_alb_create_id")

    @container_alb_create_id.setter
    def container_alb_create_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_alb_create_id", value)

    @_builtins.property
    @pulumi.getter(name="disableDeployment")
    def disable_deployment(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set to true if ALB needs to be disabled
        """
        return pulumi.get(self, "disable_deployment")

    @disable_deployment.setter
    def disable_deployment(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disable_deployment", value)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, the ALB is enabled by default.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable", value)

    @_builtins.property
    @pulumi.getter(name="ingressImage")
    def ingress_image(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of Ingress image that you want to use for your ALB deployment.
        """
        return pulumi.get(self, "ingress_image")

    @ingress_image.setter
    def ingress_image(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ingress_image", value)

    @_builtins.property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IP address that you want to assign to the ALB.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ALB name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nlbVersion")
    def nlb_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The version of the network load balancer that you want to use for the ALB.
        """
        return pulumi.get(self, "nlb_version")

    @nlb_version.setter
    def nlb_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nlb_version", value)

    @_builtins.property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        number of instances
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "replicas", value)

    @_builtins.property
    @pulumi.getter
    def resize(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        resize
        """
        return pulumi.get(self, "resize")

    @resize.setter
    def resize(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "resize", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ContainerAlbCreateTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ContainerAlbCreateTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="userIp")
    def user_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP assigned by the user
        """
        return pulumi.get(self, "user_ip")

    @user_ip.setter
    def user_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_ip", value)

    @_builtins.property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The VLAN ID that you want to use for your ALBs.
        """
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vlan_id", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The zone where you want to deploy the ALB.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zone", value)


@pulumi.type_token("ibm:index/containerAlbCreate:ContainerAlbCreate")
class ContainerAlbCreate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alb_type: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 container_alb_create_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 ingress_image: Optional[pulumi.Input[_builtins.str]] = None,
                 ip: Optional[pulumi.Input[_builtins.str]] = None,
                 nlb_version: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['ContainerAlbCreateTimeoutsArgs', 'ContainerAlbCreateTimeoutsArgsDict']]] = None,
                 vlan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a ContainerAlbCreate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] alb_type: The type of ALB that you want to create.
        :param pulumi.Input[_builtins.str] cluster: The ID of the cluster that the ALB belongs to.
        :param pulumi.Input[_builtins.bool] enable: If set to true, the ALB is enabled by default.
        :param pulumi.Input[_builtins.str] ingress_image: The type of Ingress image that you want to use for your ALB deployment.
        :param pulumi.Input[_builtins.str] ip: The IP address that you want to assign to the ALB.
        :param pulumi.Input[_builtins.str] nlb_version: The version of the network load balancer that you want to use for the ALB.
        :param pulumi.Input[_builtins.str] vlan_id: The VLAN ID that you want to use for your ALBs.
        :param pulumi.Input[_builtins.str] zone: The zone where you want to deploy the ALB.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ContainerAlbCreateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ContainerAlbCreate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ContainerAlbCreateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ContainerAlbCreateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alb_type: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 container_alb_create_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 ingress_image: Optional[pulumi.Input[_builtins.str]] = None,
                 ip: Optional[pulumi.Input[_builtins.str]] = None,
                 nlb_version: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['ContainerAlbCreateTimeoutsArgs', 'ContainerAlbCreateTimeoutsArgsDict']]] = None,
                 vlan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ContainerAlbCreateArgs.__new__(ContainerAlbCreateArgs)

            if alb_type is None and not opts.urn:
                raise TypeError("Missing required property 'alb_type'")
            __props__.__dict__["alb_type"] = alb_type
            if cluster is None and not opts.urn:
                raise TypeError("Missing required property 'cluster'")
            __props__.__dict__["cluster"] = cluster
            __props__.__dict__["container_alb_create_id"] = container_alb_create_id
            __props__.__dict__["enable"] = enable
            __props__.__dict__["ingress_image"] = ingress_image
            __props__.__dict__["ip"] = ip
            __props__.__dict__["nlb_version"] = nlb_version
            __props__.__dict__["timeouts"] = timeouts
            if vlan_id is None and not opts.urn:
                raise TypeError("Missing required property 'vlan_id'")
            __props__.__dict__["vlan_id"] = vlan_id
            if zone is None and not opts.urn:
                raise TypeError("Missing required property 'zone'")
            __props__.__dict__["zone"] = zone
            __props__.__dict__["alb_id"] = None
            __props__.__dict__["disable_deployment"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["replicas"] = None
            __props__.__dict__["resize"] = None
            __props__.__dict__["user_ip"] = None
        super(ContainerAlbCreate, __self__).__init__(
            'ibm:index/containerAlbCreate:ContainerAlbCreate',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alb_id: Optional[pulumi.Input[_builtins.str]] = None,
            alb_type: Optional[pulumi.Input[_builtins.str]] = None,
            cluster: Optional[pulumi.Input[_builtins.str]] = None,
            container_alb_create_id: Optional[pulumi.Input[_builtins.str]] = None,
            disable_deployment: Optional[pulumi.Input[_builtins.bool]] = None,
            enable: Optional[pulumi.Input[_builtins.bool]] = None,
            ingress_image: Optional[pulumi.Input[_builtins.str]] = None,
            ip: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            nlb_version: Optional[pulumi.Input[_builtins.str]] = None,
            replicas: Optional[pulumi.Input[_builtins.str]] = None,
            resize: Optional[pulumi.Input[_builtins.bool]] = None,
            timeouts: Optional[pulumi.Input[Union['ContainerAlbCreateTimeoutsArgs', 'ContainerAlbCreateTimeoutsArgsDict']]] = None,
            user_ip: Optional[pulumi.Input[_builtins.str]] = None,
            vlan_id: Optional[pulumi.Input[_builtins.str]] = None,
            zone: Optional[pulumi.Input[_builtins.str]] = None) -> 'ContainerAlbCreate':
        """
        Get an existing ContainerAlbCreate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] alb_id: The ID of the application load balancer (ALB).
        :param pulumi.Input[_builtins.str] alb_type: The type of ALB that you want to create.
        :param pulumi.Input[_builtins.str] cluster: The ID of the cluster that the ALB belongs to.
        :param pulumi.Input[_builtins.bool] disable_deployment: Set to true if ALB needs to be disabled
        :param pulumi.Input[_builtins.bool] enable: If set to true, the ALB is enabled by default.
        :param pulumi.Input[_builtins.str] ingress_image: The type of Ingress image that you want to use for your ALB deployment.
        :param pulumi.Input[_builtins.str] ip: The IP address that you want to assign to the ALB.
        :param pulumi.Input[_builtins.str] name: ALB name
        :param pulumi.Input[_builtins.str] nlb_version: The version of the network load balancer that you want to use for the ALB.
        :param pulumi.Input[_builtins.str] replicas: number of instances
        :param pulumi.Input[_builtins.bool] resize: resize
        :param pulumi.Input[_builtins.str] user_ip: IP assigned by the user
        :param pulumi.Input[_builtins.str] vlan_id: The VLAN ID that you want to use for your ALBs.
        :param pulumi.Input[_builtins.str] zone: The zone where you want to deploy the ALB.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ContainerAlbCreateState.__new__(_ContainerAlbCreateState)

        __props__.__dict__["alb_id"] = alb_id
        __props__.__dict__["alb_type"] = alb_type
        __props__.__dict__["cluster"] = cluster
        __props__.__dict__["container_alb_create_id"] = container_alb_create_id
        __props__.__dict__["disable_deployment"] = disable_deployment
        __props__.__dict__["enable"] = enable
        __props__.__dict__["ingress_image"] = ingress_image
        __props__.__dict__["ip"] = ip
        __props__.__dict__["name"] = name
        __props__.__dict__["nlb_version"] = nlb_version
        __props__.__dict__["replicas"] = replicas
        __props__.__dict__["resize"] = resize
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["user_ip"] = user_ip
        __props__.__dict__["vlan_id"] = vlan_id
        __props__.__dict__["zone"] = zone
        return ContainerAlbCreate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="albId")
    def alb_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the application load balancer (ALB).
        """
        return pulumi.get(self, "alb_id")

    @_builtins.property
    @pulumi.getter(name="albType")
    def alb_type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of ALB that you want to create.
        """
        return pulumi.get(self, "alb_type")

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the cluster that the ALB belongs to.
        """
        return pulumi.get(self, "cluster")

    @_builtins.property
    @pulumi.getter(name="containerAlbCreateId")
    def container_alb_create_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "container_alb_create_id")

    @_builtins.property
    @pulumi.getter(name="disableDeployment")
    def disable_deployment(self) -> pulumi.Output[_builtins.bool]:
        """
        Set to true if ALB needs to be disabled
        """
        return pulumi.get(self, "disable_deployment")

    @_builtins.property
    @pulumi.getter
    def enable(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        If set to true, the ALB is enabled by default.
        """
        return pulumi.get(self, "enable")

    @_builtins.property
    @pulumi.getter(name="ingressImage")
    def ingress_image(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The type of Ingress image that you want to use for your ALB deployment.
        """
        return pulumi.get(self, "ingress_image")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The IP address that you want to assign to the ALB.
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        ALB name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nlbVersion")
    def nlb_version(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The version of the network load balancer that you want to use for the ALB.
        """
        return pulumi.get(self, "nlb_version")

    @_builtins.property
    @pulumi.getter
    def replicas(self) -> pulumi.Output[_builtins.str]:
        """
        number of instances
        """
        return pulumi.get(self, "replicas")

    @_builtins.property
    @pulumi.getter
    def resize(self) -> pulumi.Output[_builtins.bool]:
        """
        resize
        """
        return pulumi.get(self, "resize")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.ContainerAlbCreateTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter(name="userIp")
    def user_ip(self) -> pulumi.Output[_builtins.str]:
        """
        IP assigned by the user
        """
        return pulumi.get(self, "user_ip")

    @_builtins.property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> pulumi.Output[_builtins.str]:
        """
        The VLAN ID that you want to use for your ALBs.
        """
        return pulumi.get(self, "vlan_id")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> pulumi.Output[_builtins.str]:
        """
        The zone where you want to deploy the ALB.
        """
        return pulumi.get(self, "zone")

