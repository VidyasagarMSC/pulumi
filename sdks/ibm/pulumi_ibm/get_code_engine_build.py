# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCodeEngineBuildResult',
    'AwaitableGetCodeEngineBuildResult',
    'get_code_engine_build',
    'get_code_engine_build_output',
]

@pulumi.output_type
class GetCodeEngineBuildResult:
    """
    A collection of values returned by getCodeEngineBuild.
    """
    def __init__(__self__, build_id=None, created_at=None, entity_tag=None, href=None, id=None, name=None, output_image=None, output_secret=None, project_id=None, region=None, resource_type=None, source_context_dir=None, source_revision=None, source_secret=None, source_type=None, source_url=None, status=None, status_details=None, strategy_size=None, strategy_spec_file=None, strategy_type=None, timeout=None):
        if build_id and not isinstance(build_id, str):
            raise TypeError("Expected argument 'build_id' to be a str")
        pulumi.set(__self__, "build_id", build_id)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if entity_tag and not isinstance(entity_tag, str):
            raise TypeError("Expected argument 'entity_tag' to be a str")
        pulumi.set(__self__, "entity_tag", entity_tag)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if output_image and not isinstance(output_image, str):
            raise TypeError("Expected argument 'output_image' to be a str")
        pulumi.set(__self__, "output_image", output_image)
        if output_secret and not isinstance(output_secret, str):
            raise TypeError("Expected argument 'output_secret' to be a str")
        pulumi.set(__self__, "output_secret", output_secret)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if source_context_dir and not isinstance(source_context_dir, str):
            raise TypeError("Expected argument 'source_context_dir' to be a str")
        pulumi.set(__self__, "source_context_dir", source_context_dir)
        if source_revision and not isinstance(source_revision, str):
            raise TypeError("Expected argument 'source_revision' to be a str")
        pulumi.set(__self__, "source_revision", source_revision)
        if source_secret and not isinstance(source_secret, str):
            raise TypeError("Expected argument 'source_secret' to be a str")
        pulumi.set(__self__, "source_secret", source_secret)
        if source_type and not isinstance(source_type, str):
            raise TypeError("Expected argument 'source_type' to be a str")
        pulumi.set(__self__, "source_type", source_type)
        if source_url and not isinstance(source_url, str):
            raise TypeError("Expected argument 'source_url' to be a str")
        pulumi.set(__self__, "source_url", source_url)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if status_details and not isinstance(status_details, list):
            raise TypeError("Expected argument 'status_details' to be a list")
        pulumi.set(__self__, "status_details", status_details)
        if strategy_size and not isinstance(strategy_size, str):
            raise TypeError("Expected argument 'strategy_size' to be a str")
        pulumi.set(__self__, "strategy_size", strategy_size)
        if strategy_spec_file and not isinstance(strategy_spec_file, str):
            raise TypeError("Expected argument 'strategy_spec_file' to be a str")
        pulumi.set(__self__, "strategy_spec_file", strategy_spec_file)
        if strategy_type and not isinstance(strategy_type, str):
            raise TypeError("Expected argument 'strategy_type' to be a str")
        pulumi.set(__self__, "strategy_type", strategy_type)
        if timeout and not isinstance(timeout, float):
            raise TypeError("Expected argument 'timeout' to be a float")
        pulumi.set(__self__, "timeout", timeout)

    @_builtins.property
    @pulumi.getter(name="buildId")
    def build_id(self) -> _builtins.str:
        return pulumi.get(self, "build_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="entityTag")
    def entity_tag(self) -> _builtins.str:
        return pulumi.get(self, "entity_tag")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="outputImage")
    def output_image(self) -> _builtins.str:
        return pulumi.get(self, "output_image")

    @_builtins.property
    @pulumi.getter(name="outputSecret")
    def output_secret(self) -> _builtins.str:
        return pulumi.get(self, "output_secret")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="sourceContextDir")
    def source_context_dir(self) -> _builtins.str:
        return pulumi.get(self, "source_context_dir")

    @_builtins.property
    @pulumi.getter(name="sourceRevision")
    def source_revision(self) -> _builtins.str:
        return pulumi.get(self, "source_revision")

    @_builtins.property
    @pulumi.getter(name="sourceSecret")
    def source_secret(self) -> _builtins.str:
        return pulumi.get(self, "source_secret")

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> _builtins.str:
        return pulumi.get(self, "source_type")

    @_builtins.property
    @pulumi.getter(name="sourceUrl")
    def source_url(self) -> _builtins.str:
        return pulumi.get(self, "source_url")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> Sequence['outputs.GetCodeEngineBuildStatusDetailResult']:
        return pulumi.get(self, "status_details")

    @_builtins.property
    @pulumi.getter(name="strategySize")
    def strategy_size(self) -> _builtins.str:
        return pulumi.get(self, "strategy_size")

    @_builtins.property
    @pulumi.getter(name="strategySpecFile")
    def strategy_spec_file(self) -> _builtins.str:
        return pulumi.get(self, "strategy_spec_file")

    @_builtins.property
    @pulumi.getter(name="strategyType")
    def strategy_type(self) -> _builtins.str:
        return pulumi.get(self, "strategy_type")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> _builtins.float:
        return pulumi.get(self, "timeout")


class AwaitableGetCodeEngineBuildResult(GetCodeEngineBuildResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCodeEngineBuildResult(
            build_id=self.build_id,
            created_at=self.created_at,
            entity_tag=self.entity_tag,
            href=self.href,
            id=self.id,
            name=self.name,
            output_image=self.output_image,
            output_secret=self.output_secret,
            project_id=self.project_id,
            region=self.region,
            resource_type=self.resource_type,
            source_context_dir=self.source_context_dir,
            source_revision=self.source_revision,
            source_secret=self.source_secret,
            source_type=self.source_type,
            source_url=self.source_url,
            status=self.status,
            status_details=self.status_details,
            strategy_size=self.strategy_size,
            strategy_spec_file=self.strategy_spec_file,
            strategy_type=self.strategy_type,
            timeout=self.timeout)


def get_code_engine_build(id: Optional[_builtins.str] = None,
                          name: Optional[_builtins.str] = None,
                          project_id: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCodeEngineBuildResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCodeEngineBuild:getCodeEngineBuild', __args__, opts=opts, typ=GetCodeEngineBuildResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCodeEngineBuildResult(
        build_id=pulumi.get(__ret__, 'build_id'),
        created_at=pulumi.get(__ret__, 'created_at'),
        entity_tag=pulumi.get(__ret__, 'entity_tag'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        output_image=pulumi.get(__ret__, 'output_image'),
        output_secret=pulumi.get(__ret__, 'output_secret'),
        project_id=pulumi.get(__ret__, 'project_id'),
        region=pulumi.get(__ret__, 'region'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        source_context_dir=pulumi.get(__ret__, 'source_context_dir'),
        source_revision=pulumi.get(__ret__, 'source_revision'),
        source_secret=pulumi.get(__ret__, 'source_secret'),
        source_type=pulumi.get(__ret__, 'source_type'),
        source_url=pulumi.get(__ret__, 'source_url'),
        status=pulumi.get(__ret__, 'status'),
        status_details=pulumi.get(__ret__, 'status_details'),
        strategy_size=pulumi.get(__ret__, 'strategy_size'),
        strategy_spec_file=pulumi.get(__ret__, 'strategy_spec_file'),
        strategy_type=pulumi.get(__ret__, 'strategy_type'),
        timeout=pulumi.get(__ret__, 'timeout'))
def get_code_engine_build_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 name: Optional[pulumi.Input[_builtins.str]] = None,
                                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCodeEngineBuildResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCodeEngineBuild:getCodeEngineBuild', __args__, opts=opts, typ=GetCodeEngineBuildResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCodeEngineBuildResult(
        build_id=pulumi.get(__response__, 'build_id'),
        created_at=pulumi.get(__response__, 'created_at'),
        entity_tag=pulumi.get(__response__, 'entity_tag'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        output_image=pulumi.get(__response__, 'output_image'),
        output_secret=pulumi.get(__response__, 'output_secret'),
        project_id=pulumi.get(__response__, 'project_id'),
        region=pulumi.get(__response__, 'region'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        source_context_dir=pulumi.get(__response__, 'source_context_dir'),
        source_revision=pulumi.get(__response__, 'source_revision'),
        source_secret=pulumi.get(__response__, 'source_secret'),
        source_type=pulumi.get(__response__, 'source_type'),
        source_url=pulumi.get(__response__, 'source_url'),
        status=pulumi.get(__response__, 'status'),
        status_details=pulumi.get(__response__, 'status_details'),
        strategy_size=pulumi.get(__response__, 'strategy_size'),
        strategy_spec_file=pulumi.get(__response__, 'strategy_spec_file'),
        strategy_type=pulumi.get(__response__, 'strategy_type'),
        timeout=pulumi.get(__response__, 'timeout')))
