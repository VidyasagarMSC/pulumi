# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['AppidPasswordRegexArgs', 'AppidPasswordRegex']

@pulumi.input_type
class AppidPasswordRegexArgs:
    def __init__(__self__, *,
                 regex: pulumi.Input[_builtins.str],
                 tenant_id: pulumi.Input[_builtins.str],
                 appid_password_regex_id: Optional[pulumi.Input[_builtins.str]] = None,
                 error_message: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AppidPasswordRegex resource.
        :param pulumi.Input[_builtins.str] regex: The escaped regex expression rule for acceptable password
        :param pulumi.Input[_builtins.str] tenant_id: The service `tenantId`
        :param pulumi.Input[_builtins.str] error_message: Custom error message
        """
        pulumi.set(__self__, "regex", regex)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if appid_password_regex_id is not None:
            pulumi.set(__self__, "appid_password_regex_id", appid_password_regex_id)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)

    @_builtins.property
    @pulumi.getter
    def regex(self) -> pulumi.Input[_builtins.str]:
        """
        The escaped regex expression rule for acceptable password
        """
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "regex", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[_builtins.str]:
        """
        The service `tenantId`
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "tenant_id", value)

    @_builtins.property
    @pulumi.getter(name="appidPasswordRegexId")
    def appid_password_regex_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "appid_password_regex_id")

    @appid_password_regex_id.setter
    def appid_password_regex_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "appid_password_regex_id", value)

    @_builtins.property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Custom error message
        """
        return pulumi.get(self, "error_message")

    @error_message.setter
    def error_message(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "error_message", value)


@pulumi.input_type
class _AppidPasswordRegexState:
    def __init__(__self__, *,
                 appid_password_regex_id: Optional[pulumi.Input[_builtins.str]] = None,
                 base64_encoded_regex: Optional[pulumi.Input[_builtins.str]] = None,
                 error_message: Optional[pulumi.Input[_builtins.str]] = None,
                 regex: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AppidPasswordRegex resources.
        :param pulumi.Input[_builtins.str] base64_encoded_regex: The regex expression rule for acceptable password encoded in base64
        :param pulumi.Input[_builtins.str] error_message: Custom error message
        :param pulumi.Input[_builtins.str] regex: The escaped regex expression rule for acceptable password
        :param pulumi.Input[_builtins.str] tenant_id: The service `tenantId`
        """
        if appid_password_regex_id is not None:
            pulumi.set(__self__, "appid_password_regex_id", appid_password_regex_id)
        if base64_encoded_regex is not None:
            pulumi.set(__self__, "base64_encoded_regex", base64_encoded_regex)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @_builtins.property
    @pulumi.getter(name="appidPasswordRegexId")
    def appid_password_regex_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "appid_password_regex_id")

    @appid_password_regex_id.setter
    def appid_password_regex_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "appid_password_regex_id", value)

    @_builtins.property
    @pulumi.getter(name="base64EncodedRegex")
    def base64_encoded_regex(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The regex expression rule for acceptable password encoded in base64
        """
        return pulumi.get(self, "base64_encoded_regex")

    @base64_encoded_regex.setter
    def base64_encoded_regex(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "base64_encoded_regex", value)

    @_builtins.property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Custom error message
        """
        return pulumi.get(self, "error_message")

    @error_message.setter
    def error_message(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "error_message", value)

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The escaped regex expression rule for acceptable password
        """
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "regex", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The service `tenantId`
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tenant_id", value)


@pulumi.type_token("ibm:index/appidPasswordRegex:AppidPasswordRegex")
class AppidPasswordRegex(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 appid_password_regex_id: Optional[pulumi.Input[_builtins.str]] = None,
                 error_message: Optional[pulumi.Input[_builtins.str]] = None,
                 regex: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a AppidPasswordRegex resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] error_message: Custom error message
        :param pulumi.Input[_builtins.str] regex: The escaped regex expression rule for acceptable password
        :param pulumi.Input[_builtins.str] tenant_id: The service `tenantId`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppidPasswordRegexArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AppidPasswordRegex resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AppidPasswordRegexArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppidPasswordRegexArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 appid_password_regex_id: Optional[pulumi.Input[_builtins.str]] = None,
                 error_message: Optional[pulumi.Input[_builtins.str]] = None,
                 regex: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppidPasswordRegexArgs.__new__(AppidPasswordRegexArgs)

            __props__.__dict__["appid_password_regex_id"] = appid_password_regex_id
            __props__.__dict__["error_message"] = error_message
            if regex is None and not opts.urn:
                raise TypeError("Missing required property 'regex'")
            __props__.__dict__["regex"] = regex
            if tenant_id is None and not opts.urn:
                raise TypeError("Missing required property 'tenant_id'")
            __props__.__dict__["tenant_id"] = tenant_id
            __props__.__dict__["base64_encoded_regex"] = None
        super(AppidPasswordRegex, __self__).__init__(
            'ibm:index/appidPasswordRegex:AppidPasswordRegex',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            appid_password_regex_id: Optional[pulumi.Input[_builtins.str]] = None,
            base64_encoded_regex: Optional[pulumi.Input[_builtins.str]] = None,
            error_message: Optional[pulumi.Input[_builtins.str]] = None,
            regex: Optional[pulumi.Input[_builtins.str]] = None,
            tenant_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'AppidPasswordRegex':
        """
        Get an existing AppidPasswordRegex resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] base64_encoded_regex: The regex expression rule for acceptable password encoded in base64
        :param pulumi.Input[_builtins.str] error_message: Custom error message
        :param pulumi.Input[_builtins.str] regex: The escaped regex expression rule for acceptable password
        :param pulumi.Input[_builtins.str] tenant_id: The service `tenantId`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppidPasswordRegexState.__new__(_AppidPasswordRegexState)

        __props__.__dict__["appid_password_regex_id"] = appid_password_regex_id
        __props__.__dict__["base64_encoded_regex"] = base64_encoded_regex
        __props__.__dict__["error_message"] = error_message
        __props__.__dict__["regex"] = regex
        __props__.__dict__["tenant_id"] = tenant_id
        return AppidPasswordRegex(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="appidPasswordRegexId")
    def appid_password_regex_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "appid_password_regex_id")

    @_builtins.property
    @pulumi.getter(name="base64EncodedRegex")
    def base64_encoded_regex(self) -> pulumi.Output[_builtins.str]:
        """
        The regex expression rule for acceptable password encoded in base64
        """
        return pulumi.get(self, "base64_encoded_regex")

    @_builtins.property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Custom error message
        """
        return pulumi.get(self, "error_message")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> pulumi.Output[_builtins.str]:
        """
        The escaped regex expression rule for acceptable password
        """
        return pulumi.get(self, "regex")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Output[_builtins.str]:
        """
        The service `tenantId`
        """
        return pulumi.get(self, "tenant_id")

