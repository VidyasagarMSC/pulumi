# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetFunctionActionResult',
    'AwaitableGetFunctionActionResult',
    'get_function_action',
    'get_function_action_output',
]

@pulumi.output_type
class GetFunctionActionResult:
    """
    A collection of values returned by getFunctionAction.
    """
    def __init__(__self__, action_id=None, annotations=None, execs=None, id=None, limits=None, name=None, namespace=None, parameters=None, publish=None, target_endpoint_url=None, version=None):
        if action_id and not isinstance(action_id, str):
            raise TypeError("Expected argument 'action_id' to be a str")
        pulumi.set(__self__, "action_id", action_id)
        if annotations and not isinstance(annotations, str):
            raise TypeError("Expected argument 'annotations' to be a str")
        pulumi.set(__self__, "annotations", annotations)
        if execs and not isinstance(execs, list):
            raise TypeError("Expected argument 'execs' to be a list")
        pulumi.set(__self__, "execs", execs)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if limits and not isinstance(limits, list):
            raise TypeError("Expected argument 'limits' to be a list")
        pulumi.set(__self__, "limits", limits)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        pulumi.set(__self__, "namespace", namespace)
        if parameters and not isinstance(parameters, str):
            raise TypeError("Expected argument 'parameters' to be a str")
        pulumi.set(__self__, "parameters", parameters)
        if publish and not isinstance(publish, bool):
            raise TypeError("Expected argument 'publish' to be a bool")
        pulumi.set(__self__, "publish", publish)
        if target_endpoint_url and not isinstance(target_endpoint_url, str):
            raise TypeError("Expected argument 'target_endpoint_url' to be a str")
        pulumi.set(__self__, "target_endpoint_url", target_endpoint_url)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="actionId")
    def action_id(self) -> _builtins.str:
        return pulumi.get(self, "action_id")

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> _builtins.str:
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter
    def execs(self) -> Sequence['outputs.GetFunctionActionExecResult']:
        return pulumi.get(self, "execs")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def limits(self) -> Sequence['outputs.GetFunctionActionLimitResult']:
        return pulumi.get(self, "limits")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> _builtins.str:
        return pulumi.get(self, "parameters")

    @_builtins.property
    @pulumi.getter
    def publish(self) -> _builtins.bool:
        return pulumi.get(self, "publish")

    @_builtins.property
    @pulumi.getter(name="targetEndpointUrl")
    def target_endpoint_url(self) -> _builtins.str:
        return pulumi.get(self, "target_endpoint_url")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        return pulumi.get(self, "version")


class AwaitableGetFunctionActionResult(GetFunctionActionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFunctionActionResult(
            action_id=self.action_id,
            annotations=self.annotations,
            execs=self.execs,
            id=self.id,
            limits=self.limits,
            name=self.name,
            namespace=self.namespace,
            parameters=self.parameters,
            publish=self.publish,
            target_endpoint_url=self.target_endpoint_url,
            version=self.version)


def get_function_action(id: Optional[_builtins.str] = None,
                        name: Optional[_builtins.str] = None,
                        namespace: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFunctionActionResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['namespace'] = namespace
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getFunctionAction:getFunctionAction', __args__, opts=opts, typ=GetFunctionActionResult, package_ref=_utilities.get_package()).value

    return AwaitableGetFunctionActionResult(
        action_id=pulumi.get(__ret__, 'action_id'),
        annotations=pulumi.get(__ret__, 'annotations'),
        execs=pulumi.get(__ret__, 'execs'),
        id=pulumi.get(__ret__, 'id'),
        limits=pulumi.get(__ret__, 'limits'),
        name=pulumi.get(__ret__, 'name'),
        namespace=pulumi.get(__ret__, 'namespace'),
        parameters=pulumi.get(__ret__, 'parameters'),
        publish=pulumi.get(__ret__, 'publish'),
        target_endpoint_url=pulumi.get(__ret__, 'target_endpoint_url'),
        version=pulumi.get(__ret__, 'version'))
def get_function_action_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               name: Optional[pulumi.Input[_builtins.str]] = None,
                               namespace: Optional[pulumi.Input[_builtins.str]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetFunctionActionResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['namespace'] = namespace
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getFunctionAction:getFunctionAction', __args__, opts=opts, typ=GetFunctionActionResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetFunctionActionResult(
        action_id=pulumi.get(__response__, 'action_id'),
        annotations=pulumi.get(__response__, 'annotations'),
        execs=pulumi.get(__response__, 'execs'),
        id=pulumi.get(__response__, 'id'),
        limits=pulumi.get(__response__, 'limits'),
        name=pulumi.get(__response__, 'name'),
        namespace=pulumi.get(__response__, 'namespace'),
        parameters=pulumi.get(__response__, 'parameters'),
        publish=pulumi.get(__response__, 'publish'),
        target_endpoint_url=pulumi.get(__response__, 'target_endpoint_url'),
        version=pulumi.get(__response__, 'version')))
