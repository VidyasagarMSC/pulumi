# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetResourceKeyResult',
    'AwaitableGetResourceKeyResult',
    'get_resource_key',
    'get_resource_key_output',
]

@pulumi.output_type
class GetResourceKeyResult:
    """
    A collection of values returned by getResourceKey.
    """
    def __init__(__self__, credentials=None, credentials_json=None, crn=None, id=None, most_recent=None, name=None, onetime_credentials=None, resource_alias_id=None, resource_instance_id=None, role=None, status=None):
        if credentials and not isinstance(credentials, dict):
            raise TypeError("Expected argument 'credentials' to be a dict")
        pulumi.set(__self__, "credentials", credentials)
        if credentials_json and not isinstance(credentials_json, str):
            raise TypeError("Expected argument 'credentials_json' to be a str")
        pulumi.set(__self__, "credentials_json", credentials_json)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if most_recent and not isinstance(most_recent, bool):
            raise TypeError("Expected argument 'most_recent' to be a bool")
        pulumi.set(__self__, "most_recent", most_recent)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if onetime_credentials and not isinstance(onetime_credentials, bool):
            raise TypeError("Expected argument 'onetime_credentials' to be a bool")
        pulumi.set(__self__, "onetime_credentials", onetime_credentials)
        if resource_alias_id and not isinstance(resource_alias_id, str):
            raise TypeError("Expected argument 'resource_alias_id' to be a str")
        pulumi.set(__self__, "resource_alias_id", resource_alias_id)
        if resource_instance_id and not isinstance(resource_instance_id, str):
            raise TypeError("Expected argument 'resource_instance_id' to be a str")
        pulumi.set(__self__, "resource_instance_id", resource_instance_id)
        if role and not isinstance(role, str):
            raise TypeError("Expected argument 'role' to be a str")
        pulumi.set(__self__, "role", role)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def credentials(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "credentials")

    @_builtins.property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> _builtins.str:
        return pulumi.get(self, "credentials_json")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="mostRecent")
    def most_recent(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "most_recent")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="onetimeCredentials")
    def onetime_credentials(self) -> _builtins.bool:
        return pulumi.get(self, "onetime_credentials")

    @_builtins.property
    @pulumi.getter(name="resourceAliasId")
    def resource_alias_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_alias_id")

    @_builtins.property
    @pulumi.getter(name="resourceInstanceId")
    def resource_instance_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_instance_id")

    @_builtins.property
    @pulumi.getter
    def role(self) -> _builtins.str:
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")


class AwaitableGetResourceKeyResult(GetResourceKeyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResourceKeyResult(
            credentials=self.credentials,
            credentials_json=self.credentials_json,
            crn=self.crn,
            id=self.id,
            most_recent=self.most_recent,
            name=self.name,
            onetime_credentials=self.onetime_credentials,
            resource_alias_id=self.resource_alias_id,
            resource_instance_id=self.resource_instance_id,
            role=self.role,
            status=self.status)


def get_resource_key(id: Optional[_builtins.str] = None,
                     most_recent: Optional[_builtins.bool] = None,
                     name: Optional[_builtins.str] = None,
                     resource_alias_id: Optional[_builtins.str] = None,
                     resource_instance_id: Optional[_builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResourceKeyResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['mostRecent'] = most_recent
    __args__['name'] = name
    __args__['resourceAliasId'] = resource_alias_id
    __args__['resourceInstanceId'] = resource_instance_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getResourceKey:getResourceKey', __args__, opts=opts, typ=GetResourceKeyResult, package_ref=_utilities.get_package()).value

    return AwaitableGetResourceKeyResult(
        credentials=pulumi.get(__ret__, 'credentials'),
        credentials_json=pulumi.get(__ret__, 'credentials_json'),
        crn=pulumi.get(__ret__, 'crn'),
        id=pulumi.get(__ret__, 'id'),
        most_recent=pulumi.get(__ret__, 'most_recent'),
        name=pulumi.get(__ret__, 'name'),
        onetime_credentials=pulumi.get(__ret__, 'onetime_credentials'),
        resource_alias_id=pulumi.get(__ret__, 'resource_alias_id'),
        resource_instance_id=pulumi.get(__ret__, 'resource_instance_id'),
        role=pulumi.get(__ret__, 'role'),
        status=pulumi.get(__ret__, 'status'))
def get_resource_key_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            most_recent: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                            name: Optional[pulumi.Input[_builtins.str]] = None,
                            resource_alias_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            resource_instance_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetResourceKeyResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['mostRecent'] = most_recent
    __args__['name'] = name
    __args__['resourceAliasId'] = resource_alias_id
    __args__['resourceInstanceId'] = resource_instance_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getResourceKey:getResourceKey', __args__, opts=opts, typ=GetResourceKeyResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetResourceKeyResult(
        credentials=pulumi.get(__response__, 'credentials'),
        credentials_json=pulumi.get(__response__, 'credentials_json'),
        crn=pulumi.get(__response__, 'crn'),
        id=pulumi.get(__response__, 'id'),
        most_recent=pulumi.get(__response__, 'most_recent'),
        name=pulumi.get(__response__, 'name'),
        onetime_credentials=pulumi.get(__response__, 'onetime_credentials'),
        resource_alias_id=pulumi.get(__response__, 'resource_alias_id'),
        resource_instance_id=pulumi.get(__response__, 'resource_instance_id'),
        role=pulumi.get(__response__, 'role'),
        status=pulumi.get(__response__, 'status')))
