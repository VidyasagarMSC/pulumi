# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIamAccountSettingsTemplateResult',
    'AwaitableGetIamAccountSettingsTemplateResult',
    'get_iam_account_settings_template',
    'get_iam_account_settings_template_output',
]

@pulumi.output_type
class GetIamAccountSettingsTemplateResult:
    """
    A collection of values returned by getIamAccountSettingsTemplate.
    """
    def __init__(__self__, account_id=None, account_settings=None, committed=None, created_at=None, created_by_id=None, crn=None, description=None, entity_tag=None, histories=None, id=None, include_history=None, last_modified_at=None, last_modified_by_id=None, name=None, template_id=None, version=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if account_settings and not isinstance(account_settings, list):
            raise TypeError("Expected argument 'account_settings' to be a list")
        pulumi.set(__self__, "account_settings", account_settings)
        if committed and not isinstance(committed, bool):
            raise TypeError("Expected argument 'committed' to be a bool")
        pulumi.set(__self__, "committed", committed)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if created_by_id and not isinstance(created_by_id, str):
            raise TypeError("Expected argument 'created_by_id' to be a str")
        pulumi.set(__self__, "created_by_id", created_by_id)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if entity_tag and not isinstance(entity_tag, str):
            raise TypeError("Expected argument 'entity_tag' to be a str")
        pulumi.set(__self__, "entity_tag", entity_tag)
        if histories and not isinstance(histories, list):
            raise TypeError("Expected argument 'histories' to be a list")
        pulumi.set(__self__, "histories", histories)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if include_history and not isinstance(include_history, bool):
            raise TypeError("Expected argument 'include_history' to be a bool")
        pulumi.set(__self__, "include_history", include_history)
        if last_modified_at and not isinstance(last_modified_at, str):
            raise TypeError("Expected argument 'last_modified_at' to be a str")
        pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by_id and not isinstance(last_modified_by_id, str):
            raise TypeError("Expected argument 'last_modified_by_id' to be a str")
        pulumi.set(__self__, "last_modified_by_id", last_modified_by_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if template_id and not isinstance(template_id, str):
            raise TypeError("Expected argument 'template_id' to be a str")
        pulumi.set(__self__, "template_id", template_id)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="accountSettings")
    def account_settings(self) -> Sequence['outputs.GetIamAccountSettingsTemplateAccountSettingResult']:
        return pulumi.get(self, "account_settings")

    @_builtins.property
    @pulumi.getter
    def committed(self) -> _builtins.bool:
        return pulumi.get(self, "committed")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdById")
    def created_by_id(self) -> _builtins.str:
        return pulumi.get(self, "created_by_id")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="entityTag")
    def entity_tag(self) -> _builtins.str:
        return pulumi.get(self, "entity_tag")

    @_builtins.property
    @pulumi.getter
    def histories(self) -> Sequence['outputs.GetIamAccountSettingsTemplateHistoryResult']:
        return pulumi.get(self, "histories")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="includeHistory")
    def include_history(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "include_history")

    @_builtins.property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> _builtins.str:
        return pulumi.get(self, "last_modified_at")

    @_builtins.property
    @pulumi.getter(name="lastModifiedById")
    def last_modified_by_id(self) -> _builtins.str:
        return pulumi.get(self, "last_modified_by_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> _builtins.str:
        return pulumi.get(self, "template_id")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "version")


class AwaitableGetIamAccountSettingsTemplateResult(GetIamAccountSettingsTemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamAccountSettingsTemplateResult(
            account_id=self.account_id,
            account_settings=self.account_settings,
            committed=self.committed,
            created_at=self.created_at,
            created_by_id=self.created_by_id,
            crn=self.crn,
            description=self.description,
            entity_tag=self.entity_tag,
            histories=self.histories,
            id=self.id,
            include_history=self.include_history,
            last_modified_at=self.last_modified_at,
            last_modified_by_id=self.last_modified_by_id,
            name=self.name,
            template_id=self.template_id,
            version=self.version)


def get_iam_account_settings_template(include_history: Optional[_builtins.bool] = None,
                                      template_id: Optional[_builtins.str] = None,
                                      version: Optional[_builtins.str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamAccountSettingsTemplateResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['includeHistory'] = include_history
    __args__['templateId'] = template_id
    __args__['version'] = version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIamAccountSettingsTemplate:getIamAccountSettingsTemplate', __args__, opts=opts, typ=GetIamAccountSettingsTemplateResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIamAccountSettingsTemplateResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        account_settings=pulumi.get(__ret__, 'account_settings'),
        committed=pulumi.get(__ret__, 'committed'),
        created_at=pulumi.get(__ret__, 'created_at'),
        created_by_id=pulumi.get(__ret__, 'created_by_id'),
        crn=pulumi.get(__ret__, 'crn'),
        description=pulumi.get(__ret__, 'description'),
        entity_tag=pulumi.get(__ret__, 'entity_tag'),
        histories=pulumi.get(__ret__, 'histories'),
        id=pulumi.get(__ret__, 'id'),
        include_history=pulumi.get(__ret__, 'include_history'),
        last_modified_at=pulumi.get(__ret__, 'last_modified_at'),
        last_modified_by_id=pulumi.get(__ret__, 'last_modified_by_id'),
        name=pulumi.get(__ret__, 'name'),
        template_id=pulumi.get(__ret__, 'template_id'),
        version=pulumi.get(__ret__, 'version'))
def get_iam_account_settings_template_output(include_history: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                             template_id: Optional[pulumi.Input[_builtins.str]] = None,
                                             version: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamAccountSettingsTemplateResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['includeHistory'] = include_history
    __args__['templateId'] = template_id
    __args__['version'] = version
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIamAccountSettingsTemplate:getIamAccountSettingsTemplate', __args__, opts=opts, typ=GetIamAccountSettingsTemplateResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIamAccountSettingsTemplateResult(
        account_id=pulumi.get(__response__, 'account_id'),
        account_settings=pulumi.get(__response__, 'account_settings'),
        committed=pulumi.get(__response__, 'committed'),
        created_at=pulumi.get(__response__, 'created_at'),
        created_by_id=pulumi.get(__response__, 'created_by_id'),
        crn=pulumi.get(__response__, 'crn'),
        description=pulumi.get(__response__, 'description'),
        entity_tag=pulumi.get(__response__, 'entity_tag'),
        histories=pulumi.get(__response__, 'histories'),
        id=pulumi.get(__response__, 'id'),
        include_history=pulumi.get(__response__, 'include_history'),
        last_modified_at=pulumi.get(__response__, 'last_modified_at'),
        last_modified_by_id=pulumi.get(__response__, 'last_modified_by_id'),
        name=pulumi.get(__response__, 'name'),
        template_id=pulumi.get(__response__, 'template_id'),
        version=pulumi.get(__response__, 'version')))
