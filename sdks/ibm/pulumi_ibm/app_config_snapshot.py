# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AppConfigSnapshotArgs', 'AppConfigSnapshot']

@pulumi.input_type
class AppConfigSnapshotArgs:
    def __init__(__self__, *,
                 collection_id: pulumi.Input[_builtins.str],
                 environment_id: pulumi.Input[_builtins.str],
                 git_branch: pulumi.Input[_builtins.str],
                 git_config_id: pulumi.Input[_builtins.str],
                 git_config_name: pulumi.Input[_builtins.str],
                 git_file_path: pulumi.Input[_builtins.str],
                 git_token: pulumi.Input[_builtins.str],
                 git_url: pulumi.Input[_builtins.str],
                 guid: pulumi.Input[_builtins.str],
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 app_config_snapshot_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AppConfigSnapshot resource.
        :param pulumi.Input[_builtins.str] collection_id: Collection id.
        :param pulumi.Input[_builtins.str] environment_id: Environment id.
        :param pulumi.Input[_builtins.str] git_branch: Branch name to which you need to write or update the configuration.
        :param pulumi.Input[_builtins.str] git_config_id: Git config id. Allowed special characters are dot ( . ), hyphen( - ), underscore ( _ ) only
        :param pulumi.Input[_builtins.str] git_config_name: Git config name. Allowed special characters are dot ( . ), hyphen( - ), underscore ( _ ) only
        :param pulumi.Input[_builtins.str] git_file_path: Git file path, this is a path where your configuration file will be written.
        :param pulumi.Input[_builtins.str] git_token: Git token, this needs to be provided with enough permission to write and update the file.
        :param pulumi.Input[_builtins.str] git_url: Git url which will be used to connect to the github account.
        :param pulumi.Input[_builtins.str] guid: GUID of the App Configuration service. Get it from the service instance credentials section of the dashboard.
        :param pulumi.Input[_builtins.str] action: action promote
        """
        pulumi.set(__self__, "collection_id", collection_id)
        pulumi.set(__self__, "environment_id", environment_id)
        pulumi.set(__self__, "git_branch", git_branch)
        pulumi.set(__self__, "git_config_id", git_config_id)
        pulumi.set(__self__, "git_config_name", git_config_name)
        pulumi.set(__self__, "git_file_path", git_file_path)
        pulumi.set(__self__, "git_token", git_token)
        pulumi.set(__self__, "git_url", git_url)
        pulumi.set(__self__, "guid", guid)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if app_config_snapshot_id is not None:
            pulumi.set(__self__, "app_config_snapshot_id", app_config_snapshot_id)

    @_builtins.property
    @pulumi.getter(name="collectionId")
    def collection_id(self) -> pulumi.Input[_builtins.str]:
        """
        Collection id.
        """
        return pulumi.get(self, "collection_id")

    @collection_id.setter
    def collection_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "collection_id", value)

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Input[_builtins.str]:
        """
        Environment id.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "environment_id", value)

    @_builtins.property
    @pulumi.getter(name="gitBranch")
    def git_branch(self) -> pulumi.Input[_builtins.str]:
        """
        Branch name to which you need to write or update the configuration.
        """
        return pulumi.get(self, "git_branch")

    @git_branch.setter
    def git_branch(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "git_branch", value)

    @_builtins.property
    @pulumi.getter(name="gitConfigId")
    def git_config_id(self) -> pulumi.Input[_builtins.str]:
        """
        Git config id. Allowed special characters are dot ( . ), hyphen( - ), underscore ( _ ) only
        """
        return pulumi.get(self, "git_config_id")

    @git_config_id.setter
    def git_config_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "git_config_id", value)

    @_builtins.property
    @pulumi.getter(name="gitConfigName")
    def git_config_name(self) -> pulumi.Input[_builtins.str]:
        """
        Git config name. Allowed special characters are dot ( . ), hyphen( - ), underscore ( _ ) only
        """
        return pulumi.get(self, "git_config_name")

    @git_config_name.setter
    def git_config_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "git_config_name", value)

    @_builtins.property
    @pulumi.getter(name="gitFilePath")
    def git_file_path(self) -> pulumi.Input[_builtins.str]:
        """
        Git file path, this is a path where your configuration file will be written.
        """
        return pulumi.get(self, "git_file_path")

    @git_file_path.setter
    def git_file_path(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "git_file_path", value)

    @_builtins.property
    @pulumi.getter(name="gitToken")
    def git_token(self) -> pulumi.Input[_builtins.str]:
        """
        Git token, this needs to be provided with enough permission to write and update the file.
        """
        return pulumi.get(self, "git_token")

    @git_token.setter
    def git_token(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "git_token", value)

    @_builtins.property
    @pulumi.getter(name="gitUrl")
    def git_url(self) -> pulumi.Input[_builtins.str]:
        """
        Git url which will be used to connect to the github account.
        """
        return pulumi.get(self, "git_url")

    @git_url.setter
    def git_url(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "git_url", value)

    @_builtins.property
    @pulumi.getter
    def guid(self) -> pulumi.Input[_builtins.str]:
        """
        GUID of the App Configuration service. Get it from the service instance credentials section of the dashboard.
        """
        return pulumi.get(self, "guid")

    @guid.setter
    def guid(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "guid", value)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        action promote
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="appConfigSnapshotId")
    def app_config_snapshot_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "app_config_snapshot_id")

    @app_config_snapshot_id.setter
    def app_config_snapshot_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_config_snapshot_id", value)


@pulumi.input_type
class _AppConfigSnapshotState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 app_config_snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                 collection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 collections: Optional[pulumi.Input[Sequence[pulumi.Input['AppConfigSnapshotCollectionArgs']]]] = None,
                 created_time: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input['AppConfigSnapshotEnvironmentArgs']]]] = None,
                 git_branch: Optional[pulumi.Input[_builtins.str]] = None,
                 git_config_id: Optional[pulumi.Input[_builtins.str]] = None,
                 git_config_name: Optional[pulumi.Input[_builtins.str]] = None,
                 git_file_path: Optional[pulumi.Input[_builtins.str]] = None,
                 git_token: Optional[pulumi.Input[_builtins.str]] = None,
                 git_url: Optional[pulumi.Input[_builtins.str]] = None,
                 guid: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_time: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AppConfigSnapshot resources.
        :param pulumi.Input[_builtins.str] action: action promote
        :param pulumi.Input[_builtins.str] collection_id: Collection id.
        :param pulumi.Input[Sequence[pulumi.Input['AppConfigSnapshotCollectionArgs']]] collections: Collection object.
        :param pulumi.Input[_builtins.str] created_time: Creation time of the git config.
        :param pulumi.Input[_builtins.str] environment_id: Environment id.
        :param pulumi.Input[Sequence[pulumi.Input['AppConfigSnapshotEnvironmentArgs']]] environments: Environment object
        :param pulumi.Input[_builtins.str] git_branch: Branch name to which you need to write or update the configuration.
        :param pulumi.Input[_builtins.str] git_config_id: Git config id. Allowed special characters are dot ( . ), hyphen( - ), underscore ( _ ) only
        :param pulumi.Input[_builtins.str] git_config_name: Git config name. Allowed special characters are dot ( . ), hyphen( - ), underscore ( _ ) only
        :param pulumi.Input[_builtins.str] git_file_path: Git file path, this is a path where your configuration file will be written.
        :param pulumi.Input[_builtins.str] git_token: Git token, this needs to be provided with enough permission to write and update the file.
        :param pulumi.Input[_builtins.str] git_url: Git url which will be used to connect to the github account.
        :param pulumi.Input[_builtins.str] guid: GUID of the App Configuration service. Get it from the service instance credentials section of the dashboard.
        :param pulumi.Input[_builtins.str] href: Git config URL.
        :param pulumi.Input[_builtins.str] updated_time: Last modified time of the git config data.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if app_config_snapshot_id is not None:
            pulumi.set(__self__, "app_config_snapshot_id", app_config_snapshot_id)
        if collection_id is not None:
            pulumi.set(__self__, "collection_id", collection_id)
        if collections is not None:
            pulumi.set(__self__, "collections", collections)
        if created_time is not None:
            pulumi.set(__self__, "created_time", created_time)
        if environment_id is not None:
            pulumi.set(__self__, "environment_id", environment_id)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)
        if git_branch is not None:
            pulumi.set(__self__, "git_branch", git_branch)
        if git_config_id is not None:
            pulumi.set(__self__, "git_config_id", git_config_id)
        if git_config_name is not None:
            pulumi.set(__self__, "git_config_name", git_config_name)
        if git_file_path is not None:
            pulumi.set(__self__, "git_file_path", git_file_path)
        if git_token is not None:
            pulumi.set(__self__, "git_token", git_token)
        if git_url is not None:
            pulumi.set(__self__, "git_url", git_url)
        if guid is not None:
            pulumi.set(__self__, "guid", guid)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if updated_time is not None:
            pulumi.set(__self__, "updated_time", updated_time)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        action promote
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="appConfigSnapshotId")
    def app_config_snapshot_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "app_config_snapshot_id")

    @app_config_snapshot_id.setter
    def app_config_snapshot_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_config_snapshot_id", value)

    @_builtins.property
    @pulumi.getter(name="collectionId")
    def collection_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Collection id.
        """
        return pulumi.get(self, "collection_id")

    @collection_id.setter
    def collection_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "collection_id", value)

    @_builtins.property
    @pulumi.getter
    def collections(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppConfigSnapshotCollectionArgs']]]]:
        """
        Collection object.
        """
        return pulumi.get(self, "collections")

    @collections.setter
    def collections(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppConfigSnapshotCollectionArgs']]]]):
        pulumi.set(self, "collections", value)

    @_builtins.property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Creation time of the git config.
        """
        return pulumi.get(self, "created_time")

    @created_time.setter
    def created_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_time", value)

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Environment id.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "environment_id", value)

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppConfigSnapshotEnvironmentArgs']]]]:
        """
        Environment object
        """
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppConfigSnapshotEnvironmentArgs']]]]):
        pulumi.set(self, "environments", value)

    @_builtins.property
    @pulumi.getter(name="gitBranch")
    def git_branch(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Branch name to which you need to write or update the configuration.
        """
        return pulumi.get(self, "git_branch")

    @git_branch.setter
    def git_branch(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "git_branch", value)

    @_builtins.property
    @pulumi.getter(name="gitConfigId")
    def git_config_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Git config id. Allowed special characters are dot ( . ), hyphen( - ), underscore ( _ ) only
        """
        return pulumi.get(self, "git_config_id")

    @git_config_id.setter
    def git_config_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "git_config_id", value)

    @_builtins.property
    @pulumi.getter(name="gitConfigName")
    def git_config_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Git config name. Allowed special characters are dot ( . ), hyphen( - ), underscore ( _ ) only
        """
        return pulumi.get(self, "git_config_name")

    @git_config_name.setter
    def git_config_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "git_config_name", value)

    @_builtins.property
    @pulumi.getter(name="gitFilePath")
    def git_file_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Git file path, this is a path where your configuration file will be written.
        """
        return pulumi.get(self, "git_file_path")

    @git_file_path.setter
    def git_file_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "git_file_path", value)

    @_builtins.property
    @pulumi.getter(name="gitToken")
    def git_token(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Git token, this needs to be provided with enough permission to write and update the file.
        """
        return pulumi.get(self, "git_token")

    @git_token.setter
    def git_token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "git_token", value)

    @_builtins.property
    @pulumi.getter(name="gitUrl")
    def git_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Git url which will be used to connect to the github account.
        """
        return pulumi.get(self, "git_url")

    @git_url.setter
    def git_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "git_url", value)

    @_builtins.property
    @pulumi.getter
    def guid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        GUID of the App Configuration service. Get it from the service instance credentials section of the dashboard.
        """
        return pulumi.get(self, "guid")

    @guid.setter
    def guid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "guid", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Git config URL.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Last modified time of the git config data.
        """
        return pulumi.get(self, "updated_time")

    @updated_time.setter
    def updated_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_time", value)


@pulumi.type_token("ibm:index/appConfigSnapshot:AppConfigSnapshot")
class AppConfigSnapshot(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 app_config_snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                 collection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 git_branch: Optional[pulumi.Input[_builtins.str]] = None,
                 git_config_id: Optional[pulumi.Input[_builtins.str]] = None,
                 git_config_name: Optional[pulumi.Input[_builtins.str]] = None,
                 git_file_path: Optional[pulumi.Input[_builtins.str]] = None,
                 git_token: Optional[pulumi.Input[_builtins.str]] = None,
                 git_url: Optional[pulumi.Input[_builtins.str]] = None,
                 guid: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a AppConfigSnapshot resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: action promote
        :param pulumi.Input[_builtins.str] collection_id: Collection id.
        :param pulumi.Input[_builtins.str] environment_id: Environment id.
        :param pulumi.Input[_builtins.str] git_branch: Branch name to which you need to write or update the configuration.
        :param pulumi.Input[_builtins.str] git_config_id: Git config id. Allowed special characters are dot ( . ), hyphen( - ), underscore ( _ ) only
        :param pulumi.Input[_builtins.str] git_config_name: Git config name. Allowed special characters are dot ( . ), hyphen( - ), underscore ( _ ) only
        :param pulumi.Input[_builtins.str] git_file_path: Git file path, this is a path where your configuration file will be written.
        :param pulumi.Input[_builtins.str] git_token: Git token, this needs to be provided with enough permission to write and update the file.
        :param pulumi.Input[_builtins.str] git_url: Git url which will be used to connect to the github account.
        :param pulumi.Input[_builtins.str] guid: GUID of the App Configuration service. Get it from the service instance credentials section of the dashboard.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppConfigSnapshotArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AppConfigSnapshot resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AppConfigSnapshotArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppConfigSnapshotArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 app_config_snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                 collection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 git_branch: Optional[pulumi.Input[_builtins.str]] = None,
                 git_config_id: Optional[pulumi.Input[_builtins.str]] = None,
                 git_config_name: Optional[pulumi.Input[_builtins.str]] = None,
                 git_file_path: Optional[pulumi.Input[_builtins.str]] = None,
                 git_token: Optional[pulumi.Input[_builtins.str]] = None,
                 git_url: Optional[pulumi.Input[_builtins.str]] = None,
                 guid: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppConfigSnapshotArgs.__new__(AppConfigSnapshotArgs)

            __props__.__dict__["action"] = action
            __props__.__dict__["app_config_snapshot_id"] = app_config_snapshot_id
            if collection_id is None and not opts.urn:
                raise TypeError("Missing required property 'collection_id'")
            __props__.__dict__["collection_id"] = collection_id
            if environment_id is None and not opts.urn:
                raise TypeError("Missing required property 'environment_id'")
            __props__.__dict__["environment_id"] = environment_id
            if git_branch is None and not opts.urn:
                raise TypeError("Missing required property 'git_branch'")
            __props__.__dict__["git_branch"] = git_branch
            if git_config_id is None and not opts.urn:
                raise TypeError("Missing required property 'git_config_id'")
            __props__.__dict__["git_config_id"] = git_config_id
            if git_config_name is None and not opts.urn:
                raise TypeError("Missing required property 'git_config_name'")
            __props__.__dict__["git_config_name"] = git_config_name
            if git_file_path is None and not opts.urn:
                raise TypeError("Missing required property 'git_file_path'")
            __props__.__dict__["git_file_path"] = git_file_path
            if git_token is None and not opts.urn:
                raise TypeError("Missing required property 'git_token'")
            __props__.__dict__["git_token"] = None if git_token is None else pulumi.Output.secret(git_token)
            if git_url is None and not opts.urn:
                raise TypeError("Missing required property 'git_url'")
            __props__.__dict__["git_url"] = git_url
            if guid is None and not opts.urn:
                raise TypeError("Missing required property 'guid'")
            __props__.__dict__["guid"] = guid
            __props__.__dict__["collections"] = None
            __props__.__dict__["created_time"] = None
            __props__.__dict__["environments"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["updated_time"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["gitToken"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(AppConfigSnapshot, __self__).__init__(
            'ibm:index/appConfigSnapshot:AppConfigSnapshot',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[_builtins.str]] = None,
            app_config_snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
            collection_id: Optional[pulumi.Input[_builtins.str]] = None,
            collections: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppConfigSnapshotCollectionArgs', 'AppConfigSnapshotCollectionArgsDict']]]]] = None,
            created_time: Optional[pulumi.Input[_builtins.str]] = None,
            environment_id: Optional[pulumi.Input[_builtins.str]] = None,
            environments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppConfigSnapshotEnvironmentArgs', 'AppConfigSnapshotEnvironmentArgsDict']]]]] = None,
            git_branch: Optional[pulumi.Input[_builtins.str]] = None,
            git_config_id: Optional[pulumi.Input[_builtins.str]] = None,
            git_config_name: Optional[pulumi.Input[_builtins.str]] = None,
            git_file_path: Optional[pulumi.Input[_builtins.str]] = None,
            git_token: Optional[pulumi.Input[_builtins.str]] = None,
            git_url: Optional[pulumi.Input[_builtins.str]] = None,
            guid: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            updated_time: Optional[pulumi.Input[_builtins.str]] = None) -> 'AppConfigSnapshot':
        """
        Get an existing AppConfigSnapshot resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: action promote
        :param pulumi.Input[_builtins.str] collection_id: Collection id.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AppConfigSnapshotCollectionArgs', 'AppConfigSnapshotCollectionArgsDict']]]] collections: Collection object.
        :param pulumi.Input[_builtins.str] created_time: Creation time of the git config.
        :param pulumi.Input[_builtins.str] environment_id: Environment id.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AppConfigSnapshotEnvironmentArgs', 'AppConfigSnapshotEnvironmentArgsDict']]]] environments: Environment object
        :param pulumi.Input[_builtins.str] git_branch: Branch name to which you need to write or update the configuration.
        :param pulumi.Input[_builtins.str] git_config_id: Git config id. Allowed special characters are dot ( . ), hyphen( - ), underscore ( _ ) only
        :param pulumi.Input[_builtins.str] git_config_name: Git config name. Allowed special characters are dot ( . ), hyphen( - ), underscore ( _ ) only
        :param pulumi.Input[_builtins.str] git_file_path: Git file path, this is a path where your configuration file will be written.
        :param pulumi.Input[_builtins.str] git_token: Git token, this needs to be provided with enough permission to write and update the file.
        :param pulumi.Input[_builtins.str] git_url: Git url which will be used to connect to the github account.
        :param pulumi.Input[_builtins.str] guid: GUID of the App Configuration service. Get it from the service instance credentials section of the dashboard.
        :param pulumi.Input[_builtins.str] href: Git config URL.
        :param pulumi.Input[_builtins.str] updated_time: Last modified time of the git config data.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppConfigSnapshotState.__new__(_AppConfigSnapshotState)

        __props__.__dict__["action"] = action
        __props__.__dict__["app_config_snapshot_id"] = app_config_snapshot_id
        __props__.__dict__["collection_id"] = collection_id
        __props__.__dict__["collections"] = collections
        __props__.__dict__["created_time"] = created_time
        __props__.__dict__["environment_id"] = environment_id
        __props__.__dict__["environments"] = environments
        __props__.__dict__["git_branch"] = git_branch
        __props__.__dict__["git_config_id"] = git_config_id
        __props__.__dict__["git_config_name"] = git_config_name
        __props__.__dict__["git_file_path"] = git_file_path
        __props__.__dict__["git_token"] = git_token
        __props__.__dict__["git_url"] = git_url
        __props__.__dict__["guid"] = guid
        __props__.__dict__["href"] = href
        __props__.__dict__["updated_time"] = updated_time
        return AppConfigSnapshot(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        action promote
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="appConfigSnapshotId")
    def app_config_snapshot_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "app_config_snapshot_id")

    @_builtins.property
    @pulumi.getter(name="collectionId")
    def collection_id(self) -> pulumi.Output[_builtins.str]:
        """
        Collection id.
        """
        return pulumi.get(self, "collection_id")

    @_builtins.property
    @pulumi.getter
    def collections(self) -> pulumi.Output[Sequence['outputs.AppConfigSnapshotCollection']]:
        """
        Collection object.
        """
        return pulumi.get(self, "collections")

    @_builtins.property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> pulumi.Output[_builtins.str]:
        """
        Creation time of the git config.
        """
        return pulumi.get(self, "created_time")

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Output[_builtins.str]:
        """
        Environment id.
        """
        return pulumi.get(self, "environment_id")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> pulumi.Output[Sequence['outputs.AppConfigSnapshotEnvironment']]:
        """
        Environment object
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="gitBranch")
    def git_branch(self) -> pulumi.Output[_builtins.str]:
        """
        Branch name to which you need to write or update the configuration.
        """
        return pulumi.get(self, "git_branch")

    @_builtins.property
    @pulumi.getter(name="gitConfigId")
    def git_config_id(self) -> pulumi.Output[_builtins.str]:
        """
        Git config id. Allowed special characters are dot ( . ), hyphen( - ), underscore ( _ ) only
        """
        return pulumi.get(self, "git_config_id")

    @_builtins.property
    @pulumi.getter(name="gitConfigName")
    def git_config_name(self) -> pulumi.Output[_builtins.str]:
        """
        Git config name. Allowed special characters are dot ( . ), hyphen( - ), underscore ( _ ) only
        """
        return pulumi.get(self, "git_config_name")

    @_builtins.property
    @pulumi.getter(name="gitFilePath")
    def git_file_path(self) -> pulumi.Output[_builtins.str]:
        """
        Git file path, this is a path where your configuration file will be written.
        """
        return pulumi.get(self, "git_file_path")

    @_builtins.property
    @pulumi.getter(name="gitToken")
    def git_token(self) -> pulumi.Output[_builtins.str]:
        """
        Git token, this needs to be provided with enough permission to write and update the file.
        """
        return pulumi.get(self, "git_token")

    @_builtins.property
    @pulumi.getter(name="gitUrl")
    def git_url(self) -> pulumi.Output[_builtins.str]:
        """
        Git url which will be used to connect to the github account.
        """
        return pulumi.get(self, "git_url")

    @_builtins.property
    @pulumi.getter
    def guid(self) -> pulumi.Output[_builtins.str]:
        """
        GUID of the App Configuration service. Get it from the service instance credentials section of the dashboard.
        """
        return pulumi.get(self, "guid")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        Git config URL.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> pulumi.Output[_builtins.str]:
        """
        Last modified time of the git config data.
        """
        return pulumi.get(self, "updated_time")

