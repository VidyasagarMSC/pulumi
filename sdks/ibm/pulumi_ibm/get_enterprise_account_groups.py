# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetEnterpriseAccountGroupsResult',
    'AwaitableGetEnterpriseAccountGroupsResult',
    'get_enterprise_account_groups',
    'get_enterprise_account_groups_output',
]

@pulumi.output_type
class GetEnterpriseAccountGroupsResult:
    """
    A collection of values returned by getEnterpriseAccountGroups.
    """
    def __init__(__self__, account_groups=None, id=None, name=None):
        if account_groups and not isinstance(account_groups, list):
            raise TypeError("Expected argument 'account_groups' to be a list")
        pulumi.set(__self__, "account_groups", account_groups)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="accountGroups")
    def account_groups(self) -> Sequence['outputs.GetEnterpriseAccountGroupsAccountGroupResult']:
        return pulumi.get(self, "account_groups")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")


class AwaitableGetEnterpriseAccountGroupsResult(GetEnterpriseAccountGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEnterpriseAccountGroupsResult(
            account_groups=self.account_groups,
            id=self.id,
            name=self.name)


def get_enterprise_account_groups(id: Optional[_builtins.str] = None,
                                  name: Optional[_builtins.str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEnterpriseAccountGroupsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getEnterpriseAccountGroups:getEnterpriseAccountGroups', __args__, opts=opts, typ=GetEnterpriseAccountGroupsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetEnterpriseAccountGroupsResult(
        account_groups=pulumi.get(__ret__, 'account_groups'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'))
def get_enterprise_account_groups_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEnterpriseAccountGroupsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getEnterpriseAccountGroups:getEnterpriseAccountGroups', __args__, opts=opts, typ=GetEnterpriseAccountGroupsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetEnterpriseAccountGroupsResult(
        account_groups=pulumi.get(__response__, 'account_groups'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name')))
