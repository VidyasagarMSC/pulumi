# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsBackupPolicyJobsResult',
    'AwaitableGetIsBackupPolicyJobsResult',
    'get_is_backup_policy_jobs',
    'get_is_backup_policy_jobs_output',
]

@pulumi.output_type
class GetIsBackupPolicyJobsResult:
    """
    A collection of values returned by getIsBackupPolicyJobs.
    """
    def __init__(__self__, backup_policy_id=None, backup_policy_plan_id=None, id=None, jobs=None, source_id=None, status=None, target_snapshots_crns=None, target_snapshots_ids=None):
        if backup_policy_id and not isinstance(backup_policy_id, str):
            raise TypeError("Expected argument 'backup_policy_id' to be a str")
        pulumi.set(__self__, "backup_policy_id", backup_policy_id)
        if backup_policy_plan_id and not isinstance(backup_policy_plan_id, str):
            raise TypeError("Expected argument 'backup_policy_plan_id' to be a str")
        pulumi.set(__self__, "backup_policy_plan_id", backup_policy_plan_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if jobs and not isinstance(jobs, list):
            raise TypeError("Expected argument 'jobs' to be a list")
        pulumi.set(__self__, "jobs", jobs)
        if source_id and not isinstance(source_id, str):
            raise TypeError("Expected argument 'source_id' to be a str")
        pulumi.set(__self__, "source_id", source_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if target_snapshots_crns and not isinstance(target_snapshots_crns, list):
            raise TypeError("Expected argument 'target_snapshots_crns' to be a list")
        pulumi.set(__self__, "target_snapshots_crns", target_snapshots_crns)
        if target_snapshots_ids and not isinstance(target_snapshots_ids, list):
            raise TypeError("Expected argument 'target_snapshots_ids' to be a list")
        pulumi.set(__self__, "target_snapshots_ids", target_snapshots_ids)

    @_builtins.property
    @pulumi.getter(name="backupPolicyId")
    def backup_policy_id(self) -> _builtins.str:
        return pulumi.get(self, "backup_policy_id")

    @_builtins.property
    @pulumi.getter(name="backupPolicyPlanId")
    def backup_policy_plan_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "backup_policy_plan_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def jobs(self) -> Sequence['outputs.GetIsBackupPolicyJobsJobResult']:
        return pulumi.get(self, "jobs")

    @_builtins.property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "source_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="targetSnapshotsCrns")
    def target_snapshots_crns(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "target_snapshots_crns")

    @_builtins.property
    @pulumi.getter(name="targetSnapshotsIds")
    def target_snapshots_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "target_snapshots_ids")


class AwaitableGetIsBackupPolicyJobsResult(GetIsBackupPolicyJobsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsBackupPolicyJobsResult(
            backup_policy_id=self.backup_policy_id,
            backup_policy_plan_id=self.backup_policy_plan_id,
            id=self.id,
            jobs=self.jobs,
            source_id=self.source_id,
            status=self.status,
            target_snapshots_crns=self.target_snapshots_crns,
            target_snapshots_ids=self.target_snapshots_ids)


def get_is_backup_policy_jobs(backup_policy_id: Optional[_builtins.str] = None,
                              backup_policy_plan_id: Optional[_builtins.str] = None,
                              id: Optional[_builtins.str] = None,
                              source_id: Optional[_builtins.str] = None,
                              status: Optional[_builtins.str] = None,
                              target_snapshots_crns: Optional[Sequence[_builtins.str]] = None,
                              target_snapshots_ids: Optional[Sequence[_builtins.str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsBackupPolicyJobsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['backupPolicyId'] = backup_policy_id
    __args__['backupPolicyPlanId'] = backup_policy_plan_id
    __args__['id'] = id
    __args__['sourceId'] = source_id
    __args__['status'] = status
    __args__['targetSnapshotsCrns'] = target_snapshots_crns
    __args__['targetSnapshotsIds'] = target_snapshots_ids
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsBackupPolicyJobs:getIsBackupPolicyJobs', __args__, opts=opts, typ=GetIsBackupPolicyJobsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsBackupPolicyJobsResult(
        backup_policy_id=pulumi.get(__ret__, 'backup_policy_id'),
        backup_policy_plan_id=pulumi.get(__ret__, 'backup_policy_plan_id'),
        id=pulumi.get(__ret__, 'id'),
        jobs=pulumi.get(__ret__, 'jobs'),
        source_id=pulumi.get(__ret__, 'source_id'),
        status=pulumi.get(__ret__, 'status'),
        target_snapshots_crns=pulumi.get(__ret__, 'target_snapshots_crns'),
        target_snapshots_ids=pulumi.get(__ret__, 'target_snapshots_ids'))
def get_is_backup_policy_jobs_output(backup_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                                     backup_policy_plan_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     source_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     target_snapshots_crns: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                     target_snapshots_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsBackupPolicyJobsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['backupPolicyId'] = backup_policy_id
    __args__['backupPolicyPlanId'] = backup_policy_plan_id
    __args__['id'] = id
    __args__['sourceId'] = source_id
    __args__['status'] = status
    __args__['targetSnapshotsCrns'] = target_snapshots_crns
    __args__['targetSnapshotsIds'] = target_snapshots_ids
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsBackupPolicyJobs:getIsBackupPolicyJobs', __args__, opts=opts, typ=GetIsBackupPolicyJobsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsBackupPolicyJobsResult(
        backup_policy_id=pulumi.get(__response__, 'backup_policy_id'),
        backup_policy_plan_id=pulumi.get(__response__, 'backup_policy_plan_id'),
        id=pulumi.get(__response__, 'id'),
        jobs=pulumi.get(__response__, 'jobs'),
        source_id=pulumi.get(__response__, 'source_id'),
        status=pulumi.get(__response__, 'status'),
        target_snapshots_crns=pulumi.get(__response__, 'target_snapshots_crns'),
        target_snapshots_ids=pulumi.get(__response__, 'target_snapshots_ids')))
