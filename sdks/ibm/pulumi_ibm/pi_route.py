# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PiRouteArgs', 'PiRoute']

@pulumi.input_type
class PiRouteArgs:
    def __init__(__self__, *,
                 pi_cloud_instance_id: pulumi.Input[_builtins.str],
                 pi_destination: pulumi.Input[_builtins.str],
                 pi_name: pulumi.Input[_builtins.str],
                 pi_next_hop: pulumi.Input[_builtins.str],
                 pi_action: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_advertise: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_destination_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_next_hop_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_route_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['PiRouteTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a PiRoute resource.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_destination: Destination of route.
        :param pulumi.Input[_builtins.str] pi_name: Name of the route.
        :param pulumi.Input[_builtins.str] pi_next_hop: The next hop.
        :param pulumi.Input[_builtins.str] pi_action: Action for route. Valid values are "deliver".
        :param pulumi.Input[_builtins.str] pi_advertise: Indicates if the route is advertised. Valid values are "enable" and "disable".
        :param pulumi.Input[_builtins.str] pi_destination_type: The destination type. Valid values are "ipv4-address".
        :param pulumi.Input[_builtins.bool] pi_enabled: Indicates if the route should be enabled in the fabric.
        :param pulumi.Input[_builtins.str] pi_next_hop_type: The next hop type. Valid values are "ipv4-address".
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: The user tags attached to this resource.
        """
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        pulumi.set(__self__, "pi_destination", pi_destination)
        pulumi.set(__self__, "pi_name", pi_name)
        pulumi.set(__self__, "pi_next_hop", pi_next_hop)
        if pi_action is not None:
            pulumi.set(__self__, "pi_action", pi_action)
        if pi_advertise is not None:
            pulumi.set(__self__, "pi_advertise", pi_advertise)
        if pi_destination_type is not None:
            pulumi.set(__self__, "pi_destination_type", pi_destination_type)
        if pi_enabled is not None:
            pulumi.set(__self__, "pi_enabled", pi_enabled)
        if pi_next_hop_type is not None:
            pulumi.set(__self__, "pi_next_hop_type", pi_next_hop_type)
        if pi_route_id is not None:
            pulumi.set(__self__, "pi_route_id", pi_route_id)
        if pi_user_tags is not None:
            pulumi.set(__self__, "pi_user_tags", pi_user_tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piDestination")
    def pi_destination(self) -> pulumi.Input[_builtins.str]:
        """
        Destination of route.
        """
        return pulumi.get(self, "pi_destination")

    @pi_destination.setter
    def pi_destination(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_destination", value)

    @_builtins.property
    @pulumi.getter(name="piName")
    def pi_name(self) -> pulumi.Input[_builtins.str]:
        """
        Name of the route.
        """
        return pulumi.get(self, "pi_name")

    @pi_name.setter
    def pi_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_name", value)

    @_builtins.property
    @pulumi.getter(name="piNextHop")
    def pi_next_hop(self) -> pulumi.Input[_builtins.str]:
        """
        The next hop.
        """
        return pulumi.get(self, "pi_next_hop")

    @pi_next_hop.setter
    def pi_next_hop(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_next_hop", value)

    @_builtins.property
    @pulumi.getter(name="piAction")
    def pi_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Action for route. Valid values are "deliver".
        """
        return pulumi.get(self, "pi_action")

    @pi_action.setter
    def pi_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_action", value)

    @_builtins.property
    @pulumi.getter(name="piAdvertise")
    def pi_advertise(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates if the route is advertised. Valid values are "enable" and "disable".
        """
        return pulumi.get(self, "pi_advertise")

    @pi_advertise.setter
    def pi_advertise(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_advertise", value)

    @_builtins.property
    @pulumi.getter(name="piDestinationType")
    def pi_destination_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The destination type. Valid values are "ipv4-address".
        """
        return pulumi.get(self, "pi_destination_type")

    @pi_destination_type.setter
    def pi_destination_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_destination_type", value)

    @_builtins.property
    @pulumi.getter(name="piEnabled")
    def pi_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if the route should be enabled in the fabric.
        """
        return pulumi.get(self, "pi_enabled")

    @pi_enabled.setter
    def pi_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pi_enabled", value)

    @_builtins.property
    @pulumi.getter(name="piNextHopType")
    def pi_next_hop_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The next hop type. Valid values are "ipv4-address".
        """
        return pulumi.get(self, "pi_next_hop_type")

    @pi_next_hop_type.setter
    def pi_next_hop_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_next_hop_type", value)

    @_builtins.property
    @pulumi.getter(name="piRouteId")
    def pi_route_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_route_id")

    @pi_route_id.setter
    def pi_route_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_route_id", value)

    @_builtins.property
    @pulumi.getter(name="piUserTags")
    def pi_user_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The user tags attached to this resource.
        """
        return pulumi.get(self, "pi_user_tags")

    @pi_user_tags.setter
    def pi_user_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_user_tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiRouteTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiRouteTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _PiRouteState:
    def __init__(__self__, *,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_action: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_advertise: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_destination: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_destination_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_next_hop: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_next_hop_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_route_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 route_id: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['PiRouteTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering PiRoute resources.
        :param pulumi.Input[_builtins.str] crn: The CRN of this resource.
        :param pulumi.Input[_builtins.str] pi_action: Action for route. Valid values are "deliver".
        :param pulumi.Input[_builtins.str] pi_advertise: Indicates if the route is advertised. Valid values are "enable" and "disable".
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_destination: Destination of route.
        :param pulumi.Input[_builtins.str] pi_destination_type: The destination type. Valid values are "ipv4-address".
        :param pulumi.Input[_builtins.bool] pi_enabled: Indicates if the route should be enabled in the fabric.
        :param pulumi.Input[_builtins.str] pi_name: Name of the route.
        :param pulumi.Input[_builtins.str] pi_next_hop: The next hop.
        :param pulumi.Input[_builtins.str] pi_next_hop_type: The next hop type. Valid values are "ipv4-address".
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: The user tags attached to this resource.
        :param pulumi.Input[_builtins.str] route_id: The unique route ID.
        :param pulumi.Input[_builtins.str] state: The state of the route.
        """
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if pi_action is not None:
            pulumi.set(__self__, "pi_action", pi_action)
        if pi_advertise is not None:
            pulumi.set(__self__, "pi_advertise", pi_advertise)
        if pi_cloud_instance_id is not None:
            pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_destination is not None:
            pulumi.set(__self__, "pi_destination", pi_destination)
        if pi_destination_type is not None:
            pulumi.set(__self__, "pi_destination_type", pi_destination_type)
        if pi_enabled is not None:
            pulumi.set(__self__, "pi_enabled", pi_enabled)
        if pi_name is not None:
            pulumi.set(__self__, "pi_name", pi_name)
        if pi_next_hop is not None:
            pulumi.set(__self__, "pi_next_hop", pi_next_hop)
        if pi_next_hop_type is not None:
            pulumi.set(__self__, "pi_next_hop_type", pi_next_hop_type)
        if pi_route_id is not None:
            pulumi.set(__self__, "pi_route_id", pi_route_id)
        if pi_user_tags is not None:
            pulumi.set(__self__, "pi_user_tags", pi_user_tags)
        if route_id is not None:
            pulumi.set(__self__, "route_id", route_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN of this resource.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="piAction")
    def pi_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Action for route. Valid values are "deliver".
        """
        return pulumi.get(self, "pi_action")

    @pi_action.setter
    def pi_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_action", value)

    @_builtins.property
    @pulumi.getter(name="piAdvertise")
    def pi_advertise(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates if the route is advertised. Valid values are "enable" and "disable".
        """
        return pulumi.get(self, "pi_advertise")

    @pi_advertise.setter
    def pi_advertise(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_advertise", value)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piDestination")
    def pi_destination(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Destination of route.
        """
        return pulumi.get(self, "pi_destination")

    @pi_destination.setter
    def pi_destination(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_destination", value)

    @_builtins.property
    @pulumi.getter(name="piDestinationType")
    def pi_destination_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The destination type. Valid values are "ipv4-address".
        """
        return pulumi.get(self, "pi_destination_type")

    @pi_destination_type.setter
    def pi_destination_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_destination_type", value)

    @_builtins.property
    @pulumi.getter(name="piEnabled")
    def pi_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if the route should be enabled in the fabric.
        """
        return pulumi.get(self, "pi_enabled")

    @pi_enabled.setter
    def pi_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pi_enabled", value)

    @_builtins.property
    @pulumi.getter(name="piName")
    def pi_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the route.
        """
        return pulumi.get(self, "pi_name")

    @pi_name.setter
    def pi_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_name", value)

    @_builtins.property
    @pulumi.getter(name="piNextHop")
    def pi_next_hop(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The next hop.
        """
        return pulumi.get(self, "pi_next_hop")

    @pi_next_hop.setter
    def pi_next_hop(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_next_hop", value)

    @_builtins.property
    @pulumi.getter(name="piNextHopType")
    def pi_next_hop_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The next hop type. Valid values are "ipv4-address".
        """
        return pulumi.get(self, "pi_next_hop_type")

    @pi_next_hop_type.setter
    def pi_next_hop_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_next_hop_type", value)

    @_builtins.property
    @pulumi.getter(name="piRouteId")
    def pi_route_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_route_id")

    @pi_route_id.setter
    def pi_route_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_route_id", value)

    @_builtins.property
    @pulumi.getter(name="piUserTags")
    def pi_user_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The user tags attached to this resource.
        """
        return pulumi.get(self, "pi_user_tags")

    @pi_user_tags.setter
    def pi_user_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_user_tags", value)

    @_builtins.property
    @pulumi.getter(name="routeId")
    def route_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique route ID.
        """
        return pulumi.get(self, "route_id")

    @route_id.setter
    def route_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_id", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The state of the route.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiRouteTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiRouteTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/piRoute:PiRoute")
class PiRoute(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_action: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_advertise: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_destination: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_destination_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_next_hop: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_next_hop_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_route_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiRouteTimeoutsArgs', 'PiRouteTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a PiRoute resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] pi_action: Action for route. Valid values are "deliver".
        :param pulumi.Input[_builtins.str] pi_advertise: Indicates if the route is advertised. Valid values are "enable" and "disable".
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_destination: Destination of route.
        :param pulumi.Input[_builtins.str] pi_destination_type: The destination type. Valid values are "ipv4-address".
        :param pulumi.Input[_builtins.bool] pi_enabled: Indicates if the route should be enabled in the fabric.
        :param pulumi.Input[_builtins.str] pi_name: Name of the route.
        :param pulumi.Input[_builtins.str] pi_next_hop: The next hop.
        :param pulumi.Input[_builtins.str] pi_next_hop_type: The next hop type. Valid values are "ipv4-address".
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: The user tags attached to this resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PiRouteArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PiRoute resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PiRouteArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PiRouteArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_action: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_advertise: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_destination: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_destination_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_next_hop: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_next_hop_type: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_route_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiRouteTimeoutsArgs', 'PiRouteTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PiRouteArgs.__new__(PiRouteArgs)

            __props__.__dict__["pi_action"] = pi_action
            __props__.__dict__["pi_advertise"] = pi_advertise
            if pi_cloud_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'pi_cloud_instance_id'")
            __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
            if pi_destination is None and not opts.urn:
                raise TypeError("Missing required property 'pi_destination'")
            __props__.__dict__["pi_destination"] = pi_destination
            __props__.__dict__["pi_destination_type"] = pi_destination_type
            __props__.__dict__["pi_enabled"] = pi_enabled
            if pi_name is None and not opts.urn:
                raise TypeError("Missing required property 'pi_name'")
            __props__.__dict__["pi_name"] = pi_name
            if pi_next_hop is None and not opts.urn:
                raise TypeError("Missing required property 'pi_next_hop'")
            __props__.__dict__["pi_next_hop"] = pi_next_hop
            __props__.__dict__["pi_next_hop_type"] = pi_next_hop_type
            __props__.__dict__["pi_route_id"] = pi_route_id
            __props__.__dict__["pi_user_tags"] = pi_user_tags
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["crn"] = None
            __props__.__dict__["route_id"] = None
            __props__.__dict__["state"] = None
        super(PiRoute, __self__).__init__(
            'ibm:index/piRoute:PiRoute',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            pi_action: Optional[pulumi.Input[_builtins.str]] = None,
            pi_advertise: Optional[pulumi.Input[_builtins.str]] = None,
            pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_destination: Optional[pulumi.Input[_builtins.str]] = None,
            pi_destination_type: Optional[pulumi.Input[_builtins.str]] = None,
            pi_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            pi_name: Optional[pulumi.Input[_builtins.str]] = None,
            pi_next_hop: Optional[pulumi.Input[_builtins.str]] = None,
            pi_next_hop_type: Optional[pulumi.Input[_builtins.str]] = None,
            pi_route_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            route_id: Optional[pulumi.Input[_builtins.str]] = None,
            state: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['PiRouteTimeoutsArgs', 'PiRouteTimeoutsArgsDict']]] = None) -> 'PiRoute':
        """
        Get an existing PiRoute resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] crn: The CRN of this resource.
        :param pulumi.Input[_builtins.str] pi_action: Action for route. Valid values are "deliver".
        :param pulumi.Input[_builtins.str] pi_advertise: Indicates if the route is advertised. Valid values are "enable" and "disable".
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_destination: Destination of route.
        :param pulumi.Input[_builtins.str] pi_destination_type: The destination type. Valid values are "ipv4-address".
        :param pulumi.Input[_builtins.bool] pi_enabled: Indicates if the route should be enabled in the fabric.
        :param pulumi.Input[_builtins.str] pi_name: Name of the route.
        :param pulumi.Input[_builtins.str] pi_next_hop: The next hop.
        :param pulumi.Input[_builtins.str] pi_next_hop_type: The next hop type. Valid values are "ipv4-address".
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: The user tags attached to this resource.
        :param pulumi.Input[_builtins.str] route_id: The unique route ID.
        :param pulumi.Input[_builtins.str] state: The state of the route.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PiRouteState.__new__(_PiRouteState)

        __props__.__dict__["crn"] = crn
        __props__.__dict__["pi_action"] = pi_action
        __props__.__dict__["pi_advertise"] = pi_advertise
        __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
        __props__.__dict__["pi_destination"] = pi_destination
        __props__.__dict__["pi_destination_type"] = pi_destination_type
        __props__.__dict__["pi_enabled"] = pi_enabled
        __props__.__dict__["pi_name"] = pi_name
        __props__.__dict__["pi_next_hop"] = pi_next_hop
        __props__.__dict__["pi_next_hop_type"] = pi_next_hop_type
        __props__.__dict__["pi_route_id"] = pi_route_id
        __props__.__dict__["pi_user_tags"] = pi_user_tags
        __props__.__dict__["route_id"] = route_id
        __props__.__dict__["state"] = state
        __props__.__dict__["timeouts"] = timeouts
        return PiRoute(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The CRN of this resource.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="piAction")
    def pi_action(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Action for route. Valid values are "deliver".
        """
        return pulumi.get(self, "pi_action")

    @_builtins.property
    @pulumi.getter(name="piAdvertise")
    def pi_advertise(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Indicates if the route is advertised. Valid values are "enable" and "disable".
        """
        return pulumi.get(self, "pi_advertise")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piDestination")
    def pi_destination(self) -> pulumi.Output[_builtins.str]:
        """
        Destination of route.
        """
        return pulumi.get(self, "pi_destination")

    @_builtins.property
    @pulumi.getter(name="piDestinationType")
    def pi_destination_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The destination type. Valid values are "ipv4-address".
        """
        return pulumi.get(self, "pi_destination_type")

    @_builtins.property
    @pulumi.getter(name="piEnabled")
    def pi_enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Indicates if the route should be enabled in the fabric.
        """
        return pulumi.get(self, "pi_enabled")

    @_builtins.property
    @pulumi.getter(name="piName")
    def pi_name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the route.
        """
        return pulumi.get(self, "pi_name")

    @_builtins.property
    @pulumi.getter(name="piNextHop")
    def pi_next_hop(self) -> pulumi.Output[_builtins.str]:
        """
        The next hop.
        """
        return pulumi.get(self, "pi_next_hop")

    @_builtins.property
    @pulumi.getter(name="piNextHopType")
    def pi_next_hop_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The next hop type. Valid values are "ipv4-address".
        """
        return pulumi.get(self, "pi_next_hop_type")

    @_builtins.property
    @pulumi.getter(name="piRouteId")
    def pi_route_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "pi_route_id")

    @_builtins.property
    @pulumi.getter(name="piUserTags")
    def pi_user_tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The user tags attached to this resource.
        """
        return pulumi.get(self, "pi_user_tags")

    @_builtins.property
    @pulumi.getter(name="routeId")
    def route_id(self) -> pulumi.Output[_builtins.str]:
        """
        The unique route ID.
        """
        return pulumi.get(self, "route_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> pulumi.Output[_builtins.str]:
        """
        The state of the route.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.PiRouteTimeouts']]:
        return pulumi.get(self, "timeouts")

