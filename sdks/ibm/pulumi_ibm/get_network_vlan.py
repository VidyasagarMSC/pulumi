# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetNetworkVlanResult',
    'AwaitableGetNetworkVlanResult',
    'get_network_vlan',
    'get_network_vlan_output',
]

@pulumi.output_type
class GetNetworkVlanResult:
    """
    A collection of values returned by getNetworkVlan.
    """
    def __init__(__self__, id=None, name=None, number=None, router_hostname=None, subnets=None, virtual_guests=None):
        if id and not isinstance(id, float):
            raise TypeError("Expected argument 'id' to be a float")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if number and not isinstance(number, float):
            raise TypeError("Expected argument 'number' to be a float")
        pulumi.set(__self__, "number", number)
        if router_hostname and not isinstance(router_hostname, str):
            raise TypeError("Expected argument 'router_hostname' to be a str")
        pulumi.set(__self__, "router_hostname", router_hostname)
        if subnets and not isinstance(subnets, list):
            raise TypeError("Expected argument 'subnets' to be a list")
        pulumi.set(__self__, "subnets", subnets)
        if virtual_guests and not isinstance(virtual_guests, list):
            raise TypeError("Expected argument 'virtual_guests' to be a list")
        pulumi.set(__self__, "virtual_guests", virtual_guests)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.float:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def number(self) -> _builtins.float:
        return pulumi.get(self, "number")

    @_builtins.property
    @pulumi.getter(name="routerHostname")
    def router_hostname(self) -> _builtins.str:
        return pulumi.get(self, "router_hostname")

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> Sequence['outputs.GetNetworkVlanSubnetResult']:
        return pulumi.get(self, "subnets")

    @_builtins.property
    @pulumi.getter(name="virtualGuests")
    def virtual_guests(self) -> Sequence['outputs.GetNetworkVlanVirtualGuestResult']:
        return pulumi.get(self, "virtual_guests")


class AwaitableGetNetworkVlanResult(GetNetworkVlanResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNetworkVlanResult(
            id=self.id,
            name=self.name,
            number=self.number,
            router_hostname=self.router_hostname,
            subnets=self.subnets,
            virtual_guests=self.virtual_guests)


def get_network_vlan(name: Optional[_builtins.str] = None,
                     number: Optional[_builtins.float] = None,
                     router_hostname: Optional[_builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNetworkVlanResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['number'] = number
    __args__['routerHostname'] = router_hostname
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getNetworkVlan:getNetworkVlan', __args__, opts=opts, typ=GetNetworkVlanResult, package_ref=_utilities.get_package()).value

    return AwaitableGetNetworkVlanResult(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        number=pulumi.get(__ret__, 'number'),
        router_hostname=pulumi.get(__ret__, 'router_hostname'),
        subnets=pulumi.get(__ret__, 'subnets'),
        virtual_guests=pulumi.get(__ret__, 'virtual_guests'))
def get_network_vlan_output(name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            number: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                            router_hostname: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNetworkVlanResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['number'] = number
    __args__['routerHostname'] = router_hostname
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getNetworkVlan:getNetworkVlan', __args__, opts=opts, typ=GetNetworkVlanResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetNetworkVlanResult(
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        number=pulumi.get(__response__, 'number'),
        router_hostname=pulumi.get(__response__, 'router_hostname'),
        subnets=pulumi.get(__response__, 'subnets'),
        virtual_guests=pulumi.get(__response__, 'virtual_guests')))
