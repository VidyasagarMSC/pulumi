# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetIsInstanceGroupManagerActionResult',
    'AwaitableGetIsInstanceGroupManagerActionResult',
    'get_is_instance_group_manager_action',
    'get_is_instance_group_manager_action_output',
]

@pulumi.output_type
class GetIsInstanceGroupManagerActionResult:
    """
    A collection of values returned by getIsInstanceGroupManagerAction.
    """
    def __init__(__self__, action_id=None, action_type=None, auto_delete=None, auto_delete_timeout=None, created_at=None, cron_spec=None, id=None, instance_group=None, instance_group_manager=None, last_applied_at=None, max_membership_count=None, membership_count=None, min_membership_count=None, name=None, next_run_at=None, resource_type=None, run_at=None, status=None, target_manager=None, target_manager_name=None, updated_at=None):
        if action_id and not isinstance(action_id, str):
            raise TypeError("Expected argument 'action_id' to be a str")
        pulumi.set(__self__, "action_id", action_id)
        if action_type and not isinstance(action_type, str):
            raise TypeError("Expected argument 'action_type' to be a str")
        pulumi.set(__self__, "action_type", action_type)
        if auto_delete and not isinstance(auto_delete, bool):
            raise TypeError("Expected argument 'auto_delete' to be a bool")
        pulumi.set(__self__, "auto_delete", auto_delete)
        if auto_delete_timeout and not isinstance(auto_delete_timeout, float):
            raise TypeError("Expected argument 'auto_delete_timeout' to be a float")
        pulumi.set(__self__, "auto_delete_timeout", auto_delete_timeout)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if cron_spec and not isinstance(cron_spec, str):
            raise TypeError("Expected argument 'cron_spec' to be a str")
        pulumi.set(__self__, "cron_spec", cron_spec)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_group and not isinstance(instance_group, str):
            raise TypeError("Expected argument 'instance_group' to be a str")
        pulumi.set(__self__, "instance_group", instance_group)
        if instance_group_manager and not isinstance(instance_group_manager, str):
            raise TypeError("Expected argument 'instance_group_manager' to be a str")
        pulumi.set(__self__, "instance_group_manager", instance_group_manager)
        if last_applied_at and not isinstance(last_applied_at, str):
            raise TypeError("Expected argument 'last_applied_at' to be a str")
        pulumi.set(__self__, "last_applied_at", last_applied_at)
        if max_membership_count and not isinstance(max_membership_count, float):
            raise TypeError("Expected argument 'max_membership_count' to be a float")
        pulumi.set(__self__, "max_membership_count", max_membership_count)
        if membership_count and not isinstance(membership_count, float):
            raise TypeError("Expected argument 'membership_count' to be a float")
        pulumi.set(__self__, "membership_count", membership_count)
        if min_membership_count and not isinstance(min_membership_count, float):
            raise TypeError("Expected argument 'min_membership_count' to be a float")
        pulumi.set(__self__, "min_membership_count", min_membership_count)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if next_run_at and not isinstance(next_run_at, str):
            raise TypeError("Expected argument 'next_run_at' to be a str")
        pulumi.set(__self__, "next_run_at", next_run_at)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if run_at and not isinstance(run_at, str):
            raise TypeError("Expected argument 'run_at' to be a str")
        pulumi.set(__self__, "run_at", run_at)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if target_manager and not isinstance(target_manager, str):
            raise TypeError("Expected argument 'target_manager' to be a str")
        pulumi.set(__self__, "target_manager", target_manager)
        if target_manager_name and not isinstance(target_manager_name, str):
            raise TypeError("Expected argument 'target_manager_name' to be a str")
        pulumi.set(__self__, "target_manager_name", target_manager_name)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="actionId")
    def action_id(self) -> _builtins.str:
        return pulumi.get(self, "action_id")

    @_builtins.property
    @pulumi.getter(name="actionType")
    def action_type(self) -> _builtins.str:
        return pulumi.get(self, "action_type")

    @_builtins.property
    @pulumi.getter(name="autoDelete")
    def auto_delete(self) -> _builtins.bool:
        return pulumi.get(self, "auto_delete")

    @_builtins.property
    @pulumi.getter(name="autoDeleteTimeout")
    def auto_delete_timeout(self) -> _builtins.float:
        return pulumi.get(self, "auto_delete_timeout")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="cronSpec")
    def cron_spec(self) -> _builtins.str:
        return pulumi.get(self, "cron_spec")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceGroup")
    def instance_group(self) -> _builtins.str:
        return pulumi.get(self, "instance_group")

    @_builtins.property
    @pulumi.getter(name="instanceGroupManager")
    def instance_group_manager(self) -> _builtins.str:
        return pulumi.get(self, "instance_group_manager")

    @_builtins.property
    @pulumi.getter(name="lastAppliedAt")
    def last_applied_at(self) -> _builtins.str:
        return pulumi.get(self, "last_applied_at")

    @_builtins.property
    @pulumi.getter(name="maxMembershipCount")
    def max_membership_count(self) -> _builtins.float:
        return pulumi.get(self, "max_membership_count")

    @_builtins.property
    @pulumi.getter(name="membershipCount")
    def membership_count(self) -> _builtins.float:
        return pulumi.get(self, "membership_count")

    @_builtins.property
    @pulumi.getter(name="minMembershipCount")
    def min_membership_count(self) -> _builtins.float:
        return pulumi.get(self, "min_membership_count")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nextRunAt")
    def next_run_at(self) -> _builtins.str:
        return pulumi.get(self, "next_run_at")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="runAt")
    def run_at(self) -> _builtins.str:
        return pulumi.get(self, "run_at")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="targetManager")
    def target_manager(self) -> _builtins.str:
        return pulumi.get(self, "target_manager")

    @_builtins.property
    @pulumi.getter(name="targetManagerName")
    def target_manager_name(self) -> _builtins.str:
        return pulumi.get(self, "target_manager_name")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")


class AwaitableGetIsInstanceGroupManagerActionResult(GetIsInstanceGroupManagerActionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsInstanceGroupManagerActionResult(
            action_id=self.action_id,
            action_type=self.action_type,
            auto_delete=self.auto_delete,
            auto_delete_timeout=self.auto_delete_timeout,
            created_at=self.created_at,
            cron_spec=self.cron_spec,
            id=self.id,
            instance_group=self.instance_group,
            instance_group_manager=self.instance_group_manager,
            last_applied_at=self.last_applied_at,
            max_membership_count=self.max_membership_count,
            membership_count=self.membership_count,
            min_membership_count=self.min_membership_count,
            name=self.name,
            next_run_at=self.next_run_at,
            resource_type=self.resource_type,
            run_at=self.run_at,
            status=self.status,
            target_manager=self.target_manager,
            target_manager_name=self.target_manager_name,
            updated_at=self.updated_at)


def get_is_instance_group_manager_action(id: Optional[_builtins.str] = None,
                                         instance_group: Optional[_builtins.str] = None,
                                         instance_group_manager: Optional[_builtins.str] = None,
                                         name: Optional[_builtins.str] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsInstanceGroupManagerActionResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceGroup'] = instance_group
    __args__['instanceGroupManager'] = instance_group_manager
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsInstanceGroupManagerAction:getIsInstanceGroupManagerAction', __args__, opts=opts, typ=GetIsInstanceGroupManagerActionResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsInstanceGroupManagerActionResult(
        action_id=pulumi.get(__ret__, 'action_id'),
        action_type=pulumi.get(__ret__, 'action_type'),
        auto_delete=pulumi.get(__ret__, 'auto_delete'),
        auto_delete_timeout=pulumi.get(__ret__, 'auto_delete_timeout'),
        created_at=pulumi.get(__ret__, 'created_at'),
        cron_spec=pulumi.get(__ret__, 'cron_spec'),
        id=pulumi.get(__ret__, 'id'),
        instance_group=pulumi.get(__ret__, 'instance_group'),
        instance_group_manager=pulumi.get(__ret__, 'instance_group_manager'),
        last_applied_at=pulumi.get(__ret__, 'last_applied_at'),
        max_membership_count=pulumi.get(__ret__, 'max_membership_count'),
        membership_count=pulumi.get(__ret__, 'membership_count'),
        min_membership_count=pulumi.get(__ret__, 'min_membership_count'),
        name=pulumi.get(__ret__, 'name'),
        next_run_at=pulumi.get(__ret__, 'next_run_at'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        run_at=pulumi.get(__ret__, 'run_at'),
        status=pulumi.get(__ret__, 'status'),
        target_manager=pulumi.get(__ret__, 'target_manager'),
        target_manager_name=pulumi.get(__ret__, 'target_manager_name'),
        updated_at=pulumi.get(__ret__, 'updated_at'))
def get_is_instance_group_manager_action_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                instance_group: Optional[pulumi.Input[_builtins.str]] = None,
                                                instance_group_manager: Optional[pulumi.Input[_builtins.str]] = None,
                                                name: Optional[pulumi.Input[_builtins.str]] = None,
                                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsInstanceGroupManagerActionResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceGroup'] = instance_group
    __args__['instanceGroupManager'] = instance_group_manager
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsInstanceGroupManagerAction:getIsInstanceGroupManagerAction', __args__, opts=opts, typ=GetIsInstanceGroupManagerActionResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsInstanceGroupManagerActionResult(
        action_id=pulumi.get(__response__, 'action_id'),
        action_type=pulumi.get(__response__, 'action_type'),
        auto_delete=pulumi.get(__response__, 'auto_delete'),
        auto_delete_timeout=pulumi.get(__response__, 'auto_delete_timeout'),
        created_at=pulumi.get(__response__, 'created_at'),
        cron_spec=pulumi.get(__response__, 'cron_spec'),
        id=pulumi.get(__response__, 'id'),
        instance_group=pulumi.get(__response__, 'instance_group'),
        instance_group_manager=pulumi.get(__response__, 'instance_group_manager'),
        last_applied_at=pulumi.get(__response__, 'last_applied_at'),
        max_membership_count=pulumi.get(__response__, 'max_membership_count'),
        membership_count=pulumi.get(__response__, 'membership_count'),
        min_membership_count=pulumi.get(__response__, 'min_membership_count'),
        name=pulumi.get(__response__, 'name'),
        next_run_at=pulumi.get(__response__, 'next_run_at'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        run_at=pulumi.get(__response__, 'run_at'),
        status=pulumi.get(__response__, 'status'),
        target_manager=pulumi.get(__response__, 'target_manager'),
        target_manager_name=pulumi.get(__response__, 'target_manager_name'),
        updated_at=pulumi.get(__response__, 'updated_at')))
