# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SatelliteHostArgs', 'SatelliteHost']

@pulumi.input_type
class SatelliteHostArgs:
    def __init__(__self__, *,
                 host_id: pulumi.Input[_builtins.str],
                 location: pulumi.Input[_builtins.str],
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 host_provider: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 satellite_host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['SatelliteHostTimeoutsArgs']] = None,
                 wait_till: Optional[pulumi.Input[_builtins.str]] = None,
                 worker_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a SatelliteHost resource.
        :param pulumi.Input[_builtins.str] host_id: The specific host ID to assign to a Satellite location or cluster
        :param pulumi.Input[_builtins.str] location: The name or ID of the Satellite location
        :param pulumi.Input[_builtins.str] cluster: The name or ID of a Satellite location or cluster to assign the host to
        :param pulumi.Input[_builtins.str] host_provider: Host Provider
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] labels: List of labels for the host
        :param pulumi.Input[_builtins.str] wait_till: Wait until location is normal
        :param pulumi.Input[_builtins.str] worker_pool: The name or ID of the worker pool within the cluster to assign the host to
        :param pulumi.Input[_builtins.str] zone: The zone within the cluster to assign the host to
        """
        pulumi.set(__self__, "host_id", host_id)
        pulumi.set(__self__, "location", location)
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if host_provider is not None:
            pulumi.set(__self__, "host_provider", host_provider)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if satellite_host_id is not None:
            pulumi.set(__self__, "satellite_host_id", satellite_host_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if wait_till is not None:
            pulumi.set(__self__, "wait_till", wait_till)
        if worker_pool is not None:
            pulumi.set(__self__, "worker_pool", worker_pool)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> pulumi.Input[_builtins.str]:
        """
        The specific host ID to assign to a Satellite location or cluster
        """
        return pulumi.get(self, "host_id")

    @host_id.setter
    def host_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "host_id", value)

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Input[_builtins.str]:
        """
        The name or ID of the Satellite location
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name or ID of a Satellite location or cluster to assign the host to
        """
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster", value)

    @_builtins.property
    @pulumi.getter(name="hostProvider")
    def host_provider(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Host Provider
        """
        return pulumi.get(self, "host_provider")

    @host_provider.setter
    def host_provider(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_provider", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of labels for the host
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter(name="satelliteHostId")
    def satellite_host_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "satellite_host_id")

    @satellite_host_id.setter
    def satellite_host_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "satellite_host_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['SatelliteHostTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['SatelliteHostTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="waitTill")
    def wait_till(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Wait until location is normal
        """
        return pulumi.get(self, "wait_till")

    @wait_till.setter
    def wait_till(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "wait_till", value)

    @_builtins.property
    @pulumi.getter(name="workerPool")
    def worker_pool(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name or ID of the worker pool within the cluster to assign the host to
        """
        return pulumi.get(self, "worker_pool")

    @worker_pool.setter
    def worker_pool(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "worker_pool", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The zone within the cluster to assign the host to
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class _SatelliteHostState:
    def __init__(__self__, *,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 host_provider: Optional[pulumi.Input[_builtins.str]] = None,
                 host_state: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 satellite_host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['SatelliteHostTimeoutsArgs']] = None,
                 wait_till: Optional[pulumi.Input[_builtins.str]] = None,
                 worker_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SatelliteHost resources.
        :param pulumi.Input[_builtins.str] cluster: The name or ID of a Satellite location or cluster to assign the host to
        :param pulumi.Input[_builtins.str] host_id: The specific host ID to assign to a Satellite location or cluster
        :param pulumi.Input[_builtins.str] host_provider: Host Provider
        :param pulumi.Input[_builtins.str] host_state: Health status of the host
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] labels: List of labels for the host
        :param pulumi.Input[_builtins.str] location: The name or ID of the Satellite location
        :param pulumi.Input[_builtins.str] wait_till: Wait until location is normal
        :param pulumi.Input[_builtins.str] worker_pool: The name or ID of the worker pool within the cluster to assign the host to
        :param pulumi.Input[_builtins.str] zone: The zone within the cluster to assign the host to
        """
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if host_id is not None:
            pulumi.set(__self__, "host_id", host_id)
        if host_provider is not None:
            pulumi.set(__self__, "host_provider", host_provider)
        if host_state is not None:
            pulumi.set(__self__, "host_state", host_state)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if satellite_host_id is not None:
            pulumi.set(__self__, "satellite_host_id", satellite_host_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if wait_till is not None:
            pulumi.set(__self__, "wait_till", wait_till)
        if worker_pool is not None:
            pulumi.set(__self__, "worker_pool", worker_pool)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name or ID of a Satellite location or cluster to assign the host to
        """
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster", value)

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The specific host ID to assign to a Satellite location or cluster
        """
        return pulumi.get(self, "host_id")

    @host_id.setter
    def host_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_id", value)

    @_builtins.property
    @pulumi.getter(name="hostProvider")
    def host_provider(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Host Provider
        """
        return pulumi.get(self, "host_provider")

    @host_provider.setter
    def host_provider(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_provider", value)

    @_builtins.property
    @pulumi.getter(name="hostState")
    def host_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Health status of the host
        """
        return pulumi.get(self, "host_state")

    @host_state.setter
    def host_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_state", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of labels for the host
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name or ID of the Satellite location
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter(name="satelliteHostId")
    def satellite_host_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "satellite_host_id")

    @satellite_host_id.setter
    def satellite_host_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "satellite_host_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['SatelliteHostTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['SatelliteHostTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="waitTill")
    def wait_till(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Wait until location is normal
        """
        return pulumi.get(self, "wait_till")

    @wait_till.setter
    def wait_till(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "wait_till", value)

    @_builtins.property
    @pulumi.getter(name="workerPool")
    def worker_pool(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name or ID of the worker pool within the cluster to assign the host to
        """
        return pulumi.get(self, "worker_pool")

    @worker_pool.setter
    def worker_pool(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "worker_pool", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The zone within the cluster to assign the host to
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zone", value)


@pulumi.type_token("ibm:index/satelliteHost:SatelliteHost")
class SatelliteHost(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 host_provider: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 satellite_host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['SatelliteHostTimeoutsArgs', 'SatelliteHostTimeoutsArgsDict']]] = None,
                 wait_till: Optional[pulumi.Input[_builtins.str]] = None,
                 worker_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a SatelliteHost resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster: The name or ID of a Satellite location or cluster to assign the host to
        :param pulumi.Input[_builtins.str] host_id: The specific host ID to assign to a Satellite location or cluster
        :param pulumi.Input[_builtins.str] host_provider: Host Provider
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] labels: List of labels for the host
        :param pulumi.Input[_builtins.str] location: The name or ID of the Satellite location
        :param pulumi.Input[_builtins.str] wait_till: Wait until location is normal
        :param pulumi.Input[_builtins.str] worker_pool: The name or ID of the worker pool within the cluster to assign the host to
        :param pulumi.Input[_builtins.str] zone: The zone within the cluster to assign the host to
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SatelliteHostArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SatelliteHost resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SatelliteHostArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SatelliteHostArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 host_provider: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 satellite_host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['SatelliteHostTimeoutsArgs', 'SatelliteHostTimeoutsArgsDict']]] = None,
                 wait_till: Optional[pulumi.Input[_builtins.str]] = None,
                 worker_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SatelliteHostArgs.__new__(SatelliteHostArgs)

            __props__.__dict__["cluster"] = cluster
            if host_id is None and not opts.urn:
                raise TypeError("Missing required property 'host_id'")
            __props__.__dict__["host_id"] = host_id
            __props__.__dict__["host_provider"] = host_provider
            __props__.__dict__["labels"] = labels
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["satellite_host_id"] = satellite_host_id
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["wait_till"] = wait_till
            __props__.__dict__["worker_pool"] = worker_pool
            __props__.__dict__["zone"] = zone
            __props__.__dict__["host_state"] = None
        super(SatelliteHost, __self__).__init__(
            'ibm:index/satelliteHost:SatelliteHost',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster: Optional[pulumi.Input[_builtins.str]] = None,
            host_id: Optional[pulumi.Input[_builtins.str]] = None,
            host_provider: Optional[pulumi.Input[_builtins.str]] = None,
            host_state: Optional[pulumi.Input[_builtins.str]] = None,
            labels: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            location: Optional[pulumi.Input[_builtins.str]] = None,
            satellite_host_id: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['SatelliteHostTimeoutsArgs', 'SatelliteHostTimeoutsArgsDict']]] = None,
            wait_till: Optional[pulumi.Input[_builtins.str]] = None,
            worker_pool: Optional[pulumi.Input[_builtins.str]] = None,
            zone: Optional[pulumi.Input[_builtins.str]] = None) -> 'SatelliteHost':
        """
        Get an existing SatelliteHost resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster: The name or ID of a Satellite location or cluster to assign the host to
        :param pulumi.Input[_builtins.str] host_id: The specific host ID to assign to a Satellite location or cluster
        :param pulumi.Input[_builtins.str] host_provider: Host Provider
        :param pulumi.Input[_builtins.str] host_state: Health status of the host
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] labels: List of labels for the host
        :param pulumi.Input[_builtins.str] location: The name or ID of the Satellite location
        :param pulumi.Input[_builtins.str] wait_till: Wait until location is normal
        :param pulumi.Input[_builtins.str] worker_pool: The name or ID of the worker pool within the cluster to assign the host to
        :param pulumi.Input[_builtins.str] zone: The zone within the cluster to assign the host to
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SatelliteHostState.__new__(_SatelliteHostState)

        __props__.__dict__["cluster"] = cluster
        __props__.__dict__["host_id"] = host_id
        __props__.__dict__["host_provider"] = host_provider
        __props__.__dict__["host_state"] = host_state
        __props__.__dict__["labels"] = labels
        __props__.__dict__["location"] = location
        __props__.__dict__["satellite_host_id"] = satellite_host_id
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["wait_till"] = wait_till
        __props__.__dict__["worker_pool"] = worker_pool
        __props__.__dict__["zone"] = zone
        return SatelliteHost(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> pulumi.Output[_builtins.str]:
        """
        The name or ID of a Satellite location or cluster to assign the host to
        """
        return pulumi.get(self, "cluster")

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> pulumi.Output[_builtins.str]:
        """
        The specific host ID to assign to a Satellite location or cluster
        """
        return pulumi.get(self, "host_id")

    @_builtins.property
    @pulumi.getter(name="hostProvider")
    def host_provider(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Host Provider
        """
        return pulumi.get(self, "host_provider")

    @_builtins.property
    @pulumi.getter(name="hostState")
    def host_state(self) -> pulumi.Output[_builtins.str]:
        """
        Health status of the host
        """
        return pulumi.get(self, "host_state")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of labels for the host
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Output[_builtins.str]:
        """
        The name or ID of the Satellite location
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter(name="satelliteHostId")
    def satellite_host_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "satellite_host_id")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.SatelliteHostTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter(name="waitTill")
    def wait_till(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Wait until location is normal
        """
        return pulumi.get(self, "wait_till")

    @_builtins.property
    @pulumi.getter(name="workerPool")
    def worker_pool(self) -> pulumi.Output[_builtins.str]:
        """
        The name or ID of the worker pool within the cluster to assign the host to
        """
        return pulumi.get(self, "worker_pool")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> pulumi.Output[_builtins.str]:
        """
        The zone within the cluster to assign the host to
        """
        return pulumi.get(self, "zone")

