# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ResourceKeyArgs', 'ResourceKey']

@pulumi.input_type
class ResourceKeyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 resource_alias_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 role: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['ResourceKeyTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a ResourceKey resource.
        :param pulumi.Input[_builtins.str] name: The name of the resource key
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] parameters: Arbitrary parameters to pass. Must be a JSON object
        :param pulumi.Input[_builtins.str] resource_alias_id: The id of the resource alias for which to create resource key
        :param pulumi.Input[_builtins.str] resource_instance_id: The id of the resource instance for which to create resource key
        :param pulumi.Input[_builtins.str] role: Name of the user role.Valid roles are Writer, Reader, Manager, Administrator, Operator, Viewer, Editor and Custom Roles.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if resource_alias_id is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""resource_alias_id is deprecated: Deprecated""")
        if resource_alias_id is not None:
            pulumi.set(__self__, "resource_alias_id", resource_alias_id)
        if resource_instance_id is not None:
            pulumi.set(__self__, "resource_instance_id", resource_instance_id)
        if resource_key_id is not None:
            pulumi.set(__self__, "resource_key_id", resource_key_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the resource key
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Arbitrary parameters to pass. Must be a JSON object
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter(name="resourceAliasId")
    @_utilities.deprecated("""Deprecated""")
    def resource_alias_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The id of the resource alias for which to create resource key
        """
        return pulumi.get(self, "resource_alias_id")

    @resource_alias_id.setter
    def resource_alias_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_alias_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceInstanceId")
    def resource_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The id of the resource instance for which to create resource key
        """
        return pulumi.get(self, "resource_instance_id")

    @resource_instance_id.setter
    def resource_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceKeyId")
    def resource_key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "resource_key_id")

    @resource_key_id.setter
    def resource_key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_key_id", value)

    @_builtins.property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the user role.Valid roles are Writer, Reader, Manager, Administrator, Operator, Viewer, Editor and Custom Roles.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ResourceKeyTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ResourceKeyTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _ResourceKeyState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 credentials: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 credentials_json: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 deleted_at: Optional[pulumi.Input[_builtins.str]] = None,
                 deleted_by: Optional[pulumi.Input[_builtins.str]] = None,
                 guid: Optional[pulumi.Input[_builtins.str]] = None,
                 iam_compatible: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 onetime_credentials: Optional[pulumi.Input[_builtins.bool]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 resource_alias_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_instance_url: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 role: Optional[pulumi.Input[_builtins.str]] = None,
                 source_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['ResourceKeyTimeoutsArgs']] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_by: Optional[pulumi.Input[_builtins.str]] = None,
                 url: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ResourceKey resources.
        :param pulumi.Input[_builtins.str] account_id: An alpha-numeric value identifying the account ID.
        :param pulumi.Input[_builtins.str] created_at: The date when the key was created.
        :param pulumi.Input[_builtins.str] created_by: The subject who created the key.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] credentials: Credentials asociated with the key
        :param pulumi.Input[_builtins.str] credentials_json: Credentials asociated with the key in json string
        :param pulumi.Input[_builtins.str] crn: crn of resource key
        :param pulumi.Input[_builtins.str] deleted_at: The date when the key was deleted.
        :param pulumi.Input[_builtins.str] deleted_by: The subject who deleted the key.
        :param pulumi.Input[_builtins.str] guid: When you create a new key, a globally unique identifier (GUID) is assigned.
        :param pulumi.Input[_builtins.bool] iam_compatible: Specifies whether the key's credentials support IAM.
        :param pulumi.Input[_builtins.str] name: The name of the resource key
        :param pulumi.Input[_builtins.bool] onetime_credentials: onetime_credentials of resource key
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] parameters: Arbitrary parameters to pass. Must be a JSON object
        :param pulumi.Input[_builtins.str] resource_alias_id: The id of the resource alias for which to create resource key
        :param pulumi.Input[_builtins.str] resource_group_id: The short ID of the resource group.
        :param pulumi.Input[_builtins.str] resource_instance_id: The id of the resource instance for which to create resource key
        :param pulumi.Input[_builtins.str] resource_instance_url: The relative path to the resource.
        :param pulumi.Input[_builtins.str] role: Name of the user role.Valid roles are Writer, Reader, Manager, Administrator, Operator, Viewer, Editor and Custom Roles.
        :param pulumi.Input[_builtins.str] source_crn: The CRN of resource instance or alias associated to the key.
        :param pulumi.Input[_builtins.str] state: The state of the key.
        :param pulumi.Input[_builtins.str] status: Status of resource key
        :param pulumi.Input[_builtins.str] updated_at: The date when the key was last updated.
        :param pulumi.Input[_builtins.str] updated_by: The subject who updated the key.
        :param pulumi.Input[_builtins.str] url: When you created a new key, a relative URL path is created identifying the location of the key.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if credentials_json is not None:
            pulumi.set(__self__, "credentials_json", credentials_json)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if deleted_at is not None:
            pulumi.set(__self__, "deleted_at", deleted_at)
        if deleted_by is not None:
            pulumi.set(__self__, "deleted_by", deleted_by)
        if guid is not None:
            pulumi.set(__self__, "guid", guid)
        if iam_compatible is not None:
            pulumi.set(__self__, "iam_compatible", iam_compatible)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if onetime_credentials is not None:
            pulumi.set(__self__, "onetime_credentials", onetime_credentials)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if resource_alias_id is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""resource_alias_id is deprecated: Deprecated""")
        if resource_alias_id is not None:
            pulumi.set(__self__, "resource_alias_id", resource_alias_id)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if resource_instance_id is not None:
            pulumi.set(__self__, "resource_instance_id", resource_instance_id)
        if resource_instance_url is not None:
            pulumi.set(__self__, "resource_instance_url", resource_instance_url)
        if resource_key_id is not None:
            pulumi.set(__self__, "resource_key_id", resource_key_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if source_crn is not None:
            pulumi.set(__self__, "source_crn", source_crn)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        An alpha-numeric value identifying the account ID.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_id", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date when the key was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The subject who created the key.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Credentials asociated with the key
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "credentials", value)

    @_builtins.property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Credentials asociated with the key in json string
        """
        return pulumi.get(self, "credentials_json")

    @credentials_json.setter
    def credentials_json(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "credentials_json", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        crn of resource key
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="deletedAt")
    def deleted_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date when the key was deleted.
        """
        return pulumi.get(self, "deleted_at")

    @deleted_at.setter
    def deleted_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "deleted_at", value)

    @_builtins.property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The subject who deleted the key.
        """
        return pulumi.get(self, "deleted_by")

    @deleted_by.setter
    def deleted_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "deleted_by", value)

    @_builtins.property
    @pulumi.getter
    def guid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        When you create a new key, a globally unique identifier (GUID) is assigned.
        """
        return pulumi.get(self, "guid")

    @guid.setter
    def guid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "guid", value)

    @_builtins.property
    @pulumi.getter(name="iamCompatible")
    def iam_compatible(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the key's credentials support IAM.
        """
        return pulumi.get(self, "iam_compatible")

    @iam_compatible.setter
    def iam_compatible(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "iam_compatible", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the resource key
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="onetimeCredentials")
    def onetime_credentials(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        onetime_credentials of resource key
        """
        return pulumi.get(self, "onetime_credentials")

    @onetime_credentials.setter
    def onetime_credentials(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "onetime_credentials", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Arbitrary parameters to pass. Must be a JSON object
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter(name="resourceAliasId")
    @_utilities.deprecated("""Deprecated""")
    def resource_alias_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The id of the resource alias for which to create resource key
        """
        return pulumi.get(self, "resource_alias_id")

    @resource_alias_id.setter
    def resource_alias_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_alias_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The short ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceInstanceId")
    def resource_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The id of the resource instance for which to create resource key
        """
        return pulumi.get(self, "resource_instance_id")

    @resource_instance_id.setter
    def resource_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceInstanceUrl")
    def resource_instance_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The relative path to the resource.
        """
        return pulumi.get(self, "resource_instance_url")

    @resource_instance_url.setter
    def resource_instance_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_instance_url", value)

    @_builtins.property
    @pulumi.getter(name="resourceKeyId")
    def resource_key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "resource_key_id")

    @resource_key_id.setter
    def resource_key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_key_id", value)

    @_builtins.property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the user role.Valid roles are Writer, Reader, Manager, Administrator, Operator, Viewer, Editor and Custom Roles.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role", value)

    @_builtins.property
    @pulumi.getter(name="sourceCrn")
    def source_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN of resource instance or alias associated to the key.
        """
        return pulumi.get(self, "source_crn")

    @source_crn.setter
    def source_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_crn", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The state of the key.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Status of resource key
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ResourceKeyTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ResourceKeyTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date when the key was last updated.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The subject who updated the key.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_by", value)

    @_builtins.property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        When you created a new key, a relative URL path is created identifying the location of the key.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "url", value)


@pulumi.type_token("ibm:index/resourceKey:ResourceKey")
class ResourceKey(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 resource_alias_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 role: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['ResourceKeyTimeoutsArgs', 'ResourceKeyTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a ResourceKey resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: The name of the resource key
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] parameters: Arbitrary parameters to pass. Must be a JSON object
        :param pulumi.Input[_builtins.str] resource_alias_id: The id of the resource alias for which to create resource key
        :param pulumi.Input[_builtins.str] resource_instance_id: The id of the resource instance for which to create resource key
        :param pulumi.Input[_builtins.str] role: Name of the user role.Valid roles are Writer, Reader, Manager, Administrator, Operator, Viewer, Editor and Custom Roles.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ResourceKeyArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ResourceKey resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ResourceKeyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResourceKeyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 resource_alias_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 role: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['ResourceKeyTimeoutsArgs', 'ResourceKeyTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResourceKeyArgs.__new__(ResourceKeyArgs)

            __props__.__dict__["name"] = name
            __props__.__dict__["parameters"] = parameters
            __props__.__dict__["resource_alias_id"] = resource_alias_id
            __props__.__dict__["resource_instance_id"] = resource_instance_id
            __props__.__dict__["resource_key_id"] = resource_key_id
            __props__.__dict__["role"] = role
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["account_id"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["credentials"] = None
            __props__.__dict__["credentials_json"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["deleted_at"] = None
            __props__.__dict__["deleted_by"] = None
            __props__.__dict__["guid"] = None
            __props__.__dict__["iam_compatible"] = None
            __props__.__dict__["onetime_credentials"] = None
            __props__.__dict__["resource_group_id"] = None
            __props__.__dict__["resource_instance_url"] = None
            __props__.__dict__["source_crn"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["updated_by"] = None
            __props__.__dict__["url"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["credentials", "credentialsJson"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ResourceKey, __self__).__init__(
            'ibm:index/resourceKey:ResourceKey',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            created_by: Optional[pulumi.Input[_builtins.str]] = None,
            credentials: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            credentials_json: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            deleted_at: Optional[pulumi.Input[_builtins.str]] = None,
            deleted_by: Optional[pulumi.Input[_builtins.str]] = None,
            guid: Optional[pulumi.Input[_builtins.str]] = None,
            iam_compatible: Optional[pulumi.Input[_builtins.bool]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            onetime_credentials: Optional[pulumi.Input[_builtins.bool]] = None,
            parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            resource_alias_id: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            resource_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            resource_instance_url: Optional[pulumi.Input[_builtins.str]] = None,
            resource_key_id: Optional[pulumi.Input[_builtins.str]] = None,
            role: Optional[pulumi.Input[_builtins.str]] = None,
            source_crn: Optional[pulumi.Input[_builtins.str]] = None,
            state: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            timeouts: Optional[pulumi.Input[Union['ResourceKeyTimeoutsArgs', 'ResourceKeyTimeoutsArgsDict']]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            updated_by: Optional[pulumi.Input[_builtins.str]] = None,
            url: Optional[pulumi.Input[_builtins.str]] = None) -> 'ResourceKey':
        """
        Get an existing ResourceKey resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] account_id: An alpha-numeric value identifying the account ID.
        :param pulumi.Input[_builtins.str] created_at: The date when the key was created.
        :param pulumi.Input[_builtins.str] created_by: The subject who created the key.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] credentials: Credentials asociated with the key
        :param pulumi.Input[_builtins.str] credentials_json: Credentials asociated with the key in json string
        :param pulumi.Input[_builtins.str] crn: crn of resource key
        :param pulumi.Input[_builtins.str] deleted_at: The date when the key was deleted.
        :param pulumi.Input[_builtins.str] deleted_by: The subject who deleted the key.
        :param pulumi.Input[_builtins.str] guid: When you create a new key, a globally unique identifier (GUID) is assigned.
        :param pulumi.Input[_builtins.bool] iam_compatible: Specifies whether the key's credentials support IAM.
        :param pulumi.Input[_builtins.str] name: The name of the resource key
        :param pulumi.Input[_builtins.bool] onetime_credentials: onetime_credentials of resource key
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] parameters: Arbitrary parameters to pass. Must be a JSON object
        :param pulumi.Input[_builtins.str] resource_alias_id: The id of the resource alias for which to create resource key
        :param pulumi.Input[_builtins.str] resource_group_id: The short ID of the resource group.
        :param pulumi.Input[_builtins.str] resource_instance_id: The id of the resource instance for which to create resource key
        :param pulumi.Input[_builtins.str] resource_instance_url: The relative path to the resource.
        :param pulumi.Input[_builtins.str] role: Name of the user role.Valid roles are Writer, Reader, Manager, Administrator, Operator, Viewer, Editor and Custom Roles.
        :param pulumi.Input[_builtins.str] source_crn: The CRN of resource instance or alias associated to the key.
        :param pulumi.Input[_builtins.str] state: The state of the key.
        :param pulumi.Input[_builtins.str] status: Status of resource key
        :param pulumi.Input[_builtins.str] updated_at: The date when the key was last updated.
        :param pulumi.Input[_builtins.str] updated_by: The subject who updated the key.
        :param pulumi.Input[_builtins.str] url: When you created a new key, a relative URL path is created identifying the location of the key.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ResourceKeyState.__new__(_ResourceKeyState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["credentials"] = credentials
        __props__.__dict__["credentials_json"] = credentials_json
        __props__.__dict__["crn"] = crn
        __props__.__dict__["deleted_at"] = deleted_at
        __props__.__dict__["deleted_by"] = deleted_by
        __props__.__dict__["guid"] = guid
        __props__.__dict__["iam_compatible"] = iam_compatible
        __props__.__dict__["name"] = name
        __props__.__dict__["onetime_credentials"] = onetime_credentials
        __props__.__dict__["parameters"] = parameters
        __props__.__dict__["resource_alias_id"] = resource_alias_id
        __props__.__dict__["resource_group_id"] = resource_group_id
        __props__.__dict__["resource_instance_id"] = resource_instance_id
        __props__.__dict__["resource_instance_url"] = resource_instance_url
        __props__.__dict__["resource_key_id"] = resource_key_id
        __props__.__dict__["role"] = role
        __props__.__dict__["source_crn"] = source_crn
        __props__.__dict__["state"] = state
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["updated_by"] = updated_by
        __props__.__dict__["url"] = url
        return ResourceKey(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[_builtins.str]:
        """
        An alpha-numeric value identifying the account ID.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date when the key was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[_builtins.str]:
        """
        The subject who created the key.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def credentials(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Credentials asociated with the key
        """
        return pulumi.get(self, "credentials")

    @_builtins.property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> pulumi.Output[_builtins.str]:
        """
        Credentials asociated with the key in json string
        """
        return pulumi.get(self, "credentials_json")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        crn of resource key
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="deletedAt")
    def deleted_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date when the key was deleted.
        """
        return pulumi.get(self, "deleted_at")

    @_builtins.property
    @pulumi.getter(name="deletedBy")
    def deleted_by(self) -> pulumi.Output[_builtins.str]:
        """
        The subject who deleted the key.
        """
        return pulumi.get(self, "deleted_by")

    @_builtins.property
    @pulumi.getter
    def guid(self) -> pulumi.Output[_builtins.str]:
        """
        When you create a new key, a globally unique identifier (GUID) is assigned.
        """
        return pulumi.get(self, "guid")

    @_builtins.property
    @pulumi.getter(name="iamCompatible")
    def iam_compatible(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether the key's credentials support IAM.
        """
        return pulumi.get(self, "iam_compatible")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the resource key
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="onetimeCredentials")
    def onetime_credentials(self) -> pulumi.Output[_builtins.bool]:
        """
        onetime_credentials of resource key
        """
        return pulumi.get(self, "onetime_credentials")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Arbitrary parameters to pass. Must be a JSON object
        """
        return pulumi.get(self, "parameters")

    @_builtins.property
    @pulumi.getter(name="resourceAliasId")
    @_utilities.deprecated("""Deprecated""")
    def resource_alias_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The id of the resource alias for which to create resource key
        """
        return pulumi.get(self, "resource_alias_id")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        The short ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter(name="resourceInstanceId")
    def resource_instance_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The id of the resource instance for which to create resource key
        """
        return pulumi.get(self, "resource_instance_id")

    @_builtins.property
    @pulumi.getter(name="resourceInstanceUrl")
    def resource_instance_url(self) -> pulumi.Output[_builtins.str]:
        """
        The relative path to the resource.
        """
        return pulumi.get(self, "resource_instance_url")

    @_builtins.property
    @pulumi.getter(name="resourceKeyId")
    def resource_key_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "resource_key_id")

    @_builtins.property
    @pulumi.getter
    def role(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the user role.Valid roles are Writer, Reader, Manager, Administrator, Operator, Viewer, Editor and Custom Roles.
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter(name="sourceCrn")
    def source_crn(self) -> pulumi.Output[_builtins.str]:
        """
        The CRN of resource instance or alias associated to the key.
        """
        return pulumi.get(self, "source_crn")

    @_builtins.property
    @pulumi.getter
    def state(self) -> pulumi.Output[_builtins.str]:
        """
        The state of the key.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Status of resource key
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.ResourceKeyTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date when the key was last updated.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> pulumi.Output[_builtins.str]:
        """
        The subject who updated the key.
        """
        return pulumi.get(self, "updated_by")

    @_builtins.property
    @pulumi.getter
    def url(self) -> pulumi.Output[_builtins.str]:
        """
        When you created a new key, a relative URL path is created identifying the location of the key.
        """
        return pulumi.get(self, "url")

