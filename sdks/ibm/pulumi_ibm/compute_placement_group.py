# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ComputePlacementGroupArgs', 'ComputePlacementGroup']

@pulumi.input_type
class ComputePlacementGroupArgs:
    def __init__(__self__, *,
                 datacenter: pulumi.Input[_builtins.str],
                 pod: pulumi.Input[_builtins.str],
                 compute_placement_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 rule: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['ComputePlacementGroupTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a ComputePlacementGroup resource.
        :param pulumi.Input[_builtins.str] datacenter: Dataceneter name
        :param pulumi.Input[_builtins.str] pod: Pod name
        :param pulumi.Input[_builtins.str] name: Name
        :param pulumi.Input[_builtins.str] rule: Rule info
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        """
        pulumi.set(__self__, "datacenter", datacenter)
        pulumi.set(__self__, "pod", pod)
        if compute_placement_group_id is not None:
            pulumi.set(__self__, "compute_placement_group_id", compute_placement_group_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rule is not None:
            pulumi.set(__self__, "rule", rule)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> pulumi.Input[_builtins.str]:
        """
        Dataceneter name
        """
        return pulumi.get(self, "datacenter")

    @datacenter.setter
    def datacenter(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "datacenter", value)

    @_builtins.property
    @pulumi.getter
    def pod(self) -> pulumi.Input[_builtins.str]:
        """
        Pod name
        """
        return pulumi.get(self, "pod")

    @pod.setter
    def pod(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pod", value)

    @_builtins.property
    @pulumi.getter(name="computePlacementGroupId")
    def compute_placement_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compute_placement_group_id")

    @compute_placement_group_id.setter
    def compute_placement_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_placement_group_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def rule(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Rule info
        """
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rule", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ComputePlacementGroupTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ComputePlacementGroupTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _ComputePlacementGroupState:
    def __init__(__self__, *,
                 compute_placement_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 pod: Optional[pulumi.Input[_builtins.str]] = None,
                 rule: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['ComputePlacementGroupTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering ComputePlacementGroup resources.
        :param pulumi.Input[_builtins.str] datacenter: Dataceneter name
        :param pulumi.Input[_builtins.str] name: Name
        :param pulumi.Input[_builtins.str] pod: Pod name
        :param pulumi.Input[_builtins.str] rule: Rule info
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        """
        if compute_placement_group_id is not None:
            pulumi.set(__self__, "compute_placement_group_id", compute_placement_group_id)
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pod is not None:
            pulumi.set(__self__, "pod", pod)
        if rule is not None:
            pulumi.set(__self__, "rule", rule)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="computePlacementGroupId")
    def compute_placement_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compute_placement_group_id")

    @compute_placement_group_id.setter
    def compute_placement_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compute_placement_group_id", value)

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Dataceneter name
        """
        return pulumi.get(self, "datacenter")

    @datacenter.setter
    def datacenter(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "datacenter", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def pod(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Pod name
        """
        return pulumi.get(self, "pod")

    @pod.setter
    def pod(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pod", value)

    @_builtins.property
    @pulumi.getter
    def rule(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Rule info
        """
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rule", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ComputePlacementGroupTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ComputePlacementGroupTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/computePlacementGroup:ComputePlacementGroup")
class ComputePlacementGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compute_placement_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 pod: Optional[pulumi.Input[_builtins.str]] = None,
                 rule: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['ComputePlacementGroupTimeoutsArgs', 'ComputePlacementGroupTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a ComputePlacementGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] datacenter: Dataceneter name
        :param pulumi.Input[_builtins.str] name: Name
        :param pulumi.Input[_builtins.str] pod: Pod name
        :param pulumi.Input[_builtins.str] rule: Rule info
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ComputePlacementGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ComputePlacementGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ComputePlacementGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ComputePlacementGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compute_placement_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 pod: Optional[pulumi.Input[_builtins.str]] = None,
                 rule: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['ComputePlacementGroupTimeoutsArgs', 'ComputePlacementGroupTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ComputePlacementGroupArgs.__new__(ComputePlacementGroupArgs)

            __props__.__dict__["compute_placement_group_id"] = compute_placement_group_id
            if datacenter is None and not opts.urn:
                raise TypeError("Missing required property 'datacenter'")
            __props__.__dict__["datacenter"] = datacenter
            __props__.__dict__["name"] = name
            if pod is None and not opts.urn:
                raise TypeError("Missing required property 'pod'")
            __props__.__dict__["pod"] = pod
            __props__.__dict__["rule"] = rule
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeouts"] = timeouts
        super(ComputePlacementGroup, __self__).__init__(
            'ibm:index/computePlacementGroup:ComputePlacementGroup',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            compute_placement_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            datacenter: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            pod: Optional[pulumi.Input[_builtins.str]] = None,
            rule: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            timeouts: Optional[pulumi.Input[Union['ComputePlacementGroupTimeoutsArgs', 'ComputePlacementGroupTimeoutsArgsDict']]] = None) -> 'ComputePlacementGroup':
        """
        Get an existing ComputePlacementGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] datacenter: Dataceneter name
        :param pulumi.Input[_builtins.str] name: Name
        :param pulumi.Input[_builtins.str] pod: Pod name
        :param pulumi.Input[_builtins.str] rule: Rule info
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ComputePlacementGroupState.__new__(_ComputePlacementGroupState)

        __props__.__dict__["compute_placement_group_id"] = compute_placement_group_id
        __props__.__dict__["datacenter"] = datacenter
        __props__.__dict__["name"] = name
        __props__.__dict__["pod"] = pod
        __props__.__dict__["rule"] = rule
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timeouts"] = timeouts
        return ComputePlacementGroup(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="computePlacementGroupId")
    def compute_placement_group_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "compute_placement_group_id")

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> pulumi.Output[_builtins.str]:
        """
        Dataceneter name
        """
        return pulumi.get(self, "datacenter")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def pod(self) -> pulumi.Output[_builtins.str]:
        """
        Pod name
        """
        return pulumi.get(self, "pod")

    @_builtins.property
    @pulumi.getter
    def rule(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Rule info
        """
        return pulumi.get(self, "rule")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.ComputePlacementGroupTimeouts']]:
        return pulumi.get(self, "timeouts")

