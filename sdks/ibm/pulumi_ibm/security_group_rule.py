# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['SecurityGroupRuleArgs', 'SecurityGroupRule']

@pulumi.input_type
class SecurityGroupRuleArgs:
    def __init__(__self__, *,
                 direction: pulumi.Input[_builtins.str],
                 security_group_id: pulumi.Input[_builtins.float],
                 ether_type: Optional[pulumi.Input[_builtins.str]] = None,
                 port_range_max: Optional[pulumi.Input[_builtins.float]] = None,
                 port_range_min: Optional[pulumi.Input[_builtins.float]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_group_id: Optional[pulumi.Input[_builtins.float]] = None,
                 remote_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_rule_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a SecurityGroupRule resource.
        :param pulumi.Input[_builtins.str] direction: Direction of rule: ingress or egress
        :param pulumi.Input[_builtins.float] security_group_id: Security group ID
        :param pulumi.Input[_builtins.str] ether_type: IP version IPv4 or IPv6
        :param pulumi.Input[_builtins.float] port_range_max: Port number max range
        :param pulumi.Input[_builtins.float] port_range_min: Port number minimum range
        :param pulumi.Input[_builtins.str] protocol: icmp, tcp or udp
        :param pulumi.Input[_builtins.float] remote_group_id: remote group ID
        :param pulumi.Input[_builtins.str] remote_ip: Remote IP Address
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "security_group_id", security_group_id)
        if ether_type is not None:
            pulumi.set(__self__, "ether_type", ether_type)
        if port_range_max is not None:
            pulumi.set(__self__, "port_range_max", port_range_max)
        if port_range_min is not None:
            pulumi.set(__self__, "port_range_min", port_range_min)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if remote_group_id is not None:
            pulumi.set(__self__, "remote_group_id", remote_group_id)
        if remote_ip is not None:
            pulumi.set(__self__, "remote_ip", remote_ip)
        if security_group_rule_id is not None:
            pulumi.set(__self__, "security_group_rule_id", security_group_rule_id)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> pulumi.Input[_builtins.str]:
        """
        Direction of rule: ingress or egress
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> pulumi.Input[_builtins.float]:
        """
        Security group ID
        """
        return pulumi.get(self, "security_group_id")

    @security_group_id.setter
    def security_group_id(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "security_group_id", value)

    @_builtins.property
    @pulumi.getter(name="etherType")
    def ether_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP version IPv4 or IPv6
        """
        return pulumi.get(self, "ether_type")

    @ether_type.setter
    def ether_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ether_type", value)

    @_builtins.property
    @pulumi.getter(name="portRangeMax")
    def port_range_max(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Port number max range
        """
        return pulumi.get(self, "port_range_max")

    @port_range_max.setter
    def port_range_max(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port_range_max", value)

    @_builtins.property
    @pulumi.getter(name="portRangeMin")
    def port_range_min(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Port number minimum range
        """
        return pulumi.get(self, "port_range_min")

    @port_range_min.setter
    def port_range_min(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port_range_min", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        icmp, tcp or udp
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="remoteGroupId")
    def remote_group_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        remote group ID
        """
        return pulumi.get(self, "remote_group_id")

    @remote_group_id.setter
    def remote_group_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "remote_group_id", value)

    @_builtins.property
    @pulumi.getter(name="remoteIp")
    def remote_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Remote IP Address
        """
        return pulumi.get(self, "remote_ip")

    @remote_ip.setter
    def remote_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "remote_ip", value)

    @_builtins.property
    @pulumi.getter(name="securityGroupRuleId")
    def security_group_rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "security_group_rule_id")

    @security_group_rule_id.setter
    def security_group_rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "security_group_rule_id", value)


@pulumi.input_type
class _SecurityGroupRuleState:
    def __init__(__self__, *,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 ether_type: Optional[pulumi.Input[_builtins.str]] = None,
                 port_range_max: Optional[pulumi.Input[_builtins.float]] = None,
                 port_range_min: Optional[pulumi.Input[_builtins.float]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_group_id: Optional[pulumi.Input[_builtins.float]] = None,
                 remote_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_id: Optional[pulumi.Input[_builtins.float]] = None,
                 security_group_rule_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SecurityGroupRule resources.
        :param pulumi.Input[_builtins.str] direction: Direction of rule: ingress or egress
        :param pulumi.Input[_builtins.str] ether_type: IP version IPv4 or IPv6
        :param pulumi.Input[_builtins.float] port_range_max: Port number max range
        :param pulumi.Input[_builtins.float] port_range_min: Port number minimum range
        :param pulumi.Input[_builtins.str] protocol: icmp, tcp or udp
        :param pulumi.Input[_builtins.float] remote_group_id: remote group ID
        :param pulumi.Input[_builtins.str] remote_ip: Remote IP Address
        :param pulumi.Input[_builtins.float] security_group_id: Security group ID
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if ether_type is not None:
            pulumi.set(__self__, "ether_type", ether_type)
        if port_range_max is not None:
            pulumi.set(__self__, "port_range_max", port_range_max)
        if port_range_min is not None:
            pulumi.set(__self__, "port_range_min", port_range_min)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if remote_group_id is not None:
            pulumi.set(__self__, "remote_group_id", remote_group_id)
        if remote_ip is not None:
            pulumi.set(__self__, "remote_ip", remote_ip)
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)
        if security_group_rule_id is not None:
            pulumi.set(__self__, "security_group_rule_id", security_group_rule_id)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Direction of rule: ingress or egress
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "direction", value)

    @_builtins.property
    @pulumi.getter(name="etherType")
    def ether_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IP version IPv4 or IPv6
        """
        return pulumi.get(self, "ether_type")

    @ether_type.setter
    def ether_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ether_type", value)

    @_builtins.property
    @pulumi.getter(name="portRangeMax")
    def port_range_max(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Port number max range
        """
        return pulumi.get(self, "port_range_max")

    @port_range_max.setter
    def port_range_max(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port_range_max", value)

    @_builtins.property
    @pulumi.getter(name="portRangeMin")
    def port_range_min(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Port number minimum range
        """
        return pulumi.get(self, "port_range_min")

    @port_range_min.setter
    def port_range_min(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port_range_min", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        icmp, tcp or udp
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter(name="remoteGroupId")
    def remote_group_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        remote group ID
        """
        return pulumi.get(self, "remote_group_id")

    @remote_group_id.setter
    def remote_group_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "remote_group_id", value)

    @_builtins.property
    @pulumi.getter(name="remoteIp")
    def remote_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Remote IP Address
        """
        return pulumi.get(self, "remote_ip")

    @remote_ip.setter
    def remote_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "remote_ip", value)

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Security group ID
        """
        return pulumi.get(self, "security_group_id")

    @security_group_id.setter
    def security_group_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "security_group_id", value)

    @_builtins.property
    @pulumi.getter(name="securityGroupRuleId")
    def security_group_rule_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "security_group_rule_id")

    @security_group_rule_id.setter
    def security_group_rule_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "security_group_rule_id", value)


@pulumi.type_token("ibm:index/securityGroupRule:SecurityGroupRule")
class SecurityGroupRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 ether_type: Optional[pulumi.Input[_builtins.str]] = None,
                 port_range_max: Optional[pulumi.Input[_builtins.float]] = None,
                 port_range_min: Optional[pulumi.Input[_builtins.float]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_group_id: Optional[pulumi.Input[_builtins.float]] = None,
                 remote_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_id: Optional[pulumi.Input[_builtins.float]] = None,
                 security_group_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a SecurityGroupRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] direction: Direction of rule: ingress or egress
        :param pulumi.Input[_builtins.str] ether_type: IP version IPv4 or IPv6
        :param pulumi.Input[_builtins.float] port_range_max: Port number max range
        :param pulumi.Input[_builtins.float] port_range_min: Port number minimum range
        :param pulumi.Input[_builtins.str] protocol: icmp, tcp or udp
        :param pulumi.Input[_builtins.float] remote_group_id: remote group ID
        :param pulumi.Input[_builtins.str] remote_ip: Remote IP Address
        :param pulumi.Input[_builtins.float] security_group_id: Security group ID
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SecurityGroupRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SecurityGroupRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SecurityGroupRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SecurityGroupRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 direction: Optional[pulumi.Input[_builtins.str]] = None,
                 ether_type: Optional[pulumi.Input[_builtins.str]] = None,
                 port_range_max: Optional[pulumi.Input[_builtins.float]] = None,
                 port_range_min: Optional[pulumi.Input[_builtins.float]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_group_id: Optional[pulumi.Input[_builtins.float]] = None,
                 remote_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 security_group_id: Optional[pulumi.Input[_builtins.float]] = None,
                 security_group_rule_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SecurityGroupRuleArgs.__new__(SecurityGroupRuleArgs)

            if direction is None and not opts.urn:
                raise TypeError("Missing required property 'direction'")
            __props__.__dict__["direction"] = direction
            __props__.__dict__["ether_type"] = ether_type
            __props__.__dict__["port_range_max"] = port_range_max
            __props__.__dict__["port_range_min"] = port_range_min
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["remote_group_id"] = remote_group_id
            __props__.__dict__["remote_ip"] = remote_ip
            if security_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'security_group_id'")
            __props__.__dict__["security_group_id"] = security_group_id
            __props__.__dict__["security_group_rule_id"] = security_group_rule_id
        super(SecurityGroupRule, __self__).__init__(
            'ibm:index/securityGroupRule:SecurityGroupRule',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            direction: Optional[pulumi.Input[_builtins.str]] = None,
            ether_type: Optional[pulumi.Input[_builtins.str]] = None,
            port_range_max: Optional[pulumi.Input[_builtins.float]] = None,
            port_range_min: Optional[pulumi.Input[_builtins.float]] = None,
            protocol: Optional[pulumi.Input[_builtins.str]] = None,
            remote_group_id: Optional[pulumi.Input[_builtins.float]] = None,
            remote_ip: Optional[pulumi.Input[_builtins.str]] = None,
            security_group_id: Optional[pulumi.Input[_builtins.float]] = None,
            security_group_rule_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'SecurityGroupRule':
        """
        Get an existing SecurityGroupRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] direction: Direction of rule: ingress or egress
        :param pulumi.Input[_builtins.str] ether_type: IP version IPv4 or IPv6
        :param pulumi.Input[_builtins.float] port_range_max: Port number max range
        :param pulumi.Input[_builtins.float] port_range_min: Port number minimum range
        :param pulumi.Input[_builtins.str] protocol: icmp, tcp or udp
        :param pulumi.Input[_builtins.float] remote_group_id: remote group ID
        :param pulumi.Input[_builtins.str] remote_ip: Remote IP Address
        :param pulumi.Input[_builtins.float] security_group_id: Security group ID
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SecurityGroupRuleState.__new__(_SecurityGroupRuleState)

        __props__.__dict__["direction"] = direction
        __props__.__dict__["ether_type"] = ether_type
        __props__.__dict__["port_range_max"] = port_range_max
        __props__.__dict__["port_range_min"] = port_range_min
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["remote_group_id"] = remote_group_id
        __props__.__dict__["remote_ip"] = remote_ip
        __props__.__dict__["security_group_id"] = security_group_id
        __props__.__dict__["security_group_rule_id"] = security_group_rule_id
        return SecurityGroupRule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def direction(self) -> pulumi.Output[_builtins.str]:
        """
        Direction of rule: ingress or egress
        """
        return pulumi.get(self, "direction")

    @_builtins.property
    @pulumi.getter(name="etherType")
    def ether_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        IP version IPv4 or IPv6
        """
        return pulumi.get(self, "ether_type")

    @_builtins.property
    @pulumi.getter(name="portRangeMax")
    def port_range_max(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Port number max range
        """
        return pulumi.get(self, "port_range_max")

    @_builtins.property
    @pulumi.getter(name="portRangeMin")
    def port_range_min(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Port number minimum range
        """
        return pulumi.get(self, "port_range_min")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        icmp, tcp or udp
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="remoteGroupId")
    def remote_group_id(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        remote group ID
        """
        return pulumi.get(self, "remote_group_id")

    @_builtins.property
    @pulumi.getter(name="remoteIp")
    def remote_ip(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Remote IP Address
        """
        return pulumi.get(self, "remote_ip")

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> pulumi.Output[_builtins.float]:
        """
        Security group ID
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter(name="securityGroupRuleId")
    def security_group_rule_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "security_group_rule_id")

