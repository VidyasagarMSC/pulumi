# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsSnapshotConsistencyGroupsResult',
    'AwaitableGetIsSnapshotConsistencyGroupsResult',
    'get_is_snapshot_consistency_groups',
    'get_is_snapshot_consistency_groups_output',
]

@pulumi.output_type
class GetIsSnapshotConsistencyGroupsResult:
    """
    A collection of values returned by getIsSnapshotConsistencyGroups.
    """
    def __init__(__self__, backup_policy_plan=None, id=None, name=None, resource_group=None, snapshot_consistency_groups=None):
        if backup_policy_plan and not isinstance(backup_policy_plan, str):
            raise TypeError("Expected argument 'backup_policy_plan' to be a str")
        pulumi.set(__self__, "backup_policy_plan", backup_policy_plan)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resource_group and not isinstance(resource_group, str):
            raise TypeError("Expected argument 'resource_group' to be a str")
        pulumi.set(__self__, "resource_group", resource_group)
        if snapshot_consistency_groups and not isinstance(snapshot_consistency_groups, list):
            raise TypeError("Expected argument 'snapshot_consistency_groups' to be a list")
        pulumi.set(__self__, "snapshot_consistency_groups", snapshot_consistency_groups)

    @_builtins.property
    @pulumi.getter(name="backupPolicyPlan")
    def backup_policy_plan(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "backup_policy_plan")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="snapshotConsistencyGroups")
    def snapshot_consistency_groups(self) -> Sequence['outputs.GetIsSnapshotConsistencyGroupsSnapshotConsistencyGroupResult']:
        return pulumi.get(self, "snapshot_consistency_groups")


class AwaitableGetIsSnapshotConsistencyGroupsResult(GetIsSnapshotConsistencyGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsSnapshotConsistencyGroupsResult(
            backup_policy_plan=self.backup_policy_plan,
            id=self.id,
            name=self.name,
            resource_group=self.resource_group,
            snapshot_consistency_groups=self.snapshot_consistency_groups)


def get_is_snapshot_consistency_groups(backup_policy_plan: Optional[_builtins.str] = None,
                                       id: Optional[_builtins.str] = None,
                                       name: Optional[_builtins.str] = None,
                                       resource_group: Optional[_builtins.str] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsSnapshotConsistencyGroupsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['backupPolicyPlan'] = backup_policy_plan
    __args__['id'] = id
    __args__['name'] = name
    __args__['resourceGroup'] = resource_group
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsSnapshotConsistencyGroups:getIsSnapshotConsistencyGroups', __args__, opts=opts, typ=GetIsSnapshotConsistencyGroupsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsSnapshotConsistencyGroupsResult(
        backup_policy_plan=pulumi.get(__ret__, 'backup_policy_plan'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        resource_group=pulumi.get(__ret__, 'resource_group'),
        snapshot_consistency_groups=pulumi.get(__ret__, 'snapshot_consistency_groups'))
def get_is_snapshot_consistency_groups_output(backup_policy_plan: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              resource_group: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsSnapshotConsistencyGroupsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['backupPolicyPlan'] = backup_policy_plan
    __args__['id'] = id
    __args__['name'] = name
    __args__['resourceGroup'] = resource_group
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsSnapshotConsistencyGroups:getIsSnapshotConsistencyGroups', __args__, opts=opts, typ=GetIsSnapshotConsistencyGroupsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsSnapshotConsistencyGroupsResult(
        backup_policy_plan=pulumi.get(__response__, 'backup_policy_plan'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        resource_group=pulumi.get(__response__, 'resource_group'),
        snapshot_consistency_groups=pulumi.get(__response__, 'snapshot_consistency_groups')))
