# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetContainerAddonsResult',
    'AwaitableGetContainerAddonsResult',
    'get_container_addons',
    'get_container_addons_output',
]

@pulumi.output_type
class GetContainerAddonsResult:
    """
    A collection of values returned by getContainerAddons.
    """
    def __init__(__self__, addons=None, cluster=None, id=None, resource_group_id=None):
        if addons and not isinstance(addons, list):
            raise TypeError("Expected argument 'addons' to be a list")
        pulumi.set(__self__, "addons", addons)
        if cluster and not isinstance(cluster, str):
            raise TypeError("Expected argument 'cluster' to be a str")
        pulumi.set(__self__, "cluster", cluster)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if resource_group_id and not isinstance(resource_group_id, str):
            raise TypeError("Expected argument 'resource_group_id' to be a str")
        pulumi.set(__self__, "resource_group_id", resource_group_id)

    @_builtins.property
    @pulumi.getter
    def addons(self) -> Sequence['outputs.GetContainerAddonsAddonResult']:
        return pulumi.get(self, "addons")

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> _builtins.str:
        return pulumi.get(self, "cluster")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> _builtins.str:
        return pulumi.get(self, "resource_group_id")


class AwaitableGetContainerAddonsResult(GetContainerAddonsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetContainerAddonsResult(
            addons=self.addons,
            cluster=self.cluster,
            id=self.id,
            resource_group_id=self.resource_group_id)


def get_container_addons(cluster: Optional[_builtins.str] = None,
                         id: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetContainerAddonsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cluster'] = cluster
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getContainerAddons:getContainerAddons', __args__, opts=opts, typ=GetContainerAddonsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetContainerAddonsResult(
        addons=pulumi.get(__ret__, 'addons'),
        cluster=pulumi.get(__ret__, 'cluster'),
        id=pulumi.get(__ret__, 'id'),
        resource_group_id=pulumi.get(__ret__, 'resource_group_id'))
def get_container_addons_output(cluster: Optional[pulumi.Input[_builtins.str]] = None,
                                id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetContainerAddonsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cluster'] = cluster
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getContainerAddons:getContainerAddons', __args__, opts=opts, typ=GetContainerAddonsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetContainerAddonsResult(
        addons=pulumi.get(__response__, 'addons'),
        cluster=pulumi.get(__response__, 'cluster'),
        id=pulumi.get(__response__, 'id'),
        resource_group_id=pulumi.get(__response__, 'resource_group_id')))
