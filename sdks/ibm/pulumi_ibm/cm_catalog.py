# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CmCatalogArgs', 'CmCatalog']

@pulumi.input_type
class CmCatalogArgs:
    def __init__(__self__, *,
                 catalog_banner_url: Optional[pulumi.Input[_builtins.str]] = None,
                 catalog_filters: Optional[pulumi.Input[Sequence[pulumi.Input['CmCatalogCatalogFilterArgs']]]] = None,
                 catalog_icon_url: Optional[pulumi.Input[_builtins.str]] = None,
                 cm_catalog_id: Optional[pulumi.Input[_builtins.str]] = None,
                 disabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input['CmCatalogFeatureArgs']]]] = None,
                 kind: Optional[pulumi.Input[_builtins.str]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 label_i18n: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 short_description: Optional[pulumi.Input[_builtins.str]] = None,
                 short_description_i18n: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 target_account_contexts: Optional[pulumi.Input[Sequence[pulumi.Input['CmCatalogTargetAccountContextArgs']]]] = None):
        """
        The set of arguments for constructing a CmCatalog resource.
        :param pulumi.Input[_builtins.str] catalog_banner_url: URL for a banner image for this catalog.
        :param pulumi.Input[Sequence[pulumi.Input['CmCatalogCatalogFilterArgs']]] catalog_filters: Filters for account and catalog filters.
        :param pulumi.Input[_builtins.str] catalog_icon_url: URL for an icon associated with this catalog.
        :param pulumi.Input[_builtins.bool] disabled: Denotes whether a catalog is disabled.
        :param pulumi.Input[Sequence[pulumi.Input['CmCatalogFeatureArgs']]] features: List of features associated with this catalog.
        :param pulumi.Input[_builtins.str] kind: Kind of catalog. Supported kinds are offering and vpe.
        :param pulumi.Input[_builtins.str] label: Display Name in the requested language.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] label_i18n: A map of translated strings, by language code.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] metadata: Catalog specific metadata.
        :param pulumi.Input[_builtins.str] resource_group_id: Resource group id the catalog is owned by.
        :param pulumi.Input[_builtins.str] short_description: Description in the requested language.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] short_description_i18n: A map of translated strings, by language code.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags associated with this catalog.
        :param pulumi.Input[Sequence[pulumi.Input['CmCatalogTargetAccountContextArgs']]] target_account_contexts: List of target accounts contexts on this catalog.
        """
        if catalog_banner_url is not None:
            pulumi.set(__self__, "catalog_banner_url", catalog_banner_url)
        if catalog_filters is not None:
            pulumi.set(__self__, "catalog_filters", catalog_filters)
        if catalog_icon_url is not None:
            pulumi.set(__self__, "catalog_icon_url", catalog_icon_url)
        if cm_catalog_id is not None:
            pulumi.set(__self__, "cm_catalog_id", cm_catalog_id)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if label_i18n is not None:
            pulumi.set(__self__, "label_i18n", label_i18n)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if short_description is not None:
            pulumi.set(__self__, "short_description", short_description)
        if short_description_i18n is not None:
            pulumi.set(__self__, "short_description_i18n", short_description_i18n)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target_account_contexts is not None:
            pulumi.set(__self__, "target_account_contexts", target_account_contexts)

    @_builtins.property
    @pulumi.getter(name="catalogBannerUrl")
    def catalog_banner_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        URL for a banner image for this catalog.
        """
        return pulumi.get(self, "catalog_banner_url")

    @catalog_banner_url.setter
    def catalog_banner_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "catalog_banner_url", value)

    @_builtins.property
    @pulumi.getter(name="catalogFilters")
    def catalog_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CmCatalogCatalogFilterArgs']]]]:
        """
        Filters for account and catalog filters.
        """
        return pulumi.get(self, "catalog_filters")

    @catalog_filters.setter
    def catalog_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CmCatalogCatalogFilterArgs']]]]):
        pulumi.set(self, "catalog_filters", value)

    @_builtins.property
    @pulumi.getter(name="catalogIconUrl")
    def catalog_icon_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        URL for an icon associated with this catalog.
        """
        return pulumi.get(self, "catalog_icon_url")

    @catalog_icon_url.setter
    def catalog_icon_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "catalog_icon_url", value)

    @_builtins.property
    @pulumi.getter(name="cmCatalogId")
    def cm_catalog_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cm_catalog_id")

    @cm_catalog_id.setter
    def cm_catalog_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cm_catalog_id", value)

    @_builtins.property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Denotes whether a catalog is disabled.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disabled", value)

    @_builtins.property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CmCatalogFeatureArgs']]]]:
        """
        List of features associated with this catalog.
        """
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CmCatalogFeatureArgs']]]]):
        pulumi.set(self, "features", value)

    @_builtins.property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Kind of catalog. Supported kinds are offering and vpe.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kind", value)

    @_builtins.property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Display Name in the requested language.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "label", value)

    @_builtins.property
    @pulumi.getter(name="labelI18n")
    def label_i18n(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        A map of translated strings, by language code.
        """
        return pulumi.get(self, "label_i18n")

    @label_i18n.setter
    def label_i18n(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "label_i18n", value)

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Catalog specific metadata.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "metadata", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource group id the catalog is owned by.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter(name="shortDescription")
    def short_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description in the requested language.
        """
        return pulumi.get(self, "short_description")

    @short_description.setter
    def short_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "short_description", value)

    @_builtins.property
    @pulumi.getter(name="shortDescriptionI18n")
    def short_description_i18n(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        A map of translated strings, by language code.
        """
        return pulumi.get(self, "short_description_i18n")

    @short_description_i18n.setter
    def short_description_i18n(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "short_description_i18n", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags associated with this catalog.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="targetAccountContexts")
    def target_account_contexts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CmCatalogTargetAccountContextArgs']]]]:
        """
        List of target accounts contexts on this catalog.
        """
        return pulumi.get(self, "target_account_contexts")

    @target_account_contexts.setter
    def target_account_contexts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CmCatalogTargetAccountContextArgs']]]]):
        pulumi.set(self, "target_account_contexts", value)


@pulumi.input_type
class _CmCatalogState:
    def __init__(__self__, *,
                 catalog_banner_url: Optional[pulumi.Input[_builtins.str]] = None,
                 catalog_filters: Optional[pulumi.Input[Sequence[pulumi.Input['CmCatalogCatalogFilterArgs']]]] = None,
                 catalog_icon_url: Optional[pulumi.Input[_builtins.str]] = None,
                 cm_catalog_id: Optional[pulumi.Input[_builtins.str]] = None,
                 created: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 disabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input['CmCatalogFeatureArgs']]]] = None,
                 kind: Optional[pulumi.Input[_builtins.str]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 label_i18n: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 offerings_url: Optional[pulumi.Input[_builtins.str]] = None,
                 owning_account: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 rev: Optional[pulumi.Input[_builtins.str]] = None,
                 short_description: Optional[pulumi.Input[_builtins.str]] = None,
                 short_description_i18n: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 target_account_contexts: Optional[pulumi.Input[Sequence[pulumi.Input['CmCatalogTargetAccountContextArgs']]]] = None,
                 updated: Optional[pulumi.Input[_builtins.str]] = None,
                 url: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CmCatalog resources.
        :param pulumi.Input[_builtins.str] catalog_banner_url: URL for a banner image for this catalog.
        :param pulumi.Input[Sequence[pulumi.Input['CmCatalogCatalogFilterArgs']]] catalog_filters: Filters for account and catalog filters.
        :param pulumi.Input[_builtins.str] catalog_icon_url: URL for an icon associated with this catalog.
        :param pulumi.Input[_builtins.str] created: The date-time this catalog was created.
        :param pulumi.Input[_builtins.str] crn: CRN associated with the catalog.
        :param pulumi.Input[_builtins.bool] disabled: Denotes whether a catalog is disabled.
        :param pulumi.Input[Sequence[pulumi.Input['CmCatalogFeatureArgs']]] features: List of features associated with this catalog.
        :param pulumi.Input[_builtins.str] kind: Kind of catalog. Supported kinds are offering and vpe.
        :param pulumi.Input[_builtins.str] label: Display Name in the requested language.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] label_i18n: A map of translated strings, by language code.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] metadata: Catalog specific metadata.
        :param pulumi.Input[_builtins.str] offerings_url: URL path to offerings.
        :param pulumi.Input[_builtins.str] owning_account: Account that owns catalog.
        :param pulumi.Input[_builtins.str] resource_group_id: Resource group id the catalog is owned by.
        :param pulumi.Input[_builtins.str] rev: Cloudant revision.
        :param pulumi.Input[_builtins.str] short_description: Description in the requested language.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] short_description_i18n: A map of translated strings, by language code.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags associated with this catalog.
        :param pulumi.Input[Sequence[pulumi.Input['CmCatalogTargetAccountContextArgs']]] target_account_contexts: List of target accounts contexts on this catalog.
        :param pulumi.Input[_builtins.str] updated: The date-time this catalog was last updated.
        :param pulumi.Input[_builtins.str] url: The url for this specific catalog.
        """
        if catalog_banner_url is not None:
            pulumi.set(__self__, "catalog_banner_url", catalog_banner_url)
        if catalog_filters is not None:
            pulumi.set(__self__, "catalog_filters", catalog_filters)
        if catalog_icon_url is not None:
            pulumi.set(__self__, "catalog_icon_url", catalog_icon_url)
        if cm_catalog_id is not None:
            pulumi.set(__self__, "cm_catalog_id", cm_catalog_id)
        if created is not None:
            pulumi.set(__self__, "created", created)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if label_i18n is not None:
            pulumi.set(__self__, "label_i18n", label_i18n)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if offerings_url is not None:
            pulumi.set(__self__, "offerings_url", offerings_url)
        if owning_account is not None:
            pulumi.set(__self__, "owning_account", owning_account)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if rev is not None:
            pulumi.set(__self__, "rev", rev)
        if short_description is not None:
            pulumi.set(__self__, "short_description", short_description)
        if short_description_i18n is not None:
            pulumi.set(__self__, "short_description_i18n", short_description_i18n)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target_account_contexts is not None:
            pulumi.set(__self__, "target_account_contexts", target_account_contexts)
        if updated is not None:
            pulumi.set(__self__, "updated", updated)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter(name="catalogBannerUrl")
    def catalog_banner_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        URL for a banner image for this catalog.
        """
        return pulumi.get(self, "catalog_banner_url")

    @catalog_banner_url.setter
    def catalog_banner_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "catalog_banner_url", value)

    @_builtins.property
    @pulumi.getter(name="catalogFilters")
    def catalog_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CmCatalogCatalogFilterArgs']]]]:
        """
        Filters for account and catalog filters.
        """
        return pulumi.get(self, "catalog_filters")

    @catalog_filters.setter
    def catalog_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CmCatalogCatalogFilterArgs']]]]):
        pulumi.set(self, "catalog_filters", value)

    @_builtins.property
    @pulumi.getter(name="catalogIconUrl")
    def catalog_icon_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        URL for an icon associated with this catalog.
        """
        return pulumi.get(self, "catalog_icon_url")

    @catalog_icon_url.setter
    def catalog_icon_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "catalog_icon_url", value)

    @_builtins.property
    @pulumi.getter(name="cmCatalogId")
    def cm_catalog_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cm_catalog_id")

    @cm_catalog_id.setter
    def cm_catalog_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cm_catalog_id", value)

    @_builtins.property
    @pulumi.getter
    def created(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date-time this catalog was created.
        """
        return pulumi.get(self, "created")

    @created.setter
    def created(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CRN associated with the catalog.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Denotes whether a catalog is disabled.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disabled", value)

    @_builtins.property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CmCatalogFeatureArgs']]]]:
        """
        List of features associated with this catalog.
        """
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CmCatalogFeatureArgs']]]]):
        pulumi.set(self, "features", value)

    @_builtins.property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Kind of catalog. Supported kinds are offering and vpe.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kind", value)

    @_builtins.property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Display Name in the requested language.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "label", value)

    @_builtins.property
    @pulumi.getter(name="labelI18n")
    def label_i18n(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        A map of translated strings, by language code.
        """
        return pulumi.get(self, "label_i18n")

    @label_i18n.setter
    def label_i18n(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "label_i18n", value)

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Catalog specific metadata.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "metadata", value)

    @_builtins.property
    @pulumi.getter(name="offeringsUrl")
    def offerings_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        URL path to offerings.
        """
        return pulumi.get(self, "offerings_url")

    @offerings_url.setter
    def offerings_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "offerings_url", value)

    @_builtins.property
    @pulumi.getter(name="owningAccount")
    def owning_account(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Account that owns catalog.
        """
        return pulumi.get(self, "owning_account")

    @owning_account.setter
    def owning_account(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "owning_account", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource group id the catalog is owned by.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter
    def rev(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cloudant revision.
        """
        return pulumi.get(self, "rev")

    @rev.setter
    def rev(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rev", value)

    @_builtins.property
    @pulumi.getter(name="shortDescription")
    def short_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description in the requested language.
        """
        return pulumi.get(self, "short_description")

    @short_description.setter
    def short_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "short_description", value)

    @_builtins.property
    @pulumi.getter(name="shortDescriptionI18n")
    def short_description_i18n(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        A map of translated strings, by language code.
        """
        return pulumi.get(self, "short_description_i18n")

    @short_description_i18n.setter
    def short_description_i18n(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "short_description_i18n", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags associated with this catalog.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="targetAccountContexts")
    def target_account_contexts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CmCatalogTargetAccountContextArgs']]]]:
        """
        List of target accounts contexts on this catalog.
        """
        return pulumi.get(self, "target_account_contexts")

    @target_account_contexts.setter
    def target_account_contexts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CmCatalogTargetAccountContextArgs']]]]):
        pulumi.set(self, "target_account_contexts", value)

    @_builtins.property
    @pulumi.getter
    def updated(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date-time this catalog was last updated.
        """
        return pulumi.get(self, "updated")

    @updated.setter
    def updated(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated", value)

    @_builtins.property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The url for this specific catalog.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "url", value)


@pulumi.type_token("ibm:index/cmCatalog:CmCatalog")
class CmCatalog(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 catalog_banner_url: Optional[pulumi.Input[_builtins.str]] = None,
                 catalog_filters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmCatalogCatalogFilterArgs', 'CmCatalogCatalogFilterArgsDict']]]]] = None,
                 catalog_icon_url: Optional[pulumi.Input[_builtins.str]] = None,
                 cm_catalog_id: Optional[pulumi.Input[_builtins.str]] = None,
                 disabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmCatalogFeatureArgs', 'CmCatalogFeatureArgsDict']]]]] = None,
                 kind: Optional[pulumi.Input[_builtins.str]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 label_i18n: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 short_description: Optional[pulumi.Input[_builtins.str]] = None,
                 short_description_i18n: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 target_account_contexts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmCatalogTargetAccountContextArgs', 'CmCatalogTargetAccountContextArgsDict']]]]] = None,
                 __props__=None):
        """
        Create a CmCatalog resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] catalog_banner_url: URL for a banner image for this catalog.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CmCatalogCatalogFilterArgs', 'CmCatalogCatalogFilterArgsDict']]]] catalog_filters: Filters for account and catalog filters.
        :param pulumi.Input[_builtins.str] catalog_icon_url: URL for an icon associated with this catalog.
        :param pulumi.Input[_builtins.bool] disabled: Denotes whether a catalog is disabled.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CmCatalogFeatureArgs', 'CmCatalogFeatureArgsDict']]]] features: List of features associated with this catalog.
        :param pulumi.Input[_builtins.str] kind: Kind of catalog. Supported kinds are offering and vpe.
        :param pulumi.Input[_builtins.str] label: Display Name in the requested language.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] label_i18n: A map of translated strings, by language code.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] metadata: Catalog specific metadata.
        :param pulumi.Input[_builtins.str] resource_group_id: Resource group id the catalog is owned by.
        :param pulumi.Input[_builtins.str] short_description: Description in the requested language.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] short_description_i18n: A map of translated strings, by language code.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags associated with this catalog.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CmCatalogTargetAccountContextArgs', 'CmCatalogTargetAccountContextArgsDict']]]] target_account_contexts: List of target accounts contexts on this catalog.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[CmCatalogArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CmCatalog resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CmCatalogArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CmCatalogArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 catalog_banner_url: Optional[pulumi.Input[_builtins.str]] = None,
                 catalog_filters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmCatalogCatalogFilterArgs', 'CmCatalogCatalogFilterArgsDict']]]]] = None,
                 catalog_icon_url: Optional[pulumi.Input[_builtins.str]] = None,
                 cm_catalog_id: Optional[pulumi.Input[_builtins.str]] = None,
                 disabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmCatalogFeatureArgs', 'CmCatalogFeatureArgsDict']]]]] = None,
                 kind: Optional[pulumi.Input[_builtins.str]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 label_i18n: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 short_description: Optional[pulumi.Input[_builtins.str]] = None,
                 short_description_i18n: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 target_account_contexts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmCatalogTargetAccountContextArgs', 'CmCatalogTargetAccountContextArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CmCatalogArgs.__new__(CmCatalogArgs)

            __props__.__dict__["catalog_banner_url"] = catalog_banner_url
            __props__.__dict__["catalog_filters"] = catalog_filters
            __props__.__dict__["catalog_icon_url"] = catalog_icon_url
            __props__.__dict__["cm_catalog_id"] = cm_catalog_id
            __props__.__dict__["disabled"] = disabled
            __props__.__dict__["features"] = features
            __props__.__dict__["kind"] = kind
            __props__.__dict__["label"] = label
            __props__.__dict__["label_i18n"] = label_i18n
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["resource_group_id"] = resource_group_id
            __props__.__dict__["short_description"] = short_description
            __props__.__dict__["short_description_i18n"] = short_description_i18n
            __props__.__dict__["tags"] = tags
            __props__.__dict__["target_account_contexts"] = target_account_contexts
            __props__.__dict__["created"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["offerings_url"] = None
            __props__.__dict__["owning_account"] = None
            __props__.__dict__["rev"] = None
            __props__.__dict__["updated"] = None
            __props__.__dict__["url"] = None
        super(CmCatalog, __self__).__init__(
            'ibm:index/cmCatalog:CmCatalog',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            catalog_banner_url: Optional[pulumi.Input[_builtins.str]] = None,
            catalog_filters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmCatalogCatalogFilterArgs', 'CmCatalogCatalogFilterArgsDict']]]]] = None,
            catalog_icon_url: Optional[pulumi.Input[_builtins.str]] = None,
            cm_catalog_id: Optional[pulumi.Input[_builtins.str]] = None,
            created: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            disabled: Optional[pulumi.Input[_builtins.bool]] = None,
            features: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmCatalogFeatureArgs', 'CmCatalogFeatureArgsDict']]]]] = None,
            kind: Optional[pulumi.Input[_builtins.str]] = None,
            label: Optional[pulumi.Input[_builtins.str]] = None,
            label_i18n: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            offerings_url: Optional[pulumi.Input[_builtins.str]] = None,
            owning_account: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            rev: Optional[pulumi.Input[_builtins.str]] = None,
            short_description: Optional[pulumi.Input[_builtins.str]] = None,
            short_description_i18n: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            target_account_contexts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CmCatalogTargetAccountContextArgs', 'CmCatalogTargetAccountContextArgsDict']]]]] = None,
            updated: Optional[pulumi.Input[_builtins.str]] = None,
            url: Optional[pulumi.Input[_builtins.str]] = None) -> 'CmCatalog':
        """
        Get an existing CmCatalog resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] catalog_banner_url: URL for a banner image for this catalog.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CmCatalogCatalogFilterArgs', 'CmCatalogCatalogFilterArgsDict']]]] catalog_filters: Filters for account and catalog filters.
        :param pulumi.Input[_builtins.str] catalog_icon_url: URL for an icon associated with this catalog.
        :param pulumi.Input[_builtins.str] created: The date-time this catalog was created.
        :param pulumi.Input[_builtins.str] crn: CRN associated with the catalog.
        :param pulumi.Input[_builtins.bool] disabled: Denotes whether a catalog is disabled.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CmCatalogFeatureArgs', 'CmCatalogFeatureArgsDict']]]] features: List of features associated with this catalog.
        :param pulumi.Input[_builtins.str] kind: Kind of catalog. Supported kinds are offering and vpe.
        :param pulumi.Input[_builtins.str] label: Display Name in the requested language.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] label_i18n: A map of translated strings, by language code.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] metadata: Catalog specific metadata.
        :param pulumi.Input[_builtins.str] offerings_url: URL path to offerings.
        :param pulumi.Input[_builtins.str] owning_account: Account that owns catalog.
        :param pulumi.Input[_builtins.str] resource_group_id: Resource group id the catalog is owned by.
        :param pulumi.Input[_builtins.str] rev: Cloudant revision.
        :param pulumi.Input[_builtins.str] short_description: Description in the requested language.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] short_description_i18n: A map of translated strings, by language code.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags associated with this catalog.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CmCatalogTargetAccountContextArgs', 'CmCatalogTargetAccountContextArgsDict']]]] target_account_contexts: List of target accounts contexts on this catalog.
        :param pulumi.Input[_builtins.str] updated: The date-time this catalog was last updated.
        :param pulumi.Input[_builtins.str] url: The url for this specific catalog.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CmCatalogState.__new__(_CmCatalogState)

        __props__.__dict__["catalog_banner_url"] = catalog_banner_url
        __props__.__dict__["catalog_filters"] = catalog_filters
        __props__.__dict__["catalog_icon_url"] = catalog_icon_url
        __props__.__dict__["cm_catalog_id"] = cm_catalog_id
        __props__.__dict__["created"] = created
        __props__.__dict__["crn"] = crn
        __props__.__dict__["disabled"] = disabled
        __props__.__dict__["features"] = features
        __props__.__dict__["kind"] = kind
        __props__.__dict__["label"] = label
        __props__.__dict__["label_i18n"] = label_i18n
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["offerings_url"] = offerings_url
        __props__.__dict__["owning_account"] = owning_account
        __props__.__dict__["resource_group_id"] = resource_group_id
        __props__.__dict__["rev"] = rev
        __props__.__dict__["short_description"] = short_description
        __props__.__dict__["short_description_i18n"] = short_description_i18n
        __props__.__dict__["tags"] = tags
        __props__.__dict__["target_account_contexts"] = target_account_contexts
        __props__.__dict__["updated"] = updated
        __props__.__dict__["url"] = url
        return CmCatalog(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="catalogBannerUrl")
    def catalog_banner_url(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        URL for a banner image for this catalog.
        """
        return pulumi.get(self, "catalog_banner_url")

    @_builtins.property
    @pulumi.getter(name="catalogFilters")
    def catalog_filters(self) -> pulumi.Output[Optional[Sequence['outputs.CmCatalogCatalogFilter']]]:
        """
        Filters for account and catalog filters.
        """
        return pulumi.get(self, "catalog_filters")

    @_builtins.property
    @pulumi.getter(name="catalogIconUrl")
    def catalog_icon_url(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        URL for an icon associated with this catalog.
        """
        return pulumi.get(self, "catalog_icon_url")

    @_builtins.property
    @pulumi.getter(name="cmCatalogId")
    def cm_catalog_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cm_catalog_id")

    @_builtins.property
    @pulumi.getter
    def created(self) -> pulumi.Output[_builtins.str]:
        """
        The date-time this catalog was created.
        """
        return pulumi.get(self, "created")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        CRN associated with the catalog.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def disabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Denotes whether a catalog is disabled.
        """
        return pulumi.get(self, "disabled")

    @_builtins.property
    @pulumi.getter
    def features(self) -> pulumi.Output[Optional[Sequence['outputs.CmCatalogFeature']]]:
        """
        List of features associated with this catalog.
        """
        return pulumi.get(self, "features")

    @_builtins.property
    @pulumi.getter
    def kind(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Kind of catalog. Supported kinds are offering and vpe.
        """
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter
    def label(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Display Name in the requested language.
        """
        return pulumi.get(self, "label")

    @_builtins.property
    @pulumi.getter(name="labelI18n")
    def label_i18n(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        A map of translated strings, by language code.
        """
        return pulumi.get(self, "label_i18n")

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Catalog specific metadata.
        """
        return pulumi.get(self, "metadata")

    @_builtins.property
    @pulumi.getter(name="offeringsUrl")
    def offerings_url(self) -> pulumi.Output[_builtins.str]:
        """
        URL path to offerings.
        """
        return pulumi.get(self, "offerings_url")

    @_builtins.property
    @pulumi.getter(name="owningAccount")
    def owning_account(self) -> pulumi.Output[_builtins.str]:
        """
        Account that owns catalog.
        """
        return pulumi.get(self, "owning_account")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        Resource group id the catalog is owned by.
        """
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter
    def rev(self) -> pulumi.Output[_builtins.str]:
        """
        Cloudant revision.
        """
        return pulumi.get(self, "rev")

    @_builtins.property
    @pulumi.getter(name="shortDescription")
    def short_description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Description in the requested language.
        """
        return pulumi.get(self, "short_description")

    @_builtins.property
    @pulumi.getter(name="shortDescriptionI18n")
    def short_description_i18n(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        A map of translated strings, by language code.
        """
        return pulumi.get(self, "short_description_i18n")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of tags associated with this catalog.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="targetAccountContexts")
    def target_account_contexts(self) -> pulumi.Output[Optional[Sequence['outputs.CmCatalogTargetAccountContext']]]:
        """
        List of target accounts contexts on this catalog.
        """
        return pulumi.get(self, "target_account_contexts")

    @_builtins.property
    @pulumi.getter
    def updated(self) -> pulumi.Output[_builtins.str]:
        """
        The date-time this catalog was last updated.
        """
        return pulumi.get(self, "updated")

    @_builtins.property
    @pulumi.getter
    def url(self) -> pulumi.Output[_builtins.str]:
        """
        The url for this specific catalog.
        """
        return pulumi.get(self, "url")

