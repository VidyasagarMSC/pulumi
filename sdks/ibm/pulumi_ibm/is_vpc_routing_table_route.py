# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsVpcRoutingTableRouteArgs', 'IsVpcRoutingTableRoute']

@pulumi.input_type
class IsVpcRoutingTableRouteArgs:
    def __init__(__self__, *,
                 destination: pulumi.Input[_builtins.str],
                 next_hop: pulumi.Input[_builtins.str],
                 routing_table: pulumi.Input[_builtins.str],
                 vpc: pulumi.Input[_builtins.str],
                 zone: pulumi.Input[_builtins.str],
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 advertise: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_vpc_routing_table_route_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 priority: Optional[pulumi.Input[_builtins.float]] = None,
                 timeouts: Optional[pulumi.Input['IsVpcRoutingTableRouteTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a IsVpcRoutingTableRoute resource.
        :param pulumi.Input[_builtins.str] destination: The destination of the route.
        :param pulumi.Input[_builtins.str] next_hop: If action is deliver, the next hop that packets will be delivered to. For other action values, its address will be
               0.0.0.0.
        :param pulumi.Input[_builtins.str] routing_table: The routing table identifier.
        :param pulumi.Input[_builtins.str] vpc: The VPC identifier.
        :param pulumi.Input[_builtins.str] zone: The zone to apply the route to. Traffic from subnets in this zone will be subject to this route.
        :param pulumi.Input[_builtins.str] action: The action to perform with a packet matching the route.
        :param pulumi.Input[_builtins.bool] advertise: Indicates whether this route will be advertised to the ingress sources specified by the `advertise_routes_to` routing
               table property.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this route.
        :param pulumi.Input[_builtins.float] priority: The route's priority. Smaller values have higher priority.
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "next_hop", next_hop)
        pulumi.set(__self__, "routing_table", routing_table)
        pulumi.set(__self__, "vpc", vpc)
        pulumi.set(__self__, "zone", zone)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if advertise is not None:
            pulumi.set(__self__, "advertise", advertise)
        if is_vpc_routing_table_route_id is not None:
            pulumi.set(__self__, "is_vpc_routing_table_route_id", is_vpc_routing_table_route_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def destination(self) -> pulumi.Input[_builtins.str]:
        """
        The destination of the route.
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "destination", value)

    @_builtins.property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> pulumi.Input[_builtins.str]:
        """
        If action is deliver, the next hop that packets will be delivered to. For other action values, its address will be
        0.0.0.0.
        """
        return pulumi.get(self, "next_hop")

    @next_hop.setter
    def next_hop(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "next_hop", value)

    @_builtins.property
    @pulumi.getter(name="routingTable")
    def routing_table(self) -> pulumi.Input[_builtins.str]:
        """
        The routing table identifier.
        """
        return pulumi.get(self, "routing_table")

    @routing_table.setter
    def routing_table(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "routing_table", value)

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> pulumi.Input[_builtins.str]:
        """
        The VPC identifier.
        """
        return pulumi.get(self, "vpc")

    @vpc.setter
    def vpc(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vpc", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> pulumi.Input[_builtins.str]:
        """
        The zone to apply the route to. Traffic from subnets in this zone will be subject to this route.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "zone", value)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The action to perform with a packet matching the route.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter
    def advertise(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether this route will be advertised to the ingress sources specified by the `advertise_routes_to` routing
        table property.
        """
        return pulumi.get(self, "advertise")

    @advertise.setter
    def advertise(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "advertise", value)

    @_builtins.property
    @pulumi.getter(name="isVpcRoutingTableRouteId")
    def is_vpc_routing_table_route_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_vpc_routing_table_route_id")

    @is_vpc_routing_table_route_id.setter
    def is_vpc_routing_table_route_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_vpc_routing_table_route_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user-defined name for this route.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The route's priority. Smaller values have higher priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "priority", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsVpcRoutingTableRouteTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsVpcRoutingTableRouteTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _IsVpcRoutingTableRouteState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 advertise: Optional[pulumi.Input[_builtins.bool]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 creators: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpcRoutingTableRouteCreatorArgs']]]] = None,
                 destination: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 is_vpc_routing_table_route_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 next_hop: Optional[pulumi.Input[_builtins.str]] = None,
                 origin: Optional[pulumi.Input[_builtins.str]] = None,
                 priority: Optional[pulumi.Input[_builtins.float]] = None,
                 route_id: Optional[pulumi.Input[_builtins.str]] = None,
                 routing_table: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['IsVpcRoutingTableRouteTimeoutsArgs']] = None,
                 vpc: Optional[pulumi.Input[_builtins.str]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsVpcRoutingTableRoute resources.
        :param pulumi.Input[_builtins.str] action: The action to perform with a packet matching the route.
        :param pulumi.Input[_builtins.bool] advertise: Indicates whether this route will be advertised to the ingress sources specified by the `advertise_routes_to` routing
               table property.
        :param pulumi.Input[_builtins.str] created_at: Routing table route Created At
        :param pulumi.Input[Sequence[pulumi.Input['IsVpcRoutingTableRouteCreatorArgs']]] creators: If present, the resource that created the route. Routes with this property present cannot bedirectly deleted. All routes
               with an `origin` of `learned` or `service` will have thisproperty set, and future `origin` values may also have this
               property set.
        :param pulumi.Input[_builtins.str] destination: The destination of the route.
        :param pulumi.Input[_builtins.str] href: Routing table route Href
        :param pulumi.Input[_builtins.str] lifecycle_state: Routing table route Lifecycle State
        :param pulumi.Input[_builtins.str] name: The user-defined name for this route.
        :param pulumi.Input[_builtins.str] next_hop: If action is deliver, the next hop that packets will be delivered to. For other action values, its address will be
               0.0.0.0.
        :param pulumi.Input[_builtins.str] origin: The origin of this route.
        :param pulumi.Input[_builtins.float] priority: The route's priority. Smaller values have higher priority.
        :param pulumi.Input[_builtins.str] route_id: The routing table route identifier.
        :param pulumi.Input[_builtins.str] routing_table: The routing table identifier.
        :param pulumi.Input[_builtins.str] vpc: The VPC identifier.
        :param pulumi.Input[_builtins.str] zone: The zone to apply the route to. Traffic from subnets in this zone will be subject to this route.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if advertise is not None:
            pulumi.set(__self__, "advertise", advertise)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if creators is not None:
            pulumi.set(__self__, "creators", creators)
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if is_vpc_routing_table_route_id is not None:
            pulumi.set(__self__, "is_vpc_routing_table_route_id", is_vpc_routing_table_route_id)
        if lifecycle_state is not None:
            pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if next_hop is not None:
            pulumi.set(__self__, "next_hop", next_hop)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if route_id is not None:
            pulumi.set(__self__, "route_id", route_id)
        if routing_table is not None:
            pulumi.set(__self__, "routing_table", routing_table)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if vpc is not None:
            pulumi.set(__self__, "vpc", vpc)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The action to perform with a packet matching the route.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter
    def advertise(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether this route will be advertised to the ingress sources specified by the `advertise_routes_to` routing
        table property.
        """
        return pulumi.get(self, "advertise")

    @advertise.setter
    def advertise(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "advertise", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Routing table route Created At
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def creators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsVpcRoutingTableRouteCreatorArgs']]]]:
        """
        If present, the resource that created the route. Routes with this property present cannot bedirectly deleted. All routes
        with an `origin` of `learned` or `service` will have thisproperty set, and future `origin` values may also have this
        property set.
        """
        return pulumi.get(self, "creators")

    @creators.setter
    def creators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpcRoutingTableRouteCreatorArgs']]]]):
        pulumi.set(self, "creators", value)

    @_builtins.property
    @pulumi.getter
    def destination(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The destination of the route.
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Routing table route Href
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="isVpcRoutingTableRouteId")
    def is_vpc_routing_table_route_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_vpc_routing_table_route_id")

    @is_vpc_routing_table_route_id.setter
    def is_vpc_routing_table_route_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_vpc_routing_table_route_id", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Routing table route Lifecycle State
        """
        return pulumi.get(self, "lifecycle_state")

    @lifecycle_state.setter
    def lifecycle_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lifecycle_state", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user-defined name for this route.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        If action is deliver, the next hop that packets will be delivered to. For other action values, its address will be
        0.0.0.0.
        """
        return pulumi.get(self, "next_hop")

    @next_hop.setter
    def next_hop(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "next_hop", value)

    @_builtins.property
    @pulumi.getter
    def origin(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The origin of this route.
        """
        return pulumi.get(self, "origin")

    @origin.setter
    def origin(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "origin", value)

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The route's priority. Smaller values have higher priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "priority", value)

    @_builtins.property
    @pulumi.getter(name="routeId")
    def route_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The routing table route identifier.
        """
        return pulumi.get(self, "route_id")

    @route_id.setter
    def route_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_id", value)

    @_builtins.property
    @pulumi.getter(name="routingTable")
    def routing_table(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The routing table identifier.
        """
        return pulumi.get(self, "routing_table")

    @routing_table.setter
    def routing_table(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "routing_table", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsVpcRoutingTableRouteTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsVpcRoutingTableRouteTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The VPC identifier.
        """
        return pulumi.get(self, "vpc")

    @vpc.setter
    def vpc(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The zone to apply the route to. Traffic from subnets in this zone will be subject to this route.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zone", value)


@pulumi.type_token("ibm:index/isVpcRoutingTableRoute:IsVpcRoutingTableRoute")
class IsVpcRoutingTableRoute(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 advertise: Optional[pulumi.Input[_builtins.bool]] = None,
                 destination: Optional[pulumi.Input[_builtins.str]] = None,
                 is_vpc_routing_table_route_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 next_hop: Optional[pulumi.Input[_builtins.str]] = None,
                 priority: Optional[pulumi.Input[_builtins.float]] = None,
                 routing_table: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsVpcRoutingTableRouteTimeoutsArgs', 'IsVpcRoutingTableRouteTimeoutsArgsDict']]] = None,
                 vpc: Optional[pulumi.Input[_builtins.str]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IsVpcRoutingTableRoute resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: The action to perform with a packet matching the route.
        :param pulumi.Input[_builtins.bool] advertise: Indicates whether this route will be advertised to the ingress sources specified by the `advertise_routes_to` routing
               table property.
        :param pulumi.Input[_builtins.str] destination: The destination of the route.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this route.
        :param pulumi.Input[_builtins.str] next_hop: If action is deliver, the next hop that packets will be delivered to. For other action values, its address will be
               0.0.0.0.
        :param pulumi.Input[_builtins.float] priority: The route's priority. Smaller values have higher priority.
        :param pulumi.Input[_builtins.str] routing_table: The routing table identifier.
        :param pulumi.Input[_builtins.str] vpc: The VPC identifier.
        :param pulumi.Input[_builtins.str] zone: The zone to apply the route to. Traffic from subnets in this zone will be subject to this route.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsVpcRoutingTableRouteArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsVpcRoutingTableRoute resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsVpcRoutingTableRouteArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsVpcRoutingTableRouteArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 advertise: Optional[pulumi.Input[_builtins.bool]] = None,
                 destination: Optional[pulumi.Input[_builtins.str]] = None,
                 is_vpc_routing_table_route_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 next_hop: Optional[pulumi.Input[_builtins.str]] = None,
                 priority: Optional[pulumi.Input[_builtins.float]] = None,
                 routing_table: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsVpcRoutingTableRouteTimeoutsArgs', 'IsVpcRoutingTableRouteTimeoutsArgsDict']]] = None,
                 vpc: Optional[pulumi.Input[_builtins.str]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsVpcRoutingTableRouteArgs.__new__(IsVpcRoutingTableRouteArgs)

            __props__.__dict__["action"] = action
            __props__.__dict__["advertise"] = advertise
            if destination is None and not opts.urn:
                raise TypeError("Missing required property 'destination'")
            __props__.__dict__["destination"] = destination
            __props__.__dict__["is_vpc_routing_table_route_id"] = is_vpc_routing_table_route_id
            __props__.__dict__["name"] = name
            if next_hop is None and not opts.urn:
                raise TypeError("Missing required property 'next_hop'")
            __props__.__dict__["next_hop"] = next_hop
            __props__.__dict__["priority"] = priority
            if routing_table is None and not opts.urn:
                raise TypeError("Missing required property 'routing_table'")
            __props__.__dict__["routing_table"] = routing_table
            __props__.__dict__["timeouts"] = timeouts
            if vpc is None and not opts.urn:
                raise TypeError("Missing required property 'vpc'")
            __props__.__dict__["vpc"] = vpc
            if zone is None and not opts.urn:
                raise TypeError("Missing required property 'zone'")
            __props__.__dict__["zone"] = zone
            __props__.__dict__["created_at"] = None
            __props__.__dict__["creators"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["lifecycle_state"] = None
            __props__.__dict__["origin"] = None
            __props__.__dict__["route_id"] = None
        super(IsVpcRoutingTableRoute, __self__).__init__(
            'ibm:index/isVpcRoutingTableRoute:IsVpcRoutingTableRoute',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[_builtins.str]] = None,
            advertise: Optional[pulumi.Input[_builtins.bool]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            creators: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVpcRoutingTableRouteCreatorArgs', 'IsVpcRoutingTableRouteCreatorArgsDict']]]]] = None,
            destination: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            is_vpc_routing_table_route_id: Optional[pulumi.Input[_builtins.str]] = None,
            lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            next_hop: Optional[pulumi.Input[_builtins.str]] = None,
            origin: Optional[pulumi.Input[_builtins.str]] = None,
            priority: Optional[pulumi.Input[_builtins.float]] = None,
            route_id: Optional[pulumi.Input[_builtins.str]] = None,
            routing_table: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['IsVpcRoutingTableRouteTimeoutsArgs', 'IsVpcRoutingTableRouteTimeoutsArgsDict']]] = None,
            vpc: Optional[pulumi.Input[_builtins.str]] = None,
            zone: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsVpcRoutingTableRoute':
        """
        Get an existing IsVpcRoutingTableRoute resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: The action to perform with a packet matching the route.
        :param pulumi.Input[_builtins.bool] advertise: Indicates whether this route will be advertised to the ingress sources specified by the `advertise_routes_to` routing
               table property.
        :param pulumi.Input[_builtins.str] created_at: Routing table route Created At
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsVpcRoutingTableRouteCreatorArgs', 'IsVpcRoutingTableRouteCreatorArgsDict']]]] creators: If present, the resource that created the route. Routes with this property present cannot bedirectly deleted. All routes
               with an `origin` of `learned` or `service` will have thisproperty set, and future `origin` values may also have this
               property set.
        :param pulumi.Input[_builtins.str] destination: The destination of the route.
        :param pulumi.Input[_builtins.str] href: Routing table route Href
        :param pulumi.Input[_builtins.str] lifecycle_state: Routing table route Lifecycle State
        :param pulumi.Input[_builtins.str] name: The user-defined name for this route.
        :param pulumi.Input[_builtins.str] next_hop: If action is deliver, the next hop that packets will be delivered to. For other action values, its address will be
               0.0.0.0.
        :param pulumi.Input[_builtins.str] origin: The origin of this route.
        :param pulumi.Input[_builtins.float] priority: The route's priority. Smaller values have higher priority.
        :param pulumi.Input[_builtins.str] route_id: The routing table route identifier.
        :param pulumi.Input[_builtins.str] routing_table: The routing table identifier.
        :param pulumi.Input[_builtins.str] vpc: The VPC identifier.
        :param pulumi.Input[_builtins.str] zone: The zone to apply the route to. Traffic from subnets in this zone will be subject to this route.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsVpcRoutingTableRouteState.__new__(_IsVpcRoutingTableRouteState)

        __props__.__dict__["action"] = action
        __props__.__dict__["advertise"] = advertise
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["creators"] = creators
        __props__.__dict__["destination"] = destination
        __props__.__dict__["href"] = href
        __props__.__dict__["is_vpc_routing_table_route_id"] = is_vpc_routing_table_route_id
        __props__.__dict__["lifecycle_state"] = lifecycle_state
        __props__.__dict__["name"] = name
        __props__.__dict__["next_hop"] = next_hop
        __props__.__dict__["origin"] = origin
        __props__.__dict__["priority"] = priority
        __props__.__dict__["route_id"] = route_id
        __props__.__dict__["routing_table"] = routing_table
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["vpc"] = vpc
        __props__.__dict__["zone"] = zone
        return IsVpcRoutingTableRoute(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The action to perform with a packet matching the route.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter
    def advertise(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Indicates whether this route will be advertised to the ingress sources specified by the `advertise_routes_to` routing
        table property.
        """
        return pulumi.get(self, "advertise")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Routing table route Created At
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def creators(self) -> pulumi.Output[Sequence['outputs.IsVpcRoutingTableRouteCreator']]:
        """
        If present, the resource that created the route. Routes with this property present cannot bedirectly deleted. All routes
        with an `origin` of `learned` or `service` will have thisproperty set, and future `origin` values may also have this
        property set.
        """
        return pulumi.get(self, "creators")

    @_builtins.property
    @pulumi.getter
    def destination(self) -> pulumi.Output[_builtins.str]:
        """
        The destination of the route.
        """
        return pulumi.get(self, "destination")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        Routing table route Href
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="isVpcRoutingTableRouteId")
    def is_vpc_routing_table_route_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_vpc_routing_table_route_id")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> pulumi.Output[_builtins.str]:
        """
        Routing table route Lifecycle State
        """
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The user-defined name for this route.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> pulumi.Output[_builtins.str]:
        """
        If action is deliver, the next hop that packets will be delivered to. For other action values, its address will be
        0.0.0.0.
        """
        return pulumi.get(self, "next_hop")

    @_builtins.property
    @pulumi.getter
    def origin(self) -> pulumi.Output[_builtins.str]:
        """
        The origin of this route.
        """
        return pulumi.get(self, "origin")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> pulumi.Output[_builtins.float]:
        """
        The route's priority. Smaller values have higher priority.
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="routeId")
    def route_id(self) -> pulumi.Output[_builtins.str]:
        """
        The routing table route identifier.
        """
        return pulumi.get(self, "route_id")

    @_builtins.property
    @pulumi.getter(name="routingTable")
    def routing_table(self) -> pulumi.Output[_builtins.str]:
        """
        The routing table identifier.
        """
        return pulumi.get(self, "routing_table")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IsVpcRoutingTableRouteTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> pulumi.Output[_builtins.str]:
        """
        The VPC identifier.
        """
        return pulumi.get(self, "vpc")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> pulumi.Output[_builtins.str]:
        """
        The zone to apply the route to. Traffic from subnets in this zone will be subject to this route.
        """
        return pulumi.get(self, "zone")

