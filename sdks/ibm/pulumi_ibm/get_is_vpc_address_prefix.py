# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsVpcAddressPrefixResult',
    'AwaitableGetIsVpcAddressPrefixResult',
    'get_is_vpc_address_prefix',
    'get_is_vpc_address_prefix_output',
]

@pulumi.output_type
class GetIsVpcAddressPrefixResult:
    """
    A collection of values returned by getIsVpcAddressPrefix.
    """
    def __init__(__self__, address_prefix=None, address_prefix_name=None, cidr=None, created_at=None, has_subnets=None, href=None, id=None, is_default=None, name=None, vpc=None, vpc_name=None, zones=None):
        if address_prefix and not isinstance(address_prefix, str):
            raise TypeError("Expected argument 'address_prefix' to be a str")
        pulumi.set(__self__, "address_prefix", address_prefix)
        if address_prefix_name and not isinstance(address_prefix_name, str):
            raise TypeError("Expected argument 'address_prefix_name' to be a str")
        pulumi.set(__self__, "address_prefix_name", address_prefix_name)
        if cidr and not isinstance(cidr, str):
            raise TypeError("Expected argument 'cidr' to be a str")
        pulumi.set(__self__, "cidr", cidr)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if has_subnets and not isinstance(has_subnets, bool):
            raise TypeError("Expected argument 'has_subnets' to be a bool")
        pulumi.set(__self__, "has_subnets", has_subnets)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_default and not isinstance(is_default, bool):
            raise TypeError("Expected argument 'is_default' to be a bool")
        pulumi.set(__self__, "is_default", is_default)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if vpc and not isinstance(vpc, str):
            raise TypeError("Expected argument 'vpc' to be a str")
        pulumi.set(__self__, "vpc", vpc)
        if vpc_name and not isinstance(vpc_name, str):
            raise TypeError("Expected argument 'vpc_name' to be a str")
        pulumi.set(__self__, "vpc_name", vpc_name)
        if zones and not isinstance(zones, list):
            raise TypeError("Expected argument 'zones' to be a list")
        pulumi.set(__self__, "zones", zones)

    @_builtins.property
    @pulumi.getter(name="addressPrefix")
    def address_prefix(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "address_prefix")

    @_builtins.property
    @pulumi.getter(name="addressPrefixName")
    def address_prefix_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "address_prefix_name")

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> _builtins.str:
        return pulumi.get(self, "cidr")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="hasSubnets")
    def has_subnets(self) -> _builtins.bool:
        return pulumi.get(self, "has_subnets")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> _builtins.bool:
        return pulumi.get(self, "is_default")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vpc")

    @_builtins.property
    @pulumi.getter(name="vpcName")
    def vpc_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vpc_name")

    @_builtins.property
    @pulumi.getter
    def zones(self) -> Sequence['outputs.GetIsVpcAddressPrefixZoneResult']:
        return pulumi.get(self, "zones")


class AwaitableGetIsVpcAddressPrefixResult(GetIsVpcAddressPrefixResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsVpcAddressPrefixResult(
            address_prefix=self.address_prefix,
            address_prefix_name=self.address_prefix_name,
            cidr=self.cidr,
            created_at=self.created_at,
            has_subnets=self.has_subnets,
            href=self.href,
            id=self.id,
            is_default=self.is_default,
            name=self.name,
            vpc=self.vpc,
            vpc_name=self.vpc_name,
            zones=self.zones)


def get_is_vpc_address_prefix(address_prefix: Optional[_builtins.str] = None,
                              address_prefix_name: Optional[_builtins.str] = None,
                              id: Optional[_builtins.str] = None,
                              vpc: Optional[_builtins.str] = None,
                              vpc_name: Optional[_builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsVpcAddressPrefixResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['addressPrefix'] = address_prefix
    __args__['addressPrefixName'] = address_prefix_name
    __args__['id'] = id
    __args__['vpc'] = vpc
    __args__['vpcName'] = vpc_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsVpcAddressPrefix:getIsVpcAddressPrefix', __args__, opts=opts, typ=GetIsVpcAddressPrefixResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsVpcAddressPrefixResult(
        address_prefix=pulumi.get(__ret__, 'address_prefix'),
        address_prefix_name=pulumi.get(__ret__, 'address_prefix_name'),
        cidr=pulumi.get(__ret__, 'cidr'),
        created_at=pulumi.get(__ret__, 'created_at'),
        has_subnets=pulumi.get(__ret__, 'has_subnets'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        is_default=pulumi.get(__ret__, 'is_default'),
        name=pulumi.get(__ret__, 'name'),
        vpc=pulumi.get(__ret__, 'vpc'),
        vpc_name=pulumi.get(__ret__, 'vpc_name'),
        zones=pulumi.get(__ret__, 'zones'))
def get_is_vpc_address_prefix_output(address_prefix: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     address_prefix_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     vpc: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     vpc_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsVpcAddressPrefixResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['addressPrefix'] = address_prefix
    __args__['addressPrefixName'] = address_prefix_name
    __args__['id'] = id
    __args__['vpc'] = vpc
    __args__['vpcName'] = vpc_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsVpcAddressPrefix:getIsVpcAddressPrefix', __args__, opts=opts, typ=GetIsVpcAddressPrefixResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsVpcAddressPrefixResult(
        address_prefix=pulumi.get(__response__, 'address_prefix'),
        address_prefix_name=pulumi.get(__response__, 'address_prefix_name'),
        cidr=pulumi.get(__response__, 'cidr'),
        created_at=pulumi.get(__response__, 'created_at'),
        has_subnets=pulumi.get(__response__, 'has_subnets'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        is_default=pulumi.get(__response__, 'is_default'),
        name=pulumi.get(__response__, 'name'),
        vpc=pulumi.get(__response__, 'vpc'),
        vpc_name=pulumi.get(__response__, 'vpc_name'),
        zones=pulumi.get(__response__, 'zones')))
