# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['CrRetentionPolicyArgs', 'CrRetentionPolicy']

@pulumi.input_type
class CrRetentionPolicyArgs:
    def __init__(__self__, *,
                 images_per_repo: pulumi.Input[_builtins.float],
                 namespace: pulumi.Input[_builtins.str],
                 cr_retention_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 retain_untagged: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a CrRetentionPolicy resource.
        :param pulumi.Input[_builtins.float] images_per_repo: Determines how many images will be retained for each repository when the retention policy is executed. The value -1
               denotes 'Unlimited' (all images are retained).
        :param pulumi.Input[_builtins.str] namespace: The namespace to which the retention policy is attached.
        :param pulumi.Input[_builtins.bool] retain_untagged: Determines if untagged images are retained when executing the retention policy. This is false by default meaning
               untagged images will be deleted when the policy is executed.
        """
        pulumi.set(__self__, "images_per_repo", images_per_repo)
        pulumi.set(__self__, "namespace", namespace)
        if cr_retention_policy_id is not None:
            pulumi.set(__self__, "cr_retention_policy_id", cr_retention_policy_id)
        if retain_untagged is not None:
            pulumi.set(__self__, "retain_untagged", retain_untagged)

    @_builtins.property
    @pulumi.getter(name="imagesPerRepo")
    def images_per_repo(self) -> pulumi.Input[_builtins.float]:
        """
        Determines how many images will be retained for each repository when the retention policy is executed. The value -1
        denotes 'Unlimited' (all images are retained).
        """
        return pulumi.get(self, "images_per_repo")

    @images_per_repo.setter
    def images_per_repo(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "images_per_repo", value)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[_builtins.str]:
        """
        The namespace to which the retention policy is attached.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter(name="crRetentionPolicyId")
    def cr_retention_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cr_retention_policy_id")

    @cr_retention_policy_id.setter
    def cr_retention_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cr_retention_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="retainUntagged")
    def retain_untagged(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Determines if untagged images are retained when executing the retention policy. This is false by default meaning
        untagged images will be deleted when the policy is executed.
        """
        return pulumi.get(self, "retain_untagged")

    @retain_untagged.setter
    def retain_untagged(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "retain_untagged", value)


@pulumi.input_type
class _CrRetentionPolicyState:
    def __init__(__self__, *,
                 cr_retention_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 images_per_repo: Optional[pulumi.Input[_builtins.float]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 retain_untagged: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        Input properties used for looking up and filtering CrRetentionPolicy resources.
        :param pulumi.Input[_builtins.float] images_per_repo: Determines how many images will be retained for each repository when the retention policy is executed. The value -1
               denotes 'Unlimited' (all images are retained).
        :param pulumi.Input[_builtins.str] namespace: The namespace to which the retention policy is attached.
        :param pulumi.Input[_builtins.bool] retain_untagged: Determines if untagged images are retained when executing the retention policy. This is false by default meaning
               untagged images will be deleted when the policy is executed.
        """
        if cr_retention_policy_id is not None:
            pulumi.set(__self__, "cr_retention_policy_id", cr_retention_policy_id)
        if images_per_repo is not None:
            pulumi.set(__self__, "images_per_repo", images_per_repo)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if retain_untagged is not None:
            pulumi.set(__self__, "retain_untagged", retain_untagged)

    @_builtins.property
    @pulumi.getter(name="crRetentionPolicyId")
    def cr_retention_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cr_retention_policy_id")

    @cr_retention_policy_id.setter
    def cr_retention_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cr_retention_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="imagesPerRepo")
    def images_per_repo(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Determines how many images will be retained for each repository when the retention policy is executed. The value -1
        denotes 'Unlimited' (all images are retained).
        """
        return pulumi.get(self, "images_per_repo")

    @images_per_repo.setter
    def images_per_repo(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "images_per_repo", value)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The namespace to which the retention policy is attached.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter(name="retainUntagged")
    def retain_untagged(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Determines if untagged images are retained when executing the retention policy. This is false by default meaning
        untagged images will be deleted when the policy is executed.
        """
        return pulumi.get(self, "retain_untagged")

    @retain_untagged.setter
    def retain_untagged(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "retain_untagged", value)


@pulumi.type_token("ibm:index/crRetentionPolicy:CrRetentionPolicy")
class CrRetentionPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cr_retention_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 images_per_repo: Optional[pulumi.Input[_builtins.float]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 retain_untagged: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        """
        Create a CrRetentionPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] images_per_repo: Determines how many images will be retained for each repository when the retention policy is executed. The value -1
               denotes 'Unlimited' (all images are retained).
        :param pulumi.Input[_builtins.str] namespace: The namespace to which the retention policy is attached.
        :param pulumi.Input[_builtins.bool] retain_untagged: Determines if untagged images are retained when executing the retention policy. This is false by default meaning
               untagged images will be deleted when the policy is executed.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CrRetentionPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CrRetentionPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CrRetentionPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CrRetentionPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cr_retention_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 images_per_repo: Optional[pulumi.Input[_builtins.float]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 retain_untagged: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CrRetentionPolicyArgs.__new__(CrRetentionPolicyArgs)

            __props__.__dict__["cr_retention_policy_id"] = cr_retention_policy_id
            if images_per_repo is None and not opts.urn:
                raise TypeError("Missing required property 'images_per_repo'")
            __props__.__dict__["images_per_repo"] = images_per_repo
            if namespace is None and not opts.urn:
                raise TypeError("Missing required property 'namespace'")
            __props__.__dict__["namespace"] = namespace
            __props__.__dict__["retain_untagged"] = retain_untagged
        super(CrRetentionPolicy, __self__).__init__(
            'ibm:index/crRetentionPolicy:CrRetentionPolicy',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cr_retention_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            images_per_repo: Optional[pulumi.Input[_builtins.float]] = None,
            namespace: Optional[pulumi.Input[_builtins.str]] = None,
            retain_untagged: Optional[pulumi.Input[_builtins.bool]] = None) -> 'CrRetentionPolicy':
        """
        Get an existing CrRetentionPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] images_per_repo: Determines how many images will be retained for each repository when the retention policy is executed. The value -1
               denotes 'Unlimited' (all images are retained).
        :param pulumi.Input[_builtins.str] namespace: The namespace to which the retention policy is attached.
        :param pulumi.Input[_builtins.bool] retain_untagged: Determines if untagged images are retained when executing the retention policy. This is false by default meaning
               untagged images will be deleted when the policy is executed.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CrRetentionPolicyState.__new__(_CrRetentionPolicyState)

        __props__.__dict__["cr_retention_policy_id"] = cr_retention_policy_id
        __props__.__dict__["images_per_repo"] = images_per_repo
        __props__.__dict__["namespace"] = namespace
        __props__.__dict__["retain_untagged"] = retain_untagged
        return CrRetentionPolicy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="crRetentionPolicyId")
    def cr_retention_policy_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cr_retention_policy_id")

    @_builtins.property
    @pulumi.getter(name="imagesPerRepo")
    def images_per_repo(self) -> pulumi.Output[_builtins.float]:
        """
        Determines how many images will be retained for each repository when the retention policy is executed. The value -1
        denotes 'Unlimited' (all images are retained).
        """
        return pulumi.get(self, "images_per_repo")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[_builtins.str]:
        """
        The namespace to which the retention policy is attached.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="retainUntagged")
    def retain_untagged(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Determines if untagged images are retained when executing the retention policy. This is false by default meaning
        untagged images will be deleted when the policy is executed.
        """
        return pulumi.get(self, "retain_untagged")

