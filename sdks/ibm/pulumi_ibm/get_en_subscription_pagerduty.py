# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetEnSubscriptionPagerdutyResult',
    'AwaitableGetEnSubscriptionPagerdutyResult',
    'get_en_subscription_pagerduty',
    'get_en_subscription_pagerduty_output',
]

@pulumi.output_type
class GetEnSubscriptionPagerdutyResult:
    """
    A collection of values returned by getEnSubscriptionPagerduty.
    """
    def __init__(__self__, attributes=None, description=None, destination_id=None, id=None, instance_guid=None, name=None, subscription_id=None, topic_id=None, updated_at=None):
        if attributes and not isinstance(attributes, list):
            raise TypeError("Expected argument 'attributes' to be a list")
        pulumi.set(__self__, "attributes", attributes)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if destination_id and not isinstance(destination_id, str):
            raise TypeError("Expected argument 'destination_id' to be a str")
        pulumi.set(__self__, "destination_id", destination_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_guid and not isinstance(instance_guid, str):
            raise TypeError("Expected argument 'instance_guid' to be a str")
        pulumi.set(__self__, "instance_guid", instance_guid)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if subscription_id and not isinstance(subscription_id, str):
            raise TypeError("Expected argument 'subscription_id' to be a str")
        pulumi.set(__self__, "subscription_id", subscription_id)
        if topic_id and not isinstance(topic_id, str):
            raise TypeError("Expected argument 'topic_id' to be a str")
        pulumi.set(__self__, "topic_id", topic_id)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def attributes(self) -> Sequence['outputs.GetEnSubscriptionPagerdutyAttributeResult']:
        return pulumi.get(self, "attributes")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="destinationId")
    def destination_id(self) -> _builtins.str:
        return pulumi.get(self, "destination_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceGuid")
    def instance_guid(self) -> _builtins.str:
        return pulumi.get(self, "instance_guid")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> _builtins.str:
        return pulumi.get(self, "subscription_id")

    @_builtins.property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> _builtins.str:
        return pulumi.get(self, "topic_id")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")


class AwaitableGetEnSubscriptionPagerdutyResult(GetEnSubscriptionPagerdutyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEnSubscriptionPagerdutyResult(
            attributes=self.attributes,
            description=self.description,
            destination_id=self.destination_id,
            id=self.id,
            instance_guid=self.instance_guid,
            name=self.name,
            subscription_id=self.subscription_id,
            topic_id=self.topic_id,
            updated_at=self.updated_at)


def get_en_subscription_pagerduty(id: Optional[_builtins.str] = None,
                                  instance_guid: Optional[_builtins.str] = None,
                                  subscription_id: Optional[_builtins.str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEnSubscriptionPagerdutyResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceGuid'] = instance_guid
    __args__['subscriptionId'] = subscription_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getEnSubscriptionPagerduty:getEnSubscriptionPagerduty', __args__, opts=opts, typ=GetEnSubscriptionPagerdutyResult, package_ref=_utilities.get_package()).value

    return AwaitableGetEnSubscriptionPagerdutyResult(
        attributes=pulumi.get(__ret__, 'attributes'),
        description=pulumi.get(__ret__, 'description'),
        destination_id=pulumi.get(__ret__, 'destination_id'),
        id=pulumi.get(__ret__, 'id'),
        instance_guid=pulumi.get(__ret__, 'instance_guid'),
        name=pulumi.get(__ret__, 'name'),
        subscription_id=pulumi.get(__ret__, 'subscription_id'),
        topic_id=pulumi.get(__ret__, 'topic_id'),
        updated_at=pulumi.get(__ret__, 'updated_at'))
def get_en_subscription_pagerduty_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         instance_guid: Optional[pulumi.Input[_builtins.str]] = None,
                                         subscription_id: Optional[pulumi.Input[_builtins.str]] = None,
                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEnSubscriptionPagerdutyResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceGuid'] = instance_guid
    __args__['subscriptionId'] = subscription_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getEnSubscriptionPagerduty:getEnSubscriptionPagerduty', __args__, opts=opts, typ=GetEnSubscriptionPagerdutyResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetEnSubscriptionPagerdutyResult(
        attributes=pulumi.get(__response__, 'attributes'),
        description=pulumi.get(__response__, 'description'),
        destination_id=pulumi.get(__response__, 'destination_id'),
        id=pulumi.get(__response__, 'id'),
        instance_guid=pulumi.get(__response__, 'instance_guid'),
        name=pulumi.get(__response__, 'name'),
        subscription_id=pulumi.get(__response__, 'subscription_id'),
        topic_id=pulumi.get(__response__, 'topic_id'),
        updated_at=pulumi.get(__response__, 'updated_at')))
