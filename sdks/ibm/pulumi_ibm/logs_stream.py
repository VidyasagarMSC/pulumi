# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LogsStreamArgs', 'LogsStream']

@pulumi.input_type
class LogsStreamArgs:
    def __init__(__self__, *,
                 dpxl_expression: pulumi.Input[_builtins.str],
                 instance_id: pulumi.Input[_builtins.str],
                 compression_type: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ibm_event_streams: Optional[pulumi.Input['LogsStreamIbmEventStreamsArgs']] = None,
                 is_active: Optional[pulumi.Input[_builtins.bool]] = None,
                 logs_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a LogsStream resource.
        :param pulumi.Input[_builtins.str] dpxl_expression: The DPXL expression of the Event stream.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the logs instance.
        :param pulumi.Input[_builtins.str] compression_type: The compression type of the stream.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input['LogsStreamIbmEventStreamsArgs'] ibm_event_streams: Configuration for IBM Event Streams.
        :param pulumi.Input[_builtins.bool] is_active: Whether the Event stream is active.
        :param pulumi.Input[_builtins.str] name: The name of the Event stream.
        :param pulumi.Input[_builtins.str] region: The region of the logs instance.
        """
        pulumi.set(__self__, "dpxl_expression", dpxl_expression)
        pulumi.set(__self__, "instance_id", instance_id)
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if ibm_event_streams is not None:
            pulumi.set(__self__, "ibm_event_streams", ibm_event_streams)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if logs_stream_id is not None:
            pulumi.set(__self__, "logs_stream_id", logs_stream_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="dpxlExpression")
    def dpxl_expression(self) -> pulumi.Input[_builtins.str]:
        """
        The DPXL expression of the Event stream.
        """
        return pulumi.get(self, "dpxl_expression")

    @dpxl_expression.setter
    def dpxl_expression(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "dpxl_expression", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the logs instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The compression type of the stream.
        """
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compression_type", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter(name="ibmEventStreams")
    def ibm_event_streams(self) -> Optional[pulumi.Input['LogsStreamIbmEventStreamsArgs']]:
        """
        Configuration for IBM Event Streams.
        """
        return pulumi.get(self, "ibm_event_streams")

    @ibm_event_streams.setter
    def ibm_event_streams(self, value: Optional[pulumi.Input['LogsStreamIbmEventStreamsArgs']]):
        pulumi.set(self, "ibm_event_streams", value)

    @_builtins.property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the Event stream is active.
        """
        return pulumi.get(self, "is_active")

    @is_active.setter
    def is_active(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_active", value)

    @_builtins.property
    @pulumi.getter(name="logsStreamId")
    def logs_stream_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "logs_stream_id")

    @logs_stream_id.setter
    def logs_stream_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logs_stream_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the Event stream.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the logs instance.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _LogsStreamState:
    def __init__(__self__, *,
                 compression_type: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 dpxl_expression: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ibm_event_streams: Optional[pulumi.Input['LogsStreamIbmEventStreamsArgs']] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_active: Optional[pulumi.Input[_builtins.bool]] = None,
                 logs_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 streams_id: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering LogsStream resources.
        :param pulumi.Input[_builtins.str] compression_type: The compression type of the stream.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the Event stream.
        :param pulumi.Input[_builtins.str] dpxl_expression: The DPXL expression of the Event stream.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input['LogsStreamIbmEventStreamsArgs'] ibm_event_streams: Configuration for IBM Event Streams.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the logs instance.
        :param pulumi.Input[_builtins.bool] is_active: Whether the Event stream is active.
        :param pulumi.Input[_builtins.str] name: The name of the Event stream.
        :param pulumi.Input[_builtins.str] region: The region of the logs instance.
        :param pulumi.Input[_builtins.str] streams_id: The ID of the Event stream.
        :param pulumi.Input[_builtins.str] updated_at: The update time of the Event stream.
        """
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if dpxl_expression is not None:
            pulumi.set(__self__, "dpxl_expression", dpxl_expression)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if ibm_event_streams is not None:
            pulumi.set(__self__, "ibm_event_streams", ibm_event_streams)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if logs_stream_id is not None:
            pulumi.set(__self__, "logs_stream_id", logs_stream_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if streams_id is not None:
            pulumi.set(__self__, "streams_id", streams_id)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The compression type of the stream.
        """
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compression_type", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The creation time of the Event stream.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="dpxlExpression")
    def dpxl_expression(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The DPXL expression of the Event stream.
        """
        return pulumi.get(self, "dpxl_expression")

    @dpxl_expression.setter
    def dpxl_expression(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dpxl_expression", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter(name="ibmEventStreams")
    def ibm_event_streams(self) -> Optional[pulumi.Input['LogsStreamIbmEventStreamsArgs']]:
        """
        Configuration for IBM Event Streams.
        """
        return pulumi.get(self, "ibm_event_streams")

    @ibm_event_streams.setter
    def ibm_event_streams(self, value: Optional[pulumi.Input['LogsStreamIbmEventStreamsArgs']]):
        pulumi.set(self, "ibm_event_streams", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the logs instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the Event stream is active.
        """
        return pulumi.get(self, "is_active")

    @is_active.setter
    def is_active(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_active", value)

    @_builtins.property
    @pulumi.getter(name="logsStreamId")
    def logs_stream_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "logs_stream_id")

    @logs_stream_id.setter
    def logs_stream_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logs_stream_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the Event stream.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the logs instance.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="streamsId")
    def streams_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the Event stream.
        """
        return pulumi.get(self, "streams_id")

    @streams_id.setter
    def streams_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "streams_id", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The update time of the Event stream.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("ibm:index/logsStream:LogsStream")
class LogsStream(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compression_type: Optional[pulumi.Input[_builtins.str]] = None,
                 dpxl_expression: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ibm_event_streams: Optional[pulumi.Input[Union['LogsStreamIbmEventStreamsArgs', 'LogsStreamIbmEventStreamsArgsDict']]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_active: Optional[pulumi.Input[_builtins.bool]] = None,
                 logs_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a LogsStream resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] compression_type: The compression type of the stream.
        :param pulumi.Input[_builtins.str] dpxl_expression: The DPXL expression of the Event stream.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[Union['LogsStreamIbmEventStreamsArgs', 'LogsStreamIbmEventStreamsArgsDict']] ibm_event_streams: Configuration for IBM Event Streams.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the logs instance.
        :param pulumi.Input[_builtins.bool] is_active: Whether the Event stream is active.
        :param pulumi.Input[_builtins.str] name: The name of the Event stream.
        :param pulumi.Input[_builtins.str] region: The region of the logs instance.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LogsStreamArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a LogsStream resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LogsStreamArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LogsStreamArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compression_type: Optional[pulumi.Input[_builtins.str]] = None,
                 dpxl_expression: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ibm_event_streams: Optional[pulumi.Input[Union['LogsStreamIbmEventStreamsArgs', 'LogsStreamIbmEventStreamsArgsDict']]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_active: Optional[pulumi.Input[_builtins.bool]] = None,
                 logs_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LogsStreamArgs.__new__(LogsStreamArgs)

            __props__.__dict__["compression_type"] = compression_type
            if dpxl_expression is None and not opts.urn:
                raise TypeError("Missing required property 'dpxl_expression'")
            __props__.__dict__["dpxl_expression"] = dpxl_expression
            __props__.__dict__["endpoint_type"] = endpoint_type
            __props__.__dict__["ibm_event_streams"] = ibm_event_streams
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["is_active"] = is_active
            __props__.__dict__["logs_stream_id"] = logs_stream_id
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["created_at"] = None
            __props__.__dict__["streams_id"] = None
            __props__.__dict__["updated_at"] = None
        super(LogsStream, __self__).__init__(
            'ibm:index/logsStream:LogsStream',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            compression_type: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            dpxl_expression: Optional[pulumi.Input[_builtins.str]] = None,
            endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
            ibm_event_streams: Optional[pulumi.Input[Union['LogsStreamIbmEventStreamsArgs', 'LogsStreamIbmEventStreamsArgsDict']]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            is_active: Optional[pulumi.Input[_builtins.bool]] = None,
            logs_stream_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            streams_id: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'LogsStream':
        """
        Get an existing LogsStream resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] compression_type: The compression type of the stream.
        :param pulumi.Input[_builtins.str] created_at: The creation time of the Event stream.
        :param pulumi.Input[_builtins.str] dpxl_expression: The DPXL expression of the Event stream.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[Union['LogsStreamIbmEventStreamsArgs', 'LogsStreamIbmEventStreamsArgsDict']] ibm_event_streams: Configuration for IBM Event Streams.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the logs instance.
        :param pulumi.Input[_builtins.bool] is_active: Whether the Event stream is active.
        :param pulumi.Input[_builtins.str] name: The name of the Event stream.
        :param pulumi.Input[_builtins.str] region: The region of the logs instance.
        :param pulumi.Input[_builtins.str] streams_id: The ID of the Event stream.
        :param pulumi.Input[_builtins.str] updated_at: The update time of the Event stream.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LogsStreamState.__new__(_LogsStreamState)

        __props__.__dict__["compression_type"] = compression_type
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["dpxl_expression"] = dpxl_expression
        __props__.__dict__["endpoint_type"] = endpoint_type
        __props__.__dict__["ibm_event_streams"] = ibm_event_streams
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["is_active"] = is_active
        __props__.__dict__["logs_stream_id"] = logs_stream_id
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["streams_id"] = streams_id
        __props__.__dict__["updated_at"] = updated_at
        return LogsStream(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The compression type of the stream.
        """
        return pulumi.get(self, "compression_type")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The creation time of the Event stream.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="dpxlExpression")
    def dpxl_expression(self) -> pulumi.Output[_builtins.str]:
        """
        The DPXL expression of the Event stream.
        """
        return pulumi.get(self, "dpxl_expression")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter(name="ibmEventStreams")
    def ibm_event_streams(self) -> pulumi.Output[Optional['outputs.LogsStreamIbmEventStreams']]:
        """
        Configuration for IBM Event Streams.
        """
        return pulumi.get(self, "ibm_event_streams")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the logs instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="isActive")
    def is_active(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Whether the Event stream is active.
        """
        return pulumi.get(self, "is_active")

    @_builtins.property
    @pulumi.getter(name="logsStreamId")
    def logs_stream_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "logs_stream_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the Event stream.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region of the logs instance.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="streamsId")
    def streams_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the Event stream.
        """
        return pulumi.get(self, "streams_id")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The update time of the Event stream.
        """
        return pulumi.get(self, "updated_at")

