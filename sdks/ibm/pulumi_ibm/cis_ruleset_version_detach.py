# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['CisRulesetVersionDetachArgs', 'CisRulesetVersionDetach']

@pulumi.input_type
class CisRulesetVersionDetachArgs:
    def __init__(__self__, *,
                 cis_id: pulumi.Input[_builtins.str],
                 ruleset_id: pulumi.Input[_builtins.str],
                 version: pulumi.Input[_builtins.str],
                 cis_ruleset_version_detach_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CisRulesetVersionDetach resource.
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] ruleset_id: Associated Ruleset ID
        :param pulumi.Input[_builtins.str] version: Ruleset version
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        """
        pulumi.set(__self__, "cis_id", cis_id)
        pulumi.set(__self__, "ruleset_id", ruleset_id)
        pulumi.set(__self__, "version", version)
        if cis_ruleset_version_detach_id is not None:
            pulumi.set(__self__, "cis_ruleset_version_detach_id", cis_ruleset_version_detach_id)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Input[_builtins.str]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter(name="rulesetId")
    def ruleset_id(self) -> pulumi.Input[_builtins.str]:
        """
        Associated Ruleset ID
        """
        return pulumi.get(self, "ruleset_id")

    @ruleset_id.setter
    def ruleset_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "ruleset_id", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Input[_builtins.str]:
        """
        Ruleset version
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter(name="cisRulesetVersionDetachId")
    def cis_ruleset_version_detach_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_ruleset_version_detach_id")

    @cis_ruleset_version_detach_id.setter
    def cis_ruleset_version_detach_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_ruleset_version_detach_id", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Associated CIS domain
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_id", value)


@pulumi.input_type
class _CisRulesetVersionDetachState:
    def __init__(__self__, *,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_ruleset_version_detach_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ruleset_id: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CisRulesetVersionDetach resources.
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.str] ruleset_id: Associated Ruleset ID
        :param pulumi.Input[_builtins.str] version: Ruleset version
        """
        if cis_id is not None:
            pulumi.set(__self__, "cis_id", cis_id)
        if cis_ruleset_version_detach_id is not None:
            pulumi.set(__self__, "cis_ruleset_version_detach_id", cis_ruleset_version_detach_id)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if ruleset_id is not None:
            pulumi.set(__self__, "ruleset_id", ruleset_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter(name="cisRulesetVersionDetachId")
    def cis_ruleset_version_detach_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_ruleset_version_detach_id")

    @cis_ruleset_version_detach_id.setter
    def cis_ruleset_version_detach_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_ruleset_version_detach_id", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Associated CIS domain
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter(name="rulesetId")
    def ruleset_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Associated Ruleset ID
        """
        return pulumi.get(self, "ruleset_id")

    @ruleset_id.setter
    def ruleset_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ruleset_id", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Ruleset version
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


@pulumi.type_token("ibm:index/cisRulesetVersionDetach:CisRulesetVersionDetach")
class CisRulesetVersionDetach(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_ruleset_version_detach_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ruleset_id: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a CisRulesetVersionDetach resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.str] ruleset_id: Associated Ruleset ID
        :param pulumi.Input[_builtins.str] version: Ruleset version
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CisRulesetVersionDetachArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CisRulesetVersionDetach resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CisRulesetVersionDetachArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CisRulesetVersionDetachArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_ruleset_version_detach_id: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ruleset_id: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CisRulesetVersionDetachArgs.__new__(CisRulesetVersionDetachArgs)

            if cis_id is None and not opts.urn:
                raise TypeError("Missing required property 'cis_id'")
            __props__.__dict__["cis_id"] = cis_id
            __props__.__dict__["cis_ruleset_version_detach_id"] = cis_ruleset_version_detach_id
            __props__.__dict__["domain_id"] = domain_id
            if ruleset_id is None and not opts.urn:
                raise TypeError("Missing required property 'ruleset_id'")
            __props__.__dict__["ruleset_id"] = ruleset_id
            if version is None and not opts.urn:
                raise TypeError("Missing required property 'version'")
            __props__.__dict__["version"] = version
        super(CisRulesetVersionDetach, __self__).__init__(
            'ibm:index/cisRulesetVersionDetach:CisRulesetVersionDetach',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cis_id: Optional[pulumi.Input[_builtins.str]] = None,
            cis_ruleset_version_detach_id: Optional[pulumi.Input[_builtins.str]] = None,
            domain_id: Optional[pulumi.Input[_builtins.str]] = None,
            ruleset_id: Optional[pulumi.Input[_builtins.str]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None) -> 'CisRulesetVersionDetach':
        """
        Get an existing CisRulesetVersionDetach resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.str] ruleset_id: Associated Ruleset ID
        :param pulumi.Input[_builtins.str] version: Ruleset version
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CisRulesetVersionDetachState.__new__(_CisRulesetVersionDetachState)

        __props__.__dict__["cis_id"] = cis_id
        __props__.__dict__["cis_ruleset_version_detach_id"] = cis_ruleset_version_detach_id
        __props__.__dict__["domain_id"] = domain_id
        __props__.__dict__["ruleset_id"] = ruleset_id
        __props__.__dict__["version"] = version
        return CisRulesetVersionDetach(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Output[_builtins.str]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @_builtins.property
    @pulumi.getter(name="cisRulesetVersionDetachId")
    def cis_ruleset_version_detach_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cis_ruleset_version_detach_id")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Associated CIS domain
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="rulesetId")
    def ruleset_id(self) -> pulumi.Output[_builtins.str]:
        """
        Associated Ruleset ID
        """
        return pulumi.get(self, "ruleset_id")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.str]:
        """
        Ruleset version
        """
        return pulumi.get(self, "version")

