# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsShareMountTargetResult',
    'AwaitableGetIsShareMountTargetResult',
    'get_is_share_mount_target',
    'get_is_share_mount_target_output',
]

@pulumi.output_type
class GetIsShareMountTargetResult:
    """
    A collection of values returned by getIsShareMountTarget.
    """
    def __init__(__self__, access_control_mode=None, created_at=None, href=None, id=None, lifecycle_state=None, mount_path=None, mount_target=None, mount_target_name=None, name=None, primary_ips=None, resource_type=None, share=None, share_name=None, subnets=None, transit_encryption=None, virtual_network_interfaces=None, vpcs=None):
        if access_control_mode and not isinstance(access_control_mode, str):
            raise TypeError("Expected argument 'access_control_mode' to be a str")
        pulumi.set(__self__, "access_control_mode", access_control_mode)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lifecycle_state and not isinstance(lifecycle_state, str):
            raise TypeError("Expected argument 'lifecycle_state' to be a str")
        pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if mount_path and not isinstance(mount_path, str):
            raise TypeError("Expected argument 'mount_path' to be a str")
        pulumi.set(__self__, "mount_path", mount_path)
        if mount_target and not isinstance(mount_target, str):
            raise TypeError("Expected argument 'mount_target' to be a str")
        pulumi.set(__self__, "mount_target", mount_target)
        if mount_target_name and not isinstance(mount_target_name, str):
            raise TypeError("Expected argument 'mount_target_name' to be a str")
        pulumi.set(__self__, "mount_target_name", mount_target_name)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if primary_ips and not isinstance(primary_ips, list):
            raise TypeError("Expected argument 'primary_ips' to be a list")
        pulumi.set(__self__, "primary_ips", primary_ips)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if share and not isinstance(share, str):
            raise TypeError("Expected argument 'share' to be a str")
        pulumi.set(__self__, "share", share)
        if share_name and not isinstance(share_name, str):
            raise TypeError("Expected argument 'share_name' to be a str")
        pulumi.set(__self__, "share_name", share_name)
        if subnets and not isinstance(subnets, list):
            raise TypeError("Expected argument 'subnets' to be a list")
        pulumi.set(__self__, "subnets", subnets)
        if transit_encryption and not isinstance(transit_encryption, str):
            raise TypeError("Expected argument 'transit_encryption' to be a str")
        pulumi.set(__self__, "transit_encryption", transit_encryption)
        if virtual_network_interfaces and not isinstance(virtual_network_interfaces, list):
            raise TypeError("Expected argument 'virtual_network_interfaces' to be a list")
        pulumi.set(__self__, "virtual_network_interfaces", virtual_network_interfaces)
        if vpcs and not isinstance(vpcs, list):
            raise TypeError("Expected argument 'vpcs' to be a list")
        pulumi.set(__self__, "vpcs", vpcs)

    @_builtins.property
    @pulumi.getter(name="accessControlMode")
    def access_control_mode(self) -> _builtins.str:
        return pulumi.get(self, "access_control_mode")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> _builtins.str:
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> _builtins.str:
        return pulumi.get(self, "mount_path")

    @_builtins.property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "mount_target")

    @_builtins.property
    @pulumi.getter(name="mountTargetName")
    def mount_target_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "mount_target_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="primaryIps")
    def primary_ips(self) -> Sequence['outputs.GetIsShareMountTargetPrimaryIpResult']:
        return pulumi.get(self, "primary_ips")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def share(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "share")

    @_builtins.property
    @pulumi.getter(name="shareName")
    def share_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "share_name")

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> Sequence['outputs.GetIsShareMountTargetSubnetResult']:
        return pulumi.get(self, "subnets")

    @_builtins.property
    @pulumi.getter(name="transitEncryption")
    def transit_encryption(self) -> _builtins.str:
        return pulumi.get(self, "transit_encryption")

    @_builtins.property
    @pulumi.getter(name="virtualNetworkInterfaces")
    def virtual_network_interfaces(self) -> Sequence['outputs.GetIsShareMountTargetVirtualNetworkInterfaceResult']:
        return pulumi.get(self, "virtual_network_interfaces")

    @_builtins.property
    @pulumi.getter
    def vpcs(self) -> Sequence['outputs.GetIsShareMountTargetVpcResult']:
        return pulumi.get(self, "vpcs")


class AwaitableGetIsShareMountTargetResult(GetIsShareMountTargetResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsShareMountTargetResult(
            access_control_mode=self.access_control_mode,
            created_at=self.created_at,
            href=self.href,
            id=self.id,
            lifecycle_state=self.lifecycle_state,
            mount_path=self.mount_path,
            mount_target=self.mount_target,
            mount_target_name=self.mount_target_name,
            name=self.name,
            primary_ips=self.primary_ips,
            resource_type=self.resource_type,
            share=self.share,
            share_name=self.share_name,
            subnets=self.subnets,
            transit_encryption=self.transit_encryption,
            virtual_network_interfaces=self.virtual_network_interfaces,
            vpcs=self.vpcs)


def get_is_share_mount_target(id: Optional[_builtins.str] = None,
                              mount_target: Optional[_builtins.str] = None,
                              mount_target_name: Optional[_builtins.str] = None,
                              share: Optional[_builtins.str] = None,
                              share_name: Optional[_builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsShareMountTargetResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['mountTarget'] = mount_target
    __args__['mountTargetName'] = mount_target_name
    __args__['share'] = share
    __args__['shareName'] = share_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsShareMountTarget:getIsShareMountTarget', __args__, opts=opts, typ=GetIsShareMountTargetResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsShareMountTargetResult(
        access_control_mode=pulumi.get(__ret__, 'access_control_mode'),
        created_at=pulumi.get(__ret__, 'created_at'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        lifecycle_state=pulumi.get(__ret__, 'lifecycle_state'),
        mount_path=pulumi.get(__ret__, 'mount_path'),
        mount_target=pulumi.get(__ret__, 'mount_target'),
        mount_target_name=pulumi.get(__ret__, 'mount_target_name'),
        name=pulumi.get(__ret__, 'name'),
        primary_ips=pulumi.get(__ret__, 'primary_ips'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        share=pulumi.get(__ret__, 'share'),
        share_name=pulumi.get(__ret__, 'share_name'),
        subnets=pulumi.get(__ret__, 'subnets'),
        transit_encryption=pulumi.get(__ret__, 'transit_encryption'),
        virtual_network_interfaces=pulumi.get(__ret__, 'virtual_network_interfaces'),
        vpcs=pulumi.get(__ret__, 'vpcs'))
def get_is_share_mount_target_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     mount_target: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     mount_target_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     share: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     share_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsShareMountTargetResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['mountTarget'] = mount_target
    __args__['mountTargetName'] = mount_target_name
    __args__['share'] = share
    __args__['shareName'] = share_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsShareMountTarget:getIsShareMountTarget', __args__, opts=opts, typ=GetIsShareMountTargetResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsShareMountTargetResult(
        access_control_mode=pulumi.get(__response__, 'access_control_mode'),
        created_at=pulumi.get(__response__, 'created_at'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        lifecycle_state=pulumi.get(__response__, 'lifecycle_state'),
        mount_path=pulumi.get(__response__, 'mount_path'),
        mount_target=pulumi.get(__response__, 'mount_target'),
        mount_target_name=pulumi.get(__response__, 'mount_target_name'),
        name=pulumi.get(__response__, 'name'),
        primary_ips=pulumi.get(__response__, 'primary_ips'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        share=pulumi.get(__response__, 'share'),
        share_name=pulumi.get(__response__, 'share_name'),
        subnets=pulumi.get(__response__, 'subnets'),
        transit_encryption=pulumi.get(__response__, 'transit_encryption'),
        virtual_network_interfaces=pulumi.get(__response__, 'virtual_network_interfaces'),
        vpcs=pulumi.get(__response__, 'vpcs')))
