# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetAppidApplicationResult',
    'AwaitableGetAppidApplicationResult',
    'get_appid_application',
    'get_appid_application_output',
]

@pulumi.output_type
class GetAppidApplicationResult:
    """
    A collection of values returned by getAppidApplication.
    """
    def __init__(__self__, client_id=None, discovery_endpoint=None, id=None, name=None, oauth_server_url=None, profiles_url=None, secret=None, tenant_id=None, type=None):
        if client_id and not isinstance(client_id, str):
            raise TypeError("Expected argument 'client_id' to be a str")
        pulumi.set(__self__, "client_id", client_id)
        if discovery_endpoint and not isinstance(discovery_endpoint, str):
            raise TypeError("Expected argument 'discovery_endpoint' to be a str")
        pulumi.set(__self__, "discovery_endpoint", discovery_endpoint)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if oauth_server_url and not isinstance(oauth_server_url, str):
            raise TypeError("Expected argument 'oauth_server_url' to be a str")
        pulumi.set(__self__, "oauth_server_url", oauth_server_url)
        if profiles_url and not isinstance(profiles_url, str):
            raise TypeError("Expected argument 'profiles_url' to be a str")
        pulumi.set(__self__, "profiles_url", profiles_url)
        if secret and not isinstance(secret, str):
            raise TypeError("Expected argument 'secret' to be a str")
        pulumi.set(__self__, "secret", secret)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> _builtins.str:
        return pulumi.get(self, "client_id")

    @_builtins.property
    @pulumi.getter(name="discoveryEndpoint")
    def discovery_endpoint(self) -> _builtins.str:
        return pulumi.get(self, "discovery_endpoint")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="oauthServerUrl")
    def oauth_server_url(self) -> _builtins.str:
        return pulumi.get(self, "oauth_server_url")

    @_builtins.property
    @pulumi.getter(name="profilesUrl")
    def profiles_url(self) -> _builtins.str:
        return pulumi.get(self, "profiles_url")

    @_builtins.property
    @pulumi.getter
    def secret(self) -> _builtins.str:
        return pulumi.get(self, "secret")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.str:
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")


class AwaitableGetAppidApplicationResult(GetAppidApplicationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppidApplicationResult(
            client_id=self.client_id,
            discovery_endpoint=self.discovery_endpoint,
            id=self.id,
            name=self.name,
            oauth_server_url=self.oauth_server_url,
            profiles_url=self.profiles_url,
            secret=self.secret,
            tenant_id=self.tenant_id,
            type=self.type)


def get_appid_application(client_id: Optional[_builtins.str] = None,
                          id: Optional[_builtins.str] = None,
                          tenant_id: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppidApplicationResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clientId'] = client_id
    __args__['id'] = id
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getAppidApplication:getAppidApplication', __args__, opts=opts, typ=GetAppidApplicationResult, package_ref=_utilities.get_package()).value

    return AwaitableGetAppidApplicationResult(
        client_id=pulumi.get(__ret__, 'client_id'),
        discovery_endpoint=pulumi.get(__ret__, 'discovery_endpoint'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        oauth_server_url=pulumi.get(__ret__, 'oauth_server_url'),
        profiles_url=pulumi.get(__ret__, 'profiles_url'),
        secret=pulumi.get(__ret__, 'secret'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'),
        type=pulumi.get(__ret__, 'type'))
def get_appid_application_output(client_id: Optional[pulumi.Input[_builtins.str]] = None,
                                 id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppidApplicationResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clientId'] = client_id
    __args__['id'] = id
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getAppidApplication:getAppidApplication', __args__, opts=opts, typ=GetAppidApplicationResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetAppidApplicationResult(
        client_id=pulumi.get(__response__, 'client_id'),
        discovery_endpoint=pulumi.get(__response__, 'discovery_endpoint'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        oauth_server_url=pulumi.get(__response__, 'oauth_server_url'),
        profiles_url=pulumi.get(__response__, 'profiles_url'),
        secret=pulumi.get(__response__, 'secret'),
        tenant_id=pulumi.get(__response__, 'tenant_id'),
        type=pulumi.get(__response__, 'type')))
