# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetAppidMfaChannelResult',
    'AwaitableGetAppidMfaChannelResult',
    'get_appid_mfa_channel',
    'get_appid_mfa_channel_output',
]

@pulumi.output_type
class GetAppidMfaChannelResult:
    """
    A collection of values returned by getAppidMfaChannel.
    """
    def __init__(__self__, active=None, id=None, sms_configs=None, tenant_id=None):
        if active and not isinstance(active, str):
            raise TypeError("Expected argument 'active' to be a str")
        pulumi.set(__self__, "active", active)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if sms_configs and not isinstance(sms_configs, list):
            raise TypeError("Expected argument 'sms_configs' to be a list")
        pulumi.set(__self__, "sms_configs", sms_configs)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)

    @_builtins.property
    @pulumi.getter
    def active(self) -> _builtins.str:
        return pulumi.get(self, "active")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="smsConfigs")
    def sms_configs(self) -> Sequence['outputs.GetAppidMfaChannelSmsConfigResult']:
        return pulumi.get(self, "sms_configs")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.str:
        return pulumi.get(self, "tenant_id")


class AwaitableGetAppidMfaChannelResult(GetAppidMfaChannelResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppidMfaChannelResult(
            active=self.active,
            id=self.id,
            sms_configs=self.sms_configs,
            tenant_id=self.tenant_id)


def get_appid_mfa_channel(id: Optional[_builtins.str] = None,
                          tenant_id: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppidMfaChannelResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getAppidMfaChannel:getAppidMfaChannel', __args__, opts=opts, typ=GetAppidMfaChannelResult, package_ref=_utilities.get_package()).value

    return AwaitableGetAppidMfaChannelResult(
        active=pulumi.get(__ret__, 'active'),
        id=pulumi.get(__ret__, 'id'),
        sms_configs=pulumi.get(__ret__, 'sms_configs'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'))
def get_appid_mfa_channel_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppidMfaChannelResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['tenantId'] = tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getAppidMfaChannel:getAppidMfaChannel', __args__, opts=opts, typ=GetAppidMfaChannelResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetAppidMfaChannelResult(
        active=pulumi.get(__response__, 'active'),
        id=pulumi.get(__response__, 'id'),
        sms_configs=pulumi.get(__response__, 'sms_configs'),
        tenant_id=pulumi.get(__response__, 'tenant_id')))
