# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSccLatestReportsResult',
    'AwaitableGetSccLatestReportsResult',
    'get_scc_latest_reports',
    'get_scc_latest_reports_output',
]

@pulumi.output_type
class GetSccLatestReportsResult:
    """
    A collection of values returned by getSccLatestReports.
    """
    def __init__(__self__, controls_summaries=None, evaluations_summaries=None, home_account_id=None, id=None, instance_id=None, reports=None, scores=None, sort=None):
        if controls_summaries and not isinstance(controls_summaries, list):
            raise TypeError("Expected argument 'controls_summaries' to be a list")
        pulumi.set(__self__, "controls_summaries", controls_summaries)
        if evaluations_summaries and not isinstance(evaluations_summaries, list):
            raise TypeError("Expected argument 'evaluations_summaries' to be a list")
        pulumi.set(__self__, "evaluations_summaries", evaluations_summaries)
        if home_account_id and not isinstance(home_account_id, str):
            raise TypeError("Expected argument 'home_account_id' to be a str")
        pulumi.set(__self__, "home_account_id", home_account_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if reports and not isinstance(reports, list):
            raise TypeError("Expected argument 'reports' to be a list")
        pulumi.set(__self__, "reports", reports)
        if scores and not isinstance(scores, list):
            raise TypeError("Expected argument 'scores' to be a list")
        pulumi.set(__self__, "scores", scores)
        if sort and not isinstance(sort, str):
            raise TypeError("Expected argument 'sort' to be a str")
        pulumi.set(__self__, "sort", sort)

    @_builtins.property
    @pulumi.getter(name="controlsSummaries")
    def controls_summaries(self) -> Sequence['outputs.GetSccLatestReportsControlsSummaryResult']:
        return pulumi.get(self, "controls_summaries")

    @_builtins.property
    @pulumi.getter(name="evaluationsSummaries")
    def evaluations_summaries(self) -> Sequence['outputs.GetSccLatestReportsEvaluationsSummaryResult']:
        return pulumi.get(self, "evaluations_summaries")

    @_builtins.property
    @pulumi.getter(name="homeAccountId")
    def home_account_id(self) -> _builtins.str:
        return pulumi.get(self, "home_account_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def reports(self) -> Sequence['outputs.GetSccLatestReportsReportResult']:
        return pulumi.get(self, "reports")

    @_builtins.property
    @pulumi.getter
    def scores(self) -> Sequence['outputs.GetSccLatestReportsScoreResult']:
        return pulumi.get(self, "scores")

    @_builtins.property
    @pulumi.getter
    def sort(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sort")


class AwaitableGetSccLatestReportsResult(GetSccLatestReportsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSccLatestReportsResult(
            controls_summaries=self.controls_summaries,
            evaluations_summaries=self.evaluations_summaries,
            home_account_id=self.home_account_id,
            id=self.id,
            instance_id=self.instance_id,
            reports=self.reports,
            scores=self.scores,
            sort=self.sort)


def get_scc_latest_reports(id: Optional[_builtins.str] = None,
                           instance_id: Optional[_builtins.str] = None,
                           sort: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSccLatestReportsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['sort'] = sort
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSccLatestReports:getSccLatestReports', __args__, opts=opts, typ=GetSccLatestReportsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSccLatestReportsResult(
        controls_summaries=pulumi.get(__ret__, 'controls_summaries'),
        evaluations_summaries=pulumi.get(__ret__, 'evaluations_summaries'),
        home_account_id=pulumi.get(__ret__, 'home_account_id'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        reports=pulumi.get(__ret__, 'reports'),
        scores=pulumi.get(__ret__, 'scores'),
        sort=pulumi.get(__ret__, 'sort'))
def get_scc_latest_reports_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  sort: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSccLatestReportsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['sort'] = sort
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSccLatestReports:getSccLatestReports', __args__, opts=opts, typ=GetSccLatestReportsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSccLatestReportsResult(
        controls_summaries=pulumi.get(__response__, 'controls_summaries'),
        evaluations_summaries=pulumi.get(__response__, 'evaluations_summaries'),
        home_account_id=pulumi.get(__response__, 'home_account_id'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        reports=pulumi.get(__response__, 'reports'),
        scores=pulumi.get(__response__, 'scores'),
        sort=pulumi.get(__response__, 'sort')))
