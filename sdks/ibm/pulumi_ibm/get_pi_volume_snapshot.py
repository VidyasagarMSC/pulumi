# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetPiVolumeSnapshotResult',
    'AwaitableGetPiVolumeSnapshotResult',
    'get_pi_volume_snapshot',
    'get_pi_volume_snapshot_output',
]

@pulumi.output_type
class GetPiVolumeSnapshotResult:
    """
    A collection of values returned by getPiVolumeSnapshot.
    """
    def __init__(__self__, creation_date=None, crn=None, id=None, name=None, pi_cloud_instance_id=None, pi_volume_snapshot_id=None, size=None, status=None, updated_date=None, volume_id=None):
        if creation_date and not isinstance(creation_date, str):
            raise TypeError("Expected argument 'creation_date' to be a str")
        pulumi.set(__self__, "creation_date", creation_date)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if pi_cloud_instance_id and not isinstance(pi_cloud_instance_id, str):
            raise TypeError("Expected argument 'pi_cloud_instance_id' to be a str")
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_volume_snapshot_id and not isinstance(pi_volume_snapshot_id, str):
            raise TypeError("Expected argument 'pi_volume_snapshot_id' to be a str")
        pulumi.set(__self__, "pi_volume_snapshot_id", pi_volume_snapshot_id)
        if size and not isinstance(size, float):
            raise TypeError("Expected argument 'size' to be a float")
        pulumi.set(__self__, "size", size)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if updated_date and not isinstance(updated_date, str):
            raise TypeError("Expected argument 'updated_date' to be a str")
        pulumi.set(__self__, "updated_date", updated_date)
        if volume_id and not isinstance(volume_id, str):
            raise TypeError("Expected argument 'volume_id' to be a str")
        pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> _builtins.str:
        return pulumi.get(self, "creation_date")

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piVolumeSnapshotId")
    def pi_volume_snapshot_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_volume_snapshot_id")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.float:
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedDate")
    def updated_date(self) -> _builtins.str:
        return pulumi.get(self, "updated_date")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> _builtins.str:
        return pulumi.get(self, "volume_id")


class AwaitableGetPiVolumeSnapshotResult(GetPiVolumeSnapshotResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPiVolumeSnapshotResult(
            creation_date=self.creation_date,
            crn=self.crn,
            id=self.id,
            name=self.name,
            pi_cloud_instance_id=self.pi_cloud_instance_id,
            pi_volume_snapshot_id=self.pi_volume_snapshot_id,
            size=self.size,
            status=self.status,
            updated_date=self.updated_date,
            volume_id=self.volume_id)


def get_pi_volume_snapshot(id: Optional[_builtins.str] = None,
                           pi_cloud_instance_id: Optional[_builtins.str] = None,
                           pi_volume_snapshot_id: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPiVolumeSnapshotResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piVolumeSnapshotId'] = pi_volume_snapshot_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getPiVolumeSnapshot:getPiVolumeSnapshot', __args__, opts=opts, typ=GetPiVolumeSnapshotResult, package_ref=_utilities.get_package()).value

    return AwaitableGetPiVolumeSnapshotResult(
        creation_date=pulumi.get(__ret__, 'creation_date'),
        crn=pulumi.get(__ret__, 'crn'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        pi_cloud_instance_id=pulumi.get(__ret__, 'pi_cloud_instance_id'),
        pi_volume_snapshot_id=pulumi.get(__ret__, 'pi_volume_snapshot_id'),
        size=pulumi.get(__ret__, 'size'),
        status=pulumi.get(__ret__, 'status'),
        updated_date=pulumi.get(__ret__, 'updated_date'),
        volume_id=pulumi.get(__ret__, 'volume_id'))
def get_pi_volume_snapshot_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  pi_volume_snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPiVolumeSnapshotResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piVolumeSnapshotId'] = pi_volume_snapshot_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getPiVolumeSnapshot:getPiVolumeSnapshot', __args__, opts=opts, typ=GetPiVolumeSnapshotResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetPiVolumeSnapshotResult(
        creation_date=pulumi.get(__response__, 'creation_date'),
        crn=pulumi.get(__response__, 'crn'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        pi_cloud_instance_id=pulumi.get(__response__, 'pi_cloud_instance_id'),
        pi_volume_snapshot_id=pulumi.get(__response__, 'pi_volume_snapshot_id'),
        size=pulumi.get(__response__, 'size'),
        status=pulumi.get(__response__, 'status'),
        updated_date=pulumi.get(__response__, 'updated_date'),
        volume_id=pulumi.get(__response__, 'volume_id')))
