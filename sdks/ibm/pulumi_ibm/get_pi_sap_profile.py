# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetPiSapProfileResult',
    'AwaitableGetPiSapProfileResult',
    'get_pi_sap_profile',
    'get_pi_sap_profile_output',
]

@pulumi.output_type
class GetPiSapProfileResult:
    """
    A collection of values returned by getPiSapProfile.
    """
    def __init__(__self__, certified=None, cores=None, default_system=None, full_system_profile=None, id=None, memory=None, pi_cloud_instance_id=None, pi_sap_profile_id=None, saps=None, supported_systems=None, type=None, workload_types=None):
        if certified and not isinstance(certified, bool):
            raise TypeError("Expected argument 'certified' to be a bool")
        pulumi.set(__self__, "certified", certified)
        if cores and not isinstance(cores, float):
            raise TypeError("Expected argument 'cores' to be a float")
        pulumi.set(__self__, "cores", cores)
        if default_system and not isinstance(default_system, str):
            raise TypeError("Expected argument 'default_system' to be a str")
        pulumi.set(__self__, "default_system", default_system)
        if full_system_profile and not isinstance(full_system_profile, bool):
            raise TypeError("Expected argument 'full_system_profile' to be a bool")
        pulumi.set(__self__, "full_system_profile", full_system_profile)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if memory and not isinstance(memory, float):
            raise TypeError("Expected argument 'memory' to be a float")
        pulumi.set(__self__, "memory", memory)
        if pi_cloud_instance_id and not isinstance(pi_cloud_instance_id, str):
            raise TypeError("Expected argument 'pi_cloud_instance_id' to be a str")
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_sap_profile_id and not isinstance(pi_sap_profile_id, str):
            raise TypeError("Expected argument 'pi_sap_profile_id' to be a str")
        pulumi.set(__self__, "pi_sap_profile_id", pi_sap_profile_id)
        if saps and not isinstance(saps, float):
            raise TypeError("Expected argument 'saps' to be a float")
        pulumi.set(__self__, "saps", saps)
        if supported_systems and not isinstance(supported_systems, list):
            raise TypeError("Expected argument 'supported_systems' to be a list")
        pulumi.set(__self__, "supported_systems", supported_systems)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if workload_types and not isinstance(workload_types, list):
            raise TypeError("Expected argument 'workload_types' to be a list")
        pulumi.set(__self__, "workload_types", workload_types)

    @_builtins.property
    @pulumi.getter
    def certified(self) -> _builtins.bool:
        return pulumi.get(self, "certified")

    @_builtins.property
    @pulumi.getter
    def cores(self) -> _builtins.float:
        return pulumi.get(self, "cores")

    @_builtins.property
    @pulumi.getter(name="defaultSystem")
    def default_system(self) -> _builtins.str:
        return pulumi.get(self, "default_system")

    @_builtins.property
    @pulumi.getter(name="fullSystemProfile")
    def full_system_profile(self) -> _builtins.bool:
        return pulumi.get(self, "full_system_profile")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.float:
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piSapProfileId")
    def pi_sap_profile_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_sap_profile_id")

    @_builtins.property
    @pulumi.getter
    def saps(self) -> _builtins.float:
        return pulumi.get(self, "saps")

    @_builtins.property
    @pulumi.getter(name="supportedSystems")
    def supported_systems(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "supported_systems")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="workloadTypes")
    def workload_types(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "workload_types")


class AwaitableGetPiSapProfileResult(GetPiSapProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPiSapProfileResult(
            certified=self.certified,
            cores=self.cores,
            default_system=self.default_system,
            full_system_profile=self.full_system_profile,
            id=self.id,
            memory=self.memory,
            pi_cloud_instance_id=self.pi_cloud_instance_id,
            pi_sap_profile_id=self.pi_sap_profile_id,
            saps=self.saps,
            supported_systems=self.supported_systems,
            type=self.type,
            workload_types=self.workload_types)


def get_pi_sap_profile(id: Optional[_builtins.str] = None,
                       pi_cloud_instance_id: Optional[_builtins.str] = None,
                       pi_sap_profile_id: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPiSapProfileResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piSapProfileId'] = pi_sap_profile_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getPiSapProfile:getPiSapProfile', __args__, opts=opts, typ=GetPiSapProfileResult, package_ref=_utilities.get_package()).value

    return AwaitableGetPiSapProfileResult(
        certified=pulumi.get(__ret__, 'certified'),
        cores=pulumi.get(__ret__, 'cores'),
        default_system=pulumi.get(__ret__, 'default_system'),
        full_system_profile=pulumi.get(__ret__, 'full_system_profile'),
        id=pulumi.get(__ret__, 'id'),
        memory=pulumi.get(__ret__, 'memory'),
        pi_cloud_instance_id=pulumi.get(__ret__, 'pi_cloud_instance_id'),
        pi_sap_profile_id=pulumi.get(__ret__, 'pi_sap_profile_id'),
        saps=pulumi.get(__ret__, 'saps'),
        supported_systems=pulumi.get(__ret__, 'supported_systems'),
        type=pulumi.get(__ret__, 'type'),
        workload_types=pulumi.get(__ret__, 'workload_types'))
def get_pi_sap_profile_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                              pi_sap_profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPiSapProfileResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piSapProfileId'] = pi_sap_profile_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getPiSapProfile:getPiSapProfile', __args__, opts=opts, typ=GetPiSapProfileResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetPiSapProfileResult(
        certified=pulumi.get(__response__, 'certified'),
        cores=pulumi.get(__response__, 'cores'),
        default_system=pulumi.get(__response__, 'default_system'),
        full_system_profile=pulumi.get(__response__, 'full_system_profile'),
        id=pulumi.get(__response__, 'id'),
        memory=pulumi.get(__response__, 'memory'),
        pi_cloud_instance_id=pulumi.get(__response__, 'pi_cloud_instance_id'),
        pi_sap_profile_id=pulumi.get(__response__, 'pi_sap_profile_id'),
        saps=pulumi.get(__response__, 'saps'),
        supported_systems=pulumi.get(__response__, 'supported_systems'),
        type=pulumi.get(__response__, 'type'),
        workload_types=pulumi.get(__response__, 'workload_types')))
