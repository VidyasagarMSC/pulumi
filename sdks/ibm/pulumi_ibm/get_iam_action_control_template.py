# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIamActionControlTemplateResult',
    'AwaitableGetIamActionControlTemplateResult',
    'get_iam_action_control_template',
    'get_iam_action_control_template_output',
]

@pulumi.output_type
class GetIamActionControlTemplateResult:
    """
    A collection of values returned by getIamActionControlTemplate.
    """
    def __init__(__self__, action_control_templates=None, id=None):
        if action_control_templates and not isinstance(action_control_templates, list):
            raise TypeError("Expected argument 'action_control_templates' to be a list")
        pulumi.set(__self__, "action_control_templates", action_control_templates)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter(name="actionControlTemplates")
    def action_control_templates(self) -> Sequence['outputs.GetIamActionControlTemplateActionControlTemplateResult']:
        return pulumi.get(self, "action_control_templates")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")


class AwaitableGetIamActionControlTemplateResult(GetIamActionControlTemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamActionControlTemplateResult(
            action_control_templates=self.action_control_templates,
            id=self.id)


def get_iam_action_control_template(id: Optional[_builtins.str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamActionControlTemplateResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIamActionControlTemplate:getIamActionControlTemplate', __args__, opts=opts, typ=GetIamActionControlTemplateResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIamActionControlTemplateResult(
        action_control_templates=pulumi.get(__ret__, 'action_control_templates'),
        id=pulumi.get(__ret__, 'id'))
def get_iam_action_control_template_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamActionControlTemplateResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIamActionControlTemplate:getIamActionControlTemplate', __args__, opts=opts, typ=GetIamActionControlTemplateResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIamActionControlTemplateResult(
        action_control_templates=pulumi.get(__response__, 'action_control_templates'),
        id=pulumi.get(__response__, 'id')))
