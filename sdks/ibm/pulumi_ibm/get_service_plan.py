# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetServicePlanResult',
    'AwaitableGetServicePlanResult',
    'get_service_plan',
    'get_service_plan_output',
]

@pulumi.output_type
class GetServicePlanResult:
    """
    A collection of values returned by getServicePlan.
    """
    def __init__(__self__, id=None, plan=None, service=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if plan and not isinstance(plan, str):
            raise TypeError("Expected argument 'plan' to be a str")
        pulumi.set(__self__, "plan", plan)
        if service and not isinstance(service, str):
            raise TypeError("Expected argument 'service' to be a str")
        pulumi.set(__self__, "service", service)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def plan(self) -> _builtins.str:
        return pulumi.get(self, "plan")

    @_builtins.property
    @pulumi.getter
    def service(self) -> _builtins.str:
        return pulumi.get(self, "service")


class AwaitableGetServicePlanResult(GetServicePlanResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServicePlanResult(
            id=self.id,
            plan=self.plan,
            service=self.service)


def get_service_plan(id: Optional[_builtins.str] = None,
                     plan: Optional[_builtins.str] = None,
                     service: Optional[_builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServicePlanResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['plan'] = plan
    __args__['service'] = service
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getServicePlan:getServicePlan', __args__, opts=opts, typ=GetServicePlanResult, package_ref=_utilities.get_package()).value

    return AwaitableGetServicePlanResult(
        id=pulumi.get(__ret__, 'id'),
        plan=pulumi.get(__ret__, 'plan'),
        service=pulumi.get(__ret__, 'service'))
def get_service_plan_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            plan: Optional[pulumi.Input[_builtins.str]] = None,
                            service: Optional[pulumi.Input[_builtins.str]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetServicePlanResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['plan'] = plan
    __args__['service'] = service
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getServicePlan:getServicePlan', __args__, opts=opts, typ=GetServicePlanResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetServicePlanResult(
        id=pulumi.get(__response__, 'id'),
        plan=pulumi.get(__response__, 'plan'),
        service=pulumi.get(__response__, 'service')))
