# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsVirtualNetworkInterfacesResult',
    'AwaitableGetIsVirtualNetworkInterfacesResult',
    'get_is_virtual_network_interfaces',
    'get_is_virtual_network_interfaces_output',
]

@pulumi.output_type
class GetIsVirtualNetworkInterfacesResult:
    """
    A collection of values returned by getIsVirtualNetworkInterfaces.
    """
    def __init__(__self__, id=None, resource_group=None, virtual_network_interfaces=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if resource_group and not isinstance(resource_group, str):
            raise TypeError("Expected argument 'resource_group' to be a str")
        pulumi.set(__self__, "resource_group", resource_group)
        if virtual_network_interfaces and not isinstance(virtual_network_interfaces, list):
            raise TypeError("Expected argument 'virtual_network_interfaces' to be a list")
        pulumi.set(__self__, "virtual_network_interfaces", virtual_network_interfaces)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="virtualNetworkInterfaces")
    def virtual_network_interfaces(self) -> Sequence['outputs.GetIsVirtualNetworkInterfacesVirtualNetworkInterfaceResult']:
        return pulumi.get(self, "virtual_network_interfaces")


class AwaitableGetIsVirtualNetworkInterfacesResult(GetIsVirtualNetworkInterfacesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsVirtualNetworkInterfacesResult(
            id=self.id,
            resource_group=self.resource_group,
            virtual_network_interfaces=self.virtual_network_interfaces)


def get_is_virtual_network_interfaces(id: Optional[_builtins.str] = None,
                                      resource_group: Optional[_builtins.str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsVirtualNetworkInterfacesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['resourceGroup'] = resource_group
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsVirtualNetworkInterfaces:getIsVirtualNetworkInterfaces', __args__, opts=opts, typ=GetIsVirtualNetworkInterfacesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsVirtualNetworkInterfacesResult(
        id=pulumi.get(__ret__, 'id'),
        resource_group=pulumi.get(__ret__, 'resource_group'),
        virtual_network_interfaces=pulumi.get(__ret__, 'virtual_network_interfaces'))
def get_is_virtual_network_interfaces_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             resource_group: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsVirtualNetworkInterfacesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['resourceGroup'] = resource_group
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsVirtualNetworkInterfaces:getIsVirtualNetworkInterfaces', __args__, opts=opts, typ=GetIsVirtualNetworkInterfacesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsVirtualNetworkInterfacesResult(
        id=pulumi.get(__response__, 'id'),
        resource_group=pulumi.get(__response__, 'resource_group'),
        virtual_network_interfaces=pulumi.get(__response__, 'virtual_network_interfaces')))
