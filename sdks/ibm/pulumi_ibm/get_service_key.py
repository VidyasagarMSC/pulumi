# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetServiceKeyResult',
    'AwaitableGetServiceKeyResult',
    'get_service_key',
    'get_service_key_output',
]

@pulumi.output_type
class GetServiceKeyResult:
    """
    A collection of values returned by getServiceKey.
    """
    def __init__(__self__, credentials=None, id=None, name=None, service_instance_name=None, space_guid=None):
        if credentials and not isinstance(credentials, dict):
            raise TypeError("Expected argument 'credentials' to be a dict")
        pulumi.set(__self__, "credentials", credentials)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if service_instance_name and not isinstance(service_instance_name, str):
            raise TypeError("Expected argument 'service_instance_name' to be a str")
        pulumi.set(__self__, "service_instance_name", service_instance_name)
        if space_guid and not isinstance(space_guid, str):
            raise TypeError("Expected argument 'space_guid' to be a str")
        pulumi.set(__self__, "space_guid", space_guid)

    @_builtins.property
    @pulumi.getter
    def credentials(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "credentials")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="serviceInstanceName")
    def service_instance_name(self) -> _builtins.str:
        return pulumi.get(self, "service_instance_name")

    @_builtins.property
    @pulumi.getter(name="spaceGuid")
    def space_guid(self) -> _builtins.str:
        return pulumi.get(self, "space_guid")


class AwaitableGetServiceKeyResult(GetServiceKeyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceKeyResult(
            credentials=self.credentials,
            id=self.id,
            name=self.name,
            service_instance_name=self.service_instance_name,
            space_guid=self.space_guid)


def get_service_key(id: Optional[_builtins.str] = None,
                    name: Optional[_builtins.str] = None,
                    service_instance_name: Optional[_builtins.str] = None,
                    space_guid: Optional[_builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServiceKeyResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['serviceInstanceName'] = service_instance_name
    __args__['spaceGuid'] = space_guid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getServiceKey:getServiceKey', __args__, opts=opts, typ=GetServiceKeyResult, package_ref=_utilities.get_package()).value

    return AwaitableGetServiceKeyResult(
        credentials=pulumi.get(__ret__, 'credentials'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        service_instance_name=pulumi.get(__ret__, 'service_instance_name'),
        space_guid=pulumi.get(__ret__, 'space_guid'))
def get_service_key_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           name: Optional[pulumi.Input[_builtins.str]] = None,
                           service_instance_name: Optional[pulumi.Input[_builtins.str]] = None,
                           space_guid: Optional[pulumi.Input[_builtins.str]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetServiceKeyResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['serviceInstanceName'] = service_instance_name
    __args__['spaceGuid'] = space_guid
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getServiceKey:getServiceKey', __args__, opts=opts, typ=GetServiceKeyResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetServiceKeyResult(
        credentials=pulumi.get(__response__, 'credentials'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        service_instance_name=pulumi.get(__response__, 'service_instance_name'),
        space_guid=pulumi.get(__response__, 'space_guid')))
