# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['AppDomainSharedArgs', 'AppDomainShared']

@pulumi.input_type
class AppDomainSharedArgs:
    def __init__(__self__, *,
                 app_domain_shared_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 router_group_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a AppDomainShared resource.
        :param pulumi.Input[_builtins.str] name: The name of the domain
        :param pulumi.Input[_builtins.str] router_group_guid: The guid of the router group.
        """
        if app_domain_shared_id is not None:
            pulumi.set(__self__, "app_domain_shared_id", app_domain_shared_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if router_group_guid is not None:
            pulumi.set(__self__, "router_group_guid", router_group_guid)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="appDomainSharedId")
    def app_domain_shared_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "app_domain_shared_id")

    @app_domain_shared_id.setter
    def app_domain_shared_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_domain_shared_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the domain
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="routerGroupGuid")
    def router_group_guid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The guid of the router group.
        """
        return pulumi.get(self, "router_group_guid")

    @router_group_guid.setter
    def router_group_guid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "router_group_guid", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _AppDomainSharedState:
    def __init__(__self__, *,
                 app_domain_shared_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 router_group_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering AppDomainShared resources.
        :param pulumi.Input[_builtins.str] name: The name of the domain
        :param pulumi.Input[_builtins.str] router_group_guid: The guid of the router group.
        """
        if app_domain_shared_id is not None:
            pulumi.set(__self__, "app_domain_shared_id", app_domain_shared_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if router_group_guid is not None:
            pulumi.set(__self__, "router_group_guid", router_group_guid)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="appDomainSharedId")
    def app_domain_shared_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "app_domain_shared_id")

    @app_domain_shared_id.setter
    def app_domain_shared_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_domain_shared_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the domain
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="routerGroupGuid")
    def router_group_guid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The guid of the router group.
        """
        return pulumi.get(self, "router_group_guid")

    @router_group_guid.setter
    def router_group_guid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "router_group_guid", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("ibm:index/appDomainShared:AppDomainShared")
class AppDomainShared(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_domain_shared_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 router_group_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Create a AppDomainShared resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: The name of the domain
        :param pulumi.Input[_builtins.str] router_group_guid: The guid of the router group.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[AppDomainSharedArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AppDomainShared resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AppDomainSharedArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppDomainSharedArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_domain_shared_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 router_group_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppDomainSharedArgs.__new__(AppDomainSharedArgs)

            __props__.__dict__["app_domain_shared_id"] = app_domain_shared_id
            __props__.__dict__["name"] = name
            __props__.__dict__["router_group_guid"] = router_group_guid
            __props__.__dict__["tags"] = tags
        super(AppDomainShared, __self__).__init__(
            'ibm:index/appDomainShared:AppDomainShared',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_domain_shared_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            router_group_guid: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'AppDomainShared':
        """
        Get an existing AppDomainShared resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: The name of the domain
        :param pulumi.Input[_builtins.str] router_group_guid: The guid of the router group.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppDomainSharedState.__new__(_AppDomainSharedState)

        __props__.__dict__["app_domain_shared_id"] = app_domain_shared_id
        __props__.__dict__["name"] = name
        __props__.__dict__["router_group_guid"] = router_group_guid
        __props__.__dict__["tags"] = tags
        return AppDomainShared(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="appDomainSharedId")
    def app_domain_shared_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "app_domain_shared_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the domain
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="routerGroupGuid")
    def router_group_guid(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The guid of the router group.
        """
        return pulumi.get(self, "router_group_guid")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        return pulumi.get(self, "tags")

