# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetDatabaseTaskResult',
    'AwaitableGetDatabaseTaskResult',
    'get_database_task',
    'get_database_task_output',
]

@pulumi.output_type
class GetDatabaseTaskResult:
    """
    A collection of values returned by getDatabaseTask.
    """
    def __init__(__self__, created_at=None, deployment_id=None, description=None, id=None, progress_percent=None, status=None, task_id=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if deployment_id and not isinstance(deployment_id, str):
            raise TypeError("Expected argument 'deployment_id' to be a str")
        pulumi.set(__self__, "deployment_id", deployment_id)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if progress_percent and not isinstance(progress_percent, float):
            raise TypeError("Expected argument 'progress_percent' to be a float")
        pulumi.set(__self__, "progress_percent", progress_percent)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if task_id and not isinstance(task_id, str):
            raise TypeError("Expected argument 'task_id' to be a str")
        pulumi.set(__self__, "task_id", task_id)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> _builtins.str:
        return pulumi.get(self, "deployment_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="progressPercent")
    def progress_percent(self) -> _builtins.float:
        return pulumi.get(self, "progress_percent")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> _builtins.str:
        return pulumi.get(self, "task_id")


class AwaitableGetDatabaseTaskResult(GetDatabaseTaskResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDatabaseTaskResult(
            created_at=self.created_at,
            deployment_id=self.deployment_id,
            description=self.description,
            id=self.id,
            progress_percent=self.progress_percent,
            status=self.status,
            task_id=self.task_id)


def get_database_task(id: Optional[_builtins.str] = None,
                      task_id: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDatabaseTaskResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['taskId'] = task_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getDatabaseTask:getDatabaseTask', __args__, opts=opts, typ=GetDatabaseTaskResult, package_ref=_utilities.get_package()).value

    return AwaitableGetDatabaseTaskResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        deployment_id=pulumi.get(__ret__, 'deployment_id'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        progress_percent=pulumi.get(__ret__, 'progress_percent'),
        status=pulumi.get(__ret__, 'status'),
        task_id=pulumi.get(__ret__, 'task_id'))
def get_database_task_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             task_id: Optional[pulumi.Input[_builtins.str]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDatabaseTaskResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['taskId'] = task_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getDatabaseTask:getDatabaseTask', __args__, opts=opts, typ=GetDatabaseTaskResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetDatabaseTaskResult(
        created_at=pulumi.get(__response__, 'created_at'),
        deployment_id=pulumi.get(__response__, 'deployment_id'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        progress_percent=pulumi.get(__response__, 'progress_percent'),
        status=pulumi.get(__response__, 'status'),
        task_id=pulumi.get(__response__, 'task_id')))
