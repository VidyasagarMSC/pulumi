# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['LbaasHealthMonitorInitArgs', 'LbaasHealthMonitor']

@pulumi.input_type
class LbaasHealthMonitorInitArgs:
    def __init__(__self__, *,
                 lbaas_id: pulumi.Input[_builtins.str],
                 monitor_id: pulumi.Input[_builtins.str],
                 port: pulumi.Input[_builtins.float],
                 protocol: pulumi.Input[_builtins.str],
                 interval: Optional[pulumi.Input[_builtins.float]] = None,
                 lbaas_health_monitor_id: Optional[pulumi.Input[_builtins.str]] = None,
                 max_retries: Optional[pulumi.Input[_builtins.float]] = None,
                 timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 url_path: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a LbaasHealthMonitor resource.
        :param pulumi.Input[_builtins.str] lbaas_id: LBAAS id
        :param pulumi.Input[_builtins.str] monitor_id: Monitor ID
        :param pulumi.Input[_builtins.float] port: Port number
        :param pulumi.Input[_builtins.str] protocol: Protocol value
        :param pulumi.Input[_builtins.float] interval: Interval value
        :param pulumi.Input[_builtins.float] max_retries: Maximum retry counts
        :param pulumi.Input[_builtins.float] timeout: Timeout in seconds
        :param pulumi.Input[_builtins.str] url_path: URL Path
        """
        pulumi.set(__self__, "lbaas_id", lbaas_id)
        pulumi.set(__self__, "monitor_id", monitor_id)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if lbaas_health_monitor_id is not None:
            pulumi.set(__self__, "lbaas_health_monitor_id", lbaas_health_monitor_id)
        if max_retries is not None:
            pulumi.set(__self__, "max_retries", max_retries)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if url_path is not None:
            pulumi.set(__self__, "url_path", url_path)

    @_builtins.property
    @pulumi.getter(name="lbaasId")
    def lbaas_id(self) -> pulumi.Input[_builtins.str]:
        """
        LBAAS id
        """
        return pulumi.get(self, "lbaas_id")

    @lbaas_id.setter
    def lbaas_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "lbaas_id", value)

    @_builtins.property
    @pulumi.getter(name="monitorId")
    def monitor_id(self) -> pulumi.Input[_builtins.str]:
        """
        Monitor ID
        """
        return pulumi.get(self, "monitor_id")

    @monitor_id.setter
    def monitor_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "monitor_id", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Input[_builtins.float]:
        """
        Port number
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[_builtins.str]:
        """
        Protocol value
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Interval value
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "interval", value)

    @_builtins.property
    @pulumi.getter(name="lbaasHealthMonitorId")
    def lbaas_health_monitor_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "lbaas_health_monitor_id")

    @lbaas_health_monitor_id.setter
    def lbaas_health_monitor_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lbaas_health_monitor_id", value)

    @_builtins.property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Maximum retry counts
        """
        return pulumi.get(self, "max_retries")

    @max_retries.setter
    def max_retries(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "max_retries", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Timeout in seconds
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "timeout", value)

    @_builtins.property
    @pulumi.getter(name="urlPath")
    def url_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        URL Path
        """
        return pulumi.get(self, "url_path")

    @url_path.setter
    def url_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "url_path", value)


@pulumi.input_type
class _LbaasHealthMonitorState:
    def __init__(__self__, *,
                 interval: Optional[pulumi.Input[_builtins.float]] = None,
                 lbaas_health_monitor_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lbaas_id: Optional[pulumi.Input[_builtins.str]] = None,
                 max_retries: Optional[pulumi.Input[_builtins.float]] = None,
                 monitor_id: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 url_path: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering LbaasHealthMonitor resources.
        :param pulumi.Input[_builtins.float] interval: Interval value
        :param pulumi.Input[_builtins.str] lbaas_id: LBAAS id
        :param pulumi.Input[_builtins.float] max_retries: Maximum retry counts
        :param pulumi.Input[_builtins.str] monitor_id: Monitor ID
        :param pulumi.Input[_builtins.float] port: Port number
        :param pulumi.Input[_builtins.str] protocol: Protocol value
        :param pulumi.Input[_builtins.float] timeout: Timeout in seconds
        :param pulumi.Input[_builtins.str] url_path: URL Path
        """
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if lbaas_health_monitor_id is not None:
            pulumi.set(__self__, "lbaas_health_monitor_id", lbaas_health_monitor_id)
        if lbaas_id is not None:
            pulumi.set(__self__, "lbaas_id", lbaas_id)
        if max_retries is not None:
            pulumi.set(__self__, "max_retries", max_retries)
        if monitor_id is not None:
            pulumi.set(__self__, "monitor_id", monitor_id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if url_path is not None:
            pulumi.set(__self__, "url_path", url_path)

    @_builtins.property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Interval value
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "interval", value)

    @_builtins.property
    @pulumi.getter(name="lbaasHealthMonitorId")
    def lbaas_health_monitor_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "lbaas_health_monitor_id")

    @lbaas_health_monitor_id.setter
    def lbaas_health_monitor_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lbaas_health_monitor_id", value)

    @_builtins.property
    @pulumi.getter(name="lbaasId")
    def lbaas_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        LBAAS id
        """
        return pulumi.get(self, "lbaas_id")

    @lbaas_id.setter
    def lbaas_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lbaas_id", value)

    @_builtins.property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Maximum retry counts
        """
        return pulumi.get(self, "max_retries")

    @max_retries.setter
    def max_retries(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "max_retries", value)

    @_builtins.property
    @pulumi.getter(name="monitorId")
    def monitor_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Monitor ID
        """
        return pulumi.get(self, "monitor_id")

    @monitor_id.setter
    def monitor_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "monitor_id", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Port number
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Protocol value
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "protocol", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Timeout in seconds
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "timeout", value)

    @_builtins.property
    @pulumi.getter(name="urlPath")
    def url_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        URL Path
        """
        return pulumi.get(self, "url_path")

    @url_path.setter
    def url_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "url_path", value)


@pulumi.type_token("ibm:index/lbaasHealthMonitor:LbaasHealthMonitor")
class LbaasHealthMonitor(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 interval: Optional[pulumi.Input[_builtins.float]] = None,
                 lbaas_health_monitor_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lbaas_id: Optional[pulumi.Input[_builtins.str]] = None,
                 max_retries: Optional[pulumi.Input[_builtins.float]] = None,
                 monitor_id: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 url_path: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a LbaasHealthMonitor resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] interval: Interval value
        :param pulumi.Input[_builtins.str] lbaas_id: LBAAS id
        :param pulumi.Input[_builtins.float] max_retries: Maximum retry counts
        :param pulumi.Input[_builtins.str] monitor_id: Monitor ID
        :param pulumi.Input[_builtins.float] port: Port number
        :param pulumi.Input[_builtins.str] protocol: Protocol value
        :param pulumi.Input[_builtins.float] timeout: Timeout in seconds
        :param pulumi.Input[_builtins.str] url_path: URL Path
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LbaasHealthMonitorInitArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a LbaasHealthMonitor resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LbaasHealthMonitorInitArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LbaasHealthMonitorInitArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 interval: Optional[pulumi.Input[_builtins.float]] = None,
                 lbaas_health_monitor_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lbaas_id: Optional[pulumi.Input[_builtins.str]] = None,
                 max_retries: Optional[pulumi.Input[_builtins.float]] = None,
                 monitor_id: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 url_path: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LbaasHealthMonitorInitArgs.__new__(LbaasHealthMonitorInitArgs)

            __props__.__dict__["interval"] = interval
            __props__.__dict__["lbaas_health_monitor_id"] = lbaas_health_monitor_id
            if lbaas_id is None and not opts.urn:
                raise TypeError("Missing required property 'lbaas_id'")
            __props__.__dict__["lbaas_id"] = lbaas_id
            __props__.__dict__["max_retries"] = max_retries
            if monitor_id is None and not opts.urn:
                raise TypeError("Missing required property 'monitor_id'")
            __props__.__dict__["monitor_id"] = monitor_id
            if port is None and not opts.urn:
                raise TypeError("Missing required property 'port'")
            __props__.__dict__["port"] = port
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["timeout"] = timeout
            __props__.__dict__["url_path"] = url_path
        super(LbaasHealthMonitor, __self__).__init__(
            'ibm:index/lbaasHealthMonitor:LbaasHealthMonitor',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            interval: Optional[pulumi.Input[_builtins.float]] = None,
            lbaas_health_monitor_id: Optional[pulumi.Input[_builtins.str]] = None,
            lbaas_id: Optional[pulumi.Input[_builtins.str]] = None,
            max_retries: Optional[pulumi.Input[_builtins.float]] = None,
            monitor_id: Optional[pulumi.Input[_builtins.str]] = None,
            port: Optional[pulumi.Input[_builtins.float]] = None,
            protocol: Optional[pulumi.Input[_builtins.str]] = None,
            timeout: Optional[pulumi.Input[_builtins.float]] = None,
            url_path: Optional[pulumi.Input[_builtins.str]] = None) -> 'LbaasHealthMonitor':
        """
        Get an existing LbaasHealthMonitor resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] interval: Interval value
        :param pulumi.Input[_builtins.str] lbaas_id: LBAAS id
        :param pulumi.Input[_builtins.float] max_retries: Maximum retry counts
        :param pulumi.Input[_builtins.str] monitor_id: Monitor ID
        :param pulumi.Input[_builtins.float] port: Port number
        :param pulumi.Input[_builtins.str] protocol: Protocol value
        :param pulumi.Input[_builtins.float] timeout: Timeout in seconds
        :param pulumi.Input[_builtins.str] url_path: URL Path
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LbaasHealthMonitorState.__new__(_LbaasHealthMonitorState)

        __props__.__dict__["interval"] = interval
        __props__.__dict__["lbaas_health_monitor_id"] = lbaas_health_monitor_id
        __props__.__dict__["lbaas_id"] = lbaas_id
        __props__.__dict__["max_retries"] = max_retries
        __props__.__dict__["monitor_id"] = monitor_id
        __props__.__dict__["port"] = port
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["timeout"] = timeout
        __props__.__dict__["url_path"] = url_path
        return LbaasHealthMonitor(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def interval(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Interval value
        """
        return pulumi.get(self, "interval")

    @_builtins.property
    @pulumi.getter(name="lbaasHealthMonitorId")
    def lbaas_health_monitor_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "lbaas_health_monitor_id")

    @_builtins.property
    @pulumi.getter(name="lbaasId")
    def lbaas_id(self) -> pulumi.Output[_builtins.str]:
        """
        LBAAS id
        """
        return pulumi.get(self, "lbaas_id")

    @_builtins.property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Maximum retry counts
        """
        return pulumi.get(self, "max_retries")

    @_builtins.property
    @pulumi.getter(name="monitorId")
    def monitor_id(self) -> pulumi.Output[_builtins.str]:
        """
        Monitor ID
        """
        return pulumi.get(self, "monitor_id")

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Output[_builtins.float]:
        """
        Port number
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[_builtins.str]:
        """
        Protocol value
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Timeout in seconds
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter(name="urlPath")
    def url_path(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        URL Path
        """
        return pulumi.get(self, "url_path")

