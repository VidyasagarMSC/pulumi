# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['StorageEvaultArgs', 'StorageEvault']

@pulumi.input_type
class StorageEvaultArgs:
    def __init__(__self__, *,
                 capacity: pulumi.Input[_builtins.float],
                 datacenter: pulumi.Input[_builtins.str],
                 hardware_instance_id: Optional[pulumi.Input[_builtins.float]] = None,
                 storage_evault_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['StorageEvaultTimeoutsArgs']] = None,
                 virtual_instance_id: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a StorageEvault resource.
        :param pulumi.Input[_builtins.float] capacity: Capacity
        :param pulumi.Input[_builtins.str] datacenter: Datacenter name
        :param pulumi.Input[_builtins.float] hardware_instance_id: Hardware instance ID
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags set for the resource
        :param pulumi.Input[_builtins.float] virtual_instance_id: Virtual instance ID
        """
        pulumi.set(__self__, "capacity", capacity)
        pulumi.set(__self__, "datacenter", datacenter)
        if hardware_instance_id is not None:
            pulumi.set(__self__, "hardware_instance_id", hardware_instance_id)
        if storage_evault_id is not None:
            pulumi.set(__self__, "storage_evault_id", storage_evault_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if virtual_instance_id is not None:
            pulumi.set(__self__, "virtual_instance_id", virtual_instance_id)

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> pulumi.Input[_builtins.float]:
        """
        Capacity
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "capacity", value)

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> pulumi.Input[_builtins.str]:
        """
        Datacenter name
        """
        return pulumi.get(self, "datacenter")

    @datacenter.setter
    def datacenter(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "datacenter", value)

    @_builtins.property
    @pulumi.getter(name="hardwareInstanceId")
    def hardware_instance_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Hardware instance ID
        """
        return pulumi.get(self, "hardware_instance_id")

    @hardware_instance_id.setter
    def hardware_instance_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "hardware_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="storageEvaultId")
    def storage_evault_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "storage_evault_id")

    @storage_evault_id.setter
    def storage_evault_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_evault_id", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Tags set for the resource
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['StorageEvaultTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['StorageEvaultTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="virtualInstanceId")
    def virtual_instance_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Virtual instance ID
        """
        return pulumi.get(self, "virtual_instance_id")

    @virtual_instance_id.setter
    def virtual_instance_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "virtual_instance_id", value)


@pulumi.input_type
class _StorageEvaultState:
    def __init__(__self__, *,
                 capacity: Optional[pulumi.Input[_builtins.float]] = None,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 hardware_instance_id: Optional[pulumi.Input[_builtins.float]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 service_resource_name: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_evault_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['StorageEvaultTimeoutsArgs']] = None,
                 username: Optional[pulumi.Input[_builtins.str]] = None,
                 virtual_instance_id: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering StorageEvault resources.
        :param pulumi.Input[_builtins.float] capacity: Capacity
        :param pulumi.Input[_builtins.str] datacenter: Datacenter name
        :param pulumi.Input[_builtins.float] hardware_instance_id: Hardware instance ID
        :param pulumi.Input[_builtins.str] password: password
        :param pulumi.Input[_builtins.str] service_resource_name: service resource name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags set for the resource
        :param pulumi.Input[_builtins.str] username: user name
        :param pulumi.Input[_builtins.float] virtual_instance_id: Virtual instance ID
        """
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if hardware_instance_id is not None:
            pulumi.set(__self__, "hardware_instance_id", hardware_instance_id)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if service_resource_name is not None:
            pulumi.set(__self__, "service_resource_name", service_resource_name)
        if storage_evault_id is not None:
            pulumi.set(__self__, "storage_evault_id", storage_evault_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if virtual_instance_id is not None:
            pulumi.set(__self__, "virtual_instance_id", virtual_instance_id)

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Capacity
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "capacity", value)

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Datacenter name
        """
        return pulumi.get(self, "datacenter")

    @datacenter.setter
    def datacenter(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "datacenter", value)

    @_builtins.property
    @pulumi.getter(name="hardwareInstanceId")
    def hardware_instance_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Hardware instance ID
        """
        return pulumi.get(self, "hardware_instance_id")

    @hardware_instance_id.setter
    def hardware_instance_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "hardware_instance_id", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        password
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter(name="serviceResourceName")
    def service_resource_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        service resource name
        """
        return pulumi.get(self, "service_resource_name")

    @service_resource_name.setter
    def service_resource_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_resource_name", value)

    @_builtins.property
    @pulumi.getter(name="storageEvaultId")
    def storage_evault_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "storage_evault_id")

    @storage_evault_id.setter
    def storage_evault_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_evault_id", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Tags set for the resource
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['StorageEvaultTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['StorageEvaultTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        user name
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "username", value)

    @_builtins.property
    @pulumi.getter(name="virtualInstanceId")
    def virtual_instance_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Virtual instance ID
        """
        return pulumi.get(self, "virtual_instance_id")

    @virtual_instance_id.setter
    def virtual_instance_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "virtual_instance_id", value)


@pulumi.type_token("ibm:index/storageEvault:StorageEvault")
class StorageEvault(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 capacity: Optional[pulumi.Input[_builtins.float]] = None,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 hardware_instance_id: Optional[pulumi.Input[_builtins.float]] = None,
                 storage_evault_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['StorageEvaultTimeoutsArgs', 'StorageEvaultTimeoutsArgsDict']]] = None,
                 virtual_instance_id: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a StorageEvault resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] capacity: Capacity
        :param pulumi.Input[_builtins.str] datacenter: Datacenter name
        :param pulumi.Input[_builtins.float] hardware_instance_id: Hardware instance ID
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags set for the resource
        :param pulumi.Input[_builtins.float] virtual_instance_id: Virtual instance ID
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: StorageEvaultArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a StorageEvault resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param StorageEvaultArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StorageEvaultArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 capacity: Optional[pulumi.Input[_builtins.float]] = None,
                 datacenter: Optional[pulumi.Input[_builtins.str]] = None,
                 hardware_instance_id: Optional[pulumi.Input[_builtins.float]] = None,
                 storage_evault_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['StorageEvaultTimeoutsArgs', 'StorageEvaultTimeoutsArgsDict']]] = None,
                 virtual_instance_id: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StorageEvaultArgs.__new__(StorageEvaultArgs)

            if capacity is None and not opts.urn:
                raise TypeError("Missing required property 'capacity'")
            __props__.__dict__["capacity"] = capacity
            if datacenter is None and not opts.urn:
                raise TypeError("Missing required property 'datacenter'")
            __props__.__dict__["datacenter"] = datacenter
            __props__.__dict__["hardware_instance_id"] = hardware_instance_id
            __props__.__dict__["storage_evault_id"] = storage_evault_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["virtual_instance_id"] = virtual_instance_id
            __props__.__dict__["password"] = None
            __props__.__dict__["service_resource_name"] = None
            __props__.__dict__["username"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(StorageEvault, __self__).__init__(
            'ibm:index/storageEvault:StorageEvault',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            capacity: Optional[pulumi.Input[_builtins.float]] = None,
            datacenter: Optional[pulumi.Input[_builtins.str]] = None,
            hardware_instance_id: Optional[pulumi.Input[_builtins.float]] = None,
            password: Optional[pulumi.Input[_builtins.str]] = None,
            service_resource_name: Optional[pulumi.Input[_builtins.str]] = None,
            storage_evault_id: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            timeouts: Optional[pulumi.Input[Union['StorageEvaultTimeoutsArgs', 'StorageEvaultTimeoutsArgsDict']]] = None,
            username: Optional[pulumi.Input[_builtins.str]] = None,
            virtual_instance_id: Optional[pulumi.Input[_builtins.float]] = None) -> 'StorageEvault':
        """
        Get an existing StorageEvault resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] capacity: Capacity
        :param pulumi.Input[_builtins.str] datacenter: Datacenter name
        :param pulumi.Input[_builtins.float] hardware_instance_id: Hardware instance ID
        :param pulumi.Input[_builtins.str] password: password
        :param pulumi.Input[_builtins.str] service_resource_name: service resource name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags set for the resource
        :param pulumi.Input[_builtins.str] username: user name
        :param pulumi.Input[_builtins.float] virtual_instance_id: Virtual instance ID
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _StorageEvaultState.__new__(_StorageEvaultState)

        __props__.__dict__["capacity"] = capacity
        __props__.__dict__["datacenter"] = datacenter
        __props__.__dict__["hardware_instance_id"] = hardware_instance_id
        __props__.__dict__["password"] = password
        __props__.__dict__["service_resource_name"] = service_resource_name
        __props__.__dict__["storage_evault_id"] = storage_evault_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["username"] = username
        __props__.__dict__["virtual_instance_id"] = virtual_instance_id
        return StorageEvault(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> pulumi.Output[_builtins.float]:
        """
        Capacity
        """
        return pulumi.get(self, "capacity")

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> pulumi.Output[_builtins.str]:
        """
        Datacenter name
        """
        return pulumi.get(self, "datacenter")

    @_builtins.property
    @pulumi.getter(name="hardwareInstanceId")
    def hardware_instance_id(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Hardware instance ID
        """
        return pulumi.get(self, "hardware_instance_id")

    @_builtins.property
    @pulumi.getter
    def password(self) -> pulumi.Output[_builtins.str]:
        """
        password
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter(name="serviceResourceName")
    def service_resource_name(self) -> pulumi.Output[_builtins.str]:
        """
        service resource name
        """
        return pulumi.get(self, "service_resource_name")

    @_builtins.property
    @pulumi.getter(name="storageEvaultId")
    def storage_evault_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "storage_evault_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Tags set for the resource
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.StorageEvaultTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def username(self) -> pulumi.Output[_builtins.str]:
        """
        user name
        """
        return pulumi.get(self, "username")

    @_builtins.property
    @pulumi.getter(name="virtualInstanceId")
    def virtual_instance_id(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Virtual instance ID
        """
        return pulumi.get(self, "virtual_instance_id")

