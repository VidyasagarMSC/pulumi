# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CodeEngineBindingArgs', 'CodeEngineBinding']

@pulumi.input_type
class CodeEngineBindingArgs:
    def __init__(__self__, *,
                 component: pulumi.Input['CodeEngineBindingComponentArgs'],
                 prefix: pulumi.Input[_builtins.str],
                 project_id: pulumi.Input[_builtins.str],
                 secret_name: pulumi.Input[_builtins.str],
                 code_engine_binding_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['CodeEngineBindingTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a CodeEngineBinding resource.
        :param pulumi.Input['CodeEngineBindingComponentArgs'] component: A reference to another component.
        :param pulumi.Input[_builtins.str] prefix: The value that is set as a prefix in the component that is bound.
        :param pulumi.Input[_builtins.str] project_id: The ID of the project.
        :param pulumi.Input[_builtins.str] secret_name: The service access secret that is bound to a component.
        """
        pulumi.set(__self__, "component", component)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "secret_name", secret_name)
        if code_engine_binding_id is not None:
            pulumi.set(__self__, "code_engine_binding_id", code_engine_binding_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def component(self) -> pulumi.Input['CodeEngineBindingComponentArgs']:
        """
        A reference to another component.
        """
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: pulumi.Input['CodeEngineBindingComponentArgs']):
        pulumi.set(self, "component", value)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> pulumi.Input[_builtins.str]:
        """
        The value that is set as a prefix in the component that is bound.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "prefix", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the project.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[_builtins.str]:
        """
        The service access secret that is bound to a component.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "secret_name", value)

    @_builtins.property
    @pulumi.getter(name="codeEngineBindingId")
    def code_engine_binding_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "code_engine_binding_id")

    @code_engine_binding_id.setter
    def code_engine_binding_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "code_engine_binding_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['CodeEngineBindingTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['CodeEngineBindingTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _CodeEngineBindingState:
    def __init__(__self__, *,
                 binding_id: Optional[pulumi.Input[_builtins.str]] = None,
                 code_engine_binding_id: Optional[pulumi.Input[_builtins.str]] = None,
                 component: Optional[pulumi.Input['CodeEngineBindingComponentArgs']] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_name: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['CodeEngineBindingTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering CodeEngineBinding resources.
        :param pulumi.Input[_builtins.str] binding_id: The ID of the binding.
        :param pulumi.Input['CodeEngineBindingComponentArgs'] component: A reference to another component.
        :param pulumi.Input[_builtins.str] href: When you provision a new binding, a URL is created identifying the location of the instance.
        :param pulumi.Input[_builtins.str] prefix: The value that is set as a prefix in the component that is bound.
        :param pulumi.Input[_builtins.str] project_id: The ID of the project.
        :param pulumi.Input[_builtins.str] resource_type: The type of the binding.
        :param pulumi.Input[_builtins.str] secret_name: The service access secret that is bound to a component.
        :param pulumi.Input[_builtins.str] status: The current status of the binding.
        """
        if binding_id is not None:
            pulumi.set(__self__, "binding_id", binding_id)
        if code_engine_binding_id is not None:
            pulumi.set(__self__, "code_engine_binding_id", code_engine_binding_id)
        if component is not None:
            pulumi.set(__self__, "component", component)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="bindingId")
    def binding_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the binding.
        """
        return pulumi.get(self, "binding_id")

    @binding_id.setter
    def binding_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "binding_id", value)

    @_builtins.property
    @pulumi.getter(name="codeEngineBindingId")
    def code_engine_binding_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "code_engine_binding_id")

    @code_engine_binding_id.setter
    def code_engine_binding_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "code_engine_binding_id", value)

    @_builtins.property
    @pulumi.getter
    def component(self) -> Optional[pulumi.Input['CodeEngineBindingComponentArgs']]:
        """
        A reference to another component.
        """
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[pulumi.Input['CodeEngineBindingComponentArgs']]):
        pulumi.set(self, "component", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        When you provision a new binding, a URL is created identifying the location of the instance.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The value that is set as a prefix in the component that is bound.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the project.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the binding.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The service access secret that is bound to a component.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secret_name", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The current status of the binding.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['CodeEngineBindingTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['CodeEngineBindingTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/codeEngineBinding:CodeEngineBinding")
class CodeEngineBinding(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 code_engine_binding_id: Optional[pulumi.Input[_builtins.str]] = None,
                 component: Optional[pulumi.Input[Union['CodeEngineBindingComponentArgs', 'CodeEngineBindingComponentArgsDict']]] = None,
                 prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_name: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['CodeEngineBindingTimeoutsArgs', 'CodeEngineBindingTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a CodeEngineBinding resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['CodeEngineBindingComponentArgs', 'CodeEngineBindingComponentArgsDict']] component: A reference to another component.
        :param pulumi.Input[_builtins.str] prefix: The value that is set as a prefix in the component that is bound.
        :param pulumi.Input[_builtins.str] project_id: The ID of the project.
        :param pulumi.Input[_builtins.str] secret_name: The service access secret that is bound to a component.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CodeEngineBindingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CodeEngineBinding resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CodeEngineBindingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CodeEngineBindingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 code_engine_binding_id: Optional[pulumi.Input[_builtins.str]] = None,
                 component: Optional[pulumi.Input[Union['CodeEngineBindingComponentArgs', 'CodeEngineBindingComponentArgsDict']]] = None,
                 prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 secret_name: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['CodeEngineBindingTimeoutsArgs', 'CodeEngineBindingTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CodeEngineBindingArgs.__new__(CodeEngineBindingArgs)

            __props__.__dict__["code_engine_binding_id"] = code_engine_binding_id
            if component is None and not opts.urn:
                raise TypeError("Missing required property 'component'")
            __props__.__dict__["component"] = component
            if prefix is None and not opts.urn:
                raise TypeError("Missing required property 'prefix'")
            __props__.__dict__["prefix"] = prefix
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            if secret_name is None and not opts.urn:
                raise TypeError("Missing required property 'secret_name'")
            __props__.__dict__["secret_name"] = secret_name
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["binding_id"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["resource_type"] = None
            __props__.__dict__["status"] = None
        super(CodeEngineBinding, __self__).__init__(
            'ibm:index/codeEngineBinding:CodeEngineBinding',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            binding_id: Optional[pulumi.Input[_builtins.str]] = None,
            code_engine_binding_id: Optional[pulumi.Input[_builtins.str]] = None,
            component: Optional[pulumi.Input[Union['CodeEngineBindingComponentArgs', 'CodeEngineBindingComponentArgsDict']]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            prefix: Optional[pulumi.Input[_builtins.str]] = None,
            project_id: Optional[pulumi.Input[_builtins.str]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            secret_name: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['CodeEngineBindingTimeoutsArgs', 'CodeEngineBindingTimeoutsArgsDict']]] = None) -> 'CodeEngineBinding':
        """
        Get an existing CodeEngineBinding resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] binding_id: The ID of the binding.
        :param pulumi.Input[Union['CodeEngineBindingComponentArgs', 'CodeEngineBindingComponentArgsDict']] component: A reference to another component.
        :param pulumi.Input[_builtins.str] href: When you provision a new binding, a URL is created identifying the location of the instance.
        :param pulumi.Input[_builtins.str] prefix: The value that is set as a prefix in the component that is bound.
        :param pulumi.Input[_builtins.str] project_id: The ID of the project.
        :param pulumi.Input[_builtins.str] resource_type: The type of the binding.
        :param pulumi.Input[_builtins.str] secret_name: The service access secret that is bound to a component.
        :param pulumi.Input[_builtins.str] status: The current status of the binding.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CodeEngineBindingState.__new__(_CodeEngineBindingState)

        __props__.__dict__["binding_id"] = binding_id
        __props__.__dict__["code_engine_binding_id"] = code_engine_binding_id
        __props__.__dict__["component"] = component
        __props__.__dict__["href"] = href
        __props__.__dict__["prefix"] = prefix
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["secret_name"] = secret_name
        __props__.__dict__["status"] = status
        __props__.__dict__["timeouts"] = timeouts
        return CodeEngineBinding(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="bindingId")
    def binding_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the binding.
        """
        return pulumi.get(self, "binding_id")

    @_builtins.property
    @pulumi.getter(name="codeEngineBindingId")
    def code_engine_binding_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "code_engine_binding_id")

    @_builtins.property
    @pulumi.getter
    def component(self) -> pulumi.Output['outputs.CodeEngineBindingComponent']:
        """
        A reference to another component.
        """
        return pulumi.get(self, "component")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        When you provision a new binding, a URL is created identifying the location of the instance.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> pulumi.Output[_builtins.str]:
        """
        The value that is set as a prefix in the component that is bound.
        """
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the project.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of the binding.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Output[_builtins.str]:
        """
        The service access secret that is bound to a component.
        """
        return pulumi.get(self, "secret_name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The current status of the binding.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.CodeEngineBindingTimeouts']]:
        return pulumi.get(self, "timeouts")

