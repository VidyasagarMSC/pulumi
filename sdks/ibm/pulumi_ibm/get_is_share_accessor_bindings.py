# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsShareAccessorBindingsResult',
    'AwaitableGetIsShareAccessorBindingsResult',
    'get_is_share_accessor_bindings',
    'get_is_share_accessor_bindings_output',
]

@pulumi.output_type
class GetIsShareAccessorBindingsResult:
    """
    A collection of values returned by getIsShareAccessorBindings.
    """
    def __init__(__self__, accessor_bindings=None, id=None, share=None):
        if accessor_bindings and not isinstance(accessor_bindings, list):
            raise TypeError("Expected argument 'accessor_bindings' to be a list")
        pulumi.set(__self__, "accessor_bindings", accessor_bindings)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if share and not isinstance(share, str):
            raise TypeError("Expected argument 'share' to be a str")
        pulumi.set(__self__, "share", share)

    @_builtins.property
    @pulumi.getter(name="accessorBindings")
    def accessor_bindings(self) -> Sequence['outputs.GetIsShareAccessorBindingsAccessorBindingResult']:
        return pulumi.get(self, "accessor_bindings")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def share(self) -> _builtins.str:
        return pulumi.get(self, "share")


class AwaitableGetIsShareAccessorBindingsResult(GetIsShareAccessorBindingsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsShareAccessorBindingsResult(
            accessor_bindings=self.accessor_bindings,
            id=self.id,
            share=self.share)


def get_is_share_accessor_bindings(id: Optional[_builtins.str] = None,
                                   share: Optional[_builtins.str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsShareAccessorBindingsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['share'] = share
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsShareAccessorBindings:getIsShareAccessorBindings', __args__, opts=opts, typ=GetIsShareAccessorBindingsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsShareAccessorBindingsResult(
        accessor_bindings=pulumi.get(__ret__, 'accessor_bindings'),
        id=pulumi.get(__ret__, 'id'),
        share=pulumi.get(__ret__, 'share'))
def get_is_share_accessor_bindings_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          share: Optional[pulumi.Input[_builtins.str]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsShareAccessorBindingsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['share'] = share
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsShareAccessorBindings:getIsShareAccessorBindings', __args__, opts=opts, typ=GetIsShareAccessorBindingsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsShareAccessorBindingsResult(
        accessor_bindings=pulumi.get(__response__, 'accessor_bindings'),
        id=pulumi.get(__response__, 'id'),
        share=pulumi.get(__response__, 'share')))
