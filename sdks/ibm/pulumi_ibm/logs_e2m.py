# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LogsE2mArgs', 'LogsE2m']

@pulumi.input_type
class LogsE2mArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 logs_e2m_id: Optional[pulumi.Input[_builtins.str]] = None,
                 logs_query: Optional[pulumi.Input['LogsE2mLogsQueryArgs']] = None,
                 metric_fields: Optional[pulumi.Input[Sequence[pulumi.Input['LogsE2mMetricFieldArgs']]]] = None,
                 metric_labels: Optional[pulumi.Input[Sequence[pulumi.Input['LogsE2mMetricLabelArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a LogsE2m resource.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the logs instance.
        :param pulumi.Input[_builtins.str] description: Description of the E2M.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input['LogsE2mLogsQueryArgs'] logs_query: E2M logs query.
        :param pulumi.Input[Sequence[pulumi.Input['LogsE2mMetricFieldArgs']]] metric_fields: E2M metric fields.
        :param pulumi.Input[Sequence[pulumi.Input['LogsE2mMetricLabelArgs']]] metric_labels: E2M metric labels.
        :param pulumi.Input[_builtins.str] name: Name of the E2M.
        :param pulumi.Input[_builtins.str] region: The region of the logs instance.
        :param pulumi.Input[_builtins.str] type: E2M type.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if logs_e2m_id is not None:
            pulumi.set(__self__, "logs_e2m_id", logs_e2m_id)
        if logs_query is not None:
            pulumi.set(__self__, "logs_query", logs_query)
        if metric_fields is not None:
            pulumi.set(__self__, "metric_fields", metric_fields)
        if metric_labels is not None:
            pulumi.set(__self__, "metric_labels", metric_labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the logs instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the E2M.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter(name="logsE2mId")
    def logs_e2m_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "logs_e2m_id")

    @logs_e2m_id.setter
    def logs_e2m_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logs_e2m_id", value)

    @_builtins.property
    @pulumi.getter(name="logsQuery")
    def logs_query(self) -> Optional[pulumi.Input['LogsE2mLogsQueryArgs']]:
        """
        E2M logs query.
        """
        return pulumi.get(self, "logs_query")

    @logs_query.setter
    def logs_query(self, value: Optional[pulumi.Input['LogsE2mLogsQueryArgs']]):
        pulumi.set(self, "logs_query", value)

    @_builtins.property
    @pulumi.getter(name="metricFields")
    def metric_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogsE2mMetricFieldArgs']]]]:
        """
        E2M metric fields.
        """
        return pulumi.get(self, "metric_fields")

    @metric_fields.setter
    def metric_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogsE2mMetricFieldArgs']]]]):
        pulumi.set(self, "metric_fields", value)

    @_builtins.property
    @pulumi.getter(name="metricLabels")
    def metric_labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogsE2mMetricLabelArgs']]]]:
        """
        E2M metric labels.
        """
        return pulumi.get(self, "metric_labels")

    @metric_labels.setter
    def metric_labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogsE2mMetricLabelArgs']]]]):
        pulumi.set(self, "metric_labels", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the E2M.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the logs instance.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        E2M type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _LogsE2mState:
    def __init__(__self__, *,
                 create_time: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 e2m_id: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_internal: Optional[pulumi.Input[_builtins.bool]] = None,
                 logs_e2m_id: Optional[pulumi.Input[_builtins.str]] = None,
                 logs_query: Optional[pulumi.Input['LogsE2mLogsQueryArgs']] = None,
                 metric_fields: Optional[pulumi.Input[Sequence[pulumi.Input['LogsE2mMetricFieldArgs']]]] = None,
                 metric_labels: Optional[pulumi.Input[Sequence[pulumi.Input['LogsE2mMetricLabelArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 permutations: Optional[pulumi.Input[Sequence[pulumi.Input['LogsE2mPermutationArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 update_time: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering LogsE2m resources.
        :param pulumi.Input[_builtins.str] create_time: E2M create time.
        :param pulumi.Input[_builtins.str] description: Description of the E2M.
        :param pulumi.Input[_builtins.str] e2m_id: event to metrics Id.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the logs instance.
        :param pulumi.Input[_builtins.bool] is_internal: A flag that represents if the e2m is for internal usage.
        :param pulumi.Input['LogsE2mLogsQueryArgs'] logs_query: E2M logs query.
        :param pulumi.Input[Sequence[pulumi.Input['LogsE2mMetricFieldArgs']]] metric_fields: E2M metric fields.
        :param pulumi.Input[Sequence[pulumi.Input['LogsE2mMetricLabelArgs']]] metric_labels: E2M metric labels.
        :param pulumi.Input[_builtins.str] name: Name of the E2M.
        :param pulumi.Input[Sequence[pulumi.Input['LogsE2mPermutationArgs']]] permutations: Represents the limit of the permutations and if the limit was exceeded.
        :param pulumi.Input[_builtins.str] region: The region of the logs instance.
        :param pulumi.Input[_builtins.str] type: E2M type.
        :param pulumi.Input[_builtins.str] update_time: E2M update time.
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if e2m_id is not None:
            pulumi.set(__self__, "e2m_id", e2m_id)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if is_internal is not None:
            pulumi.set(__self__, "is_internal", is_internal)
        if logs_e2m_id is not None:
            pulumi.set(__self__, "logs_e2m_id", logs_e2m_id)
        if logs_query is not None:
            pulumi.set(__self__, "logs_query", logs_query)
        if metric_fields is not None:
            pulumi.set(__self__, "metric_fields", metric_fields)
        if metric_labels is not None:
            pulumi.set(__self__, "metric_labels", metric_labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permutations is not None:
            pulumi.set(__self__, "permutations", permutations)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        E2M create time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "create_time", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the E2M.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="e2mId")
    def e2m_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        event to metrics Id.
        """
        return pulumi.get(self, "e2m_id")

    @e2m_id.setter
    def e2m_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "e2m_id", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the logs instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="isInternal")
    def is_internal(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        A flag that represents if the e2m is for internal usage.
        """
        return pulumi.get(self, "is_internal")

    @is_internal.setter
    def is_internal(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_internal", value)

    @_builtins.property
    @pulumi.getter(name="logsE2mId")
    def logs_e2m_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "logs_e2m_id")

    @logs_e2m_id.setter
    def logs_e2m_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logs_e2m_id", value)

    @_builtins.property
    @pulumi.getter(name="logsQuery")
    def logs_query(self) -> Optional[pulumi.Input['LogsE2mLogsQueryArgs']]:
        """
        E2M logs query.
        """
        return pulumi.get(self, "logs_query")

    @logs_query.setter
    def logs_query(self, value: Optional[pulumi.Input['LogsE2mLogsQueryArgs']]):
        pulumi.set(self, "logs_query", value)

    @_builtins.property
    @pulumi.getter(name="metricFields")
    def metric_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogsE2mMetricFieldArgs']]]]:
        """
        E2M metric fields.
        """
        return pulumi.get(self, "metric_fields")

    @metric_fields.setter
    def metric_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogsE2mMetricFieldArgs']]]]):
        pulumi.set(self, "metric_fields", value)

    @_builtins.property
    @pulumi.getter(name="metricLabels")
    def metric_labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogsE2mMetricLabelArgs']]]]:
        """
        E2M metric labels.
        """
        return pulumi.get(self, "metric_labels")

    @metric_labels.setter
    def metric_labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogsE2mMetricLabelArgs']]]]):
        pulumi.set(self, "metric_labels", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the E2M.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def permutations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogsE2mPermutationArgs']]]]:
        """
        Represents the limit of the permutations and if the limit was exceeded.
        """
        return pulumi.get(self, "permutations")

    @permutations.setter
    def permutations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogsE2mPermutationArgs']]]]):
        pulumi.set(self, "permutations", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the logs instance.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        E2M type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        E2M update time.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "update_time", value)


@pulumi.type_token("ibm:index/logsE2m:LogsE2m")
class LogsE2m(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 logs_e2m_id: Optional[pulumi.Input[_builtins.str]] = None,
                 logs_query: Optional[pulumi.Input[Union['LogsE2mLogsQueryArgs', 'LogsE2mLogsQueryArgsDict']]] = None,
                 metric_fields: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogsE2mMetricFieldArgs', 'LogsE2mMetricFieldArgsDict']]]]] = None,
                 metric_labels: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogsE2mMetricLabelArgs', 'LogsE2mMetricLabelArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a LogsE2m resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Description of the E2M.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the logs instance.
        :param pulumi.Input[Union['LogsE2mLogsQueryArgs', 'LogsE2mLogsQueryArgsDict']] logs_query: E2M logs query.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LogsE2mMetricFieldArgs', 'LogsE2mMetricFieldArgsDict']]]] metric_fields: E2M metric fields.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LogsE2mMetricLabelArgs', 'LogsE2mMetricLabelArgsDict']]]] metric_labels: E2M metric labels.
        :param pulumi.Input[_builtins.str] name: Name of the E2M.
        :param pulumi.Input[_builtins.str] region: The region of the logs instance.
        :param pulumi.Input[_builtins.str] type: E2M type.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LogsE2mArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a LogsE2m resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LogsE2mArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LogsE2mArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 logs_e2m_id: Optional[pulumi.Input[_builtins.str]] = None,
                 logs_query: Optional[pulumi.Input[Union['LogsE2mLogsQueryArgs', 'LogsE2mLogsQueryArgsDict']]] = None,
                 metric_fields: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogsE2mMetricFieldArgs', 'LogsE2mMetricFieldArgsDict']]]]] = None,
                 metric_labels: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogsE2mMetricLabelArgs', 'LogsE2mMetricLabelArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LogsE2mArgs.__new__(LogsE2mArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["endpoint_type"] = endpoint_type
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["logs_e2m_id"] = logs_e2m_id
            __props__.__dict__["logs_query"] = logs_query
            __props__.__dict__["metric_fields"] = metric_fields
            __props__.__dict__["metric_labels"] = metric_labels
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["type"] = type
            __props__.__dict__["create_time"] = None
            __props__.__dict__["e2m_id"] = None
            __props__.__dict__["is_internal"] = None
            __props__.__dict__["permutations"] = None
            __props__.__dict__["update_time"] = None
        super(LogsE2m, __self__).__init__(
            'ibm:index/logsE2m:LogsE2m',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            create_time: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            e2m_id: Optional[pulumi.Input[_builtins.str]] = None,
            endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            is_internal: Optional[pulumi.Input[_builtins.bool]] = None,
            logs_e2m_id: Optional[pulumi.Input[_builtins.str]] = None,
            logs_query: Optional[pulumi.Input[Union['LogsE2mLogsQueryArgs', 'LogsE2mLogsQueryArgsDict']]] = None,
            metric_fields: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogsE2mMetricFieldArgs', 'LogsE2mMetricFieldArgsDict']]]]] = None,
            metric_labels: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogsE2mMetricLabelArgs', 'LogsE2mMetricLabelArgsDict']]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            permutations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogsE2mPermutationArgs', 'LogsE2mPermutationArgsDict']]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            update_time: Optional[pulumi.Input[_builtins.str]] = None) -> 'LogsE2m':
        """
        Get an existing LogsE2m resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] create_time: E2M create time.
        :param pulumi.Input[_builtins.str] description: Description of the E2M.
        :param pulumi.Input[_builtins.str] e2m_id: event to metrics Id.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the logs instance.
        :param pulumi.Input[_builtins.bool] is_internal: A flag that represents if the e2m is for internal usage.
        :param pulumi.Input[Union['LogsE2mLogsQueryArgs', 'LogsE2mLogsQueryArgsDict']] logs_query: E2M logs query.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LogsE2mMetricFieldArgs', 'LogsE2mMetricFieldArgsDict']]]] metric_fields: E2M metric fields.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LogsE2mMetricLabelArgs', 'LogsE2mMetricLabelArgsDict']]]] metric_labels: E2M metric labels.
        :param pulumi.Input[_builtins.str] name: Name of the E2M.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LogsE2mPermutationArgs', 'LogsE2mPermutationArgsDict']]]] permutations: Represents the limit of the permutations and if the limit was exceeded.
        :param pulumi.Input[_builtins.str] region: The region of the logs instance.
        :param pulumi.Input[_builtins.str] type: E2M type.
        :param pulumi.Input[_builtins.str] update_time: E2M update time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LogsE2mState.__new__(_LogsE2mState)

        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["description"] = description
        __props__.__dict__["e2m_id"] = e2m_id
        __props__.__dict__["endpoint_type"] = endpoint_type
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["is_internal"] = is_internal
        __props__.__dict__["logs_e2m_id"] = logs_e2m_id
        __props__.__dict__["logs_query"] = logs_query
        __props__.__dict__["metric_fields"] = metric_fields
        __props__.__dict__["metric_labels"] = metric_labels
        __props__.__dict__["name"] = name
        __props__.__dict__["permutations"] = permutations
        __props__.__dict__["region"] = region
        __props__.__dict__["type"] = type
        __props__.__dict__["update_time"] = update_time
        return LogsE2m(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[_builtins.str]:
        """
        E2M create time.
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Description of the E2M.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="e2mId")
    def e2m_id(self) -> pulumi.Output[_builtins.str]:
        """
        event to metrics Id.
        """
        return pulumi.get(self, "e2m_id")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the logs instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="isInternal")
    def is_internal(self) -> pulumi.Output[_builtins.bool]:
        """
        A flag that represents if the e2m is for internal usage.
        """
        return pulumi.get(self, "is_internal")

    @_builtins.property
    @pulumi.getter(name="logsE2mId")
    def logs_e2m_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "logs_e2m_id")

    @_builtins.property
    @pulumi.getter(name="logsQuery")
    def logs_query(self) -> pulumi.Output[Optional['outputs.LogsE2mLogsQuery']]:
        """
        E2M logs query.
        """
        return pulumi.get(self, "logs_query")

    @_builtins.property
    @pulumi.getter(name="metricFields")
    def metric_fields(self) -> pulumi.Output[Optional[Sequence['outputs.LogsE2mMetricField']]]:
        """
        E2M metric fields.
        """
        return pulumi.get(self, "metric_fields")

    @_builtins.property
    @pulumi.getter(name="metricLabels")
    def metric_labels(self) -> pulumi.Output[Optional[Sequence['outputs.LogsE2mMetricLabel']]]:
        """
        E2M metric labels.
        """
        return pulumi.get(self, "metric_labels")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the E2M.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def permutations(self) -> pulumi.Output[Sequence['outputs.LogsE2mPermutation']]:
        """
        Represents the limit of the permutations and if the limit was exceeded.
        """
        return pulumi.get(self, "permutations")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region of the logs instance.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        E2M type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[_builtins.str]:
        """
        E2M update time.
        """
        return pulumi.get(self, "update_time")

