# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['DnsCustomResolverSecondaryZoneArgs', 'DnsCustomResolverSecondaryZone']

@pulumi.input_type
class DnsCustomResolverSecondaryZoneArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[_builtins.bool],
                 instance_id: pulumi.Input[_builtins.str],
                 resolver_id: pulumi.Input[_builtins.str],
                 transfer_froms: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 zone: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_custom_resolver_secondary_zone_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DnsCustomResolverSecondaryZone resource.
        :param pulumi.Input[_builtins.bool] enabled: Enable/Disable the secondary zone
        :param pulumi.Input[_builtins.str] instance_id: The unique identifier of a service instance.
        :param pulumi.Input[_builtins.str] resolver_id: The unique identifier of a custom resolver.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] transfer_froms: The addresses of DNS servers where the secondary zone data should be transferred from
        :param pulumi.Input[_builtins.str] zone: The name of the zone.
        :param pulumi.Input[_builtins.str] description: Descriptive text of the secondary zone
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "resolver_id", resolver_id)
        pulumi.set(__self__, "transfer_froms", transfer_froms)
        pulumi.set(__self__, "zone", zone)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dns_custom_resolver_secondary_zone_id is not None:
            pulumi.set(__self__, "dns_custom_resolver_secondary_zone_id", dns_custom_resolver_secondary_zone_id)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[_builtins.bool]:
        """
        Enable/Disable the secondary zone
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The unique identifier of a service instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="resolverId")
    def resolver_id(self) -> pulumi.Input[_builtins.str]:
        """
        The unique identifier of a custom resolver.
        """
        return pulumi.get(self, "resolver_id")

    @resolver_id.setter
    def resolver_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resolver_id", value)

    @_builtins.property
    @pulumi.getter(name="transferFroms")
    def transfer_froms(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        The addresses of DNS servers where the secondary zone data should be transferred from
        """
        return pulumi.get(self, "transfer_froms")

    @transfer_froms.setter
    def transfer_froms(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "transfer_froms", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> pulumi.Input[_builtins.str]:
        """
        The name of the zone.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "zone", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Descriptive text of the secondary zone
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="dnsCustomResolverSecondaryZoneId")
    def dns_custom_resolver_secondary_zone_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dns_custom_resolver_secondary_zone_id")

    @dns_custom_resolver_secondary_zone_id.setter
    def dns_custom_resolver_secondary_zone_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_custom_resolver_secondary_zone_id", value)


@pulumi.input_type
class _DnsCustomResolverSecondaryZoneState:
    def __init__(__self__, *,
                 created_on: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_custom_resolver_secondary_zone_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 modified_on: Optional[pulumi.Input[_builtins.str]] = None,
                 resolver_id: Optional[pulumi.Input[_builtins.str]] = None,
                 secondary_zone_id: Optional[pulumi.Input[_builtins.str]] = None,
                 transfer_froms: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DnsCustomResolverSecondaryZone resources.
        :param pulumi.Input[_builtins.str] created_on: Secondary Zone Creation date
        :param pulumi.Input[_builtins.str] description: Descriptive text of the secondary zone
        :param pulumi.Input[_builtins.bool] enabled: Enable/Disable the secondary zone
        :param pulumi.Input[_builtins.str] instance_id: The unique identifier of a service instance.
        :param pulumi.Input[_builtins.str] modified_on: Secondary Zone Modification date
        :param pulumi.Input[_builtins.str] resolver_id: The unique identifier of a custom resolver.
        :param pulumi.Input[_builtins.str] secondary_zone_id: Secondary Zone ID
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] transfer_froms: The addresses of DNS servers where the secondary zone data should be transferred from
        :param pulumi.Input[_builtins.str] zone: The name of the zone.
        """
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dns_custom_resolver_secondary_zone_id is not None:
            pulumi.set(__self__, "dns_custom_resolver_secondary_zone_id", dns_custom_resolver_secondary_zone_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if modified_on is not None:
            pulumi.set(__self__, "modified_on", modified_on)
        if resolver_id is not None:
            pulumi.set(__self__, "resolver_id", resolver_id)
        if secondary_zone_id is not None:
            pulumi.set(__self__, "secondary_zone_id", secondary_zone_id)
        if transfer_froms is not None:
            pulumi.set(__self__, "transfer_froms", transfer_froms)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Secondary Zone Creation date
        """
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_on", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Descriptive text of the secondary zone
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="dnsCustomResolverSecondaryZoneId")
    def dns_custom_resolver_secondary_zone_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dns_custom_resolver_secondary_zone_id")

    @dns_custom_resolver_secondary_zone_id.setter
    def dns_custom_resolver_secondary_zone_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dns_custom_resolver_secondary_zone_id", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable/Disable the secondary zone
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier of a service instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Secondary Zone Modification date
        """
        return pulumi.get(self, "modified_on")

    @modified_on.setter
    def modified_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "modified_on", value)

    @_builtins.property
    @pulumi.getter(name="resolverId")
    def resolver_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier of a custom resolver.
        """
        return pulumi.get(self, "resolver_id")

    @resolver_id.setter
    def resolver_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resolver_id", value)

    @_builtins.property
    @pulumi.getter(name="secondaryZoneId")
    def secondary_zone_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Secondary Zone ID
        """
        return pulumi.get(self, "secondary_zone_id")

    @secondary_zone_id.setter
    def secondary_zone_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "secondary_zone_id", value)

    @_builtins.property
    @pulumi.getter(name="transferFroms")
    def transfer_froms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The addresses of DNS servers where the secondary zone data should be transferred from
        """
        return pulumi.get(self, "transfer_froms")

    @transfer_froms.setter
    def transfer_froms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "transfer_froms", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the zone.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zone", value)


@pulumi.type_token("ibm:index/dnsCustomResolverSecondaryZone:DnsCustomResolverSecondaryZone")
class DnsCustomResolverSecondaryZone(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_custom_resolver_secondary_zone_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resolver_id: Optional[pulumi.Input[_builtins.str]] = None,
                 transfer_froms: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a DnsCustomResolverSecondaryZone resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Descriptive text of the secondary zone
        :param pulumi.Input[_builtins.bool] enabled: Enable/Disable the secondary zone
        :param pulumi.Input[_builtins.str] instance_id: The unique identifier of a service instance.
        :param pulumi.Input[_builtins.str] resolver_id: The unique identifier of a custom resolver.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] transfer_froms: The addresses of DNS servers where the secondary zone data should be transferred from
        :param pulumi.Input[_builtins.str] zone: The name of the zone.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DnsCustomResolverSecondaryZoneArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DnsCustomResolverSecondaryZone resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DnsCustomResolverSecondaryZoneArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DnsCustomResolverSecondaryZoneArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 dns_custom_resolver_secondary_zone_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resolver_id: Optional[pulumi.Input[_builtins.str]] = None,
                 transfer_froms: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DnsCustomResolverSecondaryZoneArgs.__new__(DnsCustomResolverSecondaryZoneArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["dns_custom_resolver_secondary_zone_id"] = dns_custom_resolver_secondary_zone_id
            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if resolver_id is None and not opts.urn:
                raise TypeError("Missing required property 'resolver_id'")
            __props__.__dict__["resolver_id"] = resolver_id
            if transfer_froms is None and not opts.urn:
                raise TypeError("Missing required property 'transfer_froms'")
            __props__.__dict__["transfer_froms"] = transfer_froms
            if zone is None and not opts.urn:
                raise TypeError("Missing required property 'zone'")
            __props__.__dict__["zone"] = zone
            __props__.__dict__["created_on"] = None
            __props__.__dict__["modified_on"] = None
            __props__.__dict__["secondary_zone_id"] = None
        super(DnsCustomResolverSecondaryZone, __self__).__init__(
            'ibm:index/dnsCustomResolverSecondaryZone:DnsCustomResolverSecondaryZone',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_on: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            dns_custom_resolver_secondary_zone_id: Optional[pulumi.Input[_builtins.str]] = None,
            enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            modified_on: Optional[pulumi.Input[_builtins.str]] = None,
            resolver_id: Optional[pulumi.Input[_builtins.str]] = None,
            secondary_zone_id: Optional[pulumi.Input[_builtins.str]] = None,
            transfer_froms: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            zone: Optional[pulumi.Input[_builtins.str]] = None) -> 'DnsCustomResolverSecondaryZone':
        """
        Get an existing DnsCustomResolverSecondaryZone resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_on: Secondary Zone Creation date
        :param pulumi.Input[_builtins.str] description: Descriptive text of the secondary zone
        :param pulumi.Input[_builtins.bool] enabled: Enable/Disable the secondary zone
        :param pulumi.Input[_builtins.str] instance_id: The unique identifier of a service instance.
        :param pulumi.Input[_builtins.str] modified_on: Secondary Zone Modification date
        :param pulumi.Input[_builtins.str] resolver_id: The unique identifier of a custom resolver.
        :param pulumi.Input[_builtins.str] secondary_zone_id: Secondary Zone ID
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] transfer_froms: The addresses of DNS servers where the secondary zone data should be transferred from
        :param pulumi.Input[_builtins.str] zone: The name of the zone.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DnsCustomResolverSecondaryZoneState.__new__(_DnsCustomResolverSecondaryZoneState)

        __props__.__dict__["created_on"] = created_on
        __props__.__dict__["description"] = description
        __props__.__dict__["dns_custom_resolver_secondary_zone_id"] = dns_custom_resolver_secondary_zone_id
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["modified_on"] = modified_on
        __props__.__dict__["resolver_id"] = resolver_id
        __props__.__dict__["secondary_zone_id"] = secondary_zone_id
        __props__.__dict__["transfer_froms"] = transfer_froms
        __props__.__dict__["zone"] = zone
        return DnsCustomResolverSecondaryZone(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> pulumi.Output[_builtins.str]:
        """
        Secondary Zone Creation date
        """
        return pulumi.get(self, "created_on")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Descriptive text of the secondary zone
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="dnsCustomResolverSecondaryZoneId")
    def dns_custom_resolver_secondary_zone_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "dns_custom_resolver_secondary_zone_id")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        Enable/Disable the secondary zone
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier of a service instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> pulumi.Output[_builtins.str]:
        """
        Secondary Zone Modification date
        """
        return pulumi.get(self, "modified_on")

    @_builtins.property
    @pulumi.getter(name="resolverId")
    def resolver_id(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier of a custom resolver.
        """
        return pulumi.get(self, "resolver_id")

    @_builtins.property
    @pulumi.getter(name="secondaryZoneId")
    def secondary_zone_id(self) -> pulumi.Output[_builtins.str]:
        """
        Secondary Zone ID
        """
        return pulumi.get(self, "secondary_zone_id")

    @_builtins.property
    @pulumi.getter(name="transferFroms")
    def transfer_froms(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The addresses of DNS servers where the secondary zone data should be transferred from
        """
        return pulumi.get(self, "transfer_froms")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the zone.
        """
        return pulumi.get(self, "zone")

