# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsVpcResult',
    'AwaitableGetIsVpcResult',
    'get_is_vpc',
    'get_is_vpc_output',
]

@pulumi.output_type
class GetIsVpcResult:
    """
    A collection of values returned by getIsVpc.
    """
    def __init__(__self__, access_tags=None, classic_access=None, crn=None, cse_source_addresses=None, default_address_prefixes=None, default_network_acl=None, default_network_acl_crn=None, default_network_acl_name=None, default_routing_table=None, default_routing_table_name=None, default_security_group=None, default_security_group_crn=None, default_security_group_name=None, dns=None, health_reasons=None, health_state=None, id=None, identifier=None, name=None, public_address_ranges=None, resource_controller_url=None, resource_crn=None, resource_group=None, resource_group_name=None, resource_name=None, resource_status=None, security_groups=None, status=None, subnets=None, tags=None):
        if access_tags and not isinstance(access_tags, list):
            raise TypeError("Expected argument 'access_tags' to be a list")
        pulumi.set(__self__, "access_tags", access_tags)
        if classic_access and not isinstance(classic_access, bool):
            raise TypeError("Expected argument 'classic_access' to be a bool")
        pulumi.set(__self__, "classic_access", classic_access)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if cse_source_addresses and not isinstance(cse_source_addresses, list):
            raise TypeError("Expected argument 'cse_source_addresses' to be a list")
        pulumi.set(__self__, "cse_source_addresses", cse_source_addresses)
        if default_address_prefixes and not isinstance(default_address_prefixes, dict):
            raise TypeError("Expected argument 'default_address_prefixes' to be a dict")
        pulumi.set(__self__, "default_address_prefixes", default_address_prefixes)
        if default_network_acl and not isinstance(default_network_acl, str):
            raise TypeError("Expected argument 'default_network_acl' to be a str")
        pulumi.set(__self__, "default_network_acl", default_network_acl)
        if default_network_acl_crn and not isinstance(default_network_acl_crn, str):
            raise TypeError("Expected argument 'default_network_acl_crn' to be a str")
        pulumi.set(__self__, "default_network_acl_crn", default_network_acl_crn)
        if default_network_acl_name and not isinstance(default_network_acl_name, str):
            raise TypeError("Expected argument 'default_network_acl_name' to be a str")
        pulumi.set(__self__, "default_network_acl_name", default_network_acl_name)
        if default_routing_table and not isinstance(default_routing_table, str):
            raise TypeError("Expected argument 'default_routing_table' to be a str")
        pulumi.set(__self__, "default_routing_table", default_routing_table)
        if default_routing_table_name and not isinstance(default_routing_table_name, str):
            raise TypeError("Expected argument 'default_routing_table_name' to be a str")
        pulumi.set(__self__, "default_routing_table_name", default_routing_table_name)
        if default_security_group and not isinstance(default_security_group, str):
            raise TypeError("Expected argument 'default_security_group' to be a str")
        pulumi.set(__self__, "default_security_group", default_security_group)
        if default_security_group_crn and not isinstance(default_security_group_crn, str):
            raise TypeError("Expected argument 'default_security_group_crn' to be a str")
        pulumi.set(__self__, "default_security_group_crn", default_security_group_crn)
        if default_security_group_name and not isinstance(default_security_group_name, str):
            raise TypeError("Expected argument 'default_security_group_name' to be a str")
        pulumi.set(__self__, "default_security_group_name", default_security_group_name)
        if dns and not isinstance(dns, list):
            raise TypeError("Expected argument 'dns' to be a list")
        pulumi.set(__self__, "dns", dns)
        if health_reasons and not isinstance(health_reasons, list):
            raise TypeError("Expected argument 'health_reasons' to be a list")
        pulumi.set(__self__, "health_reasons", health_reasons)
        if health_state and not isinstance(health_state, str):
            raise TypeError("Expected argument 'health_state' to be a str")
        pulumi.set(__self__, "health_state", health_state)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identifier and not isinstance(identifier, str):
            raise TypeError("Expected argument 'identifier' to be a str")
        pulumi.set(__self__, "identifier", identifier)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if public_address_ranges and not isinstance(public_address_ranges, list):
            raise TypeError("Expected argument 'public_address_ranges' to be a list")
        pulumi.set(__self__, "public_address_ranges", public_address_ranges)
        if resource_controller_url and not isinstance(resource_controller_url, str):
            raise TypeError("Expected argument 'resource_controller_url' to be a str")
        pulumi.set(__self__, "resource_controller_url", resource_controller_url)
        if resource_crn and not isinstance(resource_crn, str):
            raise TypeError("Expected argument 'resource_crn' to be a str")
        pulumi.set(__self__, "resource_crn", resource_crn)
        if resource_group and not isinstance(resource_group, str):
            raise TypeError("Expected argument 'resource_group' to be a str")
        pulumi.set(__self__, "resource_group", resource_group)
        if resource_group_name and not isinstance(resource_group_name, str):
            raise TypeError("Expected argument 'resource_group_name' to be a str")
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if resource_name and not isinstance(resource_name, str):
            raise TypeError("Expected argument 'resource_name' to be a str")
        pulumi.set(__self__, "resource_name", resource_name)
        if resource_status and not isinstance(resource_status, str):
            raise TypeError("Expected argument 'resource_status' to be a str")
        pulumi.set(__self__, "resource_status", resource_status)
        if security_groups and not isinstance(security_groups, list):
            raise TypeError("Expected argument 'security_groups' to be a list")
        pulumi.set(__self__, "security_groups", security_groups)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if subnets and not isinstance(subnets, list):
            raise TypeError("Expected argument 'subnets' to be a list")
        pulumi.set(__self__, "subnets", subnets)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter(name="classicAccess")
    @_utilities.deprecated("""Deprecated""")
    def classic_access(self) -> _builtins.bool:
        return pulumi.get(self, "classic_access")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="cseSourceAddresses")
    def cse_source_addresses(self) -> Sequence['outputs.GetIsVpcCseSourceAddressResult']:
        return pulumi.get(self, "cse_source_addresses")

    @_builtins.property
    @pulumi.getter(name="defaultAddressPrefixes")
    def default_address_prefixes(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "default_address_prefixes")

    @_builtins.property
    @pulumi.getter(name="defaultNetworkAcl")
    def default_network_acl(self) -> _builtins.str:
        return pulumi.get(self, "default_network_acl")

    @_builtins.property
    @pulumi.getter(name="defaultNetworkAclCrn")
    def default_network_acl_crn(self) -> _builtins.str:
        return pulumi.get(self, "default_network_acl_crn")

    @_builtins.property
    @pulumi.getter(name="defaultNetworkAclName")
    def default_network_acl_name(self) -> _builtins.str:
        return pulumi.get(self, "default_network_acl_name")

    @_builtins.property
    @pulumi.getter(name="defaultRoutingTable")
    def default_routing_table(self) -> _builtins.str:
        return pulumi.get(self, "default_routing_table")

    @_builtins.property
    @pulumi.getter(name="defaultRoutingTableName")
    def default_routing_table_name(self) -> _builtins.str:
        return pulumi.get(self, "default_routing_table_name")

    @_builtins.property
    @pulumi.getter(name="defaultSecurityGroup")
    def default_security_group(self) -> _builtins.str:
        return pulumi.get(self, "default_security_group")

    @_builtins.property
    @pulumi.getter(name="defaultSecurityGroupCrn")
    def default_security_group_crn(self) -> _builtins.str:
        return pulumi.get(self, "default_security_group_crn")

    @_builtins.property
    @pulumi.getter(name="defaultSecurityGroupName")
    def default_security_group_name(self) -> _builtins.str:
        return pulumi.get(self, "default_security_group_name")

    @_builtins.property
    @pulumi.getter
    def dns(self) -> Sequence['outputs.GetIsVpcDnResult']:
        return pulumi.get(self, "dns")

    @_builtins.property
    @pulumi.getter(name="healthReasons")
    def health_reasons(self) -> Sequence['outputs.GetIsVpcHealthReasonResult']:
        return pulumi.get(self, "health_reasons")

    @_builtins.property
    @pulumi.getter(name="healthState")
    def health_state(self) -> _builtins.str:
        return pulumi.get(self, "health_state")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def identifier(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "identifier")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="publicAddressRanges")
    def public_address_ranges(self) -> Sequence['outputs.GetIsVpcPublicAddressRangeResult']:
        return pulumi.get(self, "public_address_ranges")

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> _builtins.str:
        return pulumi.get(self, "resource_controller_url")

    @_builtins.property
    @pulumi.getter(name="resourceCrn")
    def resource_crn(self) -> _builtins.str:
        return pulumi.get(self, "resource_crn")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> _builtins.str:
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> _builtins.str:
        return pulumi.get(self, "resource_group_name")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceStatus")
    def resource_status(self) -> _builtins.str:
        return pulumi.get(self, "resource_status")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence['outputs.GetIsVpcSecurityGroupResult']:
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> Sequence['outputs.GetIsVpcSubnetResult']:
        return pulumi.get(self, "subnets")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "tags")


class AwaitableGetIsVpcResult(GetIsVpcResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsVpcResult(
            access_tags=self.access_tags,
            classic_access=self.classic_access,
            crn=self.crn,
            cse_source_addresses=self.cse_source_addresses,
            default_address_prefixes=self.default_address_prefixes,
            default_network_acl=self.default_network_acl,
            default_network_acl_crn=self.default_network_acl_crn,
            default_network_acl_name=self.default_network_acl_name,
            default_routing_table=self.default_routing_table,
            default_routing_table_name=self.default_routing_table_name,
            default_security_group=self.default_security_group,
            default_security_group_crn=self.default_security_group_crn,
            default_security_group_name=self.default_security_group_name,
            dns=self.dns,
            health_reasons=self.health_reasons,
            health_state=self.health_state,
            id=self.id,
            identifier=self.identifier,
            name=self.name,
            public_address_ranges=self.public_address_ranges,
            resource_controller_url=self.resource_controller_url,
            resource_crn=self.resource_crn,
            resource_group=self.resource_group,
            resource_group_name=self.resource_group_name,
            resource_name=self.resource_name,
            resource_status=self.resource_status,
            security_groups=self.security_groups,
            status=self.status,
            subnets=self.subnets,
            tags=self.tags)


def get_is_vpc(id: Optional[_builtins.str] = None,
               identifier: Optional[_builtins.str] = None,
               name: Optional[_builtins.str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsVpcResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['identifier'] = identifier
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsVpc:getIsVpc', __args__, opts=opts, typ=GetIsVpcResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsVpcResult(
        access_tags=pulumi.get(__ret__, 'access_tags'),
        classic_access=pulumi.get(__ret__, 'classic_access'),
        crn=pulumi.get(__ret__, 'crn'),
        cse_source_addresses=pulumi.get(__ret__, 'cse_source_addresses'),
        default_address_prefixes=pulumi.get(__ret__, 'default_address_prefixes'),
        default_network_acl=pulumi.get(__ret__, 'default_network_acl'),
        default_network_acl_crn=pulumi.get(__ret__, 'default_network_acl_crn'),
        default_network_acl_name=pulumi.get(__ret__, 'default_network_acl_name'),
        default_routing_table=pulumi.get(__ret__, 'default_routing_table'),
        default_routing_table_name=pulumi.get(__ret__, 'default_routing_table_name'),
        default_security_group=pulumi.get(__ret__, 'default_security_group'),
        default_security_group_crn=pulumi.get(__ret__, 'default_security_group_crn'),
        default_security_group_name=pulumi.get(__ret__, 'default_security_group_name'),
        dns=pulumi.get(__ret__, 'dns'),
        health_reasons=pulumi.get(__ret__, 'health_reasons'),
        health_state=pulumi.get(__ret__, 'health_state'),
        id=pulumi.get(__ret__, 'id'),
        identifier=pulumi.get(__ret__, 'identifier'),
        name=pulumi.get(__ret__, 'name'),
        public_address_ranges=pulumi.get(__ret__, 'public_address_ranges'),
        resource_controller_url=pulumi.get(__ret__, 'resource_controller_url'),
        resource_crn=pulumi.get(__ret__, 'resource_crn'),
        resource_group=pulumi.get(__ret__, 'resource_group'),
        resource_group_name=pulumi.get(__ret__, 'resource_group_name'),
        resource_name=pulumi.get(__ret__, 'resource_name'),
        resource_status=pulumi.get(__ret__, 'resource_status'),
        security_groups=pulumi.get(__ret__, 'security_groups'),
        status=pulumi.get(__ret__, 'status'),
        subnets=pulumi.get(__ret__, 'subnets'),
        tags=pulumi.get(__ret__, 'tags'))
def get_is_vpc_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      identifier: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsVpcResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['identifier'] = identifier
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsVpc:getIsVpc', __args__, opts=opts, typ=GetIsVpcResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsVpcResult(
        access_tags=pulumi.get(__response__, 'access_tags'),
        classic_access=pulumi.get(__response__, 'classic_access'),
        crn=pulumi.get(__response__, 'crn'),
        cse_source_addresses=pulumi.get(__response__, 'cse_source_addresses'),
        default_address_prefixes=pulumi.get(__response__, 'default_address_prefixes'),
        default_network_acl=pulumi.get(__response__, 'default_network_acl'),
        default_network_acl_crn=pulumi.get(__response__, 'default_network_acl_crn'),
        default_network_acl_name=pulumi.get(__response__, 'default_network_acl_name'),
        default_routing_table=pulumi.get(__response__, 'default_routing_table'),
        default_routing_table_name=pulumi.get(__response__, 'default_routing_table_name'),
        default_security_group=pulumi.get(__response__, 'default_security_group'),
        default_security_group_crn=pulumi.get(__response__, 'default_security_group_crn'),
        default_security_group_name=pulumi.get(__response__, 'default_security_group_name'),
        dns=pulumi.get(__response__, 'dns'),
        health_reasons=pulumi.get(__response__, 'health_reasons'),
        health_state=pulumi.get(__response__, 'health_state'),
        id=pulumi.get(__response__, 'id'),
        identifier=pulumi.get(__response__, 'identifier'),
        name=pulumi.get(__response__, 'name'),
        public_address_ranges=pulumi.get(__response__, 'public_address_ranges'),
        resource_controller_url=pulumi.get(__response__, 'resource_controller_url'),
        resource_crn=pulumi.get(__response__, 'resource_crn'),
        resource_group=pulumi.get(__response__, 'resource_group'),
        resource_group_name=pulumi.get(__response__, 'resource_group_name'),
        resource_name=pulumi.get(__response__, 'resource_name'),
        resource_status=pulumi.get(__response__, 'resource_status'),
        security_groups=pulumi.get(__response__, 'security_groups'),
        status=pulumi.get(__response__, 'status'),
        subnets=pulumi.get(__response__, 'subnets'),
        tags=pulumi.get(__response__, 'tags')))
