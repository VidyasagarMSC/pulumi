# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsDedicatedHostsResult',
    'AwaitableGetIsDedicatedHostsResult',
    'get_is_dedicated_hosts',
    'get_is_dedicated_hosts_output',
]

@pulumi.output_type
class GetIsDedicatedHostsResult:
    """
    A collection of values returned by getIsDedicatedHosts.
    """
    def __init__(__self__, dedicated_hosts=None, host_group=None, id=None, name=None, resource_group=None, total_count=None, zone=None):
        if dedicated_hosts and not isinstance(dedicated_hosts, list):
            raise TypeError("Expected argument 'dedicated_hosts' to be a list")
        pulumi.set(__self__, "dedicated_hosts", dedicated_hosts)
        if host_group and not isinstance(host_group, str):
            raise TypeError("Expected argument 'host_group' to be a str")
        pulumi.set(__self__, "host_group", host_group)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resource_group and not isinstance(resource_group, str):
            raise TypeError("Expected argument 'resource_group' to be a str")
        pulumi.set(__self__, "resource_group", resource_group)
        if total_count and not isinstance(total_count, float):
            raise TypeError("Expected argument 'total_count' to be a float")
        pulumi.set(__self__, "total_count", total_count)
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter(name="dedicatedHosts")
    def dedicated_hosts(self) -> Sequence['outputs.GetIsDedicatedHostsDedicatedHostResult']:
        return pulumi.get(self, "dedicated_hosts")

    @_builtins.property
    @pulumi.getter(name="hostGroup")
    def host_group(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "host_group")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> _builtins.float:
        return pulumi.get(self, "total_count")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "zone")


class AwaitableGetIsDedicatedHostsResult(GetIsDedicatedHostsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsDedicatedHostsResult(
            dedicated_hosts=self.dedicated_hosts,
            host_group=self.host_group,
            id=self.id,
            name=self.name,
            resource_group=self.resource_group,
            total_count=self.total_count,
            zone=self.zone)


def get_is_dedicated_hosts(host_group: Optional[_builtins.str] = None,
                           id: Optional[_builtins.str] = None,
                           name: Optional[_builtins.str] = None,
                           resource_group: Optional[_builtins.str] = None,
                           zone: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsDedicatedHostsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['hostGroup'] = host_group
    __args__['id'] = id
    __args__['name'] = name
    __args__['resourceGroup'] = resource_group
    __args__['zone'] = zone
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsDedicatedHosts:getIsDedicatedHosts', __args__, opts=opts, typ=GetIsDedicatedHostsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsDedicatedHostsResult(
        dedicated_hosts=pulumi.get(__ret__, 'dedicated_hosts'),
        host_group=pulumi.get(__ret__, 'host_group'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        resource_group=pulumi.get(__ret__, 'resource_group'),
        total_count=pulumi.get(__ret__, 'total_count'),
        zone=pulumi.get(__ret__, 'zone'))
def get_is_dedicated_hosts_output(host_group: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  resource_group: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  zone: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsDedicatedHostsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['hostGroup'] = host_group
    __args__['id'] = id
    __args__['name'] = name
    __args__['resourceGroup'] = resource_group
    __args__['zone'] = zone
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsDedicatedHosts:getIsDedicatedHosts', __args__, opts=opts, typ=GetIsDedicatedHostsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsDedicatedHostsResult(
        dedicated_hosts=pulumi.get(__response__, 'dedicated_hosts'),
        host_group=pulumi.get(__response__, 'host_group'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        resource_group=pulumi.get(__response__, 'resource_group'),
        total_count=pulumi.get(__response__, 'total_count'),
        zone=pulumi.get(__response__, 'zone')))
