# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetBackupRecoveryConnectorStatusResult',
    'AwaitableGetBackupRecoveryConnectorStatusResult',
    'get_backup_recovery_connector_status',
    'get_backup_recovery_connector_status_output',
]

@pulumi.output_type
class GetBackupRecoveryConnectorStatusResult:
    """
    A collection of values returned by getBackupRecoveryConnectorStatus.
    """
    def __init__(__self__, access_token=None, cluster_connection_statuses=None, id=None, is_certificate_valid=None, registration_statuses=None):
        if access_token and not isinstance(access_token, str):
            raise TypeError("Expected argument 'access_token' to be a str")
        pulumi.set(__self__, "access_token", access_token)
        if cluster_connection_statuses and not isinstance(cluster_connection_statuses, list):
            raise TypeError("Expected argument 'cluster_connection_statuses' to be a list")
        pulumi.set(__self__, "cluster_connection_statuses", cluster_connection_statuses)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_certificate_valid and not isinstance(is_certificate_valid, bool):
            raise TypeError("Expected argument 'is_certificate_valid' to be a bool")
        pulumi.set(__self__, "is_certificate_valid", is_certificate_valid)
        if registration_statuses and not isinstance(registration_statuses, list):
            raise TypeError("Expected argument 'registration_statuses' to be a list")
        pulumi.set(__self__, "registration_statuses", registration_statuses)

    @_builtins.property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> _builtins.str:
        return pulumi.get(self, "access_token")

    @_builtins.property
    @pulumi.getter(name="clusterConnectionStatuses")
    def cluster_connection_statuses(self) -> Sequence['outputs.GetBackupRecoveryConnectorStatusClusterConnectionStatusResult']:
        return pulumi.get(self, "cluster_connection_statuses")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isCertificateValid")
    def is_certificate_valid(self) -> _builtins.bool:
        return pulumi.get(self, "is_certificate_valid")

    @_builtins.property
    @pulumi.getter(name="registrationStatuses")
    def registration_statuses(self) -> Sequence['outputs.GetBackupRecoveryConnectorStatusRegistrationStatusResult']:
        return pulumi.get(self, "registration_statuses")


class AwaitableGetBackupRecoveryConnectorStatusResult(GetBackupRecoveryConnectorStatusResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupRecoveryConnectorStatusResult(
            access_token=self.access_token,
            cluster_connection_statuses=self.cluster_connection_statuses,
            id=self.id,
            is_certificate_valid=self.is_certificate_valid,
            registration_statuses=self.registration_statuses)


def get_backup_recovery_connector_status(access_token: Optional[_builtins.str] = None,
                                         id: Optional[_builtins.str] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupRecoveryConnectorStatusResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accessToken'] = access_token
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getBackupRecoveryConnectorStatus:getBackupRecoveryConnectorStatus', __args__, opts=opts, typ=GetBackupRecoveryConnectorStatusResult, package_ref=_utilities.get_package()).value

    return AwaitableGetBackupRecoveryConnectorStatusResult(
        access_token=pulumi.get(__ret__, 'access_token'),
        cluster_connection_statuses=pulumi.get(__ret__, 'cluster_connection_statuses'),
        id=pulumi.get(__ret__, 'id'),
        is_certificate_valid=pulumi.get(__ret__, 'is_certificate_valid'),
        registration_statuses=pulumi.get(__ret__, 'registration_statuses'))
def get_backup_recovery_connector_status_output(access_token: Optional[pulumi.Input[_builtins.str]] = None,
                                                id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBackupRecoveryConnectorStatusResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accessToken'] = access_token
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getBackupRecoveryConnectorStatus:getBackupRecoveryConnectorStatus', __args__, opts=opts, typ=GetBackupRecoveryConnectorStatusResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetBackupRecoveryConnectorStatusResult(
        access_token=pulumi.get(__response__, 'access_token'),
        cluster_connection_statuses=pulumi.get(__response__, 'cluster_connection_statuses'),
        id=pulumi.get(__response__, 'id'),
        is_certificate_valid=pulumi.get(__response__, 'is_certificate_valid'),
        registration_statuses=pulumi.get(__response__, 'registration_statuses')))
