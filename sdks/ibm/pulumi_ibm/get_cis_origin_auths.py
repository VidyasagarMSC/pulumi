# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCisOriginAuthsResult',
    'AwaitableGetCisOriginAuthsResult',
    'get_cis_origin_auths',
    'get_cis_origin_auths_output',
]

@pulumi.output_type
class GetCisOriginAuthsResult:
    """
    A collection of values returned by getCisOriginAuths.
    """
    def __init__(__self__, cis_id=None, domain_id=None, hostname=None, id=None, origin_pull_certs=None, origin_pull_settings_enabled=None, request_type=None):
        if cis_id and not isinstance(cis_id, str):
            raise TypeError("Expected argument 'cis_id' to be a str")
        pulumi.set(__self__, "cis_id", cis_id)
        if domain_id and not isinstance(domain_id, str):
            raise TypeError("Expected argument 'domain_id' to be a str")
        pulumi.set(__self__, "domain_id", domain_id)
        if hostname and not isinstance(hostname, str):
            raise TypeError("Expected argument 'hostname' to be a str")
        pulumi.set(__self__, "hostname", hostname)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if origin_pull_certs and not isinstance(origin_pull_certs, list):
            raise TypeError("Expected argument 'origin_pull_certs' to be a list")
        pulumi.set(__self__, "origin_pull_certs", origin_pull_certs)
        if origin_pull_settings_enabled and not isinstance(origin_pull_settings_enabled, bool):
            raise TypeError("Expected argument 'origin_pull_settings_enabled' to be a bool")
        pulumi.set(__self__, "origin_pull_settings_enabled", origin_pull_settings_enabled)
        if request_type and not isinstance(request_type, str):
            raise TypeError("Expected argument 'request_type' to be a str")
        pulumi.set(__self__, "request_type", request_type)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> _builtins.str:
        return pulumi.get(self, "cis_id")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="originPullCerts")
    def origin_pull_certs(self) -> Sequence['outputs.GetCisOriginAuthsOriginPullCertResult']:
        return pulumi.get(self, "origin_pull_certs")

    @_builtins.property
    @pulumi.getter(name="originPullSettingsEnabled")
    def origin_pull_settings_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "origin_pull_settings_enabled")

    @_builtins.property
    @pulumi.getter(name="requestType")
    def request_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "request_type")


class AwaitableGetCisOriginAuthsResult(GetCisOriginAuthsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCisOriginAuthsResult(
            cis_id=self.cis_id,
            domain_id=self.domain_id,
            hostname=self.hostname,
            id=self.id,
            origin_pull_certs=self.origin_pull_certs,
            origin_pull_settings_enabled=self.origin_pull_settings_enabled,
            request_type=self.request_type)


def get_cis_origin_auths(cis_id: Optional[_builtins.str] = None,
                         domain_id: Optional[_builtins.str] = None,
                         hostname: Optional[_builtins.str] = None,
                         id: Optional[_builtins.str] = None,
                         request_type: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCisOriginAuthsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cisId'] = cis_id
    __args__['domainId'] = domain_id
    __args__['hostname'] = hostname
    __args__['id'] = id
    __args__['requestType'] = request_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCisOriginAuths:getCisOriginAuths', __args__, opts=opts, typ=GetCisOriginAuthsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCisOriginAuthsResult(
        cis_id=pulumi.get(__ret__, 'cis_id'),
        domain_id=pulumi.get(__ret__, 'domain_id'),
        hostname=pulumi.get(__ret__, 'hostname'),
        id=pulumi.get(__ret__, 'id'),
        origin_pull_certs=pulumi.get(__ret__, 'origin_pull_certs'),
        origin_pull_settings_enabled=pulumi.get(__ret__, 'origin_pull_settings_enabled'),
        request_type=pulumi.get(__ret__, 'request_type'))
def get_cis_origin_auths_output(cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                                domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                                hostname: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                request_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCisOriginAuthsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cisId'] = cis_id
    __args__['domainId'] = domain_id
    __args__['hostname'] = hostname
    __args__['id'] = id
    __args__['requestType'] = request_type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCisOriginAuths:getCisOriginAuths', __args__, opts=opts, typ=GetCisOriginAuthsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCisOriginAuthsResult(
        cis_id=pulumi.get(__response__, 'cis_id'),
        domain_id=pulumi.get(__response__, 'domain_id'),
        hostname=pulumi.get(__response__, 'hostname'),
        id=pulumi.get(__response__, 'id'),
        origin_pull_certs=pulumi.get(__response__, 'origin_pull_certs'),
        origin_pull_settings_enabled=pulumi.get(__response__, 'origin_pull_settings_enabled'),
        request_type=pulumi.get(__response__, 'request_type')))
