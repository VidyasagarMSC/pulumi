# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetContainerDedicatedHostFlavorsResult',
    'AwaitableGetContainerDedicatedHostFlavorsResult',
    'get_container_dedicated_host_flavors',
    'get_container_dedicated_host_flavors_output',
]

@pulumi.output_type
class GetContainerDedicatedHostFlavorsResult:
    """
    A collection of values returned by getContainerDedicatedHostFlavors.
    """
    def __init__(__self__, host_flavors=None, id=None, zone=None):
        if host_flavors and not isinstance(host_flavors, list):
            raise TypeError("Expected argument 'host_flavors' to be a list")
        pulumi.set(__self__, "host_flavors", host_flavors)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter(name="hostFlavors")
    def host_flavors(self) -> Sequence['outputs.GetContainerDedicatedHostFlavorsHostFlavorResult']:
        return pulumi.get(self, "host_flavors")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> _builtins.str:
        return pulumi.get(self, "zone")


class AwaitableGetContainerDedicatedHostFlavorsResult(GetContainerDedicatedHostFlavorsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetContainerDedicatedHostFlavorsResult(
            host_flavors=self.host_flavors,
            id=self.id,
            zone=self.zone)


def get_container_dedicated_host_flavors(id: Optional[_builtins.str] = None,
                                         zone: Optional[_builtins.str] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetContainerDedicatedHostFlavorsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['zone'] = zone
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getContainerDedicatedHostFlavors:getContainerDedicatedHostFlavors', __args__, opts=opts, typ=GetContainerDedicatedHostFlavorsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetContainerDedicatedHostFlavorsResult(
        host_flavors=pulumi.get(__ret__, 'host_flavors'),
        id=pulumi.get(__ret__, 'id'),
        zone=pulumi.get(__ret__, 'zone'))
def get_container_dedicated_host_flavors_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                zone: Optional[pulumi.Input[_builtins.str]] = None,
                                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetContainerDedicatedHostFlavorsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['zone'] = zone
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getContainerDedicatedHostFlavors:getContainerDedicatedHostFlavors', __args__, opts=opts, typ=GetContainerDedicatedHostFlavorsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetContainerDedicatedHostFlavorsResult(
        host_flavors=pulumi.get(__response__, 'host_flavors'),
        id=pulumi.get(__response__, 'id'),
        zone=pulumi.get(__response__, 'zone')))
