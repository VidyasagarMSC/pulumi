# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetContainerDedicatedHostResult',
    'AwaitableGetContainerDedicatedHostResult',
    'get_container_dedicated_host',
    'get_container_dedicated_host_output',
]

@pulumi.output_type
class GetContainerDedicatedHostResult:
    """
    A collection of values returned by getContainerDedicatedHost.
    """
    def __init__(__self__, flavor=None, host_id=None, host_pool_id=None, id=None, life_cycles=None, placement_enabled=None, resources=None, workers=None, zone=None):
        if flavor and not isinstance(flavor, str):
            raise TypeError("Expected argument 'flavor' to be a str")
        pulumi.set(__self__, "flavor", flavor)
        if host_id and not isinstance(host_id, str):
            raise TypeError("Expected argument 'host_id' to be a str")
        pulumi.set(__self__, "host_id", host_id)
        if host_pool_id and not isinstance(host_pool_id, str):
            raise TypeError("Expected argument 'host_pool_id' to be a str")
        pulumi.set(__self__, "host_pool_id", host_pool_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if life_cycles and not isinstance(life_cycles, list):
            raise TypeError("Expected argument 'life_cycles' to be a list")
        pulumi.set(__self__, "life_cycles", life_cycles)
        if placement_enabled and not isinstance(placement_enabled, bool):
            raise TypeError("Expected argument 'placement_enabled' to be a bool")
        pulumi.set(__self__, "placement_enabled", placement_enabled)
        if resources and not isinstance(resources, list):
            raise TypeError("Expected argument 'resources' to be a list")
        pulumi.set(__self__, "resources", resources)
        if workers and not isinstance(workers, list):
            raise TypeError("Expected argument 'workers' to be a list")
        pulumi.set(__self__, "workers", workers)
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> _builtins.str:
        return pulumi.get(self, "flavor")

    @_builtins.property
    @pulumi.getter(name="hostId")
    def host_id(self) -> _builtins.str:
        return pulumi.get(self, "host_id")

    @_builtins.property
    @pulumi.getter(name="hostPoolId")
    def host_pool_id(self) -> _builtins.str:
        return pulumi.get(self, "host_pool_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lifeCycles")
    def life_cycles(self) -> Sequence['outputs.GetContainerDedicatedHostLifeCycleResult']:
        return pulumi.get(self, "life_cycles")

    @_builtins.property
    @pulumi.getter(name="placementEnabled")
    def placement_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "placement_enabled")

    @_builtins.property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetContainerDedicatedHostResourceResult']:
        return pulumi.get(self, "resources")

    @_builtins.property
    @pulumi.getter
    def workers(self) -> Sequence['outputs.GetContainerDedicatedHostWorkerResult']:
        return pulumi.get(self, "workers")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> _builtins.str:
        return pulumi.get(self, "zone")


class AwaitableGetContainerDedicatedHostResult(GetContainerDedicatedHostResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetContainerDedicatedHostResult(
            flavor=self.flavor,
            host_id=self.host_id,
            host_pool_id=self.host_pool_id,
            id=self.id,
            life_cycles=self.life_cycles,
            placement_enabled=self.placement_enabled,
            resources=self.resources,
            workers=self.workers,
            zone=self.zone)


def get_container_dedicated_host(host_id: Optional[_builtins.str] = None,
                                 host_pool_id: Optional[_builtins.str] = None,
                                 id: Optional[_builtins.str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetContainerDedicatedHostResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['hostId'] = host_id
    __args__['hostPoolId'] = host_pool_id
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getContainerDedicatedHost:getContainerDedicatedHost', __args__, opts=opts, typ=GetContainerDedicatedHostResult, package_ref=_utilities.get_package()).value

    return AwaitableGetContainerDedicatedHostResult(
        flavor=pulumi.get(__ret__, 'flavor'),
        host_id=pulumi.get(__ret__, 'host_id'),
        host_pool_id=pulumi.get(__ret__, 'host_pool_id'),
        id=pulumi.get(__ret__, 'id'),
        life_cycles=pulumi.get(__ret__, 'life_cycles'),
        placement_enabled=pulumi.get(__ret__, 'placement_enabled'),
        resources=pulumi.get(__ret__, 'resources'),
        workers=pulumi.get(__ret__, 'workers'),
        zone=pulumi.get(__ret__, 'zone'))
def get_container_dedicated_host_output(host_id: Optional[pulumi.Input[_builtins.str]] = None,
                                        host_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                                        id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetContainerDedicatedHostResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['hostId'] = host_id
    __args__['hostPoolId'] = host_pool_id
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getContainerDedicatedHost:getContainerDedicatedHost', __args__, opts=opts, typ=GetContainerDedicatedHostResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetContainerDedicatedHostResult(
        flavor=pulumi.get(__response__, 'flavor'),
        host_id=pulumi.get(__response__, 'host_id'),
        host_pool_id=pulumi.get(__response__, 'host_pool_id'),
        id=pulumi.get(__response__, 'id'),
        life_cycles=pulumi.get(__response__, 'life_cycles'),
        placement_enabled=pulumi.get(__response__, 'placement_enabled'),
        resources=pulumi.get(__response__, 'resources'),
        workers=pulumi.get(__response__, 'workers'),
        zone=pulumi.get(__response__, 'zone')))
