# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsVpcRoutingTablesResult',
    'AwaitableGetIsVpcRoutingTablesResult',
    'get_is_vpc_routing_tables',
    'get_is_vpc_routing_tables_output',
]

@pulumi.output_type
class GetIsVpcRoutingTablesResult:
    """
    A collection of values returned by getIsVpcRoutingTables.
    """
    def __init__(__self__, id=None, is_default=None, routing_tables=None, vpc=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_default and not isinstance(is_default, bool):
            raise TypeError("Expected argument 'is_default' to be a bool")
        pulumi.set(__self__, "is_default", is_default)
        if routing_tables and not isinstance(routing_tables, list):
            raise TypeError("Expected argument 'routing_tables' to be a list")
        pulumi.set(__self__, "routing_tables", routing_tables)
        if vpc and not isinstance(vpc, str):
            raise TypeError("Expected argument 'vpc' to be a str")
        pulumi.set(__self__, "vpc", vpc)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "is_default")

    @_builtins.property
    @pulumi.getter(name="routingTables")
    def routing_tables(self) -> Sequence['outputs.GetIsVpcRoutingTablesRoutingTableResult']:
        return pulumi.get(self, "routing_tables")

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> _builtins.str:
        return pulumi.get(self, "vpc")


class AwaitableGetIsVpcRoutingTablesResult(GetIsVpcRoutingTablesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsVpcRoutingTablesResult(
            id=self.id,
            is_default=self.is_default,
            routing_tables=self.routing_tables,
            vpc=self.vpc)


def get_is_vpc_routing_tables(id: Optional[_builtins.str] = None,
                              is_default: Optional[_builtins.bool] = None,
                              vpc: Optional[_builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsVpcRoutingTablesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['isDefault'] = is_default
    __args__['vpc'] = vpc
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsVpcRoutingTables:getIsVpcRoutingTables', __args__, opts=opts, typ=GetIsVpcRoutingTablesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsVpcRoutingTablesResult(
        id=pulumi.get(__ret__, 'id'),
        is_default=pulumi.get(__ret__, 'is_default'),
        routing_tables=pulumi.get(__ret__, 'routing_tables'),
        vpc=pulumi.get(__ret__, 'vpc'))
def get_is_vpc_routing_tables_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     is_default: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                     vpc: Optional[pulumi.Input[_builtins.str]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsVpcRoutingTablesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['isDefault'] = is_default
    __args__['vpc'] = vpc
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsVpcRoutingTables:getIsVpcRoutingTables', __args__, opts=opts, typ=GetIsVpcRoutingTablesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsVpcRoutingTablesResult(
        id=pulumi.get(__response__, 'id'),
        is_default=pulumi.get(__response__, 'is_default'),
        routing_tables=pulumi.get(__response__, 'routing_tables'),
        vpc=pulumi.get(__response__, 'vpc')))
