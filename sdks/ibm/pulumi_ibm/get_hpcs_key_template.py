# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetHpcsKeyTemplateResult',
    'AwaitableGetHpcsKeyTemplateResult',
    'get_hpcs_key_template',
    'get_hpcs_key_template_output',
]

@pulumi.output_type
class GetHpcsKeyTemplateResult:
    """
    A collection of values returned by getHpcsKeyTemplate.
    """
    def __init__(__self__, created_at=None, created_by=None, description=None, href=None, id=None, instance_id=None, keys=None, keystores=None, name=None, region=None, template_id=None, uko_vault=None, updated_at=None, updated_by=None, vaults=None, version=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if keys and not isinstance(keys, list):
            raise TypeError("Expected argument 'keys' to be a list")
        pulumi.set(__self__, "keys", keys)
        if keystores and not isinstance(keystores, list):
            raise TypeError("Expected argument 'keystores' to be a list")
        pulumi.set(__self__, "keystores", keystores)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if template_id and not isinstance(template_id, str):
            raise TypeError("Expected argument 'template_id' to be a str")
        pulumi.set(__self__, "template_id", template_id)
        if uko_vault and not isinstance(uko_vault, str):
            raise TypeError("Expected argument 'uko_vault' to be a str")
        pulumi.set(__self__, "uko_vault", uko_vault)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)
        if updated_by and not isinstance(updated_by, str):
            raise TypeError("Expected argument 'updated_by' to be a str")
        pulumi.set(__self__, "updated_by", updated_by)
        if vaults and not isinstance(vaults, list):
            raise TypeError("Expected argument 'vaults' to be a list")
        pulumi.set(__self__, "vaults", vaults)
        if version and not isinstance(version, float):
            raise TypeError("Expected argument 'version' to be a float")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def keys(self) -> Sequence['outputs.GetHpcsKeyTemplateKeyResult']:
        return pulumi.get(self, "keys")

    @_builtins.property
    @pulumi.getter
    def keystores(self) -> Sequence['outputs.GetHpcsKeyTemplateKeystoreResult']:
        return pulumi.get(self, "keystores")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> _builtins.str:
        return pulumi.get(self, "template_id")

    @_builtins.property
    @pulumi.getter(name="ukoVault")
    def uko_vault(self) -> _builtins.str:
        return pulumi.get(self, "uko_vault")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> _builtins.str:
        return pulumi.get(self, "updated_by")

    @_builtins.property
    @pulumi.getter
    def vaults(self) -> Sequence['outputs.GetHpcsKeyTemplateVaultResult']:
        return pulumi.get(self, "vaults")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.float:
        return pulumi.get(self, "version")


class AwaitableGetHpcsKeyTemplateResult(GetHpcsKeyTemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetHpcsKeyTemplateResult(
            created_at=self.created_at,
            created_by=self.created_by,
            description=self.description,
            href=self.href,
            id=self.id,
            instance_id=self.instance_id,
            keys=self.keys,
            keystores=self.keystores,
            name=self.name,
            region=self.region,
            template_id=self.template_id,
            uko_vault=self.uko_vault,
            updated_at=self.updated_at,
            updated_by=self.updated_by,
            vaults=self.vaults,
            version=self.version)


def get_hpcs_key_template(id: Optional[_builtins.str] = None,
                          instance_id: Optional[_builtins.str] = None,
                          region: Optional[_builtins.str] = None,
                          template_id: Optional[_builtins.str] = None,
                          uko_vault: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetHpcsKeyTemplateResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['templateId'] = template_id
    __args__['ukoVault'] = uko_vault
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getHpcsKeyTemplate:getHpcsKeyTemplate', __args__, opts=opts, typ=GetHpcsKeyTemplateResult, package_ref=_utilities.get_package()).value

    return AwaitableGetHpcsKeyTemplateResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        created_by=pulumi.get(__ret__, 'created_by'),
        description=pulumi.get(__ret__, 'description'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        keys=pulumi.get(__ret__, 'keys'),
        keystores=pulumi.get(__ret__, 'keystores'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        template_id=pulumi.get(__ret__, 'template_id'),
        uko_vault=pulumi.get(__ret__, 'uko_vault'),
        updated_at=pulumi.get(__ret__, 'updated_at'),
        updated_by=pulumi.get(__ret__, 'updated_by'),
        vaults=pulumi.get(__ret__, 'vaults'),
        version=pulumi.get(__ret__, 'version'))
def get_hpcs_key_template_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                 region: Optional[pulumi.Input[_builtins.str]] = None,
                                 template_id: Optional[pulumi.Input[_builtins.str]] = None,
                                 uko_vault: Optional[pulumi.Input[_builtins.str]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetHpcsKeyTemplateResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['templateId'] = template_id
    __args__['ukoVault'] = uko_vault
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getHpcsKeyTemplate:getHpcsKeyTemplate', __args__, opts=opts, typ=GetHpcsKeyTemplateResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetHpcsKeyTemplateResult(
        created_at=pulumi.get(__response__, 'created_at'),
        created_by=pulumi.get(__response__, 'created_by'),
        description=pulumi.get(__response__, 'description'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        keys=pulumi.get(__response__, 'keys'),
        keystores=pulumi.get(__response__, 'keystores'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        template_id=pulumi.get(__response__, 'template_id'),
        uko_vault=pulumi.get(__response__, 'uko_vault'),
        updated_at=pulumi.get(__response__, 'updated_at'),
        updated_by=pulumi.get(__response__, 'updated_by'),
        vaults=pulumi.get(__response__, 'vaults'),
        version=pulumi.get(__response__, 'version')))
