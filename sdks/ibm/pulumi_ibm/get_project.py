# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetProjectResult',
    'AwaitableGetProjectResult',
    'get_project',
    'get_project_output',
]

@pulumi.output_type
class GetProjectResult:
    """
    A collection of values returned by getProject.
    """
    def __init__(__self__, configs=None, created_at=None, crn=None, cumulative_needs_attention_view_error=None, cumulative_needs_attention_views=None, definitions=None, environments=None, event_notifications_crn=None, href=None, id=None, location=None, project_id=None, resource_group=None, resource_group_id=None, state=None):
        if configs and not isinstance(configs, list):
            raise TypeError("Expected argument 'configs' to be a list")
        pulumi.set(__self__, "configs", configs)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if cumulative_needs_attention_view_error and not isinstance(cumulative_needs_attention_view_error, bool):
            raise TypeError("Expected argument 'cumulative_needs_attention_view_error' to be a bool")
        pulumi.set(__self__, "cumulative_needs_attention_view_error", cumulative_needs_attention_view_error)
        if cumulative_needs_attention_views and not isinstance(cumulative_needs_attention_views, list):
            raise TypeError("Expected argument 'cumulative_needs_attention_views' to be a list")
        pulumi.set(__self__, "cumulative_needs_attention_views", cumulative_needs_attention_views)
        if definitions and not isinstance(definitions, list):
            raise TypeError("Expected argument 'definitions' to be a list")
        pulumi.set(__self__, "definitions", definitions)
        if environments and not isinstance(environments, list):
            raise TypeError("Expected argument 'environments' to be a list")
        pulumi.set(__self__, "environments", environments)
        if event_notifications_crn and not isinstance(event_notifications_crn, str):
            raise TypeError("Expected argument 'event_notifications_crn' to be a str")
        pulumi.set(__self__, "event_notifications_crn", event_notifications_crn)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if resource_group and not isinstance(resource_group, str):
            raise TypeError("Expected argument 'resource_group' to be a str")
        pulumi.set(__self__, "resource_group", resource_group)
        if resource_group_id and not isinstance(resource_group_id, str):
            raise TypeError("Expected argument 'resource_group_id' to be a str")
        pulumi.set(__self__, "resource_group_id", resource_group_id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.GetProjectConfigResult']:
        return pulumi.get(self, "configs")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="cumulativeNeedsAttentionViewError")
    def cumulative_needs_attention_view_error(self) -> _builtins.bool:
        return pulumi.get(self, "cumulative_needs_attention_view_error")

    @_builtins.property
    @pulumi.getter(name="cumulativeNeedsAttentionViews")
    def cumulative_needs_attention_views(self) -> Sequence['outputs.GetProjectCumulativeNeedsAttentionViewResult']:
        return pulumi.get(self, "cumulative_needs_attention_views")

    @_builtins.property
    @pulumi.getter
    def definitions(self) -> Sequence['outputs.GetProjectDefinitionResult']:
        return pulumi.get(self, "definitions")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Sequence['outputs.GetProjectEnvironmentResult']:
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter(name="eventNotificationsCrn")
    def event_notifications_crn(self) -> _builtins.str:
        return pulumi.get(self, "event_notifications_crn")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> _builtins.str:
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> _builtins.str:
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        return pulumi.get(self, "state")


class AwaitableGetProjectResult(GetProjectResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProjectResult(
            configs=self.configs,
            created_at=self.created_at,
            crn=self.crn,
            cumulative_needs_attention_view_error=self.cumulative_needs_attention_view_error,
            cumulative_needs_attention_views=self.cumulative_needs_attention_views,
            definitions=self.definitions,
            environments=self.environments,
            event_notifications_crn=self.event_notifications_crn,
            href=self.href,
            id=self.id,
            location=self.location,
            project_id=self.project_id,
            resource_group=self.resource_group,
            resource_group_id=self.resource_group_id,
            state=self.state)


def get_project(id: Optional[_builtins.str] = None,
                project_id: Optional[_builtins.str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProjectResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getProject:getProject', __args__, opts=opts, typ=GetProjectResult, package_ref=_utilities.get_package()).value

    return AwaitableGetProjectResult(
        configs=pulumi.get(__ret__, 'configs'),
        created_at=pulumi.get(__ret__, 'created_at'),
        crn=pulumi.get(__ret__, 'crn'),
        cumulative_needs_attention_view_error=pulumi.get(__ret__, 'cumulative_needs_attention_view_error'),
        cumulative_needs_attention_views=pulumi.get(__ret__, 'cumulative_needs_attention_views'),
        definitions=pulumi.get(__ret__, 'definitions'),
        environments=pulumi.get(__ret__, 'environments'),
        event_notifications_crn=pulumi.get(__ret__, 'event_notifications_crn'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        project_id=pulumi.get(__ret__, 'project_id'),
        resource_group=pulumi.get(__ret__, 'resource_group'),
        resource_group_id=pulumi.get(__ret__, 'resource_group_id'),
        state=pulumi.get(__ret__, 'state'))
def get_project_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       project_id: Optional[pulumi.Input[_builtins.str]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetProjectResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getProject:getProject', __args__, opts=opts, typ=GetProjectResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetProjectResult(
        configs=pulumi.get(__response__, 'configs'),
        created_at=pulumi.get(__response__, 'created_at'),
        crn=pulumi.get(__response__, 'crn'),
        cumulative_needs_attention_view_error=pulumi.get(__response__, 'cumulative_needs_attention_view_error'),
        cumulative_needs_attention_views=pulumi.get(__response__, 'cumulative_needs_attention_views'),
        definitions=pulumi.get(__response__, 'definitions'),
        environments=pulumi.get(__response__, 'environments'),
        event_notifications_crn=pulumi.get(__response__, 'event_notifications_crn'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        location=pulumi.get(__response__, 'location'),
        project_id=pulumi.get(__response__, 'project_id'),
        resource_group=pulumi.get(__response__, 'resource_group'),
        resource_group_id=pulumi.get(__response__, 'resource_group_id'),
        state=pulumi.get(__response__, 'state')))
