# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['KmsKeyAliasArgs', 'KmsKeyAlias']

@pulumi.input_type
class KmsKeyAliasArgs:
    def __init__(__self__, *,
                 alias: pulumi.Input[_builtins.str],
                 instance_id: pulumi.Input[_builtins.str],
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 existing_alias: Optional[pulumi.Input[_builtins.str]] = None,
                 key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 kms_key_alias_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a KmsKeyAlias resource.
        :param pulumi.Input[_builtins.str] alias: Key protect or hpcs key alias name
        :param pulumi.Input[_builtins.str] instance_id: Key ID
        :param pulumi.Input[_builtins.str] endpoint_type: public or private
        :param pulumi.Input[_builtins.str] existing_alias: Existing Alias of the Key
        :param pulumi.Input[_builtins.str] key_id: Key ID
        """
        pulumi.set(__self__, "alias", alias)
        pulumi.set(__self__, "instance_id", instance_id)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if existing_alias is not None:
            pulumi.set(__self__, "existing_alias", existing_alias)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if kms_key_alias_id is not None:
            pulumi.set(__self__, "kms_key_alias_id", kms_key_alias_id)

    @_builtins.property
    @pulumi.getter
    def alias(self) -> pulumi.Input[_builtins.str]:
        """
        Key protect or hpcs key alias name
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "alias", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Key ID
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        public or private
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter(name="existingAlias")
    def existing_alias(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Existing Alias of the Key
        """
        return pulumi.get(self, "existing_alias")

    @existing_alias.setter
    def existing_alias(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "existing_alias", value)

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Key ID
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_id", value)

    @_builtins.property
    @pulumi.getter(name="kmsKeyAliasId")
    def kms_key_alias_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "kms_key_alias_id")

    @kms_key_alias_id.setter
    def kms_key_alias_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kms_key_alias_id", value)


@pulumi.input_type
class _KmsKeyAliasState:
    def __init__(__self__, *,
                 alias: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 existing_alias: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 kms_key_alias_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering KmsKeyAlias resources.
        :param pulumi.Input[_builtins.str] alias: Key protect or hpcs key alias name
        :param pulumi.Input[_builtins.str] endpoint_type: public or private
        :param pulumi.Input[_builtins.str] existing_alias: Existing Alias of the Key
        :param pulumi.Input[_builtins.str] instance_id: Key ID
        :param pulumi.Input[_builtins.str] key_id: Key ID
        """
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if existing_alias is not None:
            pulumi.set(__self__, "existing_alias", existing_alias)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if kms_key_alias_id is not None:
            pulumi.set(__self__, "kms_key_alias_id", kms_key_alias_id)

    @_builtins.property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Key protect or hpcs key alias name
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alias", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        public or private
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter(name="existingAlias")
    def existing_alias(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Existing Alias of the Key
        """
        return pulumi.get(self, "existing_alias")

    @existing_alias.setter
    def existing_alias(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "existing_alias", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Key ID
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Key ID
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_id", value)

    @_builtins.property
    @pulumi.getter(name="kmsKeyAliasId")
    def kms_key_alias_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "kms_key_alias_id")

    @kms_key_alias_id.setter
    def kms_key_alias_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kms_key_alias_id", value)


@pulumi.type_token("ibm:index/kmsKeyAlias:KmsKeyAlias")
class KmsKeyAlias(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alias: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 existing_alias: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 kms_key_alias_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a KmsKeyAlias resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] alias: Key protect or hpcs key alias name
        :param pulumi.Input[_builtins.str] endpoint_type: public or private
        :param pulumi.Input[_builtins.str] existing_alias: Existing Alias of the Key
        :param pulumi.Input[_builtins.str] instance_id: Key ID
        :param pulumi.Input[_builtins.str] key_id: Key ID
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: KmsKeyAliasArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a KmsKeyAlias resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param KmsKeyAliasArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KmsKeyAliasArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alias: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 existing_alias: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 kms_key_alias_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KmsKeyAliasArgs.__new__(KmsKeyAliasArgs)

            if alias is None and not opts.urn:
                raise TypeError("Missing required property 'alias'")
            __props__.__dict__["alias"] = alias
            __props__.__dict__["endpoint_type"] = endpoint_type
            __props__.__dict__["existing_alias"] = existing_alias
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["key_id"] = key_id
            __props__.__dict__["kms_key_alias_id"] = kms_key_alias_id
        super(KmsKeyAlias, __self__).__init__(
            'ibm:index/kmsKeyAlias:KmsKeyAlias',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alias: Optional[pulumi.Input[_builtins.str]] = None,
            endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
            existing_alias: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            key_id: Optional[pulumi.Input[_builtins.str]] = None,
            kms_key_alias_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'KmsKeyAlias':
        """
        Get an existing KmsKeyAlias resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] alias: Key protect or hpcs key alias name
        :param pulumi.Input[_builtins.str] endpoint_type: public or private
        :param pulumi.Input[_builtins.str] existing_alias: Existing Alias of the Key
        :param pulumi.Input[_builtins.str] instance_id: Key ID
        :param pulumi.Input[_builtins.str] key_id: Key ID
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _KmsKeyAliasState.__new__(_KmsKeyAliasState)

        __props__.__dict__["alias"] = alias
        __props__.__dict__["endpoint_type"] = endpoint_type
        __props__.__dict__["existing_alias"] = existing_alias
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["key_id"] = key_id
        __props__.__dict__["kms_key_alias_id"] = kms_key_alias_id
        return KmsKeyAlias(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def alias(self) -> pulumi.Output[_builtins.str]:
        """
        Key protect or hpcs key alias name
        """
        return pulumi.get(self, "alias")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> pulumi.Output[_builtins.str]:
        """
        public or private
        """
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter(name="existingAlias")
    def existing_alias(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Existing Alias of the Key
        """
        return pulumi.get(self, "existing_alias")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Key ID
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Key ID
        """
        return pulumi.get(self, "key_id")

    @_builtins.property
    @pulumi.getter(name="kmsKeyAliasId")
    def kms_key_alias_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "kms_key_alias_id")

