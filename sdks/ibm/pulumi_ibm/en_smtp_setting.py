# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EnSmtpSettingArgs', 'EnSmtpSetting']

@pulumi.input_type
class EnSmtpSettingArgs:
    def __init__(__self__, *,
                 instance_guid: pulumi.Input[_builtins.str],
                 settings: pulumi.Input['EnSmtpSettingSettingsArgs'],
                 smtp_config_id: pulumi.Input[_builtins.str],
                 en_smtp_setting_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a EnSmtpSetting resource.
        :param pulumi.Input[_builtins.str] instance_guid: Unique identifier for IBM Cloud Event Notifications instance.
        :param pulumi.Input[_builtins.str] smtp_config_id: Unique identifier for IBM Cloud Event Notifications instance.
        """
        pulumi.set(__self__, "instance_guid", instance_guid)
        pulumi.set(__self__, "settings", settings)
        pulumi.set(__self__, "smtp_config_id", smtp_config_id)
        if en_smtp_setting_id is not None:
            pulumi.set(__self__, "en_smtp_setting_id", en_smtp_setting_id)

    @_builtins.property
    @pulumi.getter(name="instanceGuid")
    def instance_guid(self) -> pulumi.Input[_builtins.str]:
        """
        Unique identifier for IBM Cloud Event Notifications instance.
        """
        return pulumi.get(self, "instance_guid")

    @instance_guid.setter
    def instance_guid(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_guid", value)

    @_builtins.property
    @pulumi.getter
    def settings(self) -> pulumi.Input['EnSmtpSettingSettingsArgs']:
        return pulumi.get(self, "settings")

    @settings.setter
    def settings(self, value: pulumi.Input['EnSmtpSettingSettingsArgs']):
        pulumi.set(self, "settings", value)

    @_builtins.property
    @pulumi.getter(name="smtpConfigId")
    def smtp_config_id(self) -> pulumi.Input[_builtins.str]:
        """
        Unique identifier for IBM Cloud Event Notifications instance.
        """
        return pulumi.get(self, "smtp_config_id")

    @smtp_config_id.setter
    def smtp_config_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "smtp_config_id", value)

    @_builtins.property
    @pulumi.getter(name="enSmtpSettingId")
    def en_smtp_setting_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "en_smtp_setting_id")

    @en_smtp_setting_id.setter
    def en_smtp_setting_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "en_smtp_setting_id", value)


@pulumi.input_type
class _EnSmtpSettingState:
    def __init__(__self__, *,
                 en_smtp_setting_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 settings: Optional[pulumi.Input['EnSmtpSettingSettingsArgs']] = None,
                 smtp_config_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering EnSmtpSetting resources.
        :param pulumi.Input[_builtins.str] instance_guid: Unique identifier for IBM Cloud Event Notifications instance.
        :param pulumi.Input[_builtins.str] smtp_config_id: Unique identifier for IBM Cloud Event Notifications instance.
        """
        if en_smtp_setting_id is not None:
            pulumi.set(__self__, "en_smtp_setting_id", en_smtp_setting_id)
        if instance_guid is not None:
            pulumi.set(__self__, "instance_guid", instance_guid)
        if settings is not None:
            pulumi.set(__self__, "settings", settings)
        if smtp_config_id is not None:
            pulumi.set(__self__, "smtp_config_id", smtp_config_id)

    @_builtins.property
    @pulumi.getter(name="enSmtpSettingId")
    def en_smtp_setting_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "en_smtp_setting_id")

    @en_smtp_setting_id.setter
    def en_smtp_setting_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "en_smtp_setting_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceGuid")
    def instance_guid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique identifier for IBM Cloud Event Notifications instance.
        """
        return pulumi.get(self, "instance_guid")

    @instance_guid.setter
    def instance_guid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_guid", value)

    @_builtins.property
    @pulumi.getter
    def settings(self) -> Optional[pulumi.Input['EnSmtpSettingSettingsArgs']]:
        return pulumi.get(self, "settings")

    @settings.setter
    def settings(self, value: Optional[pulumi.Input['EnSmtpSettingSettingsArgs']]):
        pulumi.set(self, "settings", value)

    @_builtins.property
    @pulumi.getter(name="smtpConfigId")
    def smtp_config_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique identifier for IBM Cloud Event Notifications instance.
        """
        return pulumi.get(self, "smtp_config_id")

    @smtp_config_id.setter
    def smtp_config_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "smtp_config_id", value)


@pulumi.type_token("ibm:index/enSmtpSetting:EnSmtpSetting")
class EnSmtpSetting(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 en_smtp_setting_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 settings: Optional[pulumi.Input[Union['EnSmtpSettingSettingsArgs', 'EnSmtpSettingSettingsArgsDict']]] = None,
                 smtp_config_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a EnSmtpSetting resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] instance_guid: Unique identifier for IBM Cloud Event Notifications instance.
        :param pulumi.Input[_builtins.str] smtp_config_id: Unique identifier for IBM Cloud Event Notifications instance.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EnSmtpSettingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a EnSmtpSetting resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param EnSmtpSettingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EnSmtpSettingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 en_smtp_setting_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 settings: Optional[pulumi.Input[Union['EnSmtpSettingSettingsArgs', 'EnSmtpSettingSettingsArgsDict']]] = None,
                 smtp_config_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EnSmtpSettingArgs.__new__(EnSmtpSettingArgs)

            __props__.__dict__["en_smtp_setting_id"] = en_smtp_setting_id
            if instance_guid is None and not opts.urn:
                raise TypeError("Missing required property 'instance_guid'")
            __props__.__dict__["instance_guid"] = instance_guid
            if settings is None and not opts.urn:
                raise TypeError("Missing required property 'settings'")
            __props__.__dict__["settings"] = settings
            if smtp_config_id is None and not opts.urn:
                raise TypeError("Missing required property 'smtp_config_id'")
            __props__.__dict__["smtp_config_id"] = smtp_config_id
        super(EnSmtpSetting, __self__).__init__(
            'ibm:index/enSmtpSetting:EnSmtpSetting',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            en_smtp_setting_id: Optional[pulumi.Input[_builtins.str]] = None,
            instance_guid: Optional[pulumi.Input[_builtins.str]] = None,
            settings: Optional[pulumi.Input[Union['EnSmtpSettingSettingsArgs', 'EnSmtpSettingSettingsArgsDict']]] = None,
            smtp_config_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'EnSmtpSetting':
        """
        Get an existing EnSmtpSetting resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] instance_guid: Unique identifier for IBM Cloud Event Notifications instance.
        :param pulumi.Input[_builtins.str] smtp_config_id: Unique identifier for IBM Cloud Event Notifications instance.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EnSmtpSettingState.__new__(_EnSmtpSettingState)

        __props__.__dict__["en_smtp_setting_id"] = en_smtp_setting_id
        __props__.__dict__["instance_guid"] = instance_guid
        __props__.__dict__["settings"] = settings
        __props__.__dict__["smtp_config_id"] = smtp_config_id
        return EnSmtpSetting(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="enSmtpSettingId")
    def en_smtp_setting_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "en_smtp_setting_id")

    @_builtins.property
    @pulumi.getter(name="instanceGuid")
    def instance_guid(self) -> pulumi.Output[_builtins.str]:
        """
        Unique identifier for IBM Cloud Event Notifications instance.
        """
        return pulumi.get(self, "instance_guid")

    @_builtins.property
    @pulumi.getter
    def settings(self) -> pulumi.Output['outputs.EnSmtpSettingSettings']:
        return pulumi.get(self, "settings")

    @_builtins.property
    @pulumi.getter(name="smtpConfigId")
    def smtp_config_id(self) -> pulumi.Output[_builtins.str]:
        """
        Unique identifier for IBM Cloud Event Notifications instance.
        """
        return pulumi.get(self, "smtp_config_id")

