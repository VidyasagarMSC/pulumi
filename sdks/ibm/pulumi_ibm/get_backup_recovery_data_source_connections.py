# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetBackupRecoveryDataSourceConnectionsResult',
    'AwaitableGetBackupRecoveryDataSourceConnectionsResult',
    'get_backup_recovery_data_source_connections',
    'get_backup_recovery_data_source_connections_output',
]

@pulumi.output_type
class GetBackupRecoveryDataSourceConnectionsResult:
    """
    A collection of values returned by getBackupRecoveryDataSourceConnections.
    """
    def __init__(__self__, connection_ids=None, connection_names=None, connections=None, id=None, x_ibm_tenant_id=None):
        if connection_ids and not isinstance(connection_ids, list):
            raise TypeError("Expected argument 'connection_ids' to be a list")
        pulumi.set(__self__, "connection_ids", connection_ids)
        if connection_names and not isinstance(connection_names, list):
            raise TypeError("Expected argument 'connection_names' to be a list")
        pulumi.set(__self__, "connection_names", connection_names)
        if connections and not isinstance(connections, list):
            raise TypeError("Expected argument 'connections' to be a list")
        pulumi.set(__self__, "connections", connections)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if x_ibm_tenant_id and not isinstance(x_ibm_tenant_id, str):
            raise TypeError("Expected argument 'x_ibm_tenant_id' to be a str")
        pulumi.set(__self__, "x_ibm_tenant_id", x_ibm_tenant_id)

    @_builtins.property
    @pulumi.getter(name="connectionIds")
    def connection_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "connection_ids")

    @_builtins.property
    @pulumi.getter(name="connectionNames")
    def connection_names(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "connection_names")

    @_builtins.property
    @pulumi.getter
    def connections(self) -> Sequence['outputs.GetBackupRecoveryDataSourceConnectionsConnectionResult']:
        return pulumi.get(self, "connections")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> _builtins.str:
        return pulumi.get(self, "x_ibm_tenant_id")


class AwaitableGetBackupRecoveryDataSourceConnectionsResult(GetBackupRecoveryDataSourceConnectionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupRecoveryDataSourceConnectionsResult(
            connection_ids=self.connection_ids,
            connection_names=self.connection_names,
            connections=self.connections,
            id=self.id,
            x_ibm_tenant_id=self.x_ibm_tenant_id)


def get_backup_recovery_data_source_connections(connection_ids: Optional[Sequence[_builtins.str]] = None,
                                                connection_names: Optional[Sequence[_builtins.str]] = None,
                                                id: Optional[_builtins.str] = None,
                                                x_ibm_tenant_id: Optional[_builtins.str] = None,
                                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupRecoveryDataSourceConnectionsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['connectionIds'] = connection_ids
    __args__['connectionNames'] = connection_names
    __args__['id'] = id
    __args__['xIbmTenantId'] = x_ibm_tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getBackupRecoveryDataSourceConnections:getBackupRecoveryDataSourceConnections', __args__, opts=opts, typ=GetBackupRecoveryDataSourceConnectionsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetBackupRecoveryDataSourceConnectionsResult(
        connection_ids=pulumi.get(__ret__, 'connection_ids'),
        connection_names=pulumi.get(__ret__, 'connection_names'),
        connections=pulumi.get(__ret__, 'connections'),
        id=pulumi.get(__ret__, 'id'),
        x_ibm_tenant_id=pulumi.get(__ret__, 'x_ibm_tenant_id'))
def get_backup_recovery_data_source_connections_output(connection_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                       connection_names: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                       id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                       x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBackupRecoveryDataSourceConnectionsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['connectionIds'] = connection_ids
    __args__['connectionNames'] = connection_names
    __args__['id'] = id
    __args__['xIbmTenantId'] = x_ibm_tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getBackupRecoveryDataSourceConnections:getBackupRecoveryDataSourceConnections', __args__, opts=opts, typ=GetBackupRecoveryDataSourceConnectionsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetBackupRecoveryDataSourceConnectionsResult(
        connection_ids=pulumi.get(__response__, 'connection_ids'),
        connection_names=pulumi.get(__response__, 'connection_names'),
        connections=pulumi.get(__response__, 'connections'),
        id=pulumi.get(__response__, 'id'),
        x_ibm_tenant_id=pulumi.get(__response__, 'x_ibm_tenant_id')))
