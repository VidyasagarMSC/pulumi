# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsSubnetArgs', 'IsSubnet']

@pulumi.input_type
class IsSubnetArgs:
    def __init__(__self__, *,
                 vpc: pulumi.Input[_builtins.str],
                 zone: pulumi.Input[_builtins.str],
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 ip_version: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_cidr_block: Optional[pulumi.Input[_builtins.str]] = None,
                 is_subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_acl: Optional[pulumi.Input[_builtins.str]] = None,
                 public_gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 routing_table: Optional[pulumi.Input[_builtins.str]] = None,
                 routing_table_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['IsSubnetTimeoutsArgs']] = None,
                 total_ipv4_address_count: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a IsSubnet resource.
        :param pulumi.Input[_builtins.str] vpc: VPC instance ID
        :param pulumi.Input[_builtins.str] zone: Subnet zone info
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.str] ip_version: The IP version(s) to support for this subnet.
        :param pulumi.Input[_builtins.str] ipv4_cidr_block: IPV4 subnet - CIDR block
        :param pulumi.Input[_builtins.str] name: Subnet name
        :param pulumi.Input[_builtins.str] network_acl: The network ACL for this subnet
        :param pulumi.Input[_builtins.str] public_gateway: Public Gateway of the subnet
        :param pulumi.Input[_builtins.str] resource_group: The resource group for this subnet
        :param pulumi.Input[_builtins.str] routing_table: routing table id that is associated with the subnet
        :param pulumi.Input[_builtins.str] routing_table_crn: routing table crn that is associated with the subnet.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        :param pulumi.Input[_builtins.float] total_ipv4_address_count: The total number of IPv4 addresses in this subnet.
        """
        pulumi.set(__self__, "vpc", vpc)
        pulumi.set(__self__, "zone", zone)
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if ipv4_cidr_block is not None:
            pulumi.set(__self__, "ipv4_cidr_block", ipv4_cidr_block)
        if is_subnet_id is not None:
            pulumi.set(__self__, "is_subnet_id", is_subnet_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_acl is not None:
            pulumi.set(__self__, "network_acl", network_acl)
        if public_gateway is not None:
            pulumi.set(__self__, "public_gateway", public_gateway)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if routing_table is not None:
            pulumi.set(__self__, "routing_table", routing_table)
        if routing_table_crn is not None:
            pulumi.set(__self__, "routing_table_crn", routing_table_crn)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if total_ipv4_address_count is not None:
            pulumi.set(__self__, "total_ipv4_address_count", total_ipv4_address_count)

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> pulumi.Input[_builtins.str]:
        """
        VPC instance ID
        """
        return pulumi.get(self, "vpc")

    @vpc.setter
    def vpc(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vpc", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> pulumi.Input[_builtins.str]:
        """
        Subnet zone info
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "zone", value)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IP version(s) to support for this subnet.
        """
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_version", value)

    @_builtins.property
    @pulumi.getter(name="ipv4CidrBlock")
    def ipv4_cidr_block(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPV4 subnet - CIDR block
        """
        return pulumi.get(self, "ipv4_cidr_block")

    @ipv4_cidr_block.setter
    def ipv4_cidr_block(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_cidr_block", value)

    @_builtins.property
    @pulumi.getter(name="isSubnetId")
    def is_subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_subnet_id")

    @is_subnet_id.setter
    def is_subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_subnet_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Subnet name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="networkAcl")
    def network_acl(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The network ACL for this subnet
        """
        return pulumi.get(self, "network_acl")

    @network_acl.setter
    def network_acl(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_acl", value)

    @_builtins.property
    @pulumi.getter(name="publicGateway")
    def public_gateway(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Public Gateway of the subnet
        """
        return pulumi.get(self, "public_gateway")

    @public_gateway.setter
    def public_gateway(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_gateway", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource group for this subnet
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="routingTable")
    def routing_table(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        routing table id that is associated with the subnet
        """
        return pulumi.get(self, "routing_table")

    @routing_table.setter
    def routing_table(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "routing_table", value)

    @_builtins.property
    @pulumi.getter(name="routingTableCrn")
    def routing_table_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        routing table crn that is associated with the subnet.
        """
        return pulumi.get(self, "routing_table_crn")

    @routing_table_crn.setter
    def routing_table_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "routing_table_crn", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsSubnetTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsSubnetTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="totalIpv4AddressCount")
    def total_ipv4_address_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The total number of IPv4 addresses in this subnet.
        """
        return pulumi.get(self, "total_ipv4_address_count")

    @total_ipv4_address_count.setter
    def total_ipv4_address_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "total_ipv4_address_count", value)


@pulumi.input_type
class _IsSubnetState:
    def __init__(__self__, *,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 available_ipv4_address_count: Optional[pulumi.Input[_builtins.float]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_version: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_cidr_block: Optional[pulumi.Input[_builtins.str]] = None,
                 is_subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_acl: Optional[pulumi.Input[_builtins.str]] = None,
                 public_gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_controller_url: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_status: Optional[pulumi.Input[_builtins.str]] = None,
                 routing_table: Optional[pulumi.Input[_builtins.str]] = None,
                 routing_table_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['IsSubnetTimeoutsArgs']] = None,
                 total_ipv4_address_count: Optional[pulumi.Input[_builtins.float]] = None,
                 vpc: Optional[pulumi.Input[_builtins.str]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsSubnet resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.float] available_ipv4_address_count: The number of IPv4 addresses in this subnet that are not in-use, and have not been reserved by the user or the provider.
        :param pulumi.Input[_builtins.str] crn: The crn of the resource
        :param pulumi.Input[_builtins.str] ip_version: The IP version(s) to support for this subnet.
        :param pulumi.Input[_builtins.str] ipv4_cidr_block: IPV4 subnet - CIDR block
        :param pulumi.Input[_builtins.str] name: Subnet name
        :param pulumi.Input[_builtins.str] network_acl: The network ACL for this subnet
        :param pulumi.Input[_builtins.str] public_gateway: Public Gateway of the subnet
        :param pulumi.Input[_builtins.str] resource_controller_url: The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        :param pulumi.Input[_builtins.str] resource_crn: The crn of the resource
        :param pulumi.Input[_builtins.str] resource_group: The resource group for this subnet
        :param pulumi.Input[_builtins.str] resource_group_name: The resource group name in which resource is provisioned
        :param pulumi.Input[_builtins.str] resource_name: The name of the resource
        :param pulumi.Input[_builtins.str] resource_status: The status of the resource
        :param pulumi.Input[_builtins.str] routing_table: routing table id that is associated with the subnet
        :param pulumi.Input[_builtins.str] routing_table_crn: routing table crn that is associated with the subnet.
        :param pulumi.Input[_builtins.str] status: The status of the subnet
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        :param pulumi.Input[_builtins.float] total_ipv4_address_count: The total number of IPv4 addresses in this subnet.
        :param pulumi.Input[_builtins.str] vpc: VPC instance ID
        :param pulumi.Input[_builtins.str] zone: Subnet zone info
        """
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if available_ipv4_address_count is not None:
            pulumi.set(__self__, "available_ipv4_address_count", available_ipv4_address_count)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if ipv4_cidr_block is not None:
            pulumi.set(__self__, "ipv4_cidr_block", ipv4_cidr_block)
        if is_subnet_id is not None:
            pulumi.set(__self__, "is_subnet_id", is_subnet_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_acl is not None:
            pulumi.set(__self__, "network_acl", network_acl)
        if public_gateway is not None:
            pulumi.set(__self__, "public_gateway", public_gateway)
        if resource_controller_url is not None:
            pulumi.set(__self__, "resource_controller_url", resource_controller_url)
        if resource_crn is not None:
            pulumi.set(__self__, "resource_crn", resource_crn)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_status is not None:
            pulumi.set(__self__, "resource_status", resource_status)
        if routing_table is not None:
            pulumi.set(__self__, "routing_table", routing_table)
        if routing_table_crn is not None:
            pulumi.set(__self__, "routing_table_crn", routing_table_crn)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if total_ipv4_address_count is not None:
            pulumi.set(__self__, "total_ipv4_address_count", total_ipv4_address_count)
        if vpc is not None:
            pulumi.set(__self__, "vpc", vpc)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter(name="availableIpv4AddressCount")
    def available_ipv4_address_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The number of IPv4 addresses in this subnet that are not in-use, and have not been reserved by the user or the provider.
        """
        return pulumi.get(self, "available_ipv4_address_count")

    @available_ipv4_address_count.setter
    def available_ipv4_address_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "available_ipv4_address_count", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The crn of the resource
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IP version(s) to support for this subnet.
        """
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_version", value)

    @_builtins.property
    @pulumi.getter(name="ipv4CidrBlock")
    def ipv4_cidr_block(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IPV4 subnet - CIDR block
        """
        return pulumi.get(self, "ipv4_cidr_block")

    @ipv4_cidr_block.setter
    def ipv4_cidr_block(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ipv4_cidr_block", value)

    @_builtins.property
    @pulumi.getter(name="isSubnetId")
    def is_subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_subnet_id")

    @is_subnet_id.setter
    def is_subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_subnet_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Subnet name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="networkAcl")
    def network_acl(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The network ACL for this subnet
        """
        return pulumi.get(self, "network_acl")

    @network_acl.setter
    def network_acl(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_acl", value)

    @_builtins.property
    @pulumi.getter(name="publicGateway")
    def public_gateway(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Public Gateway of the subnet
        """
        return pulumi.get(self, "public_gateway")

    @public_gateway.setter
    def public_gateway(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_gateway", value)

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        """
        return pulumi.get(self, "resource_controller_url")

    @resource_controller_url.setter
    def resource_controller_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_controller_url", value)

    @_builtins.property
    @pulumi.getter(name="resourceCrn")
    def resource_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The crn of the resource
        """
        return pulumi.get(self, "resource_crn")

    @resource_crn.setter
    def resource_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_crn", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource group for this subnet
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource group name in which resource is provisioned
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_name", value)

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_name", value)

    @_builtins.property
    @pulumi.getter(name="resourceStatus")
    def resource_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the resource
        """
        return pulumi.get(self, "resource_status")

    @resource_status.setter
    def resource_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_status", value)

    @_builtins.property
    @pulumi.getter(name="routingTable")
    def routing_table(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        routing table id that is associated with the subnet
        """
        return pulumi.get(self, "routing_table")

    @routing_table.setter
    def routing_table(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "routing_table", value)

    @_builtins.property
    @pulumi.getter(name="routingTableCrn")
    def routing_table_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        routing table crn that is associated with the subnet.
        """
        return pulumi.get(self, "routing_table_crn")

    @routing_table_crn.setter
    def routing_table_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "routing_table_crn", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the subnet
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsSubnetTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsSubnetTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="totalIpv4AddressCount")
    def total_ipv4_address_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The total number of IPv4 addresses in this subnet.
        """
        return pulumi.get(self, "total_ipv4_address_count")

    @total_ipv4_address_count.setter
    def total_ipv4_address_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "total_ipv4_address_count", value)

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        VPC instance ID
        """
        return pulumi.get(self, "vpc")

    @vpc.setter
    def vpc(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Subnet zone info
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zone", value)


@pulumi.type_token("ibm:index/isSubnet:IsSubnet")
class IsSubnet(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 ip_version: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_cidr_block: Optional[pulumi.Input[_builtins.str]] = None,
                 is_subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_acl: Optional[pulumi.Input[_builtins.str]] = None,
                 public_gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 routing_table: Optional[pulumi.Input[_builtins.str]] = None,
                 routing_table_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsSubnetTimeoutsArgs', 'IsSubnetTimeoutsArgsDict']]] = None,
                 total_ipv4_address_count: Optional[pulumi.Input[_builtins.float]] = None,
                 vpc: Optional[pulumi.Input[_builtins.str]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IsSubnet resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.str] ip_version: The IP version(s) to support for this subnet.
        :param pulumi.Input[_builtins.str] ipv4_cidr_block: IPV4 subnet - CIDR block
        :param pulumi.Input[_builtins.str] name: Subnet name
        :param pulumi.Input[_builtins.str] network_acl: The network ACL for this subnet
        :param pulumi.Input[_builtins.str] public_gateway: Public Gateway of the subnet
        :param pulumi.Input[_builtins.str] resource_group: The resource group for this subnet
        :param pulumi.Input[_builtins.str] routing_table: routing table id that is associated with the subnet
        :param pulumi.Input[_builtins.str] routing_table_crn: routing table crn that is associated with the subnet.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        :param pulumi.Input[_builtins.float] total_ipv4_address_count: The total number of IPv4 addresses in this subnet.
        :param pulumi.Input[_builtins.str] vpc: VPC instance ID
        :param pulumi.Input[_builtins.str] zone: Subnet zone info
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsSubnetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsSubnet resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsSubnetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsSubnetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 ip_version: Optional[pulumi.Input[_builtins.str]] = None,
                 ipv4_cidr_block: Optional[pulumi.Input[_builtins.str]] = None,
                 is_subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_acl: Optional[pulumi.Input[_builtins.str]] = None,
                 public_gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 routing_table: Optional[pulumi.Input[_builtins.str]] = None,
                 routing_table_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsSubnetTimeoutsArgs', 'IsSubnetTimeoutsArgsDict']]] = None,
                 total_ipv4_address_count: Optional[pulumi.Input[_builtins.float]] = None,
                 vpc: Optional[pulumi.Input[_builtins.str]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsSubnetArgs.__new__(IsSubnetArgs)

            __props__.__dict__["access_tags"] = access_tags
            __props__.__dict__["ip_version"] = ip_version
            __props__.__dict__["ipv4_cidr_block"] = ipv4_cidr_block
            __props__.__dict__["is_subnet_id"] = is_subnet_id
            __props__.__dict__["name"] = name
            __props__.__dict__["network_acl"] = network_acl
            __props__.__dict__["public_gateway"] = public_gateway
            __props__.__dict__["resource_group"] = resource_group
            __props__.__dict__["routing_table"] = routing_table
            __props__.__dict__["routing_table_crn"] = routing_table_crn
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["total_ipv4_address_count"] = total_ipv4_address_count
            if vpc is None and not opts.urn:
                raise TypeError("Missing required property 'vpc'")
            __props__.__dict__["vpc"] = vpc
            if zone is None and not opts.urn:
                raise TypeError("Missing required property 'zone'")
            __props__.__dict__["zone"] = zone
            __props__.__dict__["available_ipv4_address_count"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["resource_controller_url"] = None
            __props__.__dict__["resource_crn"] = None
            __props__.__dict__["resource_group_name"] = None
            __props__.__dict__["resource_name"] = None
            __props__.__dict__["resource_status"] = None
            __props__.__dict__["status"] = None
        super(IsSubnet, __self__).__init__(
            'ibm:index/isSubnet:IsSubnet',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            available_ipv4_address_count: Optional[pulumi.Input[_builtins.float]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            ip_version: Optional[pulumi.Input[_builtins.str]] = None,
            ipv4_cidr_block: Optional[pulumi.Input[_builtins.str]] = None,
            is_subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            network_acl: Optional[pulumi.Input[_builtins.str]] = None,
            public_gateway: Optional[pulumi.Input[_builtins.str]] = None,
            resource_controller_url: Optional[pulumi.Input[_builtins.str]] = None,
            resource_crn: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_name: Optional[pulumi.Input[_builtins.str]] = None,
            resource_name_: Optional[pulumi.Input[_builtins.str]] = None,
            resource_status: Optional[pulumi.Input[_builtins.str]] = None,
            routing_table: Optional[pulumi.Input[_builtins.str]] = None,
            routing_table_crn: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            timeouts: Optional[pulumi.Input[Union['IsSubnetTimeoutsArgs', 'IsSubnetTimeoutsArgsDict']]] = None,
            total_ipv4_address_count: Optional[pulumi.Input[_builtins.float]] = None,
            vpc: Optional[pulumi.Input[_builtins.str]] = None,
            zone: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsSubnet':
        """
        Get an existing IsSubnet resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.float] available_ipv4_address_count: The number of IPv4 addresses in this subnet that are not in-use, and have not been reserved by the user or the provider.
        :param pulumi.Input[_builtins.str] crn: The crn of the resource
        :param pulumi.Input[_builtins.str] ip_version: The IP version(s) to support for this subnet.
        :param pulumi.Input[_builtins.str] ipv4_cidr_block: IPV4 subnet - CIDR block
        :param pulumi.Input[_builtins.str] name: Subnet name
        :param pulumi.Input[_builtins.str] network_acl: The network ACL for this subnet
        :param pulumi.Input[_builtins.str] public_gateway: Public Gateway of the subnet
        :param pulumi.Input[_builtins.str] resource_controller_url: The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        :param pulumi.Input[_builtins.str] resource_crn: The crn of the resource
        :param pulumi.Input[_builtins.str] resource_group: The resource group for this subnet
        :param pulumi.Input[_builtins.str] resource_group_name: The resource group name in which resource is provisioned
        :param pulumi.Input[_builtins.str] resource_name_: The name of the resource
        :param pulumi.Input[_builtins.str] resource_status: The status of the resource
        :param pulumi.Input[_builtins.str] routing_table: routing table id that is associated with the subnet
        :param pulumi.Input[_builtins.str] routing_table_crn: routing table crn that is associated with the subnet.
        :param pulumi.Input[_builtins.str] status: The status of the subnet
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        :param pulumi.Input[_builtins.float] total_ipv4_address_count: The total number of IPv4 addresses in this subnet.
        :param pulumi.Input[_builtins.str] vpc: VPC instance ID
        :param pulumi.Input[_builtins.str] zone: Subnet zone info
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsSubnetState.__new__(_IsSubnetState)

        __props__.__dict__["access_tags"] = access_tags
        __props__.__dict__["available_ipv4_address_count"] = available_ipv4_address_count
        __props__.__dict__["crn"] = crn
        __props__.__dict__["ip_version"] = ip_version
        __props__.__dict__["ipv4_cidr_block"] = ipv4_cidr_block
        __props__.__dict__["is_subnet_id"] = is_subnet_id
        __props__.__dict__["name"] = name
        __props__.__dict__["network_acl"] = network_acl
        __props__.__dict__["public_gateway"] = public_gateway
        __props__.__dict__["resource_controller_url"] = resource_controller_url
        __props__.__dict__["resource_crn"] = resource_crn
        __props__.__dict__["resource_group"] = resource_group
        __props__.__dict__["resource_group_name"] = resource_group_name
        __props__.__dict__["resource_name"] = resource_name_
        __props__.__dict__["resource_status"] = resource_status
        __props__.__dict__["routing_table"] = routing_table
        __props__.__dict__["routing_table_crn"] = routing_table_crn
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["total_ipv4_address_count"] = total_ipv4_address_count
        __props__.__dict__["vpc"] = vpc
        __props__.__dict__["zone"] = zone
        return IsSubnet(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter(name="availableIpv4AddressCount")
    def available_ipv4_address_count(self) -> pulumi.Output[_builtins.float]:
        """
        The number of IPv4 addresses in this subnet that are not in-use, and have not been reserved by the user or the provider.
        """
        return pulumi.get(self, "available_ipv4_address_count")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The crn of the resource
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The IP version(s) to support for this subnet.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter(name="ipv4CidrBlock")
    def ipv4_cidr_block(self) -> pulumi.Output[_builtins.str]:
        """
        IPV4 subnet - CIDR block
        """
        return pulumi.get(self, "ipv4_cidr_block")

    @_builtins.property
    @pulumi.getter(name="isSubnetId")
    def is_subnet_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_subnet_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Subnet name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkAcl")
    def network_acl(self) -> pulumi.Output[_builtins.str]:
        """
        The network ACL for this subnet
        """
        return pulumi.get(self, "network_acl")

    @_builtins.property
    @pulumi.getter(name="publicGateway")
    def public_gateway(self) -> pulumi.Output[_builtins.str]:
        """
        Public Gateway of the subnet
        """
        return pulumi.get(self, "public_gateway")

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> pulumi.Output[_builtins.str]:
        """
        The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        """
        return pulumi.get(self, "resource_controller_url")

    @_builtins.property
    @pulumi.getter(name="resourceCrn")
    def resource_crn(self) -> pulumi.Output[_builtins.str]:
        """
        The crn of the resource
        """
        return pulumi.get(self, "resource_crn")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Output[_builtins.str]:
        """
        The resource group for this subnet
        """
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Output[_builtins.str]:
        """
        The resource group name in which resource is provisioned
        """
        return pulumi.get(self, "resource_group_name")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceStatus")
    def resource_status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the resource
        """
        return pulumi.get(self, "resource_status")

    @_builtins.property
    @pulumi.getter(name="routingTable")
    def routing_table(self) -> pulumi.Output[_builtins.str]:
        """
        routing table id that is associated with the subnet
        """
        return pulumi.get(self, "routing_table")

    @_builtins.property
    @pulumi.getter(name="routingTableCrn")
    def routing_table_crn(self) -> pulumi.Output[_builtins.str]:
        """
        routing table crn that is associated with the subnet.
        """
        return pulumi.get(self, "routing_table_crn")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the subnet
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IsSubnetTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter(name="totalIpv4AddressCount")
    def total_ipv4_address_count(self) -> pulumi.Output[_builtins.float]:
        """
        The total number of IPv4 addresses in this subnet.
        """
        return pulumi.get(self, "total_ipv4_address_count")

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> pulumi.Output[_builtins.str]:
        """
        VPC instance ID
        """
        return pulumi.get(self, "vpc")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> pulumi.Output[_builtins.str]:
        """
        Subnet zone info
        """
        return pulumi.get(self, "zone")

