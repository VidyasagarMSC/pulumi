# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsVolumeArgs', 'IsVolume']

@pulumi.input_type
class IsVolumeArgs:
    def __init__(__self__, *,
                 profile: pulumi.Input[_builtins.str],
                 zone: pulumi.Input[_builtins.str],
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 allowed_use: Optional[pulumi.Input['IsVolumeAllowedUseArgs']] = None,
                 bandwidth: Optional[pulumi.Input[_builtins.float]] = None,
                 capacity: Optional[pulumi.Input[_builtins.float]] = None,
                 delete_all_snapshots: Optional[pulumi.Input[_builtins.bool]] = None,
                 encryption_key: Optional[pulumi.Input[_builtins.str]] = None,
                 iops: Optional[pulumi.Input[_builtins.float]] = None,
                 is_volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 source_snapshot: Optional[pulumi.Input[_builtins.str]] = None,
                 source_snapshot_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['IsVolumeTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a IsVolume resource.
        :param pulumi.Input[_builtins.str] profile: Volume profile name
        :param pulumi.Input[_builtins.str] zone: Zone name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: Access management tags for the volume instance
        :param pulumi.Input['IsVolumeAllowedUseArgs'] allowed_use: The usage constraints to match against the requested instance or bare metal server properties to determine
               compatibility.
        :param pulumi.Input[_builtins.float] bandwidth: The maximum bandwidth (in megabits per second) for the volume. For this property to be specified, the volume
               storage_generation must be 2.
        :param pulumi.Input[_builtins.float] capacity: Volume capacity value
        :param pulumi.Input[_builtins.bool] delete_all_snapshots: Deletes all snapshots created from this volume
        :param pulumi.Input[_builtins.str] encryption_key: Volume encryption key info
        :param pulumi.Input[_builtins.float] iops: IOPS value for the Volume
        :param pulumi.Input[_builtins.str] name: Volume name
        :param pulumi.Input[_builtins.str] resource_group: Resource group name
        :param pulumi.Input[_builtins.str] source_snapshot: The unique identifier for this snapshot
        :param pulumi.Input[_builtins.str] source_snapshot_crn: The crn for this snapshot
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: UserTags for the volume instance
        """
        pulumi.set(__self__, "profile", profile)
        pulumi.set(__self__, "zone", zone)
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if allowed_use is not None:
            pulumi.set(__self__, "allowed_use", allowed_use)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if delete_all_snapshots is not None:
            pulumi.set(__self__, "delete_all_snapshots", delete_all_snapshots)
        if encryption_key is not None:
            pulumi.set(__self__, "encryption_key", encryption_key)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if is_volume_id is not None:
            pulumi.set(__self__, "is_volume_id", is_volume_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if source_snapshot is not None:
            pulumi.set(__self__, "source_snapshot", source_snapshot)
        if source_snapshot_crn is not None:
            pulumi.set(__self__, "source_snapshot_crn", source_snapshot_crn)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def profile(self) -> pulumi.Input[_builtins.str]:
        """
        Volume profile name
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "profile", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> pulumi.Input[_builtins.str]:
        """
        Zone name
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "zone", value)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Access management tags for the volume instance
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter(name="allowedUse")
    def allowed_use(self) -> Optional[pulumi.Input['IsVolumeAllowedUseArgs']]:
        """
        The usage constraints to match against the requested instance or bare metal server properties to determine
        compatibility.
        """
        return pulumi.get(self, "allowed_use")

    @allowed_use.setter
    def allowed_use(self, value: Optional[pulumi.Input['IsVolumeAllowedUseArgs']]):
        pulumi.set(self, "allowed_use", value)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The maximum bandwidth (in megabits per second) for the volume. For this property to be specified, the volume
        storage_generation must be 2.
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "bandwidth", value)

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Volume capacity value
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "capacity", value)

    @_builtins.property
    @pulumi.getter(name="deleteAllSnapshots")
    def delete_all_snapshots(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Deletes all snapshots created from this volume
        """
        return pulumi.get(self, "delete_all_snapshots")

    @delete_all_snapshots.setter
    def delete_all_snapshots(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_all_snapshots", value)

    @_builtins.property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Volume encryption key info
        """
        return pulumi.get(self, "encryption_key")

    @encryption_key.setter
    def encryption_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encryption_key", value)

    @_builtins.property
    @pulumi.getter
    def iops(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        IOPS value for the Volume
        """
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "iops", value)

    @_builtins.property
    @pulumi.getter(name="isVolumeId")
    def is_volume_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_volume_id")

    @is_volume_id.setter
    def is_volume_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_volume_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Volume name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource group name
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="sourceSnapshot")
    def source_snapshot(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier for this snapshot
        """
        return pulumi.get(self, "source_snapshot")

    @source_snapshot.setter
    def source_snapshot(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_snapshot", value)

    @_builtins.property
    @pulumi.getter(name="sourceSnapshotCrn")
    def source_snapshot_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The crn for this snapshot
        """
        return pulumi.get(self, "source_snapshot_crn")

    @source_snapshot_crn.setter
    def source_snapshot_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_snapshot_crn", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        UserTags for the volume instance
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsVolumeTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsVolumeTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _IsVolumeState:
    def __init__(__self__, *,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 adjustable_capacity_states: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 adjustable_iops_states: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 allowed_use: Optional[pulumi.Input['IsVolumeAllowedUseArgs']] = None,
                 bandwidth: Optional[pulumi.Input[_builtins.float]] = None,
                 capacity: Optional[pulumi.Input[_builtins.float]] = None,
                 catalog_offerings: Optional[pulumi.Input[Sequence[pulumi.Input['IsVolumeCatalogOfferingArgs']]]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_all_snapshots: Optional[pulumi.Input[_builtins.bool]] = None,
                 encryption_key: Optional[pulumi.Input[_builtins.str]] = None,
                 encryption_type: Optional[pulumi.Input[_builtins.str]] = None,
                 health_reasons: Optional[pulumi.Input[Sequence[pulumi.Input['IsVolumeHealthReasonArgs']]]] = None,
                 health_state: Optional[pulumi.Input[_builtins.str]] = None,
                 iops: Optional[pulumi.Input[_builtins.float]] = None,
                 is_volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 operating_systems: Optional[pulumi.Input[Sequence[pulumi.Input['IsVolumeOperatingSystemArgs']]]] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_controller_url: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_status: Optional[pulumi.Input[_builtins.str]] = None,
                 source_snapshot: Optional[pulumi.Input[_builtins.str]] = None,
                 source_snapshot_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 status_reasons: Optional[pulumi.Input[Sequence[pulumi.Input['IsVolumeStatusReasonArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['IsVolumeTimeoutsArgs']] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsVolume resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: Access management tags for the volume instance
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] adjustable_capacity_states: The attachment states that support adjustable capacity for this volume.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] adjustable_iops_states: The attachment states that support adjustable IOPS for this volume.
        :param pulumi.Input['IsVolumeAllowedUseArgs'] allowed_use: The usage constraints to match against the requested instance or bare metal server properties to determine
               compatibility.
        :param pulumi.Input[_builtins.float] bandwidth: The maximum bandwidth (in megabits per second) for the volume. For this property to be specified, the volume
               storage_generation must be 2.
        :param pulumi.Input[_builtins.float] capacity: Volume capacity value
        :param pulumi.Input[Sequence[pulumi.Input['IsVolumeCatalogOfferingArgs']]] catalog_offerings: The catalog offering this volume was created from. If a virtual server instance is provisioned with a
               boot_volume_attachment specifying this volume, the virtual server instance will use this volume's catalog offering,
               including its pricing plan.
        :param pulumi.Input[_builtins.str] crn: CRN value for the volume instance
        :param pulumi.Input[_builtins.bool] delete_all_snapshots: Deletes all snapshots created from this volume
        :param pulumi.Input[_builtins.str] encryption_key: Volume encryption key info
        :param pulumi.Input[_builtins.str] encryption_type: Volume encryption type info
        :param pulumi.Input[_builtins.str] health_state: The health of this resource.
        :param pulumi.Input[_builtins.float] iops: IOPS value for the Volume
        :param pulumi.Input[_builtins.str] name: Volume name
        :param pulumi.Input[Sequence[pulumi.Input['IsVolumeOperatingSystemArgs']]] operating_systems: The operating system associated with this volume. If absent, this volume was notcreated from an image, or the image did
               not include an operating system.
        :param pulumi.Input[_builtins.str] profile: Volume profile name
        :param pulumi.Input[_builtins.str] resource_controller_url: The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        :param pulumi.Input[_builtins.str] resource_crn: The crn of the resource
        :param pulumi.Input[_builtins.str] resource_group: Resource group name
        :param pulumi.Input[_builtins.str] resource_group_name: The resource group name in which resource is provisioned
        :param pulumi.Input[_builtins.str] resource_name: The name of the resource
        :param pulumi.Input[_builtins.str] resource_status: The status of the resource
        :param pulumi.Input[_builtins.str] source_snapshot: The unique identifier for this snapshot
        :param pulumi.Input[_builtins.str] source_snapshot_crn: The crn for this snapshot
        :param pulumi.Input[_builtins.str] status: Volume status
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: UserTags for the volume instance
        :param pulumi.Input[_builtins.str] zone: Zone name
        """
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if adjustable_capacity_states is not None:
            pulumi.set(__self__, "adjustable_capacity_states", adjustable_capacity_states)
        if adjustable_iops_states is not None:
            pulumi.set(__self__, "adjustable_iops_states", adjustable_iops_states)
        if allowed_use is not None:
            pulumi.set(__self__, "allowed_use", allowed_use)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if catalog_offerings is not None:
            pulumi.set(__self__, "catalog_offerings", catalog_offerings)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if delete_all_snapshots is not None:
            pulumi.set(__self__, "delete_all_snapshots", delete_all_snapshots)
        if encryption_key is not None:
            pulumi.set(__self__, "encryption_key", encryption_key)
        if encryption_type is not None:
            pulumi.set(__self__, "encryption_type", encryption_type)
        if health_reasons is not None:
            pulumi.set(__self__, "health_reasons", health_reasons)
        if health_state is not None:
            pulumi.set(__self__, "health_state", health_state)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if is_volume_id is not None:
            pulumi.set(__self__, "is_volume_id", is_volume_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operating_systems is not None:
            pulumi.set(__self__, "operating_systems", operating_systems)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if resource_controller_url is not None:
            pulumi.set(__self__, "resource_controller_url", resource_controller_url)
        if resource_crn is not None:
            pulumi.set(__self__, "resource_crn", resource_crn)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_status is not None:
            pulumi.set(__self__, "resource_status", resource_status)
        if source_snapshot is not None:
            pulumi.set(__self__, "source_snapshot", source_snapshot)
        if source_snapshot_crn is not None:
            pulumi.set(__self__, "source_snapshot_crn", source_snapshot_crn)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_reasons is not None:
            pulumi.set(__self__, "status_reasons", status_reasons)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Access management tags for the volume instance
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter(name="adjustableCapacityStates")
    def adjustable_capacity_states(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The attachment states that support adjustable capacity for this volume.
        """
        return pulumi.get(self, "adjustable_capacity_states")

    @adjustable_capacity_states.setter
    def adjustable_capacity_states(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "adjustable_capacity_states", value)

    @_builtins.property
    @pulumi.getter(name="adjustableIopsStates")
    def adjustable_iops_states(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The attachment states that support adjustable IOPS for this volume.
        """
        return pulumi.get(self, "adjustable_iops_states")

    @adjustable_iops_states.setter
    def adjustable_iops_states(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "adjustable_iops_states", value)

    @_builtins.property
    @pulumi.getter(name="allowedUse")
    def allowed_use(self) -> Optional[pulumi.Input['IsVolumeAllowedUseArgs']]:
        """
        The usage constraints to match against the requested instance or bare metal server properties to determine
        compatibility.
        """
        return pulumi.get(self, "allowed_use")

    @allowed_use.setter
    def allowed_use(self, value: Optional[pulumi.Input['IsVolumeAllowedUseArgs']]):
        pulumi.set(self, "allowed_use", value)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The maximum bandwidth (in megabits per second) for the volume. For this property to be specified, the volume
        storage_generation must be 2.
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "bandwidth", value)

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Volume capacity value
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "capacity", value)

    @_builtins.property
    @pulumi.getter(name="catalogOfferings")
    def catalog_offerings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsVolumeCatalogOfferingArgs']]]]:
        """
        The catalog offering this volume was created from. If a virtual server instance is provisioned with a
        boot_volume_attachment specifying this volume, the virtual server instance will use this volume's catalog offering,
        including its pricing plan.
        """
        return pulumi.get(self, "catalog_offerings")

    @catalog_offerings.setter
    def catalog_offerings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsVolumeCatalogOfferingArgs']]]]):
        pulumi.set(self, "catalog_offerings", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CRN value for the volume instance
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="deleteAllSnapshots")
    def delete_all_snapshots(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Deletes all snapshots created from this volume
        """
        return pulumi.get(self, "delete_all_snapshots")

    @delete_all_snapshots.setter
    def delete_all_snapshots(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_all_snapshots", value)

    @_builtins.property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Volume encryption key info
        """
        return pulumi.get(self, "encryption_key")

    @encryption_key.setter
    def encryption_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encryption_key", value)

    @_builtins.property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Volume encryption type info
        """
        return pulumi.get(self, "encryption_type")

    @encryption_type.setter
    def encryption_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encryption_type", value)

    @_builtins.property
    @pulumi.getter(name="healthReasons")
    def health_reasons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsVolumeHealthReasonArgs']]]]:
        return pulumi.get(self, "health_reasons")

    @health_reasons.setter
    def health_reasons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsVolumeHealthReasonArgs']]]]):
        pulumi.set(self, "health_reasons", value)

    @_builtins.property
    @pulumi.getter(name="healthState")
    def health_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The health of this resource.
        """
        return pulumi.get(self, "health_state")

    @health_state.setter
    def health_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "health_state", value)

    @_builtins.property
    @pulumi.getter
    def iops(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        IOPS value for the Volume
        """
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "iops", value)

    @_builtins.property
    @pulumi.getter(name="isVolumeId")
    def is_volume_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_volume_id")

    @is_volume_id.setter
    def is_volume_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_volume_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Volume name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="operatingSystems")
    def operating_systems(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsVolumeOperatingSystemArgs']]]]:
        """
        The operating system associated with this volume. If absent, this volume was notcreated from an image, or the image did
        not include an operating system.
        """
        return pulumi.get(self, "operating_systems")

    @operating_systems.setter
    def operating_systems(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsVolumeOperatingSystemArgs']]]]):
        pulumi.set(self, "operating_systems", value)

    @_builtins.property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Volume profile name
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "profile", value)

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        """
        return pulumi.get(self, "resource_controller_url")

    @resource_controller_url.setter
    def resource_controller_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_controller_url", value)

    @_builtins.property
    @pulumi.getter(name="resourceCrn")
    def resource_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The crn of the resource
        """
        return pulumi.get(self, "resource_crn")

    @resource_crn.setter
    def resource_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_crn", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource group name
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource group name in which resource is provisioned
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_name", value)

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_name", value)

    @_builtins.property
    @pulumi.getter(name="resourceStatus")
    def resource_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the resource
        """
        return pulumi.get(self, "resource_status")

    @resource_status.setter
    def resource_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_status", value)

    @_builtins.property
    @pulumi.getter(name="sourceSnapshot")
    def source_snapshot(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier for this snapshot
        """
        return pulumi.get(self, "source_snapshot")

    @source_snapshot.setter
    def source_snapshot(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_snapshot", value)

    @_builtins.property
    @pulumi.getter(name="sourceSnapshotCrn")
    def source_snapshot_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The crn for this snapshot
        """
        return pulumi.get(self, "source_snapshot_crn")

    @source_snapshot_crn.setter
    def source_snapshot_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_snapshot_crn", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Volume status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsVolumeStatusReasonArgs']]]]:
        return pulumi.get(self, "status_reasons")

    @status_reasons.setter
    def status_reasons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsVolumeStatusReasonArgs']]]]):
        pulumi.set(self, "status_reasons", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        UserTags for the volume instance
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsVolumeTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsVolumeTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Zone name
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zone", value)


@pulumi.type_token("ibm:index/isVolume:IsVolume")
class IsVolume(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 allowed_use: Optional[pulumi.Input[Union['IsVolumeAllowedUseArgs', 'IsVolumeAllowedUseArgsDict']]] = None,
                 bandwidth: Optional[pulumi.Input[_builtins.float]] = None,
                 capacity: Optional[pulumi.Input[_builtins.float]] = None,
                 delete_all_snapshots: Optional[pulumi.Input[_builtins.bool]] = None,
                 encryption_key: Optional[pulumi.Input[_builtins.str]] = None,
                 iops: Optional[pulumi.Input[_builtins.float]] = None,
                 is_volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 source_snapshot: Optional[pulumi.Input[_builtins.str]] = None,
                 source_snapshot_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsVolumeTimeoutsArgs', 'IsVolumeTimeoutsArgsDict']]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IsVolume resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: Access management tags for the volume instance
        :param pulumi.Input[Union['IsVolumeAllowedUseArgs', 'IsVolumeAllowedUseArgsDict']] allowed_use: The usage constraints to match against the requested instance or bare metal server properties to determine
               compatibility.
        :param pulumi.Input[_builtins.float] bandwidth: The maximum bandwidth (in megabits per second) for the volume. For this property to be specified, the volume
               storage_generation must be 2.
        :param pulumi.Input[_builtins.float] capacity: Volume capacity value
        :param pulumi.Input[_builtins.bool] delete_all_snapshots: Deletes all snapshots created from this volume
        :param pulumi.Input[_builtins.str] encryption_key: Volume encryption key info
        :param pulumi.Input[_builtins.float] iops: IOPS value for the Volume
        :param pulumi.Input[_builtins.str] name: Volume name
        :param pulumi.Input[_builtins.str] profile: Volume profile name
        :param pulumi.Input[_builtins.str] resource_group: Resource group name
        :param pulumi.Input[_builtins.str] source_snapshot: The unique identifier for this snapshot
        :param pulumi.Input[_builtins.str] source_snapshot_crn: The crn for this snapshot
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: UserTags for the volume instance
        :param pulumi.Input[_builtins.str] zone: Zone name
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsVolumeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsVolume resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsVolumeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsVolumeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 allowed_use: Optional[pulumi.Input[Union['IsVolumeAllowedUseArgs', 'IsVolumeAllowedUseArgsDict']]] = None,
                 bandwidth: Optional[pulumi.Input[_builtins.float]] = None,
                 capacity: Optional[pulumi.Input[_builtins.float]] = None,
                 delete_all_snapshots: Optional[pulumi.Input[_builtins.bool]] = None,
                 encryption_key: Optional[pulumi.Input[_builtins.str]] = None,
                 iops: Optional[pulumi.Input[_builtins.float]] = None,
                 is_volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 profile: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 source_snapshot: Optional[pulumi.Input[_builtins.str]] = None,
                 source_snapshot_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsVolumeTimeoutsArgs', 'IsVolumeTimeoutsArgsDict']]] = None,
                 zone: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsVolumeArgs.__new__(IsVolumeArgs)

            __props__.__dict__["access_tags"] = access_tags
            __props__.__dict__["allowed_use"] = allowed_use
            __props__.__dict__["bandwidth"] = bandwidth
            __props__.__dict__["capacity"] = capacity
            __props__.__dict__["delete_all_snapshots"] = delete_all_snapshots
            __props__.__dict__["encryption_key"] = encryption_key
            __props__.__dict__["iops"] = iops
            __props__.__dict__["is_volume_id"] = is_volume_id
            __props__.__dict__["name"] = name
            if profile is None and not opts.urn:
                raise TypeError("Missing required property 'profile'")
            __props__.__dict__["profile"] = profile
            __props__.__dict__["resource_group"] = resource_group
            __props__.__dict__["source_snapshot"] = source_snapshot
            __props__.__dict__["source_snapshot_crn"] = source_snapshot_crn
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeouts"] = timeouts
            if zone is None and not opts.urn:
                raise TypeError("Missing required property 'zone'")
            __props__.__dict__["zone"] = zone
            __props__.__dict__["adjustable_capacity_states"] = None
            __props__.__dict__["adjustable_iops_states"] = None
            __props__.__dict__["catalog_offerings"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["encryption_type"] = None
            __props__.__dict__["health_reasons"] = None
            __props__.__dict__["health_state"] = None
            __props__.__dict__["operating_systems"] = None
            __props__.__dict__["resource_controller_url"] = None
            __props__.__dict__["resource_crn"] = None
            __props__.__dict__["resource_group_name"] = None
            __props__.__dict__["resource_name"] = None
            __props__.__dict__["resource_status"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["status_reasons"] = None
        super(IsVolume, __self__).__init__(
            'ibm:index/isVolume:IsVolume',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            adjustable_capacity_states: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            adjustable_iops_states: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            allowed_use: Optional[pulumi.Input[Union['IsVolumeAllowedUseArgs', 'IsVolumeAllowedUseArgsDict']]] = None,
            bandwidth: Optional[pulumi.Input[_builtins.float]] = None,
            capacity: Optional[pulumi.Input[_builtins.float]] = None,
            catalog_offerings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVolumeCatalogOfferingArgs', 'IsVolumeCatalogOfferingArgsDict']]]]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            delete_all_snapshots: Optional[pulumi.Input[_builtins.bool]] = None,
            encryption_key: Optional[pulumi.Input[_builtins.str]] = None,
            encryption_type: Optional[pulumi.Input[_builtins.str]] = None,
            health_reasons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVolumeHealthReasonArgs', 'IsVolumeHealthReasonArgsDict']]]]] = None,
            health_state: Optional[pulumi.Input[_builtins.str]] = None,
            iops: Optional[pulumi.Input[_builtins.float]] = None,
            is_volume_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            operating_systems: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVolumeOperatingSystemArgs', 'IsVolumeOperatingSystemArgsDict']]]]] = None,
            profile: Optional[pulumi.Input[_builtins.str]] = None,
            resource_controller_url: Optional[pulumi.Input[_builtins.str]] = None,
            resource_crn: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_name: Optional[pulumi.Input[_builtins.str]] = None,
            resource_name_: Optional[pulumi.Input[_builtins.str]] = None,
            resource_status: Optional[pulumi.Input[_builtins.str]] = None,
            source_snapshot: Optional[pulumi.Input[_builtins.str]] = None,
            source_snapshot_crn: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            status_reasons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVolumeStatusReasonArgs', 'IsVolumeStatusReasonArgsDict']]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            timeouts: Optional[pulumi.Input[Union['IsVolumeTimeoutsArgs', 'IsVolumeTimeoutsArgsDict']]] = None,
            zone: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsVolume':
        """
        Get an existing IsVolume resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: Access management tags for the volume instance
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] adjustable_capacity_states: The attachment states that support adjustable capacity for this volume.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] adjustable_iops_states: The attachment states that support adjustable IOPS for this volume.
        :param pulumi.Input[Union['IsVolumeAllowedUseArgs', 'IsVolumeAllowedUseArgsDict']] allowed_use: The usage constraints to match against the requested instance or bare metal server properties to determine
               compatibility.
        :param pulumi.Input[_builtins.float] bandwidth: The maximum bandwidth (in megabits per second) for the volume. For this property to be specified, the volume
               storage_generation must be 2.
        :param pulumi.Input[_builtins.float] capacity: Volume capacity value
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsVolumeCatalogOfferingArgs', 'IsVolumeCatalogOfferingArgsDict']]]] catalog_offerings: The catalog offering this volume was created from. If a virtual server instance is provisioned with a
               boot_volume_attachment specifying this volume, the virtual server instance will use this volume's catalog offering,
               including its pricing plan.
        :param pulumi.Input[_builtins.str] crn: CRN value for the volume instance
        :param pulumi.Input[_builtins.bool] delete_all_snapshots: Deletes all snapshots created from this volume
        :param pulumi.Input[_builtins.str] encryption_key: Volume encryption key info
        :param pulumi.Input[_builtins.str] encryption_type: Volume encryption type info
        :param pulumi.Input[_builtins.str] health_state: The health of this resource.
        :param pulumi.Input[_builtins.float] iops: IOPS value for the Volume
        :param pulumi.Input[_builtins.str] name: Volume name
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsVolumeOperatingSystemArgs', 'IsVolumeOperatingSystemArgsDict']]]] operating_systems: The operating system associated with this volume. If absent, this volume was notcreated from an image, or the image did
               not include an operating system.
        :param pulumi.Input[_builtins.str] profile: Volume profile name
        :param pulumi.Input[_builtins.str] resource_controller_url: The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        :param pulumi.Input[_builtins.str] resource_crn: The crn of the resource
        :param pulumi.Input[_builtins.str] resource_group: Resource group name
        :param pulumi.Input[_builtins.str] resource_group_name: The resource group name in which resource is provisioned
        :param pulumi.Input[_builtins.str] resource_name_: The name of the resource
        :param pulumi.Input[_builtins.str] resource_status: The status of the resource
        :param pulumi.Input[_builtins.str] source_snapshot: The unique identifier for this snapshot
        :param pulumi.Input[_builtins.str] source_snapshot_crn: The crn for this snapshot
        :param pulumi.Input[_builtins.str] status: Volume status
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: UserTags for the volume instance
        :param pulumi.Input[_builtins.str] zone: Zone name
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsVolumeState.__new__(_IsVolumeState)

        __props__.__dict__["access_tags"] = access_tags
        __props__.__dict__["adjustable_capacity_states"] = adjustable_capacity_states
        __props__.__dict__["adjustable_iops_states"] = adjustable_iops_states
        __props__.__dict__["allowed_use"] = allowed_use
        __props__.__dict__["bandwidth"] = bandwidth
        __props__.__dict__["capacity"] = capacity
        __props__.__dict__["catalog_offerings"] = catalog_offerings
        __props__.__dict__["crn"] = crn
        __props__.__dict__["delete_all_snapshots"] = delete_all_snapshots
        __props__.__dict__["encryption_key"] = encryption_key
        __props__.__dict__["encryption_type"] = encryption_type
        __props__.__dict__["health_reasons"] = health_reasons
        __props__.__dict__["health_state"] = health_state
        __props__.__dict__["iops"] = iops
        __props__.__dict__["is_volume_id"] = is_volume_id
        __props__.__dict__["name"] = name
        __props__.__dict__["operating_systems"] = operating_systems
        __props__.__dict__["profile"] = profile
        __props__.__dict__["resource_controller_url"] = resource_controller_url
        __props__.__dict__["resource_crn"] = resource_crn
        __props__.__dict__["resource_group"] = resource_group
        __props__.__dict__["resource_group_name"] = resource_group_name
        __props__.__dict__["resource_name"] = resource_name_
        __props__.__dict__["resource_status"] = resource_status
        __props__.__dict__["source_snapshot"] = source_snapshot
        __props__.__dict__["source_snapshot_crn"] = source_snapshot_crn
        __props__.__dict__["status"] = status
        __props__.__dict__["status_reasons"] = status_reasons
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["zone"] = zone
        return IsVolume(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Access management tags for the volume instance
        """
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter(name="adjustableCapacityStates")
    def adjustable_capacity_states(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The attachment states that support adjustable capacity for this volume.
        """
        return pulumi.get(self, "adjustable_capacity_states")

    @_builtins.property
    @pulumi.getter(name="adjustableIopsStates")
    def adjustable_iops_states(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The attachment states that support adjustable IOPS for this volume.
        """
        return pulumi.get(self, "adjustable_iops_states")

    @_builtins.property
    @pulumi.getter(name="allowedUse")
    def allowed_use(self) -> pulumi.Output[Optional['outputs.IsVolumeAllowedUse']]:
        """
        The usage constraints to match against the requested instance or bare metal server properties to determine
        compatibility.
        """
        return pulumi.get(self, "allowed_use")

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> pulumi.Output[_builtins.float]:
        """
        The maximum bandwidth (in megabits per second) for the volume. For this property to be specified, the volume
        storage_generation must be 2.
        """
        return pulumi.get(self, "bandwidth")

    @_builtins.property
    @pulumi.getter
    def capacity(self) -> pulumi.Output[_builtins.float]:
        """
        Volume capacity value
        """
        return pulumi.get(self, "capacity")

    @_builtins.property
    @pulumi.getter(name="catalogOfferings")
    def catalog_offerings(self) -> pulumi.Output[Sequence['outputs.IsVolumeCatalogOffering']]:
        """
        The catalog offering this volume was created from. If a virtual server instance is provisioned with a
        boot_volume_attachment specifying this volume, the virtual server instance will use this volume's catalog offering,
        including its pricing plan.
        """
        return pulumi.get(self, "catalog_offerings")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        CRN value for the volume instance
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="deleteAllSnapshots")
    def delete_all_snapshots(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Deletes all snapshots created from this volume
        """
        return pulumi.get(self, "delete_all_snapshots")

    @_builtins.property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Volume encryption key info
        """
        return pulumi.get(self, "encryption_key")

    @_builtins.property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> pulumi.Output[_builtins.str]:
        """
        Volume encryption type info
        """
        return pulumi.get(self, "encryption_type")

    @_builtins.property
    @pulumi.getter(name="healthReasons")
    def health_reasons(self) -> pulumi.Output[Sequence['outputs.IsVolumeHealthReason']]:
        return pulumi.get(self, "health_reasons")

    @_builtins.property
    @pulumi.getter(name="healthState")
    def health_state(self) -> pulumi.Output[_builtins.str]:
        """
        The health of this resource.
        """
        return pulumi.get(self, "health_state")

    @_builtins.property
    @pulumi.getter
    def iops(self) -> pulumi.Output[_builtins.float]:
        """
        IOPS value for the Volume
        """
        return pulumi.get(self, "iops")

    @_builtins.property
    @pulumi.getter(name="isVolumeId")
    def is_volume_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_volume_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Volume name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="operatingSystems")
    def operating_systems(self) -> pulumi.Output[Sequence['outputs.IsVolumeOperatingSystem']]:
        """
        The operating system associated with this volume. If absent, this volume was notcreated from an image, or the image did
        not include an operating system.
        """
        return pulumi.get(self, "operating_systems")

    @_builtins.property
    @pulumi.getter
    def profile(self) -> pulumi.Output[_builtins.str]:
        """
        Volume profile name
        """
        return pulumi.get(self, "profile")

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> pulumi.Output[_builtins.str]:
        """
        The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        """
        return pulumi.get(self, "resource_controller_url")

    @_builtins.property
    @pulumi.getter(name="resourceCrn")
    def resource_crn(self) -> pulumi.Output[_builtins.str]:
        """
        The crn of the resource
        """
        return pulumi.get(self, "resource_crn")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Output[_builtins.str]:
        """
        Resource group name
        """
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Output[_builtins.str]:
        """
        The resource group name in which resource is provisioned
        """
        return pulumi.get(self, "resource_group_name")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceStatus")
    def resource_status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the resource
        """
        return pulumi.get(self, "resource_status")

    @_builtins.property
    @pulumi.getter(name="sourceSnapshot")
    def source_snapshot(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier for this snapshot
        """
        return pulumi.get(self, "source_snapshot")

    @_builtins.property
    @pulumi.getter(name="sourceSnapshotCrn")
    def source_snapshot_crn(self) -> pulumi.Output[_builtins.str]:
        """
        The crn for this snapshot
        """
        return pulumi.get(self, "source_snapshot_crn")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Volume status
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> pulumi.Output[Sequence['outputs.IsVolumeStatusReason']]:
        return pulumi.get(self, "status_reasons")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        UserTags for the volume instance
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IsVolumeTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> pulumi.Output[_builtins.str]:
        """
        Zone name
        """
        return pulumi.get(self, "zone")

