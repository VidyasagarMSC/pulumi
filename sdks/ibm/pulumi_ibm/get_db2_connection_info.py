# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetDb2ConnectionInfoResult',
    'AwaitableGetDb2ConnectionInfoResult',
    'get_db2_connection_info',
    'get_db2_connection_info_output',
]

@pulumi.output_type
class GetDb2ConnectionInfoResult:
    """
    A collection of values returned by getDb2ConnectionInfo.
    """
    def __init__(__self__, deployment_id=None, id=None, privates=None, publics=None, x_deployment_id=None):
        if deployment_id and not isinstance(deployment_id, str):
            raise TypeError("Expected argument 'deployment_id' to be a str")
        pulumi.set(__self__, "deployment_id", deployment_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if privates and not isinstance(privates, list):
            raise TypeError("Expected argument 'privates' to be a list")
        pulumi.set(__self__, "privates", privates)
        if publics and not isinstance(publics, list):
            raise TypeError("Expected argument 'publics' to be a list")
        pulumi.set(__self__, "publics", publics)
        if x_deployment_id and not isinstance(x_deployment_id, str):
            raise TypeError("Expected argument 'x_deployment_id' to be a str")
        pulumi.set(__self__, "x_deployment_id", x_deployment_id)

    @_builtins.property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> _builtins.str:
        return pulumi.get(self, "deployment_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def privates(self) -> Sequence['outputs.GetDb2ConnectionInfoPrivateResult']:
        return pulumi.get(self, "privates")

    @_builtins.property
    @pulumi.getter
    def publics(self) -> Sequence['outputs.GetDb2ConnectionInfoPublicResult']:
        return pulumi.get(self, "publics")

    @_builtins.property
    @pulumi.getter(name="xDeploymentId")
    def x_deployment_id(self) -> _builtins.str:
        return pulumi.get(self, "x_deployment_id")


class AwaitableGetDb2ConnectionInfoResult(GetDb2ConnectionInfoResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDb2ConnectionInfoResult(
            deployment_id=self.deployment_id,
            id=self.id,
            privates=self.privates,
            publics=self.publics,
            x_deployment_id=self.x_deployment_id)


def get_db2_connection_info(deployment_id: Optional[_builtins.str] = None,
                            id: Optional[_builtins.str] = None,
                            x_deployment_id: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDb2ConnectionInfoResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['deploymentId'] = deployment_id
    __args__['id'] = id
    __args__['xDeploymentId'] = x_deployment_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getDb2ConnectionInfo:getDb2ConnectionInfo', __args__, opts=opts, typ=GetDb2ConnectionInfoResult, package_ref=_utilities.get_package()).value

    return AwaitableGetDb2ConnectionInfoResult(
        deployment_id=pulumi.get(__ret__, 'deployment_id'),
        id=pulumi.get(__ret__, 'id'),
        privates=pulumi.get(__ret__, 'privates'),
        publics=pulumi.get(__ret__, 'publics'),
        x_deployment_id=pulumi.get(__ret__, 'x_deployment_id'))
def get_db2_connection_info_output(deployment_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   x_deployment_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDb2ConnectionInfoResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['deploymentId'] = deployment_id
    __args__['id'] = id
    __args__['xDeploymentId'] = x_deployment_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getDb2ConnectionInfo:getDb2ConnectionInfo', __args__, opts=opts, typ=GetDb2ConnectionInfoResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetDb2ConnectionInfoResult(
        deployment_id=pulumi.get(__response__, 'deployment_id'),
        id=pulumi.get(__response__, 'id'),
        privates=pulumi.get(__response__, 'privates'),
        publics=pulumi.get(__response__, 'publics'),
        x_deployment_id=pulumi.get(__response__, 'x_deployment_id')))
