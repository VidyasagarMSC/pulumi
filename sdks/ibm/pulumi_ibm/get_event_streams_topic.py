# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetEventStreamsTopicResult',
    'AwaitableGetEventStreamsTopicResult',
    'get_event_streams_topic',
    'get_event_streams_topic_output',
]

@pulumi.output_type
class GetEventStreamsTopicResult:
    """
    A collection of values returned by getEventStreamsTopic.
    """
    def __init__(__self__, config=None, id=None, kafka_brokers_sasls=None, kafka_http_url=None, name=None, partitions=None, resource_instance_id=None):
        if config and not isinstance(config, dict):
            raise TypeError("Expected argument 'config' to be a dict")
        pulumi.set(__self__, "config", config)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if kafka_brokers_sasls and not isinstance(kafka_brokers_sasls, list):
            raise TypeError("Expected argument 'kafka_brokers_sasls' to be a list")
        pulumi.set(__self__, "kafka_brokers_sasls", kafka_brokers_sasls)
        if kafka_http_url and not isinstance(kafka_http_url, str):
            raise TypeError("Expected argument 'kafka_http_url' to be a str")
        pulumi.set(__self__, "kafka_http_url", kafka_http_url)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if partitions and not isinstance(partitions, float):
            raise TypeError("Expected argument 'partitions' to be a float")
        pulumi.set(__self__, "partitions", partitions)
        if resource_instance_id and not isinstance(resource_instance_id, str):
            raise TypeError("Expected argument 'resource_instance_id' to be a str")
        pulumi.set(__self__, "resource_instance_id", resource_instance_id)

    @_builtins.property
    @pulumi.getter
    def config(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "config")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="kafkaBrokersSasls")
    def kafka_brokers_sasls(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "kafka_brokers_sasls")

    @_builtins.property
    @pulumi.getter(name="kafkaHttpUrl")
    def kafka_http_url(self) -> _builtins.str:
        return pulumi.get(self, "kafka_http_url")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def partitions(self) -> _builtins.float:
        return pulumi.get(self, "partitions")

    @_builtins.property
    @pulumi.getter(name="resourceInstanceId")
    def resource_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "resource_instance_id")


class AwaitableGetEventStreamsTopicResult(GetEventStreamsTopicResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEventStreamsTopicResult(
            config=self.config,
            id=self.id,
            kafka_brokers_sasls=self.kafka_brokers_sasls,
            kafka_http_url=self.kafka_http_url,
            name=self.name,
            partitions=self.partitions,
            resource_instance_id=self.resource_instance_id)


def get_event_streams_topic(id: Optional[_builtins.str] = None,
                            name: Optional[_builtins.str] = None,
                            resource_instance_id: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEventStreamsTopicResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['resourceInstanceId'] = resource_instance_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getEventStreamsTopic:getEventStreamsTopic', __args__, opts=opts, typ=GetEventStreamsTopicResult, package_ref=_utilities.get_package()).value

    return AwaitableGetEventStreamsTopicResult(
        config=pulumi.get(__ret__, 'config'),
        id=pulumi.get(__ret__, 'id'),
        kafka_brokers_sasls=pulumi.get(__ret__, 'kafka_brokers_sasls'),
        kafka_http_url=pulumi.get(__ret__, 'kafka_http_url'),
        name=pulumi.get(__ret__, 'name'),
        partitions=pulumi.get(__ret__, 'partitions'),
        resource_instance_id=pulumi.get(__ret__, 'resource_instance_id'))
def get_event_streams_topic_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   name: Optional[pulumi.Input[_builtins.str]] = None,
                                   resource_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEventStreamsTopicResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['resourceInstanceId'] = resource_instance_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getEventStreamsTopic:getEventStreamsTopic', __args__, opts=opts, typ=GetEventStreamsTopicResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetEventStreamsTopicResult(
        config=pulumi.get(__response__, 'config'),
        id=pulumi.get(__response__, 'id'),
        kafka_brokers_sasls=pulumi.get(__response__, 'kafka_brokers_sasls'),
        kafka_http_url=pulumi.get(__response__, 'kafka_http_url'),
        name=pulumi.get(__response__, 'name'),
        partitions=pulumi.get(__response__, 'partitions'),
        resource_instance_id=pulumi.get(__response__, 'resource_instance_id')))
