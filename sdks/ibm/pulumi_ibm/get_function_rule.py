# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetFunctionRuleResult',
    'AwaitableGetFunctionRuleResult',
    'get_function_rule',
    'get_function_rule_output',
]

@pulumi.output_type
class GetFunctionRuleResult:
    """
    A collection of values returned by getFunctionRule.
    """
    def __init__(__self__, action_name=None, id=None, name=None, namespace=None, publish=None, rule_id=None, status=None, trigger_name=None, version=None):
        if action_name and not isinstance(action_name, str):
            raise TypeError("Expected argument 'action_name' to be a str")
        pulumi.set(__self__, "action_name", action_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        pulumi.set(__self__, "namespace", namespace)
        if publish and not isinstance(publish, bool):
            raise TypeError("Expected argument 'publish' to be a bool")
        pulumi.set(__self__, "publish", publish)
        if rule_id and not isinstance(rule_id, str):
            raise TypeError("Expected argument 'rule_id' to be a str")
        pulumi.set(__self__, "rule_id", rule_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if trigger_name and not isinstance(trigger_name, str):
            raise TypeError("Expected argument 'trigger_name' to be a str")
        pulumi.set(__self__, "trigger_name", trigger_name)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="actionName")
    def action_name(self) -> _builtins.str:
        return pulumi.get(self, "action_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def publish(self) -> _builtins.bool:
        return pulumi.get(self, "publish")

    @_builtins.property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> _builtins.str:
        return pulumi.get(self, "rule_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="triggerName")
    def trigger_name(self) -> _builtins.str:
        return pulumi.get(self, "trigger_name")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        return pulumi.get(self, "version")


class AwaitableGetFunctionRuleResult(GetFunctionRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFunctionRuleResult(
            action_name=self.action_name,
            id=self.id,
            name=self.name,
            namespace=self.namespace,
            publish=self.publish,
            rule_id=self.rule_id,
            status=self.status,
            trigger_name=self.trigger_name,
            version=self.version)


def get_function_rule(id: Optional[_builtins.str] = None,
                      name: Optional[_builtins.str] = None,
                      namespace: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFunctionRuleResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['namespace'] = namespace
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getFunctionRule:getFunctionRule', __args__, opts=opts, typ=GetFunctionRuleResult, package_ref=_utilities.get_package()).value

    return AwaitableGetFunctionRuleResult(
        action_name=pulumi.get(__ret__, 'action_name'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        namespace=pulumi.get(__ret__, 'namespace'),
        publish=pulumi.get(__ret__, 'publish'),
        rule_id=pulumi.get(__ret__, 'rule_id'),
        status=pulumi.get(__ret__, 'status'),
        trigger_name=pulumi.get(__ret__, 'trigger_name'),
        version=pulumi.get(__ret__, 'version'))
def get_function_rule_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             name: Optional[pulumi.Input[_builtins.str]] = None,
                             namespace: Optional[pulumi.Input[_builtins.str]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetFunctionRuleResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['namespace'] = namespace
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getFunctionRule:getFunctionRule', __args__, opts=opts, typ=GetFunctionRuleResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetFunctionRuleResult(
        action_name=pulumi.get(__response__, 'action_name'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        namespace=pulumi.get(__response__, 'namespace'),
        publish=pulumi.get(__response__, 'publish'),
        rule_id=pulumi.get(__response__, 'rule_id'),
        status=pulumi.get(__response__, 'status'),
        trigger_name=pulumi.get(__response__, 'trigger_name'),
        version=pulumi.get(__response__, 'version')))
