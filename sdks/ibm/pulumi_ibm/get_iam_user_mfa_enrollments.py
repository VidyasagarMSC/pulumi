# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIamUserMfaEnrollmentsResult',
    'AwaitableGetIamUserMfaEnrollmentsResult',
    'get_iam_user_mfa_enrollments',
    'get_iam_user_mfa_enrollments_output',
]

@pulumi.output_type
class GetIamUserMfaEnrollmentsResult:
    """
    A collection of values returned by getIamUserMfaEnrollments.
    """
    def __init__(__self__, account_based_mfas=None, account_id=None, effective_mfa_type=None, iam_id=None, id=None, id_based_mfas=None):
        if account_based_mfas and not isinstance(account_based_mfas, list):
            raise TypeError("Expected argument 'account_based_mfas' to be a list")
        pulumi.set(__self__, "account_based_mfas", account_based_mfas)
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if effective_mfa_type and not isinstance(effective_mfa_type, str):
            raise TypeError("Expected argument 'effective_mfa_type' to be a str")
        pulumi.set(__self__, "effective_mfa_type", effective_mfa_type)
        if iam_id and not isinstance(iam_id, str):
            raise TypeError("Expected argument 'iam_id' to be a str")
        pulumi.set(__self__, "iam_id", iam_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if id_based_mfas and not isinstance(id_based_mfas, list):
            raise TypeError("Expected argument 'id_based_mfas' to be a list")
        pulumi.set(__self__, "id_based_mfas", id_based_mfas)

    @_builtins.property
    @pulumi.getter(name="accountBasedMfas")
    def account_based_mfas(self) -> Sequence['outputs.GetIamUserMfaEnrollmentsAccountBasedMfaResult']:
        return pulumi.get(self, "account_based_mfas")

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="effectiveMfaType")
    def effective_mfa_type(self) -> _builtins.str:
        return pulumi.get(self, "effective_mfa_type")

    @_builtins.property
    @pulumi.getter(name="iamId")
    def iam_id(self) -> _builtins.str:
        return pulumi.get(self, "iam_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="idBasedMfas")
    def id_based_mfas(self) -> Sequence['outputs.GetIamUserMfaEnrollmentsIdBasedMfaResult']:
        return pulumi.get(self, "id_based_mfas")


class AwaitableGetIamUserMfaEnrollmentsResult(GetIamUserMfaEnrollmentsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamUserMfaEnrollmentsResult(
            account_based_mfas=self.account_based_mfas,
            account_id=self.account_id,
            effective_mfa_type=self.effective_mfa_type,
            iam_id=self.iam_id,
            id=self.id,
            id_based_mfas=self.id_based_mfas)


def get_iam_user_mfa_enrollments(account_id: Optional[_builtins.str] = None,
                                 iam_id: Optional[_builtins.str] = None,
                                 id: Optional[_builtins.str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamUserMfaEnrollmentsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['iamId'] = iam_id
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIamUserMfaEnrollments:getIamUserMfaEnrollments', __args__, opts=opts, typ=GetIamUserMfaEnrollmentsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIamUserMfaEnrollmentsResult(
        account_based_mfas=pulumi.get(__ret__, 'account_based_mfas'),
        account_id=pulumi.get(__ret__, 'account_id'),
        effective_mfa_type=pulumi.get(__ret__, 'effective_mfa_type'),
        iam_id=pulumi.get(__ret__, 'iam_id'),
        id=pulumi.get(__ret__, 'id'),
        id_based_mfas=pulumi.get(__ret__, 'id_based_mfas'))
def get_iam_user_mfa_enrollments_output(account_id: Optional[pulumi.Input[_builtins.str]] = None,
                                        iam_id: Optional[pulumi.Input[_builtins.str]] = None,
                                        id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamUserMfaEnrollmentsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['iamId'] = iam_id
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIamUserMfaEnrollments:getIamUserMfaEnrollments', __args__, opts=opts, typ=GetIamUserMfaEnrollmentsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIamUserMfaEnrollmentsResult(
        account_based_mfas=pulumi.get(__response__, 'account_based_mfas'),
        account_id=pulumi.get(__response__, 'account_id'),
        effective_mfa_type=pulumi.get(__response__, 'effective_mfa_type'),
        iam_id=pulumi.get(__response__, 'iam_id'),
        id=pulumi.get(__response__, 'id'),
        id_based_mfas=pulumi.get(__response__, 'id_based_mfas')))
