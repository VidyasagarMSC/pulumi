# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetEventStreamsSchemaResult',
    'AwaitableGetEventStreamsSchemaResult',
    'get_event_streams_schema',
    'get_event_streams_schema_output',
]

@pulumi.output_type
class GetEventStreamsSchemaResult:
    """
    A collection of values returned by getEventStreamsSchema.
    """
    def __init__(__self__, id=None, kafka_http_url=None, resource_instance_id=None, schema_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if kafka_http_url and not isinstance(kafka_http_url, str):
            raise TypeError("Expected argument 'kafka_http_url' to be a str")
        pulumi.set(__self__, "kafka_http_url", kafka_http_url)
        if resource_instance_id and not isinstance(resource_instance_id, str):
            raise TypeError("Expected argument 'resource_instance_id' to be a str")
        pulumi.set(__self__, "resource_instance_id", resource_instance_id)
        if schema_id and not isinstance(schema_id, str):
            raise TypeError("Expected argument 'schema_id' to be a str")
        pulumi.set(__self__, "schema_id", schema_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="kafkaHttpUrl")
    def kafka_http_url(self) -> _builtins.str:
        return pulumi.get(self, "kafka_http_url")

    @_builtins.property
    @pulumi.getter(name="resourceInstanceId")
    def resource_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "resource_instance_id")

    @_builtins.property
    @pulumi.getter(name="schemaId")
    def schema_id(self) -> _builtins.str:
        return pulumi.get(self, "schema_id")


class AwaitableGetEventStreamsSchemaResult(GetEventStreamsSchemaResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEventStreamsSchemaResult(
            id=self.id,
            kafka_http_url=self.kafka_http_url,
            resource_instance_id=self.resource_instance_id,
            schema_id=self.schema_id)


def get_event_streams_schema(id: Optional[_builtins.str] = None,
                             resource_instance_id: Optional[_builtins.str] = None,
                             schema_id: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEventStreamsSchemaResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['resourceInstanceId'] = resource_instance_id
    __args__['schemaId'] = schema_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getEventStreamsSchema:getEventStreamsSchema', __args__, opts=opts, typ=GetEventStreamsSchemaResult, package_ref=_utilities.get_package()).value

    return AwaitableGetEventStreamsSchemaResult(
        id=pulumi.get(__ret__, 'id'),
        kafka_http_url=pulumi.get(__ret__, 'kafka_http_url'),
        resource_instance_id=pulumi.get(__ret__, 'resource_instance_id'),
        schema_id=pulumi.get(__ret__, 'schema_id'))
def get_event_streams_schema_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    resource_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                    schema_id: Optional[pulumi.Input[_builtins.str]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEventStreamsSchemaResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['resourceInstanceId'] = resource_instance_id
    __args__['schemaId'] = schema_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getEventStreamsSchema:getEventStreamsSchema', __args__, opts=opts, typ=GetEventStreamsSchemaResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetEventStreamsSchemaResult(
        id=pulumi.get(__response__, 'id'),
        kafka_http_url=pulumi.get(__response__, 'kafka_http_url'),
        resource_instance_id=pulumi.get(__response__, 'resource_instance_id'),
        schema_id=pulumi.get(__response__, 'schema_id')))
