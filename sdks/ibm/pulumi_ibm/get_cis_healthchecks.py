# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetCisHealthchecksResult',
    'AwaitableGetCisHealthchecksResult',
    'get_cis_healthchecks',
    'get_cis_healthchecks_output',
]

@pulumi.output_type
class GetCisHealthchecksResult:
    """
    A collection of values returned by getCisHealthchecks.
    """
    def __init__(__self__, cis_healthchecks=None, cis_id=None, id=None, timeouts=None):
        if cis_healthchecks and not isinstance(cis_healthchecks, list):
            raise TypeError("Expected argument 'cis_healthchecks' to be a list")
        pulumi.set(__self__, "cis_healthchecks", cis_healthchecks)
        if cis_id and not isinstance(cis_id, str):
            raise TypeError("Expected argument 'cis_id' to be a str")
        pulumi.set(__self__, "cis_id", cis_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if timeouts and not isinstance(timeouts, dict):
            raise TypeError("Expected argument 'timeouts' to be a dict")
        pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="cisHealthchecks")
    def cis_healthchecks(self) -> Sequence['outputs.GetCisHealthchecksCisHealthcheckResult']:
        return pulumi.get(self, "cis_healthchecks")

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> _builtins.str:
        return pulumi.get(self, "cis_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional['outputs.GetCisHealthchecksTimeoutsResult']:
        return pulumi.get(self, "timeouts")


class AwaitableGetCisHealthchecksResult(GetCisHealthchecksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCisHealthchecksResult(
            cis_healthchecks=self.cis_healthchecks,
            cis_id=self.cis_id,
            id=self.id,
            timeouts=self.timeouts)


def get_cis_healthchecks(cis_id: Optional[_builtins.str] = None,
                         id: Optional[_builtins.str] = None,
                         timeouts: Optional[Union['GetCisHealthchecksTimeoutsArgs', 'GetCisHealthchecksTimeoutsArgsDict']] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCisHealthchecksResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cisId'] = cis_id
    __args__['id'] = id
    __args__['timeouts'] = timeouts
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCisHealthchecks:getCisHealthchecks', __args__, opts=opts, typ=GetCisHealthchecksResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCisHealthchecksResult(
        cis_healthchecks=pulumi.get(__ret__, 'cis_healthchecks'),
        cis_id=pulumi.get(__ret__, 'cis_id'),
        id=pulumi.get(__ret__, 'id'),
        timeouts=pulumi.get(__ret__, 'timeouts'))
def get_cis_healthchecks_output(cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                                id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                timeouts: Optional[pulumi.Input[Optional[Union['GetCisHealthchecksTimeoutsArgs', 'GetCisHealthchecksTimeoutsArgsDict']]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCisHealthchecksResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cisId'] = cis_id
    __args__['id'] = id
    __args__['timeouts'] = timeouts
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCisHealthchecks:getCisHealthchecks', __args__, opts=opts, typ=GetCisHealthchecksResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCisHealthchecksResult(
        cis_healthchecks=pulumi.get(__response__, 'cis_healthchecks'),
        cis_id=pulumi.get(__response__, 'cis_id'),
        id=pulumi.get(__response__, 'id'),
        timeouts=pulumi.get(__response__, 'timeouts')))
