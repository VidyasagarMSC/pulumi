# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetFunctionTriggerResult',
    'AwaitableGetFunctionTriggerResult',
    'get_function_trigger',
    'get_function_trigger_output',
]

@pulumi.output_type
class GetFunctionTriggerResult:
    """
    A collection of values returned by getFunctionTrigger.
    """
    def __init__(__self__, annotations=None, id=None, name=None, namespace=None, parameters=None, publish=None, trigger_id=None, version=None):
        if annotations and not isinstance(annotations, str):
            raise TypeError("Expected argument 'annotations' to be a str")
        pulumi.set(__self__, "annotations", annotations)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        pulumi.set(__self__, "namespace", namespace)
        if parameters and not isinstance(parameters, str):
            raise TypeError("Expected argument 'parameters' to be a str")
        pulumi.set(__self__, "parameters", parameters)
        if publish and not isinstance(publish, bool):
            raise TypeError("Expected argument 'publish' to be a bool")
        pulumi.set(__self__, "publish", publish)
        if trigger_id and not isinstance(trigger_id, str):
            raise TypeError("Expected argument 'trigger_id' to be a str")
        pulumi.set(__self__, "trigger_id", trigger_id)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> _builtins.str:
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> _builtins.str:
        return pulumi.get(self, "parameters")

    @_builtins.property
    @pulumi.getter
    def publish(self) -> _builtins.bool:
        return pulumi.get(self, "publish")

    @_builtins.property
    @pulumi.getter(name="triggerId")
    def trigger_id(self) -> _builtins.str:
        return pulumi.get(self, "trigger_id")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        return pulumi.get(self, "version")


class AwaitableGetFunctionTriggerResult(GetFunctionTriggerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFunctionTriggerResult(
            annotations=self.annotations,
            id=self.id,
            name=self.name,
            namespace=self.namespace,
            parameters=self.parameters,
            publish=self.publish,
            trigger_id=self.trigger_id,
            version=self.version)


def get_function_trigger(id: Optional[_builtins.str] = None,
                         name: Optional[_builtins.str] = None,
                         namespace: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFunctionTriggerResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['namespace'] = namespace
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getFunctionTrigger:getFunctionTrigger', __args__, opts=opts, typ=GetFunctionTriggerResult, package_ref=_utilities.get_package()).value

    return AwaitableGetFunctionTriggerResult(
        annotations=pulumi.get(__ret__, 'annotations'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        namespace=pulumi.get(__ret__, 'namespace'),
        parameters=pulumi.get(__ret__, 'parameters'),
        publish=pulumi.get(__ret__, 'publish'),
        trigger_id=pulumi.get(__ret__, 'trigger_id'),
        version=pulumi.get(__ret__, 'version'))
def get_function_trigger_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                name: Optional[pulumi.Input[_builtins.str]] = None,
                                namespace: Optional[pulumi.Input[_builtins.str]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetFunctionTriggerResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['namespace'] = namespace
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getFunctionTrigger:getFunctionTrigger', __args__, opts=opts, typ=GetFunctionTriggerResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetFunctionTriggerResult(
        annotations=pulumi.get(__response__, 'annotations'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        namespace=pulumi.get(__response__, 'namespace'),
        parameters=pulumi.get(__response__, 'parameters'),
        publish=pulumi.get(__response__, 'publish'),
        trigger_id=pulumi.get(__response__, 'trigger_id'),
        version=pulumi.get(__response__, 'version')))
