# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PiSnapshotArgs', 'PiSnapshot']

@pulumi.input_type
class PiSnapshotArgs:
    def __init__(__self__, *,
                 pi_cloud_instance_id: pulumi.Input[_builtins.str],
                 pi_instance_name: pulumi.Input[_builtins.str],
                 pi_snap_shot_name: pulumi.Input[_builtins.str],
                 pi_description: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_volume_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['PiSnapshotTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a PiSnapshot resource.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_instance_name: The name of the instance you want to take a snapshot of.
        :param pulumi.Input[_builtins.str] pi_snap_shot_name: The unique name of the snapshot.
        :param pulumi.Input[_builtins.str] pi_description: Description of the PVM instance snapshot.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: The user tags attached to this resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_volume_ids: A list of volume IDs of the instance that will be part of the snapshot. If none are provided, then all the volumes of
               the instance will be part of the snapshot.
        """
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        pulumi.set(__self__, "pi_instance_name", pi_instance_name)
        pulumi.set(__self__, "pi_snap_shot_name", pi_snap_shot_name)
        if pi_description is not None:
            pulumi.set(__self__, "pi_description", pi_description)
        if pi_snapshot_id is not None:
            pulumi.set(__self__, "pi_snapshot_id", pi_snapshot_id)
        if pi_user_tags is not None:
            pulumi.set(__self__, "pi_user_tags", pi_user_tags)
        if pi_volume_ids is not None:
            pulumi.set(__self__, "pi_volume_ids", pi_volume_ids)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piInstanceName")
    def pi_instance_name(self) -> pulumi.Input[_builtins.str]:
        """
        The name of the instance you want to take a snapshot of.
        """
        return pulumi.get(self, "pi_instance_name")

    @pi_instance_name.setter
    def pi_instance_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_instance_name", value)

    @_builtins.property
    @pulumi.getter(name="piSnapShotName")
    def pi_snap_shot_name(self) -> pulumi.Input[_builtins.str]:
        """
        The unique name of the snapshot.
        """
        return pulumi.get(self, "pi_snap_shot_name")

    @pi_snap_shot_name.setter
    def pi_snap_shot_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_snap_shot_name", value)

    @_builtins.property
    @pulumi.getter(name="piDescription")
    def pi_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the PVM instance snapshot.
        """
        return pulumi.get(self, "pi_description")

    @pi_description.setter
    def pi_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_description", value)

    @_builtins.property
    @pulumi.getter(name="piSnapshotId")
    def pi_snapshot_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_snapshot_id")

    @pi_snapshot_id.setter
    def pi_snapshot_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_snapshot_id", value)

    @_builtins.property
    @pulumi.getter(name="piUserTags")
    def pi_user_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The user tags attached to this resource.
        """
        return pulumi.get(self, "pi_user_tags")

    @pi_user_tags.setter
    def pi_user_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_user_tags", value)

    @_builtins.property
    @pulumi.getter(name="piVolumeIds")
    def pi_volume_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        A list of volume IDs of the instance that will be part of the snapshot. If none are provided, then all the volumes of
        the instance will be part of the snapshot.
        """
        return pulumi.get(self, "pi_volume_ids")

    @pi_volume_ids.setter
    def pi_volume_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_volume_ids", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiSnapshotTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiSnapshotTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _PiSnapshotState:
    def __init__(__self__, *,
                 creation_date: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 last_update_date: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_description: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_instance_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_snap_shot_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_volume_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['PiSnapshotTimeoutsArgs']] = None,
                 volume_snapshots: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering PiSnapshot resources.
        :param pulumi.Input[_builtins.str] creation_date: Creation date of the snapshot.
        :param pulumi.Input[_builtins.str] crn: The CRN of this resource.
        :param pulumi.Input[_builtins.str] last_update_date: The last updated date of the snapshot.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_description: Description of the PVM instance snapshot.
        :param pulumi.Input[_builtins.str] pi_instance_name: The name of the instance you want to take a snapshot of.
        :param pulumi.Input[_builtins.str] pi_snap_shot_name: The unique name of the snapshot.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: The user tags attached to this resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_volume_ids: A list of volume IDs of the instance that will be part of the snapshot. If none are provided, then all the volumes of
               the instance will be part of the snapshot.
        :param pulumi.Input[_builtins.str] snapshot_id: ID of the PVM instance snapshot.
        :param pulumi.Input[_builtins.str] status: Status of the PVM instance snapshot.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] volume_snapshots: A map of volume snapshots included in the PVM instance snapshot.
        """
        if creation_date is not None:
            pulumi.set(__self__, "creation_date", creation_date)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if last_update_date is not None:
            pulumi.set(__self__, "last_update_date", last_update_date)
        if pi_cloud_instance_id is not None:
            pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_description is not None:
            pulumi.set(__self__, "pi_description", pi_description)
        if pi_instance_name is not None:
            pulumi.set(__self__, "pi_instance_name", pi_instance_name)
        if pi_snap_shot_name is not None:
            pulumi.set(__self__, "pi_snap_shot_name", pi_snap_shot_name)
        if pi_snapshot_id is not None:
            pulumi.set(__self__, "pi_snapshot_id", pi_snapshot_id)
        if pi_user_tags is not None:
            pulumi.set(__self__, "pi_user_tags", pi_user_tags)
        if pi_volume_ids is not None:
            pulumi.set(__self__, "pi_volume_ids", pi_volume_ids)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if volume_snapshots is not None:
            pulumi.set(__self__, "volume_snapshots", volume_snapshots)

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Creation date of the snapshot.
        """
        return pulumi.get(self, "creation_date")

    @creation_date.setter
    def creation_date(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "creation_date", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN of this resource.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="lastUpdateDate")
    def last_update_date(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The last updated date of the snapshot.
        """
        return pulumi.get(self, "last_update_date")

    @last_update_date.setter
    def last_update_date(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_update_date", value)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piDescription")
    def pi_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the PVM instance snapshot.
        """
        return pulumi.get(self, "pi_description")

    @pi_description.setter
    def pi_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_description", value)

    @_builtins.property
    @pulumi.getter(name="piInstanceName")
    def pi_instance_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the instance you want to take a snapshot of.
        """
        return pulumi.get(self, "pi_instance_name")

    @pi_instance_name.setter
    def pi_instance_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_instance_name", value)

    @_builtins.property
    @pulumi.getter(name="piSnapShotName")
    def pi_snap_shot_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique name of the snapshot.
        """
        return pulumi.get(self, "pi_snap_shot_name")

    @pi_snap_shot_name.setter
    def pi_snap_shot_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_snap_shot_name", value)

    @_builtins.property
    @pulumi.getter(name="piSnapshotId")
    def pi_snapshot_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_snapshot_id")

    @pi_snapshot_id.setter
    def pi_snapshot_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_snapshot_id", value)

    @_builtins.property
    @pulumi.getter(name="piUserTags")
    def pi_user_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The user tags attached to this resource.
        """
        return pulumi.get(self, "pi_user_tags")

    @pi_user_tags.setter
    def pi_user_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_user_tags", value)

    @_builtins.property
    @pulumi.getter(name="piVolumeIds")
    def pi_volume_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        A list of volume IDs of the instance that will be part of the snapshot. If none are provided, then all the volumes of
        the instance will be part of the snapshot.
        """
        return pulumi.get(self, "pi_volume_ids")

    @pi_volume_ids.setter
    def pi_volume_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_volume_ids", value)

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the PVM instance snapshot.
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "snapshot_id", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Status of the PVM instance snapshot.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiSnapshotTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiSnapshotTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="volumeSnapshots")
    def volume_snapshots(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        A map of volume snapshots included in the PVM instance snapshot.
        """
        return pulumi.get(self, "volume_snapshots")

    @volume_snapshots.setter
    def volume_snapshots(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "volume_snapshots", value)


@pulumi.type_token("ibm:index/piSnapshot:PiSnapshot")
class PiSnapshot(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_description: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_instance_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_snap_shot_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_volume_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiSnapshotTimeoutsArgs', 'PiSnapshotTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a PiSnapshot resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_description: Description of the PVM instance snapshot.
        :param pulumi.Input[_builtins.str] pi_instance_name: The name of the instance you want to take a snapshot of.
        :param pulumi.Input[_builtins.str] pi_snap_shot_name: The unique name of the snapshot.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: The user tags attached to this resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_volume_ids: A list of volume IDs of the instance that will be part of the snapshot. If none are provided, then all the volumes of
               the instance will be part of the snapshot.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PiSnapshotArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PiSnapshot resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PiSnapshotArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PiSnapshotArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_description: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_instance_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_snap_shot_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_volume_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiSnapshotTimeoutsArgs', 'PiSnapshotTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PiSnapshotArgs.__new__(PiSnapshotArgs)

            if pi_cloud_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'pi_cloud_instance_id'")
            __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
            __props__.__dict__["pi_description"] = pi_description
            if pi_instance_name is None and not opts.urn:
                raise TypeError("Missing required property 'pi_instance_name'")
            __props__.__dict__["pi_instance_name"] = pi_instance_name
            if pi_snap_shot_name is None and not opts.urn:
                raise TypeError("Missing required property 'pi_snap_shot_name'")
            __props__.__dict__["pi_snap_shot_name"] = pi_snap_shot_name
            __props__.__dict__["pi_snapshot_id"] = pi_snapshot_id
            __props__.__dict__["pi_user_tags"] = pi_user_tags
            __props__.__dict__["pi_volume_ids"] = pi_volume_ids
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["creation_date"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["last_update_date"] = None
            __props__.__dict__["snapshot_id"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["volume_snapshots"] = None
        super(PiSnapshot, __self__).__init__(
            'ibm:index/piSnapshot:PiSnapshot',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            creation_date: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            last_update_date: Optional[pulumi.Input[_builtins.str]] = None,
            pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_description: Optional[pulumi.Input[_builtins.str]] = None,
            pi_instance_name: Optional[pulumi.Input[_builtins.str]] = None,
            pi_snap_shot_name: Optional[pulumi.Input[_builtins.str]] = None,
            pi_snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            pi_volume_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['PiSnapshotTimeoutsArgs', 'PiSnapshotTimeoutsArgsDict']]] = None,
            volume_snapshots: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None) -> 'PiSnapshot':
        """
        Get an existing PiSnapshot resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] creation_date: Creation date of the snapshot.
        :param pulumi.Input[_builtins.str] crn: The CRN of this resource.
        :param pulumi.Input[_builtins.str] last_update_date: The last updated date of the snapshot.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_description: Description of the PVM instance snapshot.
        :param pulumi.Input[_builtins.str] pi_instance_name: The name of the instance you want to take a snapshot of.
        :param pulumi.Input[_builtins.str] pi_snap_shot_name: The unique name of the snapshot.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: The user tags attached to this resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_volume_ids: A list of volume IDs of the instance that will be part of the snapshot. If none are provided, then all the volumes of
               the instance will be part of the snapshot.
        :param pulumi.Input[_builtins.str] snapshot_id: ID of the PVM instance snapshot.
        :param pulumi.Input[_builtins.str] status: Status of the PVM instance snapshot.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] volume_snapshots: A map of volume snapshots included in the PVM instance snapshot.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PiSnapshotState.__new__(_PiSnapshotState)

        __props__.__dict__["creation_date"] = creation_date
        __props__.__dict__["crn"] = crn
        __props__.__dict__["last_update_date"] = last_update_date
        __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
        __props__.__dict__["pi_description"] = pi_description
        __props__.__dict__["pi_instance_name"] = pi_instance_name
        __props__.__dict__["pi_snap_shot_name"] = pi_snap_shot_name
        __props__.__dict__["pi_snapshot_id"] = pi_snapshot_id
        __props__.__dict__["pi_user_tags"] = pi_user_tags
        __props__.__dict__["pi_volume_ids"] = pi_volume_ids
        __props__.__dict__["snapshot_id"] = snapshot_id
        __props__.__dict__["status"] = status
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["volume_snapshots"] = volume_snapshots
        return PiSnapshot(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> pulumi.Output[_builtins.str]:
        """
        Creation date of the snapshot.
        """
        return pulumi.get(self, "creation_date")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The CRN of this resource.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="lastUpdateDate")
    def last_update_date(self) -> pulumi.Output[_builtins.str]:
        """
        The last updated date of the snapshot.
        """
        return pulumi.get(self, "last_update_date")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piDescription")
    def pi_description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Description of the PVM instance snapshot.
        """
        return pulumi.get(self, "pi_description")

    @_builtins.property
    @pulumi.getter(name="piInstanceName")
    def pi_instance_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the instance you want to take a snapshot of.
        """
        return pulumi.get(self, "pi_instance_name")

    @_builtins.property
    @pulumi.getter(name="piSnapShotName")
    def pi_snap_shot_name(self) -> pulumi.Output[_builtins.str]:
        """
        The unique name of the snapshot.
        """
        return pulumi.get(self, "pi_snap_shot_name")

    @_builtins.property
    @pulumi.getter(name="piSnapshotId")
    def pi_snapshot_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "pi_snapshot_id")

    @_builtins.property
    @pulumi.getter(name="piUserTags")
    def pi_user_tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The user tags attached to this resource.
        """
        return pulumi.get(self, "pi_user_tags")

    @_builtins.property
    @pulumi.getter(name="piVolumeIds")
    def pi_volume_ids(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        A list of volume IDs of the instance that will be part of the snapshot. If none are provided, then all the volumes of
        the instance will be part of the snapshot.
        """
        return pulumi.get(self, "pi_volume_ids")

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> pulumi.Output[_builtins.str]:
        """
        ID of the PVM instance snapshot.
        """
        return pulumi.get(self, "snapshot_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Status of the PVM instance snapshot.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.PiSnapshotTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter(name="volumeSnapshots")
    def volume_snapshots(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        A map of volume snapshots included in the PVM instance snapshot.
        """
        return pulumi.get(self, "volume_snapshots")

