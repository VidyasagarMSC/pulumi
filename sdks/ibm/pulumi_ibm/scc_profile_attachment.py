# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SccProfileAttachmentArgs', 'SccProfileAttachment']

@pulumi.input_type
class SccProfileAttachmentArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 profile_id: pulumi.Input[_builtins.str],
                 schedule: pulumi.Input[_builtins.str],
                 scopes: pulumi.Input[Sequence[pulumi.Input['SccProfileAttachmentScopeArgs']]],
                 status: pulumi.Input[_builtins.str],
                 attachment_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['SccProfileAttachmentAttachmentParameterArgs']]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notifications: Optional[pulumi.Input['SccProfileAttachmentNotificationsArgs']] = None,
                 scc_profile_attachment_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a SccProfileAttachment resource.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Security and Compliance Center instance.
        :param pulumi.Input[_builtins.str] profile_id: The ID of the profile that is specified in the attachment.
        :param pulumi.Input[_builtins.str] schedule: The schedule of an attachment evaluation.
        :param pulumi.Input[Sequence[pulumi.Input['SccProfileAttachmentScopeArgs']]] scopes: The scope/scopes to link the profile attachment.
        :param pulumi.Input[_builtins.str] status: The status of an attachment evaluation.
        :param pulumi.Input[Sequence[pulumi.Input['SccProfileAttachmentAttachmentParameterArgs']]] attachment_parameters: The profile parameters for the attachment.
        :param pulumi.Input[_builtins.str] description: The description for the attachment.
        :param pulumi.Input[_builtins.str] name: The name of the attachment.
        :param pulumi.Input['SccProfileAttachmentNotificationsArgs'] notifications: The request payload of the attachment notifications.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "profile_id", profile_id)
        pulumi.set(__self__, "schedule", schedule)
        pulumi.set(__self__, "scopes", scopes)
        pulumi.set(__self__, "status", status)
        if attachment_parameters is not None:
            pulumi.set(__self__, "attachment_parameters", attachment_parameters)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notifications is not None:
            pulumi.set(__self__, "notifications", notifications)
        if scc_profile_attachment_id is not None:
            pulumi.set(__self__, "scc_profile_attachment_id", scc_profile_attachment_id)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the Security and Compliance Center instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the profile that is specified in the attachment.
        """
        return pulumi.get(self, "profile_id")

    @profile_id.setter
    def profile_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "profile_id", value)

    @_builtins.property
    @pulumi.getter
    def schedule(self) -> pulumi.Input[_builtins.str]:
        """
        The schedule of an attachment evaluation.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "schedule", value)

    @_builtins.property
    @pulumi.getter
    def scopes(self) -> pulumi.Input[Sequence[pulumi.Input['SccProfileAttachmentScopeArgs']]]:
        """
        The scope/scopes to link the profile attachment.
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: pulumi.Input[Sequence[pulumi.Input['SccProfileAttachmentScopeArgs']]]):
        pulumi.set(self, "scopes", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Input[_builtins.str]:
        """
        The status of an attachment evaluation.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="attachmentParameters")
    def attachment_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SccProfileAttachmentAttachmentParameterArgs']]]]:
        """
        The profile parameters for the attachment.
        """
        return pulumi.get(self, "attachment_parameters")

    @attachment_parameters.setter
    def attachment_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SccProfileAttachmentAttachmentParameterArgs']]]]):
        pulumi.set(self, "attachment_parameters", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description for the attachment.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the attachment.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def notifications(self) -> Optional[pulumi.Input['SccProfileAttachmentNotificationsArgs']]:
        """
        The request payload of the attachment notifications.
        """
        return pulumi.get(self, "notifications")

    @notifications.setter
    def notifications(self, value: Optional[pulumi.Input['SccProfileAttachmentNotificationsArgs']]):
        pulumi.set(self, "notifications", value)

    @_builtins.property
    @pulumi.getter(name="sccProfileAttachmentId")
    def scc_profile_attachment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "scc_profile_attachment_id")

    @scc_profile_attachment_id.setter
    def scc_profile_attachment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scc_profile_attachment_id", value)


@pulumi.input_type
class _SccProfileAttachmentState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 attachment_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['SccProfileAttachmentAttachmentParameterArgs']]]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 created_on: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 last_scans: Optional[pulumi.Input[Sequence[pulumi.Input['SccProfileAttachmentLastScanArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 next_scan_time: Optional[pulumi.Input[_builtins.str]] = None,
                 notifications: Optional[pulumi.Input['SccProfileAttachmentNotificationsArgs']] = None,
                 profile_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 scc_profile_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 schedule: Optional[pulumi.Input[_builtins.str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input['SccProfileAttachmentScopeArgs']]]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_by: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_on: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SccProfileAttachment resources.
        :param pulumi.Input[_builtins.str] account_id: The account ID that is associated to the attachment.
        :param pulumi.Input[_builtins.str] attachment_id: The ID of the attachment.
        :param pulumi.Input[Sequence[pulumi.Input['SccProfileAttachmentAttachmentParameterArgs']]] attachment_parameters: The profile parameters for the attachment.
        :param pulumi.Input[_builtins.str] created_by: The user who created the attachment.
        :param pulumi.Input[_builtins.str] created_on: The date when the attachment was created.
        :param pulumi.Input[_builtins.str] description: The description for the attachment.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Security and Compliance Center instance.
        :param pulumi.Input[Sequence[pulumi.Input['SccProfileAttachmentLastScanArgs']]] last_scans: The details of the last scan of an attachment.
        :param pulumi.Input[_builtins.str] name: The name of the attachment.
        :param pulumi.Input[_builtins.str] next_scan_time: The start time of the next scan.
        :param pulumi.Input['SccProfileAttachmentNotificationsArgs'] notifications: The request payload of the attachment notifications.
        :param pulumi.Input[_builtins.str] profile_attachment_id: The profile attachment ID.
        :param pulumi.Input[_builtins.str] profile_id: The ID of the profile that is specified in the attachment.
        :param pulumi.Input[_builtins.str] schedule: The schedule of an attachment evaluation.
        :param pulumi.Input[Sequence[pulumi.Input['SccProfileAttachmentScopeArgs']]] scopes: The scope/scopes to link the profile attachment.
        :param pulumi.Input[_builtins.str] status: The status of an attachment evaluation.
        :param pulumi.Input[_builtins.str] updated_by: The user who updated the attachment.
        :param pulumi.Input[_builtins.str] updated_on: The date when the attachment was updated.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if attachment_id is not None:
            pulumi.set(__self__, "attachment_id", attachment_id)
        if attachment_parameters is not None:
            pulumi.set(__self__, "attachment_parameters", attachment_parameters)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if last_scans is not None:
            pulumi.set(__self__, "last_scans", last_scans)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if next_scan_time is not None:
            pulumi.set(__self__, "next_scan_time", next_scan_time)
        if notifications is not None:
            pulumi.set(__self__, "notifications", notifications)
        if profile_attachment_id is not None:
            pulumi.set(__self__, "profile_attachment_id", profile_attachment_id)
        if profile_id is not None:
            pulumi.set(__self__, "profile_id", profile_id)
        if scc_profile_attachment_id is not None:
            pulumi.set(__self__, "scc_profile_attachment_id", scc_profile_attachment_id)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_on is not None:
            pulumi.set(__self__, "updated_on", updated_on)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The account ID that is associated to the attachment.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_id", value)

    @_builtins.property
    @pulumi.getter(name="attachmentId")
    def attachment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the attachment.
        """
        return pulumi.get(self, "attachment_id")

    @attachment_id.setter
    def attachment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "attachment_id", value)

    @_builtins.property
    @pulumi.getter(name="attachmentParameters")
    def attachment_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SccProfileAttachmentAttachmentParameterArgs']]]]:
        """
        The profile parameters for the attachment.
        """
        return pulumi.get(self, "attachment_parameters")

    @attachment_parameters.setter
    def attachment_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SccProfileAttachmentAttachmentParameterArgs']]]]):
        pulumi.set(self, "attachment_parameters", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user who created the attachment.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date when the attachment was created.
        """
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_on", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description for the attachment.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the Security and Compliance Center instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="lastScans")
    def last_scans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SccProfileAttachmentLastScanArgs']]]]:
        """
        The details of the last scan of an attachment.
        """
        return pulumi.get(self, "last_scans")

    @last_scans.setter
    def last_scans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SccProfileAttachmentLastScanArgs']]]]):
        pulumi.set(self, "last_scans", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the attachment.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nextScanTime")
    def next_scan_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The start time of the next scan.
        """
        return pulumi.get(self, "next_scan_time")

    @next_scan_time.setter
    def next_scan_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "next_scan_time", value)

    @_builtins.property
    @pulumi.getter
    def notifications(self) -> Optional[pulumi.Input['SccProfileAttachmentNotificationsArgs']]:
        """
        The request payload of the attachment notifications.
        """
        return pulumi.get(self, "notifications")

    @notifications.setter
    def notifications(self, value: Optional[pulumi.Input['SccProfileAttachmentNotificationsArgs']]):
        pulumi.set(self, "notifications", value)

    @_builtins.property
    @pulumi.getter(name="profileAttachmentId")
    def profile_attachment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The profile attachment ID.
        """
        return pulumi.get(self, "profile_attachment_id")

    @profile_attachment_id.setter
    def profile_attachment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "profile_attachment_id", value)

    @_builtins.property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the profile that is specified in the attachment.
        """
        return pulumi.get(self, "profile_id")

    @profile_id.setter
    def profile_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "profile_id", value)

    @_builtins.property
    @pulumi.getter(name="sccProfileAttachmentId")
    def scc_profile_attachment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "scc_profile_attachment_id")

    @scc_profile_attachment_id.setter
    def scc_profile_attachment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scc_profile_attachment_id", value)

    @_builtins.property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The schedule of an attachment evaluation.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "schedule", value)

    @_builtins.property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SccProfileAttachmentScopeArgs']]]]:
        """
        The scope/scopes to link the profile attachment.
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SccProfileAttachmentScopeArgs']]]]):
        pulumi.set(self, "scopes", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of an attachment evaluation.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user who updated the attachment.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_by", value)

    @_builtins.property
    @pulumi.getter(name="updatedOn")
    def updated_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date when the attachment was updated.
        """
        return pulumi.get(self, "updated_on")

    @updated_on.setter
    def updated_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_on", value)


@pulumi.type_token("ibm:index/sccProfileAttachment:SccProfileAttachment")
class SccProfileAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 attachment_parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SccProfileAttachmentAttachmentParameterArgs', 'SccProfileAttachmentAttachmentParameterArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notifications: Optional[pulumi.Input[Union['SccProfileAttachmentNotificationsArgs', 'SccProfileAttachmentNotificationsArgsDict']]] = None,
                 profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 scc_profile_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 schedule: Optional[pulumi.Input[_builtins.str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SccProfileAttachmentScopeArgs', 'SccProfileAttachmentScopeArgsDict']]]]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a SccProfileAttachment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SccProfileAttachmentAttachmentParameterArgs', 'SccProfileAttachmentAttachmentParameterArgsDict']]]] attachment_parameters: The profile parameters for the attachment.
        :param pulumi.Input[_builtins.str] description: The description for the attachment.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Security and Compliance Center instance.
        :param pulumi.Input[_builtins.str] name: The name of the attachment.
        :param pulumi.Input[Union['SccProfileAttachmentNotificationsArgs', 'SccProfileAttachmentNotificationsArgsDict']] notifications: The request payload of the attachment notifications.
        :param pulumi.Input[_builtins.str] profile_id: The ID of the profile that is specified in the attachment.
        :param pulumi.Input[_builtins.str] schedule: The schedule of an attachment evaluation.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SccProfileAttachmentScopeArgs', 'SccProfileAttachmentScopeArgsDict']]]] scopes: The scope/scopes to link the profile attachment.
        :param pulumi.Input[_builtins.str] status: The status of an attachment evaluation.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SccProfileAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SccProfileAttachment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SccProfileAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SccProfileAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 attachment_parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SccProfileAttachmentAttachmentParameterArgs', 'SccProfileAttachmentAttachmentParameterArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notifications: Optional[pulumi.Input[Union['SccProfileAttachmentNotificationsArgs', 'SccProfileAttachmentNotificationsArgsDict']]] = None,
                 profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 scc_profile_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 schedule: Optional[pulumi.Input[_builtins.str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SccProfileAttachmentScopeArgs', 'SccProfileAttachmentScopeArgsDict']]]]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SccProfileAttachmentArgs.__new__(SccProfileAttachmentArgs)

            __props__.__dict__["attachment_parameters"] = attachment_parameters
            __props__.__dict__["description"] = description
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["name"] = name
            __props__.__dict__["notifications"] = notifications
            if profile_id is None and not opts.urn:
                raise TypeError("Missing required property 'profile_id'")
            __props__.__dict__["profile_id"] = profile_id
            __props__.__dict__["scc_profile_attachment_id"] = scc_profile_attachment_id
            if schedule is None and not opts.urn:
                raise TypeError("Missing required property 'schedule'")
            __props__.__dict__["schedule"] = schedule
            if scopes is None and not opts.urn:
                raise TypeError("Missing required property 'scopes'")
            __props__.__dict__["scopes"] = scopes
            if status is None and not opts.urn:
                raise TypeError("Missing required property 'status'")
            __props__.__dict__["status"] = status
            __props__.__dict__["account_id"] = None
            __props__.__dict__["attachment_id"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["created_on"] = None
            __props__.__dict__["last_scans"] = None
            __props__.__dict__["next_scan_time"] = None
            __props__.__dict__["profile_attachment_id"] = None
            __props__.__dict__["updated_by"] = None
            __props__.__dict__["updated_on"] = None
        super(SccProfileAttachment, __self__).__init__(
            'ibm:index/sccProfileAttachment:SccProfileAttachment',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[_builtins.str]] = None,
            attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
            attachment_parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SccProfileAttachmentAttachmentParameterArgs', 'SccProfileAttachmentAttachmentParameterArgsDict']]]]] = None,
            created_by: Optional[pulumi.Input[_builtins.str]] = None,
            created_on: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            last_scans: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SccProfileAttachmentLastScanArgs', 'SccProfileAttachmentLastScanArgsDict']]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            next_scan_time: Optional[pulumi.Input[_builtins.str]] = None,
            notifications: Optional[pulumi.Input[Union['SccProfileAttachmentNotificationsArgs', 'SccProfileAttachmentNotificationsArgsDict']]] = None,
            profile_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
            profile_id: Optional[pulumi.Input[_builtins.str]] = None,
            scc_profile_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
            schedule: Optional[pulumi.Input[_builtins.str]] = None,
            scopes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SccProfileAttachmentScopeArgs', 'SccProfileAttachmentScopeArgsDict']]]]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            updated_by: Optional[pulumi.Input[_builtins.str]] = None,
            updated_on: Optional[pulumi.Input[_builtins.str]] = None) -> 'SccProfileAttachment':
        """
        Get an existing SccProfileAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] account_id: The account ID that is associated to the attachment.
        :param pulumi.Input[_builtins.str] attachment_id: The ID of the attachment.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SccProfileAttachmentAttachmentParameterArgs', 'SccProfileAttachmentAttachmentParameterArgsDict']]]] attachment_parameters: The profile parameters for the attachment.
        :param pulumi.Input[_builtins.str] created_by: The user who created the attachment.
        :param pulumi.Input[_builtins.str] created_on: The date when the attachment was created.
        :param pulumi.Input[_builtins.str] description: The description for the attachment.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Security and Compliance Center instance.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SccProfileAttachmentLastScanArgs', 'SccProfileAttachmentLastScanArgsDict']]]] last_scans: The details of the last scan of an attachment.
        :param pulumi.Input[_builtins.str] name: The name of the attachment.
        :param pulumi.Input[_builtins.str] next_scan_time: The start time of the next scan.
        :param pulumi.Input[Union['SccProfileAttachmentNotificationsArgs', 'SccProfileAttachmentNotificationsArgsDict']] notifications: The request payload of the attachment notifications.
        :param pulumi.Input[_builtins.str] profile_attachment_id: The profile attachment ID.
        :param pulumi.Input[_builtins.str] profile_id: The ID of the profile that is specified in the attachment.
        :param pulumi.Input[_builtins.str] schedule: The schedule of an attachment evaluation.
        :param pulumi.Input[Sequence[pulumi.Input[Union['SccProfileAttachmentScopeArgs', 'SccProfileAttachmentScopeArgsDict']]]] scopes: The scope/scopes to link the profile attachment.
        :param pulumi.Input[_builtins.str] status: The status of an attachment evaluation.
        :param pulumi.Input[_builtins.str] updated_by: The user who updated the attachment.
        :param pulumi.Input[_builtins.str] updated_on: The date when the attachment was updated.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SccProfileAttachmentState.__new__(_SccProfileAttachmentState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["attachment_id"] = attachment_id
        __props__.__dict__["attachment_parameters"] = attachment_parameters
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["created_on"] = created_on
        __props__.__dict__["description"] = description
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["last_scans"] = last_scans
        __props__.__dict__["name"] = name
        __props__.__dict__["next_scan_time"] = next_scan_time
        __props__.__dict__["notifications"] = notifications
        __props__.__dict__["profile_attachment_id"] = profile_attachment_id
        __props__.__dict__["profile_id"] = profile_id
        __props__.__dict__["scc_profile_attachment_id"] = scc_profile_attachment_id
        __props__.__dict__["schedule"] = schedule
        __props__.__dict__["scopes"] = scopes
        __props__.__dict__["status"] = status
        __props__.__dict__["updated_by"] = updated_by
        __props__.__dict__["updated_on"] = updated_on
        return SccProfileAttachment(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[_builtins.str]:
        """
        The account ID that is associated to the attachment.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="attachmentId")
    def attachment_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the attachment.
        """
        return pulumi.get(self, "attachment_id")

    @_builtins.property
    @pulumi.getter(name="attachmentParameters")
    def attachment_parameters(self) -> pulumi.Output[Optional[Sequence['outputs.SccProfileAttachmentAttachmentParameter']]]:
        """
        The profile parameters for the attachment.
        """
        return pulumi.get(self, "attachment_parameters")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[_builtins.str]:
        """
        The user who created the attachment.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> pulumi.Output[_builtins.str]:
        """
        The date when the attachment was created.
        """
        return pulumi.get(self, "created_on")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The description for the attachment.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the Security and Compliance Center instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="lastScans")
    def last_scans(self) -> pulumi.Output[Sequence['outputs.SccProfileAttachmentLastScan']]:
        """
        The details of the last scan of an attachment.
        """
        return pulumi.get(self, "last_scans")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the attachment.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nextScanTime")
    def next_scan_time(self) -> pulumi.Output[_builtins.str]:
        """
        The start time of the next scan.
        """
        return pulumi.get(self, "next_scan_time")

    @_builtins.property
    @pulumi.getter
    def notifications(self) -> pulumi.Output[Optional['outputs.SccProfileAttachmentNotifications']]:
        """
        The request payload of the attachment notifications.
        """
        return pulumi.get(self, "notifications")

    @_builtins.property
    @pulumi.getter(name="profileAttachmentId")
    def profile_attachment_id(self) -> pulumi.Output[_builtins.str]:
        """
        The profile attachment ID.
        """
        return pulumi.get(self, "profile_attachment_id")

    @_builtins.property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the profile that is specified in the attachment.
        """
        return pulumi.get(self, "profile_id")

    @_builtins.property
    @pulumi.getter(name="sccProfileAttachmentId")
    def scc_profile_attachment_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "scc_profile_attachment_id")

    @_builtins.property
    @pulumi.getter
    def schedule(self) -> pulumi.Output[_builtins.str]:
        """
        The schedule of an attachment evaluation.
        """
        return pulumi.get(self, "schedule")

    @_builtins.property
    @pulumi.getter
    def scopes(self) -> pulumi.Output[Sequence['outputs.SccProfileAttachmentScope']]:
        """
        The scope/scopes to link the profile attachment.
        """
        return pulumi.get(self, "scopes")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of an attachment evaluation.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> pulumi.Output[_builtins.str]:
        """
        The user who updated the attachment.
        """
        return pulumi.get(self, "updated_by")

    @_builtins.property
    @pulumi.getter(name="updatedOn")
    def updated_on(self) -> pulumi.Output[_builtins.str]:
        """
        The date when the attachment was updated.
        """
        return pulumi.get(self, "updated_on")

