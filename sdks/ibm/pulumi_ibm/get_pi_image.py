# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetPiImageResult',
    'AwaitableGetPiImageResult',
    'get_pi_image',
    'get_pi_image_output',
]

@pulumi.output_type
class GetPiImageResult:
    """
    A collection of values returned by getPiImage.
    """
    def __init__(__self__, architecture=None, crn=None, hypervisor=None, id=None, image_type=None, operating_system=None, pi_cloud_instance_id=None, pi_image_name=None, size=None, source_checksum=None, state=None, storage_pool=None, storage_type=None, user_tags=None):
        if architecture and not isinstance(architecture, str):
            raise TypeError("Expected argument 'architecture' to be a str")
        pulumi.set(__self__, "architecture", architecture)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if hypervisor and not isinstance(hypervisor, str):
            raise TypeError("Expected argument 'hypervisor' to be a str")
        pulumi.set(__self__, "hypervisor", hypervisor)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image_type and not isinstance(image_type, str):
            raise TypeError("Expected argument 'image_type' to be a str")
        pulumi.set(__self__, "image_type", image_type)
        if operating_system and not isinstance(operating_system, str):
            raise TypeError("Expected argument 'operating_system' to be a str")
        pulumi.set(__self__, "operating_system", operating_system)
        if pi_cloud_instance_id and not isinstance(pi_cloud_instance_id, str):
            raise TypeError("Expected argument 'pi_cloud_instance_id' to be a str")
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_image_name and not isinstance(pi_image_name, str):
            raise TypeError("Expected argument 'pi_image_name' to be a str")
        pulumi.set(__self__, "pi_image_name", pi_image_name)
        if size and not isinstance(size, float):
            raise TypeError("Expected argument 'size' to be a float")
        pulumi.set(__self__, "size", size)
        if source_checksum and not isinstance(source_checksum, str):
            raise TypeError("Expected argument 'source_checksum' to be a str")
        pulumi.set(__self__, "source_checksum", source_checksum)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if storage_pool and not isinstance(storage_pool, str):
            raise TypeError("Expected argument 'storage_pool' to be a str")
        pulumi.set(__self__, "storage_pool", storage_pool)
        if storage_type and not isinstance(storage_type, str):
            raise TypeError("Expected argument 'storage_type' to be a str")
        pulumi.set(__self__, "storage_type", storage_type)
        if user_tags and not isinstance(user_tags, list):
            raise TypeError("Expected argument 'user_tags' to be a list")
        pulumi.set(__self__, "user_tags", user_tags)

    @_builtins.property
    @pulumi.getter
    def architecture(self) -> _builtins.str:
        return pulumi.get(self, "architecture")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def hypervisor(self) -> _builtins.str:
        return pulumi.get(self, "hypervisor")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="imageType")
    def image_type(self) -> _builtins.str:
        return pulumi.get(self, "image_type")

    @_builtins.property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> _builtins.str:
        return pulumi.get(self, "operating_system")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piImageName")
    def pi_image_name(self) -> _builtins.str:
        return pulumi.get(self, "pi_image_name")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.float:
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="sourceChecksum")
    def source_checksum(self) -> _builtins.str:
        return pulumi.get(self, "source_checksum")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="storagePool")
    def storage_pool(self) -> _builtins.str:
        return pulumi.get(self, "storage_pool")

    @_builtins.property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> _builtins.str:
        return pulumi.get(self, "storage_type")

    @_builtins.property
    @pulumi.getter(name="userTags")
    def user_tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "user_tags")


class AwaitableGetPiImageResult(GetPiImageResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPiImageResult(
            architecture=self.architecture,
            crn=self.crn,
            hypervisor=self.hypervisor,
            id=self.id,
            image_type=self.image_type,
            operating_system=self.operating_system,
            pi_cloud_instance_id=self.pi_cloud_instance_id,
            pi_image_name=self.pi_image_name,
            size=self.size,
            source_checksum=self.source_checksum,
            state=self.state,
            storage_pool=self.storage_pool,
            storage_type=self.storage_type,
            user_tags=self.user_tags)


def get_pi_image(id: Optional[_builtins.str] = None,
                 pi_cloud_instance_id: Optional[_builtins.str] = None,
                 pi_image_name: Optional[_builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPiImageResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piImageName'] = pi_image_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getPiImage:getPiImage', __args__, opts=opts, typ=GetPiImageResult, package_ref=_utilities.get_package()).value

    return AwaitableGetPiImageResult(
        architecture=pulumi.get(__ret__, 'architecture'),
        crn=pulumi.get(__ret__, 'crn'),
        hypervisor=pulumi.get(__ret__, 'hypervisor'),
        id=pulumi.get(__ret__, 'id'),
        image_type=pulumi.get(__ret__, 'image_type'),
        operating_system=pulumi.get(__ret__, 'operating_system'),
        pi_cloud_instance_id=pulumi.get(__ret__, 'pi_cloud_instance_id'),
        pi_image_name=pulumi.get(__ret__, 'pi_image_name'),
        size=pulumi.get(__ret__, 'size'),
        source_checksum=pulumi.get(__ret__, 'source_checksum'),
        state=pulumi.get(__ret__, 'state'),
        storage_pool=pulumi.get(__ret__, 'storage_pool'),
        storage_type=pulumi.get(__ret__, 'storage_type'),
        user_tags=pulumi.get(__ret__, 'user_tags'))
def get_pi_image_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                        pi_image_name: Optional[pulumi.Input[_builtins.str]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPiImageResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piImageName'] = pi_image_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getPiImage:getPiImage', __args__, opts=opts, typ=GetPiImageResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetPiImageResult(
        architecture=pulumi.get(__response__, 'architecture'),
        crn=pulumi.get(__response__, 'crn'),
        hypervisor=pulumi.get(__response__, 'hypervisor'),
        id=pulumi.get(__response__, 'id'),
        image_type=pulumi.get(__response__, 'image_type'),
        operating_system=pulumi.get(__response__, 'operating_system'),
        pi_cloud_instance_id=pulumi.get(__response__, 'pi_cloud_instance_id'),
        pi_image_name=pulumi.get(__response__, 'pi_image_name'),
        size=pulumi.get(__response__, 'size'),
        source_checksum=pulumi.get(__response__, 'source_checksum'),
        state=pulumi.get(__response__, 'state'),
        storage_pool=pulumi.get(__response__, 'storage_pool'),
        storage_type=pulumi.get(__response__, 'storage_type'),
        user_tags=pulumi.get(__response__, 'user_tags')))
