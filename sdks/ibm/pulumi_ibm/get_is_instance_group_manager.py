# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsInstanceGroupManagerResult',
    'AwaitableGetIsInstanceGroupManagerResult',
    'get_is_instance_group_manager',
    'get_is_instance_group_manager_output',
]

@pulumi.output_type
class GetIsInstanceGroupManagerResult:
    """
    A collection of values returned by getIsInstanceGroupManager.
    """
    def __init__(__self__, actions=None, aggregation_window=None, cooldown=None, id=None, instance_group=None, manager_id=None, manager_type=None, max_membership_count=None, min_membership_count=None, name=None, policies=None):
        if actions and not isinstance(actions, list):
            raise TypeError("Expected argument 'actions' to be a list")
        pulumi.set(__self__, "actions", actions)
        if aggregation_window and not isinstance(aggregation_window, float):
            raise TypeError("Expected argument 'aggregation_window' to be a float")
        pulumi.set(__self__, "aggregation_window", aggregation_window)
        if cooldown and not isinstance(cooldown, float):
            raise TypeError("Expected argument 'cooldown' to be a float")
        pulumi.set(__self__, "cooldown", cooldown)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_group and not isinstance(instance_group, str):
            raise TypeError("Expected argument 'instance_group' to be a str")
        pulumi.set(__self__, "instance_group", instance_group)
        if manager_id and not isinstance(manager_id, str):
            raise TypeError("Expected argument 'manager_id' to be a str")
        pulumi.set(__self__, "manager_id", manager_id)
        if manager_type and not isinstance(manager_type, str):
            raise TypeError("Expected argument 'manager_type' to be a str")
        pulumi.set(__self__, "manager_type", manager_type)
        if max_membership_count and not isinstance(max_membership_count, float):
            raise TypeError("Expected argument 'max_membership_count' to be a float")
        pulumi.set(__self__, "max_membership_count", max_membership_count)
        if min_membership_count and not isinstance(min_membership_count, float):
            raise TypeError("Expected argument 'min_membership_count' to be a float")
        pulumi.set(__self__, "min_membership_count", min_membership_count)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if policies and not isinstance(policies, list):
            raise TypeError("Expected argument 'policies' to be a list")
        pulumi.set(__self__, "policies", policies)

    @_builtins.property
    @pulumi.getter
    def actions(self) -> Sequence['outputs.GetIsInstanceGroupManagerActionResult']:
        return pulumi.get(self, "actions")

    @_builtins.property
    @pulumi.getter(name="aggregationWindow")
    def aggregation_window(self) -> _builtins.float:
        return pulumi.get(self, "aggregation_window")

    @_builtins.property
    @pulumi.getter
    def cooldown(self) -> _builtins.float:
        return pulumi.get(self, "cooldown")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceGroup")
    def instance_group(self) -> _builtins.str:
        return pulumi.get(self, "instance_group")

    @_builtins.property
    @pulumi.getter(name="managerId")
    def manager_id(self) -> _builtins.str:
        return pulumi.get(self, "manager_id")

    @_builtins.property
    @pulumi.getter(name="managerType")
    def manager_type(self) -> _builtins.str:
        return pulumi.get(self, "manager_type")

    @_builtins.property
    @pulumi.getter(name="maxMembershipCount")
    def max_membership_count(self) -> _builtins.float:
        return pulumi.get(self, "max_membership_count")

    @_builtins.property
    @pulumi.getter(name="minMembershipCount")
    def min_membership_count(self) -> _builtins.float:
        return pulumi.get(self, "min_membership_count")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def policies(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "policies")


class AwaitableGetIsInstanceGroupManagerResult(GetIsInstanceGroupManagerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsInstanceGroupManagerResult(
            actions=self.actions,
            aggregation_window=self.aggregation_window,
            cooldown=self.cooldown,
            id=self.id,
            instance_group=self.instance_group,
            manager_id=self.manager_id,
            manager_type=self.manager_type,
            max_membership_count=self.max_membership_count,
            min_membership_count=self.min_membership_count,
            name=self.name,
            policies=self.policies)


def get_is_instance_group_manager(id: Optional[_builtins.str] = None,
                                  instance_group: Optional[_builtins.str] = None,
                                  name: Optional[_builtins.str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsInstanceGroupManagerResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceGroup'] = instance_group
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsInstanceGroupManager:getIsInstanceGroupManager', __args__, opts=opts, typ=GetIsInstanceGroupManagerResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsInstanceGroupManagerResult(
        actions=pulumi.get(__ret__, 'actions'),
        aggregation_window=pulumi.get(__ret__, 'aggregation_window'),
        cooldown=pulumi.get(__ret__, 'cooldown'),
        id=pulumi.get(__ret__, 'id'),
        instance_group=pulumi.get(__ret__, 'instance_group'),
        manager_id=pulumi.get(__ret__, 'manager_id'),
        manager_type=pulumi.get(__ret__, 'manager_type'),
        max_membership_count=pulumi.get(__ret__, 'max_membership_count'),
        min_membership_count=pulumi.get(__ret__, 'min_membership_count'),
        name=pulumi.get(__ret__, 'name'),
        policies=pulumi.get(__ret__, 'policies'))
def get_is_instance_group_manager_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         instance_group: Optional[pulumi.Input[_builtins.str]] = None,
                                         name: Optional[pulumi.Input[_builtins.str]] = None,
                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsInstanceGroupManagerResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceGroup'] = instance_group
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsInstanceGroupManager:getIsInstanceGroupManager', __args__, opts=opts, typ=GetIsInstanceGroupManagerResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsInstanceGroupManagerResult(
        actions=pulumi.get(__response__, 'actions'),
        aggregation_window=pulumi.get(__response__, 'aggregation_window'),
        cooldown=pulumi.get(__response__, 'cooldown'),
        id=pulumi.get(__response__, 'id'),
        instance_group=pulumi.get(__response__, 'instance_group'),
        manager_id=pulumi.get(__response__, 'manager_id'),
        manager_type=pulumi.get(__response__, 'manager_type'),
        max_membership_count=pulumi.get(__response__, 'max_membership_count'),
        min_membership_count=pulumi.get(__response__, 'min_membership_count'),
        name=pulumi.get(__response__, 'name'),
        policies=pulumi.get(__response__, 'policies')))
