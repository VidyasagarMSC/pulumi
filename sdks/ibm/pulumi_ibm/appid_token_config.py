# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AppidTokenConfigArgs', 'AppidTokenConfig']

@pulumi.input_type
class AppidTokenConfigArgs:
    def __init__(__self__, *,
                 tenant_id: pulumi.Input[_builtins.str],
                 access_token_claims: Optional[pulumi.Input[Sequence[pulumi.Input['AppidTokenConfigAccessTokenClaimArgs']]]] = None,
                 access_token_expires_in: Optional[pulumi.Input[_builtins.float]] = None,
                 anonymous_access_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 anonymous_token_expires_in: Optional[pulumi.Input[_builtins.float]] = None,
                 appid_token_config_id: Optional[pulumi.Input[_builtins.str]] = None,
                 id_token_claims: Optional[pulumi.Input[Sequence[pulumi.Input['AppidTokenConfigIdTokenClaimArgs']]]] = None,
                 refresh_token_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 refresh_token_expires_in: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a AppidTokenConfig resource.
        :param pulumi.Input[_builtins.str] tenant_id: The service `tenantId`
        :param pulumi.Input[Sequence[pulumi.Input['AppidTokenConfigAccessTokenClaimArgs']]] access_token_claims: A set of objects that are created when claims that are related to access tokens are mapped
        :param pulumi.Input[_builtins.float] access_token_expires_in: The length of time for which access tokens are valid in seconds
        :param pulumi.Input[_builtins.bool] anonymous_access_enabled: The length of time for which an anonymous token is valid in seconds
        :param pulumi.Input[Sequence[pulumi.Input['AppidTokenConfigIdTokenClaimArgs']]] id_token_claims: A set of objects that are created when claims that are related to identity tokens are mapped
        :param pulumi.Input[_builtins.float] refresh_token_expires_in: The length of time for which refresh tokens are valid in seconds
        """
        pulumi.set(__self__, "tenant_id", tenant_id)
        if access_token_claims is not None:
            pulumi.set(__self__, "access_token_claims", access_token_claims)
        if access_token_expires_in is not None:
            pulumi.set(__self__, "access_token_expires_in", access_token_expires_in)
        if anonymous_access_enabled is not None:
            pulumi.set(__self__, "anonymous_access_enabled", anonymous_access_enabled)
        if anonymous_token_expires_in is not None:
            pulumi.set(__self__, "anonymous_token_expires_in", anonymous_token_expires_in)
        if appid_token_config_id is not None:
            pulumi.set(__self__, "appid_token_config_id", appid_token_config_id)
        if id_token_claims is not None:
            pulumi.set(__self__, "id_token_claims", id_token_claims)
        if refresh_token_enabled is not None:
            pulumi.set(__self__, "refresh_token_enabled", refresh_token_enabled)
        if refresh_token_expires_in is not None:
            pulumi.set(__self__, "refresh_token_expires_in", refresh_token_expires_in)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[_builtins.str]:
        """
        The service `tenantId`
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "tenant_id", value)

    @_builtins.property
    @pulumi.getter(name="accessTokenClaims")
    def access_token_claims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppidTokenConfigAccessTokenClaimArgs']]]]:
        """
        A set of objects that are created when claims that are related to access tokens are mapped
        """
        return pulumi.get(self, "access_token_claims")

    @access_token_claims.setter
    def access_token_claims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppidTokenConfigAccessTokenClaimArgs']]]]):
        pulumi.set(self, "access_token_claims", value)

    @_builtins.property
    @pulumi.getter(name="accessTokenExpiresIn")
    def access_token_expires_in(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The length of time for which access tokens are valid in seconds
        """
        return pulumi.get(self, "access_token_expires_in")

    @access_token_expires_in.setter
    def access_token_expires_in(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "access_token_expires_in", value)

    @_builtins.property
    @pulumi.getter(name="anonymousAccessEnabled")
    def anonymous_access_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The length of time for which an anonymous token is valid in seconds
        """
        return pulumi.get(self, "anonymous_access_enabled")

    @anonymous_access_enabled.setter
    def anonymous_access_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "anonymous_access_enabled", value)

    @_builtins.property
    @pulumi.getter(name="anonymousTokenExpiresIn")
    def anonymous_token_expires_in(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "anonymous_token_expires_in")

    @anonymous_token_expires_in.setter
    def anonymous_token_expires_in(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "anonymous_token_expires_in", value)

    @_builtins.property
    @pulumi.getter(name="appidTokenConfigId")
    def appid_token_config_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "appid_token_config_id")

    @appid_token_config_id.setter
    def appid_token_config_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "appid_token_config_id", value)

    @_builtins.property
    @pulumi.getter(name="idTokenClaims")
    def id_token_claims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppidTokenConfigIdTokenClaimArgs']]]]:
        """
        A set of objects that are created when claims that are related to identity tokens are mapped
        """
        return pulumi.get(self, "id_token_claims")

    @id_token_claims.setter
    def id_token_claims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppidTokenConfigIdTokenClaimArgs']]]]):
        pulumi.set(self, "id_token_claims", value)

    @_builtins.property
    @pulumi.getter(name="refreshTokenEnabled")
    def refresh_token_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "refresh_token_enabled")

    @refresh_token_enabled.setter
    def refresh_token_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "refresh_token_enabled", value)

    @_builtins.property
    @pulumi.getter(name="refreshTokenExpiresIn")
    def refresh_token_expires_in(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The length of time for which refresh tokens are valid in seconds
        """
        return pulumi.get(self, "refresh_token_expires_in")

    @refresh_token_expires_in.setter
    def refresh_token_expires_in(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "refresh_token_expires_in", value)


@pulumi.input_type
class _AppidTokenConfigState:
    def __init__(__self__, *,
                 access_token_claims: Optional[pulumi.Input[Sequence[pulumi.Input['AppidTokenConfigAccessTokenClaimArgs']]]] = None,
                 access_token_expires_in: Optional[pulumi.Input[_builtins.float]] = None,
                 anonymous_access_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 anonymous_token_expires_in: Optional[pulumi.Input[_builtins.float]] = None,
                 appid_token_config_id: Optional[pulumi.Input[_builtins.str]] = None,
                 id_token_claims: Optional[pulumi.Input[Sequence[pulumi.Input['AppidTokenConfigIdTokenClaimArgs']]]] = None,
                 refresh_token_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 refresh_token_expires_in: Optional[pulumi.Input[_builtins.float]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AppidTokenConfig resources.
        :param pulumi.Input[Sequence[pulumi.Input['AppidTokenConfigAccessTokenClaimArgs']]] access_token_claims: A set of objects that are created when claims that are related to access tokens are mapped
        :param pulumi.Input[_builtins.float] access_token_expires_in: The length of time for which access tokens are valid in seconds
        :param pulumi.Input[_builtins.bool] anonymous_access_enabled: The length of time for which an anonymous token is valid in seconds
        :param pulumi.Input[Sequence[pulumi.Input['AppidTokenConfigIdTokenClaimArgs']]] id_token_claims: A set of objects that are created when claims that are related to identity tokens are mapped
        :param pulumi.Input[_builtins.float] refresh_token_expires_in: The length of time for which refresh tokens are valid in seconds
        :param pulumi.Input[_builtins.str] tenant_id: The service `tenantId`
        """
        if access_token_claims is not None:
            pulumi.set(__self__, "access_token_claims", access_token_claims)
        if access_token_expires_in is not None:
            pulumi.set(__self__, "access_token_expires_in", access_token_expires_in)
        if anonymous_access_enabled is not None:
            pulumi.set(__self__, "anonymous_access_enabled", anonymous_access_enabled)
        if anonymous_token_expires_in is not None:
            pulumi.set(__self__, "anonymous_token_expires_in", anonymous_token_expires_in)
        if appid_token_config_id is not None:
            pulumi.set(__self__, "appid_token_config_id", appid_token_config_id)
        if id_token_claims is not None:
            pulumi.set(__self__, "id_token_claims", id_token_claims)
        if refresh_token_enabled is not None:
            pulumi.set(__self__, "refresh_token_enabled", refresh_token_enabled)
        if refresh_token_expires_in is not None:
            pulumi.set(__self__, "refresh_token_expires_in", refresh_token_expires_in)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @_builtins.property
    @pulumi.getter(name="accessTokenClaims")
    def access_token_claims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppidTokenConfigAccessTokenClaimArgs']]]]:
        """
        A set of objects that are created when claims that are related to access tokens are mapped
        """
        return pulumi.get(self, "access_token_claims")

    @access_token_claims.setter
    def access_token_claims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppidTokenConfigAccessTokenClaimArgs']]]]):
        pulumi.set(self, "access_token_claims", value)

    @_builtins.property
    @pulumi.getter(name="accessTokenExpiresIn")
    def access_token_expires_in(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The length of time for which access tokens are valid in seconds
        """
        return pulumi.get(self, "access_token_expires_in")

    @access_token_expires_in.setter
    def access_token_expires_in(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "access_token_expires_in", value)

    @_builtins.property
    @pulumi.getter(name="anonymousAccessEnabled")
    def anonymous_access_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The length of time for which an anonymous token is valid in seconds
        """
        return pulumi.get(self, "anonymous_access_enabled")

    @anonymous_access_enabled.setter
    def anonymous_access_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "anonymous_access_enabled", value)

    @_builtins.property
    @pulumi.getter(name="anonymousTokenExpiresIn")
    def anonymous_token_expires_in(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "anonymous_token_expires_in")

    @anonymous_token_expires_in.setter
    def anonymous_token_expires_in(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "anonymous_token_expires_in", value)

    @_builtins.property
    @pulumi.getter(name="appidTokenConfigId")
    def appid_token_config_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "appid_token_config_id")

    @appid_token_config_id.setter
    def appid_token_config_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "appid_token_config_id", value)

    @_builtins.property
    @pulumi.getter(name="idTokenClaims")
    def id_token_claims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppidTokenConfigIdTokenClaimArgs']]]]:
        """
        A set of objects that are created when claims that are related to identity tokens are mapped
        """
        return pulumi.get(self, "id_token_claims")

    @id_token_claims.setter
    def id_token_claims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppidTokenConfigIdTokenClaimArgs']]]]):
        pulumi.set(self, "id_token_claims", value)

    @_builtins.property
    @pulumi.getter(name="refreshTokenEnabled")
    def refresh_token_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "refresh_token_enabled")

    @refresh_token_enabled.setter
    def refresh_token_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "refresh_token_enabled", value)

    @_builtins.property
    @pulumi.getter(name="refreshTokenExpiresIn")
    def refresh_token_expires_in(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The length of time for which refresh tokens are valid in seconds
        """
        return pulumi.get(self, "refresh_token_expires_in")

    @refresh_token_expires_in.setter
    def refresh_token_expires_in(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "refresh_token_expires_in", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The service `tenantId`
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tenant_id", value)


@pulumi.type_token("ibm:index/appidTokenConfig:AppidTokenConfig")
class AppidTokenConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_token_claims: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppidTokenConfigAccessTokenClaimArgs', 'AppidTokenConfigAccessTokenClaimArgsDict']]]]] = None,
                 access_token_expires_in: Optional[pulumi.Input[_builtins.float]] = None,
                 anonymous_access_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 anonymous_token_expires_in: Optional[pulumi.Input[_builtins.float]] = None,
                 appid_token_config_id: Optional[pulumi.Input[_builtins.str]] = None,
                 id_token_claims: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppidTokenConfigIdTokenClaimArgs', 'AppidTokenConfigIdTokenClaimArgsDict']]]]] = None,
                 refresh_token_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 refresh_token_expires_in: Optional[pulumi.Input[_builtins.float]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a AppidTokenConfig resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AppidTokenConfigAccessTokenClaimArgs', 'AppidTokenConfigAccessTokenClaimArgsDict']]]] access_token_claims: A set of objects that are created when claims that are related to access tokens are mapped
        :param pulumi.Input[_builtins.float] access_token_expires_in: The length of time for which access tokens are valid in seconds
        :param pulumi.Input[_builtins.bool] anonymous_access_enabled: The length of time for which an anonymous token is valid in seconds
        :param pulumi.Input[Sequence[pulumi.Input[Union['AppidTokenConfigIdTokenClaimArgs', 'AppidTokenConfigIdTokenClaimArgsDict']]]] id_token_claims: A set of objects that are created when claims that are related to identity tokens are mapped
        :param pulumi.Input[_builtins.float] refresh_token_expires_in: The length of time for which refresh tokens are valid in seconds
        :param pulumi.Input[_builtins.str] tenant_id: The service `tenantId`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppidTokenConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AppidTokenConfig resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AppidTokenConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppidTokenConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_token_claims: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppidTokenConfigAccessTokenClaimArgs', 'AppidTokenConfigAccessTokenClaimArgsDict']]]]] = None,
                 access_token_expires_in: Optional[pulumi.Input[_builtins.float]] = None,
                 anonymous_access_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 anonymous_token_expires_in: Optional[pulumi.Input[_builtins.float]] = None,
                 appid_token_config_id: Optional[pulumi.Input[_builtins.str]] = None,
                 id_token_claims: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppidTokenConfigIdTokenClaimArgs', 'AppidTokenConfigIdTokenClaimArgsDict']]]]] = None,
                 refresh_token_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 refresh_token_expires_in: Optional[pulumi.Input[_builtins.float]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppidTokenConfigArgs.__new__(AppidTokenConfigArgs)

            __props__.__dict__["access_token_claims"] = access_token_claims
            __props__.__dict__["access_token_expires_in"] = access_token_expires_in
            __props__.__dict__["anonymous_access_enabled"] = anonymous_access_enabled
            __props__.__dict__["anonymous_token_expires_in"] = anonymous_token_expires_in
            __props__.__dict__["appid_token_config_id"] = appid_token_config_id
            __props__.__dict__["id_token_claims"] = id_token_claims
            __props__.__dict__["refresh_token_enabled"] = refresh_token_enabled
            __props__.__dict__["refresh_token_expires_in"] = refresh_token_expires_in
            if tenant_id is None and not opts.urn:
                raise TypeError("Missing required property 'tenant_id'")
            __props__.__dict__["tenant_id"] = tenant_id
        super(AppidTokenConfig, __self__).__init__(
            'ibm:index/appidTokenConfig:AppidTokenConfig',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_token_claims: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppidTokenConfigAccessTokenClaimArgs', 'AppidTokenConfigAccessTokenClaimArgsDict']]]]] = None,
            access_token_expires_in: Optional[pulumi.Input[_builtins.float]] = None,
            anonymous_access_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            anonymous_token_expires_in: Optional[pulumi.Input[_builtins.float]] = None,
            appid_token_config_id: Optional[pulumi.Input[_builtins.str]] = None,
            id_token_claims: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppidTokenConfigIdTokenClaimArgs', 'AppidTokenConfigIdTokenClaimArgsDict']]]]] = None,
            refresh_token_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            refresh_token_expires_in: Optional[pulumi.Input[_builtins.float]] = None,
            tenant_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'AppidTokenConfig':
        """
        Get an existing AppidTokenConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AppidTokenConfigAccessTokenClaimArgs', 'AppidTokenConfigAccessTokenClaimArgsDict']]]] access_token_claims: A set of objects that are created when claims that are related to access tokens are mapped
        :param pulumi.Input[_builtins.float] access_token_expires_in: The length of time for which access tokens are valid in seconds
        :param pulumi.Input[_builtins.bool] anonymous_access_enabled: The length of time for which an anonymous token is valid in seconds
        :param pulumi.Input[Sequence[pulumi.Input[Union['AppidTokenConfigIdTokenClaimArgs', 'AppidTokenConfigIdTokenClaimArgsDict']]]] id_token_claims: A set of objects that are created when claims that are related to identity tokens are mapped
        :param pulumi.Input[_builtins.float] refresh_token_expires_in: The length of time for which refresh tokens are valid in seconds
        :param pulumi.Input[_builtins.str] tenant_id: The service `tenantId`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppidTokenConfigState.__new__(_AppidTokenConfigState)

        __props__.__dict__["access_token_claims"] = access_token_claims
        __props__.__dict__["access_token_expires_in"] = access_token_expires_in
        __props__.__dict__["anonymous_access_enabled"] = anonymous_access_enabled
        __props__.__dict__["anonymous_token_expires_in"] = anonymous_token_expires_in
        __props__.__dict__["appid_token_config_id"] = appid_token_config_id
        __props__.__dict__["id_token_claims"] = id_token_claims
        __props__.__dict__["refresh_token_enabled"] = refresh_token_enabled
        __props__.__dict__["refresh_token_expires_in"] = refresh_token_expires_in
        __props__.__dict__["tenant_id"] = tenant_id
        return AppidTokenConfig(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessTokenClaims")
    def access_token_claims(self) -> pulumi.Output[Optional[Sequence['outputs.AppidTokenConfigAccessTokenClaim']]]:
        """
        A set of objects that are created when claims that are related to access tokens are mapped
        """
        return pulumi.get(self, "access_token_claims")

    @_builtins.property
    @pulumi.getter(name="accessTokenExpiresIn")
    def access_token_expires_in(self) -> pulumi.Output[_builtins.float]:
        """
        The length of time for which access tokens are valid in seconds
        """
        return pulumi.get(self, "access_token_expires_in")

    @_builtins.property
    @pulumi.getter(name="anonymousAccessEnabled")
    def anonymous_access_enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        The length of time for which an anonymous token is valid in seconds
        """
        return pulumi.get(self, "anonymous_access_enabled")

    @_builtins.property
    @pulumi.getter(name="anonymousTokenExpiresIn")
    def anonymous_token_expires_in(self) -> pulumi.Output[Optional[_builtins.float]]:
        return pulumi.get(self, "anonymous_token_expires_in")

    @_builtins.property
    @pulumi.getter(name="appidTokenConfigId")
    def appid_token_config_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "appid_token_config_id")

    @_builtins.property
    @pulumi.getter(name="idTokenClaims")
    def id_token_claims(self) -> pulumi.Output[Optional[Sequence['outputs.AppidTokenConfigIdTokenClaim']]]:
        """
        A set of objects that are created when claims that are related to identity tokens are mapped
        """
        return pulumi.get(self, "id_token_claims")

    @_builtins.property
    @pulumi.getter(name="refreshTokenEnabled")
    def refresh_token_enabled(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "refresh_token_enabled")

    @_builtins.property
    @pulumi.getter(name="refreshTokenExpiresIn")
    def refresh_token_expires_in(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        The length of time for which refresh tokens are valid in seconds
        """
        return pulumi.get(self, "refresh_token_expires_in")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Output[_builtins.str]:
        """
        The service `tenantId`
        """
        return pulumi.get(self, "tenant_id")

