# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetDb2Result',
    'AwaitableGetDb2Result',
    'get_db2',
    'get_db2_output',
]

@pulumi.output_type
class GetDb2Result:
    """
    A collection of values returned by getDb2.
    """
    def __init__(__self__, backup_location=None, crn=None, disk_encryption_crn=None, disk_encryption_instance_crn=None, extensions=None, guid=None, high_availability=None, id=None, identifier=None, instance_type=None, location=None, name=None, onetime_credentials=None, oracle_compatibility=None, parameters_json=None, plan=None, resource_controller_url=None, resource_crn=None, resource_group_id=None, resource_group_name=None, resource_name=None, resource_status=None, service=None, status=None, subscription_id=None, tags=None):
        if backup_location and not isinstance(backup_location, str):
            raise TypeError("Expected argument 'backup_location' to be a str")
        pulumi.set(__self__, "backup_location", backup_location)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if disk_encryption_crn and not isinstance(disk_encryption_crn, str):
            raise TypeError("Expected argument 'disk_encryption_crn' to be a str")
        pulumi.set(__self__, "disk_encryption_crn", disk_encryption_crn)
        if disk_encryption_instance_crn and not isinstance(disk_encryption_instance_crn, str):
            raise TypeError("Expected argument 'disk_encryption_instance_crn' to be a str")
        pulumi.set(__self__, "disk_encryption_instance_crn", disk_encryption_instance_crn)
        if extensions and not isinstance(extensions, dict):
            raise TypeError("Expected argument 'extensions' to be a dict")
        pulumi.set(__self__, "extensions", extensions)
        if guid and not isinstance(guid, str):
            raise TypeError("Expected argument 'guid' to be a str")
        pulumi.set(__self__, "guid", guid)
        if high_availability and not isinstance(high_availability, str):
            raise TypeError("Expected argument 'high_availability' to be a str")
        pulumi.set(__self__, "high_availability", high_availability)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identifier and not isinstance(identifier, str):
            raise TypeError("Expected argument 'identifier' to be a str")
        pulumi.set(__self__, "identifier", identifier)
        if instance_type and not isinstance(instance_type, str):
            raise TypeError("Expected argument 'instance_type' to be a str")
        pulumi.set(__self__, "instance_type", instance_type)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if onetime_credentials and not isinstance(onetime_credentials, bool):
            raise TypeError("Expected argument 'onetime_credentials' to be a bool")
        pulumi.set(__self__, "onetime_credentials", onetime_credentials)
        if oracle_compatibility and not isinstance(oracle_compatibility, str):
            raise TypeError("Expected argument 'oracle_compatibility' to be a str")
        pulumi.set(__self__, "oracle_compatibility", oracle_compatibility)
        if parameters_json and not isinstance(parameters_json, str):
            raise TypeError("Expected argument 'parameters_json' to be a str")
        pulumi.set(__self__, "parameters_json", parameters_json)
        if plan and not isinstance(plan, str):
            raise TypeError("Expected argument 'plan' to be a str")
        pulumi.set(__self__, "plan", plan)
        if resource_controller_url and not isinstance(resource_controller_url, str):
            raise TypeError("Expected argument 'resource_controller_url' to be a str")
        pulumi.set(__self__, "resource_controller_url", resource_controller_url)
        if resource_crn and not isinstance(resource_crn, str):
            raise TypeError("Expected argument 'resource_crn' to be a str")
        pulumi.set(__self__, "resource_crn", resource_crn)
        if resource_group_id and not isinstance(resource_group_id, str):
            raise TypeError("Expected argument 'resource_group_id' to be a str")
        pulumi.set(__self__, "resource_group_id", resource_group_id)
        if resource_group_name and not isinstance(resource_group_name, str):
            raise TypeError("Expected argument 'resource_group_name' to be a str")
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if resource_name and not isinstance(resource_name, str):
            raise TypeError("Expected argument 'resource_name' to be a str")
        pulumi.set(__self__, "resource_name", resource_name)
        if resource_status and not isinstance(resource_status, str):
            raise TypeError("Expected argument 'resource_status' to be a str")
        pulumi.set(__self__, "resource_status", resource_status)
        if service and not isinstance(service, str):
            raise TypeError("Expected argument 'service' to be a str")
        pulumi.set(__self__, "service", service)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if subscription_id and not isinstance(subscription_id, str):
            raise TypeError("Expected argument 'subscription_id' to be a str")
        pulumi.set(__self__, "subscription_id", subscription_id)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="backupLocation")
    def backup_location(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "backup_location")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="diskEncryptionCrn")
    def disk_encryption_crn(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "disk_encryption_crn")

    @_builtins.property
    @pulumi.getter(name="diskEncryptionInstanceCrn")
    def disk_encryption_instance_crn(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "disk_encryption_instance_crn")

    @_builtins.property
    @pulumi.getter
    def extensions(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "extensions")

    @_builtins.property
    @pulumi.getter
    def guid(self) -> _builtins.str:
        return pulumi.get(self, "guid")

    @_builtins.property
    @pulumi.getter(name="highAvailability")
    def high_availability(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "high_availability")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def identifier(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "identifier")

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "instance_type")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="onetimeCredentials")
    def onetime_credentials(self) -> _builtins.bool:
        return pulumi.get(self, "onetime_credentials")

    @_builtins.property
    @pulumi.getter(name="oracleCompatibility")
    def oracle_compatibility(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "oracle_compatibility")

    @_builtins.property
    @pulumi.getter(name="parametersJson")
    def parameters_json(self) -> _builtins.str:
        return pulumi.get(self, "parameters_json")

    @_builtins.property
    @pulumi.getter
    def plan(self) -> _builtins.str:
        return pulumi.get(self, "plan")

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> _builtins.str:
        return pulumi.get(self, "resource_controller_url")

    @_builtins.property
    @pulumi.getter(name="resourceCrn")
    def resource_crn(self) -> _builtins.str:
        return pulumi.get(self, "resource_crn")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> _builtins.str:
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> _builtins.str:
        return pulumi.get(self, "resource_group_name")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceStatus")
    def resource_status(self) -> _builtins.str:
        return pulumi.get(self, "resource_status")

    @_builtins.property
    @pulumi.getter
    def service(self) -> _builtins.str:
        return pulumi.get(self, "service")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "subscription_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "tags")


class AwaitableGetDb2Result(GetDb2Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDb2Result(
            backup_location=self.backup_location,
            crn=self.crn,
            disk_encryption_crn=self.disk_encryption_crn,
            disk_encryption_instance_crn=self.disk_encryption_instance_crn,
            extensions=self.extensions,
            guid=self.guid,
            high_availability=self.high_availability,
            id=self.id,
            identifier=self.identifier,
            instance_type=self.instance_type,
            location=self.location,
            name=self.name,
            onetime_credentials=self.onetime_credentials,
            oracle_compatibility=self.oracle_compatibility,
            parameters_json=self.parameters_json,
            plan=self.plan,
            resource_controller_url=self.resource_controller_url,
            resource_crn=self.resource_crn,
            resource_group_id=self.resource_group_id,
            resource_group_name=self.resource_group_name,
            resource_name=self.resource_name,
            resource_status=self.resource_status,
            service=self.service,
            status=self.status,
            subscription_id=self.subscription_id,
            tags=self.tags)


def get_db2(backup_location: Optional[_builtins.str] = None,
            disk_encryption_crn: Optional[_builtins.str] = None,
            disk_encryption_instance_crn: Optional[_builtins.str] = None,
            high_availability: Optional[_builtins.str] = None,
            id: Optional[_builtins.str] = None,
            identifier: Optional[_builtins.str] = None,
            instance_type: Optional[_builtins.str] = None,
            location: Optional[_builtins.str] = None,
            name: Optional[_builtins.str] = None,
            oracle_compatibility: Optional[_builtins.str] = None,
            resource_group_id: Optional[_builtins.str] = None,
            service: Optional[_builtins.str] = None,
            subscription_id: Optional[_builtins.str] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDb2Result:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['backupLocation'] = backup_location
    __args__['diskEncryptionCrn'] = disk_encryption_crn
    __args__['diskEncryptionInstanceCrn'] = disk_encryption_instance_crn
    __args__['highAvailability'] = high_availability
    __args__['id'] = id
    __args__['identifier'] = identifier
    __args__['instanceType'] = instance_type
    __args__['location'] = location
    __args__['name'] = name
    __args__['oracleCompatibility'] = oracle_compatibility
    __args__['resourceGroupId'] = resource_group_id
    __args__['service'] = service
    __args__['subscriptionId'] = subscription_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getDb2:getDb2', __args__, opts=opts, typ=GetDb2Result, package_ref=_utilities.get_package()).value

    return AwaitableGetDb2Result(
        backup_location=pulumi.get(__ret__, 'backup_location'),
        crn=pulumi.get(__ret__, 'crn'),
        disk_encryption_crn=pulumi.get(__ret__, 'disk_encryption_crn'),
        disk_encryption_instance_crn=pulumi.get(__ret__, 'disk_encryption_instance_crn'),
        extensions=pulumi.get(__ret__, 'extensions'),
        guid=pulumi.get(__ret__, 'guid'),
        high_availability=pulumi.get(__ret__, 'high_availability'),
        id=pulumi.get(__ret__, 'id'),
        identifier=pulumi.get(__ret__, 'identifier'),
        instance_type=pulumi.get(__ret__, 'instance_type'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        onetime_credentials=pulumi.get(__ret__, 'onetime_credentials'),
        oracle_compatibility=pulumi.get(__ret__, 'oracle_compatibility'),
        parameters_json=pulumi.get(__ret__, 'parameters_json'),
        plan=pulumi.get(__ret__, 'plan'),
        resource_controller_url=pulumi.get(__ret__, 'resource_controller_url'),
        resource_crn=pulumi.get(__ret__, 'resource_crn'),
        resource_group_id=pulumi.get(__ret__, 'resource_group_id'),
        resource_group_name=pulumi.get(__ret__, 'resource_group_name'),
        resource_name=pulumi.get(__ret__, 'resource_name'),
        resource_status=pulumi.get(__ret__, 'resource_status'),
        service=pulumi.get(__ret__, 'service'),
        status=pulumi.get(__ret__, 'status'),
        subscription_id=pulumi.get(__ret__, 'subscription_id'),
        tags=pulumi.get(__ret__, 'tags'))
def get_db2_output(backup_location: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                   disk_encryption_crn: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                   disk_encryption_instance_crn: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                   high_availability: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                   id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                   identifier: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                   instance_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                   location: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                   name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                   oracle_compatibility: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                   resource_group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                   service: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                   subscription_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDb2Result]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['backupLocation'] = backup_location
    __args__['diskEncryptionCrn'] = disk_encryption_crn
    __args__['diskEncryptionInstanceCrn'] = disk_encryption_instance_crn
    __args__['highAvailability'] = high_availability
    __args__['id'] = id
    __args__['identifier'] = identifier
    __args__['instanceType'] = instance_type
    __args__['location'] = location
    __args__['name'] = name
    __args__['oracleCompatibility'] = oracle_compatibility
    __args__['resourceGroupId'] = resource_group_id
    __args__['service'] = service
    __args__['subscriptionId'] = subscription_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getDb2:getDb2', __args__, opts=opts, typ=GetDb2Result, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetDb2Result(
        backup_location=pulumi.get(__response__, 'backup_location'),
        crn=pulumi.get(__response__, 'crn'),
        disk_encryption_crn=pulumi.get(__response__, 'disk_encryption_crn'),
        disk_encryption_instance_crn=pulumi.get(__response__, 'disk_encryption_instance_crn'),
        extensions=pulumi.get(__response__, 'extensions'),
        guid=pulumi.get(__response__, 'guid'),
        high_availability=pulumi.get(__response__, 'high_availability'),
        id=pulumi.get(__response__, 'id'),
        identifier=pulumi.get(__response__, 'identifier'),
        instance_type=pulumi.get(__response__, 'instance_type'),
        location=pulumi.get(__response__, 'location'),
        name=pulumi.get(__response__, 'name'),
        onetime_credentials=pulumi.get(__response__, 'onetime_credentials'),
        oracle_compatibility=pulumi.get(__response__, 'oracle_compatibility'),
        parameters_json=pulumi.get(__response__, 'parameters_json'),
        plan=pulumi.get(__response__, 'plan'),
        resource_controller_url=pulumi.get(__response__, 'resource_controller_url'),
        resource_crn=pulumi.get(__response__, 'resource_crn'),
        resource_group_id=pulumi.get(__response__, 'resource_group_id'),
        resource_group_name=pulumi.get(__response__, 'resource_group_name'),
        resource_name=pulumi.get(__response__, 'resource_name'),
        resource_status=pulumi.get(__response__, 'resource_status'),
        service=pulumi.get(__response__, 'service'),
        status=pulumi.get(__response__, 'status'),
        subscription_id=pulumi.get(__response__, 'subscription_id'),
        tags=pulumi.get(__response__, 'tags')))
