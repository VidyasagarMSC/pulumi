# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetDnsPermittedNetworksResult',
    'AwaitableGetDnsPermittedNetworksResult',
    'get_dns_permitted_networks',
    'get_dns_permitted_networks_output',
]

@pulumi.output_type
class GetDnsPermittedNetworksResult:
    """
    A collection of values returned by getDnsPermittedNetworks.
    """
    def __init__(__self__, dns_permitted_networks=None, id=None, instance_id=None, zone_id=None):
        if dns_permitted_networks and not isinstance(dns_permitted_networks, list):
            raise TypeError("Expected argument 'dns_permitted_networks' to be a list")
        pulumi.set(__self__, "dns_permitted_networks", dns_permitted_networks)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if zone_id and not isinstance(zone_id, str):
            raise TypeError("Expected argument 'zone_id' to be a str")
        pulumi.set(__self__, "zone_id", zone_id)

    @_builtins.property
    @pulumi.getter(name="dnsPermittedNetworks")
    def dns_permitted_networks(self) -> Sequence['outputs.GetDnsPermittedNetworksDnsPermittedNetworkResult']:
        return pulumi.get(self, "dns_permitted_networks")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> _builtins.str:
        return pulumi.get(self, "zone_id")


class AwaitableGetDnsPermittedNetworksResult(GetDnsPermittedNetworksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDnsPermittedNetworksResult(
            dns_permitted_networks=self.dns_permitted_networks,
            id=self.id,
            instance_id=self.instance_id,
            zone_id=self.zone_id)


def get_dns_permitted_networks(id: Optional[_builtins.str] = None,
                               instance_id: Optional[_builtins.str] = None,
                               zone_id: Optional[_builtins.str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDnsPermittedNetworksResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['zoneId'] = zone_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getDnsPermittedNetworks:getDnsPermittedNetworks', __args__, opts=opts, typ=GetDnsPermittedNetworksResult, package_ref=_utilities.get_package()).value

    return AwaitableGetDnsPermittedNetworksResult(
        dns_permitted_networks=pulumi.get(__ret__, 'dns_permitted_networks'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        zone_id=pulumi.get(__ret__, 'zone_id'))
def get_dns_permitted_networks_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                      zone_id: Optional[pulumi.Input[_builtins.str]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDnsPermittedNetworksResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['zoneId'] = zone_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getDnsPermittedNetworks:getDnsPermittedNetworks', __args__, opts=opts, typ=GetDnsPermittedNetworksResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetDnsPermittedNetworksResult(
        dns_permitted_networks=pulumi.get(__response__, 'dns_permitted_networks'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        zone_id=pulumi.get(__response__, 'zone_id')))
