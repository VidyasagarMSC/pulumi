# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetLogsViewResult',
    'AwaitableGetLogsViewResult',
    'get_logs_view',
    'get_logs_view_output',
]

@pulumi.output_type
class GetLogsViewResult:
    """
    A collection of values returned by getLogsView.
    """
    def __init__(__self__, endpoint_type=None, filters=None, folder_id=None, id=None, instance_id=None, logs_view_id=None, name=None, region=None, search_queries=None, time_selections=None):
        if endpoint_type and not isinstance(endpoint_type, str):
            raise TypeError("Expected argument 'endpoint_type' to be a str")
        pulumi.set(__self__, "endpoint_type", endpoint_type)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if folder_id and not isinstance(folder_id, str):
            raise TypeError("Expected argument 'folder_id' to be a str")
        pulumi.set(__self__, "folder_id", folder_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if logs_view_id and not isinstance(logs_view_id, float):
            raise TypeError("Expected argument 'logs_view_id' to be a float")
        pulumi.set(__self__, "logs_view_id", logs_view_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if search_queries and not isinstance(search_queries, list):
            raise TypeError("Expected argument 'search_queries' to be a list")
        pulumi.set(__self__, "search_queries", search_queries)
        if time_selections and not isinstance(time_selections, list):
            raise TypeError("Expected argument 'time_selections' to be a list")
        pulumi.set(__self__, "time_selections", time_selections)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter
    def filters(self) -> Sequence['outputs.GetLogsViewFilterResult']:
        return pulumi.get(self, "filters")

    @_builtins.property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> _builtins.str:
        return pulumi.get(self, "folder_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="logsViewId")
    def logs_view_id(self) -> _builtins.float:
        return pulumi.get(self, "logs_view_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="searchQueries")
    def search_queries(self) -> Sequence['outputs.GetLogsViewSearchQueryResult']:
        return pulumi.get(self, "search_queries")

    @_builtins.property
    @pulumi.getter(name="timeSelections")
    def time_selections(self) -> Sequence['outputs.GetLogsViewTimeSelectionResult']:
        return pulumi.get(self, "time_selections")


class AwaitableGetLogsViewResult(GetLogsViewResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLogsViewResult(
            endpoint_type=self.endpoint_type,
            filters=self.filters,
            folder_id=self.folder_id,
            id=self.id,
            instance_id=self.instance_id,
            logs_view_id=self.logs_view_id,
            name=self.name,
            region=self.region,
            search_queries=self.search_queries,
            time_selections=self.time_selections)


def get_logs_view(endpoint_type: Optional[_builtins.str] = None,
                  id: Optional[_builtins.str] = None,
                  instance_id: Optional[_builtins.str] = None,
                  logs_view_id: Optional[_builtins.float] = None,
                  region: Optional[_builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLogsViewResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['logsViewId'] = logs_view_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getLogsView:getLogsView', __args__, opts=opts, typ=GetLogsViewResult, package_ref=_utilities.get_package()).value

    return AwaitableGetLogsViewResult(
        endpoint_type=pulumi.get(__ret__, 'endpoint_type'),
        filters=pulumi.get(__ret__, 'filters'),
        folder_id=pulumi.get(__ret__, 'folder_id'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        logs_view_id=pulumi.get(__ret__, 'logs_view_id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        search_queries=pulumi.get(__ret__, 'search_queries'),
        time_selections=pulumi.get(__ret__, 'time_selections'))
def get_logs_view_output(endpoint_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                         logs_view_id: Optional[pulumi.Input[_builtins.float]] = None,
                         region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetLogsViewResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['logsViewId'] = logs_view_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getLogsView:getLogsView', __args__, opts=opts, typ=GetLogsViewResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetLogsViewResult(
        endpoint_type=pulumi.get(__response__, 'endpoint_type'),
        filters=pulumi.get(__response__, 'filters'),
        folder_id=pulumi.get(__response__, 'folder_id'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        logs_view_id=pulumi.get(__response__, 'logs_view_id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        search_queries=pulumi.get(__response__, 'search_queries'),
        time_selections=pulumi.get(__response__, 'time_selections')))
