# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetBackupRecoveriesResult',
    'AwaitableGetBackupRecoveriesResult',
    'get_backup_recoveries',
    'get_backup_recoveries_output',
]

@pulumi.output_type
class GetBackupRecoveriesResult:
    """
    A collection of values returned by getBackupRecoveries.
    """
    def __init__(__self__, archival_target_types=None, end_time_usecs=None, id=None, ids=None, recoveries=None, recovery_actions=None, return_only_child_recoveries=None, snapshot_environments=None, snapshot_target_types=None, start_time_usecs=None, statuses=None, x_ibm_tenant_id=None):
        if archival_target_types and not isinstance(archival_target_types, list):
            raise TypeError("Expected argument 'archival_target_types' to be a list")
        pulumi.set(__self__, "archival_target_types", archival_target_types)
        if end_time_usecs and not isinstance(end_time_usecs, float):
            raise TypeError("Expected argument 'end_time_usecs' to be a float")
        pulumi.set(__self__, "end_time_usecs", end_time_usecs)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if recoveries and not isinstance(recoveries, list):
            raise TypeError("Expected argument 'recoveries' to be a list")
        pulumi.set(__self__, "recoveries", recoveries)
        if recovery_actions and not isinstance(recovery_actions, list):
            raise TypeError("Expected argument 'recovery_actions' to be a list")
        pulumi.set(__self__, "recovery_actions", recovery_actions)
        if return_only_child_recoveries and not isinstance(return_only_child_recoveries, bool):
            raise TypeError("Expected argument 'return_only_child_recoveries' to be a bool")
        pulumi.set(__self__, "return_only_child_recoveries", return_only_child_recoveries)
        if snapshot_environments and not isinstance(snapshot_environments, list):
            raise TypeError("Expected argument 'snapshot_environments' to be a list")
        pulumi.set(__self__, "snapshot_environments", snapshot_environments)
        if snapshot_target_types and not isinstance(snapshot_target_types, list):
            raise TypeError("Expected argument 'snapshot_target_types' to be a list")
        pulumi.set(__self__, "snapshot_target_types", snapshot_target_types)
        if start_time_usecs and not isinstance(start_time_usecs, float):
            raise TypeError("Expected argument 'start_time_usecs' to be a float")
        pulumi.set(__self__, "start_time_usecs", start_time_usecs)
        if statuses and not isinstance(statuses, list):
            raise TypeError("Expected argument 'statuses' to be a list")
        pulumi.set(__self__, "statuses", statuses)
        if x_ibm_tenant_id and not isinstance(x_ibm_tenant_id, str):
            raise TypeError("Expected argument 'x_ibm_tenant_id' to be a str")
        pulumi.set(__self__, "x_ibm_tenant_id", x_ibm_tenant_id)

    @_builtins.property
    @pulumi.getter(name="archivalTargetTypes")
    def archival_target_types(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "archival_target_types")

    @_builtins.property
    @pulumi.getter(name="endTimeUsecs")
    def end_time_usecs(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "end_time_usecs")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "ids")

    @_builtins.property
    @pulumi.getter
    def recoveries(self) -> Sequence['outputs.GetBackupRecoveriesRecoveryResult']:
        return pulumi.get(self, "recoveries")

    @_builtins.property
    @pulumi.getter(name="recoveryActions")
    def recovery_actions(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "recovery_actions")

    @_builtins.property
    @pulumi.getter(name="returnOnlyChildRecoveries")
    def return_only_child_recoveries(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "return_only_child_recoveries")

    @_builtins.property
    @pulumi.getter(name="snapshotEnvironments")
    def snapshot_environments(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "snapshot_environments")

    @_builtins.property
    @pulumi.getter(name="snapshotTargetTypes")
    def snapshot_target_types(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "snapshot_target_types")

    @_builtins.property
    @pulumi.getter(name="startTimeUsecs")
    def start_time_usecs(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "start_time_usecs")

    @_builtins.property
    @pulumi.getter
    def statuses(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "statuses")

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> _builtins.str:
        return pulumi.get(self, "x_ibm_tenant_id")


class AwaitableGetBackupRecoveriesResult(GetBackupRecoveriesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupRecoveriesResult(
            archival_target_types=self.archival_target_types,
            end_time_usecs=self.end_time_usecs,
            id=self.id,
            ids=self.ids,
            recoveries=self.recoveries,
            recovery_actions=self.recovery_actions,
            return_only_child_recoveries=self.return_only_child_recoveries,
            snapshot_environments=self.snapshot_environments,
            snapshot_target_types=self.snapshot_target_types,
            start_time_usecs=self.start_time_usecs,
            statuses=self.statuses,
            x_ibm_tenant_id=self.x_ibm_tenant_id)


def get_backup_recoveries(archival_target_types: Optional[Sequence[_builtins.str]] = None,
                          end_time_usecs: Optional[_builtins.float] = None,
                          id: Optional[_builtins.str] = None,
                          ids: Optional[Sequence[_builtins.str]] = None,
                          recovery_actions: Optional[Sequence[_builtins.str]] = None,
                          return_only_child_recoveries: Optional[_builtins.bool] = None,
                          snapshot_environments: Optional[Sequence[_builtins.str]] = None,
                          snapshot_target_types: Optional[Sequence[_builtins.str]] = None,
                          start_time_usecs: Optional[_builtins.float] = None,
                          statuses: Optional[Sequence[_builtins.str]] = None,
                          x_ibm_tenant_id: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupRecoveriesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['archivalTargetTypes'] = archival_target_types
    __args__['endTimeUsecs'] = end_time_usecs
    __args__['id'] = id
    __args__['ids'] = ids
    __args__['recoveryActions'] = recovery_actions
    __args__['returnOnlyChildRecoveries'] = return_only_child_recoveries
    __args__['snapshotEnvironments'] = snapshot_environments
    __args__['snapshotTargetTypes'] = snapshot_target_types
    __args__['startTimeUsecs'] = start_time_usecs
    __args__['statuses'] = statuses
    __args__['xIbmTenantId'] = x_ibm_tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getBackupRecoveries:getBackupRecoveries', __args__, opts=opts, typ=GetBackupRecoveriesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetBackupRecoveriesResult(
        archival_target_types=pulumi.get(__ret__, 'archival_target_types'),
        end_time_usecs=pulumi.get(__ret__, 'end_time_usecs'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        recoveries=pulumi.get(__ret__, 'recoveries'),
        recovery_actions=pulumi.get(__ret__, 'recovery_actions'),
        return_only_child_recoveries=pulumi.get(__ret__, 'return_only_child_recoveries'),
        snapshot_environments=pulumi.get(__ret__, 'snapshot_environments'),
        snapshot_target_types=pulumi.get(__ret__, 'snapshot_target_types'),
        start_time_usecs=pulumi.get(__ret__, 'start_time_usecs'),
        statuses=pulumi.get(__ret__, 'statuses'),
        x_ibm_tenant_id=pulumi.get(__ret__, 'x_ibm_tenant_id'))
def get_backup_recoveries_output(archival_target_types: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                 end_time_usecs: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                                 id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                 recovery_actions: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                 return_only_child_recoveries: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                 snapshot_environments: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                 snapshot_target_types: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                 start_time_usecs: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                                 statuses: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                 x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBackupRecoveriesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['archivalTargetTypes'] = archival_target_types
    __args__['endTimeUsecs'] = end_time_usecs
    __args__['id'] = id
    __args__['ids'] = ids
    __args__['recoveryActions'] = recovery_actions
    __args__['returnOnlyChildRecoveries'] = return_only_child_recoveries
    __args__['snapshotEnvironments'] = snapshot_environments
    __args__['snapshotTargetTypes'] = snapshot_target_types
    __args__['startTimeUsecs'] = start_time_usecs
    __args__['statuses'] = statuses
    __args__['xIbmTenantId'] = x_ibm_tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getBackupRecoveries:getBackupRecoveries', __args__, opts=opts, typ=GetBackupRecoveriesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetBackupRecoveriesResult(
        archival_target_types=pulumi.get(__response__, 'archival_target_types'),
        end_time_usecs=pulumi.get(__response__, 'end_time_usecs'),
        id=pulumi.get(__response__, 'id'),
        ids=pulumi.get(__response__, 'ids'),
        recoveries=pulumi.get(__response__, 'recoveries'),
        recovery_actions=pulumi.get(__response__, 'recovery_actions'),
        return_only_child_recoveries=pulumi.get(__response__, 'return_only_child_recoveries'),
        snapshot_environments=pulumi.get(__response__, 'snapshot_environments'),
        snapshot_target_types=pulumi.get(__response__, 'snapshot_target_types'),
        start_time_usecs=pulumi.get(__response__, 'start_time_usecs'),
        statuses=pulumi.get(__response__, 'statuses'),
        x_ibm_tenant_id=pulumi.get(__response__, 'x_ibm_tenant_id')))
