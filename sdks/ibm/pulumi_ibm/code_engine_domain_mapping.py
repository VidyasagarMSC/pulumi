# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CodeEngineDomainMappingArgs', 'CodeEngineDomainMapping']

@pulumi.input_type
class CodeEngineDomainMappingArgs:
    def __init__(__self__, *,
                 component: pulumi.Input['CodeEngineDomainMappingComponentArgs'],
                 project_id: pulumi.Input[_builtins.str],
                 tls_secret: pulumi.Input[_builtins.str],
                 code_engine_domain_mapping_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['CodeEngineDomainMappingTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a CodeEngineDomainMapping resource.
        :param pulumi.Input['CodeEngineDomainMappingComponentArgs'] component: A reference to another component.
        :param pulumi.Input[_builtins.str] project_id: The ID of the project.
        :param pulumi.Input[_builtins.str] tls_secret: The name of the TLS secret that includes the certificate and private key of this domain mapping.
        :param pulumi.Input[_builtins.str] name: The name of the domain mapping.
        """
        pulumi.set(__self__, "component", component)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "tls_secret", tls_secret)
        if code_engine_domain_mapping_id is not None:
            pulumi.set(__self__, "code_engine_domain_mapping_id", code_engine_domain_mapping_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def component(self) -> pulumi.Input['CodeEngineDomainMappingComponentArgs']:
        """
        A reference to another component.
        """
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: pulumi.Input['CodeEngineDomainMappingComponentArgs']):
        pulumi.set(self, "component", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the project.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter(name="tlsSecret")
    def tls_secret(self) -> pulumi.Input[_builtins.str]:
        """
        The name of the TLS secret that includes the certificate and private key of this domain mapping.
        """
        return pulumi.get(self, "tls_secret")

    @tls_secret.setter
    def tls_secret(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "tls_secret", value)

    @_builtins.property
    @pulumi.getter(name="codeEngineDomainMappingId")
    def code_engine_domain_mapping_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "code_engine_domain_mapping_id")

    @code_engine_domain_mapping_id.setter
    def code_engine_domain_mapping_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "code_engine_domain_mapping_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the domain mapping.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['CodeEngineDomainMappingTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['CodeEngineDomainMappingTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _CodeEngineDomainMappingState:
    def __init__(__self__, *,
                 cname_target: Optional[pulumi.Input[_builtins.str]] = None,
                 code_engine_domain_mapping_id: Optional[pulumi.Input[_builtins.str]] = None,
                 component: Optional[pulumi.Input['CodeEngineDomainMappingComponentArgs']] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_mapping_id: Optional[pulumi.Input[_builtins.str]] = None,
                 entity_tag: Optional[pulumi.Input[_builtins.str]] = None,
                 etag: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 status_details: Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineDomainMappingStatusDetailArgs']]]] = None,
                 timeouts: Optional[pulumi.Input['CodeEngineDomainMappingTimeoutsArgs']] = None,
                 tls_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 user_managed: Optional[pulumi.Input[_builtins.bool]] = None,
                 visibility: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CodeEngineDomainMapping resources.
        :param pulumi.Input[_builtins.str] cname_target: The value of the CNAME record that must be configured in the DNS settings of the domain, to route traffic properly to
               the target Code Engine region.
        :param pulumi.Input['CodeEngineDomainMappingComponentArgs'] component: A reference to another component.
        :param pulumi.Input[_builtins.str] created_at: The timestamp when the resource was created.
        :param pulumi.Input[_builtins.str] domain_mapping_id: The identifier of the resource.
        :param pulumi.Input[_builtins.str] entity_tag: The version of the domain mapping instance, which is used to achieve optimistic locking.
        :param pulumi.Input[_builtins.str] href: When you provision a new domain mapping, a URL is created identifying the location of the instance.
        :param pulumi.Input[_builtins.str] name: The name of the domain mapping.
        :param pulumi.Input[_builtins.str] project_id: The ID of the project.
        :param pulumi.Input[_builtins.str] region: The region of the project the resource is located in. Possible values: 'au-syd', 'br-sao', 'ca-tor', 'eu-de', 'eu-gb',
               'jp-osa', 'jp-tok', 'us-east', 'us-south'.
        :param pulumi.Input[_builtins.str] resource_type: The type of the Code Engine resource.
        :param pulumi.Input[_builtins.str] status: The current status of the domain mapping.
        :param pulumi.Input[Sequence[pulumi.Input['CodeEngineDomainMappingStatusDetailArgs']]] status_details: The detailed status of the domain mapping.
        :param pulumi.Input[_builtins.str] tls_secret: The name of the TLS secret that includes the certificate and private key of this domain mapping.
        :param pulumi.Input[_builtins.bool] user_managed: Specifies whether the domain mapping is managed by the user or by Code Engine.
        :param pulumi.Input[_builtins.str] visibility: Specifies whether the domain mapping is reachable through the public internet, or private IBM network, or only through
               other components within the same Code Engine project.
        """
        if cname_target is not None:
            pulumi.set(__self__, "cname_target", cname_target)
        if code_engine_domain_mapping_id is not None:
            pulumi.set(__self__, "code_engine_domain_mapping_id", code_engine_domain_mapping_id)
        if component is not None:
            pulumi.set(__self__, "component", component)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if domain_mapping_id is not None:
            pulumi.set(__self__, "domain_mapping_id", domain_mapping_id)
        if entity_tag is not None:
            pulumi.set(__self__, "entity_tag", entity_tag)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_details is not None:
            pulumi.set(__self__, "status_details", status_details)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if tls_secret is not None:
            pulumi.set(__self__, "tls_secret", tls_secret)
        if user_managed is not None:
            pulumi.set(__self__, "user_managed", user_managed)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @_builtins.property
    @pulumi.getter(name="cnameTarget")
    def cname_target(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The value of the CNAME record that must be configured in the DNS settings of the domain, to route traffic properly to
        the target Code Engine region.
        """
        return pulumi.get(self, "cname_target")

    @cname_target.setter
    def cname_target(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cname_target", value)

    @_builtins.property
    @pulumi.getter(name="codeEngineDomainMappingId")
    def code_engine_domain_mapping_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "code_engine_domain_mapping_id")

    @code_engine_domain_mapping_id.setter
    def code_engine_domain_mapping_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "code_engine_domain_mapping_id", value)

    @_builtins.property
    @pulumi.getter
    def component(self) -> Optional[pulumi.Input['CodeEngineDomainMappingComponentArgs']]:
        """
        A reference to another component.
        """
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[pulumi.Input['CodeEngineDomainMappingComponentArgs']]):
        pulumi.set(self, "component", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The timestamp when the resource was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="domainMappingId")
    def domain_mapping_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The identifier of the resource.
        """
        return pulumi.get(self, "domain_mapping_id")

    @domain_mapping_id.setter
    def domain_mapping_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_mapping_id", value)

    @_builtins.property
    @pulumi.getter(name="entityTag")
    def entity_tag(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The version of the domain mapping instance, which is used to achieve optimistic locking.
        """
        return pulumi.get(self, "entity_tag")

    @entity_tag.setter
    def entity_tag(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entity_tag", value)

    @_builtins.property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "etag", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        When you provision a new domain mapping, a URL is created identifying the location of the instance.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the domain mapping.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the project.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the project the resource is located in. Possible values: 'au-syd', 'br-sao', 'ca-tor', 'eu-de', 'eu-gb',
        'jp-osa', 'jp-tok', 'us-east', 'us-south'.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the Code Engine resource.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The current status of the domain mapping.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineDomainMappingStatusDetailArgs']]]]:
        """
        The detailed status of the domain mapping.
        """
        return pulumi.get(self, "status_details")

    @status_details.setter
    def status_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineDomainMappingStatusDetailArgs']]]]):
        pulumi.set(self, "status_details", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['CodeEngineDomainMappingTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['CodeEngineDomainMappingTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="tlsSecret")
    def tls_secret(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the TLS secret that includes the certificate and private key of this domain mapping.
        """
        return pulumi.get(self, "tls_secret")

    @tls_secret.setter
    def tls_secret(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tls_secret", value)

    @_builtins.property
    @pulumi.getter(name="userManaged")
    def user_managed(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the domain mapping is managed by the user or by Code Engine.
        """
        return pulumi.get(self, "user_managed")

    @user_managed.setter
    def user_managed(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "user_managed", value)

    @_builtins.property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether the domain mapping is reachable through the public internet, or private IBM network, or only through
        other components within the same Code Engine project.
        """
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "visibility", value)


@pulumi.type_token("ibm:index/codeEngineDomainMapping:CodeEngineDomainMapping")
class CodeEngineDomainMapping(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 code_engine_domain_mapping_id: Optional[pulumi.Input[_builtins.str]] = None,
                 component: Optional[pulumi.Input[Union['CodeEngineDomainMappingComponentArgs', 'CodeEngineDomainMappingComponentArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['CodeEngineDomainMappingTimeoutsArgs', 'CodeEngineDomainMappingTimeoutsArgsDict']]] = None,
                 tls_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a CodeEngineDomainMapping resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['CodeEngineDomainMappingComponentArgs', 'CodeEngineDomainMappingComponentArgsDict']] component: A reference to another component.
        :param pulumi.Input[_builtins.str] name: The name of the domain mapping.
        :param pulumi.Input[_builtins.str] project_id: The ID of the project.
        :param pulumi.Input[_builtins.str] tls_secret: The name of the TLS secret that includes the certificate and private key of this domain mapping.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CodeEngineDomainMappingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CodeEngineDomainMapping resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CodeEngineDomainMappingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CodeEngineDomainMappingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 code_engine_domain_mapping_id: Optional[pulumi.Input[_builtins.str]] = None,
                 component: Optional[pulumi.Input[Union['CodeEngineDomainMappingComponentArgs', 'CodeEngineDomainMappingComponentArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['CodeEngineDomainMappingTimeoutsArgs', 'CodeEngineDomainMappingTimeoutsArgsDict']]] = None,
                 tls_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CodeEngineDomainMappingArgs.__new__(CodeEngineDomainMappingArgs)

            __props__.__dict__["code_engine_domain_mapping_id"] = code_engine_domain_mapping_id
            if component is None and not opts.urn:
                raise TypeError("Missing required property 'component'")
            __props__.__dict__["component"] = component
            __props__.__dict__["name"] = name
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["timeouts"] = timeouts
            if tls_secret is None and not opts.urn:
                raise TypeError("Missing required property 'tls_secret'")
            __props__.__dict__["tls_secret"] = tls_secret
            __props__.__dict__["cname_target"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["domain_mapping_id"] = None
            __props__.__dict__["entity_tag"] = None
            __props__.__dict__["etag"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["region"] = None
            __props__.__dict__["resource_type"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["status_details"] = None
            __props__.__dict__["user_managed"] = None
            __props__.__dict__["visibility"] = None
        super(CodeEngineDomainMapping, __self__).__init__(
            'ibm:index/codeEngineDomainMapping:CodeEngineDomainMapping',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cname_target: Optional[pulumi.Input[_builtins.str]] = None,
            code_engine_domain_mapping_id: Optional[pulumi.Input[_builtins.str]] = None,
            component: Optional[pulumi.Input[Union['CodeEngineDomainMappingComponentArgs', 'CodeEngineDomainMappingComponentArgsDict']]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            domain_mapping_id: Optional[pulumi.Input[_builtins.str]] = None,
            entity_tag: Optional[pulumi.Input[_builtins.str]] = None,
            etag: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            project_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            status_details: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineDomainMappingStatusDetailArgs', 'CodeEngineDomainMappingStatusDetailArgsDict']]]]] = None,
            timeouts: Optional[pulumi.Input[Union['CodeEngineDomainMappingTimeoutsArgs', 'CodeEngineDomainMappingTimeoutsArgsDict']]] = None,
            tls_secret: Optional[pulumi.Input[_builtins.str]] = None,
            user_managed: Optional[pulumi.Input[_builtins.bool]] = None,
            visibility: Optional[pulumi.Input[_builtins.str]] = None) -> 'CodeEngineDomainMapping':
        """
        Get an existing CodeEngineDomainMapping resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cname_target: The value of the CNAME record that must be configured in the DNS settings of the domain, to route traffic properly to
               the target Code Engine region.
        :param pulumi.Input[Union['CodeEngineDomainMappingComponentArgs', 'CodeEngineDomainMappingComponentArgsDict']] component: A reference to another component.
        :param pulumi.Input[_builtins.str] created_at: The timestamp when the resource was created.
        :param pulumi.Input[_builtins.str] domain_mapping_id: The identifier of the resource.
        :param pulumi.Input[_builtins.str] entity_tag: The version of the domain mapping instance, which is used to achieve optimistic locking.
        :param pulumi.Input[_builtins.str] href: When you provision a new domain mapping, a URL is created identifying the location of the instance.
        :param pulumi.Input[_builtins.str] name: The name of the domain mapping.
        :param pulumi.Input[_builtins.str] project_id: The ID of the project.
        :param pulumi.Input[_builtins.str] region: The region of the project the resource is located in. Possible values: 'au-syd', 'br-sao', 'ca-tor', 'eu-de', 'eu-gb',
               'jp-osa', 'jp-tok', 'us-east', 'us-south'.
        :param pulumi.Input[_builtins.str] resource_type: The type of the Code Engine resource.
        :param pulumi.Input[_builtins.str] status: The current status of the domain mapping.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineDomainMappingStatusDetailArgs', 'CodeEngineDomainMappingStatusDetailArgsDict']]]] status_details: The detailed status of the domain mapping.
        :param pulumi.Input[_builtins.str] tls_secret: The name of the TLS secret that includes the certificate and private key of this domain mapping.
        :param pulumi.Input[_builtins.bool] user_managed: Specifies whether the domain mapping is managed by the user or by Code Engine.
        :param pulumi.Input[_builtins.str] visibility: Specifies whether the domain mapping is reachable through the public internet, or private IBM network, or only through
               other components within the same Code Engine project.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CodeEngineDomainMappingState.__new__(_CodeEngineDomainMappingState)

        __props__.__dict__["cname_target"] = cname_target
        __props__.__dict__["code_engine_domain_mapping_id"] = code_engine_domain_mapping_id
        __props__.__dict__["component"] = component
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["domain_mapping_id"] = domain_mapping_id
        __props__.__dict__["entity_tag"] = entity_tag
        __props__.__dict__["etag"] = etag
        __props__.__dict__["href"] = href
        __props__.__dict__["name"] = name
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["status"] = status
        __props__.__dict__["status_details"] = status_details
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["tls_secret"] = tls_secret
        __props__.__dict__["user_managed"] = user_managed
        __props__.__dict__["visibility"] = visibility
        return CodeEngineDomainMapping(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="cnameTarget")
    def cname_target(self) -> pulumi.Output[_builtins.str]:
        """
        The value of the CNAME record that must be configured in the DNS settings of the domain, to route traffic properly to
        the target Code Engine region.
        """
        return pulumi.get(self, "cname_target")

    @_builtins.property
    @pulumi.getter(name="codeEngineDomainMappingId")
    def code_engine_domain_mapping_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "code_engine_domain_mapping_id")

    @_builtins.property
    @pulumi.getter
    def component(self) -> pulumi.Output['outputs.CodeEngineDomainMappingComponent']:
        """
        A reference to another component.
        """
        return pulumi.get(self, "component")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The timestamp when the resource was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="domainMappingId")
    def domain_mapping_id(self) -> pulumi.Output[_builtins.str]:
        """
        The identifier of the resource.
        """
        return pulumi.get(self, "domain_mapping_id")

    @_builtins.property
    @pulumi.getter(name="entityTag")
    def entity_tag(self) -> pulumi.Output[_builtins.str]:
        """
        The version of the domain mapping instance, which is used to achieve optimistic locking.
        """
        return pulumi.get(self, "entity_tag")

    @_builtins.property
    @pulumi.getter
    def etag(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "etag")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        When you provision a new domain mapping, a URL is created identifying the location of the instance.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the domain mapping.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the project.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region of the project the resource is located in. Possible values: 'au-syd', 'br-sao', 'ca-tor', 'eu-de', 'eu-gb',
        'jp-osa', 'jp-tok', 'us-east', 'us-south'.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of the Code Engine resource.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The current status of the domain mapping.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> pulumi.Output[Sequence['outputs.CodeEngineDomainMappingStatusDetail']]:
        """
        The detailed status of the domain mapping.
        """
        return pulumi.get(self, "status_details")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.CodeEngineDomainMappingTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter(name="tlsSecret")
    def tls_secret(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the TLS secret that includes the certificate and private key of this domain mapping.
        """
        return pulumi.get(self, "tls_secret")

    @_builtins.property
    @pulumi.getter(name="userManaged")
    def user_managed(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether the domain mapping is managed by the user or by Code Engine.
        """
        return pulumi.get(self, "user_managed")

    @_builtins.property
    @pulumi.getter
    def visibility(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies whether the domain mapping is reachable through the public internet, or private IBM network, or only through
        other components within the same Code Engine project.
        """
        return pulumi.get(self, "visibility")

