# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsClusterNetworkSubnetReservedIpResult',
    'AwaitableGetIsClusterNetworkSubnetReservedIpResult',
    'get_is_cluster_network_subnet_reserved_ip',
    'get_is_cluster_network_subnet_reserved_ip_output',
]

@pulumi.output_type
class GetIsClusterNetworkSubnetReservedIpResult:
    """
    A collection of values returned by getIsClusterNetworkSubnetReservedIp.
    """
    def __init__(__self__, address=None, auto_delete=None, cluster_network_id=None, cluster_network_subnet_id=None, cluster_network_subnet_reserved_ip_id=None, created_at=None, href=None, id=None, lifecycle_reasons=None, lifecycle_state=None, name=None, owner=None, resource_type=None, targets=None):
        if address and not isinstance(address, str):
            raise TypeError("Expected argument 'address' to be a str")
        pulumi.set(__self__, "address", address)
        if auto_delete and not isinstance(auto_delete, bool):
            raise TypeError("Expected argument 'auto_delete' to be a bool")
        pulumi.set(__self__, "auto_delete", auto_delete)
        if cluster_network_id and not isinstance(cluster_network_id, str):
            raise TypeError("Expected argument 'cluster_network_id' to be a str")
        pulumi.set(__self__, "cluster_network_id", cluster_network_id)
        if cluster_network_subnet_id and not isinstance(cluster_network_subnet_id, str):
            raise TypeError("Expected argument 'cluster_network_subnet_id' to be a str")
        pulumi.set(__self__, "cluster_network_subnet_id", cluster_network_subnet_id)
        if cluster_network_subnet_reserved_ip_id and not isinstance(cluster_network_subnet_reserved_ip_id, str):
            raise TypeError("Expected argument 'cluster_network_subnet_reserved_ip_id' to be a str")
        pulumi.set(__self__, "cluster_network_subnet_reserved_ip_id", cluster_network_subnet_reserved_ip_id)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lifecycle_reasons and not isinstance(lifecycle_reasons, list):
            raise TypeError("Expected argument 'lifecycle_reasons' to be a list")
        pulumi.set(__self__, "lifecycle_reasons", lifecycle_reasons)
        if lifecycle_state and not isinstance(lifecycle_state, str):
            raise TypeError("Expected argument 'lifecycle_state' to be a str")
        pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if owner and not isinstance(owner, str):
            raise TypeError("Expected argument 'owner' to be a str")
        pulumi.set(__self__, "owner", owner)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if targets and not isinstance(targets, list):
            raise TypeError("Expected argument 'targets' to be a list")
        pulumi.set(__self__, "targets", targets)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="autoDelete")
    def auto_delete(self) -> _builtins.bool:
        return pulumi.get(self, "auto_delete")

    @_builtins.property
    @pulumi.getter(name="clusterNetworkId")
    def cluster_network_id(self) -> _builtins.str:
        return pulumi.get(self, "cluster_network_id")

    @_builtins.property
    @pulumi.getter(name="clusterNetworkSubnetId")
    def cluster_network_subnet_id(self) -> _builtins.str:
        return pulumi.get(self, "cluster_network_subnet_id")

    @_builtins.property
    @pulumi.getter(name="clusterNetworkSubnetReservedIpId")
    def cluster_network_subnet_reserved_ip_id(self) -> _builtins.str:
        return pulumi.get(self, "cluster_network_subnet_reserved_ip_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lifecycleReasons")
    def lifecycle_reasons(self) -> Sequence['outputs.GetIsClusterNetworkSubnetReservedIpLifecycleReasonResult']:
        return pulumi.get(self, "lifecycle_reasons")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> _builtins.str:
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def owner(self) -> _builtins.str:
        return pulumi.get(self, "owner")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetIsClusterNetworkSubnetReservedIpTargetResult']:
        return pulumi.get(self, "targets")


class AwaitableGetIsClusterNetworkSubnetReservedIpResult(GetIsClusterNetworkSubnetReservedIpResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsClusterNetworkSubnetReservedIpResult(
            address=self.address,
            auto_delete=self.auto_delete,
            cluster_network_id=self.cluster_network_id,
            cluster_network_subnet_id=self.cluster_network_subnet_id,
            cluster_network_subnet_reserved_ip_id=self.cluster_network_subnet_reserved_ip_id,
            created_at=self.created_at,
            href=self.href,
            id=self.id,
            lifecycle_reasons=self.lifecycle_reasons,
            lifecycle_state=self.lifecycle_state,
            name=self.name,
            owner=self.owner,
            resource_type=self.resource_type,
            targets=self.targets)


def get_is_cluster_network_subnet_reserved_ip(cluster_network_id: Optional[_builtins.str] = None,
                                              cluster_network_subnet_id: Optional[_builtins.str] = None,
                                              cluster_network_subnet_reserved_ip_id: Optional[_builtins.str] = None,
                                              id: Optional[_builtins.str] = None,
                                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsClusterNetworkSubnetReservedIpResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clusterNetworkId'] = cluster_network_id
    __args__['clusterNetworkSubnetId'] = cluster_network_subnet_id
    __args__['clusterNetworkSubnetReservedIpId'] = cluster_network_subnet_reserved_ip_id
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsClusterNetworkSubnetReservedIp:getIsClusterNetworkSubnetReservedIp', __args__, opts=opts, typ=GetIsClusterNetworkSubnetReservedIpResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsClusterNetworkSubnetReservedIpResult(
        address=pulumi.get(__ret__, 'address'),
        auto_delete=pulumi.get(__ret__, 'auto_delete'),
        cluster_network_id=pulumi.get(__ret__, 'cluster_network_id'),
        cluster_network_subnet_id=pulumi.get(__ret__, 'cluster_network_subnet_id'),
        cluster_network_subnet_reserved_ip_id=pulumi.get(__ret__, 'cluster_network_subnet_reserved_ip_id'),
        created_at=pulumi.get(__ret__, 'created_at'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        lifecycle_reasons=pulumi.get(__ret__, 'lifecycle_reasons'),
        lifecycle_state=pulumi.get(__ret__, 'lifecycle_state'),
        name=pulumi.get(__ret__, 'name'),
        owner=pulumi.get(__ret__, 'owner'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        targets=pulumi.get(__ret__, 'targets'))
def get_is_cluster_network_subnet_reserved_ip_output(cluster_network_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                     cluster_network_subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                     cluster_network_subnet_reserved_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                     id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsClusterNetworkSubnetReservedIpResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clusterNetworkId'] = cluster_network_id
    __args__['clusterNetworkSubnetId'] = cluster_network_subnet_id
    __args__['clusterNetworkSubnetReservedIpId'] = cluster_network_subnet_reserved_ip_id
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsClusterNetworkSubnetReservedIp:getIsClusterNetworkSubnetReservedIp', __args__, opts=opts, typ=GetIsClusterNetworkSubnetReservedIpResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsClusterNetworkSubnetReservedIpResult(
        address=pulumi.get(__response__, 'address'),
        auto_delete=pulumi.get(__response__, 'auto_delete'),
        cluster_network_id=pulumi.get(__response__, 'cluster_network_id'),
        cluster_network_subnet_id=pulumi.get(__response__, 'cluster_network_subnet_id'),
        cluster_network_subnet_reserved_ip_id=pulumi.get(__response__, 'cluster_network_subnet_reserved_ip_id'),
        created_at=pulumi.get(__response__, 'created_at'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        lifecycle_reasons=pulumi.get(__response__, 'lifecycle_reasons'),
        lifecycle_state=pulumi.get(__response__, 'lifecycle_state'),
        name=pulumi.get(__response__, 'name'),
        owner=pulumi.get(__response__, 'owner'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        targets=pulumi.get(__response__, 'targets')))
