# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetContainerClusterResult',
    'AwaitableGetContainerClusterResult',
    'get_container_cluster',
    'get_container_cluster_output',
]

@pulumi.output_type
class GetContainerClusterResult:
    """
    A collection of values returned by getContainerCluster.
    """
    def __init__(__self__, account_guid=None, alb_type=None, albs=None, api_key_id=None, api_key_owner_email=None, api_key_owner_name=None, bounded_services=None, cluster_name_id=None, crn=None, id=None, image_security_enforcement=None, ingress_hostname=None, ingress_secret=None, is_trusted=None, list_bounded_services=None, name=None, org_guid=None, private_service_endpoint=None, private_service_endpoint_url=None, public_service_endpoint=None, public_service_endpoint_url=None, region=None, resource_controller_url=None, resource_crn=None, resource_group_id=None, resource_group_name=None, resource_name=None, resource_status=None, server_url=None, space_guid=None, state=None, vlans=None, wait_till=None, wait_till_timeout=None, worker_count=None, worker_pools=None, workers=None):
        if account_guid and not isinstance(account_guid, str):
            raise TypeError("Expected argument 'account_guid' to be a str")
        pulumi.set(__self__, "account_guid", account_guid)
        if alb_type and not isinstance(alb_type, str):
            raise TypeError("Expected argument 'alb_type' to be a str")
        pulumi.set(__self__, "alb_type", alb_type)
        if albs and not isinstance(albs, list):
            raise TypeError("Expected argument 'albs' to be a list")
        pulumi.set(__self__, "albs", albs)
        if api_key_id and not isinstance(api_key_id, str):
            raise TypeError("Expected argument 'api_key_id' to be a str")
        pulumi.set(__self__, "api_key_id", api_key_id)
        if api_key_owner_email and not isinstance(api_key_owner_email, str):
            raise TypeError("Expected argument 'api_key_owner_email' to be a str")
        pulumi.set(__self__, "api_key_owner_email", api_key_owner_email)
        if api_key_owner_name and not isinstance(api_key_owner_name, str):
            raise TypeError("Expected argument 'api_key_owner_name' to be a str")
        pulumi.set(__self__, "api_key_owner_name", api_key_owner_name)
        if bounded_services and not isinstance(bounded_services, list):
            raise TypeError("Expected argument 'bounded_services' to be a list")
        pulumi.set(__self__, "bounded_services", bounded_services)
        if cluster_name_id and not isinstance(cluster_name_id, str):
            raise TypeError("Expected argument 'cluster_name_id' to be a str")
        pulumi.set(__self__, "cluster_name_id", cluster_name_id)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image_security_enforcement and not isinstance(image_security_enforcement, bool):
            raise TypeError("Expected argument 'image_security_enforcement' to be a bool")
        pulumi.set(__self__, "image_security_enforcement", image_security_enforcement)
        if ingress_hostname and not isinstance(ingress_hostname, str):
            raise TypeError("Expected argument 'ingress_hostname' to be a str")
        pulumi.set(__self__, "ingress_hostname", ingress_hostname)
        if ingress_secret and not isinstance(ingress_secret, str):
            raise TypeError("Expected argument 'ingress_secret' to be a str")
        pulumi.set(__self__, "ingress_secret", ingress_secret)
        if is_trusted and not isinstance(is_trusted, bool):
            raise TypeError("Expected argument 'is_trusted' to be a bool")
        pulumi.set(__self__, "is_trusted", is_trusted)
        if list_bounded_services and not isinstance(list_bounded_services, bool):
            raise TypeError("Expected argument 'list_bounded_services' to be a bool")
        pulumi.set(__self__, "list_bounded_services", list_bounded_services)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org_guid and not isinstance(org_guid, str):
            raise TypeError("Expected argument 'org_guid' to be a str")
        pulumi.set(__self__, "org_guid", org_guid)
        if private_service_endpoint and not isinstance(private_service_endpoint, bool):
            raise TypeError("Expected argument 'private_service_endpoint' to be a bool")
        pulumi.set(__self__, "private_service_endpoint", private_service_endpoint)
        if private_service_endpoint_url and not isinstance(private_service_endpoint_url, str):
            raise TypeError("Expected argument 'private_service_endpoint_url' to be a str")
        pulumi.set(__self__, "private_service_endpoint_url", private_service_endpoint_url)
        if public_service_endpoint and not isinstance(public_service_endpoint, bool):
            raise TypeError("Expected argument 'public_service_endpoint' to be a bool")
        pulumi.set(__self__, "public_service_endpoint", public_service_endpoint)
        if public_service_endpoint_url and not isinstance(public_service_endpoint_url, str):
            raise TypeError("Expected argument 'public_service_endpoint_url' to be a str")
        pulumi.set(__self__, "public_service_endpoint_url", public_service_endpoint_url)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_controller_url and not isinstance(resource_controller_url, str):
            raise TypeError("Expected argument 'resource_controller_url' to be a str")
        pulumi.set(__self__, "resource_controller_url", resource_controller_url)
        if resource_crn and not isinstance(resource_crn, str):
            raise TypeError("Expected argument 'resource_crn' to be a str")
        pulumi.set(__self__, "resource_crn", resource_crn)
        if resource_group_id and not isinstance(resource_group_id, str):
            raise TypeError("Expected argument 'resource_group_id' to be a str")
        pulumi.set(__self__, "resource_group_id", resource_group_id)
        if resource_group_name and not isinstance(resource_group_name, str):
            raise TypeError("Expected argument 'resource_group_name' to be a str")
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if resource_name and not isinstance(resource_name, str):
            raise TypeError("Expected argument 'resource_name' to be a str")
        pulumi.set(__self__, "resource_name", resource_name)
        if resource_status and not isinstance(resource_status, str):
            raise TypeError("Expected argument 'resource_status' to be a str")
        pulumi.set(__self__, "resource_status", resource_status)
        if server_url and not isinstance(server_url, str):
            raise TypeError("Expected argument 'server_url' to be a str")
        pulumi.set(__self__, "server_url", server_url)
        if space_guid and not isinstance(space_guid, str):
            raise TypeError("Expected argument 'space_guid' to be a str")
        pulumi.set(__self__, "space_guid", space_guid)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if vlans and not isinstance(vlans, list):
            raise TypeError("Expected argument 'vlans' to be a list")
        pulumi.set(__self__, "vlans", vlans)
        if wait_till and not isinstance(wait_till, str):
            raise TypeError("Expected argument 'wait_till' to be a str")
        pulumi.set(__self__, "wait_till", wait_till)
        if wait_till_timeout and not isinstance(wait_till_timeout, float):
            raise TypeError("Expected argument 'wait_till_timeout' to be a float")
        pulumi.set(__self__, "wait_till_timeout", wait_till_timeout)
        if worker_count and not isinstance(worker_count, float):
            raise TypeError("Expected argument 'worker_count' to be a float")
        pulumi.set(__self__, "worker_count", worker_count)
        if worker_pools and not isinstance(worker_pools, list):
            raise TypeError("Expected argument 'worker_pools' to be a list")
        pulumi.set(__self__, "worker_pools", worker_pools)
        if workers and not isinstance(workers, list):
            raise TypeError("Expected argument 'workers' to be a list")
        pulumi.set(__self__, "workers", workers)

    @_builtins.property
    @pulumi.getter(name="accountGuid")
    @_utilities.deprecated("""Deprecated""")
    def account_guid(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "account_guid")

    @_builtins.property
    @pulumi.getter(name="albType")
    def alb_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "alb_type")

    @_builtins.property
    @pulumi.getter
    def albs(self) -> Sequence['outputs.GetContainerClusterAlbResult']:
        return pulumi.get(self, "albs")

    @_builtins.property
    @pulumi.getter(name="apiKeyId")
    def api_key_id(self) -> _builtins.str:
        return pulumi.get(self, "api_key_id")

    @_builtins.property
    @pulumi.getter(name="apiKeyOwnerEmail")
    def api_key_owner_email(self) -> _builtins.str:
        return pulumi.get(self, "api_key_owner_email")

    @_builtins.property
    @pulumi.getter(name="apiKeyOwnerName")
    def api_key_owner_name(self) -> _builtins.str:
        return pulumi.get(self, "api_key_owner_name")

    @_builtins.property
    @pulumi.getter(name="boundedServices")
    def bounded_services(self) -> Sequence['outputs.GetContainerClusterBoundedServiceResult']:
        return pulumi.get(self, "bounded_services")

    @_builtins.property
    @pulumi.getter(name="clusterNameId")
    @_utilities.deprecated("""Deprecated""")
    def cluster_name_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "cluster_name_id")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="imageSecurityEnforcement")
    def image_security_enforcement(self) -> _builtins.bool:
        return pulumi.get(self, "image_security_enforcement")

    @_builtins.property
    @pulumi.getter(name="ingressHostname")
    def ingress_hostname(self) -> _builtins.str:
        return pulumi.get(self, "ingress_hostname")

    @_builtins.property
    @pulumi.getter(name="ingressSecret")
    def ingress_secret(self) -> _builtins.str:
        return pulumi.get(self, "ingress_secret")

    @_builtins.property
    @pulumi.getter(name="isTrusted")
    def is_trusted(self) -> _builtins.bool:
        return pulumi.get(self, "is_trusted")

    @_builtins.property
    @pulumi.getter(name="listBoundedServices")
    def list_bounded_services(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "list_bounded_services")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="orgGuid")
    @_utilities.deprecated("""Deprecated""")
    def org_guid(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "org_guid")

    @_builtins.property
    @pulumi.getter(name="privateServiceEndpoint")
    def private_service_endpoint(self) -> _builtins.bool:
        return pulumi.get(self, "private_service_endpoint")

    @_builtins.property
    @pulumi.getter(name="privateServiceEndpointUrl")
    def private_service_endpoint_url(self) -> _builtins.str:
        return pulumi.get(self, "private_service_endpoint_url")

    @_builtins.property
    @pulumi.getter(name="publicServiceEndpoint")
    def public_service_endpoint(self) -> _builtins.bool:
        return pulumi.get(self, "public_service_endpoint")

    @_builtins.property
    @pulumi.getter(name="publicServiceEndpointUrl")
    def public_service_endpoint_url(self) -> _builtins.str:
        return pulumi.get(self, "public_service_endpoint_url")

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> _builtins.str:
        return pulumi.get(self, "resource_controller_url")

    @_builtins.property
    @pulumi.getter(name="resourceCrn")
    def resource_crn(self) -> _builtins.str:
        return pulumi.get(self, "resource_crn")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> _builtins.str:
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> _builtins.str:
        return pulumi.get(self, "resource_group_name")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceStatus")
    def resource_status(self) -> _builtins.str:
        return pulumi.get(self, "resource_status")

    @_builtins.property
    @pulumi.getter(name="serverUrl")
    def server_url(self) -> _builtins.str:
        return pulumi.get(self, "server_url")

    @_builtins.property
    @pulumi.getter(name="spaceGuid")
    @_utilities.deprecated("""Deprecated""")
    def space_guid(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "space_guid")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def vlans(self) -> Sequence['outputs.GetContainerClusterVlanResult']:
        return pulumi.get(self, "vlans")

    @_builtins.property
    @pulumi.getter(name="waitTill")
    def wait_till(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "wait_till")

    @_builtins.property
    @pulumi.getter(name="waitTillTimeout")
    def wait_till_timeout(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "wait_till_timeout")

    @_builtins.property
    @pulumi.getter(name="workerCount")
    def worker_count(self) -> _builtins.float:
        return pulumi.get(self, "worker_count")

    @_builtins.property
    @pulumi.getter(name="workerPools")
    def worker_pools(self) -> Sequence['outputs.GetContainerClusterWorkerPoolResult']:
        return pulumi.get(self, "worker_pools")

    @_builtins.property
    @pulumi.getter
    def workers(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "workers")


class AwaitableGetContainerClusterResult(GetContainerClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetContainerClusterResult(
            account_guid=self.account_guid,
            alb_type=self.alb_type,
            albs=self.albs,
            api_key_id=self.api_key_id,
            api_key_owner_email=self.api_key_owner_email,
            api_key_owner_name=self.api_key_owner_name,
            bounded_services=self.bounded_services,
            cluster_name_id=self.cluster_name_id,
            crn=self.crn,
            id=self.id,
            image_security_enforcement=self.image_security_enforcement,
            ingress_hostname=self.ingress_hostname,
            ingress_secret=self.ingress_secret,
            is_trusted=self.is_trusted,
            list_bounded_services=self.list_bounded_services,
            name=self.name,
            org_guid=self.org_guid,
            private_service_endpoint=self.private_service_endpoint,
            private_service_endpoint_url=self.private_service_endpoint_url,
            public_service_endpoint=self.public_service_endpoint,
            public_service_endpoint_url=self.public_service_endpoint_url,
            region=self.region,
            resource_controller_url=self.resource_controller_url,
            resource_crn=self.resource_crn,
            resource_group_id=self.resource_group_id,
            resource_group_name=self.resource_group_name,
            resource_name=self.resource_name,
            resource_status=self.resource_status,
            server_url=self.server_url,
            space_guid=self.space_guid,
            state=self.state,
            vlans=self.vlans,
            wait_till=self.wait_till,
            wait_till_timeout=self.wait_till_timeout,
            worker_count=self.worker_count,
            worker_pools=self.worker_pools,
            workers=self.workers)


def get_container_cluster(account_guid: Optional[_builtins.str] = None,
                          alb_type: Optional[_builtins.str] = None,
                          cluster_name_id: Optional[_builtins.str] = None,
                          id: Optional[_builtins.str] = None,
                          list_bounded_services: Optional[_builtins.bool] = None,
                          name: Optional[_builtins.str] = None,
                          org_guid: Optional[_builtins.str] = None,
                          region: Optional[_builtins.str] = None,
                          resource_group_id: Optional[_builtins.str] = None,
                          space_guid: Optional[_builtins.str] = None,
                          wait_till: Optional[_builtins.str] = None,
                          wait_till_timeout: Optional[_builtins.float] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetContainerClusterResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountGuid'] = account_guid
    __args__['albType'] = alb_type
    __args__['clusterNameId'] = cluster_name_id
    __args__['id'] = id
    __args__['listBoundedServices'] = list_bounded_services
    __args__['name'] = name
    __args__['orgGuid'] = org_guid
    __args__['region'] = region
    __args__['resourceGroupId'] = resource_group_id
    __args__['spaceGuid'] = space_guid
    __args__['waitTill'] = wait_till
    __args__['waitTillTimeout'] = wait_till_timeout
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getContainerCluster:getContainerCluster', __args__, opts=opts, typ=GetContainerClusterResult, package_ref=_utilities.get_package()).value

    return AwaitableGetContainerClusterResult(
        account_guid=pulumi.get(__ret__, 'account_guid'),
        alb_type=pulumi.get(__ret__, 'alb_type'),
        albs=pulumi.get(__ret__, 'albs'),
        api_key_id=pulumi.get(__ret__, 'api_key_id'),
        api_key_owner_email=pulumi.get(__ret__, 'api_key_owner_email'),
        api_key_owner_name=pulumi.get(__ret__, 'api_key_owner_name'),
        bounded_services=pulumi.get(__ret__, 'bounded_services'),
        cluster_name_id=pulumi.get(__ret__, 'cluster_name_id'),
        crn=pulumi.get(__ret__, 'crn'),
        id=pulumi.get(__ret__, 'id'),
        image_security_enforcement=pulumi.get(__ret__, 'image_security_enforcement'),
        ingress_hostname=pulumi.get(__ret__, 'ingress_hostname'),
        ingress_secret=pulumi.get(__ret__, 'ingress_secret'),
        is_trusted=pulumi.get(__ret__, 'is_trusted'),
        list_bounded_services=pulumi.get(__ret__, 'list_bounded_services'),
        name=pulumi.get(__ret__, 'name'),
        org_guid=pulumi.get(__ret__, 'org_guid'),
        private_service_endpoint=pulumi.get(__ret__, 'private_service_endpoint'),
        private_service_endpoint_url=pulumi.get(__ret__, 'private_service_endpoint_url'),
        public_service_endpoint=pulumi.get(__ret__, 'public_service_endpoint'),
        public_service_endpoint_url=pulumi.get(__ret__, 'public_service_endpoint_url'),
        region=pulumi.get(__ret__, 'region'),
        resource_controller_url=pulumi.get(__ret__, 'resource_controller_url'),
        resource_crn=pulumi.get(__ret__, 'resource_crn'),
        resource_group_id=pulumi.get(__ret__, 'resource_group_id'),
        resource_group_name=pulumi.get(__ret__, 'resource_group_name'),
        resource_name=pulumi.get(__ret__, 'resource_name'),
        resource_status=pulumi.get(__ret__, 'resource_status'),
        server_url=pulumi.get(__ret__, 'server_url'),
        space_guid=pulumi.get(__ret__, 'space_guid'),
        state=pulumi.get(__ret__, 'state'),
        vlans=pulumi.get(__ret__, 'vlans'),
        wait_till=pulumi.get(__ret__, 'wait_till'),
        wait_till_timeout=pulumi.get(__ret__, 'wait_till_timeout'),
        worker_count=pulumi.get(__ret__, 'worker_count'),
        worker_pools=pulumi.get(__ret__, 'worker_pools'),
        workers=pulumi.get(__ret__, 'workers'))
def get_container_cluster_output(account_guid: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 alb_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 cluster_name_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 list_bounded_services: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                 name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 org_guid: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 resource_group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 space_guid: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 wait_till: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 wait_till_timeout: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetContainerClusterResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountGuid'] = account_guid
    __args__['albType'] = alb_type
    __args__['clusterNameId'] = cluster_name_id
    __args__['id'] = id
    __args__['listBoundedServices'] = list_bounded_services
    __args__['name'] = name
    __args__['orgGuid'] = org_guid
    __args__['region'] = region
    __args__['resourceGroupId'] = resource_group_id
    __args__['spaceGuid'] = space_guid
    __args__['waitTill'] = wait_till
    __args__['waitTillTimeout'] = wait_till_timeout
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getContainerCluster:getContainerCluster', __args__, opts=opts, typ=GetContainerClusterResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetContainerClusterResult(
        account_guid=pulumi.get(__response__, 'account_guid'),
        alb_type=pulumi.get(__response__, 'alb_type'),
        albs=pulumi.get(__response__, 'albs'),
        api_key_id=pulumi.get(__response__, 'api_key_id'),
        api_key_owner_email=pulumi.get(__response__, 'api_key_owner_email'),
        api_key_owner_name=pulumi.get(__response__, 'api_key_owner_name'),
        bounded_services=pulumi.get(__response__, 'bounded_services'),
        cluster_name_id=pulumi.get(__response__, 'cluster_name_id'),
        crn=pulumi.get(__response__, 'crn'),
        id=pulumi.get(__response__, 'id'),
        image_security_enforcement=pulumi.get(__response__, 'image_security_enforcement'),
        ingress_hostname=pulumi.get(__response__, 'ingress_hostname'),
        ingress_secret=pulumi.get(__response__, 'ingress_secret'),
        is_trusted=pulumi.get(__response__, 'is_trusted'),
        list_bounded_services=pulumi.get(__response__, 'list_bounded_services'),
        name=pulumi.get(__response__, 'name'),
        org_guid=pulumi.get(__response__, 'org_guid'),
        private_service_endpoint=pulumi.get(__response__, 'private_service_endpoint'),
        private_service_endpoint_url=pulumi.get(__response__, 'private_service_endpoint_url'),
        public_service_endpoint=pulumi.get(__response__, 'public_service_endpoint'),
        public_service_endpoint_url=pulumi.get(__response__, 'public_service_endpoint_url'),
        region=pulumi.get(__response__, 'region'),
        resource_controller_url=pulumi.get(__response__, 'resource_controller_url'),
        resource_crn=pulumi.get(__response__, 'resource_crn'),
        resource_group_id=pulumi.get(__response__, 'resource_group_id'),
        resource_group_name=pulumi.get(__response__, 'resource_group_name'),
        resource_name=pulumi.get(__response__, 'resource_name'),
        resource_status=pulumi.get(__response__, 'resource_status'),
        server_url=pulumi.get(__response__, 'server_url'),
        space_guid=pulumi.get(__response__, 'space_guid'),
        state=pulumi.get(__response__, 'state'),
        vlans=pulumi.get(__response__, 'vlans'),
        wait_till=pulumi.get(__response__, 'wait_till'),
        wait_till_timeout=pulumi.get(__response__, 'wait_till_timeout'),
        worker_count=pulumi.get(__response__, 'worker_count'),
        worker_pools=pulumi.get(__response__, 'worker_pools'),
        workers=pulumi.get(__response__, 'workers')))
