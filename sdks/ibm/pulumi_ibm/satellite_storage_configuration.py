# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SatelliteStorageConfigurationArgs', 'SatelliteStorageConfiguration']

@pulumi.input_type
class SatelliteStorageConfigurationArgs:
    def __init__(__self__, *,
                 config_name: pulumi.Input[_builtins.str],
                 location: pulumi.Input[_builtins.str],
                 storage_template_name: pulumi.Input[_builtins.str],
                 storage_template_version: pulumi.Input[_builtins.str],
                 user_config_parameters: pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]],
                 user_secret_parameters: pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]],
                 delete_assignments: Optional[pulumi.Input[_builtins.bool]] = None,
                 satellite_storage_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_class_parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]]] = None,
                 timeouts: Optional[pulumi.Input['SatelliteStorageConfigurationTimeoutsArgs']] = None,
                 update_assignments: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a SatelliteStorageConfiguration resource.
        :param pulumi.Input[_builtins.str] config_name: Name of the Storage Configuration.
        :param pulumi.Input[_builtins.str] location: Location ID.
        :param pulumi.Input[_builtins.str] storage_template_name: The Storage Template Name.
        :param pulumi.Input[_builtins.str] storage_template_version: The Storage Template Version.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] user_config_parameters: User Config Parameters to pass as a Map of string key-value.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] user_secret_parameters: User Secret Parameters to pass as a Map of string key-value.
        :param pulumi.Input[_builtins.bool] delete_assignments: Set to delete all assignments during a configuration destroy.
        :param pulumi.Input[_builtins.bool] update_assignments: Set to update all assignments during a configuration update.
        """
        pulumi.set(__self__, "config_name", config_name)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "storage_template_name", storage_template_name)
        pulumi.set(__self__, "storage_template_version", storage_template_version)
        pulumi.set(__self__, "user_config_parameters", user_config_parameters)
        pulumi.set(__self__, "user_secret_parameters", user_secret_parameters)
        if delete_assignments is not None:
            pulumi.set(__self__, "delete_assignments", delete_assignments)
        if satellite_storage_configuration_id is not None:
            pulumi.set(__self__, "satellite_storage_configuration_id", satellite_storage_configuration_id)
        if storage_class_parameters is not None:
            pulumi.set(__self__, "storage_class_parameters", storage_class_parameters)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if update_assignments is not None:
            pulumi.set(__self__, "update_assignments", update_assignments)

    @_builtins.property
    @pulumi.getter(name="configName")
    def config_name(self) -> pulumi.Input[_builtins.str]:
        """
        Name of the Storage Configuration.
        """
        return pulumi.get(self, "config_name")

    @config_name.setter
    def config_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "config_name", value)

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Input[_builtins.str]:
        """
        Location ID.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter(name="storageTemplateName")
    def storage_template_name(self) -> pulumi.Input[_builtins.str]:
        """
        The Storage Template Name.
        """
        return pulumi.get(self, "storage_template_name")

    @storage_template_name.setter
    def storage_template_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "storage_template_name", value)

    @_builtins.property
    @pulumi.getter(name="storageTemplateVersion")
    def storage_template_version(self) -> pulumi.Input[_builtins.str]:
        """
        The Storage Template Version.
        """
        return pulumi.get(self, "storage_template_version")

    @storage_template_version.setter
    def storage_template_version(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "storage_template_version", value)

    @_builtins.property
    @pulumi.getter(name="userConfigParameters")
    def user_config_parameters(self) -> pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]:
        """
        User Config Parameters to pass as a Map of string key-value.
        """
        return pulumi.get(self, "user_config_parameters")

    @user_config_parameters.setter
    def user_config_parameters(self, value: pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "user_config_parameters", value)

    @_builtins.property
    @pulumi.getter(name="userSecretParameters")
    def user_secret_parameters(self) -> pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]:
        """
        User Secret Parameters to pass as a Map of string key-value.
        """
        return pulumi.get(self, "user_secret_parameters")

    @user_secret_parameters.setter
    def user_secret_parameters(self, value: pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "user_secret_parameters", value)

    @_builtins.property
    @pulumi.getter(name="deleteAssignments")
    def delete_assignments(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set to delete all assignments during a configuration destroy.
        """
        return pulumi.get(self, "delete_assignments")

    @delete_assignments.setter
    def delete_assignments(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_assignments", value)

    @_builtins.property
    @pulumi.getter(name="satelliteStorageConfigurationId")
    def satellite_storage_configuration_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "satellite_storage_configuration_id")

    @satellite_storage_configuration_id.setter
    def satellite_storage_configuration_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "satellite_storage_configuration_id", value)

    @_builtins.property
    @pulumi.getter(name="storageClassParameters")
    def storage_class_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]]]:
        return pulumi.get(self, "storage_class_parameters")

    @storage_class_parameters.setter
    def storage_class_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]]]):
        pulumi.set(self, "storage_class_parameters", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['SatelliteStorageConfigurationTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['SatelliteStorageConfigurationTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="updateAssignments")
    def update_assignments(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set to update all assignments during a configuration update.
        """
        return pulumi.get(self, "update_assignments")

    @update_assignments.setter
    def update_assignments(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "update_assignments", value)


@pulumi.input_type
class _SatelliteStorageConfigurationState:
    def __init__(__self__, *,
                 config_name: Optional[pulumi.Input[_builtins.str]] = None,
                 config_version: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_assignments: Optional[pulumi.Input[_builtins.bool]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 satellite_storage_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_class_parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]]] = None,
                 storage_template_name: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_template_version: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['SatelliteStorageConfigurationTimeoutsArgs']] = None,
                 update_assignments: Optional[pulumi.Input[_builtins.bool]] = None,
                 user_config_parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 user_secret_parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 uuid: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SatelliteStorageConfiguration resources.
        :param pulumi.Input[_builtins.str] config_name: Name of the Storage Configuration.
        :param pulumi.Input[_builtins.str] config_version: Version of the Storage Configuration.
        :param pulumi.Input[_builtins.bool] delete_assignments: Set to delete all assignments during a configuration destroy.
        :param pulumi.Input[_builtins.str] location: Location ID.
        :param pulumi.Input[_builtins.str] storage_template_name: The Storage Template Name.
        :param pulumi.Input[_builtins.str] storage_template_version: The Storage Template Version.
        :param pulumi.Input[_builtins.bool] update_assignments: Set to update all assignments during a configuration update.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] user_config_parameters: User Config Parameters to pass as a Map of string key-value.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] user_secret_parameters: User Secret Parameters to pass as a Map of string key-value.
        :param pulumi.Input[_builtins.str] uuid: The Universally Unique IDentifier (UUID) of the Storage Configuration.
        """
        if config_name is not None:
            pulumi.set(__self__, "config_name", config_name)
        if config_version is not None:
            pulumi.set(__self__, "config_version", config_version)
        if delete_assignments is not None:
            pulumi.set(__self__, "delete_assignments", delete_assignments)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if satellite_storage_configuration_id is not None:
            pulumi.set(__self__, "satellite_storage_configuration_id", satellite_storage_configuration_id)
        if storage_class_parameters is not None:
            pulumi.set(__self__, "storage_class_parameters", storage_class_parameters)
        if storage_template_name is not None:
            pulumi.set(__self__, "storage_template_name", storage_template_name)
        if storage_template_version is not None:
            pulumi.set(__self__, "storage_template_version", storage_template_version)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if update_assignments is not None:
            pulumi.set(__self__, "update_assignments", update_assignments)
        if user_config_parameters is not None:
            pulumi.set(__self__, "user_config_parameters", user_config_parameters)
        if user_secret_parameters is not None:
            pulumi.set(__self__, "user_secret_parameters", user_secret_parameters)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @_builtins.property
    @pulumi.getter(name="configName")
    def config_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the Storage Configuration.
        """
        return pulumi.get(self, "config_name")

    @config_name.setter
    def config_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "config_name", value)

    @_builtins.property
    @pulumi.getter(name="configVersion")
    def config_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Version of the Storage Configuration.
        """
        return pulumi.get(self, "config_version")

    @config_version.setter
    def config_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "config_version", value)

    @_builtins.property
    @pulumi.getter(name="deleteAssignments")
    def delete_assignments(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set to delete all assignments during a configuration destroy.
        """
        return pulumi.get(self, "delete_assignments")

    @delete_assignments.setter
    def delete_assignments(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_assignments", value)

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Location ID.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter(name="satelliteStorageConfigurationId")
    def satellite_storage_configuration_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "satellite_storage_configuration_id")

    @satellite_storage_configuration_id.setter
    def satellite_storage_configuration_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "satellite_storage_configuration_id", value)

    @_builtins.property
    @pulumi.getter(name="storageClassParameters")
    def storage_class_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]]]:
        return pulumi.get(self, "storage_class_parameters")

    @storage_class_parameters.setter
    def storage_class_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]]]):
        pulumi.set(self, "storage_class_parameters", value)

    @_builtins.property
    @pulumi.getter(name="storageTemplateName")
    def storage_template_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Storage Template Name.
        """
        return pulumi.get(self, "storage_template_name")

    @storage_template_name.setter
    def storage_template_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_template_name", value)

    @_builtins.property
    @pulumi.getter(name="storageTemplateVersion")
    def storage_template_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Storage Template Version.
        """
        return pulumi.get(self, "storage_template_version")

    @storage_template_version.setter
    def storage_template_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "storage_template_version", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['SatelliteStorageConfigurationTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['SatelliteStorageConfigurationTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="updateAssignments")
    def update_assignments(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set to update all assignments during a configuration update.
        """
        return pulumi.get(self, "update_assignments")

    @update_assignments.setter
    def update_assignments(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "update_assignments", value)

    @_builtins.property
    @pulumi.getter(name="userConfigParameters")
    def user_config_parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        User Config Parameters to pass as a Map of string key-value.
        """
        return pulumi.get(self, "user_config_parameters")

    @user_config_parameters.setter
    def user_config_parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "user_config_parameters", value)

    @_builtins.property
    @pulumi.getter(name="userSecretParameters")
    def user_secret_parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        User Secret Parameters to pass as a Map of string key-value.
        """
        return pulumi.get(self, "user_secret_parameters")

    @user_secret_parameters.setter
    def user_secret_parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "user_secret_parameters", value)

    @_builtins.property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Universally Unique IDentifier (UUID) of the Storage Configuration.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "uuid", value)


@pulumi.type_token("ibm:index/satelliteStorageConfiguration:SatelliteStorageConfiguration")
class SatelliteStorageConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config_name: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_assignments: Optional[pulumi.Input[_builtins.bool]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 satellite_storage_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_class_parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]]] = None,
                 storage_template_name: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_template_version: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['SatelliteStorageConfigurationTimeoutsArgs', 'SatelliteStorageConfigurationTimeoutsArgsDict']]] = None,
                 update_assignments: Optional[pulumi.Input[_builtins.bool]] = None,
                 user_config_parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 user_secret_parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Create a SatelliteStorageConfiguration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] config_name: Name of the Storage Configuration.
        :param pulumi.Input[_builtins.bool] delete_assignments: Set to delete all assignments during a configuration destroy.
        :param pulumi.Input[_builtins.str] location: Location ID.
        :param pulumi.Input[_builtins.str] storage_template_name: The Storage Template Name.
        :param pulumi.Input[_builtins.str] storage_template_version: The Storage Template Version.
        :param pulumi.Input[_builtins.bool] update_assignments: Set to update all assignments during a configuration update.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] user_config_parameters: User Config Parameters to pass as a Map of string key-value.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] user_secret_parameters: User Secret Parameters to pass as a Map of string key-value.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SatelliteStorageConfigurationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SatelliteStorageConfiguration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SatelliteStorageConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SatelliteStorageConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config_name: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_assignments: Optional[pulumi.Input[_builtins.bool]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 satellite_storage_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_class_parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]]] = None,
                 storage_template_name: Optional[pulumi.Input[_builtins.str]] = None,
                 storage_template_version: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['SatelliteStorageConfigurationTimeoutsArgs', 'SatelliteStorageConfigurationTimeoutsArgsDict']]] = None,
                 update_assignments: Optional[pulumi.Input[_builtins.bool]] = None,
                 user_config_parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 user_secret_parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SatelliteStorageConfigurationArgs.__new__(SatelliteStorageConfigurationArgs)

            if config_name is None and not opts.urn:
                raise TypeError("Missing required property 'config_name'")
            __props__.__dict__["config_name"] = config_name
            __props__.__dict__["delete_assignments"] = delete_assignments
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["satellite_storage_configuration_id"] = satellite_storage_configuration_id
            __props__.__dict__["storage_class_parameters"] = storage_class_parameters
            if storage_template_name is None and not opts.urn:
                raise TypeError("Missing required property 'storage_template_name'")
            __props__.__dict__["storage_template_name"] = storage_template_name
            if storage_template_version is None and not opts.urn:
                raise TypeError("Missing required property 'storage_template_version'")
            __props__.__dict__["storage_template_version"] = storage_template_version
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["update_assignments"] = update_assignments
            if user_config_parameters is None and not opts.urn:
                raise TypeError("Missing required property 'user_config_parameters'")
            __props__.__dict__["user_config_parameters"] = user_config_parameters
            if user_secret_parameters is None and not opts.urn:
                raise TypeError("Missing required property 'user_secret_parameters'")
            __props__.__dict__["user_secret_parameters"] = None if user_secret_parameters is None else pulumi.Output.secret(user_secret_parameters)
            __props__.__dict__["config_version"] = None
            __props__.__dict__["uuid"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["userSecretParameters"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(SatelliteStorageConfiguration, __self__).__init__(
            'ibm:index/satelliteStorageConfiguration:SatelliteStorageConfiguration',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            config_name: Optional[pulumi.Input[_builtins.str]] = None,
            config_version: Optional[pulumi.Input[_builtins.str]] = None,
            delete_assignments: Optional[pulumi.Input[_builtins.bool]] = None,
            location: Optional[pulumi.Input[_builtins.str]] = None,
            satellite_storage_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
            storage_class_parameters: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]]] = None,
            storage_template_name: Optional[pulumi.Input[_builtins.str]] = None,
            storage_template_version: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['SatelliteStorageConfigurationTimeoutsArgs', 'SatelliteStorageConfigurationTimeoutsArgsDict']]] = None,
            update_assignments: Optional[pulumi.Input[_builtins.bool]] = None,
            user_config_parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            user_secret_parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            uuid: Optional[pulumi.Input[_builtins.str]] = None) -> 'SatelliteStorageConfiguration':
        """
        Get an existing SatelliteStorageConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] config_name: Name of the Storage Configuration.
        :param pulumi.Input[_builtins.str] config_version: Version of the Storage Configuration.
        :param pulumi.Input[_builtins.bool] delete_assignments: Set to delete all assignments during a configuration destroy.
        :param pulumi.Input[_builtins.str] location: Location ID.
        :param pulumi.Input[_builtins.str] storage_template_name: The Storage Template Name.
        :param pulumi.Input[_builtins.str] storage_template_version: The Storage Template Version.
        :param pulumi.Input[_builtins.bool] update_assignments: Set to update all assignments during a configuration update.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] user_config_parameters: User Config Parameters to pass as a Map of string key-value.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] user_secret_parameters: User Secret Parameters to pass as a Map of string key-value.
        :param pulumi.Input[_builtins.str] uuid: The Universally Unique IDentifier (UUID) of the Storage Configuration.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SatelliteStorageConfigurationState.__new__(_SatelliteStorageConfigurationState)

        __props__.__dict__["config_name"] = config_name
        __props__.__dict__["config_version"] = config_version
        __props__.__dict__["delete_assignments"] = delete_assignments
        __props__.__dict__["location"] = location
        __props__.__dict__["satellite_storage_configuration_id"] = satellite_storage_configuration_id
        __props__.__dict__["storage_class_parameters"] = storage_class_parameters
        __props__.__dict__["storage_template_name"] = storage_template_name
        __props__.__dict__["storage_template_version"] = storage_template_version
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["update_assignments"] = update_assignments
        __props__.__dict__["user_config_parameters"] = user_config_parameters
        __props__.__dict__["user_secret_parameters"] = user_secret_parameters
        __props__.__dict__["uuid"] = uuid
        return SatelliteStorageConfiguration(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="configName")
    def config_name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the Storage Configuration.
        """
        return pulumi.get(self, "config_name")

    @_builtins.property
    @pulumi.getter(name="configVersion")
    def config_version(self) -> pulumi.Output[_builtins.str]:
        """
        Version of the Storage Configuration.
        """
        return pulumi.get(self, "config_version")

    @_builtins.property
    @pulumi.getter(name="deleteAssignments")
    def delete_assignments(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Set to delete all assignments during a configuration destroy.
        """
        return pulumi.get(self, "delete_assignments")

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Output[_builtins.str]:
        """
        Location ID.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter(name="satelliteStorageConfigurationId")
    def satellite_storage_configuration_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "satellite_storage_configuration_id")

    @_builtins.property
    @pulumi.getter(name="storageClassParameters")
    def storage_class_parameters(self) -> pulumi.Output[Optional[Sequence[Mapping[str, _builtins.str]]]]:
        return pulumi.get(self, "storage_class_parameters")

    @_builtins.property
    @pulumi.getter(name="storageTemplateName")
    def storage_template_name(self) -> pulumi.Output[_builtins.str]:
        """
        The Storage Template Name.
        """
        return pulumi.get(self, "storage_template_name")

    @_builtins.property
    @pulumi.getter(name="storageTemplateVersion")
    def storage_template_version(self) -> pulumi.Output[_builtins.str]:
        """
        The Storage Template Version.
        """
        return pulumi.get(self, "storage_template_version")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.SatelliteStorageConfigurationTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter(name="updateAssignments")
    def update_assignments(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Set to update all assignments during a configuration update.
        """
        return pulumi.get(self, "update_assignments")

    @_builtins.property
    @pulumi.getter(name="userConfigParameters")
    def user_config_parameters(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        User Config Parameters to pass as a Map of string key-value.
        """
        return pulumi.get(self, "user_config_parameters")

    @_builtins.property
    @pulumi.getter(name="userSecretParameters")
    def user_secret_parameters(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        User Secret Parameters to pass as a Map of string key-value.
        """
        return pulumi.get(self, "user_secret_parameters")

    @_builtins.property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[_builtins.str]:
        """
        The Universally Unique IDentifier (UUID) of the Storage Configuration.
        """
        return pulumi.get(self, "uuid")

