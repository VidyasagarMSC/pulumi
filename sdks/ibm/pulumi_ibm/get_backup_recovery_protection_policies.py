# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetBackupRecoveryProtectionPoliciesResult',
    'AwaitableGetBackupRecoveryProtectionPoliciesResult',
    'get_backup_recovery_protection_policies',
    'get_backup_recovery_protection_policies_output',
]

@pulumi.output_type
class GetBackupRecoveryProtectionPoliciesResult:
    """
    A collection of values returned by getBackupRecoveryProtectionPolicies.
    """
    def __init__(__self__, exclude_linked_policies=None, id=None, ids=None, include_replicated_policies=None, include_stats=None, policies=None, policy_names=None, request_initiator_type=None, types=None, x_ibm_tenant_id=None):
        if exclude_linked_policies and not isinstance(exclude_linked_policies, bool):
            raise TypeError("Expected argument 'exclude_linked_policies' to be a bool")
        pulumi.set(__self__, "exclude_linked_policies", exclude_linked_policies)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if include_replicated_policies and not isinstance(include_replicated_policies, bool):
            raise TypeError("Expected argument 'include_replicated_policies' to be a bool")
        pulumi.set(__self__, "include_replicated_policies", include_replicated_policies)
        if include_stats and not isinstance(include_stats, bool):
            raise TypeError("Expected argument 'include_stats' to be a bool")
        pulumi.set(__self__, "include_stats", include_stats)
        if policies and not isinstance(policies, list):
            raise TypeError("Expected argument 'policies' to be a list")
        pulumi.set(__self__, "policies", policies)
        if policy_names and not isinstance(policy_names, list):
            raise TypeError("Expected argument 'policy_names' to be a list")
        pulumi.set(__self__, "policy_names", policy_names)
        if request_initiator_type and not isinstance(request_initiator_type, str):
            raise TypeError("Expected argument 'request_initiator_type' to be a str")
        pulumi.set(__self__, "request_initiator_type", request_initiator_type)
        if types and not isinstance(types, list):
            raise TypeError("Expected argument 'types' to be a list")
        pulumi.set(__self__, "types", types)
        if x_ibm_tenant_id and not isinstance(x_ibm_tenant_id, str):
            raise TypeError("Expected argument 'x_ibm_tenant_id' to be a str")
        pulumi.set(__self__, "x_ibm_tenant_id", x_ibm_tenant_id)

    @_builtins.property
    @pulumi.getter(name="excludeLinkedPolicies")
    def exclude_linked_policies(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "exclude_linked_policies")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "ids")

    @_builtins.property
    @pulumi.getter(name="includeReplicatedPolicies")
    def include_replicated_policies(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "include_replicated_policies")

    @_builtins.property
    @pulumi.getter(name="includeStats")
    def include_stats(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "include_stats")

    @_builtins.property
    @pulumi.getter
    def policies(self) -> Sequence['outputs.GetBackupRecoveryProtectionPoliciesPolicyResult']:
        return pulumi.get(self, "policies")

    @_builtins.property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "policy_names")

    @_builtins.property
    @pulumi.getter(name="requestInitiatorType")
    def request_initiator_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "request_initiator_type")

    @_builtins.property
    @pulumi.getter
    def types(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "types")

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> _builtins.str:
        return pulumi.get(self, "x_ibm_tenant_id")


class AwaitableGetBackupRecoveryProtectionPoliciesResult(GetBackupRecoveryProtectionPoliciesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupRecoveryProtectionPoliciesResult(
            exclude_linked_policies=self.exclude_linked_policies,
            id=self.id,
            ids=self.ids,
            include_replicated_policies=self.include_replicated_policies,
            include_stats=self.include_stats,
            policies=self.policies,
            policy_names=self.policy_names,
            request_initiator_type=self.request_initiator_type,
            types=self.types,
            x_ibm_tenant_id=self.x_ibm_tenant_id)


def get_backup_recovery_protection_policies(exclude_linked_policies: Optional[_builtins.bool] = None,
                                            id: Optional[_builtins.str] = None,
                                            ids: Optional[Sequence[_builtins.str]] = None,
                                            include_replicated_policies: Optional[_builtins.bool] = None,
                                            include_stats: Optional[_builtins.bool] = None,
                                            policy_names: Optional[Sequence[_builtins.str]] = None,
                                            request_initiator_type: Optional[_builtins.str] = None,
                                            types: Optional[Sequence[_builtins.str]] = None,
                                            x_ibm_tenant_id: Optional[_builtins.str] = None,
                                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupRecoveryProtectionPoliciesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['excludeLinkedPolicies'] = exclude_linked_policies
    __args__['id'] = id
    __args__['ids'] = ids
    __args__['includeReplicatedPolicies'] = include_replicated_policies
    __args__['includeStats'] = include_stats
    __args__['policyNames'] = policy_names
    __args__['requestInitiatorType'] = request_initiator_type
    __args__['types'] = types
    __args__['xIbmTenantId'] = x_ibm_tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getBackupRecoveryProtectionPolicies:getBackupRecoveryProtectionPolicies', __args__, opts=opts, typ=GetBackupRecoveryProtectionPoliciesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetBackupRecoveryProtectionPoliciesResult(
        exclude_linked_policies=pulumi.get(__ret__, 'exclude_linked_policies'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        include_replicated_policies=pulumi.get(__ret__, 'include_replicated_policies'),
        include_stats=pulumi.get(__ret__, 'include_stats'),
        policies=pulumi.get(__ret__, 'policies'),
        policy_names=pulumi.get(__ret__, 'policy_names'),
        request_initiator_type=pulumi.get(__ret__, 'request_initiator_type'),
        types=pulumi.get(__ret__, 'types'),
        x_ibm_tenant_id=pulumi.get(__ret__, 'x_ibm_tenant_id'))
def get_backup_recovery_protection_policies_output(exclude_linked_policies: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                                   id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                   ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                   include_replicated_policies: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                                   include_stats: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                                   policy_names: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                   request_initiator_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                   types: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                   x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBackupRecoveryProtectionPoliciesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['excludeLinkedPolicies'] = exclude_linked_policies
    __args__['id'] = id
    __args__['ids'] = ids
    __args__['includeReplicatedPolicies'] = include_replicated_policies
    __args__['includeStats'] = include_stats
    __args__['policyNames'] = policy_names
    __args__['requestInitiatorType'] = request_initiator_type
    __args__['types'] = types
    __args__['xIbmTenantId'] = x_ibm_tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getBackupRecoveryProtectionPolicies:getBackupRecoveryProtectionPolicies', __args__, opts=opts, typ=GetBackupRecoveryProtectionPoliciesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetBackupRecoveryProtectionPoliciesResult(
        exclude_linked_policies=pulumi.get(__response__, 'exclude_linked_policies'),
        id=pulumi.get(__response__, 'id'),
        ids=pulumi.get(__response__, 'ids'),
        include_replicated_policies=pulumi.get(__response__, 'include_replicated_policies'),
        include_stats=pulumi.get(__response__, 'include_stats'),
        policies=pulumi.get(__response__, 'policies'),
        policy_names=pulumi.get(__response__, 'policy_names'),
        request_initiator_type=pulumi.get(__response__, 'request_initiator_type'),
        types=pulumi.get(__response__, 'types'),
        x_ibm_tenant_id=pulumi.get(__response__, 'x_ibm_tenant_id')))
