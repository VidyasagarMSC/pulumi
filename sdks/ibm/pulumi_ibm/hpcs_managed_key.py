# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['HpcsManagedKeyArgs', 'HpcsManagedKey']

@pulumi.input_type
class HpcsManagedKeyArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 label: pulumi.Input[_builtins.str],
                 region: pulumi.Input[_builtins.str],
                 template_name: pulumi.Input[_builtins.str],
                 uko_vault: pulumi.Input[_builtins.str],
                 vault: pulumi.Input['HpcsManagedKeyVaultArgs'],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 hpcs_managed_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['HpcsManagedKeyTagArgs']]]] = None):
        """
        The set of arguments for constructing a HpcsManagedKey resource.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the UKO instance this resource exists in.
        :param pulumi.Input[_builtins.str] label: The label of the key.
        :param pulumi.Input[_builtins.str] region: The region of the UKO instance this resource exists in.
        :param pulumi.Input[_builtins.str] template_name: Name of the key template to use when creating a key.
        :param pulumi.Input[_builtins.str] uko_vault: The UUID of the Vault in which the update is to take place.
        :param pulumi.Input['HpcsManagedKeyVaultArgs'] vault: ID of the Vault where the entity is to be created in.
        :param pulumi.Input[_builtins.str] description: Description of the managed key.
        :param pulumi.Input[_builtins.str] state: The state of the key.
        :param pulumi.Input[Sequence[pulumi.Input['HpcsManagedKeyTagArgs']]] tags: Key-value pairs associated with the key.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "template_name", template_name)
        pulumi.set(__self__, "uko_vault", uko_vault)
        pulumi.set(__self__, "vault", vault)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if hpcs_managed_key_id is not None:
            pulumi.set(__self__, "hpcs_managed_key_id", hpcs_managed_key_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the UKO instance this resource exists in.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def label(self) -> pulumi.Input[_builtins.str]:
        """
        The label of the key.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "label", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Input[_builtins.str]:
        """
        The region of the UKO instance this resource exists in.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Input[_builtins.str]:
        """
        Name of the key template to use when creating a key.
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "template_name", value)

    @_builtins.property
    @pulumi.getter(name="ukoVault")
    def uko_vault(self) -> pulumi.Input[_builtins.str]:
        """
        The UUID of the Vault in which the update is to take place.
        """
        return pulumi.get(self, "uko_vault")

    @uko_vault.setter
    def uko_vault(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "uko_vault", value)

    @_builtins.property
    @pulumi.getter
    def vault(self) -> pulumi.Input['HpcsManagedKeyVaultArgs']:
        """
        ID of the Vault where the entity is to be created in.
        """
        return pulumi.get(self, "vault")

    @vault.setter
    def vault(self, value: pulumi.Input['HpcsManagedKeyVaultArgs']):
        pulumi.set(self, "vault", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the managed key.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="hpcsManagedKeyId")
    def hpcs_managed_key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "hpcs_managed_key_id")

    @hpcs_managed_key_id.setter
    def hpcs_managed_key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hpcs_managed_key_id", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The state of the key.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HpcsManagedKeyTagArgs']]]]:
        """
        Key-value pairs associated with the key.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HpcsManagedKeyTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _HpcsManagedKeyState:
    def __init__(__self__, *,
                 activation_date: Optional[pulumi.Input[_builtins.str]] = None,
                 algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 etag: Optional[pulumi.Input[_builtins.str]] = None,
                 expiration_date: Optional[pulumi.Input[_builtins.str]] = None,
                 hpcs_managed_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instances: Optional[pulumi.Input[Sequence[pulumi.Input['HpcsManagedKeyInstanceArgs']]]] = None,
                 key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 referenced_keystores: Optional[pulumi.Input[Sequence[pulumi.Input['HpcsManagedKeyReferencedKeystoreArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 size: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['HpcsManagedKeyTagArgs']]]] = None,
                 template_name: Optional[pulumi.Input[_builtins.str]] = None,
                 templates: Optional[pulumi.Input[Sequence[pulumi.Input['HpcsManagedKeyTemplateArgs']]]] = None,
                 uko_vault: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_by: Optional[pulumi.Input[_builtins.str]] = None,
                 vault: Optional[pulumi.Input['HpcsManagedKeyVaultArgs']] = None,
                 verification_patterns: Optional[pulumi.Input[Sequence[pulumi.Input['HpcsManagedKeyVerificationPatternArgs']]]] = None):
        """
        Input properties used for looking up and filtering HpcsManagedKey resources.
        :param pulumi.Input[_builtins.str] activation_date: First day when the key is active.
        :param pulumi.Input[_builtins.str] algorithm: The algorithm of the key.
        :param pulumi.Input[_builtins.str] created_at: Date and time when the key was created.
        :param pulumi.Input[_builtins.str] created_by: ID of the user that created the key.
        :param pulumi.Input[_builtins.str] description: Description of the managed key.
        :param pulumi.Input[_builtins.str] expiration_date: Last day when the key is active.
        :param pulumi.Input[_builtins.str] href: A URL that uniquely identifies your cloud resource.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the UKO instance this resource exists in.
        :param pulumi.Input[Sequence[pulumi.Input['HpcsManagedKeyInstanceArgs']]] instances: key instances.
        :param pulumi.Input[_builtins.str] key_id: The UUID of the key.
        :param pulumi.Input[_builtins.str] label: The label of the key.
        :param pulumi.Input[Sequence[pulumi.Input['HpcsManagedKeyReferencedKeystoreArgs']]] referenced_keystores: referenced keystores.
        :param pulumi.Input[_builtins.str] region: The region of the UKO instance this resource exists in.
        :param pulumi.Input[_builtins.str] size: The size of the underlying cryptographic key or key pair. E.g. "256" for AES keys, or "2048" for RSA.
        :param pulumi.Input[_builtins.str] state: The state of the key.
        :param pulumi.Input[Sequence[pulumi.Input['HpcsManagedKeyTagArgs']]] tags: Key-value pairs associated with the key.
        :param pulumi.Input[_builtins.str] template_name: Name of the key template to use when creating a key.
        :param pulumi.Input[Sequence[pulumi.Input['HpcsManagedKeyTemplateArgs']]] templates: Reference to a key template.
        :param pulumi.Input[_builtins.str] uko_vault: The UUID of the Vault in which the update is to take place.
        :param pulumi.Input[_builtins.str] updated_at: Date and time when the key was last updated.
        :param pulumi.Input[_builtins.str] updated_by: ID of the user that last updated the key.
        :param pulumi.Input['HpcsManagedKeyVaultArgs'] vault: ID of the Vault where the entity is to be created in.
        :param pulumi.Input[Sequence[pulumi.Input['HpcsManagedKeyVerificationPatternArgs']]] verification_patterns: A list of verification patterns of the key (e.g. public key hash for RSA keys).
        """
        if activation_date is not None:
            pulumi.set(__self__, "activation_date", activation_date)
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if expiration_date is not None:
            pulumi.set(__self__, "expiration_date", expiration_date)
        if hpcs_managed_key_id is not None:
            pulumi.set(__self__, "hpcs_managed_key_id", hpcs_managed_key_id)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instances is not None:
            pulumi.set(__self__, "instances", instances)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if referenced_keystores is not None:
            pulumi.set(__self__, "referenced_keystores", referenced_keystores)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if template_name is not None:
            pulumi.set(__self__, "template_name", template_name)
        if templates is not None:
            pulumi.set(__self__, "templates", templates)
        if uko_vault is not None:
            pulumi.set(__self__, "uko_vault", uko_vault)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if vault is not None:
            pulumi.set(__self__, "vault", vault)
        if verification_patterns is not None:
            pulumi.set(__self__, "verification_patterns", verification_patterns)

    @_builtins.property
    @pulumi.getter(name="activationDate")
    def activation_date(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        First day when the key is active.
        """
        return pulumi.get(self, "activation_date")

    @activation_date.setter
    def activation_date(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "activation_date", value)

    @_builtins.property
    @pulumi.getter
    def algorithm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The algorithm of the key.
        """
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "algorithm", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Date and time when the key was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the user that created the key.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the managed key.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "etag", value)

    @_builtins.property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Last day when the key is active.
        """
        return pulumi.get(self, "expiration_date")

    @expiration_date.setter
    def expiration_date(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expiration_date", value)

    @_builtins.property
    @pulumi.getter(name="hpcsManagedKeyId")
    def hpcs_managed_key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "hpcs_managed_key_id")

    @hpcs_managed_key_id.setter
    def hpcs_managed_key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hpcs_managed_key_id", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A URL that uniquely identifies your cloud resource.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the UKO instance this resource exists in.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def instances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HpcsManagedKeyInstanceArgs']]]]:
        """
        key instances.
        """
        return pulumi.get(self, "instances")

    @instances.setter
    def instances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HpcsManagedKeyInstanceArgs']]]]):
        pulumi.set(self, "instances", value)

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The UUID of the key.
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_id", value)

    @_builtins.property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The label of the key.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "label", value)

    @_builtins.property
    @pulumi.getter(name="referencedKeystores")
    def referenced_keystores(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HpcsManagedKeyReferencedKeystoreArgs']]]]:
        """
        referenced keystores.
        """
        return pulumi.get(self, "referenced_keystores")

    @referenced_keystores.setter
    def referenced_keystores(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HpcsManagedKeyReferencedKeystoreArgs']]]]):
        pulumi.set(self, "referenced_keystores", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the UKO instance this resource exists in.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The size of the underlying cryptographic key or key pair. E.g. "256" for AES keys, or "2048" for RSA.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The state of the key.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HpcsManagedKeyTagArgs']]]]:
        """
        Key-value pairs associated with the key.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HpcsManagedKeyTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="templateName")
    def template_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the key template to use when creating a key.
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_name", value)

    @_builtins.property
    @pulumi.getter
    def templates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HpcsManagedKeyTemplateArgs']]]]:
        """
        Reference to a key template.
        """
        return pulumi.get(self, "templates")

    @templates.setter
    def templates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HpcsManagedKeyTemplateArgs']]]]):
        pulumi.set(self, "templates", value)

    @_builtins.property
    @pulumi.getter(name="ukoVault")
    def uko_vault(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The UUID of the Vault in which the update is to take place.
        """
        return pulumi.get(self, "uko_vault")

    @uko_vault.setter
    def uko_vault(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "uko_vault", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Date and time when the key was last updated.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the user that last updated the key.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_by", value)

    @_builtins.property
    @pulumi.getter
    def vault(self) -> Optional[pulumi.Input['HpcsManagedKeyVaultArgs']]:
        """
        ID of the Vault where the entity is to be created in.
        """
        return pulumi.get(self, "vault")

    @vault.setter
    def vault(self, value: Optional[pulumi.Input['HpcsManagedKeyVaultArgs']]):
        pulumi.set(self, "vault", value)

    @_builtins.property
    @pulumi.getter(name="verificationPatterns")
    def verification_patterns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HpcsManagedKeyVerificationPatternArgs']]]]:
        """
        A list of verification patterns of the key (e.g. public key hash for RSA keys).
        """
        return pulumi.get(self, "verification_patterns")

    @verification_patterns.setter
    def verification_patterns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HpcsManagedKeyVerificationPatternArgs']]]]):
        pulumi.set(self, "verification_patterns", value)


@pulumi.type_token("ibm:index/hpcsManagedKey:HpcsManagedKey")
class HpcsManagedKey(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 hpcs_managed_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['HpcsManagedKeyTagArgs', 'HpcsManagedKeyTagArgsDict']]]]] = None,
                 template_name: Optional[pulumi.Input[_builtins.str]] = None,
                 uko_vault: Optional[pulumi.Input[_builtins.str]] = None,
                 vault: Optional[pulumi.Input[Union['HpcsManagedKeyVaultArgs', 'HpcsManagedKeyVaultArgsDict']]] = None,
                 __props__=None):
        """
        Create a HpcsManagedKey resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Description of the managed key.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the UKO instance this resource exists in.
        :param pulumi.Input[_builtins.str] label: The label of the key.
        :param pulumi.Input[_builtins.str] region: The region of the UKO instance this resource exists in.
        :param pulumi.Input[_builtins.str] state: The state of the key.
        :param pulumi.Input[Sequence[pulumi.Input[Union['HpcsManagedKeyTagArgs', 'HpcsManagedKeyTagArgsDict']]]] tags: Key-value pairs associated with the key.
        :param pulumi.Input[_builtins.str] template_name: Name of the key template to use when creating a key.
        :param pulumi.Input[_builtins.str] uko_vault: The UUID of the Vault in which the update is to take place.
        :param pulumi.Input[Union['HpcsManagedKeyVaultArgs', 'HpcsManagedKeyVaultArgsDict']] vault: ID of the Vault where the entity is to be created in.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: HpcsManagedKeyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a HpcsManagedKey resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param HpcsManagedKeyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(HpcsManagedKeyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 hpcs_managed_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['HpcsManagedKeyTagArgs', 'HpcsManagedKeyTagArgsDict']]]]] = None,
                 template_name: Optional[pulumi.Input[_builtins.str]] = None,
                 uko_vault: Optional[pulumi.Input[_builtins.str]] = None,
                 vault: Optional[pulumi.Input[Union['HpcsManagedKeyVaultArgs', 'HpcsManagedKeyVaultArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = HpcsManagedKeyArgs.__new__(HpcsManagedKeyArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["hpcs_managed_key_id"] = hpcs_managed_key_id
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if label is None and not opts.urn:
                raise TypeError("Missing required property 'label'")
            __props__.__dict__["label"] = label
            if region is None and not opts.urn:
                raise TypeError("Missing required property 'region'")
            __props__.__dict__["region"] = region
            __props__.__dict__["state"] = state
            __props__.__dict__["tags"] = tags
            if template_name is None and not opts.urn:
                raise TypeError("Missing required property 'template_name'")
            __props__.__dict__["template_name"] = template_name
            if uko_vault is None and not opts.urn:
                raise TypeError("Missing required property 'uko_vault'")
            __props__.__dict__["uko_vault"] = uko_vault
            if vault is None and not opts.urn:
                raise TypeError("Missing required property 'vault'")
            __props__.__dict__["vault"] = vault
            __props__.__dict__["activation_date"] = None
            __props__.__dict__["algorithm"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["etag"] = None
            __props__.__dict__["expiration_date"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["instances"] = None
            __props__.__dict__["key_id"] = None
            __props__.__dict__["referenced_keystores"] = None
            __props__.__dict__["size"] = None
            __props__.__dict__["templates"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["updated_by"] = None
            __props__.__dict__["verification_patterns"] = None
        super(HpcsManagedKey, __self__).__init__(
            'ibm:index/hpcsManagedKey:HpcsManagedKey',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            activation_date: Optional[pulumi.Input[_builtins.str]] = None,
            algorithm: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            created_by: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            etag: Optional[pulumi.Input[_builtins.str]] = None,
            expiration_date: Optional[pulumi.Input[_builtins.str]] = None,
            hpcs_managed_key_id: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            instances: Optional[pulumi.Input[Sequence[pulumi.Input[Union['HpcsManagedKeyInstanceArgs', 'HpcsManagedKeyInstanceArgsDict']]]]] = None,
            key_id: Optional[pulumi.Input[_builtins.str]] = None,
            label: Optional[pulumi.Input[_builtins.str]] = None,
            referenced_keystores: Optional[pulumi.Input[Sequence[pulumi.Input[Union['HpcsManagedKeyReferencedKeystoreArgs', 'HpcsManagedKeyReferencedKeystoreArgsDict']]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            size: Optional[pulumi.Input[_builtins.str]] = None,
            state: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['HpcsManagedKeyTagArgs', 'HpcsManagedKeyTagArgsDict']]]]] = None,
            template_name: Optional[pulumi.Input[_builtins.str]] = None,
            templates: Optional[pulumi.Input[Sequence[pulumi.Input[Union['HpcsManagedKeyTemplateArgs', 'HpcsManagedKeyTemplateArgsDict']]]]] = None,
            uko_vault: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            updated_by: Optional[pulumi.Input[_builtins.str]] = None,
            vault: Optional[pulumi.Input[Union['HpcsManagedKeyVaultArgs', 'HpcsManagedKeyVaultArgsDict']]] = None,
            verification_patterns: Optional[pulumi.Input[Sequence[pulumi.Input[Union['HpcsManagedKeyVerificationPatternArgs', 'HpcsManagedKeyVerificationPatternArgsDict']]]]] = None) -> 'HpcsManagedKey':
        """
        Get an existing HpcsManagedKey resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] activation_date: First day when the key is active.
        :param pulumi.Input[_builtins.str] algorithm: The algorithm of the key.
        :param pulumi.Input[_builtins.str] created_at: Date and time when the key was created.
        :param pulumi.Input[_builtins.str] created_by: ID of the user that created the key.
        :param pulumi.Input[_builtins.str] description: Description of the managed key.
        :param pulumi.Input[_builtins.str] expiration_date: Last day when the key is active.
        :param pulumi.Input[_builtins.str] href: A URL that uniquely identifies your cloud resource.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the UKO instance this resource exists in.
        :param pulumi.Input[Sequence[pulumi.Input[Union['HpcsManagedKeyInstanceArgs', 'HpcsManagedKeyInstanceArgsDict']]]] instances: key instances.
        :param pulumi.Input[_builtins.str] key_id: The UUID of the key.
        :param pulumi.Input[_builtins.str] label: The label of the key.
        :param pulumi.Input[Sequence[pulumi.Input[Union['HpcsManagedKeyReferencedKeystoreArgs', 'HpcsManagedKeyReferencedKeystoreArgsDict']]]] referenced_keystores: referenced keystores.
        :param pulumi.Input[_builtins.str] region: The region of the UKO instance this resource exists in.
        :param pulumi.Input[_builtins.str] size: The size of the underlying cryptographic key or key pair. E.g. "256" for AES keys, or "2048" for RSA.
        :param pulumi.Input[_builtins.str] state: The state of the key.
        :param pulumi.Input[Sequence[pulumi.Input[Union['HpcsManagedKeyTagArgs', 'HpcsManagedKeyTagArgsDict']]]] tags: Key-value pairs associated with the key.
        :param pulumi.Input[_builtins.str] template_name: Name of the key template to use when creating a key.
        :param pulumi.Input[Sequence[pulumi.Input[Union['HpcsManagedKeyTemplateArgs', 'HpcsManagedKeyTemplateArgsDict']]]] templates: Reference to a key template.
        :param pulumi.Input[_builtins.str] uko_vault: The UUID of the Vault in which the update is to take place.
        :param pulumi.Input[_builtins.str] updated_at: Date and time when the key was last updated.
        :param pulumi.Input[_builtins.str] updated_by: ID of the user that last updated the key.
        :param pulumi.Input[Union['HpcsManagedKeyVaultArgs', 'HpcsManagedKeyVaultArgsDict']] vault: ID of the Vault where the entity is to be created in.
        :param pulumi.Input[Sequence[pulumi.Input[Union['HpcsManagedKeyVerificationPatternArgs', 'HpcsManagedKeyVerificationPatternArgsDict']]]] verification_patterns: A list of verification patterns of the key (e.g. public key hash for RSA keys).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _HpcsManagedKeyState.__new__(_HpcsManagedKeyState)

        __props__.__dict__["activation_date"] = activation_date
        __props__.__dict__["algorithm"] = algorithm
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["description"] = description
        __props__.__dict__["etag"] = etag
        __props__.__dict__["expiration_date"] = expiration_date
        __props__.__dict__["hpcs_managed_key_id"] = hpcs_managed_key_id
        __props__.__dict__["href"] = href
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["instances"] = instances
        __props__.__dict__["key_id"] = key_id
        __props__.__dict__["label"] = label
        __props__.__dict__["referenced_keystores"] = referenced_keystores
        __props__.__dict__["region"] = region
        __props__.__dict__["size"] = size
        __props__.__dict__["state"] = state
        __props__.__dict__["tags"] = tags
        __props__.__dict__["template_name"] = template_name
        __props__.__dict__["templates"] = templates
        __props__.__dict__["uko_vault"] = uko_vault
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["updated_by"] = updated_by
        __props__.__dict__["vault"] = vault
        __props__.__dict__["verification_patterns"] = verification_patterns
        return HpcsManagedKey(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="activationDate")
    def activation_date(self) -> pulumi.Output[_builtins.str]:
        """
        First day when the key is active.
        """
        return pulumi.get(self, "activation_date")

    @_builtins.property
    @pulumi.getter
    def algorithm(self) -> pulumi.Output[_builtins.str]:
        """
        The algorithm of the key.
        """
        return pulumi.get(self, "algorithm")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Date and time when the key was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[_builtins.str]:
        """
        ID of the user that created the key.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Description of the managed key.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def etag(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "etag")

    @_builtins.property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> pulumi.Output[_builtins.str]:
        """
        Last day when the key is active.
        """
        return pulumi.get(self, "expiration_date")

    @_builtins.property
    @pulumi.getter(name="hpcsManagedKeyId")
    def hpcs_managed_key_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "hpcs_managed_key_id")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        A URL that uniquely identifies your cloud resource.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the UKO instance this resource exists in.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def instances(self) -> pulumi.Output[Sequence['outputs.HpcsManagedKeyInstance']]:
        """
        key instances.
        """
        return pulumi.get(self, "instances")

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> pulumi.Output[_builtins.str]:
        """
        The UUID of the key.
        """
        return pulumi.get(self, "key_id")

    @_builtins.property
    @pulumi.getter
    def label(self) -> pulumi.Output[_builtins.str]:
        """
        The label of the key.
        """
        return pulumi.get(self, "label")

    @_builtins.property
    @pulumi.getter(name="referencedKeystores")
    def referenced_keystores(self) -> pulumi.Output[Sequence['outputs.HpcsManagedKeyReferencedKeystore']]:
        """
        referenced keystores.
        """
        return pulumi.get(self, "referenced_keystores")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region of the UKO instance this resource exists in.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def size(self) -> pulumi.Output[_builtins.str]:
        """
        The size of the underlying cryptographic key or key pair. E.g. "256" for AES keys, or "2048" for RSA.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def state(self) -> pulumi.Output[_builtins.str]:
        """
        The state of the key.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.HpcsManagedKeyTag']]]:
        """
        Key-value pairs associated with the key.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the key template to use when creating a key.
        """
        return pulumi.get(self, "template_name")

    @_builtins.property
    @pulumi.getter
    def templates(self) -> pulumi.Output[Sequence['outputs.HpcsManagedKeyTemplate']]:
        """
        Reference to a key template.
        """
        return pulumi.get(self, "templates")

    @_builtins.property
    @pulumi.getter(name="ukoVault")
    def uko_vault(self) -> pulumi.Output[_builtins.str]:
        """
        The UUID of the Vault in which the update is to take place.
        """
        return pulumi.get(self, "uko_vault")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Date and time when the key was last updated.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> pulumi.Output[_builtins.str]:
        """
        ID of the user that last updated the key.
        """
        return pulumi.get(self, "updated_by")

    @_builtins.property
    @pulumi.getter
    def vault(self) -> pulumi.Output['outputs.HpcsManagedKeyVault']:
        """
        ID of the Vault where the entity is to be created in.
        """
        return pulumi.get(self, "vault")

    @_builtins.property
    @pulumi.getter(name="verificationPatterns")
    def verification_patterns(self) -> pulumi.Output[Sequence['outputs.HpcsManagedKeyVerificationPattern']]:
        """
        A list of verification patterns of the key (e.g. public key hash for RSA keys).
        """
        return pulumi.get(self, "verification_patterns")

