# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['OnboardingResourceBrokerArgs', 'OnboardingResourceBroker']

@pulumi.input_type
class OnboardingResourceBrokerArgs:
    def __init__(__self__, *,
                 auth_scheme: pulumi.Input[_builtins.str],
                 broker_url: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 allow_context_updates: Optional[pulumi.Input[_builtins.bool]] = None,
                 auth_password: Optional[pulumi.Input[_builtins.str]] = None,
                 auth_username: Optional[pulumi.Input[_builtins.str]] = None,
                 catalog_type: Optional[pulumi.Input[_builtins.str]] = None,
                 env: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 onboarding_resource_broker_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a OnboardingResourceBroker resource.
        :param pulumi.Input[_builtins.str] auth_scheme: The supported authentication scheme for the broker.
        :param pulumi.Input[_builtins.str] broker_url: The URL associated with the broker application.
        :param pulumi.Input[_builtins.str] type: The type of the provisioning model.
        :param pulumi.Input[_builtins.bool] allow_context_updates: Whether the resource controller will call the broker for any context changes to the instance. Currently, the only
               context related change is an instance name update.
        :param pulumi.Input[_builtins.str] auth_password: The authentication password to reach the broker.
        :param pulumi.Input[_builtins.str] auth_username: The authentication username to reach the broker.
        :param pulumi.Input[_builtins.str] catalog_type: To enable the provisioning of your broker, set this parameter value to `service`.
        :param pulumi.Input[_builtins.str] env: The environment to fetch this object from.
        :param pulumi.Input[_builtins.str] name: The name of the broker.
        :param pulumi.Input[_builtins.str] region: The region where the pricing plan is available.
        :param pulumi.Input[_builtins.str] resource_group_crn: The cloud resource name of the resource group.
        :param pulumi.Input[_builtins.str] state: The state of the broker.
        """
        pulumi.set(__self__, "auth_scheme", auth_scheme)
        pulumi.set(__self__, "broker_url", broker_url)
        pulumi.set(__self__, "type", type)
        if allow_context_updates is not None:
            pulumi.set(__self__, "allow_context_updates", allow_context_updates)
        if auth_password is not None:
            pulumi.set(__self__, "auth_password", auth_password)
        if auth_username is not None:
            pulumi.set(__self__, "auth_username", auth_username)
        if catalog_type is not None:
            pulumi.set(__self__, "catalog_type", catalog_type)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if onboarding_resource_broker_id is not None:
            pulumi.set(__self__, "onboarding_resource_broker_id", onboarding_resource_broker_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_group_crn is not None:
            pulumi.set(__self__, "resource_group_crn", resource_group_crn)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="authScheme")
    def auth_scheme(self) -> pulumi.Input[_builtins.str]:
        """
        The supported authentication scheme for the broker.
        """
        return pulumi.get(self, "auth_scheme")

    @auth_scheme.setter
    def auth_scheme(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "auth_scheme", value)

    @_builtins.property
    @pulumi.getter(name="brokerUrl")
    def broker_url(self) -> pulumi.Input[_builtins.str]:
        """
        The URL associated with the broker application.
        """
        return pulumi.get(self, "broker_url")

    @broker_url.setter
    def broker_url(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "broker_url", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        The type of the provisioning model.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="allowContextUpdates")
    def allow_context_updates(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the resource controller will call the broker for any context changes to the instance. Currently, the only
        context related change is an instance name update.
        """
        return pulumi.get(self, "allow_context_updates")

    @allow_context_updates.setter
    def allow_context_updates(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_context_updates", value)

    @_builtins.property
    @pulumi.getter(name="authPassword")
    def auth_password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The authentication password to reach the broker.
        """
        return pulumi.get(self, "auth_password")

    @auth_password.setter
    def auth_password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auth_password", value)

    @_builtins.property
    @pulumi.getter(name="authUsername")
    def auth_username(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The authentication username to reach the broker.
        """
        return pulumi.get(self, "auth_username")

    @auth_username.setter
    def auth_username(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auth_username", value)

    @_builtins.property
    @pulumi.getter(name="catalogType")
    def catalog_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        To enable the provisioning of your broker, set this parameter value to `service`.
        """
        return pulumi.get(self, "catalog_type")

    @catalog_type.setter
    def catalog_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "catalog_type", value)

    @_builtins.property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The environment to fetch this object from.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "env", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the broker.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="onboardingResourceBrokerId")
    def onboarding_resource_broker_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "onboarding_resource_broker_id")

    @onboarding_resource_broker_id.setter
    def onboarding_resource_broker_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "onboarding_resource_broker_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region where the pricing plan is available.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupCrn")
    def resource_group_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cloud resource name of the resource group.
        """
        return pulumi.get(self, "resource_group_crn")

    @resource_group_crn.setter
    def resource_group_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_crn", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The state of the broker.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class _OnboardingResourceBrokerState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 allow_context_updates: Optional[pulumi.Input[_builtins.bool]] = None,
                 auth_password: Optional[pulumi.Input[_builtins.str]] = None,
                 auth_scheme: Optional[pulumi.Input[_builtins.str]] = None,
                 auth_username: Optional[pulumi.Input[_builtins.str]] = None,
                 broker_url: Optional[pulumi.Input[_builtins.str]] = None,
                 catalog_type: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 created_bies: Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingResourceBrokerCreatedByArgs']]]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 deleted_at: Optional[pulumi.Input[_builtins.str]] = None,
                 deleted_bies: Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingResourceBrokerDeletedByArgs']]]] = None,
                 env: Optional[pulumi.Input[_builtins.str]] = None,
                 guid: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 onboarding_resource_broker_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_bies: Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingResourceBrokerUpdatedByArgs']]]] = None,
                 url: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering OnboardingResourceBroker resources.
        :param pulumi.Input[_builtins.str] account_id: The ID of the account in which you manage the broker.
        :param pulumi.Input[_builtins.bool] allow_context_updates: Whether the resource controller will call the broker for any context changes to the instance. Currently, the only
               context related change is an instance name update.
        :param pulumi.Input[_builtins.str] auth_password: The authentication password to reach the broker.
        :param pulumi.Input[_builtins.str] auth_scheme: The supported authentication scheme for the broker.
        :param pulumi.Input[_builtins.str] auth_username: The authentication username to reach the broker.
        :param pulumi.Input[_builtins.str] broker_url: The URL associated with the broker application.
        :param pulumi.Input[_builtins.str] catalog_type: To enable the provisioning of your broker, set this parameter value to `service`.
        :param pulumi.Input[_builtins.str] created_at: The time when the service broker was created.
        :param pulumi.Input[Sequence[pulumi.Input['OnboardingResourceBrokerCreatedByArgs']]] created_bies: The details of the user who created this broker.
        :param pulumi.Input[_builtins.str] crn: The cloud resource name (CRN) of the broker.
        :param pulumi.Input[_builtins.str] deleted_at: The time when the service broker was deleted.
        :param pulumi.Input[Sequence[pulumi.Input['OnboardingResourceBrokerDeletedByArgs']]] deleted_bies: The details of the user who deleted this broker.
        :param pulumi.Input[_builtins.str] env: The environment to fetch this object from.
        :param pulumi.Input[_builtins.str] guid: The globally unique identifier of the broker.
        :param pulumi.Input[_builtins.str] name: The name of the broker.
        :param pulumi.Input[_builtins.str] region: The region where the pricing plan is available.
        :param pulumi.Input[_builtins.str] resource_group_crn: The cloud resource name of the resource group.
        :param pulumi.Input[_builtins.str] state: The state of the broker.
        :param pulumi.Input[_builtins.str] type: The type of the provisioning model.
        :param pulumi.Input[_builtins.str] updated_at: The time when the service broker was updated.
        :param pulumi.Input[Sequence[pulumi.Input['OnboardingResourceBrokerUpdatedByArgs']]] updated_bies: The details of the user who updated this broker.
        :param pulumi.Input[_builtins.str] url: The URL associated with the broker.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if allow_context_updates is not None:
            pulumi.set(__self__, "allow_context_updates", allow_context_updates)
        if auth_password is not None:
            pulumi.set(__self__, "auth_password", auth_password)
        if auth_scheme is not None:
            pulumi.set(__self__, "auth_scheme", auth_scheme)
        if auth_username is not None:
            pulumi.set(__self__, "auth_username", auth_username)
        if broker_url is not None:
            pulumi.set(__self__, "broker_url", broker_url)
        if catalog_type is not None:
            pulumi.set(__self__, "catalog_type", catalog_type)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_bies is not None:
            pulumi.set(__self__, "created_bies", created_bies)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if deleted_at is not None:
            pulumi.set(__self__, "deleted_at", deleted_at)
        if deleted_bies is not None:
            pulumi.set(__self__, "deleted_bies", deleted_bies)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if guid is not None:
            pulumi.set(__self__, "guid", guid)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if onboarding_resource_broker_id is not None:
            pulumi.set(__self__, "onboarding_resource_broker_id", onboarding_resource_broker_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_group_crn is not None:
            pulumi.set(__self__, "resource_group_crn", resource_group_crn)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if updated_bies is not None:
            pulumi.set(__self__, "updated_bies", updated_bies)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the account in which you manage the broker.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_id", value)

    @_builtins.property
    @pulumi.getter(name="allowContextUpdates")
    def allow_context_updates(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the resource controller will call the broker for any context changes to the instance. Currently, the only
        context related change is an instance name update.
        """
        return pulumi.get(self, "allow_context_updates")

    @allow_context_updates.setter
    def allow_context_updates(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_context_updates", value)

    @_builtins.property
    @pulumi.getter(name="authPassword")
    def auth_password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The authentication password to reach the broker.
        """
        return pulumi.get(self, "auth_password")

    @auth_password.setter
    def auth_password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auth_password", value)

    @_builtins.property
    @pulumi.getter(name="authScheme")
    def auth_scheme(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The supported authentication scheme for the broker.
        """
        return pulumi.get(self, "auth_scheme")

    @auth_scheme.setter
    def auth_scheme(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auth_scheme", value)

    @_builtins.property
    @pulumi.getter(name="authUsername")
    def auth_username(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The authentication username to reach the broker.
        """
        return pulumi.get(self, "auth_username")

    @auth_username.setter
    def auth_username(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auth_username", value)

    @_builtins.property
    @pulumi.getter(name="brokerUrl")
    def broker_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL associated with the broker application.
        """
        return pulumi.get(self, "broker_url")

    @broker_url.setter
    def broker_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "broker_url", value)

    @_builtins.property
    @pulumi.getter(name="catalogType")
    def catalog_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        To enable the provisioning of your broker, set this parameter value to `service`.
        """
        return pulumi.get(self, "catalog_type")

    @catalog_type.setter
    def catalog_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "catalog_type", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time when the service broker was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="createdBies")
    def created_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingResourceBrokerCreatedByArgs']]]]:
        """
        The details of the user who created this broker.
        """
        return pulumi.get(self, "created_bies")

    @created_bies.setter
    def created_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingResourceBrokerCreatedByArgs']]]]):
        pulumi.set(self, "created_bies", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cloud resource name (CRN) of the broker.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="deletedAt")
    def deleted_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time when the service broker was deleted.
        """
        return pulumi.get(self, "deleted_at")

    @deleted_at.setter
    def deleted_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "deleted_at", value)

    @_builtins.property
    @pulumi.getter(name="deletedBies")
    def deleted_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingResourceBrokerDeletedByArgs']]]]:
        """
        The details of the user who deleted this broker.
        """
        return pulumi.get(self, "deleted_bies")

    @deleted_bies.setter
    def deleted_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingResourceBrokerDeletedByArgs']]]]):
        pulumi.set(self, "deleted_bies", value)

    @_builtins.property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The environment to fetch this object from.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "env", value)

    @_builtins.property
    @pulumi.getter
    def guid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The globally unique identifier of the broker.
        """
        return pulumi.get(self, "guid")

    @guid.setter
    def guid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "guid", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the broker.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="onboardingResourceBrokerId")
    def onboarding_resource_broker_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "onboarding_resource_broker_id")

    @onboarding_resource_broker_id.setter
    def onboarding_resource_broker_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "onboarding_resource_broker_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region where the pricing plan is available.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupCrn")
    def resource_group_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cloud resource name of the resource group.
        """
        return pulumi.get(self, "resource_group_crn")

    @resource_group_crn.setter
    def resource_group_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_crn", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The state of the broker.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the provisioning model.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time when the service broker was updated.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="updatedBies")
    def updated_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingResourceBrokerUpdatedByArgs']]]]:
        """
        The details of the user who updated this broker.
        """
        return pulumi.get(self, "updated_bies")

    @updated_bies.setter
    def updated_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OnboardingResourceBrokerUpdatedByArgs']]]]):
        pulumi.set(self, "updated_bies", value)

    @_builtins.property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL associated with the broker.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "url", value)


@pulumi.type_token("ibm:index/onboardingResourceBroker:OnboardingResourceBroker")
class OnboardingResourceBroker(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_context_updates: Optional[pulumi.Input[_builtins.bool]] = None,
                 auth_password: Optional[pulumi.Input[_builtins.str]] = None,
                 auth_scheme: Optional[pulumi.Input[_builtins.str]] = None,
                 auth_username: Optional[pulumi.Input[_builtins.str]] = None,
                 broker_url: Optional[pulumi.Input[_builtins.str]] = None,
                 catalog_type: Optional[pulumi.Input[_builtins.str]] = None,
                 env: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 onboarding_resource_broker_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a OnboardingResourceBroker resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] allow_context_updates: Whether the resource controller will call the broker for any context changes to the instance. Currently, the only
               context related change is an instance name update.
        :param pulumi.Input[_builtins.str] auth_password: The authentication password to reach the broker.
        :param pulumi.Input[_builtins.str] auth_scheme: The supported authentication scheme for the broker.
        :param pulumi.Input[_builtins.str] auth_username: The authentication username to reach the broker.
        :param pulumi.Input[_builtins.str] broker_url: The URL associated with the broker application.
        :param pulumi.Input[_builtins.str] catalog_type: To enable the provisioning of your broker, set this parameter value to `service`.
        :param pulumi.Input[_builtins.str] env: The environment to fetch this object from.
        :param pulumi.Input[_builtins.str] name: The name of the broker.
        :param pulumi.Input[_builtins.str] region: The region where the pricing plan is available.
        :param pulumi.Input[_builtins.str] resource_group_crn: The cloud resource name of the resource group.
        :param pulumi.Input[_builtins.str] state: The state of the broker.
        :param pulumi.Input[_builtins.str] type: The type of the provisioning model.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OnboardingResourceBrokerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a OnboardingResourceBroker resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param OnboardingResourceBrokerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OnboardingResourceBrokerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_context_updates: Optional[pulumi.Input[_builtins.bool]] = None,
                 auth_password: Optional[pulumi.Input[_builtins.str]] = None,
                 auth_scheme: Optional[pulumi.Input[_builtins.str]] = None,
                 auth_username: Optional[pulumi.Input[_builtins.str]] = None,
                 broker_url: Optional[pulumi.Input[_builtins.str]] = None,
                 catalog_type: Optional[pulumi.Input[_builtins.str]] = None,
                 env: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 onboarding_resource_broker_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OnboardingResourceBrokerArgs.__new__(OnboardingResourceBrokerArgs)

            __props__.__dict__["allow_context_updates"] = allow_context_updates
            __props__.__dict__["auth_password"] = auth_password
            if auth_scheme is None and not opts.urn:
                raise TypeError("Missing required property 'auth_scheme'")
            __props__.__dict__["auth_scheme"] = auth_scheme
            __props__.__dict__["auth_username"] = auth_username
            if broker_url is None and not opts.urn:
                raise TypeError("Missing required property 'broker_url'")
            __props__.__dict__["broker_url"] = broker_url
            __props__.__dict__["catalog_type"] = catalog_type
            __props__.__dict__["env"] = env
            __props__.__dict__["name"] = name
            __props__.__dict__["onboarding_resource_broker_id"] = onboarding_resource_broker_id
            __props__.__dict__["region"] = region
            __props__.__dict__["resource_group_crn"] = resource_group_crn
            __props__.__dict__["state"] = state
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["account_id"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_bies"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["deleted_at"] = None
            __props__.__dict__["deleted_bies"] = None
            __props__.__dict__["guid"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["updated_bies"] = None
            __props__.__dict__["url"] = None
        super(OnboardingResourceBroker, __self__).__init__(
            'ibm:index/onboardingResourceBroker:OnboardingResourceBroker',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[_builtins.str]] = None,
            allow_context_updates: Optional[pulumi.Input[_builtins.bool]] = None,
            auth_password: Optional[pulumi.Input[_builtins.str]] = None,
            auth_scheme: Optional[pulumi.Input[_builtins.str]] = None,
            auth_username: Optional[pulumi.Input[_builtins.str]] = None,
            broker_url: Optional[pulumi.Input[_builtins.str]] = None,
            catalog_type: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            created_bies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OnboardingResourceBrokerCreatedByArgs', 'OnboardingResourceBrokerCreatedByArgsDict']]]]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            deleted_at: Optional[pulumi.Input[_builtins.str]] = None,
            deleted_bies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OnboardingResourceBrokerDeletedByArgs', 'OnboardingResourceBrokerDeletedByArgsDict']]]]] = None,
            env: Optional[pulumi.Input[_builtins.str]] = None,
            guid: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            onboarding_resource_broker_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_crn: Optional[pulumi.Input[_builtins.str]] = None,
            state: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            updated_bies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['OnboardingResourceBrokerUpdatedByArgs', 'OnboardingResourceBrokerUpdatedByArgsDict']]]]] = None,
            url: Optional[pulumi.Input[_builtins.str]] = None) -> 'OnboardingResourceBroker':
        """
        Get an existing OnboardingResourceBroker resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] account_id: The ID of the account in which you manage the broker.
        :param pulumi.Input[_builtins.bool] allow_context_updates: Whether the resource controller will call the broker for any context changes to the instance. Currently, the only
               context related change is an instance name update.
        :param pulumi.Input[_builtins.str] auth_password: The authentication password to reach the broker.
        :param pulumi.Input[_builtins.str] auth_scheme: The supported authentication scheme for the broker.
        :param pulumi.Input[_builtins.str] auth_username: The authentication username to reach the broker.
        :param pulumi.Input[_builtins.str] broker_url: The URL associated with the broker application.
        :param pulumi.Input[_builtins.str] catalog_type: To enable the provisioning of your broker, set this parameter value to `service`.
        :param pulumi.Input[_builtins.str] created_at: The time when the service broker was created.
        :param pulumi.Input[Sequence[pulumi.Input[Union['OnboardingResourceBrokerCreatedByArgs', 'OnboardingResourceBrokerCreatedByArgsDict']]]] created_bies: The details of the user who created this broker.
        :param pulumi.Input[_builtins.str] crn: The cloud resource name (CRN) of the broker.
        :param pulumi.Input[_builtins.str] deleted_at: The time when the service broker was deleted.
        :param pulumi.Input[Sequence[pulumi.Input[Union['OnboardingResourceBrokerDeletedByArgs', 'OnboardingResourceBrokerDeletedByArgsDict']]]] deleted_bies: The details of the user who deleted this broker.
        :param pulumi.Input[_builtins.str] env: The environment to fetch this object from.
        :param pulumi.Input[_builtins.str] guid: The globally unique identifier of the broker.
        :param pulumi.Input[_builtins.str] name: The name of the broker.
        :param pulumi.Input[_builtins.str] region: The region where the pricing plan is available.
        :param pulumi.Input[_builtins.str] resource_group_crn: The cloud resource name of the resource group.
        :param pulumi.Input[_builtins.str] state: The state of the broker.
        :param pulumi.Input[_builtins.str] type: The type of the provisioning model.
        :param pulumi.Input[_builtins.str] updated_at: The time when the service broker was updated.
        :param pulumi.Input[Sequence[pulumi.Input[Union['OnboardingResourceBrokerUpdatedByArgs', 'OnboardingResourceBrokerUpdatedByArgsDict']]]] updated_bies: The details of the user who updated this broker.
        :param pulumi.Input[_builtins.str] url: The URL associated with the broker.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OnboardingResourceBrokerState.__new__(_OnboardingResourceBrokerState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["allow_context_updates"] = allow_context_updates
        __props__.__dict__["auth_password"] = auth_password
        __props__.__dict__["auth_scheme"] = auth_scheme
        __props__.__dict__["auth_username"] = auth_username
        __props__.__dict__["broker_url"] = broker_url
        __props__.__dict__["catalog_type"] = catalog_type
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_bies"] = created_bies
        __props__.__dict__["crn"] = crn
        __props__.__dict__["deleted_at"] = deleted_at
        __props__.__dict__["deleted_bies"] = deleted_bies
        __props__.__dict__["env"] = env
        __props__.__dict__["guid"] = guid
        __props__.__dict__["name"] = name
        __props__.__dict__["onboarding_resource_broker_id"] = onboarding_resource_broker_id
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_group_crn"] = resource_group_crn
        __props__.__dict__["state"] = state
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["updated_bies"] = updated_bies
        __props__.__dict__["url"] = url
        return OnboardingResourceBroker(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the account in which you manage the broker.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="allowContextUpdates")
    def allow_context_updates(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Whether the resource controller will call the broker for any context changes to the instance. Currently, the only
        context related change is an instance name update.
        """
        return pulumi.get(self, "allow_context_updates")

    @_builtins.property
    @pulumi.getter(name="authPassword")
    def auth_password(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The authentication password to reach the broker.
        """
        return pulumi.get(self, "auth_password")

    @_builtins.property
    @pulumi.getter(name="authScheme")
    def auth_scheme(self) -> pulumi.Output[_builtins.str]:
        """
        The supported authentication scheme for the broker.
        """
        return pulumi.get(self, "auth_scheme")

    @_builtins.property
    @pulumi.getter(name="authUsername")
    def auth_username(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The authentication username to reach the broker.
        """
        return pulumi.get(self, "auth_username")

    @_builtins.property
    @pulumi.getter(name="brokerUrl")
    def broker_url(self) -> pulumi.Output[_builtins.str]:
        """
        The URL associated with the broker application.
        """
        return pulumi.get(self, "broker_url")

    @_builtins.property
    @pulumi.getter(name="catalogType")
    def catalog_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        To enable the provisioning of your broker, set this parameter value to `service`.
        """
        return pulumi.get(self, "catalog_type")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The time when the service broker was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBies")
    def created_bies(self) -> pulumi.Output[Sequence['outputs.OnboardingResourceBrokerCreatedBy']]:
        """
        The details of the user who created this broker.
        """
        return pulumi.get(self, "created_bies")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The cloud resource name (CRN) of the broker.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="deletedAt")
    def deleted_at(self) -> pulumi.Output[_builtins.str]:
        """
        The time when the service broker was deleted.
        """
        return pulumi.get(self, "deleted_at")

    @_builtins.property
    @pulumi.getter(name="deletedBies")
    def deleted_bies(self) -> pulumi.Output[Sequence['outputs.OnboardingResourceBrokerDeletedBy']]:
        """
        The details of the user who deleted this broker.
        """
        return pulumi.get(self, "deleted_bies")

    @_builtins.property
    @pulumi.getter
    def env(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The environment to fetch this object from.
        """
        return pulumi.get(self, "env")

    @_builtins.property
    @pulumi.getter
    def guid(self) -> pulumi.Output[_builtins.str]:
        """
        The globally unique identifier of the broker.
        """
        return pulumi.get(self, "guid")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the broker.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="onboardingResourceBrokerId")
    def onboarding_resource_broker_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "onboarding_resource_broker_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The region where the pricing plan is available.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceGroupCrn")
    def resource_group_crn(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The cloud resource name of the resource group.
        """
        return pulumi.get(self, "resource_group_crn")

    @_builtins.property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The state of the broker.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of the provisioning model.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The time when the service broker was updated.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBies")
    def updated_bies(self) -> pulumi.Output[Sequence['outputs.OnboardingResourceBrokerUpdatedBy']]:
        """
        The details of the user who updated this broker.
        """
        return pulumi.get(self, "updated_bies")

    @_builtins.property
    @pulumi.getter
    def url(self) -> pulumi.Output[_builtins.str]:
        """
        The URL associated with the broker.
        """
        return pulumi.get(self, "url")

