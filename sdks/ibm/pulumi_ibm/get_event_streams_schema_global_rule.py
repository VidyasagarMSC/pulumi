# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetEventStreamsSchemaGlobalRuleResult',
    'AwaitableGetEventStreamsSchemaGlobalRuleResult',
    'get_event_streams_schema_global_rule',
    'get_event_streams_schema_global_rule_output',
]

@pulumi.output_type
class GetEventStreamsSchemaGlobalRuleResult:
    """
    A collection of values returned by getEventStreamsSchemaGlobalRule.
    """
    def __init__(__self__, config=None, id=None, resource_instance_id=None):
        if config and not isinstance(config, str):
            raise TypeError("Expected argument 'config' to be a str")
        pulumi.set(__self__, "config", config)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if resource_instance_id and not isinstance(resource_instance_id, str):
            raise TypeError("Expected argument 'resource_instance_id' to be a str")
        pulumi.set(__self__, "resource_instance_id", resource_instance_id)

    @_builtins.property
    @pulumi.getter
    def config(self) -> _builtins.str:
        return pulumi.get(self, "config")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="resourceInstanceId")
    def resource_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "resource_instance_id")


class AwaitableGetEventStreamsSchemaGlobalRuleResult(GetEventStreamsSchemaGlobalRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEventStreamsSchemaGlobalRuleResult(
            config=self.config,
            id=self.id,
            resource_instance_id=self.resource_instance_id)


def get_event_streams_schema_global_rule(id: Optional[_builtins.str] = None,
                                         resource_instance_id: Optional[_builtins.str] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEventStreamsSchemaGlobalRuleResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['resourceInstanceId'] = resource_instance_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getEventStreamsSchemaGlobalRule:getEventStreamsSchemaGlobalRule', __args__, opts=opts, typ=GetEventStreamsSchemaGlobalRuleResult, package_ref=_utilities.get_package()).value

    return AwaitableGetEventStreamsSchemaGlobalRuleResult(
        config=pulumi.get(__ret__, 'config'),
        id=pulumi.get(__ret__, 'id'),
        resource_instance_id=pulumi.get(__ret__, 'resource_instance_id'))
def get_event_streams_schema_global_rule_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                resource_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEventStreamsSchemaGlobalRuleResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['resourceInstanceId'] = resource_instance_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getEventStreamsSchemaGlobalRule:getEventStreamsSchemaGlobalRule', __args__, opts=opts, typ=GetEventStreamsSchemaGlobalRuleResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetEventStreamsSchemaGlobalRuleResult(
        config=pulumi.get(__response__, 'config'),
        id=pulumi.get(__response__, 'id'),
        resource_instance_id=pulumi.get(__response__, 'resource_instance_id')))
