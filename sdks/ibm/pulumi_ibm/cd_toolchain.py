# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['CdToolchainArgs', 'CdToolchain']

@pulumi.input_type
class CdToolchainArgs:
    def __init__(__self__, *,
                 resource_group_id: pulumi.Input[_builtins.str],
                 cd_toolchain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a CdToolchain resource.
        :param pulumi.Input[_builtins.str] resource_group_id: Resource group where the toolchain is located.
        :param pulumi.Input[_builtins.str] description: Describes the toolchain.
        :param pulumi.Input[_builtins.str] name: Toolchain name.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Toolchain tags.
        """
        pulumi.set(__self__, "resource_group_id", resource_group_id)
        if cd_toolchain_id is not None:
            pulumi.set(__self__, "cd_toolchain_id", cd_toolchain_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        Resource group where the toolchain is located.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter(name="cdToolchainId")
    def cd_toolchain_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cd_toolchain_id")

    @cd_toolchain_id.setter
    def cd_toolchain_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cd_toolchain_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Describes the toolchain.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Toolchain name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Toolchain tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _CdToolchainState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cd_toolchain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 created_by: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 ui_href: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CdToolchain resources.
        :param pulumi.Input[_builtins.str] account_id: Account ID where toolchain can be found.
        :param pulumi.Input[_builtins.str] created_at: Toolchain creation timestamp.
        :param pulumi.Input[_builtins.str] created_by: Identity that created the toolchain.
        :param pulumi.Input[_builtins.str] crn: Toolchain CRN.
        :param pulumi.Input[_builtins.str] description: Describes the toolchain.
        :param pulumi.Input[_builtins.str] href: URI that can be used to retrieve toolchain.
        :param pulumi.Input[_builtins.str] location: Toolchain region.
        :param pulumi.Input[_builtins.str] name: Toolchain name.
        :param pulumi.Input[_builtins.str] resource_group_id: Resource group where the toolchain is located.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Toolchain tags.
        :param pulumi.Input[_builtins.str] ui_href: URL of a user-facing user interface for this toolchain.
        :param pulumi.Input[_builtins.str] updated_at: Latest toolchain update timestamp.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if cd_toolchain_id is not None:
            pulumi.set(__self__, "cd_toolchain_id", cd_toolchain_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if ui_href is not None:
            pulumi.set(__self__, "ui_href", ui_href)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Account ID where toolchain can be found.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_id", value)

    @_builtins.property
    @pulumi.getter(name="cdToolchainId")
    def cd_toolchain_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cd_toolchain_id")

    @cd_toolchain_id.setter
    def cd_toolchain_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cd_toolchain_id", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Toolchain creation timestamp.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Identity that created the toolchain.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_by", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Toolchain CRN.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Describes the toolchain.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        URI that can be used to retrieve toolchain.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Toolchain region.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Toolchain name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource group where the toolchain is located.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Toolchain tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="uiHref")
    def ui_href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        URL of a user-facing user interface for this toolchain.
        """
        return pulumi.get(self, "ui_href")

    @ui_href.setter
    def ui_href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ui_href", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Latest toolchain update timestamp.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("ibm:index/cdToolchain:CdToolchain")
class CdToolchain(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cd_toolchain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Create a CdToolchain resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Describes the toolchain.
        :param pulumi.Input[_builtins.str] name: Toolchain name.
        :param pulumi.Input[_builtins.str] resource_group_id: Resource group where the toolchain is located.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Toolchain tags.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CdToolchainArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CdToolchain resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CdToolchainArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CdToolchainArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cd_toolchain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CdToolchainArgs.__new__(CdToolchainArgs)

            __props__.__dict__["cd_toolchain_id"] = cd_toolchain_id
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            if resource_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_id'")
            __props__.__dict__["resource_group_id"] = resource_group_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["account_id"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["location"] = None
            __props__.__dict__["ui_href"] = None
            __props__.__dict__["updated_at"] = None
        super(CdToolchain, __self__).__init__(
            'ibm:index/cdToolchain:CdToolchain',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[_builtins.str]] = None,
            cd_toolchain_id: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            created_by: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            location: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            ui_href: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'CdToolchain':
        """
        Get an existing CdToolchain resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] account_id: Account ID where toolchain can be found.
        :param pulumi.Input[_builtins.str] created_at: Toolchain creation timestamp.
        :param pulumi.Input[_builtins.str] created_by: Identity that created the toolchain.
        :param pulumi.Input[_builtins.str] crn: Toolchain CRN.
        :param pulumi.Input[_builtins.str] description: Describes the toolchain.
        :param pulumi.Input[_builtins.str] href: URI that can be used to retrieve toolchain.
        :param pulumi.Input[_builtins.str] location: Toolchain region.
        :param pulumi.Input[_builtins.str] name: Toolchain name.
        :param pulumi.Input[_builtins.str] resource_group_id: Resource group where the toolchain is located.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Toolchain tags.
        :param pulumi.Input[_builtins.str] ui_href: URL of a user-facing user interface for this toolchain.
        :param pulumi.Input[_builtins.str] updated_at: Latest toolchain update timestamp.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CdToolchainState.__new__(_CdToolchainState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["cd_toolchain_id"] = cd_toolchain_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["crn"] = crn
        __props__.__dict__["description"] = description
        __props__.__dict__["href"] = href
        __props__.__dict__["location"] = location
        __props__.__dict__["name"] = name
        __props__.__dict__["resource_group_id"] = resource_group_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["ui_href"] = ui_href
        __props__.__dict__["updated_at"] = updated_at
        return CdToolchain(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[_builtins.str]:
        """
        Account ID where toolchain can be found.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="cdToolchainId")
    def cd_toolchain_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cd_toolchain_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Toolchain creation timestamp.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[_builtins.str]:
        """
        Identity that created the toolchain.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        Toolchain CRN.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Describes the toolchain.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        URI that can be used to retrieve toolchain.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Output[_builtins.str]:
        """
        Toolchain region.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Toolchain name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        Resource group where the toolchain is located.
        """
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Toolchain tags.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="uiHref")
    def ui_href(self) -> pulumi.Output[_builtins.str]:
        """
        URL of a user-facing user interface for this toolchain.
        """
        return pulumi.get(self, "ui_href")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Latest toolchain update timestamp.
        """
        return pulumi.get(self, "updated_at")

