# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsLbListenersResult',
    'AwaitableGetIsLbListenersResult',
    'get_is_lb_listeners',
    'get_is_lb_listeners_output',
]

@pulumi.output_type
class GetIsLbListenersResult:
    """
    A collection of values returned by getIsLbListeners.
    """
    def __init__(__self__, id=None, lb=None, listeners=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lb and not isinstance(lb, str):
            raise TypeError("Expected argument 'lb' to be a str")
        pulumi.set(__self__, "lb", lb)
        if listeners and not isinstance(listeners, list):
            raise TypeError("Expected argument 'listeners' to be a list")
        pulumi.set(__self__, "listeners", listeners)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def lb(self) -> _builtins.str:
        return pulumi.get(self, "lb")

    @_builtins.property
    @pulumi.getter
    def listeners(self) -> Sequence['outputs.GetIsLbListenersListenerResult']:
        return pulumi.get(self, "listeners")


class AwaitableGetIsLbListenersResult(GetIsLbListenersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsLbListenersResult(
            id=self.id,
            lb=self.lb,
            listeners=self.listeners)


def get_is_lb_listeners(id: Optional[_builtins.str] = None,
                        lb: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsLbListenersResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['lb'] = lb
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsLbListeners:getIsLbListeners', __args__, opts=opts, typ=GetIsLbListenersResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsLbListenersResult(
        id=pulumi.get(__ret__, 'id'),
        lb=pulumi.get(__ret__, 'lb'),
        listeners=pulumi.get(__ret__, 'listeners'))
def get_is_lb_listeners_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               lb: Optional[pulumi.Input[_builtins.str]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsLbListenersResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['lb'] = lb
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsLbListeners:getIsLbListeners', __args__, opts=opts, typ=GetIsLbListenersResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsLbListenersResult(
        id=pulumi.get(__response__, 'id'),
        lb=pulumi.get(__response__, 'lb'),
        listeners=pulumi.get(__response__, 'listeners')))
