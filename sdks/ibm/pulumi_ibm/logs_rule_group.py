# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LogsRuleGroupArgs', 'LogsRuleGroup']

@pulumi.input_type
class LogsRuleGroupArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 rule_subgroups: pulumi.Input[Sequence[pulumi.Input['LogsRuleGroupRuleSubgroupArgs']]],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 logs_rule_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 order: Optional[pulumi.Input[_builtins.float]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_matchers: Optional[pulumi.Input[Sequence[pulumi.Input['LogsRuleGroupRuleMatcherArgs']]]] = None):
        """
        The set of arguments for constructing a LogsRuleGroup resource.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the logs instance.
        :param pulumi.Input[Sequence[pulumi.Input['LogsRuleGroupRuleSubgroupArgs']]] rule_subgroups: Rule subgroups. Will try to execute the first rule subgroup, and if not matched will try to match the next one in order.
        :param pulumi.Input[_builtins.str] description: A description for the rule group, should express what is the rule group purpose.
        :param pulumi.Input[_builtins.bool] enabled: Whether or not the rule is enabled.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.str] name: The name of the rule group.
        :param pulumi.Input[_builtins.float] order: // The order in which the rule group will be evaluated. The lower the order, the more priority the group will have. Not
               providing the order will by default create a group with the last order.
        :param pulumi.Input[_builtins.str] region: The region of the logs instance.
        :param pulumi.Input[Sequence[pulumi.Input['LogsRuleGroupRuleMatcherArgs']]] rule_matchers: // Optional rule matchers which if matched will make the rule go through the rule group.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "rule_subgroups", rule_subgroups)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if logs_rule_group_id is not None:
            pulumi.set(__self__, "logs_rule_group_id", logs_rule_group_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if rule_matchers is not None:
            pulumi.set(__self__, "rule_matchers", rule_matchers)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the logs instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="ruleSubgroups")
    def rule_subgroups(self) -> pulumi.Input[Sequence[pulumi.Input['LogsRuleGroupRuleSubgroupArgs']]]:
        """
        Rule subgroups. Will try to execute the first rule subgroup, and if not matched will try to match the next one in order.
        """
        return pulumi.get(self, "rule_subgroups")

    @rule_subgroups.setter
    def rule_subgroups(self, value: pulumi.Input[Sequence[pulumi.Input['LogsRuleGroupRuleSubgroupArgs']]]):
        pulumi.set(self, "rule_subgroups", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A description for the rule group, should express what is the rule group purpose.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether or not the rule is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter(name="logsRuleGroupId")
    def logs_rule_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "logs_rule_group_id")

    @logs_rule_group_id.setter
    def logs_rule_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logs_rule_group_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the rule group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        // The order in which the rule group will be evaluated. The lower the order, the more priority the group will have. Not
        providing the order will by default create a group with the last order.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "order", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the logs instance.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="ruleMatchers")
    def rule_matchers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogsRuleGroupRuleMatcherArgs']]]]:
        """
        // Optional rule matchers which if matched will make the rule go through the rule group.
        """
        return pulumi.get(self, "rule_matchers")

    @rule_matchers.setter
    def rule_matchers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogsRuleGroupRuleMatcherArgs']]]]):
        pulumi.set(self, "rule_matchers", value)


@pulumi.input_type
class _LogsRuleGroupState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 logs_rule_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 order: Optional[pulumi.Input[_builtins.float]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_matchers: Optional[pulumi.Input[Sequence[pulumi.Input['LogsRuleGroupRuleMatcherArgs']]]] = None,
                 rule_subgroups: Optional[pulumi.Input[Sequence[pulumi.Input['LogsRuleGroupRuleSubgroupArgs']]]] = None):
        """
        Input properties used for looking up and filtering LogsRuleGroup resources.
        :param pulumi.Input[_builtins.str] description: A description for the rule group, should express what is the rule group purpose.
        :param pulumi.Input[_builtins.bool] enabled: Whether or not the rule is enabled.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the logs instance.
        :param pulumi.Input[_builtins.str] name: The name of the rule group.
        :param pulumi.Input[_builtins.float] order: // The order in which the rule group will be evaluated. The lower the order, the more priority the group will have. Not
               providing the order will by default create a group with the last order.
        :param pulumi.Input[_builtins.str] region: The region of the logs instance.
        :param pulumi.Input[_builtins.str] rule_group_id: Rule Group Id.
        :param pulumi.Input[Sequence[pulumi.Input['LogsRuleGroupRuleMatcherArgs']]] rule_matchers: // Optional rule matchers which if matched will make the rule go through the rule group.
        :param pulumi.Input[Sequence[pulumi.Input['LogsRuleGroupRuleSubgroupArgs']]] rule_subgroups: Rule subgroups. Will try to execute the first rule subgroup, and if not matched will try to match the next one in order.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if logs_rule_group_id is not None:
            pulumi.set(__self__, "logs_rule_group_id", logs_rule_group_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if rule_group_id is not None:
            pulumi.set(__self__, "rule_group_id", rule_group_id)
        if rule_matchers is not None:
            pulumi.set(__self__, "rule_matchers", rule_matchers)
        if rule_subgroups is not None:
            pulumi.set(__self__, "rule_subgroups", rule_subgroups)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A description for the rule group, should express what is the rule group purpose.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether or not the rule is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the logs instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="logsRuleGroupId")
    def logs_rule_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "logs_rule_group_id")

    @logs_rule_group_id.setter
    def logs_rule_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logs_rule_group_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the rule group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        // The order in which the rule group will be evaluated. The lower the order, the more priority the group will have. Not
        providing the order will by default create a group with the last order.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "order", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the logs instance.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="ruleGroupId")
    def rule_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Rule Group Id.
        """
        return pulumi.get(self, "rule_group_id")

    @rule_group_id.setter
    def rule_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rule_group_id", value)

    @_builtins.property
    @pulumi.getter(name="ruleMatchers")
    def rule_matchers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogsRuleGroupRuleMatcherArgs']]]]:
        """
        // Optional rule matchers which if matched will make the rule go through the rule group.
        """
        return pulumi.get(self, "rule_matchers")

    @rule_matchers.setter
    def rule_matchers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogsRuleGroupRuleMatcherArgs']]]]):
        pulumi.set(self, "rule_matchers", value)

    @_builtins.property
    @pulumi.getter(name="ruleSubgroups")
    def rule_subgroups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogsRuleGroupRuleSubgroupArgs']]]]:
        """
        Rule subgroups. Will try to execute the first rule subgroup, and if not matched will try to match the next one in order.
        """
        return pulumi.get(self, "rule_subgroups")

    @rule_subgroups.setter
    def rule_subgroups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogsRuleGroupRuleSubgroupArgs']]]]):
        pulumi.set(self, "rule_subgroups", value)


@pulumi.type_token("ibm:index/logsRuleGroup:LogsRuleGroup")
class LogsRuleGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 logs_rule_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 order: Optional[pulumi.Input[_builtins.float]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_matchers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogsRuleGroupRuleMatcherArgs', 'LogsRuleGroupRuleMatcherArgsDict']]]]] = None,
                 rule_subgroups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogsRuleGroupRuleSubgroupArgs', 'LogsRuleGroupRuleSubgroupArgsDict']]]]] = None,
                 __props__=None):
        """
        Create a LogsRuleGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: A description for the rule group, should express what is the rule group purpose.
        :param pulumi.Input[_builtins.bool] enabled: Whether or not the rule is enabled.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the logs instance.
        :param pulumi.Input[_builtins.str] name: The name of the rule group.
        :param pulumi.Input[_builtins.float] order: // The order in which the rule group will be evaluated. The lower the order, the more priority the group will have. Not
               providing the order will by default create a group with the last order.
        :param pulumi.Input[_builtins.str] region: The region of the logs instance.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LogsRuleGroupRuleMatcherArgs', 'LogsRuleGroupRuleMatcherArgsDict']]]] rule_matchers: // Optional rule matchers which if matched will make the rule go through the rule group.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LogsRuleGroupRuleSubgroupArgs', 'LogsRuleGroupRuleSubgroupArgsDict']]]] rule_subgroups: Rule subgroups. Will try to execute the first rule subgroup, and if not matched will try to match the next one in order.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LogsRuleGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a LogsRuleGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LogsRuleGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LogsRuleGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 logs_rule_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 order: Optional[pulumi.Input[_builtins.float]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_matchers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogsRuleGroupRuleMatcherArgs', 'LogsRuleGroupRuleMatcherArgsDict']]]]] = None,
                 rule_subgroups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogsRuleGroupRuleSubgroupArgs', 'LogsRuleGroupRuleSubgroupArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LogsRuleGroupArgs.__new__(LogsRuleGroupArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["endpoint_type"] = endpoint_type
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["logs_rule_group_id"] = logs_rule_group_id
            __props__.__dict__["name"] = name
            __props__.__dict__["order"] = order
            __props__.__dict__["region"] = region
            __props__.__dict__["rule_matchers"] = rule_matchers
            if rule_subgroups is None and not opts.urn:
                raise TypeError("Missing required property 'rule_subgroups'")
            __props__.__dict__["rule_subgroups"] = rule_subgroups
            __props__.__dict__["rule_group_id"] = None
        super(LogsRuleGroup, __self__).__init__(
            'ibm:index/logsRuleGroup:LogsRuleGroup',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            logs_rule_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            order: Optional[pulumi.Input[_builtins.float]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            rule_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            rule_matchers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogsRuleGroupRuleMatcherArgs', 'LogsRuleGroupRuleMatcherArgsDict']]]]] = None,
            rule_subgroups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogsRuleGroupRuleSubgroupArgs', 'LogsRuleGroupRuleSubgroupArgsDict']]]]] = None) -> 'LogsRuleGroup':
        """
        Get an existing LogsRuleGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: A description for the rule group, should express what is the rule group purpose.
        :param pulumi.Input[_builtins.bool] enabled: Whether or not the rule is enabled.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the logs instance.
        :param pulumi.Input[_builtins.str] name: The name of the rule group.
        :param pulumi.Input[_builtins.float] order: // The order in which the rule group will be evaluated. The lower the order, the more priority the group will have. Not
               providing the order will by default create a group with the last order.
        :param pulumi.Input[_builtins.str] region: The region of the logs instance.
        :param pulumi.Input[_builtins.str] rule_group_id: Rule Group Id.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LogsRuleGroupRuleMatcherArgs', 'LogsRuleGroupRuleMatcherArgsDict']]]] rule_matchers: // Optional rule matchers which if matched will make the rule go through the rule group.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LogsRuleGroupRuleSubgroupArgs', 'LogsRuleGroupRuleSubgroupArgsDict']]]] rule_subgroups: Rule subgroups. Will try to execute the first rule subgroup, and if not matched will try to match the next one in order.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LogsRuleGroupState.__new__(_LogsRuleGroupState)

        __props__.__dict__["description"] = description
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["endpoint_type"] = endpoint_type
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["logs_rule_group_id"] = logs_rule_group_id
        __props__.__dict__["name"] = name
        __props__.__dict__["order"] = order
        __props__.__dict__["region"] = region
        __props__.__dict__["rule_group_id"] = rule_group_id
        __props__.__dict__["rule_matchers"] = rule_matchers
        __props__.__dict__["rule_subgroups"] = rule_subgroups
        return LogsRuleGroup(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        A description for the rule group, should express what is the rule group purpose.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Whether or not the rule is enabled.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the logs instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="logsRuleGroupId")
    def logs_rule_group_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "logs_rule_group_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the rule group.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def order(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        // The order in which the rule group will be evaluated. The lower the order, the more priority the group will have. Not
        providing the order will by default create a group with the last order.
        """
        return pulumi.get(self, "order")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region of the logs instance.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="ruleGroupId")
    def rule_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        Rule Group Id.
        """
        return pulumi.get(self, "rule_group_id")

    @_builtins.property
    @pulumi.getter(name="ruleMatchers")
    def rule_matchers(self) -> pulumi.Output[Optional[Sequence['outputs.LogsRuleGroupRuleMatcher']]]:
        """
        // Optional rule matchers which if matched will make the rule go through the rule group.
        """
        return pulumi.get(self, "rule_matchers")

    @_builtins.property
    @pulumi.getter(name="ruleSubgroups")
    def rule_subgroups(self) -> pulumi.Output[Sequence['outputs.LogsRuleGroupRuleSubgroup']]:
        """
        Rule subgroups. Will try to execute the first rule subgroup, and if not matched will try to match the next one in order.
        """
        return pulumi.get(self, "rule_subgroups")

