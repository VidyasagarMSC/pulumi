# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsClusterNetworkResult',
    'AwaitableGetIsClusterNetworkResult',
    'get_is_cluster_network',
    'get_is_cluster_network_output',
]

@pulumi.output_type
class GetIsClusterNetworkResult:
    """
    A collection of values returned by getIsClusterNetwork.
    """
    def __init__(__self__, cluster_network_id=None, created_at=None, crn=None, href=None, id=None, lifecycle_reasons=None, lifecycle_state=None, name=None, profiles=None, resource_groups=None, resource_type=None, subnet_prefixes=None, vpcs=None, zones=None):
        if cluster_network_id and not isinstance(cluster_network_id, str):
            raise TypeError("Expected argument 'cluster_network_id' to be a str")
        pulumi.set(__self__, "cluster_network_id", cluster_network_id)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lifecycle_reasons and not isinstance(lifecycle_reasons, list):
            raise TypeError("Expected argument 'lifecycle_reasons' to be a list")
        pulumi.set(__self__, "lifecycle_reasons", lifecycle_reasons)
        if lifecycle_state and not isinstance(lifecycle_state, str):
            raise TypeError("Expected argument 'lifecycle_state' to be a str")
        pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if profiles and not isinstance(profiles, list):
            raise TypeError("Expected argument 'profiles' to be a list")
        pulumi.set(__self__, "profiles", profiles)
        if resource_groups and not isinstance(resource_groups, list):
            raise TypeError("Expected argument 'resource_groups' to be a list")
        pulumi.set(__self__, "resource_groups", resource_groups)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if subnet_prefixes and not isinstance(subnet_prefixes, list):
            raise TypeError("Expected argument 'subnet_prefixes' to be a list")
        pulumi.set(__self__, "subnet_prefixes", subnet_prefixes)
        if vpcs and not isinstance(vpcs, list):
            raise TypeError("Expected argument 'vpcs' to be a list")
        pulumi.set(__self__, "vpcs", vpcs)
        if zones and not isinstance(zones, list):
            raise TypeError("Expected argument 'zones' to be a list")
        pulumi.set(__self__, "zones", zones)

    @_builtins.property
    @pulumi.getter(name="clusterNetworkId")
    def cluster_network_id(self) -> _builtins.str:
        return pulumi.get(self, "cluster_network_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lifecycleReasons")
    def lifecycle_reasons(self) -> Sequence['outputs.GetIsClusterNetworkLifecycleReasonResult']:
        return pulumi.get(self, "lifecycle_reasons")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> _builtins.str:
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def profiles(self) -> Sequence['outputs.GetIsClusterNetworkProfileResult']:
        return pulumi.get(self, "profiles")

    @_builtins.property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Sequence['outputs.GetIsClusterNetworkResourceGroupResult']:
        return pulumi.get(self, "resource_groups")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="subnetPrefixes")
    def subnet_prefixes(self) -> Sequence['outputs.GetIsClusterNetworkSubnetPrefixResult']:
        return pulumi.get(self, "subnet_prefixes")

    @_builtins.property
    @pulumi.getter
    def vpcs(self) -> Sequence['outputs.GetIsClusterNetworkVpcResult']:
        return pulumi.get(self, "vpcs")

    @_builtins.property
    @pulumi.getter
    def zones(self) -> Sequence['outputs.GetIsClusterNetworkZoneResult']:
        return pulumi.get(self, "zones")


class AwaitableGetIsClusterNetworkResult(GetIsClusterNetworkResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsClusterNetworkResult(
            cluster_network_id=self.cluster_network_id,
            created_at=self.created_at,
            crn=self.crn,
            href=self.href,
            id=self.id,
            lifecycle_reasons=self.lifecycle_reasons,
            lifecycle_state=self.lifecycle_state,
            name=self.name,
            profiles=self.profiles,
            resource_groups=self.resource_groups,
            resource_type=self.resource_type,
            subnet_prefixes=self.subnet_prefixes,
            vpcs=self.vpcs,
            zones=self.zones)


def get_is_cluster_network(cluster_network_id: Optional[_builtins.str] = None,
                           id: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsClusterNetworkResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clusterNetworkId'] = cluster_network_id
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsClusterNetwork:getIsClusterNetwork', __args__, opts=opts, typ=GetIsClusterNetworkResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsClusterNetworkResult(
        cluster_network_id=pulumi.get(__ret__, 'cluster_network_id'),
        created_at=pulumi.get(__ret__, 'created_at'),
        crn=pulumi.get(__ret__, 'crn'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        lifecycle_reasons=pulumi.get(__ret__, 'lifecycle_reasons'),
        lifecycle_state=pulumi.get(__ret__, 'lifecycle_state'),
        name=pulumi.get(__ret__, 'name'),
        profiles=pulumi.get(__ret__, 'profiles'),
        resource_groups=pulumi.get(__ret__, 'resource_groups'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        subnet_prefixes=pulumi.get(__ret__, 'subnet_prefixes'),
        vpcs=pulumi.get(__ret__, 'vpcs'),
        zones=pulumi.get(__ret__, 'zones'))
def get_is_cluster_network_output(cluster_network_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsClusterNetworkResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clusterNetworkId'] = cluster_network_id
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsClusterNetwork:getIsClusterNetwork', __args__, opts=opts, typ=GetIsClusterNetworkResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsClusterNetworkResult(
        cluster_network_id=pulumi.get(__response__, 'cluster_network_id'),
        created_at=pulumi.get(__response__, 'created_at'),
        crn=pulumi.get(__response__, 'crn'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        lifecycle_reasons=pulumi.get(__response__, 'lifecycle_reasons'),
        lifecycle_state=pulumi.get(__response__, 'lifecycle_state'),
        name=pulumi.get(__response__, 'name'),
        profiles=pulumi.get(__response__, 'profiles'),
        resource_groups=pulumi.get(__response__, 'resource_groups'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        subnet_prefixes=pulumi.get(__response__, 'subnet_prefixes'),
        vpcs=pulumi.get(__response__, 'vpcs'),
        zones=pulumi.get(__response__, 'zones')))
