# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsBackupPolicyJobResult',
    'AwaitableGetIsBackupPolicyJobResult',
    'get_is_backup_policy_job',
    'get_is_backup_policy_job_output',
]

@pulumi.output_type
class GetIsBackupPolicyJobResult:
    """
    A collection of values returned by getIsBackupPolicyJob.
    """
    def __init__(__self__, auto_delete=None, auto_delete_after=None, backup_policy_id=None, backup_policy_plans=None, completed_at=None, created_at=None, href=None, id=None, identifier=None, job_type=None, resource_type=None, source_instances=None, source_shares=None, source_volumes=None, status=None, status_reasons=None, target_snapshots=None):
        if auto_delete and not isinstance(auto_delete, bool):
            raise TypeError("Expected argument 'auto_delete' to be a bool")
        pulumi.set(__self__, "auto_delete", auto_delete)
        if auto_delete_after and not isinstance(auto_delete_after, float):
            raise TypeError("Expected argument 'auto_delete_after' to be a float")
        pulumi.set(__self__, "auto_delete_after", auto_delete_after)
        if backup_policy_id and not isinstance(backup_policy_id, str):
            raise TypeError("Expected argument 'backup_policy_id' to be a str")
        pulumi.set(__self__, "backup_policy_id", backup_policy_id)
        if backup_policy_plans and not isinstance(backup_policy_plans, list):
            raise TypeError("Expected argument 'backup_policy_plans' to be a list")
        pulumi.set(__self__, "backup_policy_plans", backup_policy_plans)
        if completed_at and not isinstance(completed_at, str):
            raise TypeError("Expected argument 'completed_at' to be a str")
        pulumi.set(__self__, "completed_at", completed_at)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identifier and not isinstance(identifier, str):
            raise TypeError("Expected argument 'identifier' to be a str")
        pulumi.set(__self__, "identifier", identifier)
        if job_type and not isinstance(job_type, str):
            raise TypeError("Expected argument 'job_type' to be a str")
        pulumi.set(__self__, "job_type", job_type)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if source_instances and not isinstance(source_instances, list):
            raise TypeError("Expected argument 'source_instances' to be a list")
        pulumi.set(__self__, "source_instances", source_instances)
        if source_shares and not isinstance(source_shares, list):
            raise TypeError("Expected argument 'source_shares' to be a list")
        pulumi.set(__self__, "source_shares", source_shares)
        if source_volumes and not isinstance(source_volumes, list):
            raise TypeError("Expected argument 'source_volumes' to be a list")
        pulumi.set(__self__, "source_volumes", source_volumes)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if status_reasons and not isinstance(status_reasons, list):
            raise TypeError("Expected argument 'status_reasons' to be a list")
        pulumi.set(__self__, "status_reasons", status_reasons)
        if target_snapshots and not isinstance(target_snapshots, list):
            raise TypeError("Expected argument 'target_snapshots' to be a list")
        pulumi.set(__self__, "target_snapshots", target_snapshots)

    @_builtins.property
    @pulumi.getter(name="autoDelete")
    def auto_delete(self) -> _builtins.bool:
        return pulumi.get(self, "auto_delete")

    @_builtins.property
    @pulumi.getter(name="autoDeleteAfter")
    def auto_delete_after(self) -> _builtins.float:
        return pulumi.get(self, "auto_delete_after")

    @_builtins.property
    @pulumi.getter(name="backupPolicyId")
    def backup_policy_id(self) -> _builtins.str:
        return pulumi.get(self, "backup_policy_id")

    @_builtins.property
    @pulumi.getter(name="backupPolicyPlans")
    def backup_policy_plans(self) -> Sequence['outputs.GetIsBackupPolicyJobBackupPolicyPlanResult']:
        return pulumi.get(self, "backup_policy_plans")

    @_builtins.property
    @pulumi.getter(name="completedAt")
    def completed_at(self) -> _builtins.str:
        return pulumi.get(self, "completed_at")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def identifier(self) -> _builtins.str:
        return pulumi.get(self, "identifier")

    @_builtins.property
    @pulumi.getter(name="jobType")
    def job_type(self) -> _builtins.str:
        return pulumi.get(self, "job_type")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="sourceInstances")
    def source_instances(self) -> Sequence['outputs.GetIsBackupPolicyJobSourceInstanceResult']:
        return pulumi.get(self, "source_instances")

    @_builtins.property
    @pulumi.getter(name="sourceShares")
    def source_shares(self) -> Sequence['outputs.GetIsBackupPolicyJobSourceShareResult']:
        return pulumi.get(self, "source_shares")

    @_builtins.property
    @pulumi.getter(name="sourceVolumes")
    def source_volumes(self) -> Sequence['outputs.GetIsBackupPolicyJobSourceVolumeResult']:
        return pulumi.get(self, "source_volumes")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> Sequence['outputs.GetIsBackupPolicyJobStatusReasonResult']:
        return pulumi.get(self, "status_reasons")

    @_builtins.property
    @pulumi.getter(name="targetSnapshots")
    def target_snapshots(self) -> Sequence['outputs.GetIsBackupPolicyJobTargetSnapshotResult']:
        return pulumi.get(self, "target_snapshots")


class AwaitableGetIsBackupPolicyJobResult(GetIsBackupPolicyJobResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsBackupPolicyJobResult(
            auto_delete=self.auto_delete,
            auto_delete_after=self.auto_delete_after,
            backup_policy_id=self.backup_policy_id,
            backup_policy_plans=self.backup_policy_plans,
            completed_at=self.completed_at,
            created_at=self.created_at,
            href=self.href,
            id=self.id,
            identifier=self.identifier,
            job_type=self.job_type,
            resource_type=self.resource_type,
            source_instances=self.source_instances,
            source_shares=self.source_shares,
            source_volumes=self.source_volumes,
            status=self.status,
            status_reasons=self.status_reasons,
            target_snapshots=self.target_snapshots)


def get_is_backup_policy_job(backup_policy_id: Optional[_builtins.str] = None,
                             id: Optional[_builtins.str] = None,
                             identifier: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsBackupPolicyJobResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['backupPolicyId'] = backup_policy_id
    __args__['id'] = id
    __args__['identifier'] = identifier
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsBackupPolicyJob:getIsBackupPolicyJob', __args__, opts=opts, typ=GetIsBackupPolicyJobResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsBackupPolicyJobResult(
        auto_delete=pulumi.get(__ret__, 'auto_delete'),
        auto_delete_after=pulumi.get(__ret__, 'auto_delete_after'),
        backup_policy_id=pulumi.get(__ret__, 'backup_policy_id'),
        backup_policy_plans=pulumi.get(__ret__, 'backup_policy_plans'),
        completed_at=pulumi.get(__ret__, 'completed_at'),
        created_at=pulumi.get(__ret__, 'created_at'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        identifier=pulumi.get(__ret__, 'identifier'),
        job_type=pulumi.get(__ret__, 'job_type'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        source_instances=pulumi.get(__ret__, 'source_instances'),
        source_shares=pulumi.get(__ret__, 'source_shares'),
        source_volumes=pulumi.get(__ret__, 'source_volumes'),
        status=pulumi.get(__ret__, 'status'),
        status_reasons=pulumi.get(__ret__, 'status_reasons'),
        target_snapshots=pulumi.get(__ret__, 'target_snapshots'))
def get_is_backup_policy_job_output(backup_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                                    id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    identifier: Optional[pulumi.Input[_builtins.str]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsBackupPolicyJobResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['backupPolicyId'] = backup_policy_id
    __args__['id'] = id
    __args__['identifier'] = identifier
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsBackupPolicyJob:getIsBackupPolicyJob', __args__, opts=opts, typ=GetIsBackupPolicyJobResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsBackupPolicyJobResult(
        auto_delete=pulumi.get(__response__, 'auto_delete'),
        auto_delete_after=pulumi.get(__response__, 'auto_delete_after'),
        backup_policy_id=pulumi.get(__response__, 'backup_policy_id'),
        backup_policy_plans=pulumi.get(__response__, 'backup_policy_plans'),
        completed_at=pulumi.get(__response__, 'completed_at'),
        created_at=pulumi.get(__response__, 'created_at'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        identifier=pulumi.get(__response__, 'identifier'),
        job_type=pulumi.get(__response__, 'job_type'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        source_instances=pulumi.get(__response__, 'source_instances'),
        source_shares=pulumi.get(__response__, 'source_shares'),
        source_volumes=pulumi.get(__response__, 'source_volumes'),
        status=pulumi.get(__response__, 'status'),
        status_reasons=pulumi.get(__response__, 'status_reasons'),
        target_snapshots=pulumi.get(__response__, 'target_snapshots')))
