# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsInstanceNetworkInterfaceResult',
    'AwaitableGetIsInstanceNetworkInterfaceResult',
    'get_is_instance_network_interface',
    'get_is_instance_network_interface_output',
]

@pulumi.output_type
class GetIsInstanceNetworkInterfaceResult:
    """
    A collection of values returned by getIsInstanceNetworkInterface.
    """
    def __init__(__self__, allow_ip_spoofing=None, created_at=None, floating_ips=None, href=None, id=None, instance_name=None, name=None, network_interface_name=None, port_speed=None, primary_ips=None, primary_ipv4_address=None, resource_type=None, security_groups=None, status=None, subnets=None, type=None):
        if allow_ip_spoofing and not isinstance(allow_ip_spoofing, bool):
            raise TypeError("Expected argument 'allow_ip_spoofing' to be a bool")
        pulumi.set(__self__, "allow_ip_spoofing", allow_ip_spoofing)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if floating_ips and not isinstance(floating_ips, list):
            raise TypeError("Expected argument 'floating_ips' to be a list")
        pulumi.set(__self__, "floating_ips", floating_ips)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_name and not isinstance(instance_name, str):
            raise TypeError("Expected argument 'instance_name' to be a str")
        pulumi.set(__self__, "instance_name", instance_name)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_interface_name and not isinstance(network_interface_name, str):
            raise TypeError("Expected argument 'network_interface_name' to be a str")
        pulumi.set(__self__, "network_interface_name", network_interface_name)
        if port_speed and not isinstance(port_speed, float):
            raise TypeError("Expected argument 'port_speed' to be a float")
        pulumi.set(__self__, "port_speed", port_speed)
        if primary_ips and not isinstance(primary_ips, list):
            raise TypeError("Expected argument 'primary_ips' to be a list")
        pulumi.set(__self__, "primary_ips", primary_ips)
        if primary_ipv4_address and not isinstance(primary_ipv4_address, str):
            raise TypeError("Expected argument 'primary_ipv4_address' to be a str")
        pulumi.set(__self__, "primary_ipv4_address", primary_ipv4_address)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if security_groups and not isinstance(security_groups, list):
            raise TypeError("Expected argument 'security_groups' to be a list")
        pulumi.set(__self__, "security_groups", security_groups)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if subnets and not isinstance(subnets, list):
            raise TypeError("Expected argument 'subnets' to be a list")
        pulumi.set(__self__, "subnets", subnets)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="allowIpSpoofing")
    def allow_ip_spoofing(self) -> _builtins.bool:
        return pulumi.get(self, "allow_ip_spoofing")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="floatingIps")
    def floating_ips(self) -> Sequence['outputs.GetIsInstanceNetworkInterfaceFloatingIpResult']:
        return pulumi.get(self, "floating_ips")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> _builtins.str:
        return pulumi.get(self, "instance_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkInterfaceName")
    def network_interface_name(self) -> _builtins.str:
        return pulumi.get(self, "network_interface_name")

    @_builtins.property
    @pulumi.getter(name="portSpeed")
    def port_speed(self) -> _builtins.float:
        return pulumi.get(self, "port_speed")

    @_builtins.property
    @pulumi.getter(name="primaryIps")
    def primary_ips(self) -> Sequence['outputs.GetIsInstanceNetworkInterfacePrimaryIpResult']:
        return pulumi.get(self, "primary_ips")

    @_builtins.property
    @pulumi.getter(name="primaryIpv4Address")
    def primary_ipv4_address(self) -> _builtins.str:
        return pulumi.get(self, "primary_ipv4_address")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence['outputs.GetIsInstanceNetworkInterfaceSecurityGroupResult']:
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> Sequence['outputs.GetIsInstanceNetworkInterfaceSubnetResult']:
        return pulumi.get(self, "subnets")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")


class AwaitableGetIsInstanceNetworkInterfaceResult(GetIsInstanceNetworkInterfaceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsInstanceNetworkInterfaceResult(
            allow_ip_spoofing=self.allow_ip_spoofing,
            created_at=self.created_at,
            floating_ips=self.floating_ips,
            href=self.href,
            id=self.id,
            instance_name=self.instance_name,
            name=self.name,
            network_interface_name=self.network_interface_name,
            port_speed=self.port_speed,
            primary_ips=self.primary_ips,
            primary_ipv4_address=self.primary_ipv4_address,
            resource_type=self.resource_type,
            security_groups=self.security_groups,
            status=self.status,
            subnets=self.subnets,
            type=self.type)


def get_is_instance_network_interface(id: Optional[_builtins.str] = None,
                                      instance_name: Optional[_builtins.str] = None,
                                      network_interface_name: Optional[_builtins.str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsInstanceNetworkInterfaceResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceName'] = instance_name
    __args__['networkInterfaceName'] = network_interface_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsInstanceNetworkInterface:getIsInstanceNetworkInterface', __args__, opts=opts, typ=GetIsInstanceNetworkInterfaceResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsInstanceNetworkInterfaceResult(
        allow_ip_spoofing=pulumi.get(__ret__, 'allow_ip_spoofing'),
        created_at=pulumi.get(__ret__, 'created_at'),
        floating_ips=pulumi.get(__ret__, 'floating_ips'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        instance_name=pulumi.get(__ret__, 'instance_name'),
        name=pulumi.get(__ret__, 'name'),
        network_interface_name=pulumi.get(__ret__, 'network_interface_name'),
        port_speed=pulumi.get(__ret__, 'port_speed'),
        primary_ips=pulumi.get(__ret__, 'primary_ips'),
        primary_ipv4_address=pulumi.get(__ret__, 'primary_ipv4_address'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        security_groups=pulumi.get(__ret__, 'security_groups'),
        status=pulumi.get(__ret__, 'status'),
        subnets=pulumi.get(__ret__, 'subnets'),
        type=pulumi.get(__ret__, 'type'))
def get_is_instance_network_interface_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             instance_name: Optional[pulumi.Input[_builtins.str]] = None,
                                             network_interface_name: Optional[pulumi.Input[_builtins.str]] = None,
                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsInstanceNetworkInterfaceResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceName'] = instance_name
    __args__['networkInterfaceName'] = network_interface_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsInstanceNetworkInterface:getIsInstanceNetworkInterface', __args__, opts=opts, typ=GetIsInstanceNetworkInterfaceResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsInstanceNetworkInterfaceResult(
        allow_ip_spoofing=pulumi.get(__response__, 'allow_ip_spoofing'),
        created_at=pulumi.get(__response__, 'created_at'),
        floating_ips=pulumi.get(__response__, 'floating_ips'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        instance_name=pulumi.get(__response__, 'instance_name'),
        name=pulumi.get(__response__, 'name'),
        network_interface_name=pulumi.get(__response__, 'network_interface_name'),
        port_speed=pulumi.get(__response__, 'port_speed'),
        primary_ips=pulumi.get(__response__, 'primary_ips'),
        primary_ipv4_address=pulumi.get(__response__, 'primary_ipv4_address'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        security_groups=pulumi.get(__response__, 'security_groups'),
        status=pulumi.get(__response__, 'status'),
        subnets=pulumi.get(__response__, 'subnets'),
        type=pulumi.get(__response__, 'type')))
