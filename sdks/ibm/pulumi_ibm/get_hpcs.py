# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetHpcsResult',
    'AwaitableGetHpcsResult',
    'get_hpcs',
    'get_hpcs_output',
]

@pulumi.output_type
class GetHpcsResult:
    """
    A collection of values returned by getHpcs.
    """
    def __init__(__self__, crn=None, extensions=None, failover_units=None, guid=None, hsm_infos=None, id=None, location=None, name=None, plan=None, resource_group_id=None, service=None, service_endpoints=None, status=None, units=None):
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if extensions and not isinstance(extensions, dict):
            raise TypeError("Expected argument 'extensions' to be a dict")
        pulumi.set(__self__, "extensions", extensions)
        if failover_units and not isinstance(failover_units, float):
            raise TypeError("Expected argument 'failover_units' to be a float")
        pulumi.set(__self__, "failover_units", failover_units)
        if guid and not isinstance(guid, str):
            raise TypeError("Expected argument 'guid' to be a str")
        pulumi.set(__self__, "guid", guid)
        if hsm_infos and not isinstance(hsm_infos, list):
            raise TypeError("Expected argument 'hsm_infos' to be a list")
        pulumi.set(__self__, "hsm_infos", hsm_infos)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if plan and not isinstance(plan, str):
            raise TypeError("Expected argument 'plan' to be a str")
        pulumi.set(__self__, "plan", plan)
        if resource_group_id and not isinstance(resource_group_id, str):
            raise TypeError("Expected argument 'resource_group_id' to be a str")
        pulumi.set(__self__, "resource_group_id", resource_group_id)
        if service and not isinstance(service, str):
            raise TypeError("Expected argument 'service' to be a str")
        pulumi.set(__self__, "service", service)
        if service_endpoints and not isinstance(service_endpoints, str):
            raise TypeError("Expected argument 'service_endpoints' to be a str")
        pulumi.set(__self__, "service_endpoints", service_endpoints)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if units and not isinstance(units, float):
            raise TypeError("Expected argument 'units' to be a float")
        pulumi.set(__self__, "units", units)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def extensions(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "extensions")

    @_builtins.property
    @pulumi.getter(name="failoverUnits")
    def failover_units(self) -> _builtins.float:
        return pulumi.get(self, "failover_units")

    @_builtins.property
    @pulumi.getter
    def guid(self) -> _builtins.str:
        return pulumi.get(self, "guid")

    @_builtins.property
    @pulumi.getter(name="hsmInfos")
    def hsm_infos(self) -> Sequence['outputs.GetHpcsHsmInfoResult']:
        return pulumi.get(self, "hsm_infos")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def plan(self) -> _builtins.str:
        return pulumi.get(self, "plan")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> _builtins.str:
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter
    def service(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "service")

    @_builtins.property
    @pulumi.getter(name="serviceEndpoints")
    def service_endpoints(self) -> _builtins.str:
        return pulumi.get(self, "service_endpoints")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def units(self) -> _builtins.float:
        return pulumi.get(self, "units")


class AwaitableGetHpcsResult(GetHpcsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetHpcsResult(
            crn=self.crn,
            extensions=self.extensions,
            failover_units=self.failover_units,
            guid=self.guid,
            hsm_infos=self.hsm_infos,
            id=self.id,
            location=self.location,
            name=self.name,
            plan=self.plan,
            resource_group_id=self.resource_group_id,
            service=self.service,
            service_endpoints=self.service_endpoints,
            status=self.status,
            units=self.units)


def get_hpcs(id: Optional[_builtins.str] = None,
             location: Optional[_builtins.str] = None,
             name: Optional[_builtins.str] = None,
             resource_group_id: Optional[_builtins.str] = None,
             service: Optional[_builtins.str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetHpcsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['location'] = location
    __args__['name'] = name
    __args__['resourceGroupId'] = resource_group_id
    __args__['service'] = service
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getHpcs:getHpcs', __args__, opts=opts, typ=GetHpcsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetHpcsResult(
        crn=pulumi.get(__ret__, 'crn'),
        extensions=pulumi.get(__ret__, 'extensions'),
        failover_units=pulumi.get(__ret__, 'failover_units'),
        guid=pulumi.get(__ret__, 'guid'),
        hsm_infos=pulumi.get(__ret__, 'hsm_infos'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        plan=pulumi.get(__ret__, 'plan'),
        resource_group_id=pulumi.get(__ret__, 'resource_group_id'),
        service=pulumi.get(__ret__, 'service'),
        service_endpoints=pulumi.get(__ret__, 'service_endpoints'),
        status=pulumi.get(__ret__, 'status'),
        units=pulumi.get(__ret__, 'units'))
def get_hpcs_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                    location: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                    name: Optional[pulumi.Input[_builtins.str]] = None,
                    resource_group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                    service: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetHpcsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['location'] = location
    __args__['name'] = name
    __args__['resourceGroupId'] = resource_group_id
    __args__['service'] = service
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getHpcs:getHpcs', __args__, opts=opts, typ=GetHpcsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetHpcsResult(
        crn=pulumi.get(__response__, 'crn'),
        extensions=pulumi.get(__response__, 'extensions'),
        failover_units=pulumi.get(__response__, 'failover_units'),
        guid=pulumi.get(__response__, 'guid'),
        hsm_infos=pulumi.get(__response__, 'hsm_infos'),
        id=pulumi.get(__response__, 'id'),
        location=pulumi.get(__response__, 'location'),
        name=pulumi.get(__response__, 'name'),
        plan=pulumi.get(__response__, 'plan'),
        resource_group_id=pulumi.get(__response__, 'resource_group_id'),
        service=pulumi.get(__response__, 'service'),
        service_endpoints=pulumi.get(__response__, 'service_endpoints'),
        status=pulumi.get(__response__, 'status'),
        units=pulumi.get(__response__, 'units')))
