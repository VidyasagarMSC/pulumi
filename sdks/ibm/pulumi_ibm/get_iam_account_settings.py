# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIamAccountSettingsResult',
    'AwaitableGetIamAccountSettingsResult',
    'get_iam_account_settings',
    'get_iam_account_settings_output',
]

@pulumi.output_type
class GetIamAccountSettingsResult:
    """
    A collection of values returned by getIamAccountSettings.
    """
    def __init__(__self__, account_id=None, allowed_ip_addresses=None, entity_tag=None, histories=None, id=None, include_history=None, max_sessions_per_identity=None, mfa=None, restrict_create_platform_apikey=None, restrict_create_service_id=None, session_expiration_in_seconds=None, session_invalidation_in_seconds=None, system_access_token_expiration_in_seconds=None, system_refresh_token_expiration_in_seconds=None, user_mfas=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if allowed_ip_addresses and not isinstance(allowed_ip_addresses, str):
            raise TypeError("Expected argument 'allowed_ip_addresses' to be a str")
        pulumi.set(__self__, "allowed_ip_addresses", allowed_ip_addresses)
        if entity_tag and not isinstance(entity_tag, str):
            raise TypeError("Expected argument 'entity_tag' to be a str")
        pulumi.set(__self__, "entity_tag", entity_tag)
        if histories and not isinstance(histories, list):
            raise TypeError("Expected argument 'histories' to be a list")
        pulumi.set(__self__, "histories", histories)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if include_history and not isinstance(include_history, bool):
            raise TypeError("Expected argument 'include_history' to be a bool")
        pulumi.set(__self__, "include_history", include_history)
        if max_sessions_per_identity and not isinstance(max_sessions_per_identity, str):
            raise TypeError("Expected argument 'max_sessions_per_identity' to be a str")
        pulumi.set(__self__, "max_sessions_per_identity", max_sessions_per_identity)
        if mfa and not isinstance(mfa, str):
            raise TypeError("Expected argument 'mfa' to be a str")
        pulumi.set(__self__, "mfa", mfa)
        if restrict_create_platform_apikey and not isinstance(restrict_create_platform_apikey, str):
            raise TypeError("Expected argument 'restrict_create_platform_apikey' to be a str")
        pulumi.set(__self__, "restrict_create_platform_apikey", restrict_create_platform_apikey)
        if restrict_create_service_id and not isinstance(restrict_create_service_id, str):
            raise TypeError("Expected argument 'restrict_create_service_id' to be a str")
        pulumi.set(__self__, "restrict_create_service_id", restrict_create_service_id)
        if session_expiration_in_seconds and not isinstance(session_expiration_in_seconds, str):
            raise TypeError("Expected argument 'session_expiration_in_seconds' to be a str")
        pulumi.set(__self__, "session_expiration_in_seconds", session_expiration_in_seconds)
        if session_invalidation_in_seconds and not isinstance(session_invalidation_in_seconds, str):
            raise TypeError("Expected argument 'session_invalidation_in_seconds' to be a str")
        pulumi.set(__self__, "session_invalidation_in_seconds", session_invalidation_in_seconds)
        if system_access_token_expiration_in_seconds and not isinstance(system_access_token_expiration_in_seconds, str):
            raise TypeError("Expected argument 'system_access_token_expiration_in_seconds' to be a str")
        pulumi.set(__self__, "system_access_token_expiration_in_seconds", system_access_token_expiration_in_seconds)
        if system_refresh_token_expiration_in_seconds and not isinstance(system_refresh_token_expiration_in_seconds, str):
            raise TypeError("Expected argument 'system_refresh_token_expiration_in_seconds' to be a str")
        pulumi.set(__self__, "system_refresh_token_expiration_in_seconds", system_refresh_token_expiration_in_seconds)
        if user_mfas and not isinstance(user_mfas, list):
            raise TypeError("Expected argument 'user_mfas' to be a list")
        pulumi.set(__self__, "user_mfas", user_mfas)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="allowedIpAddresses")
    def allowed_ip_addresses(self) -> _builtins.str:
        return pulumi.get(self, "allowed_ip_addresses")

    @_builtins.property
    @pulumi.getter(name="entityTag")
    def entity_tag(self) -> _builtins.str:
        return pulumi.get(self, "entity_tag")

    @_builtins.property
    @pulumi.getter
    def histories(self) -> Sequence['outputs.GetIamAccountSettingsHistoryResult']:
        return pulumi.get(self, "histories")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="includeHistory")
    def include_history(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "include_history")

    @_builtins.property
    @pulumi.getter(name="maxSessionsPerIdentity")
    def max_sessions_per_identity(self) -> _builtins.str:
        return pulumi.get(self, "max_sessions_per_identity")

    @_builtins.property
    @pulumi.getter
    def mfa(self) -> _builtins.str:
        return pulumi.get(self, "mfa")

    @_builtins.property
    @pulumi.getter(name="restrictCreatePlatformApikey")
    def restrict_create_platform_apikey(self) -> _builtins.str:
        return pulumi.get(self, "restrict_create_platform_apikey")

    @_builtins.property
    @pulumi.getter(name="restrictCreateServiceId")
    def restrict_create_service_id(self) -> _builtins.str:
        return pulumi.get(self, "restrict_create_service_id")

    @_builtins.property
    @pulumi.getter(name="sessionExpirationInSeconds")
    def session_expiration_in_seconds(self) -> _builtins.str:
        return pulumi.get(self, "session_expiration_in_seconds")

    @_builtins.property
    @pulumi.getter(name="sessionInvalidationInSeconds")
    def session_invalidation_in_seconds(self) -> _builtins.str:
        return pulumi.get(self, "session_invalidation_in_seconds")

    @_builtins.property
    @pulumi.getter(name="systemAccessTokenExpirationInSeconds")
    def system_access_token_expiration_in_seconds(self) -> _builtins.str:
        return pulumi.get(self, "system_access_token_expiration_in_seconds")

    @_builtins.property
    @pulumi.getter(name="systemRefreshTokenExpirationInSeconds")
    def system_refresh_token_expiration_in_seconds(self) -> _builtins.str:
        return pulumi.get(self, "system_refresh_token_expiration_in_seconds")

    @_builtins.property
    @pulumi.getter(name="userMfas")
    def user_mfas(self) -> Sequence['outputs.GetIamAccountSettingsUserMfaResult']:
        return pulumi.get(self, "user_mfas")


class AwaitableGetIamAccountSettingsResult(GetIamAccountSettingsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamAccountSettingsResult(
            account_id=self.account_id,
            allowed_ip_addresses=self.allowed_ip_addresses,
            entity_tag=self.entity_tag,
            histories=self.histories,
            id=self.id,
            include_history=self.include_history,
            max_sessions_per_identity=self.max_sessions_per_identity,
            mfa=self.mfa,
            restrict_create_platform_apikey=self.restrict_create_platform_apikey,
            restrict_create_service_id=self.restrict_create_service_id,
            session_expiration_in_seconds=self.session_expiration_in_seconds,
            session_invalidation_in_seconds=self.session_invalidation_in_seconds,
            system_access_token_expiration_in_seconds=self.system_access_token_expiration_in_seconds,
            system_refresh_token_expiration_in_seconds=self.system_refresh_token_expiration_in_seconds,
            user_mfas=self.user_mfas)


def get_iam_account_settings(id: Optional[_builtins.str] = None,
                             include_history: Optional[_builtins.bool] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamAccountSettingsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['includeHistory'] = include_history
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIamAccountSettings:getIamAccountSettings', __args__, opts=opts, typ=GetIamAccountSettingsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIamAccountSettingsResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        allowed_ip_addresses=pulumi.get(__ret__, 'allowed_ip_addresses'),
        entity_tag=pulumi.get(__ret__, 'entity_tag'),
        histories=pulumi.get(__ret__, 'histories'),
        id=pulumi.get(__ret__, 'id'),
        include_history=pulumi.get(__ret__, 'include_history'),
        max_sessions_per_identity=pulumi.get(__ret__, 'max_sessions_per_identity'),
        mfa=pulumi.get(__ret__, 'mfa'),
        restrict_create_platform_apikey=pulumi.get(__ret__, 'restrict_create_platform_apikey'),
        restrict_create_service_id=pulumi.get(__ret__, 'restrict_create_service_id'),
        session_expiration_in_seconds=pulumi.get(__ret__, 'session_expiration_in_seconds'),
        session_invalidation_in_seconds=pulumi.get(__ret__, 'session_invalidation_in_seconds'),
        system_access_token_expiration_in_seconds=pulumi.get(__ret__, 'system_access_token_expiration_in_seconds'),
        system_refresh_token_expiration_in_seconds=pulumi.get(__ret__, 'system_refresh_token_expiration_in_seconds'),
        user_mfas=pulumi.get(__ret__, 'user_mfas'))
def get_iam_account_settings_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    include_history: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamAccountSettingsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['includeHistory'] = include_history
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIamAccountSettings:getIamAccountSettings', __args__, opts=opts, typ=GetIamAccountSettingsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIamAccountSettingsResult(
        account_id=pulumi.get(__response__, 'account_id'),
        allowed_ip_addresses=pulumi.get(__response__, 'allowed_ip_addresses'),
        entity_tag=pulumi.get(__response__, 'entity_tag'),
        histories=pulumi.get(__response__, 'histories'),
        id=pulumi.get(__response__, 'id'),
        include_history=pulumi.get(__response__, 'include_history'),
        max_sessions_per_identity=pulumi.get(__response__, 'max_sessions_per_identity'),
        mfa=pulumi.get(__response__, 'mfa'),
        restrict_create_platform_apikey=pulumi.get(__response__, 'restrict_create_platform_apikey'),
        restrict_create_service_id=pulumi.get(__response__, 'restrict_create_service_id'),
        session_expiration_in_seconds=pulumi.get(__response__, 'session_expiration_in_seconds'),
        session_invalidation_in_seconds=pulumi.get(__response__, 'session_invalidation_in_seconds'),
        system_access_token_expiration_in_seconds=pulumi.get(__response__, 'system_access_token_expiration_in_seconds'),
        system_refresh_token_expiration_in_seconds=pulumi.get(__response__, 'system_refresh_token_expiration_in_seconds'),
        user_mfas=pulumi.get(__response__, 'user_mfas')))
