# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EnTopicArgs', 'EnTopic']

@pulumi.input_type
class EnTopicArgs:
    def __init__(__self__, *,
                 instance_guid: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 en_topic_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input['EnTopicSourceArgs']]]] = None):
        """
        The set of arguments for constructing a EnTopic resource.
        :param pulumi.Input[_builtins.str] instance_guid: Unique identifier for IBM Cloud Event Notifications instance.
        :param pulumi.Input[_builtins.str] description: Description of the topic.
        :param pulumi.Input[_builtins.str] name: Name of the topic.
        :param pulumi.Input[Sequence[pulumi.Input['EnTopicSourceArgs']]] sources: List of sources.
        """
        pulumi.set(__self__, "instance_guid", instance_guid)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if en_topic_id is not None:
            pulumi.set(__self__, "en_topic_id", en_topic_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)

    @_builtins.property
    @pulumi.getter(name="instanceGuid")
    def instance_guid(self) -> pulumi.Input[_builtins.str]:
        """
        Unique identifier for IBM Cloud Event Notifications instance.
        """
        return pulumi.get(self, "instance_guid")

    @instance_guid.setter
    def instance_guid(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_guid", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the topic.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enTopicId")
    def en_topic_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "en_topic_id")

    @en_topic_id.setter
    def en_topic_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "en_topic_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the topic.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EnTopicSourceArgs']]]]:
        """
        List of sources.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EnTopicSourceArgs']]]]):
        pulumi.set(self, "sources", value)


@pulumi.input_type
class _EnTopicState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 en_topic_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 source_count: Optional[pulumi.Input[_builtins.float]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input['EnTopicSourceArgs']]]] = None,
                 subscription_count: Optional[pulumi.Input[_builtins.float]] = None,
                 subscriptions: Optional[pulumi.Input[Sequence[pulumi.Input['EnTopicSubscriptionArgs']]]] = None,
                 topic_id: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering EnTopic resources.
        :param pulumi.Input[_builtins.str] description: Description of the topic.
        :param pulumi.Input[_builtins.str] instance_guid: Unique identifier for IBM Cloud Event Notifications instance.
        :param pulumi.Input[_builtins.str] name: Name of the topic.
        :param pulumi.Input[_builtins.float] source_count: Number of sources.
        :param pulumi.Input[Sequence[pulumi.Input['EnTopicSourceArgs']]] sources: List of sources.
        :param pulumi.Input[_builtins.float] subscription_count: Number of subscriptions.
        :param pulumi.Input[Sequence[pulumi.Input['EnTopicSubscriptionArgs']]] subscriptions: List of subscriptions.
        :param pulumi.Input[_builtins.str] topic_id: Topic ID.
        :param pulumi.Input[_builtins.str] updated_at: Last time the topic was updated.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if en_topic_id is not None:
            pulumi.set(__self__, "en_topic_id", en_topic_id)
        if instance_guid is not None:
            pulumi.set(__self__, "instance_guid", instance_guid)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if source_count is not None:
            pulumi.set(__self__, "source_count", source_count)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if subscription_count is not None:
            pulumi.set(__self__, "subscription_count", subscription_count)
        if subscriptions is not None:
            pulumi.set(__self__, "subscriptions", subscriptions)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the topic.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enTopicId")
    def en_topic_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "en_topic_id")

    @en_topic_id.setter
    def en_topic_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "en_topic_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceGuid")
    def instance_guid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique identifier for IBM Cloud Event Notifications instance.
        """
        return pulumi.get(self, "instance_guid")

    @instance_guid.setter
    def instance_guid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_guid", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the topic.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="sourceCount")
    def source_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Number of sources.
        """
        return pulumi.get(self, "source_count")

    @source_count.setter
    def source_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "source_count", value)

    @_builtins.property
    @pulumi.getter
    def sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EnTopicSourceArgs']]]]:
        """
        List of sources.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EnTopicSourceArgs']]]]):
        pulumi.set(self, "sources", value)

    @_builtins.property
    @pulumi.getter(name="subscriptionCount")
    def subscription_count(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Number of subscriptions.
        """
        return pulumi.get(self, "subscription_count")

    @subscription_count.setter
    def subscription_count(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "subscription_count", value)

    @_builtins.property
    @pulumi.getter
    def subscriptions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EnTopicSubscriptionArgs']]]]:
        """
        List of subscriptions.
        """
        return pulumi.get(self, "subscriptions")

    @subscriptions.setter
    def subscriptions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EnTopicSubscriptionArgs']]]]):
        pulumi.set(self, "subscriptions", value)

    @_builtins.property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Topic ID.
        """
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "topic_id", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Last time the topic was updated.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("ibm:index/enTopic:EnTopic")
class EnTopic(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 en_topic_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EnTopicSourceArgs', 'EnTopicSourceArgsDict']]]]] = None,
                 __props__=None):
        """
        Create a EnTopic resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Description of the topic.
        :param pulumi.Input[_builtins.str] instance_guid: Unique identifier for IBM Cloud Event Notifications instance.
        :param pulumi.Input[_builtins.str] name: Name of the topic.
        :param pulumi.Input[Sequence[pulumi.Input[Union['EnTopicSourceArgs', 'EnTopicSourceArgsDict']]]] sources: List of sources.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EnTopicArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a EnTopic resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param EnTopicArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EnTopicArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 en_topic_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EnTopicSourceArgs', 'EnTopicSourceArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EnTopicArgs.__new__(EnTopicArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["en_topic_id"] = en_topic_id
            if instance_guid is None and not opts.urn:
                raise TypeError("Missing required property 'instance_guid'")
            __props__.__dict__["instance_guid"] = instance_guid
            __props__.__dict__["name"] = name
            __props__.__dict__["sources"] = sources
            __props__.__dict__["source_count"] = None
            __props__.__dict__["subscription_count"] = None
            __props__.__dict__["subscriptions"] = None
            __props__.__dict__["topic_id"] = None
            __props__.__dict__["updated_at"] = None
        super(EnTopic, __self__).__init__(
            'ibm:index/enTopic:EnTopic',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            en_topic_id: Optional[pulumi.Input[_builtins.str]] = None,
            instance_guid: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            source_count: Optional[pulumi.Input[_builtins.float]] = None,
            sources: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EnTopicSourceArgs', 'EnTopicSourceArgsDict']]]]] = None,
            subscription_count: Optional[pulumi.Input[_builtins.float]] = None,
            subscriptions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EnTopicSubscriptionArgs', 'EnTopicSubscriptionArgsDict']]]]] = None,
            topic_id: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None) -> 'EnTopic':
        """
        Get an existing EnTopic resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Description of the topic.
        :param pulumi.Input[_builtins.str] instance_guid: Unique identifier for IBM Cloud Event Notifications instance.
        :param pulumi.Input[_builtins.str] name: Name of the topic.
        :param pulumi.Input[_builtins.float] source_count: Number of sources.
        :param pulumi.Input[Sequence[pulumi.Input[Union['EnTopicSourceArgs', 'EnTopicSourceArgsDict']]]] sources: List of sources.
        :param pulumi.Input[_builtins.float] subscription_count: Number of subscriptions.
        :param pulumi.Input[Sequence[pulumi.Input[Union['EnTopicSubscriptionArgs', 'EnTopicSubscriptionArgsDict']]]] subscriptions: List of subscriptions.
        :param pulumi.Input[_builtins.str] topic_id: Topic ID.
        :param pulumi.Input[_builtins.str] updated_at: Last time the topic was updated.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EnTopicState.__new__(_EnTopicState)

        __props__.__dict__["description"] = description
        __props__.__dict__["en_topic_id"] = en_topic_id
        __props__.__dict__["instance_guid"] = instance_guid
        __props__.__dict__["name"] = name
        __props__.__dict__["source_count"] = source_count
        __props__.__dict__["sources"] = sources
        __props__.__dict__["subscription_count"] = subscription_count
        __props__.__dict__["subscriptions"] = subscriptions
        __props__.__dict__["topic_id"] = topic_id
        __props__.__dict__["updated_at"] = updated_at
        return EnTopic(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Description of the topic.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enTopicId")
    def en_topic_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "en_topic_id")

    @_builtins.property
    @pulumi.getter(name="instanceGuid")
    def instance_guid(self) -> pulumi.Output[_builtins.str]:
        """
        Unique identifier for IBM Cloud Event Notifications instance.
        """
        return pulumi.get(self, "instance_guid")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the topic.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="sourceCount")
    def source_count(self) -> pulumi.Output[_builtins.float]:
        """
        Number of sources.
        """
        return pulumi.get(self, "source_count")

    @_builtins.property
    @pulumi.getter
    def sources(self) -> pulumi.Output[Optional[Sequence['outputs.EnTopicSource']]]:
        """
        List of sources.
        """
        return pulumi.get(self, "sources")

    @_builtins.property
    @pulumi.getter(name="subscriptionCount")
    def subscription_count(self) -> pulumi.Output[_builtins.float]:
        """
        Number of subscriptions.
        """
        return pulumi.get(self, "subscription_count")

    @_builtins.property
    @pulumi.getter
    def subscriptions(self) -> pulumi.Output[Sequence['outputs.EnTopicSubscription']]:
        """
        List of subscriptions.
        """
        return pulumi.get(self, "subscriptions")

    @_builtins.property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> pulumi.Output[_builtins.str]:
        """
        Topic ID.
        """
        return pulumi.get(self, "topic_id")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Last time the topic was updated.
        """
        return pulumi.get(self, "updated_at")

