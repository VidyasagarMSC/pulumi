# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AppConfigFeatureArgs', 'AppConfigFeature']

@pulumi.input_type
class AppConfigFeatureArgs:
    def __init__(__self__, *,
                 disabled_value: pulumi.Input[_builtins.str],
                 enabled_value: pulumi.Input[_builtins.str],
                 environment_id: pulumi.Input[_builtins.str],
                 feature_id: pulumi.Input[_builtins.str],
                 guid: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 app_config_feature_id: Optional[pulumi.Input[_builtins.str]] = None,
                 collections: Optional[pulumi.Input[Sequence[pulumi.Input['AppConfigFeatureCollectionArgs']]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 format: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 rollout_percentage: Optional[pulumi.Input[_builtins.float]] = None,
                 segment_rules: Optional[pulumi.Input[Sequence[pulumi.Input['AppConfigFeatureSegmentRuleArgs']]]] = None,
                 tags: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AppConfigFeature resource.
        :param pulumi.Input[_builtins.str] disabled_value: Value of the feature when it is disabled. The value can be BOOLEAN, STRING or a NUMERIC value as per the `type`
               attribute.
        :param pulumi.Input[_builtins.str] enabled_value: Value of the feature when it is enabled. The value can be BOOLEAN, STRING or a NUMERIC value as per the `type`
               attribute.
        :param pulumi.Input[_builtins.str] environment_id: Environment Id.
        :param pulumi.Input[_builtins.str] feature_id: Feature id.
        :param pulumi.Input[_builtins.str] guid: GUID of the App Configuration service. Get it from the service instance credentials section of the dashboard.
        :param pulumi.Input[_builtins.str] type: Type of the feature (BOOLEAN, STRING, NUMERIC).
        :param pulumi.Input[Sequence[pulumi.Input['AppConfigFeatureCollectionArgs']]] collections: List of collection id representing the collections that are associated with the specified feature flag.
        :param pulumi.Input[_builtins.str] description: Feature description.
        :param pulumi.Input[_builtins.bool] enabled: The state of the feature flag.
        :param pulumi.Input[_builtins.str] format: Format of the feature (TEXT, JSON, YAML).
        :param pulumi.Input[_builtins.str] name: Feature name.
        :param pulumi.Input[_builtins.float] rollout_percentage: Rollout percentage of the feature.
        :param pulumi.Input[Sequence[pulumi.Input['AppConfigFeatureSegmentRuleArgs']]] segment_rules: Specify the targeting rules that is used to set different feature flag values for different segments.
        :param pulumi.Input[_builtins.str] tags: Tags associated with the feature.
        """
        pulumi.set(__self__, "disabled_value", disabled_value)
        pulumi.set(__self__, "enabled_value", enabled_value)
        pulumi.set(__self__, "environment_id", environment_id)
        pulumi.set(__self__, "feature_id", feature_id)
        pulumi.set(__self__, "guid", guid)
        pulumi.set(__self__, "type", type)
        if app_config_feature_id is not None:
            pulumi.set(__self__, "app_config_feature_id", app_config_feature_id)
        if collections is not None:
            pulumi.set(__self__, "collections", collections)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rollout_percentage is not None:
            pulumi.set(__self__, "rollout_percentage", rollout_percentage)
        if segment_rules is not None:
            pulumi.set(__self__, "segment_rules", segment_rules)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="disabledValue")
    def disabled_value(self) -> pulumi.Input[_builtins.str]:
        """
        Value of the feature when it is disabled. The value can be BOOLEAN, STRING or a NUMERIC value as per the `type`
        attribute.
        """
        return pulumi.get(self, "disabled_value")

    @disabled_value.setter
    def disabled_value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "disabled_value", value)

    @_builtins.property
    @pulumi.getter(name="enabledValue")
    def enabled_value(self) -> pulumi.Input[_builtins.str]:
        """
        Value of the feature when it is enabled. The value can be BOOLEAN, STRING or a NUMERIC value as per the `type`
        attribute.
        """
        return pulumi.get(self, "enabled_value")

    @enabled_value.setter
    def enabled_value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "enabled_value", value)

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Input[_builtins.str]:
        """
        Environment Id.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "environment_id", value)

    @_builtins.property
    @pulumi.getter(name="featureId")
    def feature_id(self) -> pulumi.Input[_builtins.str]:
        """
        Feature id.
        """
        return pulumi.get(self, "feature_id")

    @feature_id.setter
    def feature_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "feature_id", value)

    @_builtins.property
    @pulumi.getter
    def guid(self) -> pulumi.Input[_builtins.str]:
        """
        GUID of the App Configuration service. Get it from the service instance credentials section of the dashboard.
        """
        return pulumi.get(self, "guid")

    @guid.setter
    def guid(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "guid", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Type of the feature (BOOLEAN, STRING, NUMERIC).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="appConfigFeatureId")
    def app_config_feature_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "app_config_feature_id")

    @app_config_feature_id.setter
    def app_config_feature_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_config_feature_id", value)

    @_builtins.property
    @pulumi.getter
    def collections(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppConfigFeatureCollectionArgs']]]]:
        """
        List of collection id representing the collections that are associated with the specified feature flag.
        """
        return pulumi.get(self, "collections")

    @collections.setter
    def collections(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppConfigFeatureCollectionArgs']]]]):
        pulumi.set(self, "collections", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Feature description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The state of the feature flag.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Format of the feature (TEXT, JSON, YAML).
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "format", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Feature name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="rolloutPercentage")
    def rollout_percentage(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Rollout percentage of the feature.
        """
        return pulumi.get(self, "rollout_percentage")

    @rollout_percentage.setter
    def rollout_percentage(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "rollout_percentage", value)

    @_builtins.property
    @pulumi.getter(name="segmentRules")
    def segment_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppConfigFeatureSegmentRuleArgs']]]]:
        """
        Specify the targeting rules that is used to set different feature flag values for different segments.
        """
        return pulumi.get(self, "segment_rules")

    @segment_rules.setter
    def segment_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppConfigFeatureSegmentRuleArgs']]]]):
        pulumi.set(self, "segment_rules", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Tags associated with the feature.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _AppConfigFeatureState:
    def __init__(__self__, *,
                 app_config_feature_id: Optional[pulumi.Input[_builtins.str]] = None,
                 collections: Optional[pulumi.Input[Sequence[pulumi.Input['AppConfigFeatureCollectionArgs']]]] = None,
                 created_time: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 disabled_value: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 enabled_value: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 feature_id: Optional[pulumi.Input[_builtins.str]] = None,
                 format: Optional[pulumi.Input[_builtins.str]] = None,
                 guid: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 rollout_percentage: Optional[pulumi.Input[_builtins.float]] = None,
                 segment_exists: Optional[pulumi.Input[_builtins.bool]] = None,
                 segment_rules: Optional[pulumi.Input[Sequence[pulumi.Input['AppConfigFeatureSegmentRuleArgs']]]] = None,
                 tags: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_time: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AppConfigFeature resources.
        :param pulumi.Input[Sequence[pulumi.Input['AppConfigFeatureCollectionArgs']]] collections: List of collection id representing the collections that are associated with the specified feature flag.
        :param pulumi.Input[_builtins.str] created_time: Creation time of the feature flag.
        :param pulumi.Input[_builtins.str] description: Feature description.
        :param pulumi.Input[_builtins.str] disabled_value: Value of the feature when it is disabled. The value can be BOOLEAN, STRING or a NUMERIC value as per the `type`
               attribute.
        :param pulumi.Input[_builtins.bool] enabled: The state of the feature flag.
        :param pulumi.Input[_builtins.str] enabled_value: Value of the feature when it is enabled. The value can be BOOLEAN, STRING or a NUMERIC value as per the `type`
               attribute.
        :param pulumi.Input[_builtins.str] environment_id: Environment Id.
        :param pulumi.Input[_builtins.str] feature_id: Feature id.
        :param pulumi.Input[_builtins.str] format: Format of the feature (TEXT, JSON, YAML).
        :param pulumi.Input[_builtins.str] guid: GUID of the App Configuration service. Get it from the service instance credentials section of the dashboard.
        :param pulumi.Input[_builtins.str] href: Feature flag URL.
        :param pulumi.Input[_builtins.str] name: Feature name.
        :param pulumi.Input[_builtins.float] rollout_percentage: Rollout percentage of the feature.
        :param pulumi.Input[_builtins.bool] segment_exists: Denotes if the targeting rules are specified for the feature flag.
        :param pulumi.Input[Sequence[pulumi.Input['AppConfigFeatureSegmentRuleArgs']]] segment_rules: Specify the targeting rules that is used to set different feature flag values for different segments.
        :param pulumi.Input[_builtins.str] tags: Tags associated with the feature.
        :param pulumi.Input[_builtins.str] type: Type of the feature (BOOLEAN, STRING, NUMERIC).
        :param pulumi.Input[_builtins.str] updated_time: Last modified time of the feature flag data.
        """
        if app_config_feature_id is not None:
            pulumi.set(__self__, "app_config_feature_id", app_config_feature_id)
        if collections is not None:
            pulumi.set(__self__, "collections", collections)
        if created_time is not None:
            pulumi.set(__self__, "created_time", created_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disabled_value is not None:
            pulumi.set(__self__, "disabled_value", disabled_value)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if enabled_value is not None:
            pulumi.set(__self__, "enabled_value", enabled_value)
        if environment_id is not None:
            pulumi.set(__self__, "environment_id", environment_id)
        if feature_id is not None:
            pulumi.set(__self__, "feature_id", feature_id)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if guid is not None:
            pulumi.set(__self__, "guid", guid)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rollout_percentage is not None:
            pulumi.set(__self__, "rollout_percentage", rollout_percentage)
        if segment_exists is not None:
            pulumi.set(__self__, "segment_exists", segment_exists)
        if segment_rules is not None:
            pulumi.set(__self__, "segment_rules", segment_rules)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_time is not None:
            pulumi.set(__self__, "updated_time", updated_time)

    @_builtins.property
    @pulumi.getter(name="appConfigFeatureId")
    def app_config_feature_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "app_config_feature_id")

    @app_config_feature_id.setter
    def app_config_feature_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "app_config_feature_id", value)

    @_builtins.property
    @pulumi.getter
    def collections(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppConfigFeatureCollectionArgs']]]]:
        """
        List of collection id representing the collections that are associated with the specified feature flag.
        """
        return pulumi.get(self, "collections")

    @collections.setter
    def collections(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppConfigFeatureCollectionArgs']]]]):
        pulumi.set(self, "collections", value)

    @_builtins.property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Creation time of the feature flag.
        """
        return pulumi.get(self, "created_time")

    @created_time.setter
    def created_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_time", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Feature description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="disabledValue")
    def disabled_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Value of the feature when it is disabled. The value can be BOOLEAN, STRING or a NUMERIC value as per the `type`
        attribute.
        """
        return pulumi.get(self, "disabled_value")

    @disabled_value.setter
    def disabled_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "disabled_value", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The state of the feature flag.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="enabledValue")
    def enabled_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Value of the feature when it is enabled. The value can be BOOLEAN, STRING or a NUMERIC value as per the `type`
        attribute.
        """
        return pulumi.get(self, "enabled_value")

    @enabled_value.setter
    def enabled_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enabled_value", value)

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Environment Id.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "environment_id", value)

    @_builtins.property
    @pulumi.getter(name="featureId")
    def feature_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Feature id.
        """
        return pulumi.get(self, "feature_id")

    @feature_id.setter
    def feature_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "feature_id", value)

    @_builtins.property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Format of the feature (TEXT, JSON, YAML).
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "format", value)

    @_builtins.property
    @pulumi.getter
    def guid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        GUID of the App Configuration service. Get it from the service instance credentials section of the dashboard.
        """
        return pulumi.get(self, "guid")

    @guid.setter
    def guid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "guid", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Feature flag URL.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Feature name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="rolloutPercentage")
    def rollout_percentage(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Rollout percentage of the feature.
        """
        return pulumi.get(self, "rollout_percentage")

    @rollout_percentage.setter
    def rollout_percentage(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "rollout_percentage", value)

    @_builtins.property
    @pulumi.getter(name="segmentExists")
    def segment_exists(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Denotes if the targeting rules are specified for the feature flag.
        """
        return pulumi.get(self, "segment_exists")

    @segment_exists.setter
    def segment_exists(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "segment_exists", value)

    @_builtins.property
    @pulumi.getter(name="segmentRules")
    def segment_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppConfigFeatureSegmentRuleArgs']]]]:
        """
        Specify the targeting rules that is used to set different feature flag values for different segments.
        """
        return pulumi.get(self, "segment_rules")

    @segment_rules.setter
    def segment_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppConfigFeatureSegmentRuleArgs']]]]):
        pulumi.set(self, "segment_rules", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Tags associated with the feature.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of the feature (BOOLEAN, STRING, NUMERIC).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Last modified time of the feature flag data.
        """
        return pulumi.get(self, "updated_time")

    @updated_time.setter
    def updated_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_time", value)


@pulumi.type_token("ibm:index/appConfigFeature:AppConfigFeature")
class AppConfigFeature(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_config_feature_id: Optional[pulumi.Input[_builtins.str]] = None,
                 collections: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppConfigFeatureCollectionArgs', 'AppConfigFeatureCollectionArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 disabled_value: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 enabled_value: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 feature_id: Optional[pulumi.Input[_builtins.str]] = None,
                 format: Optional[pulumi.Input[_builtins.str]] = None,
                 guid: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 rollout_percentage: Optional[pulumi.Input[_builtins.float]] = None,
                 segment_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppConfigFeatureSegmentRuleArgs', 'AppConfigFeatureSegmentRuleArgsDict']]]]] = None,
                 tags: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a AppConfigFeature resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AppConfigFeatureCollectionArgs', 'AppConfigFeatureCollectionArgsDict']]]] collections: List of collection id representing the collections that are associated with the specified feature flag.
        :param pulumi.Input[_builtins.str] description: Feature description.
        :param pulumi.Input[_builtins.str] disabled_value: Value of the feature when it is disabled. The value can be BOOLEAN, STRING or a NUMERIC value as per the `type`
               attribute.
        :param pulumi.Input[_builtins.bool] enabled: The state of the feature flag.
        :param pulumi.Input[_builtins.str] enabled_value: Value of the feature when it is enabled. The value can be BOOLEAN, STRING or a NUMERIC value as per the `type`
               attribute.
        :param pulumi.Input[_builtins.str] environment_id: Environment Id.
        :param pulumi.Input[_builtins.str] feature_id: Feature id.
        :param pulumi.Input[_builtins.str] format: Format of the feature (TEXT, JSON, YAML).
        :param pulumi.Input[_builtins.str] guid: GUID of the App Configuration service. Get it from the service instance credentials section of the dashboard.
        :param pulumi.Input[_builtins.str] name: Feature name.
        :param pulumi.Input[_builtins.float] rollout_percentage: Rollout percentage of the feature.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AppConfigFeatureSegmentRuleArgs', 'AppConfigFeatureSegmentRuleArgsDict']]]] segment_rules: Specify the targeting rules that is used to set different feature flag values for different segments.
        :param pulumi.Input[_builtins.str] tags: Tags associated with the feature.
        :param pulumi.Input[_builtins.str] type: Type of the feature (BOOLEAN, STRING, NUMERIC).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppConfigFeatureArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AppConfigFeature resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AppConfigFeatureArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppConfigFeatureArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_config_feature_id: Optional[pulumi.Input[_builtins.str]] = None,
                 collections: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppConfigFeatureCollectionArgs', 'AppConfigFeatureCollectionArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 disabled_value: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 enabled_value: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 feature_id: Optional[pulumi.Input[_builtins.str]] = None,
                 format: Optional[pulumi.Input[_builtins.str]] = None,
                 guid: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 rollout_percentage: Optional[pulumi.Input[_builtins.float]] = None,
                 segment_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppConfigFeatureSegmentRuleArgs', 'AppConfigFeatureSegmentRuleArgsDict']]]]] = None,
                 tags: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppConfigFeatureArgs.__new__(AppConfigFeatureArgs)

            __props__.__dict__["app_config_feature_id"] = app_config_feature_id
            __props__.__dict__["collections"] = collections
            __props__.__dict__["description"] = description
            if disabled_value is None and not opts.urn:
                raise TypeError("Missing required property 'disabled_value'")
            __props__.__dict__["disabled_value"] = disabled_value
            __props__.__dict__["enabled"] = enabled
            if enabled_value is None and not opts.urn:
                raise TypeError("Missing required property 'enabled_value'")
            __props__.__dict__["enabled_value"] = enabled_value
            if environment_id is None and not opts.urn:
                raise TypeError("Missing required property 'environment_id'")
            __props__.__dict__["environment_id"] = environment_id
            if feature_id is None and not opts.urn:
                raise TypeError("Missing required property 'feature_id'")
            __props__.__dict__["feature_id"] = feature_id
            __props__.__dict__["format"] = format
            if guid is None and not opts.urn:
                raise TypeError("Missing required property 'guid'")
            __props__.__dict__["guid"] = guid
            __props__.__dict__["name"] = name
            __props__.__dict__["rollout_percentage"] = rollout_percentage
            __props__.__dict__["segment_rules"] = segment_rules
            __props__.__dict__["tags"] = tags
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["created_time"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["segment_exists"] = None
            __props__.__dict__["updated_time"] = None
        super(AppConfigFeature, __self__).__init__(
            'ibm:index/appConfigFeature:AppConfigFeature',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_config_feature_id: Optional[pulumi.Input[_builtins.str]] = None,
            collections: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppConfigFeatureCollectionArgs', 'AppConfigFeatureCollectionArgsDict']]]]] = None,
            created_time: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            disabled_value: Optional[pulumi.Input[_builtins.str]] = None,
            enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            enabled_value: Optional[pulumi.Input[_builtins.str]] = None,
            environment_id: Optional[pulumi.Input[_builtins.str]] = None,
            feature_id: Optional[pulumi.Input[_builtins.str]] = None,
            format: Optional[pulumi.Input[_builtins.str]] = None,
            guid: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            rollout_percentage: Optional[pulumi.Input[_builtins.float]] = None,
            segment_exists: Optional[pulumi.Input[_builtins.bool]] = None,
            segment_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AppConfigFeatureSegmentRuleArgs', 'AppConfigFeatureSegmentRuleArgsDict']]]]] = None,
            tags: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            updated_time: Optional[pulumi.Input[_builtins.str]] = None) -> 'AppConfigFeature':
        """
        Get an existing AppConfigFeature resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AppConfigFeatureCollectionArgs', 'AppConfigFeatureCollectionArgsDict']]]] collections: List of collection id representing the collections that are associated with the specified feature flag.
        :param pulumi.Input[_builtins.str] created_time: Creation time of the feature flag.
        :param pulumi.Input[_builtins.str] description: Feature description.
        :param pulumi.Input[_builtins.str] disabled_value: Value of the feature when it is disabled. The value can be BOOLEAN, STRING or a NUMERIC value as per the `type`
               attribute.
        :param pulumi.Input[_builtins.bool] enabled: The state of the feature flag.
        :param pulumi.Input[_builtins.str] enabled_value: Value of the feature when it is enabled. The value can be BOOLEAN, STRING or a NUMERIC value as per the `type`
               attribute.
        :param pulumi.Input[_builtins.str] environment_id: Environment Id.
        :param pulumi.Input[_builtins.str] feature_id: Feature id.
        :param pulumi.Input[_builtins.str] format: Format of the feature (TEXT, JSON, YAML).
        :param pulumi.Input[_builtins.str] guid: GUID of the App Configuration service. Get it from the service instance credentials section of the dashboard.
        :param pulumi.Input[_builtins.str] href: Feature flag URL.
        :param pulumi.Input[_builtins.str] name: Feature name.
        :param pulumi.Input[_builtins.float] rollout_percentage: Rollout percentage of the feature.
        :param pulumi.Input[_builtins.bool] segment_exists: Denotes if the targeting rules are specified for the feature flag.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AppConfigFeatureSegmentRuleArgs', 'AppConfigFeatureSegmentRuleArgsDict']]]] segment_rules: Specify the targeting rules that is used to set different feature flag values for different segments.
        :param pulumi.Input[_builtins.str] tags: Tags associated with the feature.
        :param pulumi.Input[_builtins.str] type: Type of the feature (BOOLEAN, STRING, NUMERIC).
        :param pulumi.Input[_builtins.str] updated_time: Last modified time of the feature flag data.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppConfigFeatureState.__new__(_AppConfigFeatureState)

        __props__.__dict__["app_config_feature_id"] = app_config_feature_id
        __props__.__dict__["collections"] = collections
        __props__.__dict__["created_time"] = created_time
        __props__.__dict__["description"] = description
        __props__.__dict__["disabled_value"] = disabled_value
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["enabled_value"] = enabled_value
        __props__.__dict__["environment_id"] = environment_id
        __props__.__dict__["feature_id"] = feature_id
        __props__.__dict__["format"] = format
        __props__.__dict__["guid"] = guid
        __props__.__dict__["href"] = href
        __props__.__dict__["name"] = name
        __props__.__dict__["rollout_percentage"] = rollout_percentage
        __props__.__dict__["segment_exists"] = segment_exists
        __props__.__dict__["segment_rules"] = segment_rules
        __props__.__dict__["tags"] = tags
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_time"] = updated_time
        return AppConfigFeature(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="appConfigFeatureId")
    def app_config_feature_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "app_config_feature_id")

    @_builtins.property
    @pulumi.getter
    def collections(self) -> pulumi.Output[Optional[Sequence['outputs.AppConfigFeatureCollection']]]:
        """
        List of collection id representing the collections that are associated with the specified feature flag.
        """
        return pulumi.get(self, "collections")

    @_builtins.property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> pulumi.Output[_builtins.str]:
        """
        Creation time of the feature flag.
        """
        return pulumi.get(self, "created_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Feature description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="disabledValue")
    def disabled_value(self) -> pulumi.Output[_builtins.str]:
        """
        Value of the feature when it is disabled. The value can be BOOLEAN, STRING or a NUMERIC value as per the `type`
        attribute.
        """
        return pulumi.get(self, "disabled_value")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        The state of the feature flag.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="enabledValue")
    def enabled_value(self) -> pulumi.Output[_builtins.str]:
        """
        Value of the feature when it is enabled. The value can be BOOLEAN, STRING or a NUMERIC value as per the `type`
        attribute.
        """
        return pulumi.get(self, "enabled_value")

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Output[_builtins.str]:
        """
        Environment Id.
        """
        return pulumi.get(self, "environment_id")

    @_builtins.property
    @pulumi.getter(name="featureId")
    def feature_id(self) -> pulumi.Output[_builtins.str]:
        """
        Feature id.
        """
        return pulumi.get(self, "feature_id")

    @_builtins.property
    @pulumi.getter
    def format(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Format of the feature (TEXT, JSON, YAML).
        """
        return pulumi.get(self, "format")

    @_builtins.property
    @pulumi.getter
    def guid(self) -> pulumi.Output[_builtins.str]:
        """
        GUID of the App Configuration service. Get it from the service instance credentials section of the dashboard.
        """
        return pulumi.get(self, "guid")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        Feature flag URL.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Feature name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="rolloutPercentage")
    def rollout_percentage(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Rollout percentage of the feature.
        """
        return pulumi.get(self, "rollout_percentage")

    @_builtins.property
    @pulumi.getter(name="segmentExists")
    def segment_exists(self) -> pulumi.Output[_builtins.bool]:
        """
        Denotes if the targeting rules are specified for the feature flag.
        """
        return pulumi.get(self, "segment_exists")

    @_builtins.property
    @pulumi.getter(name="segmentRules")
    def segment_rules(self) -> pulumi.Output[Optional[Sequence['outputs.AppConfigFeatureSegmentRule']]]:
        """
        Specify the targeting rules that is used to set different feature flag values for different segments.
        """
        return pulumi.get(self, "segment_rules")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Tags associated with the feature.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Type of the feature (BOOLEAN, STRING, NUMERIC).
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> pulumi.Output[_builtins.str]:
        """
        Last modified time of the feature flag data.
        """
        return pulumi.get(self, "updated_time")

