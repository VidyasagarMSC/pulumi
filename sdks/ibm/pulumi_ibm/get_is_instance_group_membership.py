# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsInstanceGroupMembershipResult',
    'AwaitableGetIsInstanceGroupMembershipResult',
    'get_is_instance_group_membership',
    'get_is_instance_group_membership_output',
]

@pulumi.output_type
class GetIsInstanceGroupMembershipResult:
    """
    A collection of values returned by getIsInstanceGroupMembership.
    """
    def __init__(__self__, delete_instance_on_membership_delete=None, id=None, instance_group=None, instance_group_membership=None, instance_templates=None, instances=None, load_balancer_pool_member=None, name=None, status=None):
        if delete_instance_on_membership_delete and not isinstance(delete_instance_on_membership_delete, bool):
            raise TypeError("Expected argument 'delete_instance_on_membership_delete' to be a bool")
        pulumi.set(__self__, "delete_instance_on_membership_delete", delete_instance_on_membership_delete)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_group and not isinstance(instance_group, str):
            raise TypeError("Expected argument 'instance_group' to be a str")
        pulumi.set(__self__, "instance_group", instance_group)
        if instance_group_membership and not isinstance(instance_group_membership, str):
            raise TypeError("Expected argument 'instance_group_membership' to be a str")
        pulumi.set(__self__, "instance_group_membership", instance_group_membership)
        if instance_templates and not isinstance(instance_templates, list):
            raise TypeError("Expected argument 'instance_templates' to be a list")
        pulumi.set(__self__, "instance_templates", instance_templates)
        if instances and not isinstance(instances, list):
            raise TypeError("Expected argument 'instances' to be a list")
        pulumi.set(__self__, "instances", instances)
        if load_balancer_pool_member and not isinstance(load_balancer_pool_member, str):
            raise TypeError("Expected argument 'load_balancer_pool_member' to be a str")
        pulumi.set(__self__, "load_balancer_pool_member", load_balancer_pool_member)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="deleteInstanceOnMembershipDelete")
    def delete_instance_on_membership_delete(self) -> _builtins.bool:
        return pulumi.get(self, "delete_instance_on_membership_delete")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceGroup")
    def instance_group(self) -> _builtins.str:
        return pulumi.get(self, "instance_group")

    @_builtins.property
    @pulumi.getter(name="instanceGroupMembership")
    def instance_group_membership(self) -> _builtins.str:
        return pulumi.get(self, "instance_group_membership")

    @_builtins.property
    @pulumi.getter(name="instanceTemplates")
    def instance_templates(self) -> Sequence['outputs.GetIsInstanceGroupMembershipInstanceTemplateResult']:
        return pulumi.get(self, "instance_templates")

    @_builtins.property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.GetIsInstanceGroupMembershipInstanceResult']:
        return pulumi.get(self, "instances")

    @_builtins.property
    @pulumi.getter(name="loadBalancerPoolMember")
    def load_balancer_pool_member(self) -> _builtins.str:
        return pulumi.get(self, "load_balancer_pool_member")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")


class AwaitableGetIsInstanceGroupMembershipResult(GetIsInstanceGroupMembershipResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsInstanceGroupMembershipResult(
            delete_instance_on_membership_delete=self.delete_instance_on_membership_delete,
            id=self.id,
            instance_group=self.instance_group,
            instance_group_membership=self.instance_group_membership,
            instance_templates=self.instance_templates,
            instances=self.instances,
            load_balancer_pool_member=self.load_balancer_pool_member,
            name=self.name,
            status=self.status)


def get_is_instance_group_membership(id: Optional[_builtins.str] = None,
                                     instance_group: Optional[_builtins.str] = None,
                                     name: Optional[_builtins.str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsInstanceGroupMembershipResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceGroup'] = instance_group
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsInstanceGroupMembership:getIsInstanceGroupMembership', __args__, opts=opts, typ=GetIsInstanceGroupMembershipResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsInstanceGroupMembershipResult(
        delete_instance_on_membership_delete=pulumi.get(__ret__, 'delete_instance_on_membership_delete'),
        id=pulumi.get(__ret__, 'id'),
        instance_group=pulumi.get(__ret__, 'instance_group'),
        instance_group_membership=pulumi.get(__ret__, 'instance_group_membership'),
        instance_templates=pulumi.get(__ret__, 'instance_templates'),
        instances=pulumi.get(__ret__, 'instances'),
        load_balancer_pool_member=pulumi.get(__ret__, 'load_balancer_pool_member'),
        name=pulumi.get(__ret__, 'name'),
        status=pulumi.get(__ret__, 'status'))
def get_is_instance_group_membership_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            instance_group: Optional[pulumi.Input[_builtins.str]] = None,
                                            name: Optional[pulumi.Input[_builtins.str]] = None,
                                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsInstanceGroupMembershipResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceGroup'] = instance_group
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsInstanceGroupMembership:getIsInstanceGroupMembership', __args__, opts=opts, typ=GetIsInstanceGroupMembershipResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsInstanceGroupMembershipResult(
        delete_instance_on_membership_delete=pulumi.get(__response__, 'delete_instance_on_membership_delete'),
        id=pulumi.get(__response__, 'id'),
        instance_group=pulumi.get(__response__, 'instance_group'),
        instance_group_membership=pulumi.get(__response__, 'instance_group_membership'),
        instance_templates=pulumi.get(__response__, 'instance_templates'),
        instances=pulumi.get(__response__, 'instances'),
        load_balancer_pool_member=pulumi.get(__response__, 'load_balancer_pool_member'),
        name=pulumi.get(__response__, 'name'),
        status=pulumi.get(__response__, 'status')))
