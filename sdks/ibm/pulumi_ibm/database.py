# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DatabaseArgs', 'Database']

@pulumi.input_type
class DatabaseArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[_builtins.str],
                 plan: pulumi.Input[_builtins.str],
                 service: pulumi.Input[_builtins.str],
                 service_endpoints: pulumi.Input[_builtins.str],
                 adminpassword: Optional[pulumi.Input[_builtins.str]] = None,
                 allowlists: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseAllowlistArgs']]]] = None,
                 auto_scaling: Optional[pulumi.Input['DatabaseAutoScalingArgs']] = None,
                 backup_encryption_key_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 backup_id: Optional[pulumi.Input[_builtins.str]] = None,
                 configuration: Optional[pulumi.Input[_builtins.str]] = None,
                 database_id: Optional[pulumi.Input[_builtins.str]] = None,
                 deletion_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 group: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseGroupArgs']]]] = None,
                 key_protect_instance: Optional[pulumi.Input[_builtins.str]] = None,
                 key_protect_key: Optional[pulumi.Input[_builtins.str]] = None,
                 logical_replication_slots: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseLogicalReplicationSlotArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 offline_restore: Optional[pulumi.Input[_builtins.bool]] = None,
                 point_in_time_recovery_deployment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 point_in_time_recovery_time: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_leader_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 skip_initial_backup: Optional[pulumi.Input[_builtins.bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['DatabaseTimeoutsArgs']] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseUserArgs']]]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 version_upgrade_skip_backup: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a Database resource.
        :param pulumi.Input[_builtins.str] location: The location or the region in which Database instance exists
        :param pulumi.Input[_builtins.str] plan: The plan type of the Database instance
        :param pulumi.Input[_builtins.str] service: The name of the Cloud Internet database service
        :param pulumi.Input[_builtins.str] service_endpoints: Types of the service endpoints. Possible values are 'public', 'private', 'public-and-private'.
        :param pulumi.Input[_builtins.str] adminpassword: The admin user password for the instance
        :param pulumi.Input['DatabaseAutoScalingArgs'] auto_scaling: ICD Auto Scaling
        :param pulumi.Input[_builtins.str] backup_encryption_key_crn: The Backup Encryption Key CRN
        :param pulumi.Input[_builtins.str] backup_id: The CRN of backup source database
        :param pulumi.Input[_builtins.str] configuration: The configuration in JSON format
        :param pulumi.Input[_builtins.str] key_protect_instance: The CRN of Key protect instance
        :param pulumi.Input[_builtins.str] key_protect_key: The CRN of Key protect key
        :param pulumi.Input[_builtins.str] name: Resource instance name for example, my Database instance
        :param pulumi.Input[_builtins.bool] offline_restore: Set offline restore mode for MongoDB Enterprise Edition
        :param pulumi.Input[_builtins.str] point_in_time_recovery_deployment_id: The CRN of source instance
        :param pulumi.Input[_builtins.str] point_in_time_recovery_time: The point in time recovery time stamp of the deployed instance
        :param pulumi.Input[_builtins.str] remote_leader_id: The CRN of leader database
        :param pulumi.Input[_builtins.str] resource_group_id: The id of the resource group in which the Database instance is present
        :param pulumi.Input[_builtins.bool] skip_initial_backup: Option to skip the initial backup when promoting a read-only replica. Skipping the initial backup means that your
               replica becomes available more quickly, but there is no immediate backup available.
        :param pulumi.Input[_builtins.str] version: The database version to provision if specified or the database version to upgrade to
        :param pulumi.Input[_builtins.bool] version_upgrade_skip_backup: Option to skip the backup when upgrading version. Only applicable to databases that do not support PITR. Skipping the
               backup means that your deployment becomes available more quickly, but there is no immediate backup available. This is
               not recommended as it could result in data loss
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "plan", plan)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "service_endpoints", service_endpoints)
        if adminpassword is not None:
            pulumi.set(__self__, "adminpassword", adminpassword)
        if allowlists is not None:
            pulumi.set(__self__, "allowlists", allowlists)
        if auto_scaling is not None:
            pulumi.set(__self__, "auto_scaling", auto_scaling)
        if backup_encryption_key_crn is not None:
            pulumi.set(__self__, "backup_encryption_key_crn", backup_encryption_key_crn)
        if backup_id is not None:
            pulumi.set(__self__, "backup_id", backup_id)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if deletion_protection is not None:
            pulumi.set(__self__, "deletion_protection", deletion_protection)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if key_protect_instance is not None:
            pulumi.set(__self__, "key_protect_instance", key_protect_instance)
        if key_protect_key is not None:
            pulumi.set(__self__, "key_protect_key", key_protect_key)
        if logical_replication_slots is not None:
            pulumi.set(__self__, "logical_replication_slots", logical_replication_slots)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if offline_restore is not None:
            pulumi.set(__self__, "offline_restore", offline_restore)
        if point_in_time_recovery_deployment_id is not None:
            pulumi.set(__self__, "point_in_time_recovery_deployment_id", point_in_time_recovery_deployment_id)
        if point_in_time_recovery_time is not None:
            pulumi.set(__self__, "point_in_time_recovery_time", point_in_time_recovery_time)
        if remote_leader_id is not None:
            pulumi.set(__self__, "remote_leader_id", remote_leader_id)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if skip_initial_backup is not None:
            pulumi.set(__self__, "skip_initial_backup", skip_initial_backup)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if users is not None:
            pulumi.set(__self__, "users", users)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_upgrade_skip_backup is not None:
            pulumi.set(__self__, "version_upgrade_skip_backup", version_upgrade_skip_backup)

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Input[_builtins.str]:
        """
        The location or the region in which Database instance exists
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter
    def plan(self) -> pulumi.Input[_builtins.str]:
        """
        The plan type of the Database instance
        """
        return pulumi.get(self, "plan")

    @plan.setter
    def plan(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "plan", value)

    @_builtins.property
    @pulumi.getter
    def service(self) -> pulumi.Input[_builtins.str]:
        """
        The name of the Cloud Internet database service
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "service", value)

    @_builtins.property
    @pulumi.getter(name="serviceEndpoints")
    def service_endpoints(self) -> pulumi.Input[_builtins.str]:
        """
        Types of the service endpoints. Possible values are 'public', 'private', 'public-and-private'.
        """
        return pulumi.get(self, "service_endpoints")

    @service_endpoints.setter
    def service_endpoints(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "service_endpoints", value)

    @_builtins.property
    @pulumi.getter
    def adminpassword(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The admin user password for the instance
        """
        return pulumi.get(self, "adminpassword")

    @adminpassword.setter
    def adminpassword(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "adminpassword", value)

    @_builtins.property
    @pulumi.getter
    def allowlists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseAllowlistArgs']]]]:
        return pulumi.get(self, "allowlists")

    @allowlists.setter
    def allowlists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseAllowlistArgs']]]]):
        pulumi.set(self, "allowlists", value)

    @_builtins.property
    @pulumi.getter(name="autoScaling")
    def auto_scaling(self) -> Optional[pulumi.Input['DatabaseAutoScalingArgs']]:
        """
        ICD Auto Scaling
        """
        return pulumi.get(self, "auto_scaling")

    @auto_scaling.setter
    def auto_scaling(self, value: Optional[pulumi.Input['DatabaseAutoScalingArgs']]):
        pulumi.set(self, "auto_scaling", value)

    @_builtins.property
    @pulumi.getter(name="backupEncryptionKeyCrn")
    def backup_encryption_key_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Backup Encryption Key CRN
        """
        return pulumi.get(self, "backup_encryption_key_crn")

    @backup_encryption_key_crn.setter
    def backup_encryption_key_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_encryption_key_crn", value)

    @_builtins.property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN of backup source database
        """
        return pulumi.get(self, "backup_id")

    @backup_id.setter
    def backup_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_id", value)

    @_builtins.property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The configuration in JSON format
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "configuration", value)

    @_builtins.property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "database_id")

    @database_id.setter
    def database_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "database_id", value)

    @_builtins.property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "deletion_protection")

    @deletion_protection.setter
    def deletion_protection(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "deletion_protection", value)

    @_builtins.property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseGroupArgs']]]]:
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseGroupArgs']]]]):
        pulumi.set(self, "group", value)

    @_builtins.property
    @pulumi.getter(name="keyProtectInstance")
    def key_protect_instance(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN of Key protect instance
        """
        return pulumi.get(self, "key_protect_instance")

    @key_protect_instance.setter
    def key_protect_instance(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_protect_instance", value)

    @_builtins.property
    @pulumi.getter(name="keyProtectKey")
    def key_protect_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN of Key protect key
        """
        return pulumi.get(self, "key_protect_key")

    @key_protect_key.setter
    def key_protect_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_protect_key", value)

    @_builtins.property
    @pulumi.getter(name="logicalReplicationSlots")
    def logical_replication_slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseLogicalReplicationSlotArgs']]]]:
        return pulumi.get(self, "logical_replication_slots")

    @logical_replication_slots.setter
    def logical_replication_slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseLogicalReplicationSlotArgs']]]]):
        pulumi.set(self, "logical_replication_slots", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource instance name for example, my Database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="offlineRestore")
    def offline_restore(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set offline restore mode for MongoDB Enterprise Edition
        """
        return pulumi.get(self, "offline_restore")

    @offline_restore.setter
    def offline_restore(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "offline_restore", value)

    @_builtins.property
    @pulumi.getter(name="pointInTimeRecoveryDeploymentId")
    def point_in_time_recovery_deployment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN of source instance
        """
        return pulumi.get(self, "point_in_time_recovery_deployment_id")

    @point_in_time_recovery_deployment_id.setter
    def point_in_time_recovery_deployment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "point_in_time_recovery_deployment_id", value)

    @_builtins.property
    @pulumi.getter(name="pointInTimeRecoveryTime")
    def point_in_time_recovery_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The point in time recovery time stamp of the deployed instance
        """
        return pulumi.get(self, "point_in_time_recovery_time")

    @point_in_time_recovery_time.setter
    def point_in_time_recovery_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "point_in_time_recovery_time", value)

    @_builtins.property
    @pulumi.getter(name="remoteLeaderId")
    def remote_leader_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN of leader database
        """
        return pulumi.get(self, "remote_leader_id")

    @remote_leader_id.setter
    def remote_leader_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "remote_leader_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The id of the resource group in which the Database instance is present
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter(name="skipInitialBackup")
    def skip_initial_backup(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Option to skip the initial backup when promoting a read-only replica. Skipping the initial backup means that your
        replica becomes available more quickly, but there is no immediate backup available.
        """
        return pulumi.get(self, "skip_initial_backup")

    @skip_initial_backup.setter
    def skip_initial_backup(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "skip_initial_backup", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['DatabaseTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['DatabaseTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseUserArgs']]]]:
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseUserArgs']]]]):
        pulumi.set(self, "users", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The database version to provision if specified or the database version to upgrade to
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter(name="versionUpgradeSkipBackup")
    def version_upgrade_skip_backup(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Option to skip the backup when upgrading version. Only applicable to databases that do not support PITR. Skipping the
        backup means that your deployment becomes available more quickly, but there is no immediate backup available. This is
        not recommended as it could result in data loss
        """
        return pulumi.get(self, "version_upgrade_skip_backup")

    @version_upgrade_skip_backup.setter
    def version_upgrade_skip_backup(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "version_upgrade_skip_backup", value)


@pulumi.input_type
class _DatabaseState:
    def __init__(__self__, *,
                 adminpassword: Optional[pulumi.Input[_builtins.str]] = None,
                 adminuser: Optional[pulumi.Input[_builtins.str]] = None,
                 allowlists: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseAllowlistArgs']]]] = None,
                 auto_scaling: Optional[pulumi.Input['DatabaseAutoScalingArgs']] = None,
                 backup_encryption_key_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 backup_id: Optional[pulumi.Input[_builtins.str]] = None,
                 configuration: Optional[pulumi.Input[_builtins.str]] = None,
                 configuration_schema: Optional[pulumi.Input[_builtins.str]] = None,
                 database_id: Optional[pulumi.Input[_builtins.str]] = None,
                 deletion_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 group: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseGroupArgs']]]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseGroupArgs']]]] = None,
                 guid: Optional[pulumi.Input[_builtins.str]] = None,
                 key_protect_instance: Optional[pulumi.Input[_builtins.str]] = None,
                 key_protect_key: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 logical_replication_slots: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseLogicalReplicationSlotArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 offline_restore: Optional[pulumi.Input[_builtins.bool]] = None,
                 plan: Optional[pulumi.Input[_builtins.str]] = None,
                 point_in_time_recovery_deployment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 point_in_time_recovery_time: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_leader_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_controller_url: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_status: Optional[pulumi.Input[_builtins.str]] = None,
                 service: Optional[pulumi.Input[_builtins.str]] = None,
                 service_endpoints: Optional[pulumi.Input[_builtins.str]] = None,
                 skip_initial_backup: Optional[pulumi.Input[_builtins.bool]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['DatabaseTimeoutsArgs']] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseUserArgs']]]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 version_upgrade_skip_backup: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        Input properties used for looking up and filtering Database resources.
        :param pulumi.Input[_builtins.str] adminpassword: The admin user password for the instance
        :param pulumi.Input[_builtins.str] adminuser: The admin user id for the instance
        :param pulumi.Input['DatabaseAutoScalingArgs'] auto_scaling: ICD Auto Scaling
        :param pulumi.Input[_builtins.str] backup_encryption_key_crn: The Backup Encryption Key CRN
        :param pulumi.Input[_builtins.str] backup_id: The CRN of backup source database
        :param pulumi.Input[_builtins.str] configuration: The configuration in JSON format
        :param pulumi.Input[_builtins.str] configuration_schema: The configuration schema in JSON format
        :param pulumi.Input[_builtins.str] guid: Unique identifier of resource instance
        :param pulumi.Input[_builtins.str] key_protect_instance: The CRN of Key protect instance
        :param pulumi.Input[_builtins.str] key_protect_key: The CRN of Key protect key
        :param pulumi.Input[_builtins.str] location: The location or the region in which Database instance exists
        :param pulumi.Input[_builtins.str] name: Resource instance name for example, my Database instance
        :param pulumi.Input[_builtins.bool] offline_restore: Set offline restore mode for MongoDB Enterprise Edition
        :param pulumi.Input[_builtins.str] plan: The plan type of the Database instance
        :param pulumi.Input[_builtins.str] point_in_time_recovery_deployment_id: The CRN of source instance
        :param pulumi.Input[_builtins.str] point_in_time_recovery_time: The point in time recovery time stamp of the deployed instance
        :param pulumi.Input[_builtins.str] remote_leader_id: The CRN of leader database
        :param pulumi.Input[_builtins.str] resource_controller_url: The URL of the IBM Cloud dashboard that can be used to explore and view details about the resource
        :param pulumi.Input[_builtins.str] resource_crn: The crn of the resource
        :param pulumi.Input[_builtins.str] resource_group_id: The id of the resource group in which the Database instance is present
        :param pulumi.Input[_builtins.str] resource_group_name: The resource group name in which resource is provisioned
        :param pulumi.Input[_builtins.str] resource_name: The name of the resource
        :param pulumi.Input[_builtins.str] resource_status: The status of the resource
        :param pulumi.Input[_builtins.str] service: The name of the Cloud Internet database service
        :param pulumi.Input[_builtins.str] service_endpoints: Types of the service endpoints. Possible values are 'public', 'private', 'public-and-private'.
        :param pulumi.Input[_builtins.bool] skip_initial_backup: Option to skip the initial backup when promoting a read-only replica. Skipping the initial backup means that your
               replica becomes available more quickly, but there is no immediate backup available.
        :param pulumi.Input[_builtins.str] status: The resource instance status
        :param pulumi.Input[_builtins.str] version: The database version to provision if specified or the database version to upgrade to
        :param pulumi.Input[_builtins.bool] version_upgrade_skip_backup: Option to skip the backup when upgrading version. Only applicable to databases that do not support PITR. Skipping the
               backup means that your deployment becomes available more quickly, but there is no immediate backup available. This is
               not recommended as it could result in data loss
        """
        if adminpassword is not None:
            pulumi.set(__self__, "adminpassword", adminpassword)
        if adminuser is not None:
            pulumi.set(__self__, "adminuser", adminuser)
        if allowlists is not None:
            pulumi.set(__self__, "allowlists", allowlists)
        if auto_scaling is not None:
            pulumi.set(__self__, "auto_scaling", auto_scaling)
        if backup_encryption_key_crn is not None:
            pulumi.set(__self__, "backup_encryption_key_crn", backup_encryption_key_crn)
        if backup_id is not None:
            pulumi.set(__self__, "backup_id", backup_id)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if configuration_schema is not None:
            pulumi.set(__self__, "configuration_schema", configuration_schema)
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if deletion_protection is not None:
            pulumi.set(__self__, "deletion_protection", deletion_protection)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if guid is not None:
            pulumi.set(__self__, "guid", guid)
        if key_protect_instance is not None:
            pulumi.set(__self__, "key_protect_instance", key_protect_instance)
        if key_protect_key is not None:
            pulumi.set(__self__, "key_protect_key", key_protect_key)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if logical_replication_slots is not None:
            pulumi.set(__self__, "logical_replication_slots", logical_replication_slots)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if offline_restore is not None:
            pulumi.set(__self__, "offline_restore", offline_restore)
        if plan is not None:
            pulumi.set(__self__, "plan", plan)
        if point_in_time_recovery_deployment_id is not None:
            pulumi.set(__self__, "point_in_time_recovery_deployment_id", point_in_time_recovery_deployment_id)
        if point_in_time_recovery_time is not None:
            pulumi.set(__self__, "point_in_time_recovery_time", point_in_time_recovery_time)
        if remote_leader_id is not None:
            pulumi.set(__self__, "remote_leader_id", remote_leader_id)
        if resource_controller_url is not None:
            pulumi.set(__self__, "resource_controller_url", resource_controller_url)
        if resource_crn is not None:
            pulumi.set(__self__, "resource_crn", resource_crn)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_status is not None:
            pulumi.set(__self__, "resource_status", resource_status)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if service_endpoints is not None:
            pulumi.set(__self__, "service_endpoints", service_endpoints)
        if skip_initial_backup is not None:
            pulumi.set(__self__, "skip_initial_backup", skip_initial_backup)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if users is not None:
            pulumi.set(__self__, "users", users)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_upgrade_skip_backup is not None:
            pulumi.set(__self__, "version_upgrade_skip_backup", version_upgrade_skip_backup)

    @_builtins.property
    @pulumi.getter
    def adminpassword(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The admin user password for the instance
        """
        return pulumi.get(self, "adminpassword")

    @adminpassword.setter
    def adminpassword(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "adminpassword", value)

    @_builtins.property
    @pulumi.getter
    def adminuser(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The admin user id for the instance
        """
        return pulumi.get(self, "adminuser")

    @adminuser.setter
    def adminuser(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "adminuser", value)

    @_builtins.property
    @pulumi.getter
    def allowlists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseAllowlistArgs']]]]:
        return pulumi.get(self, "allowlists")

    @allowlists.setter
    def allowlists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseAllowlistArgs']]]]):
        pulumi.set(self, "allowlists", value)

    @_builtins.property
    @pulumi.getter(name="autoScaling")
    def auto_scaling(self) -> Optional[pulumi.Input['DatabaseAutoScalingArgs']]:
        """
        ICD Auto Scaling
        """
        return pulumi.get(self, "auto_scaling")

    @auto_scaling.setter
    def auto_scaling(self, value: Optional[pulumi.Input['DatabaseAutoScalingArgs']]):
        pulumi.set(self, "auto_scaling", value)

    @_builtins.property
    @pulumi.getter(name="backupEncryptionKeyCrn")
    def backup_encryption_key_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Backup Encryption Key CRN
        """
        return pulumi.get(self, "backup_encryption_key_crn")

    @backup_encryption_key_crn.setter
    def backup_encryption_key_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_encryption_key_crn", value)

    @_builtins.property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN of backup source database
        """
        return pulumi.get(self, "backup_id")

    @backup_id.setter
    def backup_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_id", value)

    @_builtins.property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The configuration in JSON format
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "configuration", value)

    @_builtins.property
    @pulumi.getter(name="configurationSchema")
    def configuration_schema(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The configuration schema in JSON format
        """
        return pulumi.get(self, "configuration_schema")

    @configuration_schema.setter
    def configuration_schema(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "configuration_schema", value)

    @_builtins.property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "database_id")

    @database_id.setter
    def database_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "database_id", value)

    @_builtins.property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "deletion_protection")

    @deletion_protection.setter
    def deletion_protection(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "deletion_protection", value)

    @_builtins.property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseGroupArgs']]]]:
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseGroupArgs']]]]):
        pulumi.set(self, "group", value)

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseGroupArgs']]]]:
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseGroupArgs']]]]):
        pulumi.set(self, "groups", value)

    @_builtins.property
    @pulumi.getter
    def guid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique identifier of resource instance
        """
        return pulumi.get(self, "guid")

    @guid.setter
    def guid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "guid", value)

    @_builtins.property
    @pulumi.getter(name="keyProtectInstance")
    def key_protect_instance(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN of Key protect instance
        """
        return pulumi.get(self, "key_protect_instance")

    @key_protect_instance.setter
    def key_protect_instance(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_protect_instance", value)

    @_builtins.property
    @pulumi.getter(name="keyProtectKey")
    def key_protect_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN of Key protect key
        """
        return pulumi.get(self, "key_protect_key")

    @key_protect_key.setter
    def key_protect_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_protect_key", value)

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The location or the region in which Database instance exists
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter(name="logicalReplicationSlots")
    def logical_replication_slots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseLogicalReplicationSlotArgs']]]]:
        return pulumi.get(self, "logical_replication_slots")

    @logical_replication_slots.setter
    def logical_replication_slots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseLogicalReplicationSlotArgs']]]]):
        pulumi.set(self, "logical_replication_slots", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource instance name for example, my Database instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="offlineRestore")
    def offline_restore(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set offline restore mode for MongoDB Enterprise Edition
        """
        return pulumi.get(self, "offline_restore")

    @offline_restore.setter
    def offline_restore(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "offline_restore", value)

    @_builtins.property
    @pulumi.getter
    def plan(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The plan type of the Database instance
        """
        return pulumi.get(self, "plan")

    @plan.setter
    def plan(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "plan", value)

    @_builtins.property
    @pulumi.getter(name="pointInTimeRecoveryDeploymentId")
    def point_in_time_recovery_deployment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN of source instance
        """
        return pulumi.get(self, "point_in_time_recovery_deployment_id")

    @point_in_time_recovery_deployment_id.setter
    def point_in_time_recovery_deployment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "point_in_time_recovery_deployment_id", value)

    @_builtins.property
    @pulumi.getter(name="pointInTimeRecoveryTime")
    def point_in_time_recovery_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The point in time recovery time stamp of the deployed instance
        """
        return pulumi.get(self, "point_in_time_recovery_time")

    @point_in_time_recovery_time.setter
    def point_in_time_recovery_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "point_in_time_recovery_time", value)

    @_builtins.property
    @pulumi.getter(name="remoteLeaderId")
    def remote_leader_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN of leader database
        """
        return pulumi.get(self, "remote_leader_id")

    @remote_leader_id.setter
    def remote_leader_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "remote_leader_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL of the IBM Cloud dashboard that can be used to explore and view details about the resource
        """
        return pulumi.get(self, "resource_controller_url")

    @resource_controller_url.setter
    def resource_controller_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_controller_url", value)

    @_builtins.property
    @pulumi.getter(name="resourceCrn")
    def resource_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The crn of the resource
        """
        return pulumi.get(self, "resource_crn")

    @resource_crn.setter
    def resource_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_crn", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The id of the resource group in which the Database instance is present
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource group name in which resource is provisioned
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_name", value)

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_name", value)

    @_builtins.property
    @pulumi.getter(name="resourceStatus")
    def resource_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the resource
        """
        return pulumi.get(self, "resource_status")

    @resource_status.setter
    def resource_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_status", value)

    @_builtins.property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the Cloud Internet database service
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service", value)

    @_builtins.property
    @pulumi.getter(name="serviceEndpoints")
    def service_endpoints(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Types of the service endpoints. Possible values are 'public', 'private', 'public-and-private'.
        """
        return pulumi.get(self, "service_endpoints")

    @service_endpoints.setter
    def service_endpoints(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_endpoints", value)

    @_builtins.property
    @pulumi.getter(name="skipInitialBackup")
    def skip_initial_backup(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Option to skip the initial backup when promoting a read-only replica. Skipping the initial backup means that your
        replica becomes available more quickly, but there is no immediate backup available.
        """
        return pulumi.get(self, "skip_initial_backup")

    @skip_initial_backup.setter
    def skip_initial_backup(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "skip_initial_backup", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource instance status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['DatabaseTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['DatabaseTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseUserArgs']]]]:
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatabaseUserArgs']]]]):
        pulumi.set(self, "users", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The database version to provision if specified or the database version to upgrade to
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter(name="versionUpgradeSkipBackup")
    def version_upgrade_skip_backup(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Option to skip the backup when upgrading version. Only applicable to databases that do not support PITR. Skipping the
        backup means that your deployment becomes available more quickly, but there is no immediate backup available. This is
        not recommended as it could result in data loss
        """
        return pulumi.get(self, "version_upgrade_skip_backup")

    @version_upgrade_skip_backup.setter
    def version_upgrade_skip_backup(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "version_upgrade_skip_backup", value)


@pulumi.type_token("ibm:index/database:Database")
class Database(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 adminpassword: Optional[pulumi.Input[_builtins.str]] = None,
                 allowlists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DatabaseAllowlistArgs', 'DatabaseAllowlistArgsDict']]]]] = None,
                 auto_scaling: Optional[pulumi.Input[Union['DatabaseAutoScalingArgs', 'DatabaseAutoScalingArgsDict']]] = None,
                 backup_encryption_key_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 backup_id: Optional[pulumi.Input[_builtins.str]] = None,
                 configuration: Optional[pulumi.Input[_builtins.str]] = None,
                 database_id: Optional[pulumi.Input[_builtins.str]] = None,
                 deletion_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 group: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DatabaseGroupArgs', 'DatabaseGroupArgsDict']]]]] = None,
                 key_protect_instance: Optional[pulumi.Input[_builtins.str]] = None,
                 key_protect_key: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 logical_replication_slots: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DatabaseLogicalReplicationSlotArgs', 'DatabaseLogicalReplicationSlotArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 offline_restore: Optional[pulumi.Input[_builtins.bool]] = None,
                 plan: Optional[pulumi.Input[_builtins.str]] = None,
                 point_in_time_recovery_deployment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 point_in_time_recovery_time: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_leader_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service: Optional[pulumi.Input[_builtins.str]] = None,
                 service_endpoints: Optional[pulumi.Input[_builtins.str]] = None,
                 skip_initial_backup: Optional[pulumi.Input[_builtins.bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['DatabaseTimeoutsArgs', 'DatabaseTimeoutsArgsDict']]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DatabaseUserArgs', 'DatabaseUserArgsDict']]]]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 version_upgrade_skip_backup: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        """
        Create a Database resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] adminpassword: The admin user password for the instance
        :param pulumi.Input[Union['DatabaseAutoScalingArgs', 'DatabaseAutoScalingArgsDict']] auto_scaling: ICD Auto Scaling
        :param pulumi.Input[_builtins.str] backup_encryption_key_crn: The Backup Encryption Key CRN
        :param pulumi.Input[_builtins.str] backup_id: The CRN of backup source database
        :param pulumi.Input[_builtins.str] configuration: The configuration in JSON format
        :param pulumi.Input[_builtins.str] key_protect_instance: The CRN of Key protect instance
        :param pulumi.Input[_builtins.str] key_protect_key: The CRN of Key protect key
        :param pulumi.Input[_builtins.str] location: The location or the region in which Database instance exists
        :param pulumi.Input[_builtins.str] name: Resource instance name for example, my Database instance
        :param pulumi.Input[_builtins.bool] offline_restore: Set offline restore mode for MongoDB Enterprise Edition
        :param pulumi.Input[_builtins.str] plan: The plan type of the Database instance
        :param pulumi.Input[_builtins.str] point_in_time_recovery_deployment_id: The CRN of source instance
        :param pulumi.Input[_builtins.str] point_in_time_recovery_time: The point in time recovery time stamp of the deployed instance
        :param pulumi.Input[_builtins.str] remote_leader_id: The CRN of leader database
        :param pulumi.Input[_builtins.str] resource_group_id: The id of the resource group in which the Database instance is present
        :param pulumi.Input[_builtins.str] service: The name of the Cloud Internet database service
        :param pulumi.Input[_builtins.str] service_endpoints: Types of the service endpoints. Possible values are 'public', 'private', 'public-and-private'.
        :param pulumi.Input[_builtins.bool] skip_initial_backup: Option to skip the initial backup when promoting a read-only replica. Skipping the initial backup means that your
               replica becomes available more quickly, but there is no immediate backup available.
        :param pulumi.Input[_builtins.str] version: The database version to provision if specified or the database version to upgrade to
        :param pulumi.Input[_builtins.bool] version_upgrade_skip_backup: Option to skip the backup when upgrading version. Only applicable to databases that do not support PITR. Skipping the
               backup means that your deployment becomes available more quickly, but there is no immediate backup available. This is
               not recommended as it could result in data loss
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DatabaseArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Database resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DatabaseArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DatabaseArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 adminpassword: Optional[pulumi.Input[_builtins.str]] = None,
                 allowlists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DatabaseAllowlistArgs', 'DatabaseAllowlistArgsDict']]]]] = None,
                 auto_scaling: Optional[pulumi.Input[Union['DatabaseAutoScalingArgs', 'DatabaseAutoScalingArgsDict']]] = None,
                 backup_encryption_key_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 backup_id: Optional[pulumi.Input[_builtins.str]] = None,
                 configuration: Optional[pulumi.Input[_builtins.str]] = None,
                 database_id: Optional[pulumi.Input[_builtins.str]] = None,
                 deletion_protection: Optional[pulumi.Input[_builtins.bool]] = None,
                 group: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DatabaseGroupArgs', 'DatabaseGroupArgsDict']]]]] = None,
                 key_protect_instance: Optional[pulumi.Input[_builtins.str]] = None,
                 key_protect_key: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 logical_replication_slots: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DatabaseLogicalReplicationSlotArgs', 'DatabaseLogicalReplicationSlotArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 offline_restore: Optional[pulumi.Input[_builtins.bool]] = None,
                 plan: Optional[pulumi.Input[_builtins.str]] = None,
                 point_in_time_recovery_deployment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 point_in_time_recovery_time: Optional[pulumi.Input[_builtins.str]] = None,
                 remote_leader_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service: Optional[pulumi.Input[_builtins.str]] = None,
                 service_endpoints: Optional[pulumi.Input[_builtins.str]] = None,
                 skip_initial_backup: Optional[pulumi.Input[_builtins.bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['DatabaseTimeoutsArgs', 'DatabaseTimeoutsArgsDict']]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DatabaseUserArgs', 'DatabaseUserArgsDict']]]]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 version_upgrade_skip_backup: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DatabaseArgs.__new__(DatabaseArgs)

            __props__.__dict__["adminpassword"] = None if adminpassword is None else pulumi.Output.secret(adminpassword)
            __props__.__dict__["allowlists"] = allowlists
            __props__.__dict__["auto_scaling"] = auto_scaling
            __props__.__dict__["backup_encryption_key_crn"] = backup_encryption_key_crn
            __props__.__dict__["backup_id"] = backup_id
            __props__.__dict__["configuration"] = configuration
            __props__.__dict__["database_id"] = database_id
            __props__.__dict__["deletion_protection"] = deletion_protection
            __props__.__dict__["group"] = group
            __props__.__dict__["key_protect_instance"] = key_protect_instance
            __props__.__dict__["key_protect_key"] = key_protect_key
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["logical_replication_slots"] = logical_replication_slots
            __props__.__dict__["name"] = name
            __props__.__dict__["offline_restore"] = offline_restore
            if plan is None and not opts.urn:
                raise TypeError("Missing required property 'plan'")
            __props__.__dict__["plan"] = plan
            __props__.__dict__["point_in_time_recovery_deployment_id"] = point_in_time_recovery_deployment_id
            __props__.__dict__["point_in_time_recovery_time"] = point_in_time_recovery_time
            __props__.__dict__["remote_leader_id"] = remote_leader_id
            __props__.__dict__["resource_group_id"] = resource_group_id
            if service is None and not opts.urn:
                raise TypeError("Missing required property 'service'")
            __props__.__dict__["service"] = service
            if service_endpoints is None and not opts.urn:
                raise TypeError("Missing required property 'service_endpoints'")
            __props__.__dict__["service_endpoints"] = service_endpoints
            __props__.__dict__["skip_initial_backup"] = skip_initial_backup
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["users"] = users
            __props__.__dict__["version"] = version
            __props__.__dict__["version_upgrade_skip_backup"] = version_upgrade_skip_backup
            __props__.__dict__["adminuser"] = None
            __props__.__dict__["configuration_schema"] = None
            __props__.__dict__["groups"] = None
            __props__.__dict__["guid"] = None
            __props__.__dict__["resource_controller_url"] = None
            __props__.__dict__["resource_crn"] = None
            __props__.__dict__["resource_group_name"] = None
            __props__.__dict__["resource_name"] = None
            __props__.__dict__["resource_status"] = None
            __props__.__dict__["status"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["adminpassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Database, __self__).__init__(
            'ibm:index/database:Database',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            adminpassword: Optional[pulumi.Input[_builtins.str]] = None,
            adminuser: Optional[pulumi.Input[_builtins.str]] = None,
            allowlists: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DatabaseAllowlistArgs', 'DatabaseAllowlistArgsDict']]]]] = None,
            auto_scaling: Optional[pulumi.Input[Union['DatabaseAutoScalingArgs', 'DatabaseAutoScalingArgsDict']]] = None,
            backup_encryption_key_crn: Optional[pulumi.Input[_builtins.str]] = None,
            backup_id: Optional[pulumi.Input[_builtins.str]] = None,
            configuration: Optional[pulumi.Input[_builtins.str]] = None,
            configuration_schema: Optional[pulumi.Input[_builtins.str]] = None,
            database_id: Optional[pulumi.Input[_builtins.str]] = None,
            deletion_protection: Optional[pulumi.Input[_builtins.bool]] = None,
            group: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DatabaseGroupArgs', 'DatabaseGroupArgsDict']]]]] = None,
            groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DatabaseGroupArgs', 'DatabaseGroupArgsDict']]]]] = None,
            guid: Optional[pulumi.Input[_builtins.str]] = None,
            key_protect_instance: Optional[pulumi.Input[_builtins.str]] = None,
            key_protect_key: Optional[pulumi.Input[_builtins.str]] = None,
            location: Optional[pulumi.Input[_builtins.str]] = None,
            logical_replication_slots: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DatabaseLogicalReplicationSlotArgs', 'DatabaseLogicalReplicationSlotArgsDict']]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            offline_restore: Optional[pulumi.Input[_builtins.bool]] = None,
            plan: Optional[pulumi.Input[_builtins.str]] = None,
            point_in_time_recovery_deployment_id: Optional[pulumi.Input[_builtins.str]] = None,
            point_in_time_recovery_time: Optional[pulumi.Input[_builtins.str]] = None,
            remote_leader_id: Optional[pulumi.Input[_builtins.str]] = None,
            resource_controller_url: Optional[pulumi.Input[_builtins.str]] = None,
            resource_crn: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_name: Optional[pulumi.Input[_builtins.str]] = None,
            resource_name_: Optional[pulumi.Input[_builtins.str]] = None,
            resource_status: Optional[pulumi.Input[_builtins.str]] = None,
            service: Optional[pulumi.Input[_builtins.str]] = None,
            service_endpoints: Optional[pulumi.Input[_builtins.str]] = None,
            skip_initial_backup: Optional[pulumi.Input[_builtins.bool]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            timeouts: Optional[pulumi.Input[Union['DatabaseTimeoutsArgs', 'DatabaseTimeoutsArgsDict']]] = None,
            users: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DatabaseUserArgs', 'DatabaseUserArgsDict']]]]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None,
            version_upgrade_skip_backup: Optional[pulumi.Input[_builtins.bool]] = None) -> 'Database':
        """
        Get an existing Database resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] adminpassword: The admin user password for the instance
        :param pulumi.Input[_builtins.str] adminuser: The admin user id for the instance
        :param pulumi.Input[Union['DatabaseAutoScalingArgs', 'DatabaseAutoScalingArgsDict']] auto_scaling: ICD Auto Scaling
        :param pulumi.Input[_builtins.str] backup_encryption_key_crn: The Backup Encryption Key CRN
        :param pulumi.Input[_builtins.str] backup_id: The CRN of backup source database
        :param pulumi.Input[_builtins.str] configuration: The configuration in JSON format
        :param pulumi.Input[_builtins.str] configuration_schema: The configuration schema in JSON format
        :param pulumi.Input[_builtins.str] guid: Unique identifier of resource instance
        :param pulumi.Input[_builtins.str] key_protect_instance: The CRN of Key protect instance
        :param pulumi.Input[_builtins.str] key_protect_key: The CRN of Key protect key
        :param pulumi.Input[_builtins.str] location: The location or the region in which Database instance exists
        :param pulumi.Input[_builtins.str] name: Resource instance name for example, my Database instance
        :param pulumi.Input[_builtins.bool] offline_restore: Set offline restore mode for MongoDB Enterprise Edition
        :param pulumi.Input[_builtins.str] plan: The plan type of the Database instance
        :param pulumi.Input[_builtins.str] point_in_time_recovery_deployment_id: The CRN of source instance
        :param pulumi.Input[_builtins.str] point_in_time_recovery_time: The point in time recovery time stamp of the deployed instance
        :param pulumi.Input[_builtins.str] remote_leader_id: The CRN of leader database
        :param pulumi.Input[_builtins.str] resource_controller_url: The URL of the IBM Cloud dashboard that can be used to explore and view details about the resource
        :param pulumi.Input[_builtins.str] resource_crn: The crn of the resource
        :param pulumi.Input[_builtins.str] resource_group_id: The id of the resource group in which the Database instance is present
        :param pulumi.Input[_builtins.str] resource_group_name: The resource group name in which resource is provisioned
        :param pulumi.Input[_builtins.str] resource_name_: The name of the resource
        :param pulumi.Input[_builtins.str] resource_status: The status of the resource
        :param pulumi.Input[_builtins.str] service: The name of the Cloud Internet database service
        :param pulumi.Input[_builtins.str] service_endpoints: Types of the service endpoints. Possible values are 'public', 'private', 'public-and-private'.
        :param pulumi.Input[_builtins.bool] skip_initial_backup: Option to skip the initial backup when promoting a read-only replica. Skipping the initial backup means that your
               replica becomes available more quickly, but there is no immediate backup available.
        :param pulumi.Input[_builtins.str] status: The resource instance status
        :param pulumi.Input[_builtins.str] version: The database version to provision if specified or the database version to upgrade to
        :param pulumi.Input[_builtins.bool] version_upgrade_skip_backup: Option to skip the backup when upgrading version. Only applicable to databases that do not support PITR. Skipping the
               backup means that your deployment becomes available more quickly, but there is no immediate backup available. This is
               not recommended as it could result in data loss
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DatabaseState.__new__(_DatabaseState)

        __props__.__dict__["adminpassword"] = adminpassword
        __props__.__dict__["adminuser"] = adminuser
        __props__.__dict__["allowlists"] = allowlists
        __props__.__dict__["auto_scaling"] = auto_scaling
        __props__.__dict__["backup_encryption_key_crn"] = backup_encryption_key_crn
        __props__.__dict__["backup_id"] = backup_id
        __props__.__dict__["configuration"] = configuration
        __props__.__dict__["configuration_schema"] = configuration_schema
        __props__.__dict__["database_id"] = database_id
        __props__.__dict__["deletion_protection"] = deletion_protection
        __props__.__dict__["group"] = group
        __props__.__dict__["groups"] = groups
        __props__.__dict__["guid"] = guid
        __props__.__dict__["key_protect_instance"] = key_protect_instance
        __props__.__dict__["key_protect_key"] = key_protect_key
        __props__.__dict__["location"] = location
        __props__.__dict__["logical_replication_slots"] = logical_replication_slots
        __props__.__dict__["name"] = name
        __props__.__dict__["offline_restore"] = offline_restore
        __props__.__dict__["plan"] = plan
        __props__.__dict__["point_in_time_recovery_deployment_id"] = point_in_time_recovery_deployment_id
        __props__.__dict__["point_in_time_recovery_time"] = point_in_time_recovery_time
        __props__.__dict__["remote_leader_id"] = remote_leader_id
        __props__.__dict__["resource_controller_url"] = resource_controller_url
        __props__.__dict__["resource_crn"] = resource_crn
        __props__.__dict__["resource_group_id"] = resource_group_id
        __props__.__dict__["resource_group_name"] = resource_group_name
        __props__.__dict__["resource_name"] = resource_name_
        __props__.__dict__["resource_status"] = resource_status
        __props__.__dict__["service"] = service
        __props__.__dict__["service_endpoints"] = service_endpoints
        __props__.__dict__["skip_initial_backup"] = skip_initial_backup
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["users"] = users
        __props__.__dict__["version"] = version
        __props__.__dict__["version_upgrade_skip_backup"] = version_upgrade_skip_backup
        return Database(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def adminpassword(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The admin user password for the instance
        """
        return pulumi.get(self, "adminpassword")

    @_builtins.property
    @pulumi.getter
    def adminuser(self) -> pulumi.Output[_builtins.str]:
        """
        The admin user id for the instance
        """
        return pulumi.get(self, "adminuser")

    @_builtins.property
    @pulumi.getter
    def allowlists(self) -> pulumi.Output[Optional[Sequence['outputs.DatabaseAllowlist']]]:
        return pulumi.get(self, "allowlists")

    @_builtins.property
    @pulumi.getter(name="autoScaling")
    def auto_scaling(self) -> pulumi.Output[Optional['outputs.DatabaseAutoScaling']]:
        """
        ICD Auto Scaling
        """
        return pulumi.get(self, "auto_scaling")

    @_builtins.property
    @pulumi.getter(name="backupEncryptionKeyCrn")
    def backup_encryption_key_crn(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The Backup Encryption Key CRN
        """
        return pulumi.get(self, "backup_encryption_key_crn")

    @_builtins.property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The CRN of backup source database
        """
        return pulumi.get(self, "backup_id")

    @_builtins.property
    @pulumi.getter
    def configuration(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The configuration in JSON format
        """
        return pulumi.get(self, "configuration")

    @_builtins.property
    @pulumi.getter(name="configurationSchema")
    def configuration_schema(self) -> pulumi.Output[_builtins.str]:
        """
        The configuration schema in JSON format
        """
        return pulumi.get(self, "configuration_schema")

    @_builtins.property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "database_id")

    @_builtins.property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> pulumi.Output[Optional[_builtins.bool]]:
        return pulumi.get(self, "deletion_protection")

    @_builtins.property
    @pulumi.getter
    def group(self) -> pulumi.Output[Optional[Sequence['outputs.DatabaseGroup']]]:
        return pulumi.get(self, "group")

    @_builtins.property
    @pulumi.getter
    def groups(self) -> pulumi.Output[Sequence['outputs.DatabaseGroup']]:
        return pulumi.get(self, "groups")

    @_builtins.property
    @pulumi.getter
    def guid(self) -> pulumi.Output[_builtins.str]:
        """
        Unique identifier of resource instance
        """
        return pulumi.get(self, "guid")

    @_builtins.property
    @pulumi.getter(name="keyProtectInstance")
    def key_protect_instance(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The CRN of Key protect instance
        """
        return pulumi.get(self, "key_protect_instance")

    @_builtins.property
    @pulumi.getter(name="keyProtectKey")
    def key_protect_key(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The CRN of Key protect key
        """
        return pulumi.get(self, "key_protect_key")

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Output[_builtins.str]:
        """
        The location or the region in which Database instance exists
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter(name="logicalReplicationSlots")
    def logical_replication_slots(self) -> pulumi.Output[Optional[Sequence['outputs.DatabaseLogicalReplicationSlot']]]:
        return pulumi.get(self, "logical_replication_slots")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Resource instance name for example, my Database instance
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="offlineRestore")
    def offline_restore(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Set offline restore mode for MongoDB Enterprise Edition
        """
        return pulumi.get(self, "offline_restore")

    @_builtins.property
    @pulumi.getter
    def plan(self) -> pulumi.Output[_builtins.str]:
        """
        The plan type of the Database instance
        """
        return pulumi.get(self, "plan")

    @_builtins.property
    @pulumi.getter(name="pointInTimeRecoveryDeploymentId")
    def point_in_time_recovery_deployment_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The CRN of source instance
        """
        return pulumi.get(self, "point_in_time_recovery_deployment_id")

    @_builtins.property
    @pulumi.getter(name="pointInTimeRecoveryTime")
    def point_in_time_recovery_time(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The point in time recovery time stamp of the deployed instance
        """
        return pulumi.get(self, "point_in_time_recovery_time")

    @_builtins.property
    @pulumi.getter(name="remoteLeaderId")
    def remote_leader_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The CRN of leader database
        """
        return pulumi.get(self, "remote_leader_id")

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> pulumi.Output[_builtins.str]:
        """
        The URL of the IBM Cloud dashboard that can be used to explore and view details about the resource
        """
        return pulumi.get(self, "resource_controller_url")

    @_builtins.property
    @pulumi.getter(name="resourceCrn")
    def resource_crn(self) -> pulumi.Output[_builtins.str]:
        """
        The crn of the resource
        """
        return pulumi.get(self, "resource_crn")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        The id of the resource group in which the Database instance is present
        """
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Output[_builtins.str]:
        """
        The resource group name in which resource is provisioned
        """
        return pulumi.get(self, "resource_group_name")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceStatus")
    def resource_status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the resource
        """
        return pulumi.get(self, "resource_status")

    @_builtins.property
    @pulumi.getter
    def service(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the Cloud Internet database service
        """
        return pulumi.get(self, "service")

    @_builtins.property
    @pulumi.getter(name="serviceEndpoints")
    def service_endpoints(self) -> pulumi.Output[_builtins.str]:
        """
        Types of the service endpoints. Possible values are 'public', 'private', 'public-and-private'.
        """
        return pulumi.get(self, "service_endpoints")

    @_builtins.property
    @pulumi.getter(name="skipInitialBackup")
    def skip_initial_backup(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Option to skip the initial backup when promoting a read-only replica. Skipping the initial backup means that your
        replica becomes available more quickly, but there is no immediate backup available.
        """
        return pulumi.get(self, "skip_initial_backup")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The resource instance status
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.DatabaseTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def users(self) -> pulumi.Output[Optional[Sequence['outputs.DatabaseUser']]]:
        return pulumi.get(self, "users")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.str]:
        """
        The database version to provision if specified or the database version to upgrade to
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="versionUpgradeSkipBackup")
    def version_upgrade_skip_backup(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Option to skip the backup when upgrading version. Only applicable to databases that do not support PITR. Skipping the
        backup means that your deployment becomes available more quickly, but there is no immediate backup available. This is
        not recommended as it could result in data loss
        """
        return pulumi.get(self, "version_upgrade_skip_backup")

