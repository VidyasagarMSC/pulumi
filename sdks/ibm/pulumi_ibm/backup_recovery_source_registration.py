# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BackupRecoverySourceRegistrationArgs', 'BackupRecoverySourceRegistration']

@pulumi.input_type
class BackupRecoverySourceRegistrationArgs:
    def __init__(__self__, *,
                 environment: pulumi.Input[_builtins.str],
                 x_ibm_tenant_id: pulumi.Input[_builtins.str],
                 advanced_configs: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoverySourceRegistrationAdvancedConfigArgs']]]] = None,
                 backup_recovery_source_registration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 connections: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoverySourceRegistrationConnectionArgs']]]] = None,
                 connector_group_id: Optional[pulumi.Input[_builtins.float]] = None,
                 data_source_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 encryption_key: Optional[pulumi.Input[_builtins.str]] = None,
                 is_internal_encrypted: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 physical_params: Optional[pulumi.Input['BackupRecoverySourceRegistrationPhysicalParamsArgs']] = None):
        """
        The set of arguments for constructing a BackupRecoverySourceRegistration resource.
        :param pulumi.Input[_builtins.str] environment: Specifies the environment type of the Protection Source.
        :param pulumi.Input[_builtins.str] x_ibm_tenant_id: Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
               be specified.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoverySourceRegistrationAdvancedConfigArgs']]] advanced_configs: Specifies the advanced configuration for a protection source.
        :param pulumi.Input[_builtins.str] connection_id: Specifies the id of the connection from where this source is reachable. This should only be set for a source being
               registered by a tenant user. This field will be depricated in future. Use connections field.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoverySourceRegistrationConnectionArgs']]] connections: Specfies the list of connections for the source.
        :param pulumi.Input[_builtins.float] connector_group_id: Specifies the connector group id of connector groups.
        :param pulumi.Input[_builtins.str] data_source_connection_id: Specifies the id of the connection from where this source is reachable. This should only be set for a source being
               registered by a tenant user. Also, this is the 'string' of connectionId. This property was added to accommodate for ID
               values that exceed 2^53 - 1, which is the max value for which JS maintains precision.
        :param pulumi.Input[_builtins.str] encryption_key: Specifies the key that user has encrypted the credential with.
        :param pulumi.Input[_builtins.bool] is_internal_encrypted: Specifies if credentials are encrypted by internal key.
        :param pulumi.Input[_builtins.str] name: The user specified name for this source.
        :param pulumi.Input['BackupRecoverySourceRegistrationPhysicalParamsArgs'] physical_params: Specifies parameters to register physical server.
        """
        pulumi.set(__self__, "environment", environment)
        pulumi.set(__self__, "x_ibm_tenant_id", x_ibm_tenant_id)
        if advanced_configs is not None:
            pulumi.set(__self__, "advanced_configs", advanced_configs)
        if backup_recovery_source_registration_id is not None:
            pulumi.set(__self__, "backup_recovery_source_registration_id", backup_recovery_source_registration_id)
        if connection_id is not None:
            pulumi.set(__self__, "connection_id", connection_id)
        if connections is not None:
            pulumi.set(__self__, "connections", connections)
        if connector_group_id is not None:
            pulumi.set(__self__, "connector_group_id", connector_group_id)
        if data_source_connection_id is not None:
            pulumi.set(__self__, "data_source_connection_id", data_source_connection_id)
        if encryption_key is not None:
            pulumi.set(__self__, "encryption_key", encryption_key)
        if is_internal_encrypted is not None:
            pulumi.set(__self__, "is_internal_encrypted", is_internal_encrypted)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if physical_params is not None:
            pulumi.set(__self__, "physical_params", physical_params)

    @_builtins.property
    @pulumi.getter
    def environment(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the environment type of the Protection Source.
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "environment", value)

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
        be specified.
        """
        return pulumi.get(self, "x_ibm_tenant_id")

    @x_ibm_tenant_id.setter
    def x_ibm_tenant_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "x_ibm_tenant_id", value)

    @_builtins.property
    @pulumi.getter(name="advancedConfigs")
    def advanced_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoverySourceRegistrationAdvancedConfigArgs']]]]:
        """
        Specifies the advanced configuration for a protection source.
        """
        return pulumi.get(self, "advanced_configs")

    @advanced_configs.setter
    def advanced_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoverySourceRegistrationAdvancedConfigArgs']]]]):
        pulumi.set(self, "advanced_configs", value)

    @_builtins.property
    @pulumi.getter(name="backupRecoverySourceRegistrationId")
    def backup_recovery_source_registration_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "backup_recovery_source_registration_id")

    @backup_recovery_source_registration_id.setter
    def backup_recovery_source_registration_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_recovery_source_registration_id", value)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the id of the connection from where this source is reachable. This should only be set for a source being
        registered by a tenant user. This field will be depricated in future. Use connections field.
        """
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connection_id", value)

    @_builtins.property
    @pulumi.getter
    def connections(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoverySourceRegistrationConnectionArgs']]]]:
        """
        Specfies the list of connections for the source.
        """
        return pulumi.get(self, "connections")

    @connections.setter
    def connections(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoverySourceRegistrationConnectionArgs']]]]):
        pulumi.set(self, "connections", value)

    @_builtins.property
    @pulumi.getter(name="connectorGroupId")
    def connector_group_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the connector group id of connector groups.
        """
        return pulumi.get(self, "connector_group_id")

    @connector_group_id.setter
    def connector_group_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "connector_group_id", value)

    @_builtins.property
    @pulumi.getter(name="dataSourceConnectionId")
    def data_source_connection_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the id of the connection from where this source is reachable. This should only be set for a source being
        registered by a tenant user. Also, this is the 'string' of connectionId. This property was added to accommodate for ID
        values that exceed 2^53 - 1, which is the max value for which JS maintains precision.
        """
        return pulumi.get(self, "data_source_connection_id")

    @data_source_connection_id.setter
    def data_source_connection_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data_source_connection_id", value)

    @_builtins.property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the key that user has encrypted the credential with.
        """
        return pulumi.get(self, "encryption_key")

    @encryption_key.setter
    def encryption_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encryption_key", value)

    @_builtins.property
    @pulumi.getter(name="isInternalEncrypted")
    def is_internal_encrypted(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies if credentials are encrypted by internal key.
        """
        return pulumi.get(self, "is_internal_encrypted")

    @is_internal_encrypted.setter
    def is_internal_encrypted(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_internal_encrypted", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user specified name for this source.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="physicalParams")
    def physical_params(self) -> Optional[pulumi.Input['BackupRecoverySourceRegistrationPhysicalParamsArgs']]:
        """
        Specifies parameters to register physical server.
        """
        return pulumi.get(self, "physical_params")

    @physical_params.setter
    def physical_params(self, value: Optional[pulumi.Input['BackupRecoverySourceRegistrationPhysicalParamsArgs']]):
        pulumi.set(self, "physical_params", value)


@pulumi.input_type
class _BackupRecoverySourceRegistrationState:
    def __init__(__self__, *,
                 advanced_configs: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoverySourceRegistrationAdvancedConfigArgs']]]] = None,
                 authentication_status: Optional[pulumi.Input[_builtins.str]] = None,
                 backup_recovery_source_registration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 connections: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoverySourceRegistrationConnectionArgs']]]] = None,
                 connector_group_id: Optional[pulumi.Input[_builtins.float]] = None,
                 data_source_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 encryption_key: Optional[pulumi.Input[_builtins.str]] = None,
                 environment: Optional[pulumi.Input[_builtins.str]] = None,
                 external_metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoverySourceRegistrationExternalMetadataArgs']]]] = None,
                 is_internal_encrypted: Optional[pulumi.Input[_builtins.bool]] = None,
                 last_refreshed_time_msecs: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 physical_params: Optional[pulumi.Input['BackupRecoverySourceRegistrationPhysicalParamsArgs']] = None,
                 registration_time_msecs: Optional[pulumi.Input[_builtins.float]] = None,
                 source_id: Optional[pulumi.Input[_builtins.float]] = None,
                 source_infos: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoverySourceRegistrationSourceInfoArgs']]]] = None,
                 x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering BackupRecoverySourceRegistration resources.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoverySourceRegistrationAdvancedConfigArgs']]] advanced_configs: Specifies the advanced configuration for a protection source.
        :param pulumi.Input[_builtins.str] authentication_status: Specifies the status of the authentication during the registration of a Protection Source. 'Pending' indicates the
               authentication is in progress. 'Scheduled' indicates the authentication is scheduled. 'Finished' indicates the
               authentication is completed. 'RefreshInProgress' indicates the refresh is in progress.
        :param pulumi.Input[_builtins.str] connection_id: Specifies the id of the connection from where this source is reachable. This should only be set for a source being
               registered by a tenant user. This field will be depricated in future. Use connections field.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoverySourceRegistrationConnectionArgs']]] connections: Specfies the list of connections for the source.
        :param pulumi.Input[_builtins.float] connector_group_id: Specifies the connector group id of connector groups.
        :param pulumi.Input[_builtins.str] data_source_connection_id: Specifies the id of the connection from where this source is reachable. This should only be set for a source being
               registered by a tenant user. Also, this is the 'string' of connectionId. This property was added to accommodate for ID
               values that exceed 2^53 - 1, which is the max value for which JS maintains precision.
        :param pulumi.Input[_builtins.str] encryption_key: Specifies the key that user has encrypted the credential with.
        :param pulumi.Input[_builtins.str] environment: Specifies the environment type of the Protection Source.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoverySourceRegistrationExternalMetadataArgs']]] external_metadatas: Specifies the External metadata of an entity.
        :param pulumi.Input[_builtins.bool] is_internal_encrypted: Specifies if credentials are encrypted by internal key.
        :param pulumi.Input[_builtins.float] last_refreshed_time_msecs: Specifies the time when the source was last refreshed in milliseconds.
        :param pulumi.Input[_builtins.str] name: The user specified name for this source.
        :param pulumi.Input['BackupRecoverySourceRegistrationPhysicalParamsArgs'] physical_params: Specifies parameters to register physical server.
        :param pulumi.Input[_builtins.float] registration_time_msecs: Specifies the time when the source was registered in milliseconds.
        :param pulumi.Input[_builtins.float] source_id: ID of top level source object discovered after the registration.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoverySourceRegistrationSourceInfoArgs']]] source_infos: Specifies information about an object.
        :param pulumi.Input[_builtins.str] x_ibm_tenant_id: Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
               be specified.
        """
        if advanced_configs is not None:
            pulumi.set(__self__, "advanced_configs", advanced_configs)
        if authentication_status is not None:
            pulumi.set(__self__, "authentication_status", authentication_status)
        if backup_recovery_source_registration_id is not None:
            pulumi.set(__self__, "backup_recovery_source_registration_id", backup_recovery_source_registration_id)
        if connection_id is not None:
            pulumi.set(__self__, "connection_id", connection_id)
        if connections is not None:
            pulumi.set(__self__, "connections", connections)
        if connector_group_id is not None:
            pulumi.set(__self__, "connector_group_id", connector_group_id)
        if data_source_connection_id is not None:
            pulumi.set(__self__, "data_source_connection_id", data_source_connection_id)
        if encryption_key is not None:
            pulumi.set(__self__, "encryption_key", encryption_key)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if external_metadatas is not None:
            pulumi.set(__self__, "external_metadatas", external_metadatas)
        if is_internal_encrypted is not None:
            pulumi.set(__self__, "is_internal_encrypted", is_internal_encrypted)
        if last_refreshed_time_msecs is not None:
            pulumi.set(__self__, "last_refreshed_time_msecs", last_refreshed_time_msecs)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if physical_params is not None:
            pulumi.set(__self__, "physical_params", physical_params)
        if registration_time_msecs is not None:
            pulumi.set(__self__, "registration_time_msecs", registration_time_msecs)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)
        if source_infos is not None:
            pulumi.set(__self__, "source_infos", source_infos)
        if x_ibm_tenant_id is not None:
            pulumi.set(__self__, "x_ibm_tenant_id", x_ibm_tenant_id)

    @_builtins.property
    @pulumi.getter(name="advancedConfigs")
    def advanced_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoverySourceRegistrationAdvancedConfigArgs']]]]:
        """
        Specifies the advanced configuration for a protection source.
        """
        return pulumi.get(self, "advanced_configs")

    @advanced_configs.setter
    def advanced_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoverySourceRegistrationAdvancedConfigArgs']]]]):
        pulumi.set(self, "advanced_configs", value)

    @_builtins.property
    @pulumi.getter(name="authenticationStatus")
    def authentication_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the status of the authentication during the registration of a Protection Source. 'Pending' indicates the
        authentication is in progress. 'Scheduled' indicates the authentication is scheduled. 'Finished' indicates the
        authentication is completed. 'RefreshInProgress' indicates the refresh is in progress.
        """
        return pulumi.get(self, "authentication_status")

    @authentication_status.setter
    def authentication_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_status", value)

    @_builtins.property
    @pulumi.getter(name="backupRecoverySourceRegistrationId")
    def backup_recovery_source_registration_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "backup_recovery_source_registration_id")

    @backup_recovery_source_registration_id.setter
    def backup_recovery_source_registration_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_recovery_source_registration_id", value)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the id of the connection from where this source is reachable. This should only be set for a source being
        registered by a tenant user. This field will be depricated in future. Use connections field.
        """
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connection_id", value)

    @_builtins.property
    @pulumi.getter
    def connections(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoverySourceRegistrationConnectionArgs']]]]:
        """
        Specfies the list of connections for the source.
        """
        return pulumi.get(self, "connections")

    @connections.setter
    def connections(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoverySourceRegistrationConnectionArgs']]]]):
        pulumi.set(self, "connections", value)

    @_builtins.property
    @pulumi.getter(name="connectorGroupId")
    def connector_group_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the connector group id of connector groups.
        """
        return pulumi.get(self, "connector_group_id")

    @connector_group_id.setter
    def connector_group_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "connector_group_id", value)

    @_builtins.property
    @pulumi.getter(name="dataSourceConnectionId")
    def data_source_connection_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the id of the connection from where this source is reachable. This should only be set for a source being
        registered by a tenant user. Also, this is the 'string' of connectionId. This property was added to accommodate for ID
        values that exceed 2^53 - 1, which is the max value for which JS maintains precision.
        """
        return pulumi.get(self, "data_source_connection_id")

    @data_source_connection_id.setter
    def data_source_connection_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data_source_connection_id", value)

    @_builtins.property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the key that user has encrypted the credential with.
        """
        return pulumi.get(self, "encryption_key")

    @encryption_key.setter
    def encryption_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "encryption_key", value)

    @_builtins.property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the environment type of the Protection Source.
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "environment", value)

    @_builtins.property
    @pulumi.getter(name="externalMetadatas")
    def external_metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoverySourceRegistrationExternalMetadataArgs']]]]:
        """
        Specifies the External metadata of an entity.
        """
        return pulumi.get(self, "external_metadatas")

    @external_metadatas.setter
    def external_metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoverySourceRegistrationExternalMetadataArgs']]]]):
        pulumi.set(self, "external_metadatas", value)

    @_builtins.property
    @pulumi.getter(name="isInternalEncrypted")
    def is_internal_encrypted(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies if credentials are encrypted by internal key.
        """
        return pulumi.get(self, "is_internal_encrypted")

    @is_internal_encrypted.setter
    def is_internal_encrypted(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_internal_encrypted", value)

    @_builtins.property
    @pulumi.getter(name="lastRefreshedTimeMsecs")
    def last_refreshed_time_msecs(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the time when the source was last refreshed in milliseconds.
        """
        return pulumi.get(self, "last_refreshed_time_msecs")

    @last_refreshed_time_msecs.setter
    def last_refreshed_time_msecs(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "last_refreshed_time_msecs", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user specified name for this source.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="physicalParams")
    def physical_params(self) -> Optional[pulumi.Input['BackupRecoverySourceRegistrationPhysicalParamsArgs']]:
        """
        Specifies parameters to register physical server.
        """
        return pulumi.get(self, "physical_params")

    @physical_params.setter
    def physical_params(self, value: Optional[pulumi.Input['BackupRecoverySourceRegistrationPhysicalParamsArgs']]):
        pulumi.set(self, "physical_params", value)

    @_builtins.property
    @pulumi.getter(name="registrationTimeMsecs")
    def registration_time_msecs(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the time when the source was registered in milliseconds.
        """
        return pulumi.get(self, "registration_time_msecs")

    @registration_time_msecs.setter
    def registration_time_msecs(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "registration_time_msecs", value)

    @_builtins.property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        ID of top level source object discovered after the registration.
        """
        return pulumi.get(self, "source_id")

    @source_id.setter
    def source_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "source_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceInfos")
    def source_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoverySourceRegistrationSourceInfoArgs']]]]:
        """
        Specifies information about an object.
        """
        return pulumi.get(self, "source_infos")

    @source_infos.setter
    def source_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoverySourceRegistrationSourceInfoArgs']]]]):
        pulumi.set(self, "source_infos", value)

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
        be specified.
        """
        return pulumi.get(self, "x_ibm_tenant_id")

    @x_ibm_tenant_id.setter
    def x_ibm_tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "x_ibm_tenant_id", value)


@pulumi.type_token("ibm:index/backupRecoverySourceRegistration:BackupRecoverySourceRegistration")
class BackupRecoverySourceRegistration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 advanced_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoverySourceRegistrationAdvancedConfigArgs', 'BackupRecoverySourceRegistrationAdvancedConfigArgsDict']]]]] = None,
                 backup_recovery_source_registration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 connections: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoverySourceRegistrationConnectionArgs', 'BackupRecoverySourceRegistrationConnectionArgsDict']]]]] = None,
                 connector_group_id: Optional[pulumi.Input[_builtins.float]] = None,
                 data_source_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 encryption_key: Optional[pulumi.Input[_builtins.str]] = None,
                 environment: Optional[pulumi.Input[_builtins.str]] = None,
                 is_internal_encrypted: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 physical_params: Optional[pulumi.Input[Union['BackupRecoverySourceRegistrationPhysicalParamsArgs', 'BackupRecoverySourceRegistrationPhysicalParamsArgsDict']]] = None,
                 x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a BackupRecoverySourceRegistration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoverySourceRegistrationAdvancedConfigArgs', 'BackupRecoverySourceRegistrationAdvancedConfigArgsDict']]]] advanced_configs: Specifies the advanced configuration for a protection source.
        :param pulumi.Input[_builtins.str] connection_id: Specifies the id of the connection from where this source is reachable. This should only be set for a source being
               registered by a tenant user. This field will be depricated in future. Use connections field.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoverySourceRegistrationConnectionArgs', 'BackupRecoverySourceRegistrationConnectionArgsDict']]]] connections: Specfies the list of connections for the source.
        :param pulumi.Input[_builtins.float] connector_group_id: Specifies the connector group id of connector groups.
        :param pulumi.Input[_builtins.str] data_source_connection_id: Specifies the id of the connection from where this source is reachable. This should only be set for a source being
               registered by a tenant user. Also, this is the 'string' of connectionId. This property was added to accommodate for ID
               values that exceed 2^53 - 1, which is the max value for which JS maintains precision.
        :param pulumi.Input[_builtins.str] encryption_key: Specifies the key that user has encrypted the credential with.
        :param pulumi.Input[_builtins.str] environment: Specifies the environment type of the Protection Source.
        :param pulumi.Input[_builtins.bool] is_internal_encrypted: Specifies if credentials are encrypted by internal key.
        :param pulumi.Input[_builtins.str] name: The user specified name for this source.
        :param pulumi.Input[Union['BackupRecoverySourceRegistrationPhysicalParamsArgs', 'BackupRecoverySourceRegistrationPhysicalParamsArgsDict']] physical_params: Specifies parameters to register physical server.
        :param pulumi.Input[_builtins.str] x_ibm_tenant_id: Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
               be specified.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BackupRecoverySourceRegistrationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a BackupRecoverySourceRegistration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param BackupRecoverySourceRegistrationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BackupRecoverySourceRegistrationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 advanced_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoverySourceRegistrationAdvancedConfigArgs', 'BackupRecoverySourceRegistrationAdvancedConfigArgsDict']]]]] = None,
                 backup_recovery_source_registration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 connections: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoverySourceRegistrationConnectionArgs', 'BackupRecoverySourceRegistrationConnectionArgsDict']]]]] = None,
                 connector_group_id: Optional[pulumi.Input[_builtins.float]] = None,
                 data_source_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 encryption_key: Optional[pulumi.Input[_builtins.str]] = None,
                 environment: Optional[pulumi.Input[_builtins.str]] = None,
                 is_internal_encrypted: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 physical_params: Optional[pulumi.Input[Union['BackupRecoverySourceRegistrationPhysicalParamsArgs', 'BackupRecoverySourceRegistrationPhysicalParamsArgsDict']]] = None,
                 x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BackupRecoverySourceRegistrationArgs.__new__(BackupRecoverySourceRegistrationArgs)

            __props__.__dict__["advanced_configs"] = advanced_configs
            __props__.__dict__["backup_recovery_source_registration_id"] = backup_recovery_source_registration_id
            __props__.__dict__["connection_id"] = connection_id
            __props__.__dict__["connections"] = connections
            __props__.__dict__["connector_group_id"] = connector_group_id
            __props__.__dict__["data_source_connection_id"] = data_source_connection_id
            __props__.__dict__["encryption_key"] = encryption_key
            if environment is None and not opts.urn:
                raise TypeError("Missing required property 'environment'")
            __props__.__dict__["environment"] = environment
            __props__.__dict__["is_internal_encrypted"] = is_internal_encrypted
            __props__.__dict__["name"] = name
            __props__.__dict__["physical_params"] = physical_params
            if x_ibm_tenant_id is None and not opts.urn:
                raise TypeError("Missing required property 'x_ibm_tenant_id'")
            __props__.__dict__["x_ibm_tenant_id"] = x_ibm_tenant_id
            __props__.__dict__["authentication_status"] = None
            __props__.__dict__["external_metadatas"] = None
            __props__.__dict__["last_refreshed_time_msecs"] = None
            __props__.__dict__["registration_time_msecs"] = None
            __props__.__dict__["source_id"] = None
            __props__.__dict__["source_infos"] = None
        super(BackupRecoverySourceRegistration, __self__).__init__(
            'ibm:index/backupRecoverySourceRegistration:BackupRecoverySourceRegistration',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            advanced_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoverySourceRegistrationAdvancedConfigArgs', 'BackupRecoverySourceRegistrationAdvancedConfigArgsDict']]]]] = None,
            authentication_status: Optional[pulumi.Input[_builtins.str]] = None,
            backup_recovery_source_registration_id: Optional[pulumi.Input[_builtins.str]] = None,
            connection_id: Optional[pulumi.Input[_builtins.str]] = None,
            connections: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoverySourceRegistrationConnectionArgs', 'BackupRecoverySourceRegistrationConnectionArgsDict']]]]] = None,
            connector_group_id: Optional[pulumi.Input[_builtins.float]] = None,
            data_source_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
            encryption_key: Optional[pulumi.Input[_builtins.str]] = None,
            environment: Optional[pulumi.Input[_builtins.str]] = None,
            external_metadatas: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoverySourceRegistrationExternalMetadataArgs', 'BackupRecoverySourceRegistrationExternalMetadataArgsDict']]]]] = None,
            is_internal_encrypted: Optional[pulumi.Input[_builtins.bool]] = None,
            last_refreshed_time_msecs: Optional[pulumi.Input[_builtins.float]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            physical_params: Optional[pulumi.Input[Union['BackupRecoverySourceRegistrationPhysicalParamsArgs', 'BackupRecoverySourceRegistrationPhysicalParamsArgsDict']]] = None,
            registration_time_msecs: Optional[pulumi.Input[_builtins.float]] = None,
            source_id: Optional[pulumi.Input[_builtins.float]] = None,
            source_infos: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoverySourceRegistrationSourceInfoArgs', 'BackupRecoverySourceRegistrationSourceInfoArgsDict']]]]] = None,
            x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'BackupRecoverySourceRegistration':
        """
        Get an existing BackupRecoverySourceRegistration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoverySourceRegistrationAdvancedConfigArgs', 'BackupRecoverySourceRegistrationAdvancedConfigArgsDict']]]] advanced_configs: Specifies the advanced configuration for a protection source.
        :param pulumi.Input[_builtins.str] authentication_status: Specifies the status of the authentication during the registration of a Protection Source. 'Pending' indicates the
               authentication is in progress. 'Scheduled' indicates the authentication is scheduled. 'Finished' indicates the
               authentication is completed. 'RefreshInProgress' indicates the refresh is in progress.
        :param pulumi.Input[_builtins.str] connection_id: Specifies the id of the connection from where this source is reachable. This should only be set for a source being
               registered by a tenant user. This field will be depricated in future. Use connections field.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoverySourceRegistrationConnectionArgs', 'BackupRecoverySourceRegistrationConnectionArgsDict']]]] connections: Specfies the list of connections for the source.
        :param pulumi.Input[_builtins.float] connector_group_id: Specifies the connector group id of connector groups.
        :param pulumi.Input[_builtins.str] data_source_connection_id: Specifies the id of the connection from where this source is reachable. This should only be set for a source being
               registered by a tenant user. Also, this is the 'string' of connectionId. This property was added to accommodate for ID
               values that exceed 2^53 - 1, which is the max value for which JS maintains precision.
        :param pulumi.Input[_builtins.str] encryption_key: Specifies the key that user has encrypted the credential with.
        :param pulumi.Input[_builtins.str] environment: Specifies the environment type of the Protection Source.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoverySourceRegistrationExternalMetadataArgs', 'BackupRecoverySourceRegistrationExternalMetadataArgsDict']]]] external_metadatas: Specifies the External metadata of an entity.
        :param pulumi.Input[_builtins.bool] is_internal_encrypted: Specifies if credentials are encrypted by internal key.
        :param pulumi.Input[_builtins.float] last_refreshed_time_msecs: Specifies the time when the source was last refreshed in milliseconds.
        :param pulumi.Input[_builtins.str] name: The user specified name for this source.
        :param pulumi.Input[Union['BackupRecoverySourceRegistrationPhysicalParamsArgs', 'BackupRecoverySourceRegistrationPhysicalParamsArgsDict']] physical_params: Specifies parameters to register physical server.
        :param pulumi.Input[_builtins.float] registration_time_msecs: Specifies the time when the source was registered in milliseconds.
        :param pulumi.Input[_builtins.float] source_id: ID of top level source object discovered after the registration.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoverySourceRegistrationSourceInfoArgs', 'BackupRecoverySourceRegistrationSourceInfoArgsDict']]]] source_infos: Specifies information about an object.
        :param pulumi.Input[_builtins.str] x_ibm_tenant_id: Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
               be specified.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BackupRecoverySourceRegistrationState.__new__(_BackupRecoverySourceRegistrationState)

        __props__.__dict__["advanced_configs"] = advanced_configs
        __props__.__dict__["authentication_status"] = authentication_status
        __props__.__dict__["backup_recovery_source_registration_id"] = backup_recovery_source_registration_id
        __props__.__dict__["connection_id"] = connection_id
        __props__.__dict__["connections"] = connections
        __props__.__dict__["connector_group_id"] = connector_group_id
        __props__.__dict__["data_source_connection_id"] = data_source_connection_id
        __props__.__dict__["encryption_key"] = encryption_key
        __props__.__dict__["environment"] = environment
        __props__.__dict__["external_metadatas"] = external_metadatas
        __props__.__dict__["is_internal_encrypted"] = is_internal_encrypted
        __props__.__dict__["last_refreshed_time_msecs"] = last_refreshed_time_msecs
        __props__.__dict__["name"] = name
        __props__.__dict__["physical_params"] = physical_params
        __props__.__dict__["registration_time_msecs"] = registration_time_msecs
        __props__.__dict__["source_id"] = source_id
        __props__.__dict__["source_infos"] = source_infos
        __props__.__dict__["x_ibm_tenant_id"] = x_ibm_tenant_id
        return BackupRecoverySourceRegistration(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="advancedConfigs")
    def advanced_configs(self) -> pulumi.Output[Optional[Sequence['outputs.BackupRecoverySourceRegistrationAdvancedConfig']]]:
        """
        Specifies the advanced configuration for a protection source.
        """
        return pulumi.get(self, "advanced_configs")

    @_builtins.property
    @pulumi.getter(name="authenticationStatus")
    def authentication_status(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the status of the authentication during the registration of a Protection Source. 'Pending' indicates the
        authentication is in progress. 'Scheduled' indicates the authentication is scheduled. 'Finished' indicates the
        authentication is completed. 'RefreshInProgress' indicates the refresh is in progress.
        """
        return pulumi.get(self, "authentication_status")

    @_builtins.property
    @pulumi.getter(name="backupRecoverySourceRegistrationId")
    def backup_recovery_source_registration_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "backup_recovery_source_registration_id")

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the id of the connection from where this source is reachable. This should only be set for a source being
        registered by a tenant user. This field will be depricated in future. Use connections field.
        """
        return pulumi.get(self, "connection_id")

    @_builtins.property
    @pulumi.getter
    def connections(self) -> pulumi.Output[Optional[Sequence['outputs.BackupRecoverySourceRegistrationConnection']]]:
        """
        Specfies the list of connections for the source.
        """
        return pulumi.get(self, "connections")

    @_builtins.property
    @pulumi.getter(name="connectorGroupId")
    def connector_group_id(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Specifies the connector group id of connector groups.
        """
        return pulumi.get(self, "connector_group_id")

    @_builtins.property
    @pulumi.getter(name="dataSourceConnectionId")
    def data_source_connection_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the id of the connection from where this source is reachable. This should only be set for a source being
        registered by a tenant user. Also, this is the 'string' of connectionId. This property was added to accommodate for ID
        values that exceed 2^53 - 1, which is the max value for which JS maintains precision.
        """
        return pulumi.get(self, "data_source_connection_id")

    @_builtins.property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the key that user has encrypted the credential with.
        """
        return pulumi.get(self, "encryption_key")

    @_builtins.property
    @pulumi.getter
    def environment(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the environment type of the Protection Source.
        """
        return pulumi.get(self, "environment")

    @_builtins.property
    @pulumi.getter(name="externalMetadatas")
    def external_metadatas(self) -> pulumi.Output[Sequence['outputs.BackupRecoverySourceRegistrationExternalMetadata']]:
        """
        Specifies the External metadata of an entity.
        """
        return pulumi.get(self, "external_metadatas")

    @_builtins.property
    @pulumi.getter(name="isInternalEncrypted")
    def is_internal_encrypted(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies if credentials are encrypted by internal key.
        """
        return pulumi.get(self, "is_internal_encrypted")

    @_builtins.property
    @pulumi.getter(name="lastRefreshedTimeMsecs")
    def last_refreshed_time_msecs(self) -> pulumi.Output[_builtins.float]:
        """
        Specifies the time when the source was last refreshed in milliseconds.
        """
        return pulumi.get(self, "last_refreshed_time_msecs")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The user specified name for this source.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="physicalParams")
    def physical_params(self) -> pulumi.Output[Optional['outputs.BackupRecoverySourceRegistrationPhysicalParams']]:
        """
        Specifies parameters to register physical server.
        """
        return pulumi.get(self, "physical_params")

    @_builtins.property
    @pulumi.getter(name="registrationTimeMsecs")
    def registration_time_msecs(self) -> pulumi.Output[_builtins.float]:
        """
        Specifies the time when the source was registered in milliseconds.
        """
        return pulumi.get(self, "registration_time_msecs")

    @_builtins.property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> pulumi.Output[_builtins.float]:
        """
        ID of top level source object discovered after the registration.
        """
        return pulumi.get(self, "source_id")

    @_builtins.property
    @pulumi.getter(name="sourceInfos")
    def source_infos(self) -> pulumi.Output[Sequence['outputs.BackupRecoverySourceRegistrationSourceInfo']]:
        """
        Specifies information about an object.
        """
        return pulumi.get(self, "source_infos")

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the key to be used to encrypt the source credential. If includeSourceCredentials is set to true this key must
        be specified.
        """
        return pulumi.get(self, "x_ibm_tenant_id")

