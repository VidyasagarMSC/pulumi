# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSatelliteLocationResult',
    'AwaitableGetSatelliteLocationResult',
    'get_satellite_location',
    'get_satellite_location_output',
]

@pulumi.output_type
class GetSatelliteLocationResult:
    """
    A collection of values returned by getSatelliteLocation.
    """
    def __init__(__self__, capabilities=None, coreos_enabled=None, created_on=None, crn=None, description=None, host_attached_count=None, host_available_count=None, hosts=None, id=None, ingress_hostname=None, ingress_secret=None, location=None, logging_account_id=None, managed_from=None, physical_address=None, pod_subnet=None, resource_group_id=None, resource_group_name=None, service_subnet=None, tags=None, zones=None):
        if capabilities and not isinstance(capabilities, list):
            raise TypeError("Expected argument 'capabilities' to be a list")
        pulumi.set(__self__, "capabilities", capabilities)
        if coreos_enabled and not isinstance(coreos_enabled, bool):
            raise TypeError("Expected argument 'coreos_enabled' to be a bool")
        pulumi.set(__self__, "coreos_enabled", coreos_enabled)
        if created_on and not isinstance(created_on, str):
            raise TypeError("Expected argument 'created_on' to be a str")
        pulumi.set(__self__, "created_on", created_on)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if host_attached_count and not isinstance(host_attached_count, float):
            raise TypeError("Expected argument 'host_attached_count' to be a float")
        pulumi.set(__self__, "host_attached_count", host_attached_count)
        if host_available_count and not isinstance(host_available_count, float):
            raise TypeError("Expected argument 'host_available_count' to be a float")
        pulumi.set(__self__, "host_available_count", host_available_count)
        if hosts and not isinstance(hosts, list):
            raise TypeError("Expected argument 'hosts' to be a list")
        pulumi.set(__self__, "hosts", hosts)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ingress_hostname and not isinstance(ingress_hostname, str):
            raise TypeError("Expected argument 'ingress_hostname' to be a str")
        pulumi.set(__self__, "ingress_hostname", ingress_hostname)
        if ingress_secret and not isinstance(ingress_secret, str):
            raise TypeError("Expected argument 'ingress_secret' to be a str")
        pulumi.set(__self__, "ingress_secret", ingress_secret)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if logging_account_id and not isinstance(logging_account_id, str):
            raise TypeError("Expected argument 'logging_account_id' to be a str")
        pulumi.set(__self__, "logging_account_id", logging_account_id)
        if managed_from and not isinstance(managed_from, str):
            raise TypeError("Expected argument 'managed_from' to be a str")
        pulumi.set(__self__, "managed_from", managed_from)
        if physical_address and not isinstance(physical_address, str):
            raise TypeError("Expected argument 'physical_address' to be a str")
        pulumi.set(__self__, "physical_address", physical_address)
        if pod_subnet and not isinstance(pod_subnet, str):
            raise TypeError("Expected argument 'pod_subnet' to be a str")
        pulumi.set(__self__, "pod_subnet", pod_subnet)
        if resource_group_id and not isinstance(resource_group_id, str):
            raise TypeError("Expected argument 'resource_group_id' to be a str")
        pulumi.set(__self__, "resource_group_id", resource_group_id)
        if resource_group_name and not isinstance(resource_group_name, str):
            raise TypeError("Expected argument 'resource_group_name' to be a str")
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if service_subnet and not isinstance(service_subnet, str):
            raise TypeError("Expected argument 'service_subnet' to be a str")
        pulumi.set(__self__, "service_subnet", service_subnet)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if zones and not isinstance(zones, list):
            raise TypeError("Expected argument 'zones' to be a list")
        pulumi.set(__self__, "zones", zones)

    @_builtins.property
    @pulumi.getter
    def capabilities(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "capabilities")

    @_builtins.property
    @pulumi.getter(name="coreosEnabled")
    def coreos_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "coreos_enabled")

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> _builtins.str:
        return pulumi.get(self, "created_on")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="hostAttachedCount")
    def host_attached_count(self) -> _builtins.float:
        return pulumi.get(self, "host_attached_count")

    @_builtins.property
    @pulumi.getter(name="hostAvailableCount")
    def host_available_count(self) -> _builtins.float:
        return pulumi.get(self, "host_available_count")

    @_builtins.property
    @pulumi.getter
    def hosts(self) -> Sequence['outputs.GetSatelliteLocationHostResult']:
        return pulumi.get(self, "hosts")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ingressHostname")
    def ingress_hostname(self) -> _builtins.str:
        return pulumi.get(self, "ingress_hostname")

    @_builtins.property
    @pulumi.getter(name="ingressSecret")
    def ingress_secret(self) -> _builtins.str:
        return pulumi.get(self, "ingress_secret")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter(name="loggingAccountId")
    def logging_account_id(self) -> _builtins.str:
        return pulumi.get(self, "logging_account_id")

    @_builtins.property
    @pulumi.getter(name="managedFrom")
    def managed_from(self) -> _builtins.str:
        return pulumi.get(self, "managed_from")

    @_builtins.property
    @pulumi.getter(name="physicalAddress")
    def physical_address(self) -> _builtins.str:
        return pulumi.get(self, "physical_address")

    @_builtins.property
    @pulumi.getter(name="podSubnet")
    def pod_subnet(self) -> _builtins.str:
        return pulumi.get(self, "pod_subnet")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> _builtins.str:
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> _builtins.str:
        return pulumi.get(self, "resource_group_name")

    @_builtins.property
    @pulumi.getter(name="serviceSubnet")
    def service_subnet(self) -> _builtins.str:
        return pulumi.get(self, "service_subnet")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def zones(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "zones")


class AwaitableGetSatelliteLocationResult(GetSatelliteLocationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSatelliteLocationResult(
            capabilities=self.capabilities,
            coreos_enabled=self.coreos_enabled,
            created_on=self.created_on,
            crn=self.crn,
            description=self.description,
            host_attached_count=self.host_attached_count,
            host_available_count=self.host_available_count,
            hosts=self.hosts,
            id=self.id,
            ingress_hostname=self.ingress_hostname,
            ingress_secret=self.ingress_secret,
            location=self.location,
            logging_account_id=self.logging_account_id,
            managed_from=self.managed_from,
            physical_address=self.physical_address,
            pod_subnet=self.pod_subnet,
            resource_group_id=self.resource_group_id,
            resource_group_name=self.resource_group_name,
            service_subnet=self.service_subnet,
            tags=self.tags,
            zones=self.zones)


def get_satellite_location(id: Optional[_builtins.str] = None,
                           location: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSatelliteLocationResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['location'] = location
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSatelliteLocation:getSatelliteLocation', __args__, opts=opts, typ=GetSatelliteLocationResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSatelliteLocationResult(
        capabilities=pulumi.get(__ret__, 'capabilities'),
        coreos_enabled=pulumi.get(__ret__, 'coreos_enabled'),
        created_on=pulumi.get(__ret__, 'created_on'),
        crn=pulumi.get(__ret__, 'crn'),
        description=pulumi.get(__ret__, 'description'),
        host_attached_count=pulumi.get(__ret__, 'host_attached_count'),
        host_available_count=pulumi.get(__ret__, 'host_available_count'),
        hosts=pulumi.get(__ret__, 'hosts'),
        id=pulumi.get(__ret__, 'id'),
        ingress_hostname=pulumi.get(__ret__, 'ingress_hostname'),
        ingress_secret=pulumi.get(__ret__, 'ingress_secret'),
        location=pulumi.get(__ret__, 'location'),
        logging_account_id=pulumi.get(__ret__, 'logging_account_id'),
        managed_from=pulumi.get(__ret__, 'managed_from'),
        physical_address=pulumi.get(__ret__, 'physical_address'),
        pod_subnet=pulumi.get(__ret__, 'pod_subnet'),
        resource_group_id=pulumi.get(__ret__, 'resource_group_id'),
        resource_group_name=pulumi.get(__ret__, 'resource_group_name'),
        service_subnet=pulumi.get(__ret__, 'service_subnet'),
        tags=pulumi.get(__ret__, 'tags'),
        zones=pulumi.get(__ret__, 'zones'))
def get_satellite_location_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  location: Optional[pulumi.Input[_builtins.str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSatelliteLocationResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['location'] = location
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSatelliteLocation:getSatelliteLocation', __args__, opts=opts, typ=GetSatelliteLocationResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSatelliteLocationResult(
        capabilities=pulumi.get(__response__, 'capabilities'),
        coreos_enabled=pulumi.get(__response__, 'coreos_enabled'),
        created_on=pulumi.get(__response__, 'created_on'),
        crn=pulumi.get(__response__, 'crn'),
        description=pulumi.get(__response__, 'description'),
        host_attached_count=pulumi.get(__response__, 'host_attached_count'),
        host_available_count=pulumi.get(__response__, 'host_available_count'),
        hosts=pulumi.get(__response__, 'hosts'),
        id=pulumi.get(__response__, 'id'),
        ingress_hostname=pulumi.get(__response__, 'ingress_hostname'),
        ingress_secret=pulumi.get(__response__, 'ingress_secret'),
        location=pulumi.get(__response__, 'location'),
        logging_account_id=pulumi.get(__response__, 'logging_account_id'),
        managed_from=pulumi.get(__response__, 'managed_from'),
        physical_address=pulumi.get(__response__, 'physical_address'),
        pod_subnet=pulumi.get(__response__, 'pod_subnet'),
        resource_group_id=pulumi.get(__response__, 'resource_group_id'),
        resource_group_name=pulumi.get(__response__, 'resource_group_name'),
        service_subnet=pulumi.get(__response__, 'service_subnet'),
        tags=pulumi.get(__response__, 'tags'),
        zones=pulumi.get(__response__, 'zones')))
