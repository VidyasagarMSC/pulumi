# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsInstanceClusterNetworkAttachmentResult',
    'AwaitableGetIsInstanceClusterNetworkAttachmentResult',
    'get_is_instance_cluster_network_attachment',
    'get_is_instance_cluster_network_attachment_output',
]

@pulumi.output_type
class GetIsInstanceClusterNetworkAttachmentResult:
    """
    A collection of values returned by getIsInstanceClusterNetworkAttachment.
    """
    def __init__(__self__, befores=None, cluster_network_interfaces=None, href=None, id=None, instance_cluster_network_attachment_id=None, instance_id=None, lifecycle_reasons=None, lifecycle_state=None, name=None, resource_type=None):
        if befores and not isinstance(befores, list):
            raise TypeError("Expected argument 'befores' to be a list")
        pulumi.set(__self__, "befores", befores)
        if cluster_network_interfaces and not isinstance(cluster_network_interfaces, list):
            raise TypeError("Expected argument 'cluster_network_interfaces' to be a list")
        pulumi.set(__self__, "cluster_network_interfaces", cluster_network_interfaces)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_cluster_network_attachment_id and not isinstance(instance_cluster_network_attachment_id, str):
            raise TypeError("Expected argument 'instance_cluster_network_attachment_id' to be a str")
        pulumi.set(__self__, "instance_cluster_network_attachment_id", instance_cluster_network_attachment_id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if lifecycle_reasons and not isinstance(lifecycle_reasons, list):
            raise TypeError("Expected argument 'lifecycle_reasons' to be a list")
        pulumi.set(__self__, "lifecycle_reasons", lifecycle_reasons)
        if lifecycle_state and not isinstance(lifecycle_state, str):
            raise TypeError("Expected argument 'lifecycle_state' to be a str")
        pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)

    @_builtins.property
    @pulumi.getter
    def befores(self) -> Sequence['outputs.GetIsInstanceClusterNetworkAttachmentBeforeResult']:
        return pulumi.get(self, "befores")

    @_builtins.property
    @pulumi.getter(name="clusterNetworkInterfaces")
    def cluster_network_interfaces(self) -> Sequence['outputs.GetIsInstanceClusterNetworkAttachmentClusterNetworkInterfaceResult']:
        return pulumi.get(self, "cluster_network_interfaces")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceClusterNetworkAttachmentId")
    def instance_cluster_network_attachment_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_cluster_network_attachment_id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="lifecycleReasons")
    def lifecycle_reasons(self) -> Sequence['outputs.GetIsInstanceClusterNetworkAttachmentLifecycleReasonResult']:
        return pulumi.get(self, "lifecycle_reasons")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> _builtins.str:
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")


class AwaitableGetIsInstanceClusterNetworkAttachmentResult(GetIsInstanceClusterNetworkAttachmentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsInstanceClusterNetworkAttachmentResult(
            befores=self.befores,
            cluster_network_interfaces=self.cluster_network_interfaces,
            href=self.href,
            id=self.id,
            instance_cluster_network_attachment_id=self.instance_cluster_network_attachment_id,
            instance_id=self.instance_id,
            lifecycle_reasons=self.lifecycle_reasons,
            lifecycle_state=self.lifecycle_state,
            name=self.name,
            resource_type=self.resource_type)


def get_is_instance_cluster_network_attachment(id: Optional[_builtins.str] = None,
                                               instance_cluster_network_attachment_id: Optional[_builtins.str] = None,
                                               instance_id: Optional[_builtins.str] = None,
                                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsInstanceClusterNetworkAttachmentResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceClusterNetworkAttachmentId'] = instance_cluster_network_attachment_id
    __args__['instanceId'] = instance_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsInstanceClusterNetworkAttachment:getIsInstanceClusterNetworkAttachment', __args__, opts=opts, typ=GetIsInstanceClusterNetworkAttachmentResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsInstanceClusterNetworkAttachmentResult(
        befores=pulumi.get(__ret__, 'befores'),
        cluster_network_interfaces=pulumi.get(__ret__, 'cluster_network_interfaces'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        instance_cluster_network_attachment_id=pulumi.get(__ret__, 'instance_cluster_network_attachment_id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        lifecycle_reasons=pulumi.get(__ret__, 'lifecycle_reasons'),
        lifecycle_state=pulumi.get(__ret__, 'lifecycle_state'),
        name=pulumi.get(__ret__, 'name'),
        resource_type=pulumi.get(__ret__, 'resource_type'))
def get_is_instance_cluster_network_attachment_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                      instance_cluster_network_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                      instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsInstanceClusterNetworkAttachmentResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceClusterNetworkAttachmentId'] = instance_cluster_network_attachment_id
    __args__['instanceId'] = instance_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsInstanceClusterNetworkAttachment:getIsInstanceClusterNetworkAttachment', __args__, opts=opts, typ=GetIsInstanceClusterNetworkAttachmentResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsInstanceClusterNetworkAttachmentResult(
        befores=pulumi.get(__response__, 'befores'),
        cluster_network_interfaces=pulumi.get(__response__, 'cluster_network_interfaces'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        instance_cluster_network_attachment_id=pulumi.get(__response__, 'instance_cluster_network_attachment_id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        lifecycle_reasons=pulumi.get(__response__, 'lifecycle_reasons'),
        lifecycle_state=pulumi.get(__response__, 'lifecycle_state'),
        name=pulumi.get(__response__, 'name'),
        resource_type=pulumi.get(__response__, 'resource_type')))
