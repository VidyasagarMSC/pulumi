# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CmOfferingInstanceArgs', 'CmOfferingInstance']

@pulumi.input_type
class CmOfferingInstanceArgs:
    def __init__(__self__, *,
                 catalog_id: pulumi.Input[_builtins.str],
                 cluster_all_namespaces: pulumi.Input[_builtins.bool],
                 cluster_id: pulumi.Input[_builtins.str],
                 cluster_namespaces: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 cluster_region: pulumi.Input[_builtins.str],
                 kind_format: pulumi.Input[_builtins.str],
                 label: pulumi.Input[_builtins.str],
                 offering_id: pulumi.Input[_builtins.str],
                 version: pulumi.Input[_builtins.str],
                 channel: Optional[pulumi.Input[_builtins.str]] = None,
                 cm_offering_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 install_plan: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 plan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['CmOfferingInstanceTimeoutsArgs']] = None,
                 wait_until_successful: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a CmOfferingInstance resource.
        :param pulumi.Input[_builtins.str] catalog_id: Catalog ID this instance was created from.
        :param pulumi.Input[_builtins.bool] cluster_all_namespaces: designate to install into all namespaces.
        :param pulumi.Input[_builtins.str] cluster_id: Cluster ID.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] cluster_namespaces: List of target namespaces to install into.
        :param pulumi.Input[_builtins.str] cluster_region: Cluster region (e.g., us-south).
        :param pulumi.Input[_builtins.str] kind_format: the format this instance has (helm, operator, ova...).
        :param pulumi.Input[_builtins.str] label: the label for this instance.
        :param pulumi.Input[_builtins.str] offering_id: Offering ID this instance was created from.
        :param pulumi.Input[_builtins.str] version: The version this instance was installed from (not version id).
        :param pulumi.Input[_builtins.str] channel: channel to target for the operator subscription. Required for operator bundles
        :param pulumi.Input[_builtins.str] install_plan: install plan for the subscription of the operator- can be either automatic or manual. Required for operator bundles
        :param pulumi.Input[_builtins.str] parent_crn: CRN of parent instance
        :param pulumi.Input[_builtins.str] plan_id: id of the plan
        :param pulumi.Input[_builtins.str] resource_group_id: id of the resource group
        :param pulumi.Input[_builtins.bool] wait_until_successful: Whether to wait until the offering instance successfully provisions, or to return when accepted
        """
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "cluster_all_namespaces", cluster_all_namespaces)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_namespaces", cluster_namespaces)
        pulumi.set(__self__, "cluster_region", cluster_region)
        pulumi.set(__self__, "kind_format", kind_format)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "offering_id", offering_id)
        pulumi.set(__self__, "version", version)
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if cm_offering_instance_id is not None:
            pulumi.set(__self__, "cm_offering_instance_id", cm_offering_instance_id)
        if install_plan is not None:
            pulumi.set(__self__, "install_plan", install_plan)
        if parent_crn is not None:
            pulumi.set(__self__, "parent_crn", parent_crn)
        if plan_id is not None:
            pulumi.set(__self__, "plan_id", plan_id)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if wait_until_successful is not None:
            pulumi.set(__self__, "wait_until_successful", wait_until_successful)

    @_builtins.property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Input[_builtins.str]:
        """
        Catalog ID this instance was created from.
        """
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "catalog_id", value)

    @_builtins.property
    @pulumi.getter(name="clusterAllNamespaces")
    def cluster_all_namespaces(self) -> pulumi.Input[_builtins.bool]:
        """
        designate to install into all namespaces.
        """
        return pulumi.get(self, "cluster_all_namespaces")

    @cluster_all_namespaces.setter
    def cluster_all_namespaces(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "cluster_all_namespaces", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="clusterNamespaces")
    def cluster_namespaces(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        List of target namespaces to install into.
        """
        return pulumi.get(self, "cluster_namespaces")

    @cluster_namespaces.setter
    def cluster_namespaces(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "cluster_namespaces", value)

    @_builtins.property
    @pulumi.getter(name="clusterRegion")
    def cluster_region(self) -> pulumi.Input[_builtins.str]:
        """
        Cluster region (e.g., us-south).
        """
        return pulumi.get(self, "cluster_region")

    @cluster_region.setter
    def cluster_region(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_region", value)

    @_builtins.property
    @pulumi.getter(name="kindFormat")
    def kind_format(self) -> pulumi.Input[_builtins.str]:
        """
        the format this instance has (helm, operator, ova...).
        """
        return pulumi.get(self, "kind_format")

    @kind_format.setter
    def kind_format(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "kind_format", value)

    @_builtins.property
    @pulumi.getter
    def label(self) -> pulumi.Input[_builtins.str]:
        """
        the label for this instance.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "label", value)

    @_builtins.property
    @pulumi.getter(name="offeringId")
    def offering_id(self) -> pulumi.Input[_builtins.str]:
        """
        Offering ID this instance was created from.
        """
        return pulumi.get(self, "offering_id")

    @offering_id.setter
    def offering_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "offering_id", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Input[_builtins.str]:
        """
        The version this instance was installed from (not version id).
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter
    def channel(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        channel to target for the operator subscription. Required for operator bundles
        """
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "channel", value)

    @_builtins.property
    @pulumi.getter(name="cmOfferingInstanceId")
    def cm_offering_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cm_offering_instance_id")

    @cm_offering_instance_id.setter
    def cm_offering_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cm_offering_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="installPlan")
    def install_plan(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        install plan for the subscription of the operator- can be either automatic or manual. Required for operator bundles
        """
        return pulumi.get(self, "install_plan")

    @install_plan.setter
    def install_plan(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "install_plan", value)

    @_builtins.property
    @pulumi.getter(name="parentCrn")
    def parent_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CRN of parent instance
        """
        return pulumi.get(self, "parent_crn")

    @parent_crn.setter
    def parent_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parent_crn", value)

    @_builtins.property
    @pulumi.getter(name="planId")
    def plan_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        id of the plan
        """
        return pulumi.get(self, "plan_id")

    @plan_id.setter
    def plan_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "plan_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        id of the resource group
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['CmOfferingInstanceTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['CmOfferingInstanceTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="waitUntilSuccessful")
    def wait_until_successful(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to wait until the offering instance successfully provisions, or to return when accepted
        """
        return pulumi.get(self, "wait_until_successful")

    @wait_until_successful.setter
    def wait_until_successful(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "wait_until_successful", value)


@pulumi.input_type
class _CmOfferingInstanceState:
    def __init__(__self__, *,
                 catalog_id: Optional[pulumi.Input[_builtins.str]] = None,
                 channel: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_all_namespaces: Optional[pulumi.Input[_builtins.bool]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 cluster_region: Optional[pulumi.Input[_builtins.str]] = None,
                 cm_offering_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 install_plan: Optional[pulumi.Input[_builtins.str]] = None,
                 kind_format: Optional[pulumi.Input[_builtins.str]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 offering_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 plan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 schematics_workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['CmOfferingInstanceTimeoutsArgs']] = None,
                 url: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 wait_until_successful: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        Input properties used for looking up and filtering CmOfferingInstance resources.
        :param pulumi.Input[_builtins.str] catalog_id: Catalog ID this instance was created from.
        :param pulumi.Input[_builtins.str] channel: channel to target for the operator subscription. Required for operator bundles
        :param pulumi.Input[_builtins.bool] cluster_all_namespaces: designate to install into all namespaces.
        :param pulumi.Input[_builtins.str] cluster_id: Cluster ID.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] cluster_namespaces: List of target namespaces to install into.
        :param pulumi.Input[_builtins.str] cluster_region: Cluster region (e.g., us-south).
        :param pulumi.Input[_builtins.str] crn: platform CRN for this instance.
        :param pulumi.Input[_builtins.str] install_plan: install plan for the subscription of the operator- can be either automatic or manual. Required for operator bundles
        :param pulumi.Input[_builtins.str] kind_format: the format this instance has (helm, operator, ova...).
        :param pulumi.Input[_builtins.str] label: the label for this instance.
        :param pulumi.Input[_builtins.str] offering_id: Offering ID this instance was created from.
        :param pulumi.Input[_builtins.str] parent_crn: CRN of parent instance
        :param pulumi.Input[_builtins.str] plan_id: id of the plan
        :param pulumi.Input[_builtins.str] resource_group_id: id of the resource group
        :param pulumi.Input[_builtins.str] schematics_workspace_id: id of the schematics workspace, for offerings installed through schematics
        :param pulumi.Input[_builtins.str] url: url reference to this object.
        :param pulumi.Input[_builtins.str] version: The version this instance was installed from (not version id).
        :param pulumi.Input[_builtins.bool] wait_until_successful: Whether to wait until the offering instance successfully provisions, or to return when accepted
        """
        if catalog_id is not None:
            pulumi.set(__self__, "catalog_id", catalog_id)
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if cluster_all_namespaces is not None:
            pulumi.set(__self__, "cluster_all_namespaces", cluster_all_namespaces)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_namespaces is not None:
            pulumi.set(__self__, "cluster_namespaces", cluster_namespaces)
        if cluster_region is not None:
            pulumi.set(__self__, "cluster_region", cluster_region)
        if cm_offering_instance_id is not None:
            pulumi.set(__self__, "cm_offering_instance_id", cm_offering_instance_id)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if install_plan is not None:
            pulumi.set(__self__, "install_plan", install_plan)
        if kind_format is not None:
            pulumi.set(__self__, "kind_format", kind_format)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if offering_id is not None:
            pulumi.set(__self__, "offering_id", offering_id)
        if parent_crn is not None:
            pulumi.set(__self__, "parent_crn", parent_crn)
        if plan_id is not None:
            pulumi.set(__self__, "plan_id", plan_id)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if schematics_workspace_id is not None:
            pulumi.set(__self__, "schematics_workspace_id", schematics_workspace_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if wait_until_successful is not None:
            pulumi.set(__self__, "wait_until_successful", wait_until_successful)

    @_builtins.property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Catalog ID this instance was created from.
        """
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "catalog_id", value)

    @_builtins.property
    @pulumi.getter
    def channel(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        channel to target for the operator subscription. Required for operator bundles
        """
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "channel", value)

    @_builtins.property
    @pulumi.getter(name="clusterAllNamespaces")
    def cluster_all_namespaces(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        designate to install into all namespaces.
        """
        return pulumi.get(self, "cluster_all_namespaces")

    @cluster_all_namespaces.setter
    def cluster_all_namespaces(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "cluster_all_namespaces", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="clusterNamespaces")
    def cluster_namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of target namespaces to install into.
        """
        return pulumi.get(self, "cluster_namespaces")

    @cluster_namespaces.setter
    def cluster_namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "cluster_namespaces", value)

    @_builtins.property
    @pulumi.getter(name="clusterRegion")
    def cluster_region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cluster region (e.g., us-south).
        """
        return pulumi.get(self, "cluster_region")

    @cluster_region.setter
    def cluster_region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_region", value)

    @_builtins.property
    @pulumi.getter(name="cmOfferingInstanceId")
    def cm_offering_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cm_offering_instance_id")

    @cm_offering_instance_id.setter
    def cm_offering_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cm_offering_instance_id", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        platform CRN for this instance.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="installPlan")
    def install_plan(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        install plan for the subscription of the operator- can be either automatic or manual. Required for operator bundles
        """
        return pulumi.get(self, "install_plan")

    @install_plan.setter
    def install_plan(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "install_plan", value)

    @_builtins.property
    @pulumi.getter(name="kindFormat")
    def kind_format(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        the format this instance has (helm, operator, ova...).
        """
        return pulumi.get(self, "kind_format")

    @kind_format.setter
    def kind_format(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kind_format", value)

    @_builtins.property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        the label for this instance.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "label", value)

    @_builtins.property
    @pulumi.getter(name="offeringId")
    def offering_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Offering ID this instance was created from.
        """
        return pulumi.get(self, "offering_id")

    @offering_id.setter
    def offering_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "offering_id", value)

    @_builtins.property
    @pulumi.getter(name="parentCrn")
    def parent_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CRN of parent instance
        """
        return pulumi.get(self, "parent_crn")

    @parent_crn.setter
    def parent_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parent_crn", value)

    @_builtins.property
    @pulumi.getter(name="planId")
    def plan_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        id of the plan
        """
        return pulumi.get(self, "plan_id")

    @plan_id.setter
    def plan_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "plan_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        id of the resource group
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter(name="schematicsWorkspaceId")
    def schematics_workspace_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        id of the schematics workspace, for offerings installed through schematics
        """
        return pulumi.get(self, "schematics_workspace_id")

    @schematics_workspace_id.setter
    def schematics_workspace_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "schematics_workspace_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['CmOfferingInstanceTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['CmOfferingInstanceTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        url reference to this object.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "url", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The version this instance was installed from (not version id).
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)

    @_builtins.property
    @pulumi.getter(name="waitUntilSuccessful")
    def wait_until_successful(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to wait until the offering instance successfully provisions, or to return when accepted
        """
        return pulumi.get(self, "wait_until_successful")

    @wait_until_successful.setter
    def wait_until_successful(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "wait_until_successful", value)


@pulumi.type_token("ibm:index/cmOfferingInstance:CmOfferingInstance")
class CmOfferingInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 catalog_id: Optional[pulumi.Input[_builtins.str]] = None,
                 channel: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_all_namespaces: Optional[pulumi.Input[_builtins.bool]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 cluster_region: Optional[pulumi.Input[_builtins.str]] = None,
                 cm_offering_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 install_plan: Optional[pulumi.Input[_builtins.str]] = None,
                 kind_format: Optional[pulumi.Input[_builtins.str]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 offering_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 plan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['CmOfferingInstanceTimeoutsArgs', 'CmOfferingInstanceTimeoutsArgsDict']]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 wait_until_successful: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        """
        Create a CmOfferingInstance resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] catalog_id: Catalog ID this instance was created from.
        :param pulumi.Input[_builtins.str] channel: channel to target for the operator subscription. Required for operator bundles
        :param pulumi.Input[_builtins.bool] cluster_all_namespaces: designate to install into all namespaces.
        :param pulumi.Input[_builtins.str] cluster_id: Cluster ID.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] cluster_namespaces: List of target namespaces to install into.
        :param pulumi.Input[_builtins.str] cluster_region: Cluster region (e.g., us-south).
        :param pulumi.Input[_builtins.str] install_plan: install plan for the subscription of the operator- can be either automatic or manual. Required for operator bundles
        :param pulumi.Input[_builtins.str] kind_format: the format this instance has (helm, operator, ova...).
        :param pulumi.Input[_builtins.str] label: the label for this instance.
        :param pulumi.Input[_builtins.str] offering_id: Offering ID this instance was created from.
        :param pulumi.Input[_builtins.str] parent_crn: CRN of parent instance
        :param pulumi.Input[_builtins.str] plan_id: id of the plan
        :param pulumi.Input[_builtins.str] resource_group_id: id of the resource group
        :param pulumi.Input[_builtins.str] version: The version this instance was installed from (not version id).
        :param pulumi.Input[_builtins.bool] wait_until_successful: Whether to wait until the offering instance successfully provisions, or to return when accepted
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CmOfferingInstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CmOfferingInstance resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CmOfferingInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CmOfferingInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 catalog_id: Optional[pulumi.Input[_builtins.str]] = None,
                 channel: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_all_namespaces: Optional[pulumi.Input[_builtins.bool]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 cluster_region: Optional[pulumi.Input[_builtins.str]] = None,
                 cm_offering_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 install_plan: Optional[pulumi.Input[_builtins.str]] = None,
                 kind_format: Optional[pulumi.Input[_builtins.str]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 offering_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 plan_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['CmOfferingInstanceTimeoutsArgs', 'CmOfferingInstanceTimeoutsArgsDict']]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None,
                 wait_until_successful: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CmOfferingInstanceArgs.__new__(CmOfferingInstanceArgs)

            if catalog_id is None and not opts.urn:
                raise TypeError("Missing required property 'catalog_id'")
            __props__.__dict__["catalog_id"] = catalog_id
            __props__.__dict__["channel"] = channel
            if cluster_all_namespaces is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_all_namespaces'")
            __props__.__dict__["cluster_all_namespaces"] = cluster_all_namespaces
            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            if cluster_namespaces is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_namespaces'")
            __props__.__dict__["cluster_namespaces"] = cluster_namespaces
            if cluster_region is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_region'")
            __props__.__dict__["cluster_region"] = cluster_region
            __props__.__dict__["cm_offering_instance_id"] = cm_offering_instance_id
            __props__.__dict__["install_plan"] = install_plan
            if kind_format is None and not opts.urn:
                raise TypeError("Missing required property 'kind_format'")
            __props__.__dict__["kind_format"] = kind_format
            if label is None and not opts.urn:
                raise TypeError("Missing required property 'label'")
            __props__.__dict__["label"] = label
            if offering_id is None and not opts.urn:
                raise TypeError("Missing required property 'offering_id'")
            __props__.__dict__["offering_id"] = offering_id
            __props__.__dict__["parent_crn"] = parent_crn
            __props__.__dict__["plan_id"] = plan_id
            __props__.__dict__["resource_group_id"] = resource_group_id
            __props__.__dict__["timeouts"] = timeouts
            if version is None and not opts.urn:
                raise TypeError("Missing required property 'version'")
            __props__.__dict__["version"] = version
            __props__.__dict__["wait_until_successful"] = wait_until_successful
            __props__.__dict__["crn"] = None
            __props__.__dict__["schematics_workspace_id"] = None
            __props__.__dict__["url"] = None
        super(CmOfferingInstance, __self__).__init__(
            'ibm:index/cmOfferingInstance:CmOfferingInstance',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            catalog_id: Optional[pulumi.Input[_builtins.str]] = None,
            channel: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_all_namespaces: Optional[pulumi.Input[_builtins.bool]] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            cluster_region: Optional[pulumi.Input[_builtins.str]] = None,
            cm_offering_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            install_plan: Optional[pulumi.Input[_builtins.str]] = None,
            kind_format: Optional[pulumi.Input[_builtins.str]] = None,
            label: Optional[pulumi.Input[_builtins.str]] = None,
            offering_id: Optional[pulumi.Input[_builtins.str]] = None,
            parent_crn: Optional[pulumi.Input[_builtins.str]] = None,
            plan_id: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            schematics_workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['CmOfferingInstanceTimeoutsArgs', 'CmOfferingInstanceTimeoutsArgsDict']]] = None,
            url: Optional[pulumi.Input[_builtins.str]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None,
            wait_until_successful: Optional[pulumi.Input[_builtins.bool]] = None) -> 'CmOfferingInstance':
        """
        Get an existing CmOfferingInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] catalog_id: Catalog ID this instance was created from.
        :param pulumi.Input[_builtins.str] channel: channel to target for the operator subscription. Required for operator bundles
        :param pulumi.Input[_builtins.bool] cluster_all_namespaces: designate to install into all namespaces.
        :param pulumi.Input[_builtins.str] cluster_id: Cluster ID.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] cluster_namespaces: List of target namespaces to install into.
        :param pulumi.Input[_builtins.str] cluster_region: Cluster region (e.g., us-south).
        :param pulumi.Input[_builtins.str] crn: platform CRN for this instance.
        :param pulumi.Input[_builtins.str] install_plan: install plan for the subscription of the operator- can be either automatic or manual. Required for operator bundles
        :param pulumi.Input[_builtins.str] kind_format: the format this instance has (helm, operator, ova...).
        :param pulumi.Input[_builtins.str] label: the label for this instance.
        :param pulumi.Input[_builtins.str] offering_id: Offering ID this instance was created from.
        :param pulumi.Input[_builtins.str] parent_crn: CRN of parent instance
        :param pulumi.Input[_builtins.str] plan_id: id of the plan
        :param pulumi.Input[_builtins.str] resource_group_id: id of the resource group
        :param pulumi.Input[_builtins.str] schematics_workspace_id: id of the schematics workspace, for offerings installed through schematics
        :param pulumi.Input[_builtins.str] url: url reference to this object.
        :param pulumi.Input[_builtins.str] version: The version this instance was installed from (not version id).
        :param pulumi.Input[_builtins.bool] wait_until_successful: Whether to wait until the offering instance successfully provisions, or to return when accepted
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CmOfferingInstanceState.__new__(_CmOfferingInstanceState)

        __props__.__dict__["catalog_id"] = catalog_id
        __props__.__dict__["channel"] = channel
        __props__.__dict__["cluster_all_namespaces"] = cluster_all_namespaces
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["cluster_namespaces"] = cluster_namespaces
        __props__.__dict__["cluster_region"] = cluster_region
        __props__.__dict__["cm_offering_instance_id"] = cm_offering_instance_id
        __props__.__dict__["crn"] = crn
        __props__.__dict__["install_plan"] = install_plan
        __props__.__dict__["kind_format"] = kind_format
        __props__.__dict__["label"] = label
        __props__.__dict__["offering_id"] = offering_id
        __props__.__dict__["parent_crn"] = parent_crn
        __props__.__dict__["plan_id"] = plan_id
        __props__.__dict__["resource_group_id"] = resource_group_id
        __props__.__dict__["schematics_workspace_id"] = schematics_workspace_id
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["url"] = url
        __props__.__dict__["version"] = version
        __props__.__dict__["wait_until_successful"] = wait_until_successful
        return CmOfferingInstance(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Output[_builtins.str]:
        """
        Catalog ID this instance was created from.
        """
        return pulumi.get(self, "catalog_id")

    @_builtins.property
    @pulumi.getter
    def channel(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        channel to target for the operator subscription. Required for operator bundles
        """
        return pulumi.get(self, "channel")

    @_builtins.property
    @pulumi.getter(name="clusterAllNamespaces")
    def cluster_all_namespaces(self) -> pulumi.Output[_builtins.bool]:
        """
        designate to install into all namespaces.
        """
        return pulumi.get(self, "cluster_all_namespaces")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="clusterNamespaces")
    def cluster_namespaces(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of target namespaces to install into.
        """
        return pulumi.get(self, "cluster_namespaces")

    @_builtins.property
    @pulumi.getter(name="clusterRegion")
    def cluster_region(self) -> pulumi.Output[_builtins.str]:
        """
        Cluster region (e.g., us-south).
        """
        return pulumi.get(self, "cluster_region")

    @_builtins.property
    @pulumi.getter(name="cmOfferingInstanceId")
    def cm_offering_instance_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cm_offering_instance_id")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        platform CRN for this instance.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="installPlan")
    def install_plan(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        install plan for the subscription of the operator- can be either automatic or manual. Required for operator bundles
        """
        return pulumi.get(self, "install_plan")

    @_builtins.property
    @pulumi.getter(name="kindFormat")
    def kind_format(self) -> pulumi.Output[_builtins.str]:
        """
        the format this instance has (helm, operator, ova...).
        """
        return pulumi.get(self, "kind_format")

    @_builtins.property
    @pulumi.getter
    def label(self) -> pulumi.Output[_builtins.str]:
        """
        the label for this instance.
        """
        return pulumi.get(self, "label")

    @_builtins.property
    @pulumi.getter(name="offeringId")
    def offering_id(self) -> pulumi.Output[_builtins.str]:
        """
        Offering ID this instance was created from.
        """
        return pulumi.get(self, "offering_id")

    @_builtins.property
    @pulumi.getter(name="parentCrn")
    def parent_crn(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        CRN of parent instance
        """
        return pulumi.get(self, "parent_crn")

    @_builtins.property
    @pulumi.getter(name="planId")
    def plan_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        id of the plan
        """
        return pulumi.get(self, "plan_id")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        id of the resource group
        """
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter(name="schematicsWorkspaceId")
    def schematics_workspace_id(self) -> pulumi.Output[_builtins.str]:
        """
        id of the schematics workspace, for offerings installed through schematics
        """
        return pulumi.get(self, "schematics_workspace_id")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.CmOfferingInstanceTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def url(self) -> pulumi.Output[_builtins.str]:
        """
        url reference to this object.
        """
        return pulumi.get(self, "url")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.str]:
        """
        The version this instance was installed from (not version id).
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="waitUntilSuccessful")
    def wait_until_successful(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Whether to wait until the offering instance successfully provisions, or to return when accepted
        """
        return pulumi.get(self, "wait_until_successful")

