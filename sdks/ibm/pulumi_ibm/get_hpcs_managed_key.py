# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetHpcsManagedKeyResult',
    'AwaitableGetHpcsManagedKeyResult',
    'get_hpcs_managed_key',
    'get_hpcs_managed_key_output',
]

@pulumi.output_type
class GetHpcsManagedKeyResult:
    """
    A collection of values returned by getHpcsManagedKey.
    """
    def __init__(__self__, activation_date=None, algorithm=None, created_at=None, created_by=None, description=None, expiration_date=None, href=None, id=None, instance_id=None, instances=None, key_id=None, label=None, referenced_keystores=None, region=None, size=None, state=None, tags=None, templates=None, uko_vault=None, updated_at=None, updated_by=None, vaults=None, verification_patterns=None):
        if activation_date and not isinstance(activation_date, str):
            raise TypeError("Expected argument 'activation_date' to be a str")
        pulumi.set(__self__, "activation_date", activation_date)
        if algorithm and not isinstance(algorithm, str):
            raise TypeError("Expected argument 'algorithm' to be a str")
        pulumi.set(__self__, "algorithm", algorithm)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if expiration_date and not isinstance(expiration_date, str):
            raise TypeError("Expected argument 'expiration_date' to be a str")
        pulumi.set(__self__, "expiration_date", expiration_date)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if instances and not isinstance(instances, list):
            raise TypeError("Expected argument 'instances' to be a list")
        pulumi.set(__self__, "instances", instances)
        if key_id and not isinstance(key_id, str):
            raise TypeError("Expected argument 'key_id' to be a str")
        pulumi.set(__self__, "key_id", key_id)
        if label and not isinstance(label, str):
            raise TypeError("Expected argument 'label' to be a str")
        pulumi.set(__self__, "label", label)
        if referenced_keystores and not isinstance(referenced_keystores, list):
            raise TypeError("Expected argument 'referenced_keystores' to be a list")
        pulumi.set(__self__, "referenced_keystores", referenced_keystores)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if size and not isinstance(size, str):
            raise TypeError("Expected argument 'size' to be a str")
        pulumi.set(__self__, "size", size)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if templates and not isinstance(templates, list):
            raise TypeError("Expected argument 'templates' to be a list")
        pulumi.set(__self__, "templates", templates)
        if uko_vault and not isinstance(uko_vault, str):
            raise TypeError("Expected argument 'uko_vault' to be a str")
        pulumi.set(__self__, "uko_vault", uko_vault)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)
        if updated_by and not isinstance(updated_by, str):
            raise TypeError("Expected argument 'updated_by' to be a str")
        pulumi.set(__self__, "updated_by", updated_by)
        if vaults and not isinstance(vaults, list):
            raise TypeError("Expected argument 'vaults' to be a list")
        pulumi.set(__self__, "vaults", vaults)
        if verification_patterns and not isinstance(verification_patterns, list):
            raise TypeError("Expected argument 'verification_patterns' to be a list")
        pulumi.set(__self__, "verification_patterns", verification_patterns)

    @_builtins.property
    @pulumi.getter(name="activationDate")
    def activation_date(self) -> _builtins.str:
        return pulumi.get(self, "activation_date")

    @_builtins.property
    @pulumi.getter
    def algorithm(self) -> _builtins.str:
        return pulumi.get(self, "algorithm")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> _builtins.str:
        return pulumi.get(self, "expiration_date")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.GetHpcsManagedKeyInstanceResult']:
        return pulumi.get(self, "instances")

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> _builtins.str:
        return pulumi.get(self, "key_id")

    @_builtins.property
    @pulumi.getter
    def label(self) -> _builtins.str:
        return pulumi.get(self, "label")

    @_builtins.property
    @pulumi.getter(name="referencedKeystores")
    def referenced_keystores(self) -> Sequence['outputs.GetHpcsManagedKeyReferencedKeystoreResult']:
        return pulumi.get(self, "referenced_keystores")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.str:
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetHpcsManagedKeyTagResult']:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def templates(self) -> Sequence['outputs.GetHpcsManagedKeyTemplateResult']:
        return pulumi.get(self, "templates")

    @_builtins.property
    @pulumi.getter(name="ukoVault")
    def uko_vault(self) -> _builtins.str:
        return pulumi.get(self, "uko_vault")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> _builtins.str:
        return pulumi.get(self, "updated_by")

    @_builtins.property
    @pulumi.getter
    def vaults(self) -> Sequence['outputs.GetHpcsManagedKeyVaultResult']:
        return pulumi.get(self, "vaults")

    @_builtins.property
    @pulumi.getter(name="verificationPatterns")
    def verification_patterns(self) -> Sequence['outputs.GetHpcsManagedKeyVerificationPatternResult']:
        return pulumi.get(self, "verification_patterns")


class AwaitableGetHpcsManagedKeyResult(GetHpcsManagedKeyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetHpcsManagedKeyResult(
            activation_date=self.activation_date,
            algorithm=self.algorithm,
            created_at=self.created_at,
            created_by=self.created_by,
            description=self.description,
            expiration_date=self.expiration_date,
            href=self.href,
            id=self.id,
            instance_id=self.instance_id,
            instances=self.instances,
            key_id=self.key_id,
            label=self.label,
            referenced_keystores=self.referenced_keystores,
            region=self.region,
            size=self.size,
            state=self.state,
            tags=self.tags,
            templates=self.templates,
            uko_vault=self.uko_vault,
            updated_at=self.updated_at,
            updated_by=self.updated_by,
            vaults=self.vaults,
            verification_patterns=self.verification_patterns)


def get_hpcs_managed_key(id: Optional[_builtins.str] = None,
                         instance_id: Optional[_builtins.str] = None,
                         key_id: Optional[_builtins.str] = None,
                         region: Optional[_builtins.str] = None,
                         uko_vault: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetHpcsManagedKeyResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['keyId'] = key_id
    __args__['region'] = region
    __args__['ukoVault'] = uko_vault
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getHpcsManagedKey:getHpcsManagedKey', __args__, opts=opts, typ=GetHpcsManagedKeyResult, package_ref=_utilities.get_package()).value

    return AwaitableGetHpcsManagedKeyResult(
        activation_date=pulumi.get(__ret__, 'activation_date'),
        algorithm=pulumi.get(__ret__, 'algorithm'),
        created_at=pulumi.get(__ret__, 'created_at'),
        created_by=pulumi.get(__ret__, 'created_by'),
        description=pulumi.get(__ret__, 'description'),
        expiration_date=pulumi.get(__ret__, 'expiration_date'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        instances=pulumi.get(__ret__, 'instances'),
        key_id=pulumi.get(__ret__, 'key_id'),
        label=pulumi.get(__ret__, 'label'),
        referenced_keystores=pulumi.get(__ret__, 'referenced_keystores'),
        region=pulumi.get(__ret__, 'region'),
        size=pulumi.get(__ret__, 'size'),
        state=pulumi.get(__ret__, 'state'),
        tags=pulumi.get(__ret__, 'tags'),
        templates=pulumi.get(__ret__, 'templates'),
        uko_vault=pulumi.get(__ret__, 'uko_vault'),
        updated_at=pulumi.get(__ret__, 'updated_at'),
        updated_by=pulumi.get(__ret__, 'updated_by'),
        vaults=pulumi.get(__ret__, 'vaults'),
        verification_patterns=pulumi.get(__ret__, 'verification_patterns'))
def get_hpcs_managed_key_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                key_id: Optional[pulumi.Input[_builtins.str]] = None,
                                region: Optional[pulumi.Input[_builtins.str]] = None,
                                uko_vault: Optional[pulumi.Input[_builtins.str]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetHpcsManagedKeyResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['keyId'] = key_id
    __args__['region'] = region
    __args__['ukoVault'] = uko_vault
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getHpcsManagedKey:getHpcsManagedKey', __args__, opts=opts, typ=GetHpcsManagedKeyResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetHpcsManagedKeyResult(
        activation_date=pulumi.get(__response__, 'activation_date'),
        algorithm=pulumi.get(__response__, 'algorithm'),
        created_at=pulumi.get(__response__, 'created_at'),
        created_by=pulumi.get(__response__, 'created_by'),
        description=pulumi.get(__response__, 'description'),
        expiration_date=pulumi.get(__response__, 'expiration_date'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        instances=pulumi.get(__response__, 'instances'),
        key_id=pulumi.get(__response__, 'key_id'),
        label=pulumi.get(__response__, 'label'),
        referenced_keystores=pulumi.get(__response__, 'referenced_keystores'),
        region=pulumi.get(__response__, 'region'),
        size=pulumi.get(__response__, 'size'),
        state=pulumi.get(__response__, 'state'),
        tags=pulumi.get(__response__, 'tags'),
        templates=pulumi.get(__response__, 'templates'),
        uko_vault=pulumi.get(__response__, 'uko_vault'),
        updated_at=pulumi.get(__response__, 'updated_at'),
        updated_by=pulumi.get(__response__, 'updated_by'),
        vaults=pulumi.get(__response__, 'vaults'),
        verification_patterns=pulumi.get(__response__, 'verification_patterns')))
