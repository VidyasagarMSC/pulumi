# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PiVpnConnectionArgs', 'PiVpnConnection']

@pulumi.input_type
class PiVpnConnectionArgs:
    def __init__(__self__, *,
                 pi_cloud_instance_id: pulumi.Input[_builtins.str],
                 pi_ike_policy_id: pulumi.Input[_builtins.str],
                 pi_ipsec_policy_id: pulumi.Input[_builtins.str],
                 pi_networks: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 pi_peer_gateway_address: pulumi.Input[_builtins.str],
                 pi_peer_subnets: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 pi_vpn_connection_mode: pulumi.Input[_builtins.str],
                 pi_vpn_connection_name: pulumi.Input[_builtins.str],
                 pi_vpn_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['PiVpnConnectionTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a PiVpnConnection resource.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: PI cloud instance ID
        :param pulumi.Input[_builtins.str] pi_ike_policy_id: Unique identifier of IKE Policy selected for this VPN Connection
        :param pulumi.Input[_builtins.str] pi_ipsec_policy_id: Unique identifier of IPSec Policy selected for this VPN Connection
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_networks: Set of network IDs to attach to this VPN connection
        :param pulumi.Input[_builtins.str] pi_peer_gateway_address: Peer Gateway address
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_peer_subnets: Set of CIDR of peer subnets
        :param pulumi.Input[_builtins.str] pi_vpn_connection_mode: Mode used by this VPN Connection, either 'policy' or 'route'
        :param pulumi.Input[_builtins.str] pi_vpn_connection_name: Name of the VPN Connection
        """
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        pulumi.set(__self__, "pi_ike_policy_id", pi_ike_policy_id)
        pulumi.set(__self__, "pi_ipsec_policy_id", pi_ipsec_policy_id)
        pulumi.set(__self__, "pi_networks", pi_networks)
        pulumi.set(__self__, "pi_peer_gateway_address", pi_peer_gateway_address)
        pulumi.set(__self__, "pi_peer_subnets", pi_peer_subnets)
        pulumi.set(__self__, "pi_vpn_connection_mode", pi_vpn_connection_mode)
        pulumi.set(__self__, "pi_vpn_connection_name", pi_vpn_connection_name)
        if pi_vpn_connection_id is not None:
            pulumi.set(__self__, "pi_vpn_connection_id", pi_vpn_connection_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        PI cloud instance ID
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piIkePolicyId")
    def pi_ike_policy_id(self) -> pulumi.Input[_builtins.str]:
        """
        Unique identifier of IKE Policy selected for this VPN Connection
        """
        return pulumi.get(self, "pi_ike_policy_id")

    @pi_ike_policy_id.setter
    def pi_ike_policy_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_ike_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="piIpsecPolicyId")
    def pi_ipsec_policy_id(self) -> pulumi.Input[_builtins.str]:
        """
        Unique identifier of IPSec Policy selected for this VPN Connection
        """
        return pulumi.get(self, "pi_ipsec_policy_id")

    @pi_ipsec_policy_id.setter
    def pi_ipsec_policy_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_ipsec_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="piNetworks")
    def pi_networks(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Set of network IDs to attach to this VPN connection
        """
        return pulumi.get(self, "pi_networks")

    @pi_networks.setter
    def pi_networks(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "pi_networks", value)

    @_builtins.property
    @pulumi.getter(name="piPeerGatewayAddress")
    def pi_peer_gateway_address(self) -> pulumi.Input[_builtins.str]:
        """
        Peer Gateway address
        """
        return pulumi.get(self, "pi_peer_gateway_address")

    @pi_peer_gateway_address.setter
    def pi_peer_gateway_address(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_peer_gateway_address", value)

    @_builtins.property
    @pulumi.getter(name="piPeerSubnets")
    def pi_peer_subnets(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Set of CIDR of peer subnets
        """
        return pulumi.get(self, "pi_peer_subnets")

    @pi_peer_subnets.setter
    def pi_peer_subnets(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "pi_peer_subnets", value)

    @_builtins.property
    @pulumi.getter(name="piVpnConnectionMode")
    def pi_vpn_connection_mode(self) -> pulumi.Input[_builtins.str]:
        """
        Mode used by this VPN Connection, either 'policy' or 'route'
        """
        return pulumi.get(self, "pi_vpn_connection_mode")

    @pi_vpn_connection_mode.setter
    def pi_vpn_connection_mode(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_vpn_connection_mode", value)

    @_builtins.property
    @pulumi.getter(name="piVpnConnectionName")
    def pi_vpn_connection_name(self) -> pulumi.Input[_builtins.str]:
        """
        Name of the VPN Connection
        """
        return pulumi.get(self, "pi_vpn_connection_name")

    @pi_vpn_connection_name.setter
    def pi_vpn_connection_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_vpn_connection_name", value)

    @_builtins.property
    @pulumi.getter(name="piVpnConnectionId")
    def pi_vpn_connection_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_vpn_connection_id")

    @pi_vpn_connection_id.setter
    def pi_vpn_connection_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_vpn_connection_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiVpnConnectionTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiVpnConnectionTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _PiVpnConnectionState:
    def __init__(__self__, *,
                 connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_status: Optional[pulumi.Input[_builtins.str]] = None,
                 dead_peer_detections: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 gateway_address: Optional[pulumi.Input[_builtins.str]] = None,
                 local_gateway_address: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_ike_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_ipsec_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_networks: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_peer_gateway_address: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_peer_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_vpn_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_vpn_connection_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_vpn_connection_name: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['PiVpnConnectionTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering PiVpnConnection resources.
        :param pulumi.Input[_builtins.str] connection_id: VPN connection ID
        :param pulumi.Input[_builtins.str] connection_status: Status of the VPN connection
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] dead_peer_detections: Dead Peer Detection
        :param pulumi.Input[_builtins.str] gateway_address: Public IP address of the VPN Gateway (vSRX) attached to this VPN Connection
        :param pulumi.Input[_builtins.str] local_gateway_address: Local Gateway address, only in 'route' mode
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: PI cloud instance ID
        :param pulumi.Input[_builtins.str] pi_ike_policy_id: Unique identifier of IKE Policy selected for this VPN Connection
        :param pulumi.Input[_builtins.str] pi_ipsec_policy_id: Unique identifier of IPSec Policy selected for this VPN Connection
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_networks: Set of network IDs to attach to this VPN connection
        :param pulumi.Input[_builtins.str] pi_peer_gateway_address: Peer Gateway address
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_peer_subnets: Set of CIDR of peer subnets
        :param pulumi.Input[_builtins.str] pi_vpn_connection_mode: Mode used by this VPN Connection, either 'policy' or 'route'
        :param pulumi.Input[_builtins.str] pi_vpn_connection_name: Name of the VPN Connection
        """
        if connection_id is not None:
            pulumi.set(__self__, "connection_id", connection_id)
        if connection_status is not None:
            pulumi.set(__self__, "connection_status", connection_status)
        if dead_peer_detections is not None:
            pulumi.set(__self__, "dead_peer_detections", dead_peer_detections)
        if gateway_address is not None:
            pulumi.set(__self__, "gateway_address", gateway_address)
        if local_gateway_address is not None:
            pulumi.set(__self__, "local_gateway_address", local_gateway_address)
        if pi_cloud_instance_id is not None:
            pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_ike_policy_id is not None:
            pulumi.set(__self__, "pi_ike_policy_id", pi_ike_policy_id)
        if pi_ipsec_policy_id is not None:
            pulumi.set(__self__, "pi_ipsec_policy_id", pi_ipsec_policy_id)
        if pi_networks is not None:
            pulumi.set(__self__, "pi_networks", pi_networks)
        if pi_peer_gateway_address is not None:
            pulumi.set(__self__, "pi_peer_gateway_address", pi_peer_gateway_address)
        if pi_peer_subnets is not None:
            pulumi.set(__self__, "pi_peer_subnets", pi_peer_subnets)
        if pi_vpn_connection_id is not None:
            pulumi.set(__self__, "pi_vpn_connection_id", pi_vpn_connection_id)
        if pi_vpn_connection_mode is not None:
            pulumi.set(__self__, "pi_vpn_connection_mode", pi_vpn_connection_mode)
        if pi_vpn_connection_name is not None:
            pulumi.set(__self__, "pi_vpn_connection_name", pi_vpn_connection_name)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        VPN connection ID
        """
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connection_id", value)

    @_builtins.property
    @pulumi.getter(name="connectionStatus")
    def connection_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Status of the VPN connection
        """
        return pulumi.get(self, "connection_status")

    @connection_status.setter
    def connection_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connection_status", value)

    @_builtins.property
    @pulumi.getter(name="deadPeerDetections")
    def dead_peer_detections(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Dead Peer Detection
        """
        return pulumi.get(self, "dead_peer_detections")

    @dead_peer_detections.setter
    def dead_peer_detections(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "dead_peer_detections", value)

    @_builtins.property
    @pulumi.getter(name="gatewayAddress")
    def gateway_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Public IP address of the VPN Gateway (vSRX) attached to this VPN Connection
        """
        return pulumi.get(self, "gateway_address")

    @gateway_address.setter
    def gateway_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gateway_address", value)

    @_builtins.property
    @pulumi.getter(name="localGatewayAddress")
    def local_gateway_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Local Gateway address, only in 'route' mode
        """
        return pulumi.get(self, "local_gateway_address")

    @local_gateway_address.setter
    def local_gateway_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "local_gateway_address", value)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        PI cloud instance ID
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piIkePolicyId")
    def pi_ike_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique identifier of IKE Policy selected for this VPN Connection
        """
        return pulumi.get(self, "pi_ike_policy_id")

    @pi_ike_policy_id.setter
    def pi_ike_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_ike_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="piIpsecPolicyId")
    def pi_ipsec_policy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique identifier of IPSec Policy selected for this VPN Connection
        """
        return pulumi.get(self, "pi_ipsec_policy_id")

    @pi_ipsec_policy_id.setter
    def pi_ipsec_policy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_ipsec_policy_id", value)

    @_builtins.property
    @pulumi.getter(name="piNetworks")
    def pi_networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Set of network IDs to attach to this VPN connection
        """
        return pulumi.get(self, "pi_networks")

    @pi_networks.setter
    def pi_networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_networks", value)

    @_builtins.property
    @pulumi.getter(name="piPeerGatewayAddress")
    def pi_peer_gateway_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Peer Gateway address
        """
        return pulumi.get(self, "pi_peer_gateway_address")

    @pi_peer_gateway_address.setter
    def pi_peer_gateway_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_peer_gateway_address", value)

    @_builtins.property
    @pulumi.getter(name="piPeerSubnets")
    def pi_peer_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Set of CIDR of peer subnets
        """
        return pulumi.get(self, "pi_peer_subnets")

    @pi_peer_subnets.setter
    def pi_peer_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_peer_subnets", value)

    @_builtins.property
    @pulumi.getter(name="piVpnConnectionId")
    def pi_vpn_connection_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_vpn_connection_id")

    @pi_vpn_connection_id.setter
    def pi_vpn_connection_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_vpn_connection_id", value)

    @_builtins.property
    @pulumi.getter(name="piVpnConnectionMode")
    def pi_vpn_connection_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Mode used by this VPN Connection, either 'policy' or 'route'
        """
        return pulumi.get(self, "pi_vpn_connection_mode")

    @pi_vpn_connection_mode.setter
    def pi_vpn_connection_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_vpn_connection_mode", value)

    @_builtins.property
    @pulumi.getter(name="piVpnConnectionName")
    def pi_vpn_connection_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the VPN Connection
        """
        return pulumi.get(self, "pi_vpn_connection_name")

    @pi_vpn_connection_name.setter
    def pi_vpn_connection_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_vpn_connection_name", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiVpnConnectionTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiVpnConnectionTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/piVpnConnection:PiVpnConnection")
class PiVpnConnection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_ike_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_ipsec_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_networks: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_peer_gateway_address: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_peer_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_vpn_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_vpn_connection_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_vpn_connection_name: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiVpnConnectionTimeoutsArgs', 'PiVpnConnectionTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a PiVpnConnection resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: PI cloud instance ID
        :param pulumi.Input[_builtins.str] pi_ike_policy_id: Unique identifier of IKE Policy selected for this VPN Connection
        :param pulumi.Input[_builtins.str] pi_ipsec_policy_id: Unique identifier of IPSec Policy selected for this VPN Connection
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_networks: Set of network IDs to attach to this VPN connection
        :param pulumi.Input[_builtins.str] pi_peer_gateway_address: Peer Gateway address
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_peer_subnets: Set of CIDR of peer subnets
        :param pulumi.Input[_builtins.str] pi_vpn_connection_mode: Mode used by this VPN Connection, either 'policy' or 'route'
        :param pulumi.Input[_builtins.str] pi_vpn_connection_name: Name of the VPN Connection
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PiVpnConnectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PiVpnConnection resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PiVpnConnectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PiVpnConnectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_ike_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_ipsec_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_networks: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_peer_gateway_address: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_peer_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_vpn_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_vpn_connection_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_vpn_connection_name: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiVpnConnectionTimeoutsArgs', 'PiVpnConnectionTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PiVpnConnectionArgs.__new__(PiVpnConnectionArgs)

            if pi_cloud_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'pi_cloud_instance_id'")
            __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
            if pi_ike_policy_id is None and not opts.urn:
                raise TypeError("Missing required property 'pi_ike_policy_id'")
            __props__.__dict__["pi_ike_policy_id"] = pi_ike_policy_id
            if pi_ipsec_policy_id is None and not opts.urn:
                raise TypeError("Missing required property 'pi_ipsec_policy_id'")
            __props__.__dict__["pi_ipsec_policy_id"] = pi_ipsec_policy_id
            if pi_networks is None and not opts.urn:
                raise TypeError("Missing required property 'pi_networks'")
            __props__.__dict__["pi_networks"] = pi_networks
            if pi_peer_gateway_address is None and not opts.urn:
                raise TypeError("Missing required property 'pi_peer_gateway_address'")
            __props__.__dict__["pi_peer_gateway_address"] = pi_peer_gateway_address
            if pi_peer_subnets is None and not opts.urn:
                raise TypeError("Missing required property 'pi_peer_subnets'")
            __props__.__dict__["pi_peer_subnets"] = pi_peer_subnets
            __props__.__dict__["pi_vpn_connection_id"] = pi_vpn_connection_id
            if pi_vpn_connection_mode is None and not opts.urn:
                raise TypeError("Missing required property 'pi_vpn_connection_mode'")
            __props__.__dict__["pi_vpn_connection_mode"] = pi_vpn_connection_mode
            if pi_vpn_connection_name is None and not opts.urn:
                raise TypeError("Missing required property 'pi_vpn_connection_name'")
            __props__.__dict__["pi_vpn_connection_name"] = pi_vpn_connection_name
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["connection_id"] = None
            __props__.__dict__["connection_status"] = None
            __props__.__dict__["dead_peer_detections"] = None
            __props__.__dict__["gateway_address"] = None
            __props__.__dict__["local_gateway_address"] = None
        super(PiVpnConnection, __self__).__init__(
            'ibm:index/piVpnConnection:PiVpnConnection',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            connection_id: Optional[pulumi.Input[_builtins.str]] = None,
            connection_status: Optional[pulumi.Input[_builtins.str]] = None,
            dead_peer_detections: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            gateway_address: Optional[pulumi.Input[_builtins.str]] = None,
            local_gateway_address: Optional[pulumi.Input[_builtins.str]] = None,
            pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_ike_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_ipsec_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_networks: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            pi_peer_gateway_address: Optional[pulumi.Input[_builtins.str]] = None,
            pi_peer_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            pi_vpn_connection_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_vpn_connection_mode: Optional[pulumi.Input[_builtins.str]] = None,
            pi_vpn_connection_name: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['PiVpnConnectionTimeoutsArgs', 'PiVpnConnectionTimeoutsArgsDict']]] = None) -> 'PiVpnConnection':
        """
        Get an existing PiVpnConnection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] connection_id: VPN connection ID
        :param pulumi.Input[_builtins.str] connection_status: Status of the VPN connection
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] dead_peer_detections: Dead Peer Detection
        :param pulumi.Input[_builtins.str] gateway_address: Public IP address of the VPN Gateway (vSRX) attached to this VPN Connection
        :param pulumi.Input[_builtins.str] local_gateway_address: Local Gateway address, only in 'route' mode
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: PI cloud instance ID
        :param pulumi.Input[_builtins.str] pi_ike_policy_id: Unique identifier of IKE Policy selected for this VPN Connection
        :param pulumi.Input[_builtins.str] pi_ipsec_policy_id: Unique identifier of IPSec Policy selected for this VPN Connection
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_networks: Set of network IDs to attach to this VPN connection
        :param pulumi.Input[_builtins.str] pi_peer_gateway_address: Peer Gateway address
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_peer_subnets: Set of CIDR of peer subnets
        :param pulumi.Input[_builtins.str] pi_vpn_connection_mode: Mode used by this VPN Connection, either 'policy' or 'route'
        :param pulumi.Input[_builtins.str] pi_vpn_connection_name: Name of the VPN Connection
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PiVpnConnectionState.__new__(_PiVpnConnectionState)

        __props__.__dict__["connection_id"] = connection_id
        __props__.__dict__["connection_status"] = connection_status
        __props__.__dict__["dead_peer_detections"] = dead_peer_detections
        __props__.__dict__["gateway_address"] = gateway_address
        __props__.__dict__["local_gateway_address"] = local_gateway_address
        __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
        __props__.__dict__["pi_ike_policy_id"] = pi_ike_policy_id
        __props__.__dict__["pi_ipsec_policy_id"] = pi_ipsec_policy_id
        __props__.__dict__["pi_networks"] = pi_networks
        __props__.__dict__["pi_peer_gateway_address"] = pi_peer_gateway_address
        __props__.__dict__["pi_peer_subnets"] = pi_peer_subnets
        __props__.__dict__["pi_vpn_connection_id"] = pi_vpn_connection_id
        __props__.__dict__["pi_vpn_connection_mode"] = pi_vpn_connection_mode
        __props__.__dict__["pi_vpn_connection_name"] = pi_vpn_connection_name
        __props__.__dict__["timeouts"] = timeouts
        return PiVpnConnection(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> pulumi.Output[_builtins.str]:
        """
        VPN connection ID
        """
        return pulumi.get(self, "connection_id")

    @_builtins.property
    @pulumi.getter(name="connectionStatus")
    def connection_status(self) -> pulumi.Output[_builtins.str]:
        """
        Status of the VPN connection
        """
        return pulumi.get(self, "connection_status")

    @_builtins.property
    @pulumi.getter(name="deadPeerDetections")
    def dead_peer_detections(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Dead Peer Detection
        """
        return pulumi.get(self, "dead_peer_detections")

    @_builtins.property
    @pulumi.getter(name="gatewayAddress")
    def gateway_address(self) -> pulumi.Output[_builtins.str]:
        """
        Public IP address of the VPN Gateway (vSRX) attached to this VPN Connection
        """
        return pulumi.get(self, "gateway_address")

    @_builtins.property
    @pulumi.getter(name="localGatewayAddress")
    def local_gateway_address(self) -> pulumi.Output[_builtins.str]:
        """
        Local Gateway address, only in 'route' mode
        """
        return pulumi.get(self, "local_gateway_address")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        PI cloud instance ID
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piIkePolicyId")
    def pi_ike_policy_id(self) -> pulumi.Output[_builtins.str]:
        """
        Unique identifier of IKE Policy selected for this VPN Connection
        """
        return pulumi.get(self, "pi_ike_policy_id")

    @_builtins.property
    @pulumi.getter(name="piIpsecPolicyId")
    def pi_ipsec_policy_id(self) -> pulumi.Output[_builtins.str]:
        """
        Unique identifier of IPSec Policy selected for this VPN Connection
        """
        return pulumi.get(self, "pi_ipsec_policy_id")

    @_builtins.property
    @pulumi.getter(name="piNetworks")
    def pi_networks(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Set of network IDs to attach to this VPN connection
        """
        return pulumi.get(self, "pi_networks")

    @_builtins.property
    @pulumi.getter(name="piPeerGatewayAddress")
    def pi_peer_gateway_address(self) -> pulumi.Output[_builtins.str]:
        """
        Peer Gateway address
        """
        return pulumi.get(self, "pi_peer_gateway_address")

    @_builtins.property
    @pulumi.getter(name="piPeerSubnets")
    def pi_peer_subnets(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Set of CIDR of peer subnets
        """
        return pulumi.get(self, "pi_peer_subnets")

    @_builtins.property
    @pulumi.getter(name="piVpnConnectionId")
    def pi_vpn_connection_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "pi_vpn_connection_id")

    @_builtins.property
    @pulumi.getter(name="piVpnConnectionMode")
    def pi_vpn_connection_mode(self) -> pulumi.Output[_builtins.str]:
        """
        Mode used by this VPN Connection, either 'policy' or 'route'
        """
        return pulumi.get(self, "pi_vpn_connection_mode")

    @_builtins.property
    @pulumi.getter(name="piVpnConnectionName")
    def pi_vpn_connection_name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the VPN Connection
        """
        return pulumi.get(self, "pi_vpn_connection_name")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.PiVpnConnectionTimeouts']]:
        return pulumi.get(self, "timeouts")

