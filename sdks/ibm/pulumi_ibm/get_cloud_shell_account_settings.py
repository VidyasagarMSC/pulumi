# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCloudShellAccountSettingsResult',
    'AwaitableGetCloudShellAccountSettingsResult',
    'get_cloud_shell_account_settings',
    'get_cloud_shell_account_settings_output',
]

@pulumi.output_type
class GetCloudShellAccountSettingsResult:
    """
    A collection of values returned by getCloudShellAccountSettings.
    """
    def __init__(__self__, account_id=None, created_at=None, created_by=None, default_enable_new_features=None, default_enable_new_regions=None, enabled=None, features=None, id=None, regions=None, rev=None, type=None, updated_at=None, updated_by=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if created_at and not isinstance(created_at, float):
            raise TypeError("Expected argument 'created_at' to be a float")
        pulumi.set(__self__, "created_at", created_at)
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if default_enable_new_features and not isinstance(default_enable_new_features, bool):
            raise TypeError("Expected argument 'default_enable_new_features' to be a bool")
        pulumi.set(__self__, "default_enable_new_features", default_enable_new_features)
        if default_enable_new_regions and not isinstance(default_enable_new_regions, bool):
            raise TypeError("Expected argument 'default_enable_new_regions' to be a bool")
        pulumi.set(__self__, "default_enable_new_regions", default_enable_new_regions)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if features and not isinstance(features, list):
            raise TypeError("Expected argument 'features' to be a list")
        pulumi.set(__self__, "features", features)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if regions and not isinstance(regions, list):
            raise TypeError("Expected argument 'regions' to be a list")
        pulumi.set(__self__, "regions", regions)
        if rev and not isinstance(rev, str):
            raise TypeError("Expected argument 'rev' to be a str")
        pulumi.set(__self__, "rev", rev)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if updated_at and not isinstance(updated_at, float):
            raise TypeError("Expected argument 'updated_at' to be a float")
        pulumi.set(__self__, "updated_at", updated_at)
        if updated_by and not isinstance(updated_by, str):
            raise TypeError("Expected argument 'updated_by' to be a str")
        pulumi.set(__self__, "updated_by", updated_by)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.float:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter(name="defaultEnableNewFeatures")
    def default_enable_new_features(self) -> _builtins.bool:
        return pulumi.get(self, "default_enable_new_features")

    @_builtins.property
    @pulumi.getter(name="defaultEnableNewRegions")
    def default_enable_new_regions(self) -> _builtins.bool:
        return pulumi.get(self, "default_enable_new_regions")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def features(self) -> Sequence['outputs.GetCloudShellAccountSettingsFeatureResult']:
        return pulumi.get(self, "features")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def regions(self) -> Sequence['outputs.GetCloudShellAccountSettingsRegionResult']:
        return pulumi.get(self, "regions")

    @_builtins.property
    @pulumi.getter
    def rev(self) -> _builtins.str:
        return pulumi.get(self, "rev")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.float:
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> _builtins.str:
        return pulumi.get(self, "updated_by")


class AwaitableGetCloudShellAccountSettingsResult(GetCloudShellAccountSettingsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCloudShellAccountSettingsResult(
            account_id=self.account_id,
            created_at=self.created_at,
            created_by=self.created_by,
            default_enable_new_features=self.default_enable_new_features,
            default_enable_new_regions=self.default_enable_new_regions,
            enabled=self.enabled,
            features=self.features,
            id=self.id,
            regions=self.regions,
            rev=self.rev,
            type=self.type,
            updated_at=self.updated_at,
            updated_by=self.updated_by)


def get_cloud_shell_account_settings(account_id: Optional[_builtins.str] = None,
                                     id: Optional[_builtins.str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCloudShellAccountSettingsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCloudShellAccountSettings:getCloudShellAccountSettings', __args__, opts=opts, typ=GetCloudShellAccountSettingsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCloudShellAccountSettingsResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        created_at=pulumi.get(__ret__, 'created_at'),
        created_by=pulumi.get(__ret__, 'created_by'),
        default_enable_new_features=pulumi.get(__ret__, 'default_enable_new_features'),
        default_enable_new_regions=pulumi.get(__ret__, 'default_enable_new_regions'),
        enabled=pulumi.get(__ret__, 'enabled'),
        features=pulumi.get(__ret__, 'features'),
        id=pulumi.get(__ret__, 'id'),
        regions=pulumi.get(__ret__, 'regions'),
        rev=pulumi.get(__ret__, 'rev'),
        type=pulumi.get(__ret__, 'type'),
        updated_at=pulumi.get(__ret__, 'updated_at'),
        updated_by=pulumi.get(__ret__, 'updated_by'))
def get_cloud_shell_account_settings_output(account_id: Optional[pulumi.Input[_builtins.str]] = None,
                                            id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCloudShellAccountSettingsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCloudShellAccountSettings:getCloudShellAccountSettings', __args__, opts=opts, typ=GetCloudShellAccountSettingsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCloudShellAccountSettingsResult(
        account_id=pulumi.get(__response__, 'account_id'),
        created_at=pulumi.get(__response__, 'created_at'),
        created_by=pulumi.get(__response__, 'created_by'),
        default_enable_new_features=pulumi.get(__response__, 'default_enable_new_features'),
        default_enable_new_regions=pulumi.get(__response__, 'default_enable_new_regions'),
        enabled=pulumi.get(__response__, 'enabled'),
        features=pulumi.get(__response__, 'features'),
        id=pulumi.get(__response__, 'id'),
        regions=pulumi.get(__response__, 'regions'),
        rev=pulumi.get(__response__, 'rev'),
        type=pulumi.get(__response__, 'type'),
        updated_at=pulumi.get(__response__, 'updated_at'),
        updated_by=pulumi.get(__response__, 'updated_by')))
