# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['KmsInstancePoliciesArgs', 'KmsInstancePolicies']

@pulumi.input_type
class KmsInstancePoliciesArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 dual_auth_delete: Optional[pulumi.Input['KmsInstancePoliciesDualAuthDeleteArgs']] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 key_create_import_access: Optional[pulumi.Input['KmsInstancePoliciesKeyCreateImportAccessArgs']] = None,
                 kms_instance_policies_id: Optional[pulumi.Input[_builtins.str]] = None,
                 metrics: Optional[pulumi.Input['KmsInstancePoliciesMetricsArgs']] = None,
                 rotation: Optional[pulumi.Input['KmsInstancePoliciesRotationArgs']] = None,
                 timeouts: Optional[pulumi.Input['KmsInstancePoliciesTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a KmsInstancePolicies resource.
        :param pulumi.Input[_builtins.str] instance_id: Key protect or hpcs instance GUID or CRN
        :param pulumi.Input['KmsInstancePoliciesDualAuthDeleteArgs'] dual_auth_delete: Data associated with the dual authorization delete policy for instance
        :param pulumi.Input[_builtins.str] endpoint_type: public or private
        :param pulumi.Input['KmsInstancePoliciesKeyCreateImportAccessArgs'] key_create_import_access: Data associated with the key create import access policy for the instance
        :param pulumi.Input['KmsInstancePoliciesMetricsArgs'] metrics: Data associated with the metric policy for instance
        :param pulumi.Input['KmsInstancePoliciesRotationArgs'] rotation: Data associated with the rotation policy for instance
        """
        pulumi.set(__self__, "instance_id", instance_id)
        if dual_auth_delete is not None:
            pulumi.set(__self__, "dual_auth_delete", dual_auth_delete)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if key_create_import_access is not None:
            pulumi.set(__self__, "key_create_import_access", key_create_import_access)
        if kms_instance_policies_id is not None:
            pulumi.set(__self__, "kms_instance_policies_id", kms_instance_policies_id)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if rotation is not None:
            pulumi.set(__self__, "rotation", rotation)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Key protect or hpcs instance GUID or CRN
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="dualAuthDelete")
    def dual_auth_delete(self) -> Optional[pulumi.Input['KmsInstancePoliciesDualAuthDeleteArgs']]:
        """
        Data associated with the dual authorization delete policy for instance
        """
        return pulumi.get(self, "dual_auth_delete")

    @dual_auth_delete.setter
    def dual_auth_delete(self, value: Optional[pulumi.Input['KmsInstancePoliciesDualAuthDeleteArgs']]):
        pulumi.set(self, "dual_auth_delete", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        public or private
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter(name="keyCreateImportAccess")
    def key_create_import_access(self) -> Optional[pulumi.Input['KmsInstancePoliciesKeyCreateImportAccessArgs']]:
        """
        Data associated with the key create import access policy for the instance
        """
        return pulumi.get(self, "key_create_import_access")

    @key_create_import_access.setter
    def key_create_import_access(self, value: Optional[pulumi.Input['KmsInstancePoliciesKeyCreateImportAccessArgs']]):
        pulumi.set(self, "key_create_import_access", value)

    @_builtins.property
    @pulumi.getter(name="kmsInstancePoliciesId")
    def kms_instance_policies_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "kms_instance_policies_id")

    @kms_instance_policies_id.setter
    def kms_instance_policies_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kms_instance_policies_id", value)

    @_builtins.property
    @pulumi.getter
    def metrics(self) -> Optional[pulumi.Input['KmsInstancePoliciesMetricsArgs']]:
        """
        Data associated with the metric policy for instance
        """
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: Optional[pulumi.Input['KmsInstancePoliciesMetricsArgs']]):
        pulumi.set(self, "metrics", value)

    @_builtins.property
    @pulumi.getter
    def rotation(self) -> Optional[pulumi.Input['KmsInstancePoliciesRotationArgs']]:
        """
        Data associated with the rotation policy for instance
        """
        return pulumi.get(self, "rotation")

    @rotation.setter
    def rotation(self, value: Optional[pulumi.Input['KmsInstancePoliciesRotationArgs']]):
        pulumi.set(self, "rotation", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['KmsInstancePoliciesTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['KmsInstancePoliciesTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _KmsInstancePoliciesState:
    def __init__(__self__, *,
                 dual_auth_delete: Optional[pulumi.Input['KmsInstancePoliciesDualAuthDeleteArgs']] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 key_create_import_access: Optional[pulumi.Input['KmsInstancePoliciesKeyCreateImportAccessArgs']] = None,
                 kms_instance_policies_id: Optional[pulumi.Input[_builtins.str]] = None,
                 metrics: Optional[pulumi.Input['KmsInstancePoliciesMetricsArgs']] = None,
                 rotation: Optional[pulumi.Input['KmsInstancePoliciesRotationArgs']] = None,
                 timeouts: Optional[pulumi.Input['KmsInstancePoliciesTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering KmsInstancePolicies resources.
        :param pulumi.Input['KmsInstancePoliciesDualAuthDeleteArgs'] dual_auth_delete: Data associated with the dual authorization delete policy for instance
        :param pulumi.Input[_builtins.str] endpoint_type: public or private
        :param pulumi.Input[_builtins.str] instance_id: Key protect or hpcs instance GUID or CRN
        :param pulumi.Input['KmsInstancePoliciesKeyCreateImportAccessArgs'] key_create_import_access: Data associated with the key create import access policy for the instance
        :param pulumi.Input['KmsInstancePoliciesMetricsArgs'] metrics: Data associated with the metric policy for instance
        :param pulumi.Input['KmsInstancePoliciesRotationArgs'] rotation: Data associated with the rotation policy for instance
        """
        if dual_auth_delete is not None:
            pulumi.set(__self__, "dual_auth_delete", dual_auth_delete)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if key_create_import_access is not None:
            pulumi.set(__self__, "key_create_import_access", key_create_import_access)
        if kms_instance_policies_id is not None:
            pulumi.set(__self__, "kms_instance_policies_id", kms_instance_policies_id)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if rotation is not None:
            pulumi.set(__self__, "rotation", rotation)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="dualAuthDelete")
    def dual_auth_delete(self) -> Optional[pulumi.Input['KmsInstancePoliciesDualAuthDeleteArgs']]:
        """
        Data associated with the dual authorization delete policy for instance
        """
        return pulumi.get(self, "dual_auth_delete")

    @dual_auth_delete.setter
    def dual_auth_delete(self, value: Optional[pulumi.Input['KmsInstancePoliciesDualAuthDeleteArgs']]):
        pulumi.set(self, "dual_auth_delete", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        public or private
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Key protect or hpcs instance GUID or CRN
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="keyCreateImportAccess")
    def key_create_import_access(self) -> Optional[pulumi.Input['KmsInstancePoliciesKeyCreateImportAccessArgs']]:
        """
        Data associated with the key create import access policy for the instance
        """
        return pulumi.get(self, "key_create_import_access")

    @key_create_import_access.setter
    def key_create_import_access(self, value: Optional[pulumi.Input['KmsInstancePoliciesKeyCreateImportAccessArgs']]):
        pulumi.set(self, "key_create_import_access", value)

    @_builtins.property
    @pulumi.getter(name="kmsInstancePoliciesId")
    def kms_instance_policies_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "kms_instance_policies_id")

    @kms_instance_policies_id.setter
    def kms_instance_policies_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kms_instance_policies_id", value)

    @_builtins.property
    @pulumi.getter
    def metrics(self) -> Optional[pulumi.Input['KmsInstancePoliciesMetricsArgs']]:
        """
        Data associated with the metric policy for instance
        """
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: Optional[pulumi.Input['KmsInstancePoliciesMetricsArgs']]):
        pulumi.set(self, "metrics", value)

    @_builtins.property
    @pulumi.getter
    def rotation(self) -> Optional[pulumi.Input['KmsInstancePoliciesRotationArgs']]:
        """
        Data associated with the rotation policy for instance
        """
        return pulumi.get(self, "rotation")

    @rotation.setter
    def rotation(self, value: Optional[pulumi.Input['KmsInstancePoliciesRotationArgs']]):
        pulumi.set(self, "rotation", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['KmsInstancePoliciesTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['KmsInstancePoliciesTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/kmsInstancePolicies:KmsInstancePolicies")
class KmsInstancePolicies(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dual_auth_delete: Optional[pulumi.Input[Union['KmsInstancePoliciesDualAuthDeleteArgs', 'KmsInstancePoliciesDualAuthDeleteArgsDict']]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 key_create_import_access: Optional[pulumi.Input[Union['KmsInstancePoliciesKeyCreateImportAccessArgs', 'KmsInstancePoliciesKeyCreateImportAccessArgsDict']]] = None,
                 kms_instance_policies_id: Optional[pulumi.Input[_builtins.str]] = None,
                 metrics: Optional[pulumi.Input[Union['KmsInstancePoliciesMetricsArgs', 'KmsInstancePoliciesMetricsArgsDict']]] = None,
                 rotation: Optional[pulumi.Input[Union['KmsInstancePoliciesRotationArgs', 'KmsInstancePoliciesRotationArgsDict']]] = None,
                 timeouts: Optional[pulumi.Input[Union['KmsInstancePoliciesTimeoutsArgs', 'KmsInstancePoliciesTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a KmsInstancePolicies resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['KmsInstancePoliciesDualAuthDeleteArgs', 'KmsInstancePoliciesDualAuthDeleteArgsDict']] dual_auth_delete: Data associated with the dual authorization delete policy for instance
        :param pulumi.Input[_builtins.str] endpoint_type: public or private
        :param pulumi.Input[_builtins.str] instance_id: Key protect or hpcs instance GUID or CRN
        :param pulumi.Input[Union['KmsInstancePoliciesKeyCreateImportAccessArgs', 'KmsInstancePoliciesKeyCreateImportAccessArgsDict']] key_create_import_access: Data associated with the key create import access policy for the instance
        :param pulumi.Input[Union['KmsInstancePoliciesMetricsArgs', 'KmsInstancePoliciesMetricsArgsDict']] metrics: Data associated with the metric policy for instance
        :param pulumi.Input[Union['KmsInstancePoliciesRotationArgs', 'KmsInstancePoliciesRotationArgsDict']] rotation: Data associated with the rotation policy for instance
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: KmsInstancePoliciesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a KmsInstancePolicies resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param KmsInstancePoliciesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KmsInstancePoliciesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dual_auth_delete: Optional[pulumi.Input[Union['KmsInstancePoliciesDualAuthDeleteArgs', 'KmsInstancePoliciesDualAuthDeleteArgsDict']]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 key_create_import_access: Optional[pulumi.Input[Union['KmsInstancePoliciesKeyCreateImportAccessArgs', 'KmsInstancePoliciesKeyCreateImportAccessArgsDict']]] = None,
                 kms_instance_policies_id: Optional[pulumi.Input[_builtins.str]] = None,
                 metrics: Optional[pulumi.Input[Union['KmsInstancePoliciesMetricsArgs', 'KmsInstancePoliciesMetricsArgsDict']]] = None,
                 rotation: Optional[pulumi.Input[Union['KmsInstancePoliciesRotationArgs', 'KmsInstancePoliciesRotationArgsDict']]] = None,
                 timeouts: Optional[pulumi.Input[Union['KmsInstancePoliciesTimeoutsArgs', 'KmsInstancePoliciesTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KmsInstancePoliciesArgs.__new__(KmsInstancePoliciesArgs)

            __props__.__dict__["dual_auth_delete"] = dual_auth_delete
            __props__.__dict__["endpoint_type"] = endpoint_type
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["key_create_import_access"] = key_create_import_access
            __props__.__dict__["kms_instance_policies_id"] = kms_instance_policies_id
            __props__.__dict__["metrics"] = metrics
            __props__.__dict__["rotation"] = rotation
            __props__.__dict__["timeouts"] = timeouts
        super(KmsInstancePolicies, __self__).__init__(
            'ibm:index/kmsInstancePolicies:KmsInstancePolicies',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dual_auth_delete: Optional[pulumi.Input[Union['KmsInstancePoliciesDualAuthDeleteArgs', 'KmsInstancePoliciesDualAuthDeleteArgsDict']]] = None,
            endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            key_create_import_access: Optional[pulumi.Input[Union['KmsInstancePoliciesKeyCreateImportAccessArgs', 'KmsInstancePoliciesKeyCreateImportAccessArgsDict']]] = None,
            kms_instance_policies_id: Optional[pulumi.Input[_builtins.str]] = None,
            metrics: Optional[pulumi.Input[Union['KmsInstancePoliciesMetricsArgs', 'KmsInstancePoliciesMetricsArgsDict']]] = None,
            rotation: Optional[pulumi.Input[Union['KmsInstancePoliciesRotationArgs', 'KmsInstancePoliciesRotationArgsDict']]] = None,
            timeouts: Optional[pulumi.Input[Union['KmsInstancePoliciesTimeoutsArgs', 'KmsInstancePoliciesTimeoutsArgsDict']]] = None) -> 'KmsInstancePolicies':
        """
        Get an existing KmsInstancePolicies resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['KmsInstancePoliciesDualAuthDeleteArgs', 'KmsInstancePoliciesDualAuthDeleteArgsDict']] dual_auth_delete: Data associated with the dual authorization delete policy for instance
        :param pulumi.Input[_builtins.str] endpoint_type: public or private
        :param pulumi.Input[_builtins.str] instance_id: Key protect or hpcs instance GUID or CRN
        :param pulumi.Input[Union['KmsInstancePoliciesKeyCreateImportAccessArgs', 'KmsInstancePoliciesKeyCreateImportAccessArgsDict']] key_create_import_access: Data associated with the key create import access policy for the instance
        :param pulumi.Input[Union['KmsInstancePoliciesMetricsArgs', 'KmsInstancePoliciesMetricsArgsDict']] metrics: Data associated with the metric policy for instance
        :param pulumi.Input[Union['KmsInstancePoliciesRotationArgs', 'KmsInstancePoliciesRotationArgsDict']] rotation: Data associated with the rotation policy for instance
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _KmsInstancePoliciesState.__new__(_KmsInstancePoliciesState)

        __props__.__dict__["dual_auth_delete"] = dual_auth_delete
        __props__.__dict__["endpoint_type"] = endpoint_type
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["key_create_import_access"] = key_create_import_access
        __props__.__dict__["kms_instance_policies_id"] = kms_instance_policies_id
        __props__.__dict__["metrics"] = metrics
        __props__.__dict__["rotation"] = rotation
        __props__.__dict__["timeouts"] = timeouts
        return KmsInstancePolicies(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="dualAuthDelete")
    def dual_auth_delete(self) -> pulumi.Output[Optional['outputs.KmsInstancePoliciesDualAuthDelete']]:
        """
        Data associated with the dual authorization delete policy for instance
        """
        return pulumi.get(self, "dual_auth_delete")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> pulumi.Output[_builtins.str]:
        """
        public or private
        """
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Key protect or hpcs instance GUID or CRN
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="keyCreateImportAccess")
    def key_create_import_access(self) -> pulumi.Output[Optional['outputs.KmsInstancePoliciesKeyCreateImportAccess']]:
        """
        Data associated with the key create import access policy for the instance
        """
        return pulumi.get(self, "key_create_import_access")

    @_builtins.property
    @pulumi.getter(name="kmsInstancePoliciesId")
    def kms_instance_policies_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "kms_instance_policies_id")

    @_builtins.property
    @pulumi.getter
    def metrics(self) -> pulumi.Output[Optional['outputs.KmsInstancePoliciesMetrics']]:
        """
        Data associated with the metric policy for instance
        """
        return pulumi.get(self, "metrics")

    @_builtins.property
    @pulumi.getter
    def rotation(self) -> pulumi.Output[Optional['outputs.KmsInstancePoliciesRotation']]:
        """
        Data associated with the rotation policy for instance
        """
        return pulumi.get(self, "rotation")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.KmsInstancePoliciesTimeouts']]:
        return pulumi.get(self, "timeouts")

