# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CodeEngineFunctionArgs', 'CodeEngineFunction']

@pulumi.input_type
class CodeEngineFunctionArgs:
    def __init__(__self__, *,
                 code_reference: pulumi.Input[_builtins.str],
                 project_id: pulumi.Input[_builtins.str],
                 runtime: pulumi.Input[_builtins.str],
                 code_binary: Optional[pulumi.Input[_builtins.bool]] = None,
                 code_engine_function_id: Optional[pulumi.Input[_builtins.str]] = None,
                 code_main: Optional[pulumi.Input[_builtins.str]] = None,
                 code_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 managed_domain_mappings: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 run_env_variables: Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineFunctionRunEnvVariableArgs']]]] = None,
                 scale_concurrency: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_cpu_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_down_delay: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_max_execution_time: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_memory_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['CodeEngineFunctionTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a CodeEngineFunction resource.
        :param pulumi.Input[_builtins.str] code_reference: Specifies either a reference to a code bundle or the source code itself. To specify the source code, use the data URL
               scheme and include the source code as base64 encoded. The data URL scheme is defined in [RFC
               2397](https://tools.ietf.org/html/rfc2397).
        :param pulumi.Input[_builtins.str] project_id: The ID of the project.
        :param pulumi.Input[_builtins.str] runtime: The managed runtime used to execute the injected code.
        :param pulumi.Input[_builtins.bool] code_binary: Specifies whether the code is binary or not. Defaults to false when `code_reference` is set to a data URL. When
               `code_reference` is set to a code bundle URL, this field is always true.
        :param pulumi.Input[_builtins.str] code_main: Specifies the name of the function that should be invoked.
        :param pulumi.Input[_builtins.str] code_secret: The name of the secret that is used to access the specified `code_reference`. The secret is used to authenticate with a
               non-public endpoint that is specified as`code_reference`.
        :param pulumi.Input[_builtins.str] managed_domain_mappings: Optional value controlling which of the system managed domain mappings will be setup for the function. Valid values are
               'local_public', 'local_private' and 'local'. Visibility can only be 'local_private' if the project supports function
               private visibility.
        :param pulumi.Input[_builtins.str] name: The name of the function.
        :param pulumi.Input[Sequence[pulumi.Input['CodeEngineFunctionRunEnvVariableArgs']]] run_env_variables: References to config maps, secrets or literal values, which are defined by the function owner and are exposed as
               environment variables in the function.
        :param pulumi.Input[_builtins.float] scale_concurrency: Number of parallel requests handled by a single instance, supported only by Node.js, default is `1`.
        :param pulumi.Input[_builtins.str] scale_cpu_limit: Optional amount of CPU set for the instance of the function. For valid values see [Supported memory and CPU
               combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo).
        :param pulumi.Input[_builtins.float] scale_down_delay: Optional amount of time in seconds that delays the scale down behavior for a function.
        :param pulumi.Input[_builtins.float] scale_max_execution_time: Timeout in secs after which the function is terminated.
        :param pulumi.Input[_builtins.str] scale_memory_limit: Optional amount of memory set for the instance of the function. For valid values see [Supported memory and CPU
               combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo). The units for specifying memory are
               Megabyte (M) or Gigabyte (G), whereas G and M are the shorthand expressions for GB and MB. For more information see
               [Units of measurement](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo#unit-measurements).
        """
        pulumi.set(__self__, "code_reference", code_reference)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "runtime", runtime)
        if code_binary is not None:
            pulumi.set(__self__, "code_binary", code_binary)
        if code_engine_function_id is not None:
            pulumi.set(__self__, "code_engine_function_id", code_engine_function_id)
        if code_main is not None:
            pulumi.set(__self__, "code_main", code_main)
        if code_secret is not None:
            pulumi.set(__self__, "code_secret", code_secret)
        if managed_domain_mappings is not None:
            pulumi.set(__self__, "managed_domain_mappings", managed_domain_mappings)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if run_env_variables is not None:
            pulumi.set(__self__, "run_env_variables", run_env_variables)
        if scale_concurrency is not None:
            pulumi.set(__self__, "scale_concurrency", scale_concurrency)
        if scale_cpu_limit is not None:
            pulumi.set(__self__, "scale_cpu_limit", scale_cpu_limit)
        if scale_down_delay is not None:
            pulumi.set(__self__, "scale_down_delay", scale_down_delay)
        if scale_max_execution_time is not None:
            pulumi.set(__self__, "scale_max_execution_time", scale_max_execution_time)
        if scale_memory_limit is not None:
            pulumi.set(__self__, "scale_memory_limit", scale_memory_limit)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="codeReference")
    def code_reference(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies either a reference to a code bundle or the source code itself. To specify the source code, use the data URL
        scheme and include the source code as base64 encoded. The data URL scheme is defined in [RFC
        2397](https://tools.ietf.org/html/rfc2397).
        """
        return pulumi.get(self, "code_reference")

    @code_reference.setter
    def code_reference(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "code_reference", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the project.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter
    def runtime(self) -> pulumi.Input[_builtins.str]:
        """
        The managed runtime used to execute the injected code.
        """
        return pulumi.get(self, "runtime")

    @runtime.setter
    def runtime(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "runtime", value)

    @_builtins.property
    @pulumi.getter(name="codeBinary")
    def code_binary(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the code is binary or not. Defaults to false when `code_reference` is set to a data URL. When
        `code_reference` is set to a code bundle URL, this field is always true.
        """
        return pulumi.get(self, "code_binary")

    @code_binary.setter
    def code_binary(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "code_binary", value)

    @_builtins.property
    @pulumi.getter(name="codeEngineFunctionId")
    def code_engine_function_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "code_engine_function_id")

    @code_engine_function_id.setter
    def code_engine_function_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "code_engine_function_id", value)

    @_builtins.property
    @pulumi.getter(name="codeMain")
    def code_main(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the function that should be invoked.
        """
        return pulumi.get(self, "code_main")

    @code_main.setter
    def code_main(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "code_main", value)

    @_builtins.property
    @pulumi.getter(name="codeSecret")
    def code_secret(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the secret that is used to access the specified `code_reference`. The secret is used to authenticate with a
        non-public endpoint that is specified as`code_reference`.
        """
        return pulumi.get(self, "code_secret")

    @code_secret.setter
    def code_secret(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "code_secret", value)

    @_builtins.property
    @pulumi.getter(name="managedDomainMappings")
    def managed_domain_mappings(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional value controlling which of the system managed domain mappings will be setup for the function. Valid values are
        'local_public', 'local_private' and 'local'. Visibility can only be 'local_private' if the project supports function
        private visibility.
        """
        return pulumi.get(self, "managed_domain_mappings")

    @managed_domain_mappings.setter
    def managed_domain_mappings(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "managed_domain_mappings", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the function.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="runEnvVariables")
    def run_env_variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineFunctionRunEnvVariableArgs']]]]:
        """
        References to config maps, secrets or literal values, which are defined by the function owner and are exposed as
        environment variables in the function.
        """
        return pulumi.get(self, "run_env_variables")

    @run_env_variables.setter
    def run_env_variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineFunctionRunEnvVariableArgs']]]]):
        pulumi.set(self, "run_env_variables", value)

    @_builtins.property
    @pulumi.getter(name="scaleConcurrency")
    def scale_concurrency(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Number of parallel requests handled by a single instance, supported only by Node.js, default is `1`.
        """
        return pulumi.get(self, "scale_concurrency")

    @scale_concurrency.setter
    def scale_concurrency(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "scale_concurrency", value)

    @_builtins.property
    @pulumi.getter(name="scaleCpuLimit")
    def scale_cpu_limit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional amount of CPU set for the instance of the function. For valid values see [Supported memory and CPU
        combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo).
        """
        return pulumi.get(self, "scale_cpu_limit")

    @scale_cpu_limit.setter
    def scale_cpu_limit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scale_cpu_limit", value)

    @_builtins.property
    @pulumi.getter(name="scaleDownDelay")
    def scale_down_delay(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Optional amount of time in seconds that delays the scale down behavior for a function.
        """
        return pulumi.get(self, "scale_down_delay")

    @scale_down_delay.setter
    def scale_down_delay(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "scale_down_delay", value)

    @_builtins.property
    @pulumi.getter(name="scaleMaxExecutionTime")
    def scale_max_execution_time(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Timeout in secs after which the function is terminated.
        """
        return pulumi.get(self, "scale_max_execution_time")

    @scale_max_execution_time.setter
    def scale_max_execution_time(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "scale_max_execution_time", value)

    @_builtins.property
    @pulumi.getter(name="scaleMemoryLimit")
    def scale_memory_limit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional amount of memory set for the instance of the function. For valid values see [Supported memory and CPU
        combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo). The units for specifying memory are
        Megabyte (M) or Gigabyte (G), whereas G and M are the shorthand expressions for GB and MB. For more information see
        [Units of measurement](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo#unit-measurements).
        """
        return pulumi.get(self, "scale_memory_limit")

    @scale_memory_limit.setter
    def scale_memory_limit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scale_memory_limit", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['CodeEngineFunctionTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['CodeEngineFunctionTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _CodeEngineFunctionState:
    def __init__(__self__, *,
                 code_binary: Optional[pulumi.Input[_builtins.bool]] = None,
                 code_engine_function_id: Optional[pulumi.Input[_builtins.str]] = None,
                 code_main: Optional[pulumi.Input[_builtins.str]] = None,
                 code_reference: Optional[pulumi.Input[_builtins.str]] = None,
                 code_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 computed_env_variables: Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineFunctionComputedEnvVariableArgs']]]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_internal: Optional[pulumi.Input[_builtins.str]] = None,
                 entity_tag: Optional[pulumi.Input[_builtins.str]] = None,
                 etag: Optional[pulumi.Input[_builtins.str]] = None,
                 function_id: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 managed_domain_mappings: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 run_env_variables: Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineFunctionRunEnvVariableArgs']]]] = None,
                 runtime: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_concurrency: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_cpu_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_down_delay: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_max_execution_time: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_memory_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 status_details: Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineFunctionStatusDetailArgs']]]] = None,
                 timeouts: Optional[pulumi.Input['CodeEngineFunctionTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering CodeEngineFunction resources.
        :param pulumi.Input[_builtins.bool] code_binary: Specifies whether the code is binary or not. Defaults to false when `code_reference` is set to a data URL. When
               `code_reference` is set to a code bundle URL, this field is always true.
        :param pulumi.Input[_builtins.str] code_main: Specifies the name of the function that should be invoked.
        :param pulumi.Input[_builtins.str] code_reference: Specifies either a reference to a code bundle or the source code itself. To specify the source code, use the data URL
               scheme and include the source code as base64 encoded. The data URL scheme is defined in [RFC
               2397](https://tools.ietf.org/html/rfc2397).
        :param pulumi.Input[_builtins.str] code_secret: The name of the secret that is used to access the specified `code_reference`. The secret is used to authenticate with a
               non-public endpoint that is specified as`code_reference`.
        :param pulumi.Input[Sequence[pulumi.Input['CodeEngineFunctionComputedEnvVariableArgs']]] computed_env_variables: References to config maps, secrets or literal values, which are defined and set by Code Engine and are exposed as
               environment variables in the function.
        :param pulumi.Input[_builtins.str] created_at: The timestamp when the resource was created.
        :param pulumi.Input[_builtins.str] endpoint: URL to invoke the function.
        :param pulumi.Input[_builtins.str] endpoint_internal: URL to function that is only visible within the project.
        :param pulumi.Input[_builtins.str] entity_tag: The version of the function instance, which is used to achieve optimistic locking.
        :param pulumi.Input[_builtins.str] function_id: The identifier of the resource.
        :param pulumi.Input[_builtins.str] href: When you provision a new function, a relative URL path is created identifying the location of the instance.
        :param pulumi.Input[_builtins.str] managed_domain_mappings: Optional value controlling which of the system managed domain mappings will be setup for the function. Valid values are
               'local_public', 'local_private' and 'local'. Visibility can only be 'local_private' if the project supports function
               private visibility.
        :param pulumi.Input[_builtins.str] name: The name of the function.
        :param pulumi.Input[_builtins.str] project_id: The ID of the project.
        :param pulumi.Input[_builtins.str] region: The region of the project the resource is located in. Possible values: 'au-syd', 'br-sao', 'ca-tor', 'eu-de', 'eu-gb',
               'jp-osa', 'jp-tok', 'us-east', 'us-south'.
        :param pulumi.Input[_builtins.str] resource_type: The type of the function.
        :param pulumi.Input[Sequence[pulumi.Input['CodeEngineFunctionRunEnvVariableArgs']]] run_env_variables: References to config maps, secrets or literal values, which are defined by the function owner and are exposed as
               environment variables in the function.
        :param pulumi.Input[_builtins.str] runtime: The managed runtime used to execute the injected code.
        :param pulumi.Input[_builtins.float] scale_concurrency: Number of parallel requests handled by a single instance, supported only by Node.js, default is `1`.
        :param pulumi.Input[_builtins.str] scale_cpu_limit: Optional amount of CPU set for the instance of the function. For valid values see [Supported memory and CPU
               combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo).
        :param pulumi.Input[_builtins.float] scale_down_delay: Optional amount of time in seconds that delays the scale down behavior for a function.
        :param pulumi.Input[_builtins.float] scale_max_execution_time: Timeout in secs after which the function is terminated.
        :param pulumi.Input[_builtins.str] scale_memory_limit: Optional amount of memory set for the instance of the function. For valid values see [Supported memory and CPU
               combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo). The units for specifying memory are
               Megabyte (M) or Gigabyte (G), whereas G and M are the shorthand expressions for GB and MB. For more information see
               [Units of measurement](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo#unit-measurements).
        :param pulumi.Input[_builtins.str] status: The current status of the function.
        :param pulumi.Input[Sequence[pulumi.Input['CodeEngineFunctionStatusDetailArgs']]] status_details: The detailed status of the function.
        """
        if code_binary is not None:
            pulumi.set(__self__, "code_binary", code_binary)
        if code_engine_function_id is not None:
            pulumi.set(__self__, "code_engine_function_id", code_engine_function_id)
        if code_main is not None:
            pulumi.set(__self__, "code_main", code_main)
        if code_reference is not None:
            pulumi.set(__self__, "code_reference", code_reference)
        if code_secret is not None:
            pulumi.set(__self__, "code_secret", code_secret)
        if computed_env_variables is not None:
            pulumi.set(__self__, "computed_env_variables", computed_env_variables)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if endpoint_internal is not None:
            pulumi.set(__self__, "endpoint_internal", endpoint_internal)
        if entity_tag is not None:
            pulumi.set(__self__, "entity_tag", entity_tag)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if function_id is not None:
            pulumi.set(__self__, "function_id", function_id)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if managed_domain_mappings is not None:
            pulumi.set(__self__, "managed_domain_mappings", managed_domain_mappings)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if run_env_variables is not None:
            pulumi.set(__self__, "run_env_variables", run_env_variables)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if scale_concurrency is not None:
            pulumi.set(__self__, "scale_concurrency", scale_concurrency)
        if scale_cpu_limit is not None:
            pulumi.set(__self__, "scale_cpu_limit", scale_cpu_limit)
        if scale_down_delay is not None:
            pulumi.set(__self__, "scale_down_delay", scale_down_delay)
        if scale_max_execution_time is not None:
            pulumi.set(__self__, "scale_max_execution_time", scale_max_execution_time)
        if scale_memory_limit is not None:
            pulumi.set(__self__, "scale_memory_limit", scale_memory_limit)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_details is not None:
            pulumi.set(__self__, "status_details", status_details)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="codeBinary")
    def code_binary(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the code is binary or not. Defaults to false when `code_reference` is set to a data URL. When
        `code_reference` is set to a code bundle URL, this field is always true.
        """
        return pulumi.get(self, "code_binary")

    @code_binary.setter
    def code_binary(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "code_binary", value)

    @_builtins.property
    @pulumi.getter(name="codeEngineFunctionId")
    def code_engine_function_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "code_engine_function_id")

    @code_engine_function_id.setter
    def code_engine_function_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "code_engine_function_id", value)

    @_builtins.property
    @pulumi.getter(name="codeMain")
    def code_main(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the function that should be invoked.
        """
        return pulumi.get(self, "code_main")

    @code_main.setter
    def code_main(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "code_main", value)

    @_builtins.property
    @pulumi.getter(name="codeReference")
    def code_reference(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies either a reference to a code bundle or the source code itself. To specify the source code, use the data URL
        scheme and include the source code as base64 encoded. The data URL scheme is defined in [RFC
        2397](https://tools.ietf.org/html/rfc2397).
        """
        return pulumi.get(self, "code_reference")

    @code_reference.setter
    def code_reference(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "code_reference", value)

    @_builtins.property
    @pulumi.getter(name="codeSecret")
    def code_secret(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the secret that is used to access the specified `code_reference`. The secret is used to authenticate with a
        non-public endpoint that is specified as`code_reference`.
        """
        return pulumi.get(self, "code_secret")

    @code_secret.setter
    def code_secret(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "code_secret", value)

    @_builtins.property
    @pulumi.getter(name="computedEnvVariables")
    def computed_env_variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineFunctionComputedEnvVariableArgs']]]]:
        """
        References to config maps, secrets or literal values, which are defined and set by Code Engine and are exposed as
        environment variables in the function.
        """
        return pulumi.get(self, "computed_env_variables")

    @computed_env_variables.setter
    def computed_env_variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineFunctionComputedEnvVariableArgs']]]]):
        pulumi.set(self, "computed_env_variables", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The timestamp when the resource was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        URL to invoke the function.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint", value)

    @_builtins.property
    @pulumi.getter(name="endpointInternal")
    def endpoint_internal(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        URL to function that is only visible within the project.
        """
        return pulumi.get(self, "endpoint_internal")

    @endpoint_internal.setter
    def endpoint_internal(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_internal", value)

    @_builtins.property
    @pulumi.getter(name="entityTag")
    def entity_tag(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The version of the function instance, which is used to achieve optimistic locking.
        """
        return pulumi.get(self, "entity_tag")

    @entity_tag.setter
    def entity_tag(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entity_tag", value)

    @_builtins.property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "etag", value)

    @_builtins.property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The identifier of the resource.
        """
        return pulumi.get(self, "function_id")

    @function_id.setter
    def function_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "function_id", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        When you provision a new function, a relative URL path is created identifying the location of the instance.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="managedDomainMappings")
    def managed_domain_mappings(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional value controlling which of the system managed domain mappings will be setup for the function. Valid values are
        'local_public', 'local_private' and 'local'. Visibility can only be 'local_private' if the project supports function
        private visibility.
        """
        return pulumi.get(self, "managed_domain_mappings")

    @managed_domain_mappings.setter
    def managed_domain_mappings(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "managed_domain_mappings", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the function.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the project.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the project the resource is located in. Possible values: 'au-syd', 'br-sao', 'ca-tor', 'eu-de', 'eu-gb',
        'jp-osa', 'jp-tok', 'us-east', 'us-south'.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the function.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter(name="runEnvVariables")
    def run_env_variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineFunctionRunEnvVariableArgs']]]]:
        """
        References to config maps, secrets or literal values, which are defined by the function owner and are exposed as
        environment variables in the function.
        """
        return pulumi.get(self, "run_env_variables")

    @run_env_variables.setter
    def run_env_variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineFunctionRunEnvVariableArgs']]]]):
        pulumi.set(self, "run_env_variables", value)

    @_builtins.property
    @pulumi.getter
    def runtime(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The managed runtime used to execute the injected code.
        """
        return pulumi.get(self, "runtime")

    @runtime.setter
    def runtime(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "runtime", value)

    @_builtins.property
    @pulumi.getter(name="scaleConcurrency")
    def scale_concurrency(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Number of parallel requests handled by a single instance, supported only by Node.js, default is `1`.
        """
        return pulumi.get(self, "scale_concurrency")

    @scale_concurrency.setter
    def scale_concurrency(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "scale_concurrency", value)

    @_builtins.property
    @pulumi.getter(name="scaleCpuLimit")
    def scale_cpu_limit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional amount of CPU set for the instance of the function. For valid values see [Supported memory and CPU
        combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo).
        """
        return pulumi.get(self, "scale_cpu_limit")

    @scale_cpu_limit.setter
    def scale_cpu_limit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scale_cpu_limit", value)

    @_builtins.property
    @pulumi.getter(name="scaleDownDelay")
    def scale_down_delay(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Optional amount of time in seconds that delays the scale down behavior for a function.
        """
        return pulumi.get(self, "scale_down_delay")

    @scale_down_delay.setter
    def scale_down_delay(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "scale_down_delay", value)

    @_builtins.property
    @pulumi.getter(name="scaleMaxExecutionTime")
    def scale_max_execution_time(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Timeout in secs after which the function is terminated.
        """
        return pulumi.get(self, "scale_max_execution_time")

    @scale_max_execution_time.setter
    def scale_max_execution_time(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "scale_max_execution_time", value)

    @_builtins.property
    @pulumi.getter(name="scaleMemoryLimit")
    def scale_memory_limit(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional amount of memory set for the instance of the function. For valid values see [Supported memory and CPU
        combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo). The units for specifying memory are
        Megabyte (M) or Gigabyte (G), whereas G and M are the shorthand expressions for GB and MB. For more information see
        [Units of measurement](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo#unit-measurements).
        """
        return pulumi.get(self, "scale_memory_limit")

    @scale_memory_limit.setter
    def scale_memory_limit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scale_memory_limit", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The current status of the function.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineFunctionStatusDetailArgs']]]]:
        """
        The detailed status of the function.
        """
        return pulumi.get(self, "status_details")

    @status_details.setter
    def status_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CodeEngineFunctionStatusDetailArgs']]]]):
        pulumi.set(self, "status_details", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['CodeEngineFunctionTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['CodeEngineFunctionTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/codeEngineFunction:CodeEngineFunction")
class CodeEngineFunction(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 code_binary: Optional[pulumi.Input[_builtins.bool]] = None,
                 code_engine_function_id: Optional[pulumi.Input[_builtins.str]] = None,
                 code_main: Optional[pulumi.Input[_builtins.str]] = None,
                 code_reference: Optional[pulumi.Input[_builtins.str]] = None,
                 code_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 managed_domain_mappings: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 run_env_variables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineFunctionRunEnvVariableArgs', 'CodeEngineFunctionRunEnvVariableArgsDict']]]]] = None,
                 runtime: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_concurrency: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_cpu_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_down_delay: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_max_execution_time: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_memory_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['CodeEngineFunctionTimeoutsArgs', 'CodeEngineFunctionTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a CodeEngineFunction resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] code_binary: Specifies whether the code is binary or not. Defaults to false when `code_reference` is set to a data URL. When
               `code_reference` is set to a code bundle URL, this field is always true.
        :param pulumi.Input[_builtins.str] code_main: Specifies the name of the function that should be invoked.
        :param pulumi.Input[_builtins.str] code_reference: Specifies either a reference to a code bundle or the source code itself. To specify the source code, use the data URL
               scheme and include the source code as base64 encoded. The data URL scheme is defined in [RFC
               2397](https://tools.ietf.org/html/rfc2397).
        :param pulumi.Input[_builtins.str] code_secret: The name of the secret that is used to access the specified `code_reference`. The secret is used to authenticate with a
               non-public endpoint that is specified as`code_reference`.
        :param pulumi.Input[_builtins.str] managed_domain_mappings: Optional value controlling which of the system managed domain mappings will be setup for the function. Valid values are
               'local_public', 'local_private' and 'local'. Visibility can only be 'local_private' if the project supports function
               private visibility.
        :param pulumi.Input[_builtins.str] name: The name of the function.
        :param pulumi.Input[_builtins.str] project_id: The ID of the project.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineFunctionRunEnvVariableArgs', 'CodeEngineFunctionRunEnvVariableArgsDict']]]] run_env_variables: References to config maps, secrets or literal values, which are defined by the function owner and are exposed as
               environment variables in the function.
        :param pulumi.Input[_builtins.str] runtime: The managed runtime used to execute the injected code.
        :param pulumi.Input[_builtins.float] scale_concurrency: Number of parallel requests handled by a single instance, supported only by Node.js, default is `1`.
        :param pulumi.Input[_builtins.str] scale_cpu_limit: Optional amount of CPU set for the instance of the function. For valid values see [Supported memory and CPU
               combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo).
        :param pulumi.Input[_builtins.float] scale_down_delay: Optional amount of time in seconds that delays the scale down behavior for a function.
        :param pulumi.Input[_builtins.float] scale_max_execution_time: Timeout in secs after which the function is terminated.
        :param pulumi.Input[_builtins.str] scale_memory_limit: Optional amount of memory set for the instance of the function. For valid values see [Supported memory and CPU
               combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo). The units for specifying memory are
               Megabyte (M) or Gigabyte (G), whereas G and M are the shorthand expressions for GB and MB. For more information see
               [Units of measurement](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo#unit-measurements).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CodeEngineFunctionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CodeEngineFunction resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CodeEngineFunctionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CodeEngineFunctionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 code_binary: Optional[pulumi.Input[_builtins.bool]] = None,
                 code_engine_function_id: Optional[pulumi.Input[_builtins.str]] = None,
                 code_main: Optional[pulumi.Input[_builtins.str]] = None,
                 code_reference: Optional[pulumi.Input[_builtins.str]] = None,
                 code_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 managed_domain_mappings: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 run_env_variables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineFunctionRunEnvVariableArgs', 'CodeEngineFunctionRunEnvVariableArgsDict']]]]] = None,
                 runtime: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_concurrency: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_cpu_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 scale_down_delay: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_max_execution_time: Optional[pulumi.Input[_builtins.float]] = None,
                 scale_memory_limit: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['CodeEngineFunctionTimeoutsArgs', 'CodeEngineFunctionTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CodeEngineFunctionArgs.__new__(CodeEngineFunctionArgs)

            __props__.__dict__["code_binary"] = code_binary
            __props__.__dict__["code_engine_function_id"] = code_engine_function_id
            __props__.__dict__["code_main"] = code_main
            if code_reference is None and not opts.urn:
                raise TypeError("Missing required property 'code_reference'")
            __props__.__dict__["code_reference"] = code_reference
            __props__.__dict__["code_secret"] = code_secret
            __props__.__dict__["managed_domain_mappings"] = managed_domain_mappings
            __props__.__dict__["name"] = name
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["run_env_variables"] = run_env_variables
            if runtime is None and not opts.urn:
                raise TypeError("Missing required property 'runtime'")
            __props__.__dict__["runtime"] = runtime
            __props__.__dict__["scale_concurrency"] = scale_concurrency
            __props__.__dict__["scale_cpu_limit"] = scale_cpu_limit
            __props__.__dict__["scale_down_delay"] = scale_down_delay
            __props__.__dict__["scale_max_execution_time"] = scale_max_execution_time
            __props__.__dict__["scale_memory_limit"] = scale_memory_limit
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["computed_env_variables"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["endpoint"] = None
            __props__.__dict__["endpoint_internal"] = None
            __props__.__dict__["entity_tag"] = None
            __props__.__dict__["etag"] = None
            __props__.__dict__["function_id"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["region"] = None
            __props__.__dict__["resource_type"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["status_details"] = None
        super(CodeEngineFunction, __self__).__init__(
            'ibm:index/codeEngineFunction:CodeEngineFunction',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            code_binary: Optional[pulumi.Input[_builtins.bool]] = None,
            code_engine_function_id: Optional[pulumi.Input[_builtins.str]] = None,
            code_main: Optional[pulumi.Input[_builtins.str]] = None,
            code_reference: Optional[pulumi.Input[_builtins.str]] = None,
            code_secret: Optional[pulumi.Input[_builtins.str]] = None,
            computed_env_variables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineFunctionComputedEnvVariableArgs', 'CodeEngineFunctionComputedEnvVariableArgsDict']]]]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            endpoint: Optional[pulumi.Input[_builtins.str]] = None,
            endpoint_internal: Optional[pulumi.Input[_builtins.str]] = None,
            entity_tag: Optional[pulumi.Input[_builtins.str]] = None,
            etag: Optional[pulumi.Input[_builtins.str]] = None,
            function_id: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            managed_domain_mappings: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            project_id: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            run_env_variables: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineFunctionRunEnvVariableArgs', 'CodeEngineFunctionRunEnvVariableArgsDict']]]]] = None,
            runtime: Optional[pulumi.Input[_builtins.str]] = None,
            scale_concurrency: Optional[pulumi.Input[_builtins.float]] = None,
            scale_cpu_limit: Optional[pulumi.Input[_builtins.str]] = None,
            scale_down_delay: Optional[pulumi.Input[_builtins.float]] = None,
            scale_max_execution_time: Optional[pulumi.Input[_builtins.float]] = None,
            scale_memory_limit: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            status_details: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineFunctionStatusDetailArgs', 'CodeEngineFunctionStatusDetailArgsDict']]]]] = None,
            timeouts: Optional[pulumi.Input[Union['CodeEngineFunctionTimeoutsArgs', 'CodeEngineFunctionTimeoutsArgsDict']]] = None) -> 'CodeEngineFunction':
        """
        Get an existing CodeEngineFunction resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] code_binary: Specifies whether the code is binary or not. Defaults to false when `code_reference` is set to a data URL. When
               `code_reference` is set to a code bundle URL, this field is always true.
        :param pulumi.Input[_builtins.str] code_main: Specifies the name of the function that should be invoked.
        :param pulumi.Input[_builtins.str] code_reference: Specifies either a reference to a code bundle or the source code itself. To specify the source code, use the data URL
               scheme and include the source code as base64 encoded. The data URL scheme is defined in [RFC
               2397](https://tools.ietf.org/html/rfc2397).
        :param pulumi.Input[_builtins.str] code_secret: The name of the secret that is used to access the specified `code_reference`. The secret is used to authenticate with a
               non-public endpoint that is specified as`code_reference`.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineFunctionComputedEnvVariableArgs', 'CodeEngineFunctionComputedEnvVariableArgsDict']]]] computed_env_variables: References to config maps, secrets or literal values, which are defined and set by Code Engine and are exposed as
               environment variables in the function.
        :param pulumi.Input[_builtins.str] created_at: The timestamp when the resource was created.
        :param pulumi.Input[_builtins.str] endpoint: URL to invoke the function.
        :param pulumi.Input[_builtins.str] endpoint_internal: URL to function that is only visible within the project.
        :param pulumi.Input[_builtins.str] entity_tag: The version of the function instance, which is used to achieve optimistic locking.
        :param pulumi.Input[_builtins.str] function_id: The identifier of the resource.
        :param pulumi.Input[_builtins.str] href: When you provision a new function, a relative URL path is created identifying the location of the instance.
        :param pulumi.Input[_builtins.str] managed_domain_mappings: Optional value controlling which of the system managed domain mappings will be setup for the function. Valid values are
               'local_public', 'local_private' and 'local'. Visibility can only be 'local_private' if the project supports function
               private visibility.
        :param pulumi.Input[_builtins.str] name: The name of the function.
        :param pulumi.Input[_builtins.str] project_id: The ID of the project.
        :param pulumi.Input[_builtins.str] region: The region of the project the resource is located in. Possible values: 'au-syd', 'br-sao', 'ca-tor', 'eu-de', 'eu-gb',
               'jp-osa', 'jp-tok', 'us-east', 'us-south'.
        :param pulumi.Input[_builtins.str] resource_type: The type of the function.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineFunctionRunEnvVariableArgs', 'CodeEngineFunctionRunEnvVariableArgsDict']]]] run_env_variables: References to config maps, secrets or literal values, which are defined by the function owner and are exposed as
               environment variables in the function.
        :param pulumi.Input[_builtins.str] runtime: The managed runtime used to execute the injected code.
        :param pulumi.Input[_builtins.float] scale_concurrency: Number of parallel requests handled by a single instance, supported only by Node.js, default is `1`.
        :param pulumi.Input[_builtins.str] scale_cpu_limit: Optional amount of CPU set for the instance of the function. For valid values see [Supported memory and CPU
               combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo).
        :param pulumi.Input[_builtins.float] scale_down_delay: Optional amount of time in seconds that delays the scale down behavior for a function.
        :param pulumi.Input[_builtins.float] scale_max_execution_time: Timeout in secs after which the function is terminated.
        :param pulumi.Input[_builtins.str] scale_memory_limit: Optional amount of memory set for the instance of the function. For valid values see [Supported memory and CPU
               combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo). The units for specifying memory are
               Megabyte (M) or Gigabyte (G), whereas G and M are the shorthand expressions for GB and MB. For more information see
               [Units of measurement](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo#unit-measurements).
        :param pulumi.Input[_builtins.str] status: The current status of the function.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CodeEngineFunctionStatusDetailArgs', 'CodeEngineFunctionStatusDetailArgsDict']]]] status_details: The detailed status of the function.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CodeEngineFunctionState.__new__(_CodeEngineFunctionState)

        __props__.__dict__["code_binary"] = code_binary
        __props__.__dict__["code_engine_function_id"] = code_engine_function_id
        __props__.__dict__["code_main"] = code_main
        __props__.__dict__["code_reference"] = code_reference
        __props__.__dict__["code_secret"] = code_secret
        __props__.__dict__["computed_env_variables"] = computed_env_variables
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["endpoint"] = endpoint
        __props__.__dict__["endpoint_internal"] = endpoint_internal
        __props__.__dict__["entity_tag"] = entity_tag
        __props__.__dict__["etag"] = etag
        __props__.__dict__["function_id"] = function_id
        __props__.__dict__["href"] = href
        __props__.__dict__["managed_domain_mappings"] = managed_domain_mappings
        __props__.__dict__["name"] = name
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["run_env_variables"] = run_env_variables
        __props__.__dict__["runtime"] = runtime
        __props__.__dict__["scale_concurrency"] = scale_concurrency
        __props__.__dict__["scale_cpu_limit"] = scale_cpu_limit
        __props__.__dict__["scale_down_delay"] = scale_down_delay
        __props__.__dict__["scale_max_execution_time"] = scale_max_execution_time
        __props__.__dict__["scale_memory_limit"] = scale_memory_limit
        __props__.__dict__["status"] = status
        __props__.__dict__["status_details"] = status_details
        __props__.__dict__["timeouts"] = timeouts
        return CodeEngineFunction(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="codeBinary")
    def code_binary(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Specifies whether the code is binary or not. Defaults to false when `code_reference` is set to a data URL. When
        `code_reference` is set to a code bundle URL, this field is always true.
        """
        return pulumi.get(self, "code_binary")

    @_builtins.property
    @pulumi.getter(name="codeEngineFunctionId")
    def code_engine_function_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "code_engine_function_id")

    @_builtins.property
    @pulumi.getter(name="codeMain")
    def code_main(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the name of the function that should be invoked.
        """
        return pulumi.get(self, "code_main")

    @_builtins.property
    @pulumi.getter(name="codeReference")
    def code_reference(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies either a reference to a code bundle or the source code itself. To specify the source code, use the data URL
        scheme and include the source code as base64 encoded. The data URL scheme is defined in [RFC
        2397](https://tools.ietf.org/html/rfc2397).
        """
        return pulumi.get(self, "code_reference")

    @_builtins.property
    @pulumi.getter(name="codeSecret")
    def code_secret(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The name of the secret that is used to access the specified `code_reference`. The secret is used to authenticate with a
        non-public endpoint that is specified as`code_reference`.
        """
        return pulumi.get(self, "code_secret")

    @_builtins.property
    @pulumi.getter(name="computedEnvVariables")
    def computed_env_variables(self) -> pulumi.Output[Sequence['outputs.CodeEngineFunctionComputedEnvVariable']]:
        """
        References to config maps, secrets or literal values, which are defined and set by Code Engine and are exposed as
        environment variables in the function.
        """
        return pulumi.get(self, "computed_env_variables")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The timestamp when the resource was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> pulumi.Output[_builtins.str]:
        """
        URL to invoke the function.
        """
        return pulumi.get(self, "endpoint")

    @_builtins.property
    @pulumi.getter(name="endpointInternal")
    def endpoint_internal(self) -> pulumi.Output[_builtins.str]:
        """
        URL to function that is only visible within the project.
        """
        return pulumi.get(self, "endpoint_internal")

    @_builtins.property
    @pulumi.getter(name="entityTag")
    def entity_tag(self) -> pulumi.Output[_builtins.str]:
        """
        The version of the function instance, which is used to achieve optimistic locking.
        """
        return pulumi.get(self, "entity_tag")

    @_builtins.property
    @pulumi.getter
    def etag(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "etag")

    @_builtins.property
    @pulumi.getter(name="functionId")
    def function_id(self) -> pulumi.Output[_builtins.str]:
        """
        The identifier of the resource.
        """
        return pulumi.get(self, "function_id")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        When you provision a new function, a relative URL path is created identifying the location of the instance.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="managedDomainMappings")
    def managed_domain_mappings(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Optional value controlling which of the system managed domain mappings will be setup for the function. Valid values are
        'local_public', 'local_private' and 'local'. Visibility can only be 'local_private' if the project supports function
        private visibility.
        """
        return pulumi.get(self, "managed_domain_mappings")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the function.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the project.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region of the project the resource is located in. Possible values: 'au-syd', 'br-sao', 'ca-tor', 'eu-de', 'eu-gb',
        'jp-osa', 'jp-tok', 'us-east', 'us-south'.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of the function.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="runEnvVariables")
    def run_env_variables(self) -> pulumi.Output[Optional[Sequence['outputs.CodeEngineFunctionRunEnvVariable']]]:
        """
        References to config maps, secrets or literal values, which are defined by the function owner and are exposed as
        environment variables in the function.
        """
        return pulumi.get(self, "run_env_variables")

    @_builtins.property
    @pulumi.getter
    def runtime(self) -> pulumi.Output[_builtins.str]:
        """
        The managed runtime used to execute the injected code.
        """
        return pulumi.get(self, "runtime")

    @_builtins.property
    @pulumi.getter(name="scaleConcurrency")
    def scale_concurrency(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Number of parallel requests handled by a single instance, supported only by Node.js, default is `1`.
        """
        return pulumi.get(self, "scale_concurrency")

    @_builtins.property
    @pulumi.getter(name="scaleCpuLimit")
    def scale_cpu_limit(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Optional amount of CPU set for the instance of the function. For valid values see [Supported memory and CPU
        combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo).
        """
        return pulumi.get(self, "scale_cpu_limit")

    @_builtins.property
    @pulumi.getter(name="scaleDownDelay")
    def scale_down_delay(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Optional amount of time in seconds that delays the scale down behavior for a function.
        """
        return pulumi.get(self, "scale_down_delay")

    @_builtins.property
    @pulumi.getter(name="scaleMaxExecutionTime")
    def scale_max_execution_time(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Timeout in secs after which the function is terminated.
        """
        return pulumi.get(self, "scale_max_execution_time")

    @_builtins.property
    @pulumi.getter(name="scaleMemoryLimit")
    def scale_memory_limit(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Optional amount of memory set for the instance of the function. For valid values see [Supported memory and CPU
        combinations](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo). The units for specifying memory are
        Megabyte (M) or Gigabyte (G), whereas G and M are the shorthand expressions for GB and MB. For more information see
        [Units of measurement](https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo#unit-measurements).
        """
        return pulumi.get(self, "scale_memory_limit")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The current status of the function.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> pulumi.Output[Sequence['outputs.CodeEngineFunctionStatusDetail']]:
        """
        The detailed status of the function.
        """
        return pulumi.get(self, "status_details")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.CodeEngineFunctionTimeouts']]:
        return pulumi.get(self, "timeouts")

