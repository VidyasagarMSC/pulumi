# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ContainerStorageAttachmentArgs', 'ContainerStorageAttachment']

@pulumi.input_type
class ContainerStorageAttachmentArgs:
    def __init__(__self__, *,
                 cluster: pulumi.Input[_builtins.str],
                 volume: pulumi.Input[_builtins.str],
                 worker: pulumi.Input[_builtins.str],
                 container_storage_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['ContainerStorageAttachmentTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a ContainerStorageAttachment resource.
        :param pulumi.Input[_builtins.str] cluster: Cluster name or ID
        :param pulumi.Input[_builtins.str] volume: VPC Volume ID
        :param pulumi.Input[_builtins.str] worker: worker node ID
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        """
        pulumi.set(__self__, "cluster", cluster)
        pulumi.set(__self__, "volume", volume)
        pulumi.set(__self__, "worker", worker)
        if container_storage_attachment_id is not None:
            pulumi.set(__self__, "container_storage_attachment_id", container_storage_attachment_id)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> pulumi.Input[_builtins.str]:
        """
        Cluster name or ID
        """
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster", value)

    @_builtins.property
    @pulumi.getter
    def volume(self) -> pulumi.Input[_builtins.str]:
        """
        VPC Volume ID
        """
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "volume", value)

    @_builtins.property
    @pulumi.getter
    def worker(self) -> pulumi.Input[_builtins.str]:
        """
        worker node ID
        """
        return pulumi.get(self, "worker")

    @worker.setter
    def worker(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "worker", value)

    @_builtins.property
    @pulumi.getter(name="containerStorageAttachmentId")
    def container_storage_attachment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_storage_attachment_id")

    @container_storage_attachment_id.setter
    def container_storage_attachment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_storage_attachment_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ContainerStorageAttachmentTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ContainerStorageAttachmentTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _ContainerStorageAttachmentState:
    def __init__(__self__, *,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 container_storage_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['ContainerStorageAttachmentTimeoutsArgs']] = None,
                 volume: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_attachment_name: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_type: Optional[pulumi.Input[_builtins.str]] = None,
                 worker: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ContainerStorageAttachment resources.
        :param pulumi.Input[_builtins.str] cluster: Cluster name or ID
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.str] status: Volume attachment status
        :param pulumi.Input[_builtins.str] volume: VPC Volume ID
        :param pulumi.Input[_builtins.str] volume_attachment_id: Volume attachment ID
        :param pulumi.Input[_builtins.str] volume_attachment_name: Volume attachment name
        :param pulumi.Input[_builtins.str] volume_type: The type of volume
        :param pulumi.Input[_builtins.str] worker: worker node ID
        """
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if container_storage_attachment_id is not None:
            pulumi.set(__self__, "container_storage_attachment_id", container_storage_attachment_id)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if volume is not None:
            pulumi.set(__self__, "volume", volume)
        if volume_attachment_id is not None:
            pulumi.set(__self__, "volume_attachment_id", volume_attachment_id)
        if volume_attachment_name is not None:
            pulumi.set(__self__, "volume_attachment_name", volume_attachment_name)
        if volume_type is not None:
            pulumi.set(__self__, "volume_type", volume_type)
        if worker is not None:
            pulumi.set(__self__, "worker", worker)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cluster name or ID
        """
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster", value)

    @_builtins.property
    @pulumi.getter(name="containerStorageAttachmentId")
    def container_storage_attachment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "container_storage_attachment_id")

    @container_storage_attachment_id.setter
    def container_storage_attachment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_storage_attachment_id", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Volume attachment status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ContainerStorageAttachmentTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ContainerStorageAttachmentTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def volume(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        VPC Volume ID
        """
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume", value)

    @_builtins.property
    @pulumi.getter(name="volumeAttachmentId")
    def volume_attachment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Volume attachment ID
        """
        return pulumi.get(self, "volume_attachment_id")

    @volume_attachment_id.setter
    def volume_attachment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume_attachment_id", value)

    @_builtins.property
    @pulumi.getter(name="volumeAttachmentName")
    def volume_attachment_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Volume attachment name
        """
        return pulumi.get(self, "volume_attachment_name")

    @volume_attachment_name.setter
    def volume_attachment_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume_attachment_name", value)

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of volume
        """
        return pulumi.get(self, "volume_type")

    @volume_type.setter
    def volume_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume_type", value)

    @_builtins.property
    @pulumi.getter
    def worker(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        worker node ID
        """
        return pulumi.get(self, "worker")

    @worker.setter
    def worker(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "worker", value)


@pulumi.type_token("ibm:index/containerStorageAttachment:ContainerStorageAttachment")
class ContainerStorageAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 container_storage_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['ContainerStorageAttachmentTimeoutsArgs', 'ContainerStorageAttachmentTimeoutsArgsDict']]] = None,
                 volume: Optional[pulumi.Input[_builtins.str]] = None,
                 worker: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a ContainerStorageAttachment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster: Cluster name or ID
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.str] volume: VPC Volume ID
        :param pulumi.Input[_builtins.str] worker: worker node ID
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ContainerStorageAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ContainerStorageAttachment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ContainerStorageAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ContainerStorageAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 container_storage_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['ContainerStorageAttachmentTimeoutsArgs', 'ContainerStorageAttachmentTimeoutsArgsDict']]] = None,
                 volume: Optional[pulumi.Input[_builtins.str]] = None,
                 worker: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ContainerStorageAttachmentArgs.__new__(ContainerStorageAttachmentArgs)

            if cluster is None and not opts.urn:
                raise TypeError("Missing required property 'cluster'")
            __props__.__dict__["cluster"] = cluster
            __props__.__dict__["container_storage_attachment_id"] = container_storage_attachment_id
            __props__.__dict__["resource_group_id"] = resource_group_id
            __props__.__dict__["timeouts"] = timeouts
            if volume is None and not opts.urn:
                raise TypeError("Missing required property 'volume'")
            __props__.__dict__["volume"] = volume
            if worker is None and not opts.urn:
                raise TypeError("Missing required property 'worker'")
            __props__.__dict__["worker"] = worker
            __props__.__dict__["status"] = None
            __props__.__dict__["volume_attachment_id"] = None
            __props__.__dict__["volume_attachment_name"] = None
            __props__.__dict__["volume_type"] = None
        super(ContainerStorageAttachment, __self__).__init__(
            'ibm:index/containerStorageAttachment:ContainerStorageAttachment',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster: Optional[pulumi.Input[_builtins.str]] = None,
            container_storage_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['ContainerStorageAttachmentTimeoutsArgs', 'ContainerStorageAttachmentTimeoutsArgsDict']]] = None,
            volume: Optional[pulumi.Input[_builtins.str]] = None,
            volume_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
            volume_attachment_name: Optional[pulumi.Input[_builtins.str]] = None,
            volume_type: Optional[pulumi.Input[_builtins.str]] = None,
            worker: Optional[pulumi.Input[_builtins.str]] = None) -> 'ContainerStorageAttachment':
        """
        Get an existing ContainerStorageAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster: Cluster name or ID
        :param pulumi.Input[_builtins.str] resource_group_id: ID of the resource group.
        :param pulumi.Input[_builtins.str] status: Volume attachment status
        :param pulumi.Input[_builtins.str] volume: VPC Volume ID
        :param pulumi.Input[_builtins.str] volume_attachment_id: Volume attachment ID
        :param pulumi.Input[_builtins.str] volume_attachment_name: Volume attachment name
        :param pulumi.Input[_builtins.str] volume_type: The type of volume
        :param pulumi.Input[_builtins.str] worker: worker node ID
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ContainerStorageAttachmentState.__new__(_ContainerStorageAttachmentState)

        __props__.__dict__["cluster"] = cluster
        __props__.__dict__["container_storage_attachment_id"] = container_storage_attachment_id
        __props__.__dict__["resource_group_id"] = resource_group_id
        __props__.__dict__["status"] = status
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["volume"] = volume
        __props__.__dict__["volume_attachment_id"] = volume_attachment_id
        __props__.__dict__["volume_attachment_name"] = volume_attachment_name
        __props__.__dict__["volume_type"] = volume_type
        __props__.__dict__["worker"] = worker
        return ContainerStorageAttachment(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> pulumi.Output[_builtins.str]:
        """
        Cluster name or ID
        """
        return pulumi.get(self, "cluster")

    @_builtins.property
    @pulumi.getter(name="containerStorageAttachmentId")
    def container_storage_attachment_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "container_storage_attachment_id")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        ID of the resource group.
        """
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Volume attachment status
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.ContainerStorageAttachmentTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def volume(self) -> pulumi.Output[_builtins.str]:
        """
        VPC Volume ID
        """
        return pulumi.get(self, "volume")

    @_builtins.property
    @pulumi.getter(name="volumeAttachmentId")
    def volume_attachment_id(self) -> pulumi.Output[_builtins.str]:
        """
        Volume attachment ID
        """
        return pulumi.get(self, "volume_attachment_id")

    @_builtins.property
    @pulumi.getter(name="volumeAttachmentName")
    def volume_attachment_name(self) -> pulumi.Output[_builtins.str]:
        """
        Volume attachment name
        """
        return pulumi.get(self, "volume_attachment_name")

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of volume
        """
        return pulumi.get(self, "volume_type")

    @_builtins.property
    @pulumi.getter
    def worker(self) -> pulumi.Output[_builtins.str]:
        """
        worker node ID
        """
        return pulumi.get(self, "worker")

