# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsClusterNetworkProfileResult',
    'AwaitableGetIsClusterNetworkProfileResult',
    'get_is_cluster_network_profile',
    'get_is_cluster_network_profile_output',
]

@pulumi.output_type
class GetIsClusterNetworkProfileResult:
    """
    A collection of values returned by getIsClusterNetworkProfile.
    """
    def __init__(__self__, family=None, href=None, id=None, name=None, resource_type=None, supported_instance_profiles=None, zones=None):
        if family and not isinstance(family, str):
            raise TypeError("Expected argument 'family' to be a str")
        pulumi.set(__self__, "family", family)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if supported_instance_profiles and not isinstance(supported_instance_profiles, list):
            raise TypeError("Expected argument 'supported_instance_profiles' to be a list")
        pulumi.set(__self__, "supported_instance_profiles", supported_instance_profiles)
        if zones and not isinstance(zones, list):
            raise TypeError("Expected argument 'zones' to be a list")
        pulumi.set(__self__, "zones", zones)

    @_builtins.property
    @pulumi.getter
    def family(self) -> _builtins.str:
        return pulumi.get(self, "family")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="supportedInstanceProfiles")
    def supported_instance_profiles(self) -> Sequence['outputs.GetIsClusterNetworkProfileSupportedInstanceProfileResult']:
        return pulumi.get(self, "supported_instance_profiles")

    @_builtins.property
    @pulumi.getter
    def zones(self) -> Sequence['outputs.GetIsClusterNetworkProfileZoneResult']:
        return pulumi.get(self, "zones")


class AwaitableGetIsClusterNetworkProfileResult(GetIsClusterNetworkProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsClusterNetworkProfileResult(
            family=self.family,
            href=self.href,
            id=self.id,
            name=self.name,
            resource_type=self.resource_type,
            supported_instance_profiles=self.supported_instance_profiles,
            zones=self.zones)


def get_is_cluster_network_profile(id: Optional[_builtins.str] = None,
                                   name: Optional[_builtins.str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsClusterNetworkProfileResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsClusterNetworkProfile:getIsClusterNetworkProfile', __args__, opts=opts, typ=GetIsClusterNetworkProfileResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsClusterNetworkProfileResult(
        family=pulumi.get(__ret__, 'family'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        supported_instance_profiles=pulumi.get(__ret__, 'supported_instance_profiles'),
        zones=pulumi.get(__ret__, 'zones'))
def get_is_cluster_network_profile_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          name: Optional[pulumi.Input[_builtins.str]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsClusterNetworkProfileResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsClusterNetworkProfile:getIsClusterNetworkProfile', __args__, opts=opts, typ=GetIsClusterNetworkProfileResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsClusterNetworkProfileResult(
        family=pulumi.get(__response__, 'family'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        supported_instance_profiles=pulumi.get(__response__, 'supported_instance_profiles'),
        zones=pulumi.get(__response__, 'zones')))
