# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIamAccessGroupTemplateVersionsResult',
    'AwaitableGetIamAccessGroupTemplateVersionsResult',
    'get_iam_access_group_template_versions',
    'get_iam_access_group_template_versions_output',
]

@pulumi.output_type
class GetIamAccessGroupTemplateVersionsResult:
    """
    A collection of values returned by getIamAccessGroupTemplateVersions.
    """
    def __init__(__self__, firsts=None, group_template_versions=None, id=None, lasts=None, previouses=None, template_id=None):
        if firsts and not isinstance(firsts, list):
            raise TypeError("Expected argument 'firsts' to be a list")
        pulumi.set(__self__, "firsts", firsts)
        if group_template_versions and not isinstance(group_template_versions, list):
            raise TypeError("Expected argument 'group_template_versions' to be a list")
        pulumi.set(__self__, "group_template_versions", group_template_versions)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lasts and not isinstance(lasts, list):
            raise TypeError("Expected argument 'lasts' to be a list")
        pulumi.set(__self__, "lasts", lasts)
        if previouses and not isinstance(previouses, list):
            raise TypeError("Expected argument 'previouses' to be a list")
        pulumi.set(__self__, "previouses", previouses)
        if template_id and not isinstance(template_id, str):
            raise TypeError("Expected argument 'template_id' to be a str")
        pulumi.set(__self__, "template_id", template_id)

    @_builtins.property
    @pulumi.getter
    def firsts(self) -> Sequence['outputs.GetIamAccessGroupTemplateVersionsFirstResult']:
        return pulumi.get(self, "firsts")

    @_builtins.property
    @pulumi.getter(name="groupTemplateVersions")
    def group_template_versions(self) -> Sequence['outputs.GetIamAccessGroupTemplateVersionsGroupTemplateVersionResult']:
        return pulumi.get(self, "group_template_versions")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def lasts(self) -> Sequence['outputs.GetIamAccessGroupTemplateVersionsLastResult']:
        return pulumi.get(self, "lasts")

    @_builtins.property
    @pulumi.getter
    def previouses(self) -> Sequence['outputs.GetIamAccessGroupTemplateVersionsPreviouseResult']:
        return pulumi.get(self, "previouses")

    @_builtins.property
    @pulumi.getter(name="templateId")
    def template_id(self) -> _builtins.str:
        return pulumi.get(self, "template_id")


class AwaitableGetIamAccessGroupTemplateVersionsResult(GetIamAccessGroupTemplateVersionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamAccessGroupTemplateVersionsResult(
            firsts=self.firsts,
            group_template_versions=self.group_template_versions,
            id=self.id,
            lasts=self.lasts,
            previouses=self.previouses,
            template_id=self.template_id)


def get_iam_access_group_template_versions(id: Optional[_builtins.str] = None,
                                           template_id: Optional[_builtins.str] = None,
                                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamAccessGroupTemplateVersionsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['templateId'] = template_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIamAccessGroupTemplateVersions:getIamAccessGroupTemplateVersions', __args__, opts=opts, typ=GetIamAccessGroupTemplateVersionsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIamAccessGroupTemplateVersionsResult(
        firsts=pulumi.get(__ret__, 'firsts'),
        group_template_versions=pulumi.get(__ret__, 'group_template_versions'),
        id=pulumi.get(__ret__, 'id'),
        lasts=pulumi.get(__ret__, 'lasts'),
        previouses=pulumi.get(__ret__, 'previouses'),
        template_id=pulumi.get(__ret__, 'template_id'))
def get_iam_access_group_template_versions_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                  template_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamAccessGroupTemplateVersionsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['templateId'] = template_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIamAccessGroupTemplateVersions:getIamAccessGroupTemplateVersions', __args__, opts=opts, typ=GetIamAccessGroupTemplateVersionsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIamAccessGroupTemplateVersionsResult(
        firsts=pulumi.get(__response__, 'firsts'),
        group_template_versions=pulumi.get(__response__, 'group_template_versions'),
        id=pulumi.get(__response__, 'id'),
        lasts=pulumi.get(__response__, 'lasts'),
        previouses=pulumi.get(__response__, 'previouses'),
        template_id=pulumi.get(__response__, 'template_id')))
