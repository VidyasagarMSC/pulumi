# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSatelliteClusterWorkerPoolResult',
    'AwaitableGetSatelliteClusterWorkerPoolResult',
    'get_satellite_cluster_worker_pool',
    'get_satellite_cluster_worker_pool_output',
]

@pulumi.output_type
class GetSatelliteClusterWorkerPoolResult:
    """
    A collection of values returned by getSatelliteClusterWorkerPool.
    """
    def __init__(__self__, auto_scale_enabled=None, cluster=None, flavor=None, host_labels=None, id=None, isolation=None, name=None, openshift_license_source=None, operating_system=None, region=None, resource_group_id=None, state=None, worker_count=None, worker_pool_labels=None, zones=None):
        if auto_scale_enabled and not isinstance(auto_scale_enabled, bool):
            raise TypeError("Expected argument 'auto_scale_enabled' to be a bool")
        pulumi.set(__self__, "auto_scale_enabled", auto_scale_enabled)
        if cluster and not isinstance(cluster, str):
            raise TypeError("Expected argument 'cluster' to be a str")
        pulumi.set(__self__, "cluster", cluster)
        if flavor and not isinstance(flavor, str):
            raise TypeError("Expected argument 'flavor' to be a str")
        pulumi.set(__self__, "flavor", flavor)
        if host_labels and not isinstance(host_labels, dict):
            raise TypeError("Expected argument 'host_labels' to be a dict")
        pulumi.set(__self__, "host_labels", host_labels)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if isolation and not isinstance(isolation, str):
            raise TypeError("Expected argument 'isolation' to be a str")
        pulumi.set(__self__, "isolation", isolation)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if openshift_license_source and not isinstance(openshift_license_source, str):
            raise TypeError("Expected argument 'openshift_license_source' to be a str")
        pulumi.set(__self__, "openshift_license_source", openshift_license_source)
        if operating_system and not isinstance(operating_system, str):
            raise TypeError("Expected argument 'operating_system' to be a str")
        pulumi.set(__self__, "operating_system", operating_system)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_group_id and not isinstance(resource_group_id, str):
            raise TypeError("Expected argument 'resource_group_id' to be a str")
        pulumi.set(__self__, "resource_group_id", resource_group_id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if worker_count and not isinstance(worker_count, float):
            raise TypeError("Expected argument 'worker_count' to be a float")
        pulumi.set(__self__, "worker_count", worker_count)
        if worker_pool_labels and not isinstance(worker_pool_labels, dict):
            raise TypeError("Expected argument 'worker_pool_labels' to be a dict")
        pulumi.set(__self__, "worker_pool_labels", worker_pool_labels)
        if zones and not isinstance(zones, list):
            raise TypeError("Expected argument 'zones' to be a list")
        pulumi.set(__self__, "zones", zones)

    @_builtins.property
    @pulumi.getter(name="autoScaleEnabled")
    def auto_scale_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "auto_scale_enabled")

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> _builtins.str:
        return pulumi.get(self, "cluster")

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> _builtins.str:
        return pulumi.get(self, "flavor")

    @_builtins.property
    @pulumi.getter(name="hostLabels")
    def host_labels(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "host_labels")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def isolation(self) -> _builtins.str:
        return pulumi.get(self, "isolation")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="openshiftLicenseSource")
    def openshift_license_source(self) -> _builtins.str:
        return pulumi.get(self, "openshift_license_source")

    @_builtins.property
    @pulumi.getter(name="operatingSystem")
    def operating_system(self) -> _builtins.str:
        return pulumi.get(self, "operating_system")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> _builtins.str:
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="workerCount")
    def worker_count(self) -> _builtins.float:
        return pulumi.get(self, "worker_count")

    @_builtins.property
    @pulumi.getter(name="workerPoolLabels")
    def worker_pool_labels(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "worker_pool_labels")

    @_builtins.property
    @pulumi.getter
    def zones(self) -> Sequence['outputs.GetSatelliteClusterWorkerPoolZoneResult']:
        return pulumi.get(self, "zones")


class AwaitableGetSatelliteClusterWorkerPoolResult(GetSatelliteClusterWorkerPoolResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSatelliteClusterWorkerPoolResult(
            auto_scale_enabled=self.auto_scale_enabled,
            cluster=self.cluster,
            flavor=self.flavor,
            host_labels=self.host_labels,
            id=self.id,
            isolation=self.isolation,
            name=self.name,
            openshift_license_source=self.openshift_license_source,
            operating_system=self.operating_system,
            region=self.region,
            resource_group_id=self.resource_group_id,
            state=self.state,
            worker_count=self.worker_count,
            worker_pool_labels=self.worker_pool_labels,
            zones=self.zones)


def get_satellite_cluster_worker_pool(cluster: Optional[_builtins.str] = None,
                                      id: Optional[_builtins.str] = None,
                                      name: Optional[_builtins.str] = None,
                                      region: Optional[_builtins.str] = None,
                                      resource_group_id: Optional[_builtins.str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSatelliteClusterWorkerPoolResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cluster'] = cluster
    __args__['id'] = id
    __args__['name'] = name
    __args__['region'] = region
    __args__['resourceGroupId'] = resource_group_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSatelliteClusterWorkerPool:getSatelliteClusterWorkerPool', __args__, opts=opts, typ=GetSatelliteClusterWorkerPoolResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSatelliteClusterWorkerPoolResult(
        auto_scale_enabled=pulumi.get(__ret__, 'auto_scale_enabled'),
        cluster=pulumi.get(__ret__, 'cluster'),
        flavor=pulumi.get(__ret__, 'flavor'),
        host_labels=pulumi.get(__ret__, 'host_labels'),
        id=pulumi.get(__ret__, 'id'),
        isolation=pulumi.get(__ret__, 'isolation'),
        name=pulumi.get(__ret__, 'name'),
        openshift_license_source=pulumi.get(__ret__, 'openshift_license_source'),
        operating_system=pulumi.get(__ret__, 'operating_system'),
        region=pulumi.get(__ret__, 'region'),
        resource_group_id=pulumi.get(__ret__, 'resource_group_id'),
        state=pulumi.get(__ret__, 'state'),
        worker_count=pulumi.get(__ret__, 'worker_count'),
        worker_pool_labels=pulumi.get(__ret__, 'worker_pool_labels'),
        zones=pulumi.get(__ret__, 'zones'))
def get_satellite_cluster_worker_pool_output(cluster: Optional[pulumi.Input[_builtins.str]] = None,
                                             id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             name: Optional[pulumi.Input[_builtins.str]] = None,
                                             region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             resource_group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSatelliteClusterWorkerPoolResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cluster'] = cluster
    __args__['id'] = id
    __args__['name'] = name
    __args__['region'] = region
    __args__['resourceGroupId'] = resource_group_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSatelliteClusterWorkerPool:getSatelliteClusterWorkerPool', __args__, opts=opts, typ=GetSatelliteClusterWorkerPoolResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSatelliteClusterWorkerPoolResult(
        auto_scale_enabled=pulumi.get(__response__, 'auto_scale_enabled'),
        cluster=pulumi.get(__response__, 'cluster'),
        flavor=pulumi.get(__response__, 'flavor'),
        host_labels=pulumi.get(__response__, 'host_labels'),
        id=pulumi.get(__response__, 'id'),
        isolation=pulumi.get(__response__, 'isolation'),
        name=pulumi.get(__response__, 'name'),
        openshift_license_source=pulumi.get(__response__, 'openshift_license_source'),
        operating_system=pulumi.get(__response__, 'operating_system'),
        region=pulumi.get(__response__, 'region'),
        resource_group_id=pulumi.get(__response__, 'resource_group_id'),
        state=pulumi.get(__response__, 'state'),
        worker_count=pulumi.get(__response__, 'worker_count'),
        worker_pool_labels=pulumi.get(__response__, 'worker_pool_labels'),
        zones=pulumi.get(__response__, 'zones')))
