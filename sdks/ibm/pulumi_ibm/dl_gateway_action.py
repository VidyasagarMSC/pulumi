# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DlGatewayActionArgs', 'DlGatewayAction']

@pulumi.input_type
class DlGatewayActionArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[_builtins.str],
                 gateway: pulumi.Input[_builtins.str],
                 as_prepends: Optional[pulumi.Input[Sequence[pulumi.Input['DlGatewayActionAsPrependArgs']]]] = None,
                 authentication_key: Optional[pulumi.Input[_builtins.str]] = None,
                 bfd_interval: Optional[pulumi.Input[_builtins.float]] = None,
                 bfd_multiplier: Optional[pulumi.Input[_builtins.float]] = None,
                 bgp_asn: Optional[pulumi.Input[_builtins.float]] = None,
                 bgp_base_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 bgp_cer_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 bgp_ibm_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 carrier_name: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 cross_connect_router: Optional[pulumi.Input[_builtins.str]] = None,
                 customer_name: Optional[pulumi.Input[_builtins.str]] = None,
                 default_export_route_filter: Optional[pulumi.Input[_builtins.str]] = None,
                 default_import_route_filter: Optional[pulumi.Input[_builtins.str]] = None,
                 dl_gateway_action_id: Optional[pulumi.Input[_builtins.str]] = None,
                 export_route_filters: Optional[pulumi.Input[Sequence[pulumi.Input['DlGatewayActionExportRouteFilterArgs']]]] = None,
                 global_: Optional[pulumi.Input[_builtins.bool]] = None,
                 import_route_filters: Optional[pulumi.Input[Sequence[pulumi.Input['DlGatewayActionImportRouteFilterArgs']]]] = None,
                 loa_reject_reason: Optional[pulumi.Input[_builtins.str]] = None,
                 location_name: Optional[pulumi.Input[_builtins.str]] = None,
                 metered: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 speed_mbps: Optional[pulumi.Input[_builtins.float]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['DlGatewayActionTimeoutsArgs']] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DlGatewayAction resource.
        :param pulumi.Input[_builtins.str] action: customer action on provider call
        :param pulumi.Input[_builtins.str] gateway: The Direct Link gateway identifier
        :param pulumi.Input[Sequence[pulumi.Input['DlGatewayActionAsPrependArgs']]] as_prepends: List of AS Prepend configuration information
        :param pulumi.Input[_builtins.str] authentication_key: BGP MD5 authentication key
        :param pulumi.Input[_builtins.float] bfd_interval: BFD Interval
        :param pulumi.Input[_builtins.float] bfd_multiplier: BFD Multiplier
        :param pulumi.Input[_builtins.float] bgp_asn: BGP ASN
        :param pulumi.Input[_builtins.str] bgp_base_cidr: BGP base CIDR
        :param pulumi.Input[_builtins.str] bgp_cer_cidr: BGP customer edge router CIDR
        :param pulumi.Input[_builtins.str] bgp_ibm_cidr: BGP IBM CIDR
        :param pulumi.Input[_builtins.str] carrier_name: Carrier name
        :param pulumi.Input[_builtins.str] connection_mode: Type of services this Gateway is attached to. Mode transit means this Gateway will be attached to Transit Gateway
               Service and direct means this Gateway will be attached to vpc or classic connection
        :param pulumi.Input[_builtins.str] cross_connect_router: Cross connect router
        :param pulumi.Input[_builtins.str] customer_name: Customer name
        :param pulumi.Input[_builtins.str] default_export_route_filter: The default directional route filter action that applies to routes that do not match any directional route filters
        :param pulumi.Input[_builtins.str] default_import_route_filter: The default directional route filter action that applies to routes that do not match any directional route filters
        :param pulumi.Input[Sequence[pulumi.Input['DlGatewayActionExportRouteFilterArgs']]] export_route_filters: List Export Route Filters for a Direct Link gateway
        :param pulumi.Input[_builtins.bool] global_: Gateways with global routing (true) can connect to networks outside their associated region
        :param pulumi.Input[Sequence[pulumi.Input['DlGatewayActionImportRouteFilterArgs']]] import_route_filters: List Import Route Filters for a Direct Link gateway
        :param pulumi.Input[_builtins.str] loa_reject_reason: Loa reject reason
        :param pulumi.Input[_builtins.str] location_name: Gateway location
        :param pulumi.Input[_builtins.bool] metered: Metered billing option
        :param pulumi.Input[_builtins.str] name: The unique user-defined name for this gateway
        :param pulumi.Input[_builtins.str] port: Gateway port
        :param pulumi.Input[_builtins.str] resource_group: Gateway resource group
        :param pulumi.Input[_builtins.float] speed_mbps: Gateway speed in megabits per second
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags for the direct link gateway
        :param pulumi.Input[_builtins.str] type: Gateway type
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "gateway", gateway)
        if as_prepends is not None:
            pulumi.set(__self__, "as_prepends", as_prepends)
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if bfd_interval is not None:
            pulumi.set(__self__, "bfd_interval", bfd_interval)
        if bfd_multiplier is not None:
            pulumi.set(__self__, "bfd_multiplier", bfd_multiplier)
        if bgp_asn is not None:
            pulumi.set(__self__, "bgp_asn", bgp_asn)
        if bgp_base_cidr is not None:
            pulumi.set(__self__, "bgp_base_cidr", bgp_base_cidr)
        if bgp_cer_cidr is not None:
            pulumi.set(__self__, "bgp_cer_cidr", bgp_cer_cidr)
        if bgp_ibm_cidr is not None:
            pulumi.set(__self__, "bgp_ibm_cidr", bgp_ibm_cidr)
        if carrier_name is not None:
            pulumi.set(__self__, "carrier_name", carrier_name)
        if connection_mode is not None:
            pulumi.set(__self__, "connection_mode", connection_mode)
        if cross_connect_router is not None:
            pulumi.set(__self__, "cross_connect_router", cross_connect_router)
        if customer_name is not None:
            pulumi.set(__self__, "customer_name", customer_name)
        if default_export_route_filter is not None:
            pulumi.set(__self__, "default_export_route_filter", default_export_route_filter)
        if default_import_route_filter is not None:
            pulumi.set(__self__, "default_import_route_filter", default_import_route_filter)
        if dl_gateway_action_id is not None:
            pulumi.set(__self__, "dl_gateway_action_id", dl_gateway_action_id)
        if export_route_filters is not None:
            pulumi.set(__self__, "export_route_filters", export_route_filters)
        if global_ is not None:
            pulumi.set(__self__, "global_", global_)
        if import_route_filters is not None:
            pulumi.set(__self__, "import_route_filters", import_route_filters)
        if loa_reject_reason is not None:
            pulumi.set(__self__, "loa_reject_reason", loa_reject_reason)
        if location_name is not None:
            pulumi.set(__self__, "location_name", location_name)
        if metered is not None:
            pulumi.set(__self__, "metered", metered)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if speed_mbps is not None:
            pulumi.set(__self__, "speed_mbps", speed_mbps)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Input[_builtins.str]:
        """
        customer action on provider call
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> pulumi.Input[_builtins.str]:
        """
        The Direct Link gateway identifier
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "gateway", value)

    @_builtins.property
    @pulumi.getter(name="asPrepends")
    def as_prepends(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DlGatewayActionAsPrependArgs']]]]:
        """
        List of AS Prepend configuration information
        """
        return pulumi.get(self, "as_prepends")

    @as_prepends.setter
    def as_prepends(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DlGatewayActionAsPrependArgs']]]]):
        pulumi.set(self, "as_prepends", value)

    @_builtins.property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        BGP MD5 authentication key
        """
        return pulumi.get(self, "authentication_key")

    @authentication_key.setter
    def authentication_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_key", value)

    @_builtins.property
    @pulumi.getter(name="bfdInterval")
    def bfd_interval(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        BFD Interval
        """
        return pulumi.get(self, "bfd_interval")

    @bfd_interval.setter
    def bfd_interval(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "bfd_interval", value)

    @_builtins.property
    @pulumi.getter(name="bfdMultiplier")
    def bfd_multiplier(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        BFD Multiplier
        """
        return pulumi.get(self, "bfd_multiplier")

    @bfd_multiplier.setter
    def bfd_multiplier(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "bfd_multiplier", value)

    @_builtins.property
    @pulumi.getter(name="bgpAsn")
    def bgp_asn(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        BGP ASN
        """
        return pulumi.get(self, "bgp_asn")

    @bgp_asn.setter
    def bgp_asn(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "bgp_asn", value)

    @_builtins.property
    @pulumi.getter(name="bgpBaseCidr")
    def bgp_base_cidr(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        BGP base CIDR
        """
        return pulumi.get(self, "bgp_base_cidr")

    @bgp_base_cidr.setter
    def bgp_base_cidr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bgp_base_cidr", value)

    @_builtins.property
    @pulumi.getter(name="bgpCerCidr")
    def bgp_cer_cidr(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        BGP customer edge router CIDR
        """
        return pulumi.get(self, "bgp_cer_cidr")

    @bgp_cer_cidr.setter
    def bgp_cer_cidr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bgp_cer_cidr", value)

    @_builtins.property
    @pulumi.getter(name="bgpIbmCidr")
    def bgp_ibm_cidr(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        BGP IBM CIDR
        """
        return pulumi.get(self, "bgp_ibm_cidr")

    @bgp_ibm_cidr.setter
    def bgp_ibm_cidr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bgp_ibm_cidr", value)

    @_builtins.property
    @pulumi.getter(name="carrierName")
    def carrier_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Carrier name
        """
        return pulumi.get(self, "carrier_name")

    @carrier_name.setter
    def carrier_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "carrier_name", value)

    @_builtins.property
    @pulumi.getter(name="connectionMode")
    def connection_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of services this Gateway is attached to. Mode transit means this Gateway will be attached to Transit Gateway
        Service and direct means this Gateway will be attached to vpc or classic connection
        """
        return pulumi.get(self, "connection_mode")

    @connection_mode.setter
    def connection_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connection_mode", value)

    @_builtins.property
    @pulumi.getter(name="crossConnectRouter")
    def cross_connect_router(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cross connect router
        """
        return pulumi.get(self, "cross_connect_router")

    @cross_connect_router.setter
    def cross_connect_router(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cross_connect_router", value)

    @_builtins.property
    @pulumi.getter(name="customerName")
    def customer_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Customer name
        """
        return pulumi.get(self, "customer_name")

    @customer_name.setter
    def customer_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "customer_name", value)

    @_builtins.property
    @pulumi.getter(name="defaultExportRouteFilter")
    def default_export_route_filter(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The default directional route filter action that applies to routes that do not match any directional route filters
        """
        return pulumi.get(self, "default_export_route_filter")

    @default_export_route_filter.setter
    def default_export_route_filter(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_export_route_filter", value)

    @_builtins.property
    @pulumi.getter(name="defaultImportRouteFilter")
    def default_import_route_filter(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The default directional route filter action that applies to routes that do not match any directional route filters
        """
        return pulumi.get(self, "default_import_route_filter")

    @default_import_route_filter.setter
    def default_import_route_filter(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_import_route_filter", value)

    @_builtins.property
    @pulumi.getter(name="dlGatewayActionId")
    def dl_gateway_action_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dl_gateway_action_id")

    @dl_gateway_action_id.setter
    def dl_gateway_action_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dl_gateway_action_id", value)

    @_builtins.property
    @pulumi.getter(name="exportRouteFilters")
    def export_route_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DlGatewayActionExportRouteFilterArgs']]]]:
        """
        List Export Route Filters for a Direct Link gateway
        """
        return pulumi.get(self, "export_route_filters")

    @export_route_filters.setter
    def export_route_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DlGatewayActionExportRouteFilterArgs']]]]):
        pulumi.set(self, "export_route_filters", value)

    @_builtins.property
    @pulumi.getter(name="global")
    def global_(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Gateways with global routing (true) can connect to networks outside their associated region
        """
        return pulumi.get(self, "global_")

    @global_.setter
    def global_(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "global_", value)

    @_builtins.property
    @pulumi.getter(name="importRouteFilters")
    def import_route_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DlGatewayActionImportRouteFilterArgs']]]]:
        """
        List Import Route Filters for a Direct Link gateway
        """
        return pulumi.get(self, "import_route_filters")

    @import_route_filters.setter
    def import_route_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DlGatewayActionImportRouteFilterArgs']]]]):
        pulumi.set(self, "import_route_filters", value)

    @_builtins.property
    @pulumi.getter(name="loaRejectReason")
    def loa_reject_reason(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Loa reject reason
        """
        return pulumi.get(self, "loa_reject_reason")

    @loa_reject_reason.setter
    def loa_reject_reason(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "loa_reject_reason", value)

    @_builtins.property
    @pulumi.getter(name="locationName")
    def location_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Gateway location
        """
        return pulumi.get(self, "location_name")

    @location_name.setter
    def location_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "location_name", value)

    @_builtins.property
    @pulumi.getter
    def metered(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Metered billing option
        """
        return pulumi.get(self, "metered")

    @metered.setter
    def metered(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "metered", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique user-defined name for this gateway
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Gateway port
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Gateway resource group
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="speedMbps")
    def speed_mbps(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Gateway speed in megabits per second
        """
        return pulumi.get(self, "speed_mbps")

    @speed_mbps.setter
    def speed_mbps(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "speed_mbps", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Tags for the direct link gateway
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['DlGatewayActionTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['DlGatewayActionTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Gateway type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _DlGatewayActionState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 as_prepends: Optional[pulumi.Input[Sequence[pulumi.Input['DlGatewayActionAsPrependArgs']]]] = None,
                 authentication_key: Optional[pulumi.Input[_builtins.str]] = None,
                 bfd_interval: Optional[pulumi.Input[_builtins.float]] = None,
                 bfd_multiplier: Optional[pulumi.Input[_builtins.float]] = None,
                 bfd_status: Optional[pulumi.Input[_builtins.str]] = None,
                 bfd_status_updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 bgp_asn: Optional[pulumi.Input[_builtins.float]] = None,
                 bgp_base_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 bgp_cer_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 bgp_ibm_asn: Optional[pulumi.Input[_builtins.float]] = None,
                 bgp_ibm_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 bgp_status: Optional[pulumi.Input[_builtins.str]] = None,
                 bgp_status_updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 carrier_name: Optional[pulumi.Input[_builtins.str]] = None,
                 change_request: Optional[pulumi.Input[_builtins.str]] = None,
                 completion_notice_reject_reason: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 cross_connect_router: Optional[pulumi.Input[_builtins.str]] = None,
                 customer_name: Optional[pulumi.Input[_builtins.str]] = None,
                 default_export_route_filter: Optional[pulumi.Input[_builtins.str]] = None,
                 default_import_route_filter: Optional[pulumi.Input[_builtins.str]] = None,
                 dl_gateway_action_id: Optional[pulumi.Input[_builtins.str]] = None,
                 export_route_filters: Optional[pulumi.Input[Sequence[pulumi.Input['DlGatewayActionExportRouteFilterArgs']]]] = None,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 global_: Optional[pulumi.Input[_builtins.bool]] = None,
                 import_route_filters: Optional[pulumi.Input[Sequence[pulumi.Input['DlGatewayActionImportRouteFilterArgs']]]] = None,
                 link_status: Optional[pulumi.Input[_builtins.str]] = None,
                 link_status_updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 loa_reject_reason: Optional[pulumi.Input[_builtins.str]] = None,
                 location_display_name: Optional[pulumi.Input[_builtins.str]] = None,
                 location_name: Optional[pulumi.Input[_builtins.str]] = None,
                 metered: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 operational_status: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.str]] = None,
                 provider_api_managed: Optional[pulumi.Input[_builtins.bool]] = None,
                 resource_controller_url: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_status: Optional[pulumi.Input[_builtins.str]] = None,
                 speed_mbps: Optional[pulumi.Input[_builtins.float]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['DlGatewayActionTimeoutsArgs']] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 vlan: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering DlGatewayAction resources.
        :param pulumi.Input[_builtins.str] action: customer action on provider call
        :param pulumi.Input[Sequence[pulumi.Input['DlGatewayActionAsPrependArgs']]] as_prepends: List of AS Prepend configuration information
        :param pulumi.Input[_builtins.str] authentication_key: BGP MD5 authentication key
        :param pulumi.Input[_builtins.float] bfd_interval: BFD Interval
        :param pulumi.Input[_builtins.float] bfd_multiplier: BFD Multiplier
        :param pulumi.Input[_builtins.str] bfd_status: Gateway BFD status
        :param pulumi.Input[_builtins.str] bfd_status_updated_at: Date and time BFD status was updated
        :param pulumi.Input[_builtins.float] bgp_asn: BGP ASN
        :param pulumi.Input[_builtins.str] bgp_base_cidr: BGP base CIDR
        :param pulumi.Input[_builtins.str] bgp_cer_cidr: BGP customer edge router CIDR
        :param pulumi.Input[_builtins.float] bgp_ibm_asn: IBM BGP ASN
        :param pulumi.Input[_builtins.str] bgp_ibm_cidr: BGP IBM CIDR
        :param pulumi.Input[_builtins.str] bgp_status: Gateway BGP status
        :param pulumi.Input[_builtins.str] bgp_status_updated_at: Date and time BGP status was updated
        :param pulumi.Input[_builtins.str] carrier_name: Carrier name
        :param pulumi.Input[_builtins.str] change_request: Changes pending approval for provider managed Direct Link Connect gateways
        :param pulumi.Input[_builtins.str] completion_notice_reject_reason: Reason for completion notice rejection
        :param pulumi.Input[_builtins.str] connection_mode: Type of services this Gateway is attached to. Mode transit means this Gateway will be attached to Transit Gateway
               Service and direct means this Gateway will be attached to vpc or classic connection
        :param pulumi.Input[_builtins.str] created_at: The date and time resource was created
        :param pulumi.Input[_builtins.str] crn: The CRN (Cloud Resource Name) of this gateway
        :param pulumi.Input[_builtins.str] cross_connect_router: Cross connect router
        :param pulumi.Input[_builtins.str] customer_name: Customer name
        :param pulumi.Input[_builtins.str] default_export_route_filter: The default directional route filter action that applies to routes that do not match any directional route filters
        :param pulumi.Input[_builtins.str] default_import_route_filter: The default directional route filter action that applies to routes that do not match any directional route filters
        :param pulumi.Input[Sequence[pulumi.Input['DlGatewayActionExportRouteFilterArgs']]] export_route_filters: List Export Route Filters for a Direct Link gateway
        :param pulumi.Input[_builtins.str] gateway: The Direct Link gateway identifier
        :param pulumi.Input[_builtins.bool] global_: Gateways with global routing (true) can connect to networks outside their associated region
        :param pulumi.Input[Sequence[pulumi.Input['DlGatewayActionImportRouteFilterArgs']]] import_route_filters: List Import Route Filters for a Direct Link gateway
        :param pulumi.Input[_builtins.str] link_status: Gateway link status
        :param pulumi.Input[_builtins.str] link_status_updated_at: Date and time Link status was updated
        :param pulumi.Input[_builtins.str] loa_reject_reason: Loa reject reason
        :param pulumi.Input[_builtins.str] location_display_name: Gateway location long name
        :param pulumi.Input[_builtins.str] location_name: Gateway location
        :param pulumi.Input[_builtins.bool] metered: Metered billing option
        :param pulumi.Input[_builtins.str] name: The unique user-defined name for this gateway
        :param pulumi.Input[_builtins.str] operational_status: Gateway operational status
        :param pulumi.Input[_builtins.str] port: Gateway port
        :param pulumi.Input[_builtins.bool] provider_api_managed: Indicates whether gateway was created through a provider portal
        :param pulumi.Input[_builtins.str] resource_controller_url: The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        :param pulumi.Input[_builtins.str] resource_crn: The crn of the resource
        :param pulumi.Input[_builtins.str] resource_group: Gateway resource group
        :param pulumi.Input[_builtins.str] resource_group_name: The resource group name in which resource is provisioned
        :param pulumi.Input[_builtins.str] resource_name: The name of the resource
        :param pulumi.Input[_builtins.str] resource_status: The status of the resource
        :param pulumi.Input[_builtins.float] speed_mbps: Gateway speed in megabits per second
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags for the direct link gateway
        :param pulumi.Input[_builtins.str] type: Gateway type
        :param pulumi.Input[_builtins.float] vlan: VLAN allocated for this gateway
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if as_prepends is not None:
            pulumi.set(__self__, "as_prepends", as_prepends)
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if bfd_interval is not None:
            pulumi.set(__self__, "bfd_interval", bfd_interval)
        if bfd_multiplier is not None:
            pulumi.set(__self__, "bfd_multiplier", bfd_multiplier)
        if bfd_status is not None:
            pulumi.set(__self__, "bfd_status", bfd_status)
        if bfd_status_updated_at is not None:
            pulumi.set(__self__, "bfd_status_updated_at", bfd_status_updated_at)
        if bgp_asn is not None:
            pulumi.set(__self__, "bgp_asn", bgp_asn)
        if bgp_base_cidr is not None:
            pulumi.set(__self__, "bgp_base_cidr", bgp_base_cidr)
        if bgp_cer_cidr is not None:
            pulumi.set(__self__, "bgp_cer_cidr", bgp_cer_cidr)
        if bgp_ibm_asn is not None:
            pulumi.set(__self__, "bgp_ibm_asn", bgp_ibm_asn)
        if bgp_ibm_cidr is not None:
            pulumi.set(__self__, "bgp_ibm_cidr", bgp_ibm_cidr)
        if bgp_status is not None:
            pulumi.set(__self__, "bgp_status", bgp_status)
        if bgp_status_updated_at is not None:
            pulumi.set(__self__, "bgp_status_updated_at", bgp_status_updated_at)
        if carrier_name is not None:
            pulumi.set(__self__, "carrier_name", carrier_name)
        if change_request is not None:
            pulumi.set(__self__, "change_request", change_request)
        if completion_notice_reject_reason is not None:
            pulumi.set(__self__, "completion_notice_reject_reason", completion_notice_reject_reason)
        if connection_mode is not None:
            pulumi.set(__self__, "connection_mode", connection_mode)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if cross_connect_router is not None:
            pulumi.set(__self__, "cross_connect_router", cross_connect_router)
        if customer_name is not None:
            pulumi.set(__self__, "customer_name", customer_name)
        if default_export_route_filter is not None:
            pulumi.set(__self__, "default_export_route_filter", default_export_route_filter)
        if default_import_route_filter is not None:
            pulumi.set(__self__, "default_import_route_filter", default_import_route_filter)
        if dl_gateway_action_id is not None:
            pulumi.set(__self__, "dl_gateway_action_id", dl_gateway_action_id)
        if export_route_filters is not None:
            pulumi.set(__self__, "export_route_filters", export_route_filters)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if global_ is not None:
            pulumi.set(__self__, "global_", global_)
        if import_route_filters is not None:
            pulumi.set(__self__, "import_route_filters", import_route_filters)
        if link_status is not None:
            pulumi.set(__self__, "link_status", link_status)
        if link_status_updated_at is not None:
            pulumi.set(__self__, "link_status_updated_at", link_status_updated_at)
        if loa_reject_reason is not None:
            pulumi.set(__self__, "loa_reject_reason", loa_reject_reason)
        if location_display_name is not None:
            pulumi.set(__self__, "location_display_name", location_display_name)
        if location_name is not None:
            pulumi.set(__self__, "location_name", location_name)
        if metered is not None:
            pulumi.set(__self__, "metered", metered)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operational_status is not None:
            pulumi.set(__self__, "operational_status", operational_status)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if provider_api_managed is not None:
            pulumi.set(__self__, "provider_api_managed", provider_api_managed)
        if resource_controller_url is not None:
            pulumi.set(__self__, "resource_controller_url", resource_controller_url)
        if resource_crn is not None:
            pulumi.set(__self__, "resource_crn", resource_crn)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_status is not None:
            pulumi.set(__self__, "resource_status", resource_status)
        if speed_mbps is not None:
            pulumi.set(__self__, "speed_mbps", speed_mbps)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        customer action on provider call
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="asPrepends")
    def as_prepends(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DlGatewayActionAsPrependArgs']]]]:
        """
        List of AS Prepend configuration information
        """
        return pulumi.get(self, "as_prepends")

    @as_prepends.setter
    def as_prepends(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DlGatewayActionAsPrependArgs']]]]):
        pulumi.set(self, "as_prepends", value)

    @_builtins.property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        BGP MD5 authentication key
        """
        return pulumi.get(self, "authentication_key")

    @authentication_key.setter
    def authentication_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_key", value)

    @_builtins.property
    @pulumi.getter(name="bfdInterval")
    def bfd_interval(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        BFD Interval
        """
        return pulumi.get(self, "bfd_interval")

    @bfd_interval.setter
    def bfd_interval(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "bfd_interval", value)

    @_builtins.property
    @pulumi.getter(name="bfdMultiplier")
    def bfd_multiplier(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        BFD Multiplier
        """
        return pulumi.get(self, "bfd_multiplier")

    @bfd_multiplier.setter
    def bfd_multiplier(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "bfd_multiplier", value)

    @_builtins.property
    @pulumi.getter(name="bfdStatus")
    def bfd_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Gateway BFD status
        """
        return pulumi.get(self, "bfd_status")

    @bfd_status.setter
    def bfd_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bfd_status", value)

    @_builtins.property
    @pulumi.getter(name="bfdStatusUpdatedAt")
    def bfd_status_updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Date and time BFD status was updated
        """
        return pulumi.get(self, "bfd_status_updated_at")

    @bfd_status_updated_at.setter
    def bfd_status_updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bfd_status_updated_at", value)

    @_builtins.property
    @pulumi.getter(name="bgpAsn")
    def bgp_asn(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        BGP ASN
        """
        return pulumi.get(self, "bgp_asn")

    @bgp_asn.setter
    def bgp_asn(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "bgp_asn", value)

    @_builtins.property
    @pulumi.getter(name="bgpBaseCidr")
    def bgp_base_cidr(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        BGP base CIDR
        """
        return pulumi.get(self, "bgp_base_cidr")

    @bgp_base_cidr.setter
    def bgp_base_cidr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bgp_base_cidr", value)

    @_builtins.property
    @pulumi.getter(name="bgpCerCidr")
    def bgp_cer_cidr(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        BGP customer edge router CIDR
        """
        return pulumi.get(self, "bgp_cer_cidr")

    @bgp_cer_cidr.setter
    def bgp_cer_cidr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bgp_cer_cidr", value)

    @_builtins.property
    @pulumi.getter(name="bgpIbmAsn")
    def bgp_ibm_asn(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        IBM BGP ASN
        """
        return pulumi.get(self, "bgp_ibm_asn")

    @bgp_ibm_asn.setter
    def bgp_ibm_asn(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "bgp_ibm_asn", value)

    @_builtins.property
    @pulumi.getter(name="bgpIbmCidr")
    def bgp_ibm_cidr(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        BGP IBM CIDR
        """
        return pulumi.get(self, "bgp_ibm_cidr")

    @bgp_ibm_cidr.setter
    def bgp_ibm_cidr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bgp_ibm_cidr", value)

    @_builtins.property
    @pulumi.getter(name="bgpStatus")
    def bgp_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Gateway BGP status
        """
        return pulumi.get(self, "bgp_status")

    @bgp_status.setter
    def bgp_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bgp_status", value)

    @_builtins.property
    @pulumi.getter(name="bgpStatusUpdatedAt")
    def bgp_status_updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Date and time BGP status was updated
        """
        return pulumi.get(self, "bgp_status_updated_at")

    @bgp_status_updated_at.setter
    def bgp_status_updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bgp_status_updated_at", value)

    @_builtins.property
    @pulumi.getter(name="carrierName")
    def carrier_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Carrier name
        """
        return pulumi.get(self, "carrier_name")

    @carrier_name.setter
    def carrier_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "carrier_name", value)

    @_builtins.property
    @pulumi.getter(name="changeRequest")
    def change_request(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Changes pending approval for provider managed Direct Link Connect gateways
        """
        return pulumi.get(self, "change_request")

    @change_request.setter
    def change_request(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "change_request", value)

    @_builtins.property
    @pulumi.getter(name="completionNoticeRejectReason")
    def completion_notice_reject_reason(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Reason for completion notice rejection
        """
        return pulumi.get(self, "completion_notice_reject_reason")

    @completion_notice_reject_reason.setter
    def completion_notice_reject_reason(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "completion_notice_reject_reason", value)

    @_builtins.property
    @pulumi.getter(name="connectionMode")
    def connection_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of services this Gateway is attached to. Mode transit means this Gateway will be attached to Transit Gateway
        Service and direct means this Gateway will be attached to vpc or classic connection
        """
        return pulumi.get(self, "connection_mode")

    @connection_mode.setter
    def connection_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "connection_mode", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time resource was created
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN (Cloud Resource Name) of this gateway
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="crossConnectRouter")
    def cross_connect_router(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cross connect router
        """
        return pulumi.get(self, "cross_connect_router")

    @cross_connect_router.setter
    def cross_connect_router(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cross_connect_router", value)

    @_builtins.property
    @pulumi.getter(name="customerName")
    def customer_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Customer name
        """
        return pulumi.get(self, "customer_name")

    @customer_name.setter
    def customer_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "customer_name", value)

    @_builtins.property
    @pulumi.getter(name="defaultExportRouteFilter")
    def default_export_route_filter(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The default directional route filter action that applies to routes that do not match any directional route filters
        """
        return pulumi.get(self, "default_export_route_filter")

    @default_export_route_filter.setter
    def default_export_route_filter(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_export_route_filter", value)

    @_builtins.property
    @pulumi.getter(name="defaultImportRouteFilter")
    def default_import_route_filter(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The default directional route filter action that applies to routes that do not match any directional route filters
        """
        return pulumi.get(self, "default_import_route_filter")

    @default_import_route_filter.setter
    def default_import_route_filter(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_import_route_filter", value)

    @_builtins.property
    @pulumi.getter(name="dlGatewayActionId")
    def dl_gateway_action_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dl_gateway_action_id")

    @dl_gateway_action_id.setter
    def dl_gateway_action_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dl_gateway_action_id", value)

    @_builtins.property
    @pulumi.getter(name="exportRouteFilters")
    def export_route_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DlGatewayActionExportRouteFilterArgs']]]]:
        """
        List Export Route Filters for a Direct Link gateway
        """
        return pulumi.get(self, "export_route_filters")

    @export_route_filters.setter
    def export_route_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DlGatewayActionExportRouteFilterArgs']]]]):
        pulumi.set(self, "export_route_filters", value)

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Direct Link gateway identifier
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gateway", value)

    @_builtins.property
    @pulumi.getter(name="global")
    def global_(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Gateways with global routing (true) can connect to networks outside their associated region
        """
        return pulumi.get(self, "global_")

    @global_.setter
    def global_(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "global_", value)

    @_builtins.property
    @pulumi.getter(name="importRouteFilters")
    def import_route_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DlGatewayActionImportRouteFilterArgs']]]]:
        """
        List Import Route Filters for a Direct Link gateway
        """
        return pulumi.get(self, "import_route_filters")

    @import_route_filters.setter
    def import_route_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DlGatewayActionImportRouteFilterArgs']]]]):
        pulumi.set(self, "import_route_filters", value)

    @_builtins.property
    @pulumi.getter(name="linkStatus")
    def link_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Gateway link status
        """
        return pulumi.get(self, "link_status")

    @link_status.setter
    def link_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "link_status", value)

    @_builtins.property
    @pulumi.getter(name="linkStatusUpdatedAt")
    def link_status_updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Date and time Link status was updated
        """
        return pulumi.get(self, "link_status_updated_at")

    @link_status_updated_at.setter
    def link_status_updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "link_status_updated_at", value)

    @_builtins.property
    @pulumi.getter(name="loaRejectReason")
    def loa_reject_reason(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Loa reject reason
        """
        return pulumi.get(self, "loa_reject_reason")

    @loa_reject_reason.setter
    def loa_reject_reason(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "loa_reject_reason", value)

    @_builtins.property
    @pulumi.getter(name="locationDisplayName")
    def location_display_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Gateway location long name
        """
        return pulumi.get(self, "location_display_name")

    @location_display_name.setter
    def location_display_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "location_display_name", value)

    @_builtins.property
    @pulumi.getter(name="locationName")
    def location_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Gateway location
        """
        return pulumi.get(self, "location_name")

    @location_name.setter
    def location_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "location_name", value)

    @_builtins.property
    @pulumi.getter
    def metered(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Metered billing option
        """
        return pulumi.get(self, "metered")

    @metered.setter
    def metered(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "metered", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique user-defined name for this gateway
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="operationalStatus")
    def operational_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Gateway operational status
        """
        return pulumi.get(self, "operational_status")

    @operational_status.setter
    def operational_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "operational_status", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Gateway port
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter(name="providerApiManaged")
    def provider_api_managed(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether gateway was created through a provider portal
        """
        return pulumi.get(self, "provider_api_managed")

    @provider_api_managed.setter
    def provider_api_managed(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "provider_api_managed", value)

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        """
        return pulumi.get(self, "resource_controller_url")

    @resource_controller_url.setter
    def resource_controller_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_controller_url", value)

    @_builtins.property
    @pulumi.getter(name="resourceCrn")
    def resource_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The crn of the resource
        """
        return pulumi.get(self, "resource_crn")

    @resource_crn.setter
    def resource_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_crn", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Gateway resource group
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource group name in which resource is provisioned
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_name", value)

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_name", value)

    @_builtins.property
    @pulumi.getter(name="resourceStatus")
    def resource_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the resource
        """
        return pulumi.get(self, "resource_status")

    @resource_status.setter
    def resource_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_status", value)

    @_builtins.property
    @pulumi.getter(name="speedMbps")
    def speed_mbps(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Gateway speed in megabits per second
        """
        return pulumi.get(self, "speed_mbps")

    @speed_mbps.setter
    def speed_mbps(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "speed_mbps", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Tags for the direct link gateway
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['DlGatewayActionTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['DlGatewayActionTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Gateway type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        VLAN allocated for this gateway
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "vlan", value)


@pulumi.type_token("ibm:index/dlGatewayAction:DlGatewayAction")
class DlGatewayAction(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 as_prepends: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DlGatewayActionAsPrependArgs', 'DlGatewayActionAsPrependArgsDict']]]]] = None,
                 authentication_key: Optional[pulumi.Input[_builtins.str]] = None,
                 bfd_interval: Optional[pulumi.Input[_builtins.float]] = None,
                 bfd_multiplier: Optional[pulumi.Input[_builtins.float]] = None,
                 bgp_asn: Optional[pulumi.Input[_builtins.float]] = None,
                 bgp_base_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 bgp_cer_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 bgp_ibm_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 carrier_name: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 cross_connect_router: Optional[pulumi.Input[_builtins.str]] = None,
                 customer_name: Optional[pulumi.Input[_builtins.str]] = None,
                 default_export_route_filter: Optional[pulumi.Input[_builtins.str]] = None,
                 default_import_route_filter: Optional[pulumi.Input[_builtins.str]] = None,
                 dl_gateway_action_id: Optional[pulumi.Input[_builtins.str]] = None,
                 export_route_filters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DlGatewayActionExportRouteFilterArgs', 'DlGatewayActionExportRouteFilterArgsDict']]]]] = None,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 global_: Optional[pulumi.Input[_builtins.bool]] = None,
                 import_route_filters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DlGatewayActionImportRouteFilterArgs', 'DlGatewayActionImportRouteFilterArgsDict']]]]] = None,
                 loa_reject_reason: Optional[pulumi.Input[_builtins.str]] = None,
                 location_name: Optional[pulumi.Input[_builtins.str]] = None,
                 metered: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 speed_mbps: Optional[pulumi.Input[_builtins.float]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['DlGatewayActionTimeoutsArgs', 'DlGatewayActionTimeoutsArgsDict']]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a DlGatewayAction resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: customer action on provider call
        :param pulumi.Input[Sequence[pulumi.Input[Union['DlGatewayActionAsPrependArgs', 'DlGatewayActionAsPrependArgsDict']]]] as_prepends: List of AS Prepend configuration information
        :param pulumi.Input[_builtins.str] authentication_key: BGP MD5 authentication key
        :param pulumi.Input[_builtins.float] bfd_interval: BFD Interval
        :param pulumi.Input[_builtins.float] bfd_multiplier: BFD Multiplier
        :param pulumi.Input[_builtins.float] bgp_asn: BGP ASN
        :param pulumi.Input[_builtins.str] bgp_base_cidr: BGP base CIDR
        :param pulumi.Input[_builtins.str] bgp_cer_cidr: BGP customer edge router CIDR
        :param pulumi.Input[_builtins.str] bgp_ibm_cidr: BGP IBM CIDR
        :param pulumi.Input[_builtins.str] carrier_name: Carrier name
        :param pulumi.Input[_builtins.str] connection_mode: Type of services this Gateway is attached to. Mode transit means this Gateway will be attached to Transit Gateway
               Service and direct means this Gateway will be attached to vpc or classic connection
        :param pulumi.Input[_builtins.str] cross_connect_router: Cross connect router
        :param pulumi.Input[_builtins.str] customer_name: Customer name
        :param pulumi.Input[_builtins.str] default_export_route_filter: The default directional route filter action that applies to routes that do not match any directional route filters
        :param pulumi.Input[_builtins.str] default_import_route_filter: The default directional route filter action that applies to routes that do not match any directional route filters
        :param pulumi.Input[Sequence[pulumi.Input[Union['DlGatewayActionExportRouteFilterArgs', 'DlGatewayActionExportRouteFilterArgsDict']]]] export_route_filters: List Export Route Filters for a Direct Link gateway
        :param pulumi.Input[_builtins.str] gateway: The Direct Link gateway identifier
        :param pulumi.Input[_builtins.bool] global_: Gateways with global routing (true) can connect to networks outside their associated region
        :param pulumi.Input[Sequence[pulumi.Input[Union['DlGatewayActionImportRouteFilterArgs', 'DlGatewayActionImportRouteFilterArgsDict']]]] import_route_filters: List Import Route Filters for a Direct Link gateway
        :param pulumi.Input[_builtins.str] loa_reject_reason: Loa reject reason
        :param pulumi.Input[_builtins.str] location_name: Gateway location
        :param pulumi.Input[_builtins.bool] metered: Metered billing option
        :param pulumi.Input[_builtins.str] name: The unique user-defined name for this gateway
        :param pulumi.Input[_builtins.str] port: Gateway port
        :param pulumi.Input[_builtins.str] resource_group: Gateway resource group
        :param pulumi.Input[_builtins.float] speed_mbps: Gateway speed in megabits per second
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags for the direct link gateway
        :param pulumi.Input[_builtins.str] type: Gateway type
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DlGatewayActionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DlGatewayAction resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DlGatewayActionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DlGatewayActionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 as_prepends: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DlGatewayActionAsPrependArgs', 'DlGatewayActionAsPrependArgsDict']]]]] = None,
                 authentication_key: Optional[pulumi.Input[_builtins.str]] = None,
                 bfd_interval: Optional[pulumi.Input[_builtins.float]] = None,
                 bfd_multiplier: Optional[pulumi.Input[_builtins.float]] = None,
                 bgp_asn: Optional[pulumi.Input[_builtins.float]] = None,
                 bgp_base_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 bgp_cer_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 bgp_ibm_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 carrier_name: Optional[pulumi.Input[_builtins.str]] = None,
                 connection_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 cross_connect_router: Optional[pulumi.Input[_builtins.str]] = None,
                 customer_name: Optional[pulumi.Input[_builtins.str]] = None,
                 default_export_route_filter: Optional[pulumi.Input[_builtins.str]] = None,
                 default_import_route_filter: Optional[pulumi.Input[_builtins.str]] = None,
                 dl_gateway_action_id: Optional[pulumi.Input[_builtins.str]] = None,
                 export_route_filters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DlGatewayActionExportRouteFilterArgs', 'DlGatewayActionExportRouteFilterArgsDict']]]]] = None,
                 gateway: Optional[pulumi.Input[_builtins.str]] = None,
                 global_: Optional[pulumi.Input[_builtins.bool]] = None,
                 import_route_filters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DlGatewayActionImportRouteFilterArgs', 'DlGatewayActionImportRouteFilterArgsDict']]]]] = None,
                 loa_reject_reason: Optional[pulumi.Input[_builtins.str]] = None,
                 location_name: Optional[pulumi.Input[_builtins.str]] = None,
                 metered: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 speed_mbps: Optional[pulumi.Input[_builtins.float]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['DlGatewayActionTimeoutsArgs', 'DlGatewayActionTimeoutsArgsDict']]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DlGatewayActionArgs.__new__(DlGatewayActionArgs)

            if action is None and not opts.urn:
                raise TypeError("Missing required property 'action'")
            __props__.__dict__["action"] = action
            __props__.__dict__["as_prepends"] = as_prepends
            __props__.__dict__["authentication_key"] = None if authentication_key is None else pulumi.Output.secret(authentication_key)
            __props__.__dict__["bfd_interval"] = bfd_interval
            __props__.__dict__["bfd_multiplier"] = bfd_multiplier
            __props__.__dict__["bgp_asn"] = bgp_asn
            __props__.__dict__["bgp_base_cidr"] = bgp_base_cidr
            __props__.__dict__["bgp_cer_cidr"] = bgp_cer_cidr
            __props__.__dict__["bgp_ibm_cidr"] = bgp_ibm_cidr
            __props__.__dict__["carrier_name"] = carrier_name
            __props__.__dict__["connection_mode"] = connection_mode
            __props__.__dict__["cross_connect_router"] = cross_connect_router
            __props__.__dict__["customer_name"] = customer_name
            __props__.__dict__["default_export_route_filter"] = default_export_route_filter
            __props__.__dict__["default_import_route_filter"] = default_import_route_filter
            __props__.__dict__["dl_gateway_action_id"] = dl_gateway_action_id
            __props__.__dict__["export_route_filters"] = export_route_filters
            if gateway is None and not opts.urn:
                raise TypeError("Missing required property 'gateway'")
            __props__.__dict__["gateway"] = gateway
            __props__.__dict__["global_"] = global_
            __props__.__dict__["import_route_filters"] = import_route_filters
            __props__.__dict__["loa_reject_reason"] = loa_reject_reason
            __props__.__dict__["location_name"] = location_name
            __props__.__dict__["metered"] = metered
            __props__.__dict__["name"] = name
            __props__.__dict__["port"] = port
            __props__.__dict__["resource_group"] = resource_group
            __props__.__dict__["speed_mbps"] = speed_mbps
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["type"] = type
            __props__.__dict__["bfd_status"] = None
            __props__.__dict__["bfd_status_updated_at"] = None
            __props__.__dict__["bgp_ibm_asn"] = None
            __props__.__dict__["bgp_status"] = None
            __props__.__dict__["bgp_status_updated_at"] = None
            __props__.__dict__["change_request"] = None
            __props__.__dict__["completion_notice_reject_reason"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["link_status"] = None
            __props__.__dict__["link_status_updated_at"] = None
            __props__.__dict__["location_display_name"] = None
            __props__.__dict__["operational_status"] = None
            __props__.__dict__["provider_api_managed"] = None
            __props__.__dict__["resource_controller_url"] = None
            __props__.__dict__["resource_crn"] = None
            __props__.__dict__["resource_group_name"] = None
            __props__.__dict__["resource_name"] = None
            __props__.__dict__["resource_status"] = None
            __props__.__dict__["vlan"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["authenticationKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(DlGatewayAction, __self__).__init__(
            'ibm:index/dlGatewayAction:DlGatewayAction',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[_builtins.str]] = None,
            as_prepends: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DlGatewayActionAsPrependArgs', 'DlGatewayActionAsPrependArgsDict']]]]] = None,
            authentication_key: Optional[pulumi.Input[_builtins.str]] = None,
            bfd_interval: Optional[pulumi.Input[_builtins.float]] = None,
            bfd_multiplier: Optional[pulumi.Input[_builtins.float]] = None,
            bfd_status: Optional[pulumi.Input[_builtins.str]] = None,
            bfd_status_updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            bgp_asn: Optional[pulumi.Input[_builtins.float]] = None,
            bgp_base_cidr: Optional[pulumi.Input[_builtins.str]] = None,
            bgp_cer_cidr: Optional[pulumi.Input[_builtins.str]] = None,
            bgp_ibm_asn: Optional[pulumi.Input[_builtins.float]] = None,
            bgp_ibm_cidr: Optional[pulumi.Input[_builtins.str]] = None,
            bgp_status: Optional[pulumi.Input[_builtins.str]] = None,
            bgp_status_updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            carrier_name: Optional[pulumi.Input[_builtins.str]] = None,
            change_request: Optional[pulumi.Input[_builtins.str]] = None,
            completion_notice_reject_reason: Optional[pulumi.Input[_builtins.str]] = None,
            connection_mode: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            cross_connect_router: Optional[pulumi.Input[_builtins.str]] = None,
            customer_name: Optional[pulumi.Input[_builtins.str]] = None,
            default_export_route_filter: Optional[pulumi.Input[_builtins.str]] = None,
            default_import_route_filter: Optional[pulumi.Input[_builtins.str]] = None,
            dl_gateway_action_id: Optional[pulumi.Input[_builtins.str]] = None,
            export_route_filters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DlGatewayActionExportRouteFilterArgs', 'DlGatewayActionExportRouteFilterArgsDict']]]]] = None,
            gateway: Optional[pulumi.Input[_builtins.str]] = None,
            global_: Optional[pulumi.Input[_builtins.bool]] = None,
            import_route_filters: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DlGatewayActionImportRouteFilterArgs', 'DlGatewayActionImportRouteFilterArgsDict']]]]] = None,
            link_status: Optional[pulumi.Input[_builtins.str]] = None,
            link_status_updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            loa_reject_reason: Optional[pulumi.Input[_builtins.str]] = None,
            location_display_name: Optional[pulumi.Input[_builtins.str]] = None,
            location_name: Optional[pulumi.Input[_builtins.str]] = None,
            metered: Optional[pulumi.Input[_builtins.bool]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            operational_status: Optional[pulumi.Input[_builtins.str]] = None,
            port: Optional[pulumi.Input[_builtins.str]] = None,
            provider_api_managed: Optional[pulumi.Input[_builtins.bool]] = None,
            resource_controller_url: Optional[pulumi.Input[_builtins.str]] = None,
            resource_crn: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_name: Optional[pulumi.Input[_builtins.str]] = None,
            resource_name_: Optional[pulumi.Input[_builtins.str]] = None,
            resource_status: Optional[pulumi.Input[_builtins.str]] = None,
            speed_mbps: Optional[pulumi.Input[_builtins.float]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            timeouts: Optional[pulumi.Input[Union['DlGatewayActionTimeoutsArgs', 'DlGatewayActionTimeoutsArgsDict']]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            vlan: Optional[pulumi.Input[_builtins.float]] = None) -> 'DlGatewayAction':
        """
        Get an existing DlGatewayAction resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: customer action on provider call
        :param pulumi.Input[Sequence[pulumi.Input[Union['DlGatewayActionAsPrependArgs', 'DlGatewayActionAsPrependArgsDict']]]] as_prepends: List of AS Prepend configuration information
        :param pulumi.Input[_builtins.str] authentication_key: BGP MD5 authentication key
        :param pulumi.Input[_builtins.float] bfd_interval: BFD Interval
        :param pulumi.Input[_builtins.float] bfd_multiplier: BFD Multiplier
        :param pulumi.Input[_builtins.str] bfd_status: Gateway BFD status
        :param pulumi.Input[_builtins.str] bfd_status_updated_at: Date and time BFD status was updated
        :param pulumi.Input[_builtins.float] bgp_asn: BGP ASN
        :param pulumi.Input[_builtins.str] bgp_base_cidr: BGP base CIDR
        :param pulumi.Input[_builtins.str] bgp_cer_cidr: BGP customer edge router CIDR
        :param pulumi.Input[_builtins.float] bgp_ibm_asn: IBM BGP ASN
        :param pulumi.Input[_builtins.str] bgp_ibm_cidr: BGP IBM CIDR
        :param pulumi.Input[_builtins.str] bgp_status: Gateway BGP status
        :param pulumi.Input[_builtins.str] bgp_status_updated_at: Date and time BGP status was updated
        :param pulumi.Input[_builtins.str] carrier_name: Carrier name
        :param pulumi.Input[_builtins.str] change_request: Changes pending approval for provider managed Direct Link Connect gateways
        :param pulumi.Input[_builtins.str] completion_notice_reject_reason: Reason for completion notice rejection
        :param pulumi.Input[_builtins.str] connection_mode: Type of services this Gateway is attached to. Mode transit means this Gateway will be attached to Transit Gateway
               Service and direct means this Gateway will be attached to vpc or classic connection
        :param pulumi.Input[_builtins.str] created_at: The date and time resource was created
        :param pulumi.Input[_builtins.str] crn: The CRN (Cloud Resource Name) of this gateway
        :param pulumi.Input[_builtins.str] cross_connect_router: Cross connect router
        :param pulumi.Input[_builtins.str] customer_name: Customer name
        :param pulumi.Input[_builtins.str] default_export_route_filter: The default directional route filter action that applies to routes that do not match any directional route filters
        :param pulumi.Input[_builtins.str] default_import_route_filter: The default directional route filter action that applies to routes that do not match any directional route filters
        :param pulumi.Input[Sequence[pulumi.Input[Union['DlGatewayActionExportRouteFilterArgs', 'DlGatewayActionExportRouteFilterArgsDict']]]] export_route_filters: List Export Route Filters for a Direct Link gateway
        :param pulumi.Input[_builtins.str] gateway: The Direct Link gateway identifier
        :param pulumi.Input[_builtins.bool] global_: Gateways with global routing (true) can connect to networks outside their associated region
        :param pulumi.Input[Sequence[pulumi.Input[Union['DlGatewayActionImportRouteFilterArgs', 'DlGatewayActionImportRouteFilterArgsDict']]]] import_route_filters: List Import Route Filters for a Direct Link gateway
        :param pulumi.Input[_builtins.str] link_status: Gateway link status
        :param pulumi.Input[_builtins.str] link_status_updated_at: Date and time Link status was updated
        :param pulumi.Input[_builtins.str] loa_reject_reason: Loa reject reason
        :param pulumi.Input[_builtins.str] location_display_name: Gateway location long name
        :param pulumi.Input[_builtins.str] location_name: Gateway location
        :param pulumi.Input[_builtins.bool] metered: Metered billing option
        :param pulumi.Input[_builtins.str] name: The unique user-defined name for this gateway
        :param pulumi.Input[_builtins.str] operational_status: Gateway operational status
        :param pulumi.Input[_builtins.str] port: Gateway port
        :param pulumi.Input[_builtins.bool] provider_api_managed: Indicates whether gateway was created through a provider portal
        :param pulumi.Input[_builtins.str] resource_controller_url: The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        :param pulumi.Input[_builtins.str] resource_crn: The crn of the resource
        :param pulumi.Input[_builtins.str] resource_group: Gateway resource group
        :param pulumi.Input[_builtins.str] resource_group_name: The resource group name in which resource is provisioned
        :param pulumi.Input[_builtins.str] resource_name_: The name of the resource
        :param pulumi.Input[_builtins.str] resource_status: The status of the resource
        :param pulumi.Input[_builtins.float] speed_mbps: Gateway speed in megabits per second
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: Tags for the direct link gateway
        :param pulumi.Input[_builtins.str] type: Gateway type
        :param pulumi.Input[_builtins.float] vlan: VLAN allocated for this gateway
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DlGatewayActionState.__new__(_DlGatewayActionState)

        __props__.__dict__["action"] = action
        __props__.__dict__["as_prepends"] = as_prepends
        __props__.__dict__["authentication_key"] = authentication_key
        __props__.__dict__["bfd_interval"] = bfd_interval
        __props__.__dict__["bfd_multiplier"] = bfd_multiplier
        __props__.__dict__["bfd_status"] = bfd_status
        __props__.__dict__["bfd_status_updated_at"] = bfd_status_updated_at
        __props__.__dict__["bgp_asn"] = bgp_asn
        __props__.__dict__["bgp_base_cidr"] = bgp_base_cidr
        __props__.__dict__["bgp_cer_cidr"] = bgp_cer_cidr
        __props__.__dict__["bgp_ibm_asn"] = bgp_ibm_asn
        __props__.__dict__["bgp_ibm_cidr"] = bgp_ibm_cidr
        __props__.__dict__["bgp_status"] = bgp_status
        __props__.__dict__["bgp_status_updated_at"] = bgp_status_updated_at
        __props__.__dict__["carrier_name"] = carrier_name
        __props__.__dict__["change_request"] = change_request
        __props__.__dict__["completion_notice_reject_reason"] = completion_notice_reject_reason
        __props__.__dict__["connection_mode"] = connection_mode
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["crn"] = crn
        __props__.__dict__["cross_connect_router"] = cross_connect_router
        __props__.__dict__["customer_name"] = customer_name
        __props__.__dict__["default_export_route_filter"] = default_export_route_filter
        __props__.__dict__["default_import_route_filter"] = default_import_route_filter
        __props__.__dict__["dl_gateway_action_id"] = dl_gateway_action_id
        __props__.__dict__["export_route_filters"] = export_route_filters
        __props__.__dict__["gateway"] = gateway
        __props__.__dict__["global_"] = global_
        __props__.__dict__["import_route_filters"] = import_route_filters
        __props__.__dict__["link_status"] = link_status
        __props__.__dict__["link_status_updated_at"] = link_status_updated_at
        __props__.__dict__["loa_reject_reason"] = loa_reject_reason
        __props__.__dict__["location_display_name"] = location_display_name
        __props__.__dict__["location_name"] = location_name
        __props__.__dict__["metered"] = metered
        __props__.__dict__["name"] = name
        __props__.__dict__["operational_status"] = operational_status
        __props__.__dict__["port"] = port
        __props__.__dict__["provider_api_managed"] = provider_api_managed
        __props__.__dict__["resource_controller_url"] = resource_controller_url
        __props__.__dict__["resource_crn"] = resource_crn
        __props__.__dict__["resource_group"] = resource_group
        __props__.__dict__["resource_group_name"] = resource_group_name
        __props__.__dict__["resource_name"] = resource_name_
        __props__.__dict__["resource_status"] = resource_status
        __props__.__dict__["speed_mbps"] = speed_mbps
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["type"] = type
        __props__.__dict__["vlan"] = vlan
        return DlGatewayAction(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Output[_builtins.str]:
        """
        customer action on provider call
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="asPrepends")
    def as_prepends(self) -> pulumi.Output[Optional[Sequence['outputs.DlGatewayActionAsPrepend']]]:
        """
        List of AS Prepend configuration information
        """
        return pulumi.get(self, "as_prepends")

    @_builtins.property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        BGP MD5 authentication key
        """
        return pulumi.get(self, "authentication_key")

    @_builtins.property
    @pulumi.getter(name="bfdInterval")
    def bfd_interval(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        BFD Interval
        """
        return pulumi.get(self, "bfd_interval")

    @_builtins.property
    @pulumi.getter(name="bfdMultiplier")
    def bfd_multiplier(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        BFD Multiplier
        """
        return pulumi.get(self, "bfd_multiplier")

    @_builtins.property
    @pulumi.getter(name="bfdStatus")
    def bfd_status(self) -> pulumi.Output[_builtins.str]:
        """
        Gateway BFD status
        """
        return pulumi.get(self, "bfd_status")

    @_builtins.property
    @pulumi.getter(name="bfdStatusUpdatedAt")
    def bfd_status_updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Date and time BFD status was updated
        """
        return pulumi.get(self, "bfd_status_updated_at")

    @_builtins.property
    @pulumi.getter(name="bgpAsn")
    def bgp_asn(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        BGP ASN
        """
        return pulumi.get(self, "bgp_asn")

    @_builtins.property
    @pulumi.getter(name="bgpBaseCidr")
    def bgp_base_cidr(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        BGP base CIDR
        """
        return pulumi.get(self, "bgp_base_cidr")

    @_builtins.property
    @pulumi.getter(name="bgpCerCidr")
    def bgp_cer_cidr(self) -> pulumi.Output[_builtins.str]:
        """
        BGP customer edge router CIDR
        """
        return pulumi.get(self, "bgp_cer_cidr")

    @_builtins.property
    @pulumi.getter(name="bgpIbmAsn")
    def bgp_ibm_asn(self) -> pulumi.Output[_builtins.float]:
        """
        IBM BGP ASN
        """
        return pulumi.get(self, "bgp_ibm_asn")

    @_builtins.property
    @pulumi.getter(name="bgpIbmCidr")
    def bgp_ibm_cidr(self) -> pulumi.Output[_builtins.str]:
        """
        BGP IBM CIDR
        """
        return pulumi.get(self, "bgp_ibm_cidr")

    @_builtins.property
    @pulumi.getter(name="bgpStatus")
    def bgp_status(self) -> pulumi.Output[_builtins.str]:
        """
        Gateway BGP status
        """
        return pulumi.get(self, "bgp_status")

    @_builtins.property
    @pulumi.getter(name="bgpStatusUpdatedAt")
    def bgp_status_updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Date and time BGP status was updated
        """
        return pulumi.get(self, "bgp_status_updated_at")

    @_builtins.property
    @pulumi.getter(name="carrierName")
    def carrier_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Carrier name
        """
        return pulumi.get(self, "carrier_name")

    @_builtins.property
    @pulumi.getter(name="changeRequest")
    def change_request(self) -> pulumi.Output[_builtins.str]:
        """
        Changes pending approval for provider managed Direct Link Connect gateways
        """
        return pulumi.get(self, "change_request")

    @_builtins.property
    @pulumi.getter(name="completionNoticeRejectReason")
    def completion_notice_reject_reason(self) -> pulumi.Output[_builtins.str]:
        """
        Reason for completion notice rejection
        """
        return pulumi.get(self, "completion_notice_reject_reason")

    @_builtins.property
    @pulumi.getter(name="connectionMode")
    def connection_mode(self) -> pulumi.Output[_builtins.str]:
        """
        Type of services this Gateway is attached to. Mode transit means this Gateway will be attached to Transit Gateway
        Service and direct means this Gateway will be attached to vpc or classic connection
        """
        return pulumi.get(self, "connection_mode")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time resource was created
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The CRN (Cloud Resource Name) of this gateway
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="crossConnectRouter")
    def cross_connect_router(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Cross connect router
        """
        return pulumi.get(self, "cross_connect_router")

    @_builtins.property
    @pulumi.getter(name="customerName")
    def customer_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Customer name
        """
        return pulumi.get(self, "customer_name")

    @_builtins.property
    @pulumi.getter(name="defaultExportRouteFilter")
    def default_export_route_filter(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The default directional route filter action that applies to routes that do not match any directional route filters
        """
        return pulumi.get(self, "default_export_route_filter")

    @_builtins.property
    @pulumi.getter(name="defaultImportRouteFilter")
    def default_import_route_filter(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The default directional route filter action that applies to routes that do not match any directional route filters
        """
        return pulumi.get(self, "default_import_route_filter")

    @_builtins.property
    @pulumi.getter(name="dlGatewayActionId")
    def dl_gateway_action_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "dl_gateway_action_id")

    @_builtins.property
    @pulumi.getter(name="exportRouteFilters")
    def export_route_filters(self) -> pulumi.Output[Optional[Sequence['outputs.DlGatewayActionExportRouteFilter']]]:
        """
        List Export Route Filters for a Direct Link gateway
        """
        return pulumi.get(self, "export_route_filters")

    @_builtins.property
    @pulumi.getter
    def gateway(self) -> pulumi.Output[_builtins.str]:
        """
        The Direct Link gateway identifier
        """
        return pulumi.get(self, "gateway")

    @_builtins.property
    @pulumi.getter(name="global")
    def global_(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Gateways with global routing (true) can connect to networks outside their associated region
        """
        return pulumi.get(self, "global_")

    @_builtins.property
    @pulumi.getter(name="importRouteFilters")
    def import_route_filters(self) -> pulumi.Output[Optional[Sequence['outputs.DlGatewayActionImportRouteFilter']]]:
        """
        List Import Route Filters for a Direct Link gateway
        """
        return pulumi.get(self, "import_route_filters")

    @_builtins.property
    @pulumi.getter(name="linkStatus")
    def link_status(self) -> pulumi.Output[_builtins.str]:
        """
        Gateway link status
        """
        return pulumi.get(self, "link_status")

    @_builtins.property
    @pulumi.getter(name="linkStatusUpdatedAt")
    def link_status_updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Date and time Link status was updated
        """
        return pulumi.get(self, "link_status_updated_at")

    @_builtins.property
    @pulumi.getter(name="loaRejectReason")
    def loa_reject_reason(self) -> pulumi.Output[_builtins.str]:
        """
        Loa reject reason
        """
        return pulumi.get(self, "loa_reject_reason")

    @_builtins.property
    @pulumi.getter(name="locationDisplayName")
    def location_display_name(self) -> pulumi.Output[_builtins.str]:
        """
        Gateway location long name
        """
        return pulumi.get(self, "location_display_name")

    @_builtins.property
    @pulumi.getter(name="locationName")
    def location_name(self) -> pulumi.Output[_builtins.str]:
        """
        Gateway location
        """
        return pulumi.get(self, "location_name")

    @_builtins.property
    @pulumi.getter
    def metered(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Metered billing option
        """
        return pulumi.get(self, "metered")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The unique user-defined name for this gateway
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="operationalStatus")
    def operational_status(self) -> pulumi.Output[_builtins.str]:
        """
        Gateway operational status
        """
        return pulumi.get(self, "operational_status")

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Output[_builtins.str]:
        """
        Gateway port
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="providerApiManaged")
    def provider_api_managed(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether gateway was created through a provider portal
        """
        return pulumi.get(self, "provider_api_managed")

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> pulumi.Output[_builtins.str]:
        """
        The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        """
        return pulumi.get(self, "resource_controller_url")

    @_builtins.property
    @pulumi.getter(name="resourceCrn")
    def resource_crn(self) -> pulumi.Output[_builtins.str]:
        """
        The crn of the resource
        """
        return pulumi.get(self, "resource_crn")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Output[_builtins.str]:
        """
        Gateway resource group
        """
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Output[_builtins.str]:
        """
        The resource group name in which resource is provisioned
        """
        return pulumi.get(self, "resource_group_name")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceStatus")
    def resource_status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the resource
        """
        return pulumi.get(self, "resource_status")

    @_builtins.property
    @pulumi.getter(name="speedMbps")
    def speed_mbps(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Gateway speed in megabits per second
        """
        return pulumi.get(self, "speed_mbps")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Tags for the direct link gateway
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.DlGatewayActionTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Gateway type
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def vlan(self) -> pulumi.Output[_builtins.float]:
        """
        VLAN allocated for this gateway
        """
        return pulumi.get(self, "vlan")

