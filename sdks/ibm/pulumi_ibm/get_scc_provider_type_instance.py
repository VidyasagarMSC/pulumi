# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetSccProviderTypeInstanceResult',
    'AwaitableGetSccProviderTypeInstanceResult',
    'get_scc_provider_type_instance',
    'get_scc_provider_type_instance_output',
]

@pulumi.output_type
class GetSccProviderTypeInstanceResult:
    """
    A collection of values returned by getSccProviderTypeInstance.
    """
    def __init__(__self__, attributes=None, created_at=None, id=None, instance_id=None, name=None, provider_type_id=None, provider_type_instance_id=None, provider_type_instance_item_id=None, type=None, updated_at=None):
        if attributes and not isinstance(attributes, dict):
            raise TypeError("Expected argument 'attributes' to be a dict")
        pulumi.set(__self__, "attributes", attributes)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provider_type_id and not isinstance(provider_type_id, str):
            raise TypeError("Expected argument 'provider_type_id' to be a str")
        pulumi.set(__self__, "provider_type_id", provider_type_id)
        if provider_type_instance_id and not isinstance(provider_type_instance_id, str):
            raise TypeError("Expected argument 'provider_type_instance_id' to be a str")
        pulumi.set(__self__, "provider_type_instance_id", provider_type_instance_id)
        if provider_type_instance_item_id and not isinstance(provider_type_instance_item_id, str):
            raise TypeError("Expected argument 'provider_type_instance_item_id' to be a str")
        pulumi.set(__self__, "provider_type_instance_item_id", provider_type_instance_item_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def attributes(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "attributes")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="providerTypeId")
    def provider_type_id(self) -> _builtins.str:
        return pulumi.get(self, "provider_type_id")

    @_builtins.property
    @pulumi.getter(name="providerTypeInstanceId")
    def provider_type_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "provider_type_instance_id")

    @_builtins.property
    @pulumi.getter(name="providerTypeInstanceItemId")
    def provider_type_instance_item_id(self) -> _builtins.str:
        return pulumi.get(self, "provider_type_instance_item_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")


class AwaitableGetSccProviderTypeInstanceResult(GetSccProviderTypeInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSccProviderTypeInstanceResult(
            attributes=self.attributes,
            created_at=self.created_at,
            id=self.id,
            instance_id=self.instance_id,
            name=self.name,
            provider_type_id=self.provider_type_id,
            provider_type_instance_id=self.provider_type_instance_id,
            provider_type_instance_item_id=self.provider_type_instance_item_id,
            type=self.type,
            updated_at=self.updated_at)


def get_scc_provider_type_instance(id: Optional[_builtins.str] = None,
                                   instance_id: Optional[_builtins.str] = None,
                                   provider_type_id: Optional[_builtins.str] = None,
                                   provider_type_instance_id: Optional[_builtins.str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSccProviderTypeInstanceResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['providerTypeId'] = provider_type_id
    __args__['providerTypeInstanceId'] = provider_type_instance_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSccProviderTypeInstance:getSccProviderTypeInstance', __args__, opts=opts, typ=GetSccProviderTypeInstanceResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSccProviderTypeInstanceResult(
        attributes=pulumi.get(__ret__, 'attributes'),
        created_at=pulumi.get(__ret__, 'created_at'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        name=pulumi.get(__ret__, 'name'),
        provider_type_id=pulumi.get(__ret__, 'provider_type_id'),
        provider_type_instance_id=pulumi.get(__ret__, 'provider_type_instance_id'),
        provider_type_instance_item_id=pulumi.get(__ret__, 'provider_type_instance_item_id'),
        type=pulumi.get(__ret__, 'type'),
        updated_at=pulumi.get(__ret__, 'updated_at'))
def get_scc_provider_type_instance_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                          instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                          provider_type_id: Optional[pulumi.Input[_builtins.str]] = None,
                                          provider_type_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSccProviderTypeInstanceResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['providerTypeId'] = provider_type_id
    __args__['providerTypeInstanceId'] = provider_type_instance_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSccProviderTypeInstance:getSccProviderTypeInstance', __args__, opts=opts, typ=GetSccProviderTypeInstanceResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSccProviderTypeInstanceResult(
        attributes=pulumi.get(__response__, 'attributes'),
        created_at=pulumi.get(__response__, 'created_at'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        name=pulumi.get(__response__, 'name'),
        provider_type_id=pulumi.get(__response__, 'provider_type_id'),
        provider_type_instance_id=pulumi.get(__response__, 'provider_type_instance_id'),
        provider_type_instance_item_id=pulumi.get(__response__, 'provider_type_instance_item_id'),
        type=pulumi.get(__response__, 'type'),
        updated_at=pulumi.get(__response__, 'updated_at')))
