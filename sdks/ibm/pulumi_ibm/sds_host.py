# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SdsHostArgs', 'SdsHost']

@pulumi.input_type
class SdsHostArgs:
    def __init__(__self__, *,
                 nqn: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 sds_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 sds_host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['SdsHostVolumeMappingArgs']]]] = None):
        """
        The set of arguments for constructing a SdsHost resource.
        :param pulumi.Input[_builtins.str] nqn: The NQN (NVMe Qualified Name) as configured on the initiator (compute/host) accessing the storage.
        :param pulumi.Input[_builtins.str] name: Unique name of the host.
        :param pulumi.Input[_builtins.str] sds_endpoint: The endpoint to use for operations
        :param pulumi.Input[Sequence[pulumi.Input['SdsHostVolumeMappingArgs']]] volume_mappings: The host-to-volume map.
        """
        pulumi.set(__self__, "nqn", nqn)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if sds_endpoint is not None:
            pulumi.set(__self__, "sds_endpoint", sds_endpoint)
        if sds_host_id is not None:
            pulumi.set(__self__, "sds_host_id", sds_host_id)
        if volume_mappings is not None:
            pulumi.set(__self__, "volume_mappings", volume_mappings)

    @_builtins.property
    @pulumi.getter
    def nqn(self) -> pulumi.Input[_builtins.str]:
        """
        The NQN (NVMe Qualified Name) as configured on the initiator (compute/host) accessing the storage.
        """
        return pulumi.get(self, "nqn")

    @nqn.setter
    def nqn(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "nqn", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique name of the host.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="sdsEndpoint")
    def sds_endpoint(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The endpoint to use for operations
        """
        return pulumi.get(self, "sds_endpoint")

    @sds_endpoint.setter
    def sds_endpoint(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sds_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="sdsHostId")
    def sds_host_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "sds_host_id")

    @sds_host_id.setter
    def sds_host_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sds_host_id", value)

    @_builtins.property
    @pulumi.getter(name="volumeMappings")
    def volume_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdsHostVolumeMappingArgs']]]]:
        """
        The host-to-volume map.
        """
        return pulumi.get(self, "volume_mappings")

    @volume_mappings.setter
    def volume_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdsHostVolumeMappingArgs']]]]):
        pulumi.set(self, "volume_mappings", value)


@pulumi.input_type
class _SdsHostState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 nqn: Optional[pulumi.Input[_builtins.str]] = None,
                 sds_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 sds_host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['SdsHostVolumeMappingArgs']]]] = None):
        """
        Input properties used for looking up and filtering SdsHost resources.
        :param pulumi.Input[_builtins.str] created_at: The date and time when the resource was created.
        :param pulumi.Input[_builtins.str] href: The URL for this resource.
        :param pulumi.Input[_builtins.str] name: Unique name of the host.
        :param pulumi.Input[_builtins.str] nqn: The NQN (NVMe Qualified Name) as configured on the initiator (compute/host) accessing the storage.
        :param pulumi.Input[_builtins.str] sds_endpoint: The endpoint to use for operations
        :param pulumi.Input[Sequence[pulumi.Input['SdsHostVolumeMappingArgs']]] volume_mappings: The host-to-volume map.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nqn is not None:
            pulumi.set(__self__, "nqn", nqn)
        if sds_endpoint is not None:
            pulumi.set(__self__, "sds_endpoint", sds_endpoint)
        if sds_host_id is not None:
            pulumi.set(__self__, "sds_host_id", sds_host_id)
        if volume_mappings is not None:
            pulumi.set(__self__, "volume_mappings", volume_mappings)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time when the resource was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL for this resource.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique name of the host.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def nqn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The NQN (NVMe Qualified Name) as configured on the initiator (compute/host) accessing the storage.
        """
        return pulumi.get(self, "nqn")

    @nqn.setter
    def nqn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nqn", value)

    @_builtins.property
    @pulumi.getter(name="sdsEndpoint")
    def sds_endpoint(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The endpoint to use for operations
        """
        return pulumi.get(self, "sds_endpoint")

    @sds_endpoint.setter
    def sds_endpoint(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sds_endpoint", value)

    @_builtins.property
    @pulumi.getter(name="sdsHostId")
    def sds_host_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "sds_host_id")

    @sds_host_id.setter
    def sds_host_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sds_host_id", value)

    @_builtins.property
    @pulumi.getter(name="volumeMappings")
    def volume_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdsHostVolumeMappingArgs']]]]:
        """
        The host-to-volume map.
        """
        return pulumi.get(self, "volume_mappings")

    @volume_mappings.setter
    def volume_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdsHostVolumeMappingArgs']]]]):
        pulumi.set(self, "volume_mappings", value)


@pulumi.type_token("ibm:index/sdsHost:SdsHost")
class SdsHost(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 nqn: Optional[pulumi.Input[_builtins.str]] = None,
                 sds_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 sds_host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SdsHostVolumeMappingArgs', 'SdsHostVolumeMappingArgsDict']]]]] = None,
                 __props__=None):
        """
        Create a SdsHost resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: Unique name of the host.
        :param pulumi.Input[_builtins.str] nqn: The NQN (NVMe Qualified Name) as configured on the initiator (compute/host) accessing the storage.
        :param pulumi.Input[_builtins.str] sds_endpoint: The endpoint to use for operations
        :param pulumi.Input[Sequence[pulumi.Input[Union['SdsHostVolumeMappingArgs', 'SdsHostVolumeMappingArgsDict']]]] volume_mappings: The host-to-volume map.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SdsHostArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SdsHost resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SdsHostArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SdsHostArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 nqn: Optional[pulumi.Input[_builtins.str]] = None,
                 sds_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 sds_host_id: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SdsHostVolumeMappingArgs', 'SdsHostVolumeMappingArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SdsHostArgs.__new__(SdsHostArgs)

            __props__.__dict__["name"] = name
            if nqn is None and not opts.urn:
                raise TypeError("Missing required property 'nqn'")
            __props__.__dict__["nqn"] = nqn
            __props__.__dict__["sds_endpoint"] = sds_endpoint
            __props__.__dict__["sds_host_id"] = sds_host_id
            __props__.__dict__["volume_mappings"] = volume_mappings
            __props__.__dict__["created_at"] = None
            __props__.__dict__["href"] = None
        super(SdsHost, __self__).__init__(
            'ibm:index/sdsHost:SdsHost',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            nqn: Optional[pulumi.Input[_builtins.str]] = None,
            sds_endpoint: Optional[pulumi.Input[_builtins.str]] = None,
            sds_host_id: Optional[pulumi.Input[_builtins.str]] = None,
            volume_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SdsHostVolumeMappingArgs', 'SdsHostVolumeMappingArgsDict']]]]] = None) -> 'SdsHost':
        """
        Get an existing SdsHost resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] created_at: The date and time when the resource was created.
        :param pulumi.Input[_builtins.str] href: The URL for this resource.
        :param pulumi.Input[_builtins.str] name: Unique name of the host.
        :param pulumi.Input[_builtins.str] nqn: The NQN (NVMe Qualified Name) as configured on the initiator (compute/host) accessing the storage.
        :param pulumi.Input[_builtins.str] sds_endpoint: The endpoint to use for operations
        :param pulumi.Input[Sequence[pulumi.Input[Union['SdsHostVolumeMappingArgs', 'SdsHostVolumeMappingArgsDict']]]] volume_mappings: The host-to-volume map.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SdsHostState.__new__(_SdsHostState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["href"] = href
        __props__.__dict__["name"] = name
        __props__.__dict__["nqn"] = nqn
        __props__.__dict__["sds_endpoint"] = sds_endpoint
        __props__.__dict__["sds_host_id"] = sds_host_id
        __props__.__dict__["volume_mappings"] = volume_mappings
        return SdsHost(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time when the resource was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        The URL for this resource.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Unique name of the host.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def nqn(self) -> pulumi.Output[_builtins.str]:
        """
        The NQN (NVMe Qualified Name) as configured on the initiator (compute/host) accessing the storage.
        """
        return pulumi.get(self, "nqn")

    @_builtins.property
    @pulumi.getter(name="sdsEndpoint")
    def sds_endpoint(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The endpoint to use for operations
        """
        return pulumi.get(self, "sds_endpoint")

    @_builtins.property
    @pulumi.getter(name="sdsHostId")
    def sds_host_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "sds_host_id")

    @_builtins.property
    @pulumi.getter(name="volumeMappings")
    def volume_mappings(self) -> pulumi.Output[Optional[Sequence['outputs.SdsHostVolumeMapping']]]:
        """
        The host-to-volume map.
        """
        return pulumi.get(self, "volume_mappings")

