# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetLogsDashboardResult',
    'AwaitableGetLogsDashboardResult',
    'get_logs_dashboard',
    'get_logs_dashboard_output',
]

@pulumi.output_type
class GetLogsDashboardResult:
    """
    A collection of values returned by getLogsDashboard.
    """
    def __init__(__self__, absolute_time_frames=None, annotations=None, dashboard_id=None, description=None, endpoint_type=None, falses=None, filters=None, five_minutes=None, folder_ids=None, folder_paths=None, href=None, id=None, instance_id=None, layouts=None, name=None, region=None, relative_time_frame=None, two_minutes=None, variables=None):
        if absolute_time_frames and not isinstance(absolute_time_frames, list):
            raise TypeError("Expected argument 'absolute_time_frames' to be a list")
        pulumi.set(__self__, "absolute_time_frames", absolute_time_frames)
        if annotations and not isinstance(annotations, list):
            raise TypeError("Expected argument 'annotations' to be a list")
        pulumi.set(__self__, "annotations", annotations)
        if dashboard_id and not isinstance(dashboard_id, str):
            raise TypeError("Expected argument 'dashboard_id' to be a str")
        pulumi.set(__self__, "dashboard_id", dashboard_id)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if endpoint_type and not isinstance(endpoint_type, str):
            raise TypeError("Expected argument 'endpoint_type' to be a str")
        pulumi.set(__self__, "endpoint_type", endpoint_type)
        if falses and not isinstance(falses, list):
            raise TypeError("Expected argument 'falses' to be a list")
        pulumi.set(__self__, "falses", falses)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if five_minutes and not isinstance(five_minutes, list):
            raise TypeError("Expected argument 'five_minutes' to be a list")
        pulumi.set(__self__, "five_minutes", five_minutes)
        if folder_ids and not isinstance(folder_ids, list):
            raise TypeError("Expected argument 'folder_ids' to be a list")
        pulumi.set(__self__, "folder_ids", folder_ids)
        if folder_paths and not isinstance(folder_paths, list):
            raise TypeError("Expected argument 'folder_paths' to be a list")
        pulumi.set(__self__, "folder_paths", folder_paths)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if layouts and not isinstance(layouts, list):
            raise TypeError("Expected argument 'layouts' to be a list")
        pulumi.set(__self__, "layouts", layouts)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if relative_time_frame and not isinstance(relative_time_frame, str):
            raise TypeError("Expected argument 'relative_time_frame' to be a str")
        pulumi.set(__self__, "relative_time_frame", relative_time_frame)
        if two_minutes and not isinstance(two_minutes, list):
            raise TypeError("Expected argument 'two_minutes' to be a list")
        pulumi.set(__self__, "two_minutes", two_minutes)
        if variables and not isinstance(variables, list):
            raise TypeError("Expected argument 'variables' to be a list")
        pulumi.set(__self__, "variables", variables)

    @_builtins.property
    @pulumi.getter(name="absoluteTimeFrames")
    def absolute_time_frames(self) -> Sequence['outputs.GetLogsDashboardAbsoluteTimeFrameResult']:
        return pulumi.get(self, "absolute_time_frames")

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Sequence['outputs.GetLogsDashboardAnnotationResult']:
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="dashboardId")
    def dashboard_id(self) -> _builtins.str:
        return pulumi.get(self, "dashboard_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter
    def falses(self) -> Sequence['outputs.GetLogsDashboardFalseResult']:
        return pulumi.get(self, "falses")

    @_builtins.property
    @pulumi.getter
    def filters(self) -> Sequence['outputs.GetLogsDashboardFilterResult']:
        return pulumi.get(self, "filters")

    @_builtins.property
    @pulumi.getter(name="fiveMinutes")
    def five_minutes(self) -> Sequence['outputs.GetLogsDashboardFiveMinuteResult']:
        return pulumi.get(self, "five_minutes")

    @_builtins.property
    @pulumi.getter(name="folderIds")
    def folder_ids(self) -> Sequence['outputs.GetLogsDashboardFolderIdResult']:
        return pulumi.get(self, "folder_ids")

    @_builtins.property
    @pulumi.getter(name="folderPaths")
    def folder_paths(self) -> Sequence['outputs.GetLogsDashboardFolderPathResult']:
        return pulumi.get(self, "folder_paths")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def layouts(self) -> Sequence['outputs.GetLogsDashboardLayoutResult']:
        return pulumi.get(self, "layouts")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="relativeTimeFrame")
    def relative_time_frame(self) -> _builtins.str:
        return pulumi.get(self, "relative_time_frame")

    @_builtins.property
    @pulumi.getter(name="twoMinutes")
    def two_minutes(self) -> Sequence['outputs.GetLogsDashboardTwoMinuteResult']:
        return pulumi.get(self, "two_minutes")

    @_builtins.property
    @pulumi.getter
    def variables(self) -> Sequence['outputs.GetLogsDashboardVariableResult']:
        return pulumi.get(self, "variables")


class AwaitableGetLogsDashboardResult(GetLogsDashboardResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLogsDashboardResult(
            absolute_time_frames=self.absolute_time_frames,
            annotations=self.annotations,
            dashboard_id=self.dashboard_id,
            description=self.description,
            endpoint_type=self.endpoint_type,
            falses=self.falses,
            filters=self.filters,
            five_minutes=self.five_minutes,
            folder_ids=self.folder_ids,
            folder_paths=self.folder_paths,
            href=self.href,
            id=self.id,
            instance_id=self.instance_id,
            layouts=self.layouts,
            name=self.name,
            region=self.region,
            relative_time_frame=self.relative_time_frame,
            two_minutes=self.two_minutes,
            variables=self.variables)


def get_logs_dashboard(dashboard_id: Optional[_builtins.str] = None,
                       endpoint_type: Optional[_builtins.str] = None,
                       id: Optional[_builtins.str] = None,
                       instance_id: Optional[_builtins.str] = None,
                       region: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLogsDashboardResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['dashboardId'] = dashboard_id
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getLogsDashboard:getLogsDashboard', __args__, opts=opts, typ=GetLogsDashboardResult, package_ref=_utilities.get_package()).value

    return AwaitableGetLogsDashboardResult(
        absolute_time_frames=pulumi.get(__ret__, 'absolute_time_frames'),
        annotations=pulumi.get(__ret__, 'annotations'),
        dashboard_id=pulumi.get(__ret__, 'dashboard_id'),
        description=pulumi.get(__ret__, 'description'),
        endpoint_type=pulumi.get(__ret__, 'endpoint_type'),
        falses=pulumi.get(__ret__, 'falses'),
        filters=pulumi.get(__ret__, 'filters'),
        five_minutes=pulumi.get(__ret__, 'five_minutes'),
        folder_ids=pulumi.get(__ret__, 'folder_ids'),
        folder_paths=pulumi.get(__ret__, 'folder_paths'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        layouts=pulumi.get(__ret__, 'layouts'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        relative_time_frame=pulumi.get(__ret__, 'relative_time_frame'),
        two_minutes=pulumi.get(__ret__, 'two_minutes'),
        variables=pulumi.get(__ret__, 'variables'))
def get_logs_dashboard_output(dashboard_id: Optional[pulumi.Input[_builtins.str]] = None,
                              endpoint_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                              region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetLogsDashboardResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['dashboardId'] = dashboard_id
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getLogsDashboard:getLogsDashboard', __args__, opts=opts, typ=GetLogsDashboardResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetLogsDashboardResult(
        absolute_time_frames=pulumi.get(__response__, 'absolute_time_frames'),
        annotations=pulumi.get(__response__, 'annotations'),
        dashboard_id=pulumi.get(__response__, 'dashboard_id'),
        description=pulumi.get(__response__, 'description'),
        endpoint_type=pulumi.get(__response__, 'endpoint_type'),
        falses=pulumi.get(__response__, 'falses'),
        filters=pulumi.get(__response__, 'filters'),
        five_minutes=pulumi.get(__response__, 'five_minutes'),
        folder_ids=pulumi.get(__response__, 'folder_ids'),
        folder_paths=pulumi.get(__response__, 'folder_paths'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        layouts=pulumi.get(__response__, 'layouts'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        relative_time_frame=pulumi.get(__response__, 'relative_time_frame'),
        two_minutes=pulumi.get(__response__, 'two_minutes'),
        variables=pulumi.get(__response__, 'variables')))
