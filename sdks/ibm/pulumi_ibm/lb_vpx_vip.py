# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['LbVpxVipArgs', 'LbVpxVip']

@pulumi.input_type
class LbVpxVipArgs:
    def __init__(__self__, *,
                 load_balancing_method: pulumi.Input[_builtins.str],
                 nad_controller_id: pulumi.Input[_builtins.float],
                 source_port: pulumi.Input[_builtins.float],
                 type: pulumi.Input[_builtins.str],
                 virtual_ip_address: pulumi.Input[_builtins.str],
                 lb_vpx_vip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 persistence: Optional[pulumi.Input[_builtins.str]] = None,
                 security_certificate_id: Optional[pulumi.Input[_builtins.float]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a LbVpxVip resource.
        :param pulumi.Input[_builtins.str] load_balancing_method: Load balancing method
        :param pulumi.Input[_builtins.float] nad_controller_id: NAD controller ID
        :param pulumi.Input[_builtins.float] source_port: Source Port number
        :param pulumi.Input[_builtins.str] type: Type
        :param pulumi.Input[_builtins.str] virtual_ip_address: Virtual IP address
        :param pulumi.Input[_builtins.str] name: Name
        :param pulumi.Input[_builtins.str] persistence: Persistance value
        :param pulumi.Input[_builtins.float] security_certificate_id: security certificate ID
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        """
        pulumi.set(__self__, "load_balancing_method", load_balancing_method)
        pulumi.set(__self__, "nad_controller_id", nad_controller_id)
        pulumi.set(__self__, "source_port", source_port)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "virtual_ip_address", virtual_ip_address)
        if lb_vpx_vip_id is not None:
            pulumi.set(__self__, "lb_vpx_vip_id", lb_vpx_vip_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)
        if security_certificate_id is not None:
            pulumi.set(__self__, "security_certificate_id", security_certificate_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="loadBalancingMethod")
    def load_balancing_method(self) -> pulumi.Input[_builtins.str]:
        """
        Load balancing method
        """
        return pulumi.get(self, "load_balancing_method")

    @load_balancing_method.setter
    def load_balancing_method(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "load_balancing_method", value)

    @_builtins.property
    @pulumi.getter(name="nadControllerId")
    def nad_controller_id(self) -> pulumi.Input[_builtins.float]:
        """
        NAD controller ID
        """
        return pulumi.get(self, "nad_controller_id")

    @nad_controller_id.setter
    def nad_controller_id(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "nad_controller_id", value)

    @_builtins.property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> pulumi.Input[_builtins.float]:
        """
        Source Port number
        """
        return pulumi.get(self, "source_port")

    @source_port.setter
    def source_port(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "source_port", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="virtualIpAddress")
    def virtual_ip_address(self) -> pulumi.Input[_builtins.str]:
        """
        Virtual IP address
        """
        return pulumi.get(self, "virtual_ip_address")

    @virtual_ip_address.setter
    def virtual_ip_address(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "virtual_ip_address", value)

    @_builtins.property
    @pulumi.getter(name="lbVpxVipId")
    def lb_vpx_vip_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "lb_vpx_vip_id")

    @lb_vpx_vip_id.setter
    def lb_vpx_vip_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lb_vpx_vip_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def persistence(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Persistance value
        """
        return pulumi.get(self, "persistence")

    @persistence.setter
    def persistence(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "persistence", value)

    @_builtins.property
    @pulumi.getter(name="securityCertificateId")
    def security_certificate_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        security certificate ID
        """
        return pulumi.get(self, "security_certificate_id")

    @security_certificate_id.setter
    def security_certificate_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "security_certificate_id", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _LbVpxVipState:
    def __init__(__self__, *,
                 lb_vpx_vip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 load_balancing_method: Optional[pulumi.Input[_builtins.str]] = None,
                 nad_controller_id: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 persistence: Optional[pulumi.Input[_builtins.str]] = None,
                 security_certificate_id: Optional[pulumi.Input[_builtins.float]] = None,
                 source_port: Optional[pulumi.Input[_builtins.float]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 virtual_ip_address: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering LbVpxVip resources.
        :param pulumi.Input[_builtins.str] load_balancing_method: Load balancing method
        :param pulumi.Input[_builtins.float] nad_controller_id: NAD controller ID
        :param pulumi.Input[_builtins.str] name: Name
        :param pulumi.Input[_builtins.str] persistence: Persistance value
        :param pulumi.Input[_builtins.float] security_certificate_id: security certificate ID
        :param pulumi.Input[_builtins.float] source_port: Source Port number
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        :param pulumi.Input[_builtins.str] type: Type
        :param pulumi.Input[_builtins.str] virtual_ip_address: Virtual IP address
        """
        if lb_vpx_vip_id is not None:
            pulumi.set(__self__, "lb_vpx_vip_id", lb_vpx_vip_id)
        if load_balancing_method is not None:
            pulumi.set(__self__, "load_balancing_method", load_balancing_method)
        if nad_controller_id is not None:
            pulumi.set(__self__, "nad_controller_id", nad_controller_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)
        if security_certificate_id is not None:
            pulumi.set(__self__, "security_certificate_id", security_certificate_id)
        if source_port is not None:
            pulumi.set(__self__, "source_port", source_port)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if virtual_ip_address is not None:
            pulumi.set(__self__, "virtual_ip_address", virtual_ip_address)

    @_builtins.property
    @pulumi.getter(name="lbVpxVipId")
    def lb_vpx_vip_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "lb_vpx_vip_id")

    @lb_vpx_vip_id.setter
    def lb_vpx_vip_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lb_vpx_vip_id", value)

    @_builtins.property
    @pulumi.getter(name="loadBalancingMethod")
    def load_balancing_method(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Load balancing method
        """
        return pulumi.get(self, "load_balancing_method")

    @load_balancing_method.setter
    def load_balancing_method(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "load_balancing_method", value)

    @_builtins.property
    @pulumi.getter(name="nadControllerId")
    def nad_controller_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        NAD controller ID
        """
        return pulumi.get(self, "nad_controller_id")

    @nad_controller_id.setter
    def nad_controller_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "nad_controller_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def persistence(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Persistance value
        """
        return pulumi.get(self, "persistence")

    @persistence.setter
    def persistence(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "persistence", value)

    @_builtins.property
    @pulumi.getter(name="securityCertificateId")
    def security_certificate_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        security certificate ID
        """
        return pulumi.get(self, "security_certificate_id")

    @security_certificate_id.setter
    def security_certificate_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "security_certificate_id", value)

    @_builtins.property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Source Port number
        """
        return pulumi.get(self, "source_port")

    @source_port.setter
    def source_port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "source_port", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="virtualIpAddress")
    def virtual_ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Virtual IP address
        """
        return pulumi.get(self, "virtual_ip_address")

    @virtual_ip_address.setter
    def virtual_ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "virtual_ip_address", value)


@pulumi.type_token("ibm:index/lbVpxVip:LbVpxVip")
class LbVpxVip(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 lb_vpx_vip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 load_balancing_method: Optional[pulumi.Input[_builtins.str]] = None,
                 nad_controller_id: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 persistence: Optional[pulumi.Input[_builtins.str]] = None,
                 security_certificate_id: Optional[pulumi.Input[_builtins.float]] = None,
                 source_port: Optional[pulumi.Input[_builtins.float]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 virtual_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a LbVpxVip resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] load_balancing_method: Load balancing method
        :param pulumi.Input[_builtins.float] nad_controller_id: NAD controller ID
        :param pulumi.Input[_builtins.str] name: Name
        :param pulumi.Input[_builtins.str] persistence: Persistance value
        :param pulumi.Input[_builtins.float] security_certificate_id: security certificate ID
        :param pulumi.Input[_builtins.float] source_port: Source Port number
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        :param pulumi.Input[_builtins.str] type: Type
        :param pulumi.Input[_builtins.str] virtual_ip_address: Virtual IP address
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LbVpxVipArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a LbVpxVip resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LbVpxVipArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LbVpxVipArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 lb_vpx_vip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 load_balancing_method: Optional[pulumi.Input[_builtins.str]] = None,
                 nad_controller_id: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 persistence: Optional[pulumi.Input[_builtins.str]] = None,
                 security_certificate_id: Optional[pulumi.Input[_builtins.float]] = None,
                 source_port: Optional[pulumi.Input[_builtins.float]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 virtual_ip_address: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LbVpxVipArgs.__new__(LbVpxVipArgs)

            __props__.__dict__["lb_vpx_vip_id"] = lb_vpx_vip_id
            if load_balancing_method is None and not opts.urn:
                raise TypeError("Missing required property 'load_balancing_method'")
            __props__.__dict__["load_balancing_method"] = load_balancing_method
            if nad_controller_id is None and not opts.urn:
                raise TypeError("Missing required property 'nad_controller_id'")
            __props__.__dict__["nad_controller_id"] = nad_controller_id
            __props__.__dict__["name"] = name
            __props__.__dict__["persistence"] = persistence
            __props__.__dict__["security_certificate_id"] = security_certificate_id
            if source_port is None and not opts.urn:
                raise TypeError("Missing required property 'source_port'")
            __props__.__dict__["source_port"] = source_port
            __props__.__dict__["tags"] = tags
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if virtual_ip_address is None and not opts.urn:
                raise TypeError("Missing required property 'virtual_ip_address'")
            __props__.__dict__["virtual_ip_address"] = virtual_ip_address
        super(LbVpxVip, __self__).__init__(
            'ibm:index/lbVpxVip:LbVpxVip',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            lb_vpx_vip_id: Optional[pulumi.Input[_builtins.str]] = None,
            load_balancing_method: Optional[pulumi.Input[_builtins.str]] = None,
            nad_controller_id: Optional[pulumi.Input[_builtins.float]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            persistence: Optional[pulumi.Input[_builtins.str]] = None,
            security_certificate_id: Optional[pulumi.Input[_builtins.float]] = None,
            source_port: Optional[pulumi.Input[_builtins.float]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            virtual_ip_address: Optional[pulumi.Input[_builtins.str]] = None) -> 'LbVpxVip':
        """
        Get an existing LbVpxVip resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] load_balancing_method: Load balancing method
        :param pulumi.Input[_builtins.float] nad_controller_id: NAD controller ID
        :param pulumi.Input[_builtins.str] name: Name
        :param pulumi.Input[_builtins.str] persistence: Persistance value
        :param pulumi.Input[_builtins.float] security_certificate_id: security certificate ID
        :param pulumi.Input[_builtins.float] source_port: Source Port number
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        :param pulumi.Input[_builtins.str] type: Type
        :param pulumi.Input[_builtins.str] virtual_ip_address: Virtual IP address
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LbVpxVipState.__new__(_LbVpxVipState)

        __props__.__dict__["lb_vpx_vip_id"] = lb_vpx_vip_id
        __props__.__dict__["load_balancing_method"] = load_balancing_method
        __props__.__dict__["nad_controller_id"] = nad_controller_id
        __props__.__dict__["name"] = name
        __props__.__dict__["persistence"] = persistence
        __props__.__dict__["security_certificate_id"] = security_certificate_id
        __props__.__dict__["source_port"] = source_port
        __props__.__dict__["tags"] = tags
        __props__.__dict__["type"] = type
        __props__.__dict__["virtual_ip_address"] = virtual_ip_address
        return LbVpxVip(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="lbVpxVipId")
    def lb_vpx_vip_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "lb_vpx_vip_id")

    @_builtins.property
    @pulumi.getter(name="loadBalancingMethod")
    def load_balancing_method(self) -> pulumi.Output[_builtins.str]:
        """
        Load balancing method
        """
        return pulumi.get(self, "load_balancing_method")

    @_builtins.property
    @pulumi.getter(name="nadControllerId")
    def nad_controller_id(self) -> pulumi.Output[_builtins.float]:
        """
        NAD controller ID
        """
        return pulumi.get(self, "nad_controller_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def persistence(self) -> pulumi.Output[_builtins.str]:
        """
        Persistance value
        """
        return pulumi.get(self, "persistence")

    @_builtins.property
    @pulumi.getter(name="securityCertificateId")
    def security_certificate_id(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        security certificate ID
        """
        return pulumi.get(self, "security_certificate_id")

    @_builtins.property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> pulumi.Output[_builtins.float]:
        """
        Source Port number
        """
        return pulumi.get(self, "source_port")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Type
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="virtualIpAddress")
    def virtual_ip_address(self) -> pulumi.Output[_builtins.str]:
        """
        Virtual IP address
        """
        return pulumi.get(self, "virtual_ip_address")

