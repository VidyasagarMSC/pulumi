# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetIsVpnGatewayConnectionLocalCidrsResult',
    'AwaitableGetIsVpnGatewayConnectionLocalCidrsResult',
    'get_is_vpn_gateway_connection_local_cidrs',
    'get_is_vpn_gateway_connection_local_cidrs_output',
]

@pulumi.output_type
class GetIsVpnGatewayConnectionLocalCidrsResult:
    """
    A collection of values returned by getIsVpnGatewayConnectionLocalCidrs.
    """
    def __init__(__self__, cidrs=None, id=None, vpn_gateway=None, vpn_gateway_connection=None):
        if cidrs and not isinstance(cidrs, list):
            raise TypeError("Expected argument 'cidrs' to be a list")
        pulumi.set(__self__, "cidrs", cidrs)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if vpn_gateway and not isinstance(vpn_gateway, str):
            raise TypeError("Expected argument 'vpn_gateway' to be a str")
        pulumi.set(__self__, "vpn_gateway", vpn_gateway)
        if vpn_gateway_connection and not isinstance(vpn_gateway_connection, str):
            raise TypeError("Expected argument 'vpn_gateway_connection' to be a str")
        pulumi.set(__self__, "vpn_gateway_connection", vpn_gateway_connection)

    @_builtins.property
    @pulumi.getter
    def cidrs(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "cidrs")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="vpnGateway")
    def vpn_gateway(self) -> _builtins.str:
        return pulumi.get(self, "vpn_gateway")

    @_builtins.property
    @pulumi.getter(name="vpnGatewayConnection")
    def vpn_gateway_connection(self) -> _builtins.str:
        return pulumi.get(self, "vpn_gateway_connection")


class AwaitableGetIsVpnGatewayConnectionLocalCidrsResult(GetIsVpnGatewayConnectionLocalCidrsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsVpnGatewayConnectionLocalCidrsResult(
            cidrs=self.cidrs,
            id=self.id,
            vpn_gateway=self.vpn_gateway,
            vpn_gateway_connection=self.vpn_gateway_connection)


def get_is_vpn_gateway_connection_local_cidrs(id: Optional[_builtins.str] = None,
                                              vpn_gateway: Optional[_builtins.str] = None,
                                              vpn_gateway_connection: Optional[_builtins.str] = None,
                                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsVpnGatewayConnectionLocalCidrsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['vpnGateway'] = vpn_gateway
    __args__['vpnGatewayConnection'] = vpn_gateway_connection
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsVpnGatewayConnectionLocalCidrs:getIsVpnGatewayConnectionLocalCidrs', __args__, opts=opts, typ=GetIsVpnGatewayConnectionLocalCidrsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsVpnGatewayConnectionLocalCidrsResult(
        cidrs=pulumi.get(__ret__, 'cidrs'),
        id=pulumi.get(__ret__, 'id'),
        vpn_gateway=pulumi.get(__ret__, 'vpn_gateway'),
        vpn_gateway_connection=pulumi.get(__ret__, 'vpn_gateway_connection'))
def get_is_vpn_gateway_connection_local_cidrs_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                     vpn_gateway: Optional[pulumi.Input[_builtins.str]] = None,
                                                     vpn_gateway_connection: Optional[pulumi.Input[_builtins.str]] = None,
                                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsVpnGatewayConnectionLocalCidrsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['vpnGateway'] = vpn_gateway
    __args__['vpnGatewayConnection'] = vpn_gateway_connection
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsVpnGatewayConnectionLocalCidrs:getIsVpnGatewayConnectionLocalCidrs', __args__, opts=opts, typ=GetIsVpnGatewayConnectionLocalCidrsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsVpnGatewayConnectionLocalCidrsResult(
        cidrs=pulumi.get(__response__, 'cidrs'),
        id=pulumi.get(__response__, 'id'),
        vpn_gateway=pulumi.get(__response__, 'vpn_gateway'),
        vpn_gateway_connection=pulumi.get(__response__, 'vpn_gateway_connection')))
