# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsVpcDefaultRoutingTableResult',
    'AwaitableGetIsVpcDefaultRoutingTableResult',
    'get_is_vpc_default_routing_table',
    'get_is_vpc_default_routing_table_output',
]

@pulumi.output_type
class GetIsVpcDefaultRoutingTableResult:
    """
    A collection of values returned by getIsVpcDefaultRoutingTable.
    """
    def __init__(__self__, access_tags=None, created_at=None, crn=None, default_routing_table=None, href=None, id=None, is_default=None, lifecycle_state=None, name=None, resource_groups=None, resource_type=None, route_direct_link_ingress=None, route_internet_ingress=None, route_transit_gateway_ingress=None, route_vpc_zone_ingress=None, routes=None, subnets=None, tags=None, vpc=None):
        if access_tags and not isinstance(access_tags, list):
            raise TypeError("Expected argument 'access_tags' to be a list")
        pulumi.set(__self__, "access_tags", access_tags)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if default_routing_table and not isinstance(default_routing_table, str):
            raise TypeError("Expected argument 'default_routing_table' to be a str")
        pulumi.set(__self__, "default_routing_table", default_routing_table)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_default and not isinstance(is_default, bool):
            raise TypeError("Expected argument 'is_default' to be a bool")
        pulumi.set(__self__, "is_default", is_default)
        if lifecycle_state and not isinstance(lifecycle_state, str):
            raise TypeError("Expected argument 'lifecycle_state' to be a str")
        pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resource_groups and not isinstance(resource_groups, list):
            raise TypeError("Expected argument 'resource_groups' to be a list")
        pulumi.set(__self__, "resource_groups", resource_groups)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if route_direct_link_ingress and not isinstance(route_direct_link_ingress, bool):
            raise TypeError("Expected argument 'route_direct_link_ingress' to be a bool")
        pulumi.set(__self__, "route_direct_link_ingress", route_direct_link_ingress)
        if route_internet_ingress and not isinstance(route_internet_ingress, bool):
            raise TypeError("Expected argument 'route_internet_ingress' to be a bool")
        pulumi.set(__self__, "route_internet_ingress", route_internet_ingress)
        if route_transit_gateway_ingress and not isinstance(route_transit_gateway_ingress, bool):
            raise TypeError("Expected argument 'route_transit_gateway_ingress' to be a bool")
        pulumi.set(__self__, "route_transit_gateway_ingress", route_transit_gateway_ingress)
        if route_vpc_zone_ingress and not isinstance(route_vpc_zone_ingress, bool):
            raise TypeError("Expected argument 'route_vpc_zone_ingress' to be a bool")
        pulumi.set(__self__, "route_vpc_zone_ingress", route_vpc_zone_ingress)
        if routes and not isinstance(routes, list):
            raise TypeError("Expected argument 'routes' to be a list")
        pulumi.set(__self__, "routes", routes)
        if subnets and not isinstance(subnets, list):
            raise TypeError("Expected argument 'subnets' to be a list")
        pulumi.set(__self__, "subnets", subnets)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if vpc and not isinstance(vpc, str):
            raise TypeError("Expected argument 'vpc' to be a str")
        pulumi.set(__self__, "vpc", vpc)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="defaultRoutingTable")
    def default_routing_table(self) -> _builtins.str:
        return pulumi.get(self, "default_routing_table")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> _builtins.bool:
        return pulumi.get(self, "is_default")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> _builtins.str:
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Sequence['outputs.GetIsVpcDefaultRoutingTableResourceGroupResult']:
        return pulumi.get(self, "resource_groups")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="routeDirectLinkIngress")
    def route_direct_link_ingress(self) -> _builtins.bool:
        return pulumi.get(self, "route_direct_link_ingress")

    @_builtins.property
    @pulumi.getter(name="routeInternetIngress")
    def route_internet_ingress(self) -> _builtins.bool:
        return pulumi.get(self, "route_internet_ingress")

    @_builtins.property
    @pulumi.getter(name="routeTransitGatewayIngress")
    def route_transit_gateway_ingress(self) -> _builtins.bool:
        return pulumi.get(self, "route_transit_gateway_ingress")

    @_builtins.property
    @pulumi.getter(name="routeVpcZoneIngress")
    def route_vpc_zone_ingress(self) -> _builtins.bool:
        return pulumi.get(self, "route_vpc_zone_ingress")

    @_builtins.property
    @pulumi.getter
    def routes(self) -> Sequence['outputs.GetIsVpcDefaultRoutingTableRouteResult']:
        return pulumi.get(self, "routes")

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> Sequence['outputs.GetIsVpcDefaultRoutingTableSubnetResult']:
        return pulumi.get(self, "subnets")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> _builtins.str:
        return pulumi.get(self, "vpc")


class AwaitableGetIsVpcDefaultRoutingTableResult(GetIsVpcDefaultRoutingTableResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsVpcDefaultRoutingTableResult(
            access_tags=self.access_tags,
            created_at=self.created_at,
            crn=self.crn,
            default_routing_table=self.default_routing_table,
            href=self.href,
            id=self.id,
            is_default=self.is_default,
            lifecycle_state=self.lifecycle_state,
            name=self.name,
            resource_groups=self.resource_groups,
            resource_type=self.resource_type,
            route_direct_link_ingress=self.route_direct_link_ingress,
            route_internet_ingress=self.route_internet_ingress,
            route_transit_gateway_ingress=self.route_transit_gateway_ingress,
            route_vpc_zone_ingress=self.route_vpc_zone_ingress,
            routes=self.routes,
            subnets=self.subnets,
            tags=self.tags,
            vpc=self.vpc)


def get_is_vpc_default_routing_table(id: Optional[_builtins.str] = None,
                                     vpc: Optional[_builtins.str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsVpcDefaultRoutingTableResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['vpc'] = vpc
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsVpcDefaultRoutingTable:getIsVpcDefaultRoutingTable', __args__, opts=opts, typ=GetIsVpcDefaultRoutingTableResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsVpcDefaultRoutingTableResult(
        access_tags=pulumi.get(__ret__, 'access_tags'),
        created_at=pulumi.get(__ret__, 'created_at'),
        crn=pulumi.get(__ret__, 'crn'),
        default_routing_table=pulumi.get(__ret__, 'default_routing_table'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        is_default=pulumi.get(__ret__, 'is_default'),
        lifecycle_state=pulumi.get(__ret__, 'lifecycle_state'),
        name=pulumi.get(__ret__, 'name'),
        resource_groups=pulumi.get(__ret__, 'resource_groups'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        route_direct_link_ingress=pulumi.get(__ret__, 'route_direct_link_ingress'),
        route_internet_ingress=pulumi.get(__ret__, 'route_internet_ingress'),
        route_transit_gateway_ingress=pulumi.get(__ret__, 'route_transit_gateway_ingress'),
        route_vpc_zone_ingress=pulumi.get(__ret__, 'route_vpc_zone_ingress'),
        routes=pulumi.get(__ret__, 'routes'),
        subnets=pulumi.get(__ret__, 'subnets'),
        tags=pulumi.get(__ret__, 'tags'),
        vpc=pulumi.get(__ret__, 'vpc'))
def get_is_vpc_default_routing_table_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            vpc: Optional[pulumi.Input[_builtins.str]] = None,
                                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsVpcDefaultRoutingTableResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['vpc'] = vpc
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsVpcDefaultRoutingTable:getIsVpcDefaultRoutingTable', __args__, opts=opts, typ=GetIsVpcDefaultRoutingTableResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsVpcDefaultRoutingTableResult(
        access_tags=pulumi.get(__response__, 'access_tags'),
        created_at=pulumi.get(__response__, 'created_at'),
        crn=pulumi.get(__response__, 'crn'),
        default_routing_table=pulumi.get(__response__, 'default_routing_table'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        is_default=pulumi.get(__response__, 'is_default'),
        lifecycle_state=pulumi.get(__response__, 'lifecycle_state'),
        name=pulumi.get(__response__, 'name'),
        resource_groups=pulumi.get(__response__, 'resource_groups'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        route_direct_link_ingress=pulumi.get(__response__, 'route_direct_link_ingress'),
        route_internet_ingress=pulumi.get(__response__, 'route_internet_ingress'),
        route_transit_gateway_ingress=pulumi.get(__response__, 'route_transit_gateway_ingress'),
        route_vpc_zone_ingress=pulumi.get(__response__, 'route_vpc_zone_ingress'),
        routes=pulumi.get(__response__, 'routes'),
        subnets=pulumi.get(__response__, 'subnets'),
        tags=pulumi.get(__response__, 'tags'),
        vpc=pulumi.get(__response__, 'vpc')))
