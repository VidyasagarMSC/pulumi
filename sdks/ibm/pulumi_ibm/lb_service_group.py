# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['LbServiceGroupArgs', 'LbServiceGroup']

@pulumi.input_type
class LbServiceGroupArgs:
    def __init__(__self__, *,
                 allocation: pulumi.Input[_builtins.float],
                 load_balancer_id: pulumi.Input[_builtins.float],
                 port: pulumi.Input[_builtins.float],
                 routing_method: pulumi.Input[_builtins.str],
                 routing_type: pulumi.Input[_builtins.str],
                 lb_service_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeout: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a LbServiceGroup resource.
        :param pulumi.Input[_builtins.float] allocation: Allocation type
        :param pulumi.Input[_builtins.float] load_balancer_id: Loadbalancer ID
        :param pulumi.Input[_builtins.float] port: Port number
        :param pulumi.Input[_builtins.str] routing_method: Routing method
        :param pulumi.Input[_builtins.str] routing_type: Routing type
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        :param pulumi.Input[_builtins.float] timeout: Timeout value
        """
        pulumi.set(__self__, "allocation", allocation)
        pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "routing_method", routing_method)
        pulumi.set(__self__, "routing_type", routing_type)
        if lb_service_group_id is not None:
            pulumi.set(__self__, "lb_service_group_id", lb_service_group_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @_builtins.property
    @pulumi.getter
    def allocation(self) -> pulumi.Input[_builtins.float]:
        """
        Allocation type
        """
        return pulumi.get(self, "allocation")

    @allocation.setter
    def allocation(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "allocation", value)

    @_builtins.property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> pulumi.Input[_builtins.float]:
        """
        Loadbalancer ID
        """
        return pulumi.get(self, "load_balancer_id")

    @load_balancer_id.setter
    def load_balancer_id(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "load_balancer_id", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Input[_builtins.float]:
        """
        Port number
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter(name="routingMethod")
    def routing_method(self) -> pulumi.Input[_builtins.str]:
        """
        Routing method
        """
        return pulumi.get(self, "routing_method")

    @routing_method.setter
    def routing_method(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "routing_method", value)

    @_builtins.property
    @pulumi.getter(name="routingType")
    def routing_type(self) -> pulumi.Input[_builtins.str]:
        """
        Routing type
        """
        return pulumi.get(self, "routing_type")

    @routing_type.setter
    def routing_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "routing_type", value)

    @_builtins.property
    @pulumi.getter(name="lbServiceGroupId")
    def lb_service_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "lb_service_group_id")

    @lb_service_group_id.setter
    def lb_service_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lb_service_group_id", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Timeout value
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class _LbServiceGroupState:
    def __init__(__self__, *,
                 allocation: Optional[pulumi.Input[_builtins.float]] = None,
                 lb_service_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 load_balancer_id: Optional[pulumi.Input[_builtins.float]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 routing_method: Optional[pulumi.Input[_builtins.str]] = None,
                 routing_type: Optional[pulumi.Input[_builtins.str]] = None,
                 service_group_id: Optional[pulumi.Input[_builtins.float]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 virtual_server_id: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering LbServiceGroup resources.
        :param pulumi.Input[_builtins.float] allocation: Allocation type
        :param pulumi.Input[_builtins.float] load_balancer_id: Loadbalancer ID
        :param pulumi.Input[_builtins.float] port: Port number
        :param pulumi.Input[_builtins.str] routing_method: Routing method
        :param pulumi.Input[_builtins.str] routing_type: Routing type
        :param pulumi.Input[_builtins.float] service_group_id: Service group ID
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        :param pulumi.Input[_builtins.float] timeout: Timeout value
        :param pulumi.Input[_builtins.float] virtual_server_id: Virtual server ID
        """
        if allocation is not None:
            pulumi.set(__self__, "allocation", allocation)
        if lb_service_group_id is not None:
            pulumi.set(__self__, "lb_service_group_id", lb_service_group_id)
        if load_balancer_id is not None:
            pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if routing_method is not None:
            pulumi.set(__self__, "routing_method", routing_method)
        if routing_type is not None:
            pulumi.set(__self__, "routing_type", routing_type)
        if service_group_id is not None:
            pulumi.set(__self__, "service_group_id", service_group_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if virtual_server_id is not None:
            pulumi.set(__self__, "virtual_server_id", virtual_server_id)

    @_builtins.property
    @pulumi.getter
    def allocation(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Allocation type
        """
        return pulumi.get(self, "allocation")

    @allocation.setter
    def allocation(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "allocation", value)

    @_builtins.property
    @pulumi.getter(name="lbServiceGroupId")
    def lb_service_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "lb_service_group_id")

    @lb_service_group_id.setter
    def lb_service_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lb_service_group_id", value)

    @_builtins.property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Loadbalancer ID
        """
        return pulumi.get(self, "load_balancer_id")

    @load_balancer_id.setter
    def load_balancer_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "load_balancer_id", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Port number
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter(name="routingMethod")
    def routing_method(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Routing method
        """
        return pulumi.get(self, "routing_method")

    @routing_method.setter
    def routing_method(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "routing_method", value)

    @_builtins.property
    @pulumi.getter(name="routingType")
    def routing_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Routing type
        """
        return pulumi.get(self, "routing_type")

    @routing_type.setter
    def routing_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "routing_type", value)

    @_builtins.property
    @pulumi.getter(name="serviceGroupId")
    def service_group_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Service group ID
        """
        return pulumi.get(self, "service_group_id")

    @service_group_id.setter
    def service_group_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "service_group_id", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Timeout value
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "timeout", value)

    @_builtins.property
    @pulumi.getter(name="virtualServerId")
    def virtual_server_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Virtual server ID
        """
        return pulumi.get(self, "virtual_server_id")

    @virtual_server_id.setter
    def virtual_server_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "virtual_server_id", value)


@pulumi.type_token("ibm:index/lbServiceGroup:LbServiceGroup")
class LbServiceGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allocation: Optional[pulumi.Input[_builtins.float]] = None,
                 lb_service_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 load_balancer_id: Optional[pulumi.Input[_builtins.float]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 routing_method: Optional[pulumi.Input[_builtins.str]] = None,
                 routing_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a LbServiceGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] allocation: Allocation type
        :param pulumi.Input[_builtins.float] load_balancer_id: Loadbalancer ID
        :param pulumi.Input[_builtins.float] port: Port number
        :param pulumi.Input[_builtins.str] routing_method: Routing method
        :param pulumi.Input[_builtins.str] routing_type: Routing type
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        :param pulumi.Input[_builtins.float] timeout: Timeout value
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LbServiceGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a LbServiceGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LbServiceGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LbServiceGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allocation: Optional[pulumi.Input[_builtins.float]] = None,
                 lb_service_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 load_balancer_id: Optional[pulumi.Input[_builtins.float]] = None,
                 port: Optional[pulumi.Input[_builtins.float]] = None,
                 routing_method: Optional[pulumi.Input[_builtins.str]] = None,
                 routing_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeout: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LbServiceGroupArgs.__new__(LbServiceGroupArgs)

            if allocation is None and not opts.urn:
                raise TypeError("Missing required property 'allocation'")
            __props__.__dict__["allocation"] = allocation
            __props__.__dict__["lb_service_group_id"] = lb_service_group_id
            if load_balancer_id is None and not opts.urn:
                raise TypeError("Missing required property 'load_balancer_id'")
            __props__.__dict__["load_balancer_id"] = load_balancer_id
            if port is None and not opts.urn:
                raise TypeError("Missing required property 'port'")
            __props__.__dict__["port"] = port
            if routing_method is None and not opts.urn:
                raise TypeError("Missing required property 'routing_method'")
            __props__.__dict__["routing_method"] = routing_method
            if routing_type is None and not opts.urn:
                raise TypeError("Missing required property 'routing_type'")
            __props__.__dict__["routing_type"] = routing_type
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeout"] = timeout
            __props__.__dict__["service_group_id"] = None
            __props__.__dict__["virtual_server_id"] = None
        super(LbServiceGroup, __self__).__init__(
            'ibm:index/lbServiceGroup:LbServiceGroup',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allocation: Optional[pulumi.Input[_builtins.float]] = None,
            lb_service_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            load_balancer_id: Optional[pulumi.Input[_builtins.float]] = None,
            port: Optional[pulumi.Input[_builtins.float]] = None,
            routing_method: Optional[pulumi.Input[_builtins.str]] = None,
            routing_type: Optional[pulumi.Input[_builtins.str]] = None,
            service_group_id: Optional[pulumi.Input[_builtins.float]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            timeout: Optional[pulumi.Input[_builtins.float]] = None,
            virtual_server_id: Optional[pulumi.Input[_builtins.float]] = None) -> 'LbServiceGroup':
        """
        Get an existing LbServiceGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.float] allocation: Allocation type
        :param pulumi.Input[_builtins.float] load_balancer_id: Loadbalancer ID
        :param pulumi.Input[_builtins.float] port: Port number
        :param pulumi.Input[_builtins.str] routing_method: Routing method
        :param pulumi.Input[_builtins.str] routing_type: Routing type
        :param pulumi.Input[_builtins.float] service_group_id: Service group ID
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        :param pulumi.Input[_builtins.float] timeout: Timeout value
        :param pulumi.Input[_builtins.float] virtual_server_id: Virtual server ID
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LbServiceGroupState.__new__(_LbServiceGroupState)

        __props__.__dict__["allocation"] = allocation
        __props__.__dict__["lb_service_group_id"] = lb_service_group_id
        __props__.__dict__["load_balancer_id"] = load_balancer_id
        __props__.__dict__["port"] = port
        __props__.__dict__["routing_method"] = routing_method
        __props__.__dict__["routing_type"] = routing_type
        __props__.__dict__["service_group_id"] = service_group_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timeout"] = timeout
        __props__.__dict__["virtual_server_id"] = virtual_server_id
        return LbServiceGroup(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def allocation(self) -> pulumi.Output[_builtins.float]:
        """
        Allocation type
        """
        return pulumi.get(self, "allocation")

    @_builtins.property
    @pulumi.getter(name="lbServiceGroupId")
    def lb_service_group_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "lb_service_group_id")

    @_builtins.property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> pulumi.Output[_builtins.float]:
        """
        Loadbalancer ID
        """
        return pulumi.get(self, "load_balancer_id")

    @_builtins.property
    @pulumi.getter
    def port(self) -> pulumi.Output[_builtins.float]:
        """
        Port number
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="routingMethod")
    def routing_method(self) -> pulumi.Output[_builtins.str]:
        """
        Routing method
        """
        return pulumi.get(self, "routing_method")

    @_builtins.property
    @pulumi.getter(name="routingType")
    def routing_type(self) -> pulumi.Output[_builtins.str]:
        """
        Routing type
        """
        return pulumi.get(self, "routing_type")

    @_builtins.property
    @pulumi.getter(name="serviceGroupId")
    def service_group_id(self) -> pulumi.Output[_builtins.float]:
        """
        Service group ID
        """
        return pulumi.get(self, "service_group_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Timeout value
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter(name="virtualServerId")
    def virtual_server_id(self) -> pulumi.Output[_builtins.float]:
        """
        Virtual server ID
        """
        return pulumi.get(self, "virtual_server_id")

