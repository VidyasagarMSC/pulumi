# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCisRulesetVersionsResult',
    'AwaitableGetCisRulesetVersionsResult',
    'get_cis_ruleset_versions',
    'get_cis_ruleset_versions_output',
]

@pulumi.output_type
class GetCisRulesetVersionsResult:
    """
    A collection of values returned by getCisRulesetVersions.
    """
    def __init__(__self__, cis_id=None, domain_id=None, id=None, ruleset_id=None, ruleset_versions=None, rulesets=None, version=None):
        if cis_id and not isinstance(cis_id, str):
            raise TypeError("Expected argument 'cis_id' to be a str")
        pulumi.set(__self__, "cis_id", cis_id)
        if domain_id and not isinstance(domain_id, str):
            raise TypeError("Expected argument 'domain_id' to be a str")
        pulumi.set(__self__, "domain_id", domain_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ruleset_id and not isinstance(ruleset_id, str):
            raise TypeError("Expected argument 'ruleset_id' to be a str")
        pulumi.set(__self__, "ruleset_id", ruleset_id)
        if ruleset_versions and not isinstance(ruleset_versions, list):
            raise TypeError("Expected argument 'ruleset_versions' to be a list")
        pulumi.set(__self__, "ruleset_versions", ruleset_versions)
        if rulesets and not isinstance(rulesets, list):
            raise TypeError("Expected argument 'rulesets' to be a list")
        pulumi.set(__self__, "rulesets", rulesets)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> _builtins.str:
        return pulumi.get(self, "cis_id")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="rulesetId")
    def ruleset_id(self) -> _builtins.str:
        return pulumi.get(self, "ruleset_id")

    @_builtins.property
    @pulumi.getter(name="rulesetVersions")
    def ruleset_versions(self) -> Sequence['outputs.GetCisRulesetVersionsRulesetVersionResult']:
        return pulumi.get(self, "ruleset_versions")

    @_builtins.property
    @pulumi.getter
    def rulesets(self) -> Sequence['outputs.GetCisRulesetVersionsRulesetResult']:
        return pulumi.get(self, "rulesets")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "version")


class AwaitableGetCisRulesetVersionsResult(GetCisRulesetVersionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCisRulesetVersionsResult(
            cis_id=self.cis_id,
            domain_id=self.domain_id,
            id=self.id,
            ruleset_id=self.ruleset_id,
            ruleset_versions=self.ruleset_versions,
            rulesets=self.rulesets,
            version=self.version)


def get_cis_ruleset_versions(cis_id: Optional[_builtins.str] = None,
                             domain_id: Optional[_builtins.str] = None,
                             id: Optional[_builtins.str] = None,
                             ruleset_id: Optional[_builtins.str] = None,
                             version: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCisRulesetVersionsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cisId'] = cis_id
    __args__['domainId'] = domain_id
    __args__['id'] = id
    __args__['rulesetId'] = ruleset_id
    __args__['version'] = version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCisRulesetVersions:getCisRulesetVersions', __args__, opts=opts, typ=GetCisRulesetVersionsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCisRulesetVersionsResult(
        cis_id=pulumi.get(__ret__, 'cis_id'),
        domain_id=pulumi.get(__ret__, 'domain_id'),
        id=pulumi.get(__ret__, 'id'),
        ruleset_id=pulumi.get(__ret__, 'ruleset_id'),
        ruleset_versions=pulumi.get(__ret__, 'ruleset_versions'),
        rulesets=pulumi.get(__ret__, 'rulesets'),
        version=pulumi.get(__ret__, 'version'))
def get_cis_ruleset_versions_output(cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                                    domain_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    ruleset_id: Optional[pulumi.Input[_builtins.str]] = None,
                                    version: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCisRulesetVersionsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cisId'] = cis_id
    __args__['domainId'] = domain_id
    __args__['id'] = id
    __args__['rulesetId'] = ruleset_id
    __args__['version'] = version
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCisRulesetVersions:getCisRulesetVersions', __args__, opts=opts, typ=GetCisRulesetVersionsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCisRulesetVersionsResult(
        cis_id=pulumi.get(__response__, 'cis_id'),
        domain_id=pulumi.get(__response__, 'domain_id'),
        id=pulumi.get(__response__, 'id'),
        ruleset_id=pulumi.get(__response__, 'ruleset_id'),
        ruleset_versions=pulumi.get(__response__, 'ruleset_versions'),
        rulesets=pulumi.get(__response__, 'rulesets'),
        version=pulumi.get(__response__, 'version')))
