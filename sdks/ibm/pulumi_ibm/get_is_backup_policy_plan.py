# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsBackupPolicyPlanResult',
    'AwaitableGetIsBackupPolicyPlanResult',
    'get_is_backup_policy_plan',
    'get_is_backup_policy_plan_output',
]

@pulumi.output_type
class GetIsBackupPolicyPlanResult:
    """
    A collection of values returned by getIsBackupPolicyPlan.
    """
    def __init__(__self__, active=None, attach_user_tags=None, backup_policy_id=None, clone_policies=None, copy_user_tags=None, created_at=None, cron_spec=None, deletion_triggers=None, href=None, id=None, identifier=None, lifecycle_state=None, name=None, remote_region_policies=None, resource_type=None):
        if active and not isinstance(active, bool):
            raise TypeError("Expected argument 'active' to be a bool")
        pulumi.set(__self__, "active", active)
        if attach_user_tags and not isinstance(attach_user_tags, list):
            raise TypeError("Expected argument 'attach_user_tags' to be a list")
        pulumi.set(__self__, "attach_user_tags", attach_user_tags)
        if backup_policy_id and not isinstance(backup_policy_id, str):
            raise TypeError("Expected argument 'backup_policy_id' to be a str")
        pulumi.set(__self__, "backup_policy_id", backup_policy_id)
        if clone_policies and not isinstance(clone_policies, list):
            raise TypeError("Expected argument 'clone_policies' to be a list")
        pulumi.set(__self__, "clone_policies", clone_policies)
        if copy_user_tags and not isinstance(copy_user_tags, bool):
            raise TypeError("Expected argument 'copy_user_tags' to be a bool")
        pulumi.set(__self__, "copy_user_tags", copy_user_tags)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if cron_spec and not isinstance(cron_spec, str):
            raise TypeError("Expected argument 'cron_spec' to be a str")
        pulumi.set(__self__, "cron_spec", cron_spec)
        if deletion_triggers and not isinstance(deletion_triggers, list):
            raise TypeError("Expected argument 'deletion_triggers' to be a list")
        pulumi.set(__self__, "deletion_triggers", deletion_triggers)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identifier and not isinstance(identifier, str):
            raise TypeError("Expected argument 'identifier' to be a str")
        pulumi.set(__self__, "identifier", identifier)
        if lifecycle_state and not isinstance(lifecycle_state, str):
            raise TypeError("Expected argument 'lifecycle_state' to be a str")
        pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if remote_region_policies and not isinstance(remote_region_policies, list):
            raise TypeError("Expected argument 'remote_region_policies' to be a list")
        pulumi.set(__self__, "remote_region_policies", remote_region_policies)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)

    @_builtins.property
    @pulumi.getter
    def active(self) -> _builtins.bool:
        return pulumi.get(self, "active")

    @_builtins.property
    @pulumi.getter(name="attachUserTags")
    def attach_user_tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "attach_user_tags")

    @_builtins.property
    @pulumi.getter(name="backupPolicyId")
    def backup_policy_id(self) -> _builtins.str:
        return pulumi.get(self, "backup_policy_id")

    @_builtins.property
    @pulumi.getter(name="clonePolicies")
    def clone_policies(self) -> Sequence['outputs.GetIsBackupPolicyPlanClonePolicyResult']:
        return pulumi.get(self, "clone_policies")

    @_builtins.property
    @pulumi.getter(name="copyUserTags")
    def copy_user_tags(self) -> _builtins.bool:
        return pulumi.get(self, "copy_user_tags")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="cronSpec")
    def cron_spec(self) -> _builtins.str:
        return pulumi.get(self, "cron_spec")

    @_builtins.property
    @pulumi.getter(name="deletionTriggers")
    def deletion_triggers(self) -> Sequence['outputs.GetIsBackupPolicyPlanDeletionTriggerResult']:
        return pulumi.get(self, "deletion_triggers")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def identifier(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "identifier")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> _builtins.str:
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="remoteRegionPolicies")
    def remote_region_policies(self) -> Sequence['outputs.GetIsBackupPolicyPlanRemoteRegionPolicyResult']:
        return pulumi.get(self, "remote_region_policies")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")


class AwaitableGetIsBackupPolicyPlanResult(GetIsBackupPolicyPlanResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsBackupPolicyPlanResult(
            active=self.active,
            attach_user_tags=self.attach_user_tags,
            backup_policy_id=self.backup_policy_id,
            clone_policies=self.clone_policies,
            copy_user_tags=self.copy_user_tags,
            created_at=self.created_at,
            cron_spec=self.cron_spec,
            deletion_triggers=self.deletion_triggers,
            href=self.href,
            id=self.id,
            identifier=self.identifier,
            lifecycle_state=self.lifecycle_state,
            name=self.name,
            remote_region_policies=self.remote_region_policies,
            resource_type=self.resource_type)


def get_is_backup_policy_plan(backup_policy_id: Optional[_builtins.str] = None,
                              id: Optional[_builtins.str] = None,
                              identifier: Optional[_builtins.str] = None,
                              name: Optional[_builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsBackupPolicyPlanResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['backupPolicyId'] = backup_policy_id
    __args__['id'] = id
    __args__['identifier'] = identifier
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsBackupPolicyPlan:getIsBackupPolicyPlan', __args__, opts=opts, typ=GetIsBackupPolicyPlanResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsBackupPolicyPlanResult(
        active=pulumi.get(__ret__, 'active'),
        attach_user_tags=pulumi.get(__ret__, 'attach_user_tags'),
        backup_policy_id=pulumi.get(__ret__, 'backup_policy_id'),
        clone_policies=pulumi.get(__ret__, 'clone_policies'),
        copy_user_tags=pulumi.get(__ret__, 'copy_user_tags'),
        created_at=pulumi.get(__ret__, 'created_at'),
        cron_spec=pulumi.get(__ret__, 'cron_spec'),
        deletion_triggers=pulumi.get(__ret__, 'deletion_triggers'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        identifier=pulumi.get(__ret__, 'identifier'),
        lifecycle_state=pulumi.get(__ret__, 'lifecycle_state'),
        name=pulumi.get(__ret__, 'name'),
        remote_region_policies=pulumi.get(__ret__, 'remote_region_policies'),
        resource_type=pulumi.get(__ret__, 'resource_type'))
def get_is_backup_policy_plan_output(backup_policy_id: Optional[pulumi.Input[_builtins.str]] = None,
                                     id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     identifier: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsBackupPolicyPlanResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['backupPolicyId'] = backup_policy_id
    __args__['id'] = id
    __args__['identifier'] = identifier
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsBackupPolicyPlan:getIsBackupPolicyPlan', __args__, opts=opts, typ=GetIsBackupPolicyPlanResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsBackupPolicyPlanResult(
        active=pulumi.get(__response__, 'active'),
        attach_user_tags=pulumi.get(__response__, 'attach_user_tags'),
        backup_policy_id=pulumi.get(__response__, 'backup_policy_id'),
        clone_policies=pulumi.get(__response__, 'clone_policies'),
        copy_user_tags=pulumi.get(__response__, 'copy_user_tags'),
        created_at=pulumi.get(__response__, 'created_at'),
        cron_spec=pulumi.get(__response__, 'cron_spec'),
        deletion_triggers=pulumi.get(__response__, 'deletion_triggers'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        identifier=pulumi.get(__response__, 'identifier'),
        lifecycle_state=pulumi.get(__response__, 'lifecycle_state'),
        name=pulumi.get(__response__, 'name'),
        remote_region_policies=pulumi.get(__response__, 'remote_region_policies'),
        resource_type=pulumi.get(__response__, 'resource_type')))
