# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EnSmtpConfigurationArgs', 'EnSmtpConfiguration']

@pulumi.input_type
class EnSmtpConfigurationArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[_builtins.str],
                 instance_id: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 ibm_en_smtp_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 verification_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a EnSmtpConfiguration resource.
        :param pulumi.Input[_builtins.str] domain: Domain Name.
        :param pulumi.Input[_builtins.str] instance_id: Unique identifier for IBM Cloud Event Notifications instance.
        :param pulumi.Input[_builtins.str] description: SMTP description.
        :param pulumi.Input[_builtins.str] name: SMTP name.
        :param pulumi.Input[_builtins.str] verification_type: SPF/DKIM.
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "instance_id", instance_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ibm_en_smtp_configuration_id is not None:
            pulumi.set(__self__, "ibm_en_smtp_configuration_id", ibm_en_smtp_configuration_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if verification_type is not None:
            pulumi.set(__self__, "verification_type", verification_type)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> pulumi.Input[_builtins.str]:
        """
        Domain Name.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Unique identifier for IBM Cloud Event Notifications instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        SMTP description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="ibmEnSmtpConfigurationId")
    def ibm_en_smtp_configuration_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ibm_en_smtp_configuration_id")

    @ibm_en_smtp_configuration_id.setter
    def ibm_en_smtp_configuration_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ibm_en_smtp_configuration_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        SMTP name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="verificationType")
    def verification_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        SPF/DKIM.
        """
        return pulumi.get(self, "verification_type")

    @verification_type.setter
    def verification_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "verification_type", value)


@pulumi.input_type
class _EnSmtpConfigurationState:
    def __init__(__self__, *,
                 configs: Optional[pulumi.Input[Sequence[pulumi.Input['EnSmtpConfigurationConfigArgs']]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 domain: Optional[pulumi.Input[_builtins.str]] = None,
                 en_smtp_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 ibm_en_smtp_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 verification_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering EnSmtpConfiguration resources.
        :param pulumi.Input[Sequence[pulumi.Input['EnSmtpConfigurationConfigArgs']]] configs: Payload describing a SMTP configuration.
        :param pulumi.Input[_builtins.str] description: SMTP description.
        :param pulumi.Input[_builtins.str] domain: Domain Name.
        :param pulumi.Input[_builtins.str] en_smtp_configuration_id: SMTP ID.
        :param pulumi.Input[_builtins.str] instance_id: Unique identifier for IBM Cloud Event Notifications instance.
        :param pulumi.Input[_builtins.str] name: SMTP name.
        :param pulumi.Input[_builtins.str] updated_at: Created time.
        :param pulumi.Input[_builtins.str] verification_type: SPF/DKIM.
        """
        if configs is not None:
            pulumi.set(__self__, "configs", configs)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if en_smtp_configuration_id is not None:
            pulumi.set(__self__, "en_smtp_configuration_id", en_smtp_configuration_id)
        if ibm_en_smtp_configuration_id is not None:
            pulumi.set(__self__, "ibm_en_smtp_configuration_id", ibm_en_smtp_configuration_id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if verification_type is not None:
            pulumi.set(__self__, "verification_type", verification_type)

    @_builtins.property
    @pulumi.getter
    def configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EnSmtpConfigurationConfigArgs']]]]:
        """
        Payload describing a SMTP configuration.
        """
        return pulumi.get(self, "configs")

    @configs.setter
    def configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EnSmtpConfigurationConfigArgs']]]]):
        pulumi.set(self, "configs", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        SMTP description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Domain Name.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain", value)

    @_builtins.property
    @pulumi.getter(name="enSmtpConfigurationId")
    def en_smtp_configuration_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        SMTP ID.
        """
        return pulumi.get(self, "en_smtp_configuration_id")

    @en_smtp_configuration_id.setter
    def en_smtp_configuration_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "en_smtp_configuration_id", value)

    @_builtins.property
    @pulumi.getter(name="ibmEnSmtpConfigurationId")
    def ibm_en_smtp_configuration_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ibm_en_smtp_configuration_id")

    @ibm_en_smtp_configuration_id.setter
    def ibm_en_smtp_configuration_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ibm_en_smtp_configuration_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique identifier for IBM Cloud Event Notifications instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        SMTP name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Created time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="verificationType")
    def verification_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        SPF/DKIM.
        """
        return pulumi.get(self, "verification_type")

    @verification_type.setter
    def verification_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "verification_type", value)


@pulumi.type_token("ibm:index/enSmtpConfiguration:EnSmtpConfiguration")
class EnSmtpConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 domain: Optional[pulumi.Input[_builtins.str]] = None,
                 ibm_en_smtp_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 verification_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a EnSmtpConfiguration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: SMTP description.
        :param pulumi.Input[_builtins.str] domain: Domain Name.
        :param pulumi.Input[_builtins.str] instance_id: Unique identifier for IBM Cloud Event Notifications instance.
        :param pulumi.Input[_builtins.str] name: SMTP name.
        :param pulumi.Input[_builtins.str] verification_type: SPF/DKIM.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EnSmtpConfigurationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a EnSmtpConfiguration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param EnSmtpConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EnSmtpConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 domain: Optional[pulumi.Input[_builtins.str]] = None,
                 ibm_en_smtp_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 verification_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EnSmtpConfigurationArgs.__new__(EnSmtpConfigurationArgs)

            __props__.__dict__["description"] = description
            if domain is None and not opts.urn:
                raise TypeError("Missing required property 'domain'")
            __props__.__dict__["domain"] = domain
            __props__.__dict__["ibm_en_smtp_configuration_id"] = ibm_en_smtp_configuration_id
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["name"] = name
            __props__.__dict__["verification_type"] = verification_type
            __props__.__dict__["configs"] = None
            __props__.__dict__["en_smtp_configuration_id"] = None
            __props__.__dict__["updated_at"] = None
        super(EnSmtpConfiguration, __self__).__init__(
            'ibm:index/enSmtpConfiguration:EnSmtpConfiguration',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EnSmtpConfigurationConfigArgs', 'EnSmtpConfigurationConfigArgsDict']]]]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            domain: Optional[pulumi.Input[_builtins.str]] = None,
            en_smtp_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
            ibm_en_smtp_configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            verification_type: Optional[pulumi.Input[_builtins.str]] = None) -> 'EnSmtpConfiguration':
        """
        Get an existing EnSmtpConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['EnSmtpConfigurationConfigArgs', 'EnSmtpConfigurationConfigArgsDict']]]] configs: Payload describing a SMTP configuration.
        :param pulumi.Input[_builtins.str] description: SMTP description.
        :param pulumi.Input[_builtins.str] domain: Domain Name.
        :param pulumi.Input[_builtins.str] en_smtp_configuration_id: SMTP ID.
        :param pulumi.Input[_builtins.str] instance_id: Unique identifier for IBM Cloud Event Notifications instance.
        :param pulumi.Input[_builtins.str] name: SMTP name.
        :param pulumi.Input[_builtins.str] updated_at: Created time.
        :param pulumi.Input[_builtins.str] verification_type: SPF/DKIM.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EnSmtpConfigurationState.__new__(_EnSmtpConfigurationState)

        __props__.__dict__["configs"] = configs
        __props__.__dict__["description"] = description
        __props__.__dict__["domain"] = domain
        __props__.__dict__["en_smtp_configuration_id"] = en_smtp_configuration_id
        __props__.__dict__["ibm_en_smtp_configuration_id"] = ibm_en_smtp_configuration_id
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["name"] = name
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["verification_type"] = verification_type
        return EnSmtpConfiguration(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def configs(self) -> pulumi.Output[Sequence['outputs.EnSmtpConfigurationConfig']]:
        """
        Payload describing a SMTP configuration.
        """
        return pulumi.get(self, "configs")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        SMTP description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def domain(self) -> pulumi.Output[_builtins.str]:
        """
        Domain Name.
        """
        return pulumi.get(self, "domain")

    @_builtins.property
    @pulumi.getter(name="enSmtpConfigurationId")
    def en_smtp_configuration_id(self) -> pulumi.Output[_builtins.str]:
        """
        SMTP ID.
        """
        return pulumi.get(self, "en_smtp_configuration_id")

    @_builtins.property
    @pulumi.getter(name="ibmEnSmtpConfigurationId")
    def ibm_en_smtp_configuration_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "ibm_en_smtp_configuration_id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Unique identifier for IBM Cloud Event Notifications instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        SMTP name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Created time.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="verificationType")
    def verification_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        SPF/DKIM.
        """
        return pulumi.get(self, "verification_type")

