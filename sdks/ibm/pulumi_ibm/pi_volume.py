# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PiVolumeArgs', 'PiVolume']

@pulumi.input_type
class PiVolumeArgs:
    def __init__(__self__, *,
                 pi_cloud_instance_id: pulumi.Input[_builtins.str],
                 pi_volume_name: pulumi.Input[_builtins.str],
                 pi_volume_size: pulumi.Input[_builtins.float],
                 pi_affinity_instance: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_affinity_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_affinity_volume: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_anti_affinity_instances: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_anti_affinity_volumes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_replication_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_replication_sites: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_volume_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_volume_shareable: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_volume_type: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['PiVolumeTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a PiVolume resource.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_volume_name: The name of the volume.
        :param pulumi.Input[_builtins.float] pi_volume_size: The size of the volume in GB.
        :param pulumi.Input[_builtins.str] pi_affinity_instance: PVM Instance (ID or Name) to base volume affinity policy against; required if requesting 'affinity' and
               'pi_affinity_volume' is not provided.
        :param pulumi.Input[_builtins.str] pi_affinity_policy: Affinity policy for data volume being created; ignored if 'pi_volume_pool' provided; for policy 'affinity' requires one
               of 'pi_affinity_instance' or 'pi_affinity_volume' to be specified; for policy 'anti-affinity' requires one of
               'pi_anti_affinity_instances' or 'pi_anti_affinity_volumes' to be specified; Allowable values: 'affinity',
               'anti-affinity'.
        :param pulumi.Input[_builtins.str] pi_affinity_volume: Volume (ID or Name) to base volume affinity policy against; required if requesting 'affinity' and 'pi_affinity_instance'
               is not provided.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_anti_affinity_instances: List of pvmInstances to base volume anti-affinity policy against; required if requesting 'anti-affinity' and
               'pi_anti_affinity_volumes' is not provided.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_anti_affinity_volumes: List of volumes to base volume anti-affinity policy against; required if requesting 'anti-affinity' and
               'pi_anti_affinity_instances' is not provided.
        :param pulumi.Input[_builtins.bool] pi_replication_enabled: Indicates if the volume should be replication enabled or not.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_replication_sites: List of replication sites for volume replication.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: The user tags attached to this resource.
        :param pulumi.Input[_builtins.str] pi_volume_pool: Volume pool where the volume will be created; if provided then 'pi_affinity_policy' values will be ignored.
        :param pulumi.Input[_builtins.bool] pi_volume_shareable: If set to true, the volume can be shared across Power Systems Virtual Server instances. If set to false, you can attach
               it only to one instance.
        :param pulumi.Input[_builtins.str] pi_volume_type: Type of disk, if diskType is not provided the disk type will default to 'tier3'
        """
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        pulumi.set(__self__, "pi_volume_name", pi_volume_name)
        pulumi.set(__self__, "pi_volume_size", pi_volume_size)
        if pi_affinity_instance is not None:
            pulumi.set(__self__, "pi_affinity_instance", pi_affinity_instance)
        if pi_affinity_policy is not None:
            pulumi.set(__self__, "pi_affinity_policy", pi_affinity_policy)
        if pi_affinity_volume is not None:
            pulumi.set(__self__, "pi_affinity_volume", pi_affinity_volume)
        if pi_anti_affinity_instances is not None:
            pulumi.set(__self__, "pi_anti_affinity_instances", pi_anti_affinity_instances)
        if pi_anti_affinity_volumes is not None:
            pulumi.set(__self__, "pi_anti_affinity_volumes", pi_anti_affinity_volumes)
        if pi_replication_enabled is not None:
            pulumi.set(__self__, "pi_replication_enabled", pi_replication_enabled)
        if pi_replication_sites is not None:
            pulumi.set(__self__, "pi_replication_sites", pi_replication_sites)
        if pi_user_tags is not None:
            pulumi.set(__self__, "pi_user_tags", pi_user_tags)
        if pi_volume_id is not None:
            pulumi.set(__self__, "pi_volume_id", pi_volume_id)
        if pi_volume_pool is not None:
            pulumi.set(__self__, "pi_volume_pool", pi_volume_pool)
        if pi_volume_shareable is not None:
            pulumi.set(__self__, "pi_volume_shareable", pi_volume_shareable)
        if pi_volume_type is not None:
            pulumi.set(__self__, "pi_volume_type", pi_volume_type)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piVolumeName")
    def pi_volume_name(self) -> pulumi.Input[_builtins.str]:
        """
        The name of the volume.
        """
        return pulumi.get(self, "pi_volume_name")

    @pi_volume_name.setter
    def pi_volume_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_volume_name", value)

    @_builtins.property
    @pulumi.getter(name="piVolumeSize")
    def pi_volume_size(self) -> pulumi.Input[_builtins.float]:
        """
        The size of the volume in GB.
        """
        return pulumi.get(self, "pi_volume_size")

    @pi_volume_size.setter
    def pi_volume_size(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "pi_volume_size", value)

    @_builtins.property
    @pulumi.getter(name="piAffinityInstance")
    def pi_affinity_instance(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        PVM Instance (ID or Name) to base volume affinity policy against; required if requesting 'affinity' and
        'pi_affinity_volume' is not provided.
        """
        return pulumi.get(self, "pi_affinity_instance")

    @pi_affinity_instance.setter
    def pi_affinity_instance(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_affinity_instance", value)

    @_builtins.property
    @pulumi.getter(name="piAffinityPolicy")
    def pi_affinity_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Affinity policy for data volume being created; ignored if 'pi_volume_pool' provided; for policy 'affinity' requires one
        of 'pi_affinity_instance' or 'pi_affinity_volume' to be specified; for policy 'anti-affinity' requires one of
        'pi_anti_affinity_instances' or 'pi_anti_affinity_volumes' to be specified; Allowable values: 'affinity',
        'anti-affinity'.
        """
        return pulumi.get(self, "pi_affinity_policy")

    @pi_affinity_policy.setter
    def pi_affinity_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_affinity_policy", value)

    @_builtins.property
    @pulumi.getter(name="piAffinityVolume")
    def pi_affinity_volume(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Volume (ID or Name) to base volume affinity policy against; required if requesting 'affinity' and 'pi_affinity_instance'
        is not provided.
        """
        return pulumi.get(self, "pi_affinity_volume")

    @pi_affinity_volume.setter
    def pi_affinity_volume(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_affinity_volume", value)

    @_builtins.property
    @pulumi.getter(name="piAntiAffinityInstances")
    def pi_anti_affinity_instances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of pvmInstances to base volume anti-affinity policy against; required if requesting 'anti-affinity' and
        'pi_anti_affinity_volumes' is not provided.
        """
        return pulumi.get(self, "pi_anti_affinity_instances")

    @pi_anti_affinity_instances.setter
    def pi_anti_affinity_instances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_anti_affinity_instances", value)

    @_builtins.property
    @pulumi.getter(name="piAntiAffinityVolumes")
    def pi_anti_affinity_volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of volumes to base volume anti-affinity policy against; required if requesting 'anti-affinity' and
        'pi_anti_affinity_instances' is not provided.
        """
        return pulumi.get(self, "pi_anti_affinity_volumes")

    @pi_anti_affinity_volumes.setter
    def pi_anti_affinity_volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_anti_affinity_volumes", value)

    @_builtins.property
    @pulumi.getter(name="piReplicationEnabled")
    def pi_replication_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if the volume should be replication enabled or not.
        """
        return pulumi.get(self, "pi_replication_enabled")

    @pi_replication_enabled.setter
    def pi_replication_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pi_replication_enabled", value)

    @_builtins.property
    @pulumi.getter(name="piReplicationSites")
    def pi_replication_sites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of replication sites for volume replication.
        """
        return pulumi.get(self, "pi_replication_sites")

    @pi_replication_sites.setter
    def pi_replication_sites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_replication_sites", value)

    @_builtins.property
    @pulumi.getter(name="piUserTags")
    def pi_user_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The user tags attached to this resource.
        """
        return pulumi.get(self, "pi_user_tags")

    @pi_user_tags.setter
    def pi_user_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_user_tags", value)

    @_builtins.property
    @pulumi.getter(name="piVolumeId")
    def pi_volume_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_volume_id")

    @pi_volume_id.setter
    def pi_volume_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_volume_id", value)

    @_builtins.property
    @pulumi.getter(name="piVolumePool")
    def pi_volume_pool(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Volume pool where the volume will be created; if provided then 'pi_affinity_policy' values will be ignored.
        """
        return pulumi.get(self, "pi_volume_pool")

    @pi_volume_pool.setter
    def pi_volume_pool(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_volume_pool", value)

    @_builtins.property
    @pulumi.getter(name="piVolumeShareable")
    def pi_volume_shareable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, the volume can be shared across Power Systems Virtual Server instances. If set to false, you can attach
        it only to one instance.
        """
        return pulumi.get(self, "pi_volume_shareable")

    @pi_volume_shareable.setter
    def pi_volume_shareable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pi_volume_shareable", value)

    @_builtins.property
    @pulumi.getter(name="piVolumeType")
    def pi_volume_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of disk, if diskType is not provided the disk type will default to 'tier3'
        """
        return pulumi.get(self, "pi_volume_type")

    @pi_volume_type.setter
    def pi_volume_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_volume_type", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiVolumeTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiVolumeTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _PiVolumeState:
    def __init__(__self__, *,
                 auxiliary: Optional[pulumi.Input[_builtins.bool]] = None,
                 auxiliary_volume_name: Optional[pulumi.Input[_builtins.str]] = None,
                 consistency_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_on_termination: Optional[pulumi.Input[_builtins.bool]] = None,
                 group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 io_throttle_rate: Optional[pulumi.Input[_builtins.str]] = None,
                 master_volume_name: Optional[pulumi.Input[_builtins.str]] = None,
                 mirroring_state: Optional[pulumi.Input[_builtins.str]] = None,
                 out_of_band_deleted: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_affinity_instance: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_affinity_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_affinity_volume: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_anti_affinity_instances: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_anti_affinity_volumes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_replication_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_replication_sites: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_volume_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_volume_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_volume_shareable: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_volume_size: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_volume_type: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_role: Optional[pulumi.Input[_builtins.str]] = None,
                 replication_sites: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 replication_status: Optional[pulumi.Input[_builtins.str]] = None,
                 replication_type: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['PiVolumeTimeoutsArgs']] = None,
                 volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_status: Optional[pulumi.Input[_builtins.str]] = None,
                 wwn: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering PiVolume resources.
        :param pulumi.Input[_builtins.bool] auxiliary: Indicates if the volume is auxiliary or not.
        :param pulumi.Input[_builtins.str] auxiliary_volume_name: The auxiliary volume name.
        :param pulumi.Input[_builtins.str] consistency_group_name: The consistency group name if volume is a part of volume group.
        :param pulumi.Input[_builtins.str] crn: The CRN of this resource.
        :param pulumi.Input[_builtins.bool] delete_on_termination: Indicates if the volume should be deleted when the server terminates.
        :param pulumi.Input[_builtins.str] group_id: The volume group id to which volume belongs.
        :param pulumi.Input[_builtins.str] io_throttle_rate: Amount of iops assigned to the volume.
        :param pulumi.Input[_builtins.str] master_volume_name: Indicates master volume name
        :param pulumi.Input[_builtins.str] mirroring_state: Mirroring state for replication enabled volume
        :param pulumi.Input[_builtins.bool] out_of_band_deleted: Indicates if the volume does not exist on storage controller.
        :param pulumi.Input[_builtins.str] pi_affinity_instance: PVM Instance (ID or Name) to base volume affinity policy against; required if requesting 'affinity' and
               'pi_affinity_volume' is not provided.
        :param pulumi.Input[_builtins.str] pi_affinity_policy: Affinity policy for data volume being created; ignored if 'pi_volume_pool' provided; for policy 'affinity' requires one
               of 'pi_affinity_instance' or 'pi_affinity_volume' to be specified; for policy 'anti-affinity' requires one of
               'pi_anti_affinity_instances' or 'pi_anti_affinity_volumes' to be specified; Allowable values: 'affinity',
               'anti-affinity'.
        :param pulumi.Input[_builtins.str] pi_affinity_volume: Volume (ID or Name) to base volume affinity policy against; required if requesting 'affinity' and 'pi_affinity_instance'
               is not provided.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_anti_affinity_instances: List of pvmInstances to base volume anti-affinity policy against; required if requesting 'anti-affinity' and
               'pi_anti_affinity_volumes' is not provided.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_anti_affinity_volumes: List of volumes to base volume anti-affinity policy against; required if requesting 'anti-affinity' and
               'pi_anti_affinity_instances' is not provided.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.bool] pi_replication_enabled: Indicates if the volume should be replication enabled or not.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_replication_sites: List of replication sites for volume replication.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: The user tags attached to this resource.
        :param pulumi.Input[_builtins.str] pi_volume_name: The name of the volume.
        :param pulumi.Input[_builtins.str] pi_volume_pool: Volume pool where the volume will be created; if provided then 'pi_affinity_policy' values will be ignored.
        :param pulumi.Input[_builtins.bool] pi_volume_shareable: If set to true, the volume can be shared across Power Systems Virtual Server instances. If set to false, you can attach
               it only to one instance.
        :param pulumi.Input[_builtins.float] pi_volume_size: The size of the volume in GB.
        :param pulumi.Input[_builtins.str] pi_volume_type: Type of disk, if diskType is not provided the disk type will default to 'tier3'
        :param pulumi.Input[_builtins.str] primary_role: Indicates whether 'master'/'auxiliary' volume is playing the primary role.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] replication_sites: List of replication sites for volume replication.
        :param pulumi.Input[_builtins.str] replication_status: The replication status of the volume.
        :param pulumi.Input[_builtins.str] replication_type: The replication type of the volume 'metro' or 'global'.
        :param pulumi.Input[_builtins.str] volume_id: The unique identifier of the volume.
        :param pulumi.Input[_builtins.str] volume_status: The status of the volume.
        :param pulumi.Input[_builtins.str] wwn: The world wide name of the volume.
        """
        if auxiliary is not None:
            pulumi.set(__self__, "auxiliary", auxiliary)
        if auxiliary_volume_name is not None:
            pulumi.set(__self__, "auxiliary_volume_name", auxiliary_volume_name)
        if consistency_group_name is not None:
            pulumi.set(__self__, "consistency_group_name", consistency_group_name)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if delete_on_termination is not None:
            pulumi.set(__self__, "delete_on_termination", delete_on_termination)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if io_throttle_rate is not None:
            pulumi.set(__self__, "io_throttle_rate", io_throttle_rate)
        if master_volume_name is not None:
            pulumi.set(__self__, "master_volume_name", master_volume_name)
        if mirroring_state is not None:
            pulumi.set(__self__, "mirroring_state", mirroring_state)
        if out_of_band_deleted is not None:
            pulumi.set(__self__, "out_of_band_deleted", out_of_band_deleted)
        if pi_affinity_instance is not None:
            pulumi.set(__self__, "pi_affinity_instance", pi_affinity_instance)
        if pi_affinity_policy is not None:
            pulumi.set(__self__, "pi_affinity_policy", pi_affinity_policy)
        if pi_affinity_volume is not None:
            pulumi.set(__self__, "pi_affinity_volume", pi_affinity_volume)
        if pi_anti_affinity_instances is not None:
            pulumi.set(__self__, "pi_anti_affinity_instances", pi_anti_affinity_instances)
        if pi_anti_affinity_volumes is not None:
            pulumi.set(__self__, "pi_anti_affinity_volumes", pi_anti_affinity_volumes)
        if pi_cloud_instance_id is not None:
            pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_replication_enabled is not None:
            pulumi.set(__self__, "pi_replication_enabled", pi_replication_enabled)
        if pi_replication_sites is not None:
            pulumi.set(__self__, "pi_replication_sites", pi_replication_sites)
        if pi_user_tags is not None:
            pulumi.set(__self__, "pi_user_tags", pi_user_tags)
        if pi_volume_id is not None:
            pulumi.set(__self__, "pi_volume_id", pi_volume_id)
        if pi_volume_name is not None:
            pulumi.set(__self__, "pi_volume_name", pi_volume_name)
        if pi_volume_pool is not None:
            pulumi.set(__self__, "pi_volume_pool", pi_volume_pool)
        if pi_volume_shareable is not None:
            pulumi.set(__self__, "pi_volume_shareable", pi_volume_shareable)
        if pi_volume_size is not None:
            pulumi.set(__self__, "pi_volume_size", pi_volume_size)
        if pi_volume_type is not None:
            pulumi.set(__self__, "pi_volume_type", pi_volume_type)
        if primary_role is not None:
            pulumi.set(__self__, "primary_role", primary_role)
        if replication_sites is not None:
            pulumi.set(__self__, "replication_sites", replication_sites)
        if replication_status is not None:
            pulumi.set(__self__, "replication_status", replication_status)
        if replication_type is not None:
            pulumi.set(__self__, "replication_type", replication_type)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)
        if volume_status is not None:
            pulumi.set(__self__, "volume_status", volume_status)
        if wwn is not None:
            pulumi.set(__self__, "wwn", wwn)

    @_builtins.property
    @pulumi.getter
    def auxiliary(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if the volume is auxiliary or not.
        """
        return pulumi.get(self, "auxiliary")

    @auxiliary.setter
    def auxiliary(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "auxiliary", value)

    @_builtins.property
    @pulumi.getter(name="auxiliaryVolumeName")
    def auxiliary_volume_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The auxiliary volume name.
        """
        return pulumi.get(self, "auxiliary_volume_name")

    @auxiliary_volume_name.setter
    def auxiliary_volume_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auxiliary_volume_name", value)

    @_builtins.property
    @pulumi.getter(name="consistencyGroupName")
    def consistency_group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The consistency group name if volume is a part of volume group.
        """
        return pulumi.get(self, "consistency_group_name")

    @consistency_group_name.setter
    def consistency_group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "consistency_group_name", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN of this resource.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="deleteOnTermination")
    def delete_on_termination(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if the volume should be deleted when the server terminates.
        """
        return pulumi.get(self, "delete_on_termination")

    @delete_on_termination.setter
    def delete_on_termination(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_on_termination", value)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The volume group id to which volume belongs.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_id", value)

    @_builtins.property
    @pulumi.getter(name="ioThrottleRate")
    def io_throttle_rate(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Amount of iops assigned to the volume.
        """
        return pulumi.get(self, "io_throttle_rate")

    @io_throttle_rate.setter
    def io_throttle_rate(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "io_throttle_rate", value)

    @_builtins.property
    @pulumi.getter(name="masterVolumeName")
    def master_volume_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates master volume name
        """
        return pulumi.get(self, "master_volume_name")

    @master_volume_name.setter
    def master_volume_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "master_volume_name", value)

    @_builtins.property
    @pulumi.getter(name="mirroringState")
    def mirroring_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Mirroring state for replication enabled volume
        """
        return pulumi.get(self, "mirroring_state")

    @mirroring_state.setter
    def mirroring_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mirroring_state", value)

    @_builtins.property
    @pulumi.getter(name="outOfBandDeleted")
    def out_of_band_deleted(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if the volume does not exist on storage controller.
        """
        return pulumi.get(self, "out_of_band_deleted")

    @out_of_band_deleted.setter
    def out_of_band_deleted(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "out_of_band_deleted", value)

    @_builtins.property
    @pulumi.getter(name="piAffinityInstance")
    def pi_affinity_instance(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        PVM Instance (ID or Name) to base volume affinity policy against; required if requesting 'affinity' and
        'pi_affinity_volume' is not provided.
        """
        return pulumi.get(self, "pi_affinity_instance")

    @pi_affinity_instance.setter
    def pi_affinity_instance(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_affinity_instance", value)

    @_builtins.property
    @pulumi.getter(name="piAffinityPolicy")
    def pi_affinity_policy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Affinity policy for data volume being created; ignored if 'pi_volume_pool' provided; for policy 'affinity' requires one
        of 'pi_affinity_instance' or 'pi_affinity_volume' to be specified; for policy 'anti-affinity' requires one of
        'pi_anti_affinity_instances' or 'pi_anti_affinity_volumes' to be specified; Allowable values: 'affinity',
        'anti-affinity'.
        """
        return pulumi.get(self, "pi_affinity_policy")

    @pi_affinity_policy.setter
    def pi_affinity_policy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_affinity_policy", value)

    @_builtins.property
    @pulumi.getter(name="piAffinityVolume")
    def pi_affinity_volume(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Volume (ID or Name) to base volume affinity policy against; required if requesting 'affinity' and 'pi_affinity_instance'
        is not provided.
        """
        return pulumi.get(self, "pi_affinity_volume")

    @pi_affinity_volume.setter
    def pi_affinity_volume(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_affinity_volume", value)

    @_builtins.property
    @pulumi.getter(name="piAntiAffinityInstances")
    def pi_anti_affinity_instances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of pvmInstances to base volume anti-affinity policy against; required if requesting 'anti-affinity' and
        'pi_anti_affinity_volumes' is not provided.
        """
        return pulumi.get(self, "pi_anti_affinity_instances")

    @pi_anti_affinity_instances.setter
    def pi_anti_affinity_instances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_anti_affinity_instances", value)

    @_builtins.property
    @pulumi.getter(name="piAntiAffinityVolumes")
    def pi_anti_affinity_volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of volumes to base volume anti-affinity policy against; required if requesting 'anti-affinity' and
        'pi_anti_affinity_instances' is not provided.
        """
        return pulumi.get(self, "pi_anti_affinity_volumes")

    @pi_anti_affinity_volumes.setter
    def pi_anti_affinity_volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_anti_affinity_volumes", value)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piReplicationEnabled")
    def pi_replication_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if the volume should be replication enabled or not.
        """
        return pulumi.get(self, "pi_replication_enabled")

    @pi_replication_enabled.setter
    def pi_replication_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pi_replication_enabled", value)

    @_builtins.property
    @pulumi.getter(name="piReplicationSites")
    def pi_replication_sites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of replication sites for volume replication.
        """
        return pulumi.get(self, "pi_replication_sites")

    @pi_replication_sites.setter
    def pi_replication_sites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_replication_sites", value)

    @_builtins.property
    @pulumi.getter(name="piUserTags")
    def pi_user_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The user tags attached to this resource.
        """
        return pulumi.get(self, "pi_user_tags")

    @pi_user_tags.setter
    def pi_user_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "pi_user_tags", value)

    @_builtins.property
    @pulumi.getter(name="piVolumeId")
    def pi_volume_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_volume_id")

    @pi_volume_id.setter
    def pi_volume_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_volume_id", value)

    @_builtins.property
    @pulumi.getter(name="piVolumeName")
    def pi_volume_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the volume.
        """
        return pulumi.get(self, "pi_volume_name")

    @pi_volume_name.setter
    def pi_volume_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_volume_name", value)

    @_builtins.property
    @pulumi.getter(name="piVolumePool")
    def pi_volume_pool(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Volume pool where the volume will be created; if provided then 'pi_affinity_policy' values will be ignored.
        """
        return pulumi.get(self, "pi_volume_pool")

    @pi_volume_pool.setter
    def pi_volume_pool(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_volume_pool", value)

    @_builtins.property
    @pulumi.getter(name="piVolumeShareable")
    def pi_volume_shareable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, the volume can be shared across Power Systems Virtual Server instances. If set to false, you can attach
        it only to one instance.
        """
        return pulumi.get(self, "pi_volume_shareable")

    @pi_volume_shareable.setter
    def pi_volume_shareable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "pi_volume_shareable", value)

    @_builtins.property
    @pulumi.getter(name="piVolumeSize")
    def pi_volume_size(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The size of the volume in GB.
        """
        return pulumi.get(self, "pi_volume_size")

    @pi_volume_size.setter
    def pi_volume_size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "pi_volume_size", value)

    @_builtins.property
    @pulumi.getter(name="piVolumeType")
    def pi_volume_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of disk, if diskType is not provided the disk type will default to 'tier3'
        """
        return pulumi.get(self, "pi_volume_type")

    @pi_volume_type.setter
    def pi_volume_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_volume_type", value)

    @_builtins.property
    @pulumi.getter(name="primaryRole")
    def primary_role(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates whether 'master'/'auxiliary' volume is playing the primary role.
        """
        return pulumi.get(self, "primary_role")

    @primary_role.setter
    def primary_role(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "primary_role", value)

    @_builtins.property
    @pulumi.getter(name="replicationSites")
    def replication_sites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of replication sites for volume replication.
        """
        return pulumi.get(self, "replication_sites")

    @replication_sites.setter
    def replication_sites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "replication_sites", value)

    @_builtins.property
    @pulumi.getter(name="replicationStatus")
    def replication_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The replication status of the volume.
        """
        return pulumi.get(self, "replication_status")

    @replication_status.setter
    def replication_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "replication_status", value)

    @_builtins.property
    @pulumi.getter(name="replicationType")
    def replication_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The replication type of the volume 'metro' or 'global'.
        """
        return pulumi.get(self, "replication_type")

    @replication_type.setter
    def replication_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "replication_type", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiVolumeTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiVolumeTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier of the volume.
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume_id", value)

    @_builtins.property
    @pulumi.getter(name="volumeStatus")
    def volume_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the volume.
        """
        return pulumi.get(self, "volume_status")

    @volume_status.setter
    def volume_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume_status", value)

    @_builtins.property
    @pulumi.getter
    def wwn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The world wide name of the volume.
        """
        return pulumi.get(self, "wwn")

    @wwn.setter
    def wwn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "wwn", value)


@pulumi.type_token("ibm:index/piVolume:PiVolume")
class PiVolume(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_affinity_instance: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_affinity_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_affinity_volume: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_anti_affinity_instances: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_anti_affinity_volumes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_replication_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_replication_sites: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_volume_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_volume_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_volume_shareable: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_volume_size: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_volume_type: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiVolumeTimeoutsArgs', 'PiVolumeTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a PiVolume resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] pi_affinity_instance: PVM Instance (ID or Name) to base volume affinity policy against; required if requesting 'affinity' and
               'pi_affinity_volume' is not provided.
        :param pulumi.Input[_builtins.str] pi_affinity_policy: Affinity policy for data volume being created; ignored if 'pi_volume_pool' provided; for policy 'affinity' requires one
               of 'pi_affinity_instance' or 'pi_affinity_volume' to be specified; for policy 'anti-affinity' requires one of
               'pi_anti_affinity_instances' or 'pi_anti_affinity_volumes' to be specified; Allowable values: 'affinity',
               'anti-affinity'.
        :param pulumi.Input[_builtins.str] pi_affinity_volume: Volume (ID or Name) to base volume affinity policy against; required if requesting 'affinity' and 'pi_affinity_instance'
               is not provided.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_anti_affinity_instances: List of pvmInstances to base volume anti-affinity policy against; required if requesting 'anti-affinity' and
               'pi_anti_affinity_volumes' is not provided.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_anti_affinity_volumes: List of volumes to base volume anti-affinity policy against; required if requesting 'anti-affinity' and
               'pi_anti_affinity_instances' is not provided.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.bool] pi_replication_enabled: Indicates if the volume should be replication enabled or not.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_replication_sites: List of replication sites for volume replication.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: The user tags attached to this resource.
        :param pulumi.Input[_builtins.str] pi_volume_name: The name of the volume.
        :param pulumi.Input[_builtins.str] pi_volume_pool: Volume pool where the volume will be created; if provided then 'pi_affinity_policy' values will be ignored.
        :param pulumi.Input[_builtins.bool] pi_volume_shareable: If set to true, the volume can be shared across Power Systems Virtual Server instances. If set to false, you can attach
               it only to one instance.
        :param pulumi.Input[_builtins.float] pi_volume_size: The size of the volume in GB.
        :param pulumi.Input[_builtins.str] pi_volume_type: Type of disk, if diskType is not provided the disk type will default to 'tier3'
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PiVolumeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PiVolume resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PiVolumeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PiVolumeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_affinity_instance: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_affinity_policy: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_affinity_volume: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_anti_affinity_instances: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_anti_affinity_volumes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_replication_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_replication_sites: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 pi_volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_volume_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_volume_pool: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_volume_shareable: Optional[pulumi.Input[_builtins.bool]] = None,
                 pi_volume_size: Optional[pulumi.Input[_builtins.float]] = None,
                 pi_volume_type: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiVolumeTimeoutsArgs', 'PiVolumeTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PiVolumeArgs.__new__(PiVolumeArgs)

            __props__.__dict__["pi_affinity_instance"] = pi_affinity_instance
            __props__.__dict__["pi_affinity_policy"] = pi_affinity_policy
            __props__.__dict__["pi_affinity_volume"] = pi_affinity_volume
            __props__.__dict__["pi_anti_affinity_instances"] = pi_anti_affinity_instances
            __props__.__dict__["pi_anti_affinity_volumes"] = pi_anti_affinity_volumes
            if pi_cloud_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'pi_cloud_instance_id'")
            __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
            __props__.__dict__["pi_replication_enabled"] = pi_replication_enabled
            __props__.__dict__["pi_replication_sites"] = pi_replication_sites
            __props__.__dict__["pi_user_tags"] = pi_user_tags
            __props__.__dict__["pi_volume_id"] = pi_volume_id
            if pi_volume_name is None and not opts.urn:
                raise TypeError("Missing required property 'pi_volume_name'")
            __props__.__dict__["pi_volume_name"] = pi_volume_name
            __props__.__dict__["pi_volume_pool"] = pi_volume_pool
            __props__.__dict__["pi_volume_shareable"] = pi_volume_shareable
            if pi_volume_size is None and not opts.urn:
                raise TypeError("Missing required property 'pi_volume_size'")
            __props__.__dict__["pi_volume_size"] = pi_volume_size
            __props__.__dict__["pi_volume_type"] = pi_volume_type
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["auxiliary"] = None
            __props__.__dict__["auxiliary_volume_name"] = None
            __props__.__dict__["consistency_group_name"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["delete_on_termination"] = None
            __props__.__dict__["group_id"] = None
            __props__.__dict__["io_throttle_rate"] = None
            __props__.__dict__["master_volume_name"] = None
            __props__.__dict__["mirroring_state"] = None
            __props__.__dict__["out_of_band_deleted"] = None
            __props__.__dict__["primary_role"] = None
            __props__.__dict__["replication_sites"] = None
            __props__.__dict__["replication_status"] = None
            __props__.__dict__["replication_type"] = None
            __props__.__dict__["volume_id"] = None
            __props__.__dict__["volume_status"] = None
            __props__.__dict__["wwn"] = None
        super(PiVolume, __self__).__init__(
            'ibm:index/piVolume:PiVolume',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auxiliary: Optional[pulumi.Input[_builtins.bool]] = None,
            auxiliary_volume_name: Optional[pulumi.Input[_builtins.str]] = None,
            consistency_group_name: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            delete_on_termination: Optional[pulumi.Input[_builtins.bool]] = None,
            group_id: Optional[pulumi.Input[_builtins.str]] = None,
            io_throttle_rate: Optional[pulumi.Input[_builtins.str]] = None,
            master_volume_name: Optional[pulumi.Input[_builtins.str]] = None,
            mirroring_state: Optional[pulumi.Input[_builtins.str]] = None,
            out_of_band_deleted: Optional[pulumi.Input[_builtins.bool]] = None,
            pi_affinity_instance: Optional[pulumi.Input[_builtins.str]] = None,
            pi_affinity_policy: Optional[pulumi.Input[_builtins.str]] = None,
            pi_affinity_volume: Optional[pulumi.Input[_builtins.str]] = None,
            pi_anti_affinity_instances: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            pi_anti_affinity_volumes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_replication_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            pi_replication_sites: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            pi_user_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            pi_volume_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_volume_name: Optional[pulumi.Input[_builtins.str]] = None,
            pi_volume_pool: Optional[pulumi.Input[_builtins.str]] = None,
            pi_volume_shareable: Optional[pulumi.Input[_builtins.bool]] = None,
            pi_volume_size: Optional[pulumi.Input[_builtins.float]] = None,
            pi_volume_type: Optional[pulumi.Input[_builtins.str]] = None,
            primary_role: Optional[pulumi.Input[_builtins.str]] = None,
            replication_sites: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            replication_status: Optional[pulumi.Input[_builtins.str]] = None,
            replication_type: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['PiVolumeTimeoutsArgs', 'PiVolumeTimeoutsArgsDict']]] = None,
            volume_id: Optional[pulumi.Input[_builtins.str]] = None,
            volume_status: Optional[pulumi.Input[_builtins.str]] = None,
            wwn: Optional[pulumi.Input[_builtins.str]] = None) -> 'PiVolume':
        """
        Get an existing PiVolume resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] auxiliary: Indicates if the volume is auxiliary or not.
        :param pulumi.Input[_builtins.str] auxiliary_volume_name: The auxiliary volume name.
        :param pulumi.Input[_builtins.str] consistency_group_name: The consistency group name if volume is a part of volume group.
        :param pulumi.Input[_builtins.str] crn: The CRN of this resource.
        :param pulumi.Input[_builtins.bool] delete_on_termination: Indicates if the volume should be deleted when the server terminates.
        :param pulumi.Input[_builtins.str] group_id: The volume group id to which volume belongs.
        :param pulumi.Input[_builtins.str] io_throttle_rate: Amount of iops assigned to the volume.
        :param pulumi.Input[_builtins.str] master_volume_name: Indicates master volume name
        :param pulumi.Input[_builtins.str] mirroring_state: Mirroring state for replication enabled volume
        :param pulumi.Input[_builtins.bool] out_of_band_deleted: Indicates if the volume does not exist on storage controller.
        :param pulumi.Input[_builtins.str] pi_affinity_instance: PVM Instance (ID or Name) to base volume affinity policy against; required if requesting 'affinity' and
               'pi_affinity_volume' is not provided.
        :param pulumi.Input[_builtins.str] pi_affinity_policy: Affinity policy for data volume being created; ignored if 'pi_volume_pool' provided; for policy 'affinity' requires one
               of 'pi_affinity_instance' or 'pi_affinity_volume' to be specified; for policy 'anti-affinity' requires one of
               'pi_anti_affinity_instances' or 'pi_anti_affinity_volumes' to be specified; Allowable values: 'affinity',
               'anti-affinity'.
        :param pulumi.Input[_builtins.str] pi_affinity_volume: Volume (ID or Name) to base volume affinity policy against; required if requesting 'affinity' and 'pi_affinity_instance'
               is not provided.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_anti_affinity_instances: List of pvmInstances to base volume anti-affinity policy against; required if requesting 'anti-affinity' and
               'pi_anti_affinity_volumes' is not provided.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_anti_affinity_volumes: List of volumes to base volume anti-affinity policy against; required if requesting 'anti-affinity' and
               'pi_anti_affinity_instances' is not provided.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.bool] pi_replication_enabled: Indicates if the volume should be replication enabled or not.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_replication_sites: List of replication sites for volume replication.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] pi_user_tags: The user tags attached to this resource.
        :param pulumi.Input[_builtins.str] pi_volume_name: The name of the volume.
        :param pulumi.Input[_builtins.str] pi_volume_pool: Volume pool where the volume will be created; if provided then 'pi_affinity_policy' values will be ignored.
        :param pulumi.Input[_builtins.bool] pi_volume_shareable: If set to true, the volume can be shared across Power Systems Virtual Server instances. If set to false, you can attach
               it only to one instance.
        :param pulumi.Input[_builtins.float] pi_volume_size: The size of the volume in GB.
        :param pulumi.Input[_builtins.str] pi_volume_type: Type of disk, if diskType is not provided the disk type will default to 'tier3'
        :param pulumi.Input[_builtins.str] primary_role: Indicates whether 'master'/'auxiliary' volume is playing the primary role.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] replication_sites: List of replication sites for volume replication.
        :param pulumi.Input[_builtins.str] replication_status: The replication status of the volume.
        :param pulumi.Input[_builtins.str] replication_type: The replication type of the volume 'metro' or 'global'.
        :param pulumi.Input[_builtins.str] volume_id: The unique identifier of the volume.
        :param pulumi.Input[_builtins.str] volume_status: The status of the volume.
        :param pulumi.Input[_builtins.str] wwn: The world wide name of the volume.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PiVolumeState.__new__(_PiVolumeState)

        __props__.__dict__["auxiliary"] = auxiliary
        __props__.__dict__["auxiliary_volume_name"] = auxiliary_volume_name
        __props__.__dict__["consistency_group_name"] = consistency_group_name
        __props__.__dict__["crn"] = crn
        __props__.__dict__["delete_on_termination"] = delete_on_termination
        __props__.__dict__["group_id"] = group_id
        __props__.__dict__["io_throttle_rate"] = io_throttle_rate
        __props__.__dict__["master_volume_name"] = master_volume_name
        __props__.__dict__["mirroring_state"] = mirroring_state
        __props__.__dict__["out_of_band_deleted"] = out_of_band_deleted
        __props__.__dict__["pi_affinity_instance"] = pi_affinity_instance
        __props__.__dict__["pi_affinity_policy"] = pi_affinity_policy
        __props__.__dict__["pi_affinity_volume"] = pi_affinity_volume
        __props__.__dict__["pi_anti_affinity_instances"] = pi_anti_affinity_instances
        __props__.__dict__["pi_anti_affinity_volumes"] = pi_anti_affinity_volumes
        __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
        __props__.__dict__["pi_replication_enabled"] = pi_replication_enabled
        __props__.__dict__["pi_replication_sites"] = pi_replication_sites
        __props__.__dict__["pi_user_tags"] = pi_user_tags
        __props__.__dict__["pi_volume_id"] = pi_volume_id
        __props__.__dict__["pi_volume_name"] = pi_volume_name
        __props__.__dict__["pi_volume_pool"] = pi_volume_pool
        __props__.__dict__["pi_volume_shareable"] = pi_volume_shareable
        __props__.__dict__["pi_volume_size"] = pi_volume_size
        __props__.__dict__["pi_volume_type"] = pi_volume_type
        __props__.__dict__["primary_role"] = primary_role
        __props__.__dict__["replication_sites"] = replication_sites
        __props__.__dict__["replication_status"] = replication_status
        __props__.__dict__["replication_type"] = replication_type
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["volume_id"] = volume_id
        __props__.__dict__["volume_status"] = volume_status
        __props__.__dict__["wwn"] = wwn
        return PiVolume(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def auxiliary(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates if the volume is auxiliary or not.
        """
        return pulumi.get(self, "auxiliary")

    @_builtins.property
    @pulumi.getter(name="auxiliaryVolumeName")
    def auxiliary_volume_name(self) -> pulumi.Output[_builtins.str]:
        """
        The auxiliary volume name.
        """
        return pulumi.get(self, "auxiliary_volume_name")

    @_builtins.property
    @pulumi.getter(name="consistencyGroupName")
    def consistency_group_name(self) -> pulumi.Output[_builtins.str]:
        """
        The consistency group name if volume is a part of volume group.
        """
        return pulumi.get(self, "consistency_group_name")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The CRN of this resource.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="deleteOnTermination")
    def delete_on_termination(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates if the volume should be deleted when the server terminates.
        """
        return pulumi.get(self, "delete_on_termination")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Output[_builtins.str]:
        """
        The volume group id to which volume belongs.
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="ioThrottleRate")
    def io_throttle_rate(self) -> pulumi.Output[_builtins.str]:
        """
        Amount of iops assigned to the volume.
        """
        return pulumi.get(self, "io_throttle_rate")

    @_builtins.property
    @pulumi.getter(name="masterVolumeName")
    def master_volume_name(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates master volume name
        """
        return pulumi.get(self, "master_volume_name")

    @_builtins.property
    @pulumi.getter(name="mirroringState")
    def mirroring_state(self) -> pulumi.Output[_builtins.str]:
        """
        Mirroring state for replication enabled volume
        """
        return pulumi.get(self, "mirroring_state")

    @_builtins.property
    @pulumi.getter(name="outOfBandDeleted")
    def out_of_band_deleted(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates if the volume does not exist on storage controller.
        """
        return pulumi.get(self, "out_of_band_deleted")

    @_builtins.property
    @pulumi.getter(name="piAffinityInstance")
    def pi_affinity_instance(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        PVM Instance (ID or Name) to base volume affinity policy against; required if requesting 'affinity' and
        'pi_affinity_volume' is not provided.
        """
        return pulumi.get(self, "pi_affinity_instance")

    @_builtins.property
    @pulumi.getter(name="piAffinityPolicy")
    def pi_affinity_policy(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Affinity policy for data volume being created; ignored if 'pi_volume_pool' provided; for policy 'affinity' requires one
        of 'pi_affinity_instance' or 'pi_affinity_volume' to be specified; for policy 'anti-affinity' requires one of
        'pi_anti_affinity_instances' or 'pi_anti_affinity_volumes' to be specified; Allowable values: 'affinity',
        'anti-affinity'.
        """
        return pulumi.get(self, "pi_affinity_policy")

    @_builtins.property
    @pulumi.getter(name="piAffinityVolume")
    def pi_affinity_volume(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Volume (ID or Name) to base volume affinity policy against; required if requesting 'affinity' and 'pi_affinity_instance'
        is not provided.
        """
        return pulumi.get(self, "pi_affinity_volume")

    @_builtins.property
    @pulumi.getter(name="piAntiAffinityInstances")
    def pi_anti_affinity_instances(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of pvmInstances to base volume anti-affinity policy against; required if requesting 'anti-affinity' and
        'pi_anti_affinity_volumes' is not provided.
        """
        return pulumi.get(self, "pi_anti_affinity_instances")

    @_builtins.property
    @pulumi.getter(name="piAntiAffinityVolumes")
    def pi_anti_affinity_volumes(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of volumes to base volume anti-affinity policy against; required if requesting 'anti-affinity' and
        'pi_anti_affinity_instances' is not provided.
        """
        return pulumi.get(self, "pi_anti_affinity_volumes")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piReplicationEnabled")
    def pi_replication_enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates if the volume should be replication enabled or not.
        """
        return pulumi.get(self, "pi_replication_enabled")

    @_builtins.property
    @pulumi.getter(name="piReplicationSites")
    def pi_replication_sites(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of replication sites for volume replication.
        """
        return pulumi.get(self, "pi_replication_sites")

    @_builtins.property
    @pulumi.getter(name="piUserTags")
    def pi_user_tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The user tags attached to this resource.
        """
        return pulumi.get(self, "pi_user_tags")

    @_builtins.property
    @pulumi.getter(name="piVolumeId")
    def pi_volume_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "pi_volume_id")

    @_builtins.property
    @pulumi.getter(name="piVolumeName")
    def pi_volume_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the volume.
        """
        return pulumi.get(self, "pi_volume_name")

    @_builtins.property
    @pulumi.getter(name="piVolumePool")
    def pi_volume_pool(self) -> pulumi.Output[_builtins.str]:
        """
        Volume pool where the volume will be created; if provided then 'pi_affinity_policy' values will be ignored.
        """
        return pulumi.get(self, "pi_volume_pool")

    @_builtins.property
    @pulumi.getter(name="piVolumeShareable")
    def pi_volume_shareable(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        If set to true, the volume can be shared across Power Systems Virtual Server instances. If set to false, you can attach
        it only to one instance.
        """
        return pulumi.get(self, "pi_volume_shareable")

    @_builtins.property
    @pulumi.getter(name="piVolumeSize")
    def pi_volume_size(self) -> pulumi.Output[_builtins.float]:
        """
        The size of the volume in GB.
        """
        return pulumi.get(self, "pi_volume_size")

    @_builtins.property
    @pulumi.getter(name="piVolumeType")
    def pi_volume_type(self) -> pulumi.Output[_builtins.str]:
        """
        Type of disk, if diskType is not provided the disk type will default to 'tier3'
        """
        return pulumi.get(self, "pi_volume_type")

    @_builtins.property
    @pulumi.getter(name="primaryRole")
    def primary_role(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates whether 'master'/'auxiliary' volume is playing the primary role.
        """
        return pulumi.get(self, "primary_role")

    @_builtins.property
    @pulumi.getter(name="replicationSites")
    def replication_sites(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of replication sites for volume replication.
        """
        return pulumi.get(self, "replication_sites")

    @_builtins.property
    @pulumi.getter(name="replicationStatus")
    def replication_status(self) -> pulumi.Output[_builtins.str]:
        """
        The replication status of the volume.
        """
        return pulumi.get(self, "replication_status")

    @_builtins.property
    @pulumi.getter(name="replicationType")
    def replication_type(self) -> pulumi.Output[_builtins.str]:
        """
        The replication type of the volume 'metro' or 'global'.
        """
        return pulumi.get(self, "replication_type")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.PiVolumeTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier of the volume.
        """
        return pulumi.get(self, "volume_id")

    @_builtins.property
    @pulumi.getter(name="volumeStatus")
    def volume_status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the volume.
        """
        return pulumi.get(self, "volume_status")

    @_builtins.property
    @pulumi.getter
    def wwn(self) -> pulumi.Output[_builtins.str]:
        """
        The world wide name of the volume.
        """
        return pulumi.get(self, "wwn")

