# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetBackupRecoveryConnectorGetUsersResult',
    'AwaitableGetBackupRecoveryConnectorGetUsersResult',
    'get_backup_recovery_connector_get_users',
    'get_backup_recovery_connector_get_users_output',
]

@pulumi.output_type
class GetBackupRecoveryConnectorGetUsersResult:
    """
    A collection of values returned by getBackupRecoveryConnectorGetUsers.
    """
    def __init__(__self__, all_under_hierarchy=None, domain=None, email_addresses=None, id=None, partial_match=None, session_name_cookie=None, tenant_ids=None, usernames=None, users=None):
        if all_under_hierarchy and not isinstance(all_under_hierarchy, bool):
            raise TypeError("Expected argument 'all_under_hierarchy' to be a bool")
        pulumi.set(__self__, "all_under_hierarchy", all_under_hierarchy)
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if email_addresses and not isinstance(email_addresses, list):
            raise TypeError("Expected argument 'email_addresses' to be a list")
        pulumi.set(__self__, "email_addresses", email_addresses)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if partial_match and not isinstance(partial_match, bool):
            raise TypeError("Expected argument 'partial_match' to be a bool")
        pulumi.set(__self__, "partial_match", partial_match)
        if session_name_cookie and not isinstance(session_name_cookie, str):
            raise TypeError("Expected argument 'session_name_cookie' to be a str")
        pulumi.set(__self__, "session_name_cookie", session_name_cookie)
        if tenant_ids and not isinstance(tenant_ids, list):
            raise TypeError("Expected argument 'tenant_ids' to be a list")
        pulumi.set(__self__, "tenant_ids", tenant_ids)
        if usernames and not isinstance(usernames, list):
            raise TypeError("Expected argument 'usernames' to be a list")
        pulumi.set(__self__, "usernames", usernames)
        if users and not isinstance(users, list):
            raise TypeError("Expected argument 'users' to be a list")
        pulumi.set(__self__, "users", users)

    @_builtins.property
    @pulumi.getter(name="allUnderHierarchy")
    def all_under_hierarchy(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "all_under_hierarchy")

    @_builtins.property
    @pulumi.getter
    def domain(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "domain")

    @_builtins.property
    @pulumi.getter(name="emailAddresses")
    def email_addresses(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "email_addresses")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="partialMatch")
    def partial_match(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "partial_match")

    @_builtins.property
    @pulumi.getter(name="sessionNameCookie")
    def session_name_cookie(self) -> _builtins.str:
        return pulumi.get(self, "session_name_cookie")

    @_builtins.property
    @pulumi.getter(name="tenantIds")
    def tenant_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "tenant_ids")

    @_builtins.property
    @pulumi.getter
    def usernames(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "usernames")

    @_builtins.property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetBackupRecoveryConnectorGetUsersUserResult']:
        return pulumi.get(self, "users")


class AwaitableGetBackupRecoveryConnectorGetUsersResult(GetBackupRecoveryConnectorGetUsersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupRecoveryConnectorGetUsersResult(
            all_under_hierarchy=self.all_under_hierarchy,
            domain=self.domain,
            email_addresses=self.email_addresses,
            id=self.id,
            partial_match=self.partial_match,
            session_name_cookie=self.session_name_cookie,
            tenant_ids=self.tenant_ids,
            usernames=self.usernames,
            users=self.users)


def get_backup_recovery_connector_get_users(all_under_hierarchy: Optional[_builtins.bool] = None,
                                            domain: Optional[_builtins.str] = None,
                                            email_addresses: Optional[Sequence[_builtins.str]] = None,
                                            id: Optional[_builtins.str] = None,
                                            partial_match: Optional[_builtins.bool] = None,
                                            session_name_cookie: Optional[_builtins.str] = None,
                                            tenant_ids: Optional[Sequence[_builtins.str]] = None,
                                            usernames: Optional[Sequence[_builtins.str]] = None,
                                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupRecoveryConnectorGetUsersResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['allUnderHierarchy'] = all_under_hierarchy
    __args__['domain'] = domain
    __args__['emailAddresses'] = email_addresses
    __args__['id'] = id
    __args__['partialMatch'] = partial_match
    __args__['sessionNameCookie'] = session_name_cookie
    __args__['tenantIds'] = tenant_ids
    __args__['usernames'] = usernames
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getBackupRecoveryConnectorGetUsers:getBackupRecoveryConnectorGetUsers', __args__, opts=opts, typ=GetBackupRecoveryConnectorGetUsersResult, package_ref=_utilities.get_package()).value

    return AwaitableGetBackupRecoveryConnectorGetUsersResult(
        all_under_hierarchy=pulumi.get(__ret__, 'all_under_hierarchy'),
        domain=pulumi.get(__ret__, 'domain'),
        email_addresses=pulumi.get(__ret__, 'email_addresses'),
        id=pulumi.get(__ret__, 'id'),
        partial_match=pulumi.get(__ret__, 'partial_match'),
        session_name_cookie=pulumi.get(__ret__, 'session_name_cookie'),
        tenant_ids=pulumi.get(__ret__, 'tenant_ids'),
        usernames=pulumi.get(__ret__, 'usernames'),
        users=pulumi.get(__ret__, 'users'))
def get_backup_recovery_connector_get_users_output(all_under_hierarchy: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                                   domain: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                   email_addresses: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                   id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                   partial_match: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                                   session_name_cookie: Optional[pulumi.Input[_builtins.str]] = None,
                                                   tenant_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                   usernames: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBackupRecoveryConnectorGetUsersResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['allUnderHierarchy'] = all_under_hierarchy
    __args__['domain'] = domain
    __args__['emailAddresses'] = email_addresses
    __args__['id'] = id
    __args__['partialMatch'] = partial_match
    __args__['sessionNameCookie'] = session_name_cookie
    __args__['tenantIds'] = tenant_ids
    __args__['usernames'] = usernames
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getBackupRecoveryConnectorGetUsers:getBackupRecoveryConnectorGetUsers', __args__, opts=opts, typ=GetBackupRecoveryConnectorGetUsersResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetBackupRecoveryConnectorGetUsersResult(
        all_under_hierarchy=pulumi.get(__response__, 'all_under_hierarchy'),
        domain=pulumi.get(__response__, 'domain'),
        email_addresses=pulumi.get(__response__, 'email_addresses'),
        id=pulumi.get(__response__, 'id'),
        partial_match=pulumi.get(__response__, 'partial_match'),
        session_name_cookie=pulumi.get(__response__, 'session_name_cookie'),
        tenant_ids=pulumi.get(__response__, 'tenant_ids'),
        usernames=pulumi.get(__response__, 'usernames'),
        users=pulumi.get(__response__, 'users')))
