# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetIsSecurityGroupTargetResult',
    'AwaitableGetIsSecurityGroupTargetResult',
    'get_is_security_group_target',
    'get_is_security_group_target_output',
]

@pulumi.output_type
class GetIsSecurityGroupTargetResult:
    """
    A collection of values returned by getIsSecurityGroupTarget.
    """
    def __init__(__self__, crn=None, id=None, more_info=None, name=None, resource_type=None, security_group=None, target=None):
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if more_info and not isinstance(more_info, str):
            raise TypeError("Expected argument 'more_info' to be a str")
        pulumi.set(__self__, "more_info", more_info)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if security_group and not isinstance(security_group, str):
            raise TypeError("Expected argument 'security_group' to be a str")
        pulumi.set(__self__, "security_group", security_group)
        if target and not isinstance(target, str):
            raise TypeError("Expected argument 'target' to be a str")
        pulumi.set(__self__, "target", target)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="moreInfo")
    def more_info(self) -> _builtins.str:
        return pulumi.get(self, "more_info")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="securityGroup")
    def security_group(self) -> _builtins.str:
        return pulumi.get(self, "security_group")

    @_builtins.property
    @pulumi.getter
    def target(self) -> _builtins.str:
        return pulumi.get(self, "target")


class AwaitableGetIsSecurityGroupTargetResult(GetIsSecurityGroupTargetResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsSecurityGroupTargetResult(
            crn=self.crn,
            id=self.id,
            more_info=self.more_info,
            name=self.name,
            resource_type=self.resource_type,
            security_group=self.security_group,
            target=self.target)


def get_is_security_group_target(id: Optional[_builtins.str] = None,
                                 name: Optional[_builtins.str] = None,
                                 security_group: Optional[_builtins.str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsSecurityGroupTargetResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['securityGroup'] = security_group
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsSecurityGroupTarget:getIsSecurityGroupTarget', __args__, opts=opts, typ=GetIsSecurityGroupTargetResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsSecurityGroupTargetResult(
        crn=pulumi.get(__ret__, 'crn'),
        id=pulumi.get(__ret__, 'id'),
        more_info=pulumi.get(__ret__, 'more_info'),
        name=pulumi.get(__ret__, 'name'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        security_group=pulumi.get(__ret__, 'security_group'),
        target=pulumi.get(__ret__, 'target'))
def get_is_security_group_target_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        name: Optional[pulumi.Input[_builtins.str]] = None,
                                        security_group: Optional[pulumi.Input[_builtins.str]] = None,
                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsSecurityGroupTargetResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['securityGroup'] = security_group
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsSecurityGroupTarget:getIsSecurityGroupTarget', __args__, opts=opts, typ=GetIsSecurityGroupTargetResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsSecurityGroupTargetResult(
        crn=pulumi.get(__response__, 'crn'),
        id=pulumi.get(__response__, 'id'),
        more_info=pulumi.get(__response__, 'more_info'),
        name=pulumi.get(__response__, 'name'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        security_group=pulumi.get(__response__, 'security_group'),
        target=pulumi.get(__response__, 'target')))
