# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['FunctionPackageArgs', 'FunctionPackage']

@pulumi.input_type
class FunctionPackageArgs:
    def __init__(__self__, *,
                 namespace: pulumi.Input[_builtins.str],
                 bind_package_name: Optional[pulumi.Input[_builtins.str]] = None,
                 function_package_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 publish: Optional[pulumi.Input[_builtins.bool]] = None,
                 user_defined_annotations: Optional[pulumi.Input[_builtins.str]] = None,
                 user_defined_parameters: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a FunctionPackage resource.
        :param pulumi.Input[_builtins.str] namespace: IBM Cloud function namespace.
        :param pulumi.Input[_builtins.str] bind_package_name: Name of package to be binded.
        :param pulumi.Input[_builtins.str] name: Name of package.
        :param pulumi.Input[_builtins.bool] publish: Package visibilty.
        :param pulumi.Input[_builtins.str] user_defined_annotations: Annotation values in KEY VALUE format.
        :param pulumi.Input[_builtins.str] user_defined_parameters: Parameters values in KEY VALUE format. Parameter bindings included in the context passed to the package.
        """
        pulumi.set(__self__, "namespace", namespace)
        if bind_package_name is not None:
            pulumi.set(__self__, "bind_package_name", bind_package_name)
        if function_package_id is not None:
            pulumi.set(__self__, "function_package_id", function_package_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if publish is not None:
            pulumi.set(__self__, "publish", publish)
        if user_defined_annotations is not None:
            pulumi.set(__self__, "user_defined_annotations", user_defined_annotations)
        if user_defined_parameters is not None:
            pulumi.set(__self__, "user_defined_parameters", user_defined_parameters)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[_builtins.str]:
        """
        IBM Cloud function namespace.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter(name="bindPackageName")
    def bind_package_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of package to be binded.
        """
        return pulumi.get(self, "bind_package_name")

    @bind_package_name.setter
    def bind_package_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bind_package_name", value)

    @_builtins.property
    @pulumi.getter(name="functionPackageId")
    def function_package_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "function_package_id")

    @function_package_id.setter
    def function_package_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "function_package_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of package.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def publish(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Package visibilty.
        """
        return pulumi.get(self, "publish")

    @publish.setter
    def publish(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "publish", value)

    @_builtins.property
    @pulumi.getter(name="userDefinedAnnotations")
    def user_defined_annotations(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Annotation values in KEY VALUE format.
        """
        return pulumi.get(self, "user_defined_annotations")

    @user_defined_annotations.setter
    def user_defined_annotations(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_defined_annotations", value)

    @_builtins.property
    @pulumi.getter(name="userDefinedParameters")
    def user_defined_parameters(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Parameters values in KEY VALUE format. Parameter bindings included in the context passed to the package.
        """
        return pulumi.get(self, "user_defined_parameters")

    @user_defined_parameters.setter
    def user_defined_parameters(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_defined_parameters", value)


@pulumi.input_type
class _FunctionPackageState:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[_builtins.str]] = None,
                 bind_package_name: Optional[pulumi.Input[_builtins.str]] = None,
                 function_package_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 package_id: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[_builtins.str]] = None,
                 publish: Optional[pulumi.Input[_builtins.bool]] = None,
                 user_defined_annotations: Optional[pulumi.Input[_builtins.str]] = None,
                 user_defined_parameters: Optional[pulumi.Input[_builtins.str]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering FunctionPackage resources.
        :param pulumi.Input[_builtins.str] annotations: All annotations set on package by user and those set by the IBM Cloud Function backend/API.
        :param pulumi.Input[_builtins.str] bind_package_name: Name of package to be binded.
        :param pulumi.Input[_builtins.str] name: Name of package.
        :param pulumi.Input[_builtins.str] namespace: IBM Cloud function namespace.
        :param pulumi.Input[_builtins.str] parameters: All parameters set on package by user and those set by the IBM Cloud Function backend/API.
        :param pulumi.Input[_builtins.bool] publish: Package visibilty.
        :param pulumi.Input[_builtins.str] user_defined_annotations: Annotation values in KEY VALUE format.
        :param pulumi.Input[_builtins.str] user_defined_parameters: Parameters values in KEY VALUE format. Parameter bindings included in the context passed to the package.
        :param pulumi.Input[_builtins.str] version: Semantic version of the item.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if bind_package_name is not None:
            pulumi.set(__self__, "bind_package_name", bind_package_name)
        if function_package_id is not None:
            pulumi.set(__self__, "function_package_id", function_package_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if package_id is not None:
            pulumi.set(__self__, "package_id", package_id)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if publish is not None:
            pulumi.set(__self__, "publish", publish)
        if user_defined_annotations is not None:
            pulumi.set(__self__, "user_defined_annotations", user_defined_annotations)
        if user_defined_parameters is not None:
            pulumi.set(__self__, "user_defined_parameters", user_defined_parameters)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        All annotations set on package by user and those set by the IBM Cloud Function backend/API.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter(name="bindPackageName")
    def bind_package_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of package to be binded.
        """
        return pulumi.get(self, "bind_package_name")

    @bind_package_name.setter
    def bind_package_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bind_package_name", value)

    @_builtins.property
    @pulumi.getter(name="functionPackageId")
    def function_package_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "function_package_id")

    @function_package_id.setter
    def function_package_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "function_package_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of package.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        IBM Cloud function namespace.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter(name="packageId")
    def package_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "package_id", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        All parameters set on package by user and those set by the IBM Cloud Function backend/API.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter
    def publish(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Package visibilty.
        """
        return pulumi.get(self, "publish")

    @publish.setter
    def publish(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "publish", value)

    @_builtins.property
    @pulumi.getter(name="userDefinedAnnotations")
    def user_defined_annotations(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Annotation values in KEY VALUE format.
        """
        return pulumi.get(self, "user_defined_annotations")

    @user_defined_annotations.setter
    def user_defined_annotations(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_defined_annotations", value)

    @_builtins.property
    @pulumi.getter(name="userDefinedParameters")
    def user_defined_parameters(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Parameters values in KEY VALUE format. Parameter bindings included in the context passed to the package.
        """
        return pulumi.get(self, "user_defined_parameters")

    @user_defined_parameters.setter
    def user_defined_parameters(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_defined_parameters", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Semantic version of the item.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


@pulumi.type_token("ibm:index/functionPackage:FunctionPackage")
class FunctionPackage(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bind_package_name: Optional[pulumi.Input[_builtins.str]] = None,
                 function_package_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 publish: Optional[pulumi.Input[_builtins.bool]] = None,
                 user_defined_annotations: Optional[pulumi.Input[_builtins.str]] = None,
                 user_defined_parameters: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a FunctionPackage resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] bind_package_name: Name of package to be binded.
        :param pulumi.Input[_builtins.str] name: Name of package.
        :param pulumi.Input[_builtins.str] namespace: IBM Cloud function namespace.
        :param pulumi.Input[_builtins.bool] publish: Package visibilty.
        :param pulumi.Input[_builtins.str] user_defined_annotations: Annotation values in KEY VALUE format.
        :param pulumi.Input[_builtins.str] user_defined_parameters: Parameters values in KEY VALUE format. Parameter bindings included in the context passed to the package.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FunctionPackageArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a FunctionPackage resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param FunctionPackageArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FunctionPackageArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bind_package_name: Optional[pulumi.Input[_builtins.str]] = None,
                 function_package_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 namespace: Optional[pulumi.Input[_builtins.str]] = None,
                 publish: Optional[pulumi.Input[_builtins.bool]] = None,
                 user_defined_annotations: Optional[pulumi.Input[_builtins.str]] = None,
                 user_defined_parameters: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FunctionPackageArgs.__new__(FunctionPackageArgs)

            __props__.__dict__["bind_package_name"] = bind_package_name
            __props__.__dict__["function_package_id"] = function_package_id
            __props__.__dict__["name"] = name
            if namespace is None and not opts.urn:
                raise TypeError("Missing required property 'namespace'")
            __props__.__dict__["namespace"] = namespace
            __props__.__dict__["publish"] = publish
            __props__.__dict__["user_defined_annotations"] = user_defined_annotations
            __props__.__dict__["user_defined_parameters"] = user_defined_parameters
            __props__.__dict__["annotations"] = None
            __props__.__dict__["package_id"] = None
            __props__.__dict__["parameters"] = None
            __props__.__dict__["version"] = None
        super(FunctionPackage, __self__).__init__(
            'ibm:index/functionPackage:FunctionPackage',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            annotations: Optional[pulumi.Input[_builtins.str]] = None,
            bind_package_name: Optional[pulumi.Input[_builtins.str]] = None,
            function_package_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            namespace: Optional[pulumi.Input[_builtins.str]] = None,
            package_id: Optional[pulumi.Input[_builtins.str]] = None,
            parameters: Optional[pulumi.Input[_builtins.str]] = None,
            publish: Optional[pulumi.Input[_builtins.bool]] = None,
            user_defined_annotations: Optional[pulumi.Input[_builtins.str]] = None,
            user_defined_parameters: Optional[pulumi.Input[_builtins.str]] = None,
            version: Optional[pulumi.Input[_builtins.str]] = None) -> 'FunctionPackage':
        """
        Get an existing FunctionPackage resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] annotations: All annotations set on package by user and those set by the IBM Cloud Function backend/API.
        :param pulumi.Input[_builtins.str] bind_package_name: Name of package to be binded.
        :param pulumi.Input[_builtins.str] name: Name of package.
        :param pulumi.Input[_builtins.str] namespace: IBM Cloud function namespace.
        :param pulumi.Input[_builtins.str] parameters: All parameters set on package by user and those set by the IBM Cloud Function backend/API.
        :param pulumi.Input[_builtins.bool] publish: Package visibilty.
        :param pulumi.Input[_builtins.str] user_defined_annotations: Annotation values in KEY VALUE format.
        :param pulumi.Input[_builtins.str] user_defined_parameters: Parameters values in KEY VALUE format. Parameter bindings included in the context passed to the package.
        :param pulumi.Input[_builtins.str] version: Semantic version of the item.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FunctionPackageState.__new__(_FunctionPackageState)

        __props__.__dict__["annotations"] = annotations
        __props__.__dict__["bind_package_name"] = bind_package_name
        __props__.__dict__["function_package_id"] = function_package_id
        __props__.__dict__["name"] = name
        __props__.__dict__["namespace"] = namespace
        __props__.__dict__["package_id"] = package_id
        __props__.__dict__["parameters"] = parameters
        __props__.__dict__["publish"] = publish
        __props__.__dict__["user_defined_annotations"] = user_defined_annotations
        __props__.__dict__["user_defined_parameters"] = user_defined_parameters
        __props__.__dict__["version"] = version
        return FunctionPackage(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[_builtins.str]:
        """
        All annotations set on package by user and those set by the IBM Cloud Function backend/API.
        """
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="bindPackageName")
    def bind_package_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Name of package to be binded.
        """
        return pulumi.get(self, "bind_package_name")

    @_builtins.property
    @pulumi.getter(name="functionPackageId")
    def function_package_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "function_package_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of package.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[_builtins.str]:
        """
        IBM Cloud function namespace.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "package_id")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> pulumi.Output[_builtins.str]:
        """
        All parameters set on package by user and those set by the IBM Cloud Function backend/API.
        """
        return pulumi.get(self, "parameters")

    @_builtins.property
    @pulumi.getter
    def publish(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Package visibilty.
        """
        return pulumi.get(self, "publish")

    @_builtins.property
    @pulumi.getter(name="userDefinedAnnotations")
    def user_defined_annotations(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Annotation values in KEY VALUE format.
        """
        return pulumi.get(self, "user_defined_annotations")

    @_builtins.property
    @pulumi.getter(name="userDefinedParameters")
    def user_defined_parameters(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Parameters values in KEY VALUE format. Parameter bindings included in the context passed to the package.
        """
        return pulumi.get(self, "user_defined_parameters")

    @_builtins.property
    @pulumi.getter
    def version(self) -> pulumi.Output[_builtins.str]:
        """
        Semantic version of the item.
        """
        return pulumi.get(self, "version")

