# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetEnDestinationIosResult',
    'AwaitableGetEnDestinationIosResult',
    'get_en_destination_ios',
    'get_en_destination_ios_output',
]

@pulumi.output_type
class GetEnDestinationIosResult:
    """
    A collection of values returned by getEnDestinationIos.
    """
    def __init__(__self__, certificate=None, certificate_content_type=None, collect_failed_events=None, configs=None, description=None, destination_id=None, id=None, instance_guid=None, name=None, subscription_count=None, subscription_names=None, type=None, updated_at=None):
        if certificate and not isinstance(certificate, str):
            raise TypeError("Expected argument 'certificate' to be a str")
        pulumi.set(__self__, "certificate", certificate)
        if certificate_content_type and not isinstance(certificate_content_type, str):
            raise TypeError("Expected argument 'certificate_content_type' to be a str")
        pulumi.set(__self__, "certificate_content_type", certificate_content_type)
        if collect_failed_events and not isinstance(collect_failed_events, bool):
            raise TypeError("Expected argument 'collect_failed_events' to be a bool")
        pulumi.set(__self__, "collect_failed_events", collect_failed_events)
        if configs and not isinstance(configs, list):
            raise TypeError("Expected argument 'configs' to be a list")
        pulumi.set(__self__, "configs", configs)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if destination_id and not isinstance(destination_id, str):
            raise TypeError("Expected argument 'destination_id' to be a str")
        pulumi.set(__self__, "destination_id", destination_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_guid and not isinstance(instance_guid, str):
            raise TypeError("Expected argument 'instance_guid' to be a str")
        pulumi.set(__self__, "instance_guid", instance_guid)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if subscription_count and not isinstance(subscription_count, float):
            raise TypeError("Expected argument 'subscription_count' to be a float")
        pulumi.set(__self__, "subscription_count", subscription_count)
        if subscription_names and not isinstance(subscription_names, list):
            raise TypeError("Expected argument 'subscription_names' to be a list")
        pulumi.set(__self__, "subscription_names", subscription_names)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def certificate(self) -> _builtins.str:
        return pulumi.get(self, "certificate")

    @_builtins.property
    @pulumi.getter(name="certificateContentType")
    def certificate_content_type(self) -> _builtins.str:
        return pulumi.get(self, "certificate_content_type")

    @_builtins.property
    @pulumi.getter(name="collectFailedEvents")
    def collect_failed_events(self) -> _builtins.bool:
        return pulumi.get(self, "collect_failed_events")

    @_builtins.property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.GetEnDestinationIosConfigResult']:
        return pulumi.get(self, "configs")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="destinationId")
    def destination_id(self) -> _builtins.str:
        return pulumi.get(self, "destination_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceGuid")
    def instance_guid(self) -> _builtins.str:
        return pulumi.get(self, "instance_guid")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="subscriptionCount")
    def subscription_count(self) -> _builtins.float:
        return pulumi.get(self, "subscription_count")

    @_builtins.property
    @pulumi.getter(name="subscriptionNames")
    def subscription_names(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "subscription_names")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")


class AwaitableGetEnDestinationIosResult(GetEnDestinationIosResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEnDestinationIosResult(
            certificate=self.certificate,
            certificate_content_type=self.certificate_content_type,
            collect_failed_events=self.collect_failed_events,
            configs=self.configs,
            description=self.description,
            destination_id=self.destination_id,
            id=self.id,
            instance_guid=self.instance_guid,
            name=self.name,
            subscription_count=self.subscription_count,
            subscription_names=self.subscription_names,
            type=self.type,
            updated_at=self.updated_at)


def get_en_destination_ios(destination_id: Optional[_builtins.str] = None,
                           id: Optional[_builtins.str] = None,
                           instance_guid: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEnDestinationIosResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['destinationId'] = destination_id
    __args__['id'] = id
    __args__['instanceGuid'] = instance_guid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getEnDestinationIos:getEnDestinationIos', __args__, opts=opts, typ=GetEnDestinationIosResult, package_ref=_utilities.get_package()).value

    return AwaitableGetEnDestinationIosResult(
        certificate=pulumi.get(__ret__, 'certificate'),
        certificate_content_type=pulumi.get(__ret__, 'certificate_content_type'),
        collect_failed_events=pulumi.get(__ret__, 'collect_failed_events'),
        configs=pulumi.get(__ret__, 'configs'),
        description=pulumi.get(__ret__, 'description'),
        destination_id=pulumi.get(__ret__, 'destination_id'),
        id=pulumi.get(__ret__, 'id'),
        instance_guid=pulumi.get(__ret__, 'instance_guid'),
        name=pulumi.get(__ret__, 'name'),
        subscription_count=pulumi.get(__ret__, 'subscription_count'),
        subscription_names=pulumi.get(__ret__, 'subscription_names'),
        type=pulumi.get(__ret__, 'type'),
        updated_at=pulumi.get(__ret__, 'updated_at'))
def get_en_destination_ios_output(destination_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  instance_guid: Optional[pulumi.Input[_builtins.str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEnDestinationIosResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['destinationId'] = destination_id
    __args__['id'] = id
    __args__['instanceGuid'] = instance_guid
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getEnDestinationIos:getEnDestinationIos', __args__, opts=opts, typ=GetEnDestinationIosResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetEnDestinationIosResult(
        certificate=pulumi.get(__response__, 'certificate'),
        certificate_content_type=pulumi.get(__response__, 'certificate_content_type'),
        collect_failed_events=pulumi.get(__response__, 'collect_failed_events'),
        configs=pulumi.get(__response__, 'configs'),
        description=pulumi.get(__response__, 'description'),
        destination_id=pulumi.get(__response__, 'destination_id'),
        id=pulumi.get(__response__, 'id'),
        instance_guid=pulumi.get(__response__, 'instance_guid'),
        name=pulumi.get(__response__, 'name'),
        subscription_count=pulumi.get(__response__, 'subscription_count'),
        subscription_names=pulumi.get(__response__, 'subscription_names'),
        type=pulumi.get(__response__, 'type'),
        updated_at=pulumi.get(__response__, 'updated_at')))
