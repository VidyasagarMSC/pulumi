# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetKmsKeyPoliciesResult',
    'AwaitableGetKmsKeyPoliciesResult',
    'get_kms_key_policies',
    'get_kms_key_policies_output',
]

@pulumi.output_type
class GetKmsKeyPoliciesResult:
    """
    A collection of values returned by getKmsKeyPolicies.
    """
    def __init__(__self__, alias=None, endpoint_type=None, id=None, instance_id=None, key_id=None, policies=None):
        if alias and not isinstance(alias, str):
            raise TypeError("Expected argument 'alias' to be a str")
        pulumi.set(__self__, "alias", alias)
        if endpoint_type and not isinstance(endpoint_type, str):
            raise TypeError("Expected argument 'endpoint_type' to be a str")
        pulumi.set(__self__, "endpoint_type", endpoint_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if key_id and not isinstance(key_id, str):
            raise TypeError("Expected argument 'key_id' to be a str")
        pulumi.set(__self__, "key_id", key_id)
        if policies and not isinstance(policies, list):
            raise TypeError("Expected argument 'policies' to be a list")
        pulumi.set(__self__, "policies", policies)

    @_builtins.property
    @pulumi.getter
    def alias(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "alias")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "key_id")

    @_builtins.property
    @pulumi.getter
    def policies(self) -> Sequence['outputs.GetKmsKeyPoliciesPolicyResult']:
        return pulumi.get(self, "policies")


class AwaitableGetKmsKeyPoliciesResult(GetKmsKeyPoliciesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetKmsKeyPoliciesResult(
            alias=self.alias,
            endpoint_type=self.endpoint_type,
            id=self.id,
            instance_id=self.instance_id,
            key_id=self.key_id,
            policies=self.policies)


def get_kms_key_policies(alias: Optional[_builtins.str] = None,
                         endpoint_type: Optional[_builtins.str] = None,
                         id: Optional[_builtins.str] = None,
                         instance_id: Optional[_builtins.str] = None,
                         key_id: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetKmsKeyPoliciesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['alias'] = alias
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['keyId'] = key_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getKmsKeyPolicies:getKmsKeyPolicies', __args__, opts=opts, typ=GetKmsKeyPoliciesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetKmsKeyPoliciesResult(
        alias=pulumi.get(__ret__, 'alias'),
        endpoint_type=pulumi.get(__ret__, 'endpoint_type'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        key_id=pulumi.get(__ret__, 'key_id'),
        policies=pulumi.get(__ret__, 'policies'))
def get_kms_key_policies_output(alias: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                endpoint_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                key_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetKmsKeyPoliciesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['alias'] = alias
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['keyId'] = key_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getKmsKeyPolicies:getKmsKeyPolicies', __args__, opts=opts, typ=GetKmsKeyPoliciesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetKmsKeyPoliciesResult(
        alias=pulumi.get(__response__, 'alias'),
        endpoint_type=pulumi.get(__response__, 'endpoint_type'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        key_id=pulumi.get(__response__, 'key_id'),
        policies=pulumi.get(__response__, 'policies')))
