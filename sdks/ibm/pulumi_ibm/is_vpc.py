# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsVpcArgs', 'IsVpc']

@pulumi.input_type
class IsVpcArgs:
    def __init__(__self__, *,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 address_prefix_management: Optional[pulumi.Input[_builtins.str]] = None,
                 classic_access: Optional[pulumi.Input[_builtins.bool]] = None,
                 default_network_acl_name: Optional[pulumi.Input[_builtins.str]] = None,
                 default_routing_table_name: Optional[pulumi.Input[_builtins.str]] = None,
                 default_security_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 dns: Optional[pulumi.Input['IsVpcDnsArgs']] = None,
                 is_vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 no_sg_acl_rules: Optional[pulumi.Input[_builtins.bool]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['IsVpcTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a IsVpc resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.str] address_prefix_management: Address Prefix management value
        :param pulumi.Input[_builtins.bool] classic_access: Set to true if classic access needs to enabled to VPC
        :param pulumi.Input[_builtins.str] default_network_acl_name: Default Network ACL name
        :param pulumi.Input[_builtins.str] default_routing_table_name: Default routing table name
        :param pulumi.Input[_builtins.str] default_security_group_name: Default security group name
        :param pulumi.Input['IsVpcDnsArgs'] dns: The DNS configuration for this VPC.
        :param pulumi.Input[_builtins.str] name: VPC name
        :param pulumi.Input[_builtins.bool] no_sg_acl_rules: Delete all rules attached with default security group and default acl
        :param pulumi.Input[_builtins.str] resource_group: Resource group info
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        """
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if address_prefix_management is not None:
            pulumi.set(__self__, "address_prefix_management", address_prefix_management)
        if classic_access is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""classic_access is deprecated: Deprecated""")
        if classic_access is not None:
            pulumi.set(__self__, "classic_access", classic_access)
        if default_network_acl_name is not None:
            pulumi.set(__self__, "default_network_acl_name", default_network_acl_name)
        if default_routing_table_name is not None:
            pulumi.set(__self__, "default_routing_table_name", default_routing_table_name)
        if default_security_group_name is not None:
            pulumi.set(__self__, "default_security_group_name", default_security_group_name)
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if is_vpc_id is not None:
            pulumi.set(__self__, "is_vpc_id", is_vpc_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if no_sg_acl_rules is not None:
            pulumi.set(__self__, "no_sg_acl_rules", no_sg_acl_rules)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter(name="addressPrefixManagement")
    def address_prefix_management(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Address Prefix management value
        """
        return pulumi.get(self, "address_prefix_management")

    @address_prefix_management.setter
    def address_prefix_management(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_prefix_management", value)

    @_builtins.property
    @pulumi.getter(name="classicAccess")
    @_utilities.deprecated("""Deprecated""")
    def classic_access(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set to true if classic access needs to enabled to VPC
        """
        return pulumi.get(self, "classic_access")

    @classic_access.setter
    def classic_access(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "classic_access", value)

    @_builtins.property
    @pulumi.getter(name="defaultNetworkAclName")
    def default_network_acl_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Default Network ACL name
        """
        return pulumi.get(self, "default_network_acl_name")

    @default_network_acl_name.setter
    def default_network_acl_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_network_acl_name", value)

    @_builtins.property
    @pulumi.getter(name="defaultRoutingTableName")
    def default_routing_table_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Default routing table name
        """
        return pulumi.get(self, "default_routing_table_name")

    @default_routing_table_name.setter
    def default_routing_table_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_routing_table_name", value)

    @_builtins.property
    @pulumi.getter(name="defaultSecurityGroupName")
    def default_security_group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Default security group name
        """
        return pulumi.get(self, "default_security_group_name")

    @default_security_group_name.setter
    def default_security_group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_security_group_name", value)

    @_builtins.property
    @pulumi.getter
    def dns(self) -> Optional[pulumi.Input['IsVpcDnsArgs']]:
        """
        The DNS configuration for this VPC.
        """
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: Optional[pulumi.Input['IsVpcDnsArgs']]):
        pulumi.set(self, "dns", value)

    @_builtins.property
    @pulumi.getter(name="isVpcId")
    def is_vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_vpc_id")

    @is_vpc_id.setter
    def is_vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_vpc_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        VPC name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="noSgAclRules")
    def no_sg_acl_rules(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Delete all rules attached with default security group and default acl
        """
        return pulumi.get(self, "no_sg_acl_rules")

    @no_sg_acl_rules.setter
    def no_sg_acl_rules(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "no_sg_acl_rules", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource group info
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsVpcTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsVpcTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _IsVpcState:
    def __init__(__self__, *,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 address_prefix_management: Optional[pulumi.Input[_builtins.str]] = None,
                 classic_access: Optional[pulumi.Input[_builtins.bool]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 cse_source_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpcCseSourceAddressArgs']]]] = None,
                 default_address_prefixes: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 default_network_acl: Optional[pulumi.Input[_builtins.str]] = None,
                 default_network_acl_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 default_network_acl_name: Optional[pulumi.Input[_builtins.str]] = None,
                 default_routing_table: Optional[pulumi.Input[_builtins.str]] = None,
                 default_routing_table_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 default_routing_table_name: Optional[pulumi.Input[_builtins.str]] = None,
                 default_security_group: Optional[pulumi.Input[_builtins.str]] = None,
                 default_security_group_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 default_security_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 dns: Optional[pulumi.Input['IsVpcDnsArgs']] = None,
                 health_reasons: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpcHealthReasonArgs']]]] = None,
                 health_state: Optional[pulumi.Input[_builtins.str]] = None,
                 is_vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 no_sg_acl_rules: Optional[pulumi.Input[_builtins.bool]] = None,
                 public_address_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpcPublicAddressRangeArgs']]]] = None,
                 resource_controller_url: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_status: Optional[pulumi.Input[_builtins.str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpcSecurityGroupArgs']]]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpcSubnetArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['IsVpcTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering IsVpc resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.str] address_prefix_management: Address Prefix management value
        :param pulumi.Input[_builtins.bool] classic_access: Set to true if classic access needs to enabled to VPC
        :param pulumi.Input[_builtins.str] crn: The crn of the resource
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] default_address_prefixes: Default address prefixes for each zone.
        :param pulumi.Input[_builtins.str] default_network_acl: Default network ACL ID
        :param pulumi.Input[_builtins.str] default_network_acl_crn: Default Network ACL CRN
        :param pulumi.Input[_builtins.str] default_network_acl_name: Default Network ACL name
        :param pulumi.Input[_builtins.str] default_routing_table: Default routing table associated with VPC
        :param pulumi.Input[_builtins.str] default_routing_table_crn: Default routing table CRN
        :param pulumi.Input[_builtins.str] default_routing_table_name: Default routing table name
        :param pulumi.Input[_builtins.str] default_security_group: Security group associated with VPC
        :param pulumi.Input[_builtins.str] default_security_group_crn: Default security group CRN
        :param pulumi.Input[_builtins.str] default_security_group_name: Default security group name
        :param pulumi.Input['IsVpcDnsArgs'] dns: The DNS configuration for this VPC.
        :param pulumi.Input[Sequence[pulumi.Input['IsVpcHealthReasonArgs']]] health_reasons: The reasons for the current `health_state` (if any).The enumerated reason code values for this property will expand in
               the future. When processing this property, check for and log unknown values. Optionally halt processing and surface the
               error, or bypass the resource on which the unexpected reason code was encountered.
        :param pulumi.Input[_builtins.str] health_state: The health of this resource.- `ok`: No abnormal behavior detected- `degraded`: Experiencing compromised performance,
               capacity, or connectivity- `faulted`: Completely unreachable, inoperative, or otherwise entirely incapacitated-
               `inapplicable`: The health state does not apply because of the current lifecycle state. A resource with a lifecycle
               state of `failed` or `deleting` will have a health state of `inapplicable`. A `pending` resource may also have this
               state.
        :param pulumi.Input[_builtins.str] name: VPC name
        :param pulumi.Input[_builtins.bool] no_sg_acl_rules: Delete all rules attached with default security group and default acl
        :param pulumi.Input[Sequence[pulumi.Input['IsVpcPublicAddressRangeArgs']]] public_address_ranges: The public address ranges attached to this VPC.
        :param pulumi.Input[_builtins.str] resource_controller_url: The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        :param pulumi.Input[_builtins.str] resource_crn: The crn of the resource
        :param pulumi.Input[_builtins.str] resource_group: Resource group info
        :param pulumi.Input[_builtins.str] resource_group_name: The resource group name in which resource is provisioned
        :param pulumi.Input[_builtins.str] resource_name: The name of the resource
        :param pulumi.Input[_builtins.str] resource_status: The status of the resource
        :param pulumi.Input[_builtins.str] status: VPC status
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        """
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if address_prefix_management is not None:
            pulumi.set(__self__, "address_prefix_management", address_prefix_management)
        if classic_access is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""classic_access is deprecated: Deprecated""")
        if classic_access is not None:
            pulumi.set(__self__, "classic_access", classic_access)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if cse_source_addresses is not None:
            pulumi.set(__self__, "cse_source_addresses", cse_source_addresses)
        if default_address_prefixes is not None:
            pulumi.set(__self__, "default_address_prefixes", default_address_prefixes)
        if default_network_acl is not None:
            pulumi.set(__self__, "default_network_acl", default_network_acl)
        if default_network_acl_crn is not None:
            pulumi.set(__self__, "default_network_acl_crn", default_network_acl_crn)
        if default_network_acl_name is not None:
            pulumi.set(__self__, "default_network_acl_name", default_network_acl_name)
        if default_routing_table is not None:
            pulumi.set(__self__, "default_routing_table", default_routing_table)
        if default_routing_table_crn is not None:
            pulumi.set(__self__, "default_routing_table_crn", default_routing_table_crn)
        if default_routing_table_name is not None:
            pulumi.set(__self__, "default_routing_table_name", default_routing_table_name)
        if default_security_group is not None:
            pulumi.set(__self__, "default_security_group", default_security_group)
        if default_security_group_crn is not None:
            pulumi.set(__self__, "default_security_group_crn", default_security_group_crn)
        if default_security_group_name is not None:
            pulumi.set(__self__, "default_security_group_name", default_security_group_name)
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if health_reasons is not None:
            pulumi.set(__self__, "health_reasons", health_reasons)
        if health_state is not None:
            pulumi.set(__self__, "health_state", health_state)
        if is_vpc_id is not None:
            pulumi.set(__self__, "is_vpc_id", is_vpc_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if no_sg_acl_rules is not None:
            pulumi.set(__self__, "no_sg_acl_rules", no_sg_acl_rules)
        if public_address_ranges is not None:
            pulumi.set(__self__, "public_address_ranges", public_address_ranges)
        if resource_controller_url is not None:
            pulumi.set(__self__, "resource_controller_url", resource_controller_url)
        if resource_crn is not None:
            pulumi.set(__self__, "resource_crn", resource_crn)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if resource_group_name is not None:
            pulumi.set(__self__, "resource_group_name", resource_group_name)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_status is not None:
            pulumi.set(__self__, "resource_status", resource_status)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter(name="addressPrefixManagement")
    def address_prefix_management(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Address Prefix management value
        """
        return pulumi.get(self, "address_prefix_management")

    @address_prefix_management.setter
    def address_prefix_management(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "address_prefix_management", value)

    @_builtins.property
    @pulumi.getter(name="classicAccess")
    @_utilities.deprecated("""Deprecated""")
    def classic_access(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Set to true if classic access needs to enabled to VPC
        """
        return pulumi.get(self, "classic_access")

    @classic_access.setter
    def classic_access(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "classic_access", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The crn of the resource
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter(name="cseSourceAddresses")
    def cse_source_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsVpcCseSourceAddressArgs']]]]:
        return pulumi.get(self, "cse_source_addresses")

    @cse_source_addresses.setter
    def cse_source_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpcCseSourceAddressArgs']]]]):
        pulumi.set(self, "cse_source_addresses", value)

    @_builtins.property
    @pulumi.getter(name="defaultAddressPrefixes")
    def default_address_prefixes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Default address prefixes for each zone.
        """
        return pulumi.get(self, "default_address_prefixes")

    @default_address_prefixes.setter
    def default_address_prefixes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "default_address_prefixes", value)

    @_builtins.property
    @pulumi.getter(name="defaultNetworkAcl")
    def default_network_acl(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Default network ACL ID
        """
        return pulumi.get(self, "default_network_acl")

    @default_network_acl.setter
    def default_network_acl(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_network_acl", value)

    @_builtins.property
    @pulumi.getter(name="defaultNetworkAclCrn")
    def default_network_acl_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Default Network ACL CRN
        """
        return pulumi.get(self, "default_network_acl_crn")

    @default_network_acl_crn.setter
    def default_network_acl_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_network_acl_crn", value)

    @_builtins.property
    @pulumi.getter(name="defaultNetworkAclName")
    def default_network_acl_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Default Network ACL name
        """
        return pulumi.get(self, "default_network_acl_name")

    @default_network_acl_name.setter
    def default_network_acl_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_network_acl_name", value)

    @_builtins.property
    @pulumi.getter(name="defaultRoutingTable")
    def default_routing_table(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Default routing table associated with VPC
        """
        return pulumi.get(self, "default_routing_table")

    @default_routing_table.setter
    def default_routing_table(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_routing_table", value)

    @_builtins.property
    @pulumi.getter(name="defaultRoutingTableCrn")
    def default_routing_table_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Default routing table CRN
        """
        return pulumi.get(self, "default_routing_table_crn")

    @default_routing_table_crn.setter
    def default_routing_table_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_routing_table_crn", value)

    @_builtins.property
    @pulumi.getter(name="defaultRoutingTableName")
    def default_routing_table_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Default routing table name
        """
        return pulumi.get(self, "default_routing_table_name")

    @default_routing_table_name.setter
    def default_routing_table_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_routing_table_name", value)

    @_builtins.property
    @pulumi.getter(name="defaultSecurityGroup")
    def default_security_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Security group associated with VPC
        """
        return pulumi.get(self, "default_security_group")

    @default_security_group.setter
    def default_security_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_security_group", value)

    @_builtins.property
    @pulumi.getter(name="defaultSecurityGroupCrn")
    def default_security_group_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Default security group CRN
        """
        return pulumi.get(self, "default_security_group_crn")

    @default_security_group_crn.setter
    def default_security_group_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_security_group_crn", value)

    @_builtins.property
    @pulumi.getter(name="defaultSecurityGroupName")
    def default_security_group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Default security group name
        """
        return pulumi.get(self, "default_security_group_name")

    @default_security_group_name.setter
    def default_security_group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default_security_group_name", value)

    @_builtins.property
    @pulumi.getter
    def dns(self) -> Optional[pulumi.Input['IsVpcDnsArgs']]:
        """
        The DNS configuration for this VPC.
        """
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: Optional[pulumi.Input['IsVpcDnsArgs']]):
        pulumi.set(self, "dns", value)

    @_builtins.property
    @pulumi.getter(name="healthReasons")
    def health_reasons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsVpcHealthReasonArgs']]]]:
        """
        The reasons for the current `health_state` (if any).The enumerated reason code values for this property will expand in
        the future. When processing this property, check for and log unknown values. Optionally halt processing and surface the
        error, or bypass the resource on which the unexpected reason code was encountered.
        """
        return pulumi.get(self, "health_reasons")

    @health_reasons.setter
    def health_reasons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpcHealthReasonArgs']]]]):
        pulumi.set(self, "health_reasons", value)

    @_builtins.property
    @pulumi.getter(name="healthState")
    def health_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The health of this resource.- `ok`: No abnormal behavior detected- `degraded`: Experiencing compromised performance,
        capacity, or connectivity- `faulted`: Completely unreachable, inoperative, or otherwise entirely incapacitated-
        `inapplicable`: The health state does not apply because of the current lifecycle state. A resource with a lifecycle
        state of `failed` or `deleting` will have a health state of `inapplicable`. A `pending` resource may also have this
        state.
        """
        return pulumi.get(self, "health_state")

    @health_state.setter
    def health_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "health_state", value)

    @_builtins.property
    @pulumi.getter(name="isVpcId")
    def is_vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_vpc_id")

    @is_vpc_id.setter
    def is_vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_vpc_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        VPC name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="noSgAclRules")
    def no_sg_acl_rules(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Delete all rules attached with default security group and default acl
        """
        return pulumi.get(self, "no_sg_acl_rules")

    @no_sg_acl_rules.setter
    def no_sg_acl_rules(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "no_sg_acl_rules", value)

    @_builtins.property
    @pulumi.getter(name="publicAddressRanges")
    def public_address_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsVpcPublicAddressRangeArgs']]]]:
        """
        The public address ranges attached to this VPC.
        """
        return pulumi.get(self, "public_address_ranges")

    @public_address_ranges.setter
    def public_address_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpcPublicAddressRangeArgs']]]]):
        pulumi.set(self, "public_address_ranges", value)

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        """
        return pulumi.get(self, "resource_controller_url")

    @resource_controller_url.setter
    def resource_controller_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_controller_url", value)

    @_builtins.property
    @pulumi.getter(name="resourceCrn")
    def resource_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The crn of the resource
        """
        return pulumi.get(self, "resource_crn")

    @resource_crn.setter
    def resource_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_crn", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Resource group info
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource group name in which resource is provisioned
        """
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_name", value)

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_name", value)

    @_builtins.property
    @pulumi.getter(name="resourceStatus")
    def resource_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the resource
        """
        return pulumi.get(self, "resource_status")

    @resource_status.setter
    def resource_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_status", value)

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsVpcSecurityGroupArgs']]]]:
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpcSecurityGroupArgs']]]]):
        pulumi.set(self, "security_groups", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        VPC status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsVpcSubnetArgs']]]]:
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsVpcSubnetArgs']]]]):
        pulumi.set(self, "subnets", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsVpcTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsVpcTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/isVpc:IsVpc")
class IsVpc(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 address_prefix_management: Optional[pulumi.Input[_builtins.str]] = None,
                 classic_access: Optional[pulumi.Input[_builtins.bool]] = None,
                 default_network_acl_name: Optional[pulumi.Input[_builtins.str]] = None,
                 default_routing_table_name: Optional[pulumi.Input[_builtins.str]] = None,
                 default_security_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 dns: Optional[pulumi.Input[Union['IsVpcDnsArgs', 'IsVpcDnsArgsDict']]] = None,
                 is_vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 no_sg_acl_rules: Optional[pulumi.Input[_builtins.bool]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsVpcTimeoutsArgs', 'IsVpcTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a IsVpc resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.str] address_prefix_management: Address Prefix management value
        :param pulumi.Input[_builtins.bool] classic_access: Set to true if classic access needs to enabled to VPC
        :param pulumi.Input[_builtins.str] default_network_acl_name: Default Network ACL name
        :param pulumi.Input[_builtins.str] default_routing_table_name: Default routing table name
        :param pulumi.Input[_builtins.str] default_security_group_name: Default security group name
        :param pulumi.Input[Union['IsVpcDnsArgs', 'IsVpcDnsArgsDict']] dns: The DNS configuration for this VPC.
        :param pulumi.Input[_builtins.str] name: VPC name
        :param pulumi.Input[_builtins.bool] no_sg_acl_rules: Delete all rules attached with default security group and default acl
        :param pulumi.Input[_builtins.str] resource_group: Resource group info
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[IsVpcArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsVpc resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsVpcArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsVpcArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 address_prefix_management: Optional[pulumi.Input[_builtins.str]] = None,
                 classic_access: Optional[pulumi.Input[_builtins.bool]] = None,
                 default_network_acl_name: Optional[pulumi.Input[_builtins.str]] = None,
                 default_routing_table_name: Optional[pulumi.Input[_builtins.str]] = None,
                 default_security_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 dns: Optional[pulumi.Input[Union['IsVpcDnsArgs', 'IsVpcDnsArgsDict']]] = None,
                 is_vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 no_sg_acl_rules: Optional[pulumi.Input[_builtins.bool]] = None,
                 resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsVpcTimeoutsArgs', 'IsVpcTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsVpcArgs.__new__(IsVpcArgs)

            __props__.__dict__["access_tags"] = access_tags
            __props__.__dict__["address_prefix_management"] = address_prefix_management
            __props__.__dict__["classic_access"] = classic_access
            __props__.__dict__["default_network_acl_name"] = default_network_acl_name
            __props__.__dict__["default_routing_table_name"] = default_routing_table_name
            __props__.__dict__["default_security_group_name"] = default_security_group_name
            __props__.__dict__["dns"] = dns
            __props__.__dict__["is_vpc_id"] = is_vpc_id
            __props__.__dict__["name"] = name
            __props__.__dict__["no_sg_acl_rules"] = no_sg_acl_rules
            __props__.__dict__["resource_group"] = resource_group
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["crn"] = None
            __props__.__dict__["cse_source_addresses"] = None
            __props__.__dict__["default_address_prefixes"] = None
            __props__.__dict__["default_network_acl"] = None
            __props__.__dict__["default_network_acl_crn"] = None
            __props__.__dict__["default_routing_table"] = None
            __props__.__dict__["default_routing_table_crn"] = None
            __props__.__dict__["default_security_group"] = None
            __props__.__dict__["default_security_group_crn"] = None
            __props__.__dict__["health_reasons"] = None
            __props__.__dict__["health_state"] = None
            __props__.__dict__["public_address_ranges"] = None
            __props__.__dict__["resource_controller_url"] = None
            __props__.__dict__["resource_crn"] = None
            __props__.__dict__["resource_group_name"] = None
            __props__.__dict__["resource_name"] = None
            __props__.__dict__["resource_status"] = None
            __props__.__dict__["security_groups"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["subnets"] = None
        super(IsVpc, __self__).__init__(
            'ibm:index/isVpc:IsVpc',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            address_prefix_management: Optional[pulumi.Input[_builtins.str]] = None,
            classic_access: Optional[pulumi.Input[_builtins.bool]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            cse_source_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVpcCseSourceAddressArgs', 'IsVpcCseSourceAddressArgsDict']]]]] = None,
            default_address_prefixes: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            default_network_acl: Optional[pulumi.Input[_builtins.str]] = None,
            default_network_acl_crn: Optional[pulumi.Input[_builtins.str]] = None,
            default_network_acl_name: Optional[pulumi.Input[_builtins.str]] = None,
            default_routing_table: Optional[pulumi.Input[_builtins.str]] = None,
            default_routing_table_crn: Optional[pulumi.Input[_builtins.str]] = None,
            default_routing_table_name: Optional[pulumi.Input[_builtins.str]] = None,
            default_security_group: Optional[pulumi.Input[_builtins.str]] = None,
            default_security_group_crn: Optional[pulumi.Input[_builtins.str]] = None,
            default_security_group_name: Optional[pulumi.Input[_builtins.str]] = None,
            dns: Optional[pulumi.Input[Union['IsVpcDnsArgs', 'IsVpcDnsArgsDict']]] = None,
            health_reasons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVpcHealthReasonArgs', 'IsVpcHealthReasonArgsDict']]]]] = None,
            health_state: Optional[pulumi.Input[_builtins.str]] = None,
            is_vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            no_sg_acl_rules: Optional[pulumi.Input[_builtins.bool]] = None,
            public_address_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVpcPublicAddressRangeArgs', 'IsVpcPublicAddressRangeArgsDict']]]]] = None,
            resource_controller_url: Optional[pulumi.Input[_builtins.str]] = None,
            resource_crn: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_name: Optional[pulumi.Input[_builtins.str]] = None,
            resource_name_: Optional[pulumi.Input[_builtins.str]] = None,
            resource_status: Optional[pulumi.Input[_builtins.str]] = None,
            security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVpcSecurityGroupArgs', 'IsVpcSecurityGroupArgsDict']]]]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            subnets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsVpcSubnetArgs', 'IsVpcSubnetArgsDict']]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            timeouts: Optional[pulumi.Input[Union['IsVpcTimeoutsArgs', 'IsVpcTimeoutsArgsDict']]] = None) -> 'IsVpc':
        """
        Get an existing IsVpc resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.str] address_prefix_management: Address Prefix management value
        :param pulumi.Input[_builtins.bool] classic_access: Set to true if classic access needs to enabled to VPC
        :param pulumi.Input[_builtins.str] crn: The crn of the resource
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] default_address_prefixes: Default address prefixes for each zone.
        :param pulumi.Input[_builtins.str] default_network_acl: Default network ACL ID
        :param pulumi.Input[_builtins.str] default_network_acl_crn: Default Network ACL CRN
        :param pulumi.Input[_builtins.str] default_network_acl_name: Default Network ACL name
        :param pulumi.Input[_builtins.str] default_routing_table: Default routing table associated with VPC
        :param pulumi.Input[_builtins.str] default_routing_table_crn: Default routing table CRN
        :param pulumi.Input[_builtins.str] default_routing_table_name: Default routing table name
        :param pulumi.Input[_builtins.str] default_security_group: Security group associated with VPC
        :param pulumi.Input[_builtins.str] default_security_group_crn: Default security group CRN
        :param pulumi.Input[_builtins.str] default_security_group_name: Default security group name
        :param pulumi.Input[Union['IsVpcDnsArgs', 'IsVpcDnsArgsDict']] dns: The DNS configuration for this VPC.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsVpcHealthReasonArgs', 'IsVpcHealthReasonArgsDict']]]] health_reasons: The reasons for the current `health_state` (if any).The enumerated reason code values for this property will expand in
               the future. When processing this property, check for and log unknown values. Optionally halt processing and surface the
               error, or bypass the resource on which the unexpected reason code was encountered.
        :param pulumi.Input[_builtins.str] health_state: The health of this resource.- `ok`: No abnormal behavior detected- `degraded`: Experiencing compromised performance,
               capacity, or connectivity- `faulted`: Completely unreachable, inoperative, or otherwise entirely incapacitated-
               `inapplicable`: The health state does not apply because of the current lifecycle state. A resource with a lifecycle
               state of `failed` or `deleting` will have a health state of `inapplicable`. A `pending` resource may also have this
               state.
        :param pulumi.Input[_builtins.str] name: VPC name
        :param pulumi.Input[_builtins.bool] no_sg_acl_rules: Delete all rules attached with default security group and default acl
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsVpcPublicAddressRangeArgs', 'IsVpcPublicAddressRangeArgsDict']]]] public_address_ranges: The public address ranges attached to this VPC.
        :param pulumi.Input[_builtins.str] resource_controller_url: The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        :param pulumi.Input[_builtins.str] resource_crn: The crn of the resource
        :param pulumi.Input[_builtins.str] resource_group: Resource group info
        :param pulumi.Input[_builtins.str] resource_group_name: The resource group name in which resource is provisioned
        :param pulumi.Input[_builtins.str] resource_name_: The name of the resource
        :param pulumi.Input[_builtins.str] resource_status: The status of the resource
        :param pulumi.Input[_builtins.str] status: VPC status
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsVpcState.__new__(_IsVpcState)

        __props__.__dict__["access_tags"] = access_tags
        __props__.__dict__["address_prefix_management"] = address_prefix_management
        __props__.__dict__["classic_access"] = classic_access
        __props__.__dict__["crn"] = crn
        __props__.__dict__["cse_source_addresses"] = cse_source_addresses
        __props__.__dict__["default_address_prefixes"] = default_address_prefixes
        __props__.__dict__["default_network_acl"] = default_network_acl
        __props__.__dict__["default_network_acl_crn"] = default_network_acl_crn
        __props__.__dict__["default_network_acl_name"] = default_network_acl_name
        __props__.__dict__["default_routing_table"] = default_routing_table
        __props__.__dict__["default_routing_table_crn"] = default_routing_table_crn
        __props__.__dict__["default_routing_table_name"] = default_routing_table_name
        __props__.__dict__["default_security_group"] = default_security_group
        __props__.__dict__["default_security_group_crn"] = default_security_group_crn
        __props__.__dict__["default_security_group_name"] = default_security_group_name
        __props__.__dict__["dns"] = dns
        __props__.__dict__["health_reasons"] = health_reasons
        __props__.__dict__["health_state"] = health_state
        __props__.__dict__["is_vpc_id"] = is_vpc_id
        __props__.__dict__["name"] = name
        __props__.__dict__["no_sg_acl_rules"] = no_sg_acl_rules
        __props__.__dict__["public_address_ranges"] = public_address_ranges
        __props__.__dict__["resource_controller_url"] = resource_controller_url
        __props__.__dict__["resource_crn"] = resource_crn
        __props__.__dict__["resource_group"] = resource_group
        __props__.__dict__["resource_group_name"] = resource_group_name
        __props__.__dict__["resource_name"] = resource_name_
        __props__.__dict__["resource_status"] = resource_status
        __props__.__dict__["security_groups"] = security_groups
        __props__.__dict__["status"] = status
        __props__.__dict__["subnets"] = subnets
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timeouts"] = timeouts
        return IsVpc(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter(name="addressPrefixManagement")
    def address_prefix_management(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Address Prefix management value
        """
        return pulumi.get(self, "address_prefix_management")

    @_builtins.property
    @pulumi.getter(name="classicAccess")
    @_utilities.deprecated("""Deprecated""")
    def classic_access(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Set to true if classic access needs to enabled to VPC
        """
        return pulumi.get(self, "classic_access")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The crn of the resource
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter(name="cseSourceAddresses")
    def cse_source_addresses(self) -> pulumi.Output[Sequence['outputs.IsVpcCseSourceAddress']]:
        return pulumi.get(self, "cse_source_addresses")

    @_builtins.property
    @pulumi.getter(name="defaultAddressPrefixes")
    def default_address_prefixes(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        Default address prefixes for each zone.
        """
        return pulumi.get(self, "default_address_prefixes")

    @_builtins.property
    @pulumi.getter(name="defaultNetworkAcl")
    def default_network_acl(self) -> pulumi.Output[_builtins.str]:
        """
        Default network ACL ID
        """
        return pulumi.get(self, "default_network_acl")

    @_builtins.property
    @pulumi.getter(name="defaultNetworkAclCrn")
    def default_network_acl_crn(self) -> pulumi.Output[_builtins.str]:
        """
        Default Network ACL CRN
        """
        return pulumi.get(self, "default_network_acl_crn")

    @_builtins.property
    @pulumi.getter(name="defaultNetworkAclName")
    def default_network_acl_name(self) -> pulumi.Output[_builtins.str]:
        """
        Default Network ACL name
        """
        return pulumi.get(self, "default_network_acl_name")

    @_builtins.property
    @pulumi.getter(name="defaultRoutingTable")
    def default_routing_table(self) -> pulumi.Output[_builtins.str]:
        """
        Default routing table associated with VPC
        """
        return pulumi.get(self, "default_routing_table")

    @_builtins.property
    @pulumi.getter(name="defaultRoutingTableCrn")
    def default_routing_table_crn(self) -> pulumi.Output[_builtins.str]:
        """
        Default routing table CRN
        """
        return pulumi.get(self, "default_routing_table_crn")

    @_builtins.property
    @pulumi.getter(name="defaultRoutingTableName")
    def default_routing_table_name(self) -> pulumi.Output[_builtins.str]:
        """
        Default routing table name
        """
        return pulumi.get(self, "default_routing_table_name")

    @_builtins.property
    @pulumi.getter(name="defaultSecurityGroup")
    def default_security_group(self) -> pulumi.Output[_builtins.str]:
        """
        Security group associated with VPC
        """
        return pulumi.get(self, "default_security_group")

    @_builtins.property
    @pulumi.getter(name="defaultSecurityGroupCrn")
    def default_security_group_crn(self) -> pulumi.Output[_builtins.str]:
        """
        Default security group CRN
        """
        return pulumi.get(self, "default_security_group_crn")

    @_builtins.property
    @pulumi.getter(name="defaultSecurityGroupName")
    def default_security_group_name(self) -> pulumi.Output[_builtins.str]:
        """
        Default security group name
        """
        return pulumi.get(self, "default_security_group_name")

    @_builtins.property
    @pulumi.getter
    def dns(self) -> pulumi.Output[Optional['outputs.IsVpcDns']]:
        """
        The DNS configuration for this VPC.
        """
        return pulumi.get(self, "dns")

    @_builtins.property
    @pulumi.getter(name="healthReasons")
    def health_reasons(self) -> pulumi.Output[Sequence['outputs.IsVpcHealthReason']]:
        """
        The reasons for the current `health_state` (if any).The enumerated reason code values for this property will expand in
        the future. When processing this property, check for and log unknown values. Optionally halt processing and surface the
        error, or bypass the resource on which the unexpected reason code was encountered.
        """
        return pulumi.get(self, "health_reasons")

    @_builtins.property
    @pulumi.getter(name="healthState")
    def health_state(self) -> pulumi.Output[_builtins.str]:
        """
        The health of this resource.- `ok`: No abnormal behavior detected- `degraded`: Experiencing compromised performance,
        capacity, or connectivity- `faulted`: Completely unreachable, inoperative, or otherwise entirely incapacitated-
        `inapplicable`: The health state does not apply because of the current lifecycle state. A resource with a lifecycle
        state of `failed` or `deleting` will have a health state of `inapplicable`. A `pending` resource may also have this
        state.
        """
        return pulumi.get(self, "health_state")

    @_builtins.property
    @pulumi.getter(name="isVpcId")
    def is_vpc_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_vpc_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        VPC name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="noSgAclRules")
    def no_sg_acl_rules(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Delete all rules attached with default security group and default acl
        """
        return pulumi.get(self, "no_sg_acl_rules")

    @_builtins.property
    @pulumi.getter(name="publicAddressRanges")
    def public_address_ranges(self) -> pulumi.Output[Sequence['outputs.IsVpcPublicAddressRange']]:
        """
        The public address ranges attached to this VPC.
        """
        return pulumi.get(self, "public_address_ranges")

    @_builtins.property
    @pulumi.getter(name="resourceControllerUrl")
    def resource_controller_url(self) -> pulumi.Output[_builtins.str]:
        """
        The URL of the IBM Cloud dashboard that can be used to explore and view details about this instance
        """
        return pulumi.get(self, "resource_controller_url")

    @_builtins.property
    @pulumi.getter(name="resourceCrn")
    def resource_crn(self) -> pulumi.Output[_builtins.str]:
        """
        The crn of the resource
        """
        return pulumi.get(self, "resource_crn")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Output[_builtins.str]:
        """
        Resource group info
        """
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Output[_builtins.str]:
        """
        The resource group name in which resource is provisioned
        """
        return pulumi.get(self, "resource_group_name")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the resource
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceStatus")
    def resource_status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the resource
        """
        return pulumi.get(self, "resource_status")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Output[Sequence['outputs.IsVpcSecurityGroup']]:
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        VPC status
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> pulumi.Output[Sequence['outputs.IsVpcSubnet']]:
        return pulumi.get(self, "subnets")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of tags
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IsVpcTimeouts']]:
        return pulumi.get(self, "timeouts")

