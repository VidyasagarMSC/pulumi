# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LogsAlertArgs', 'LogsAlert']

@pulumi.input_type
class LogsAlertArgs:
    def __init__(__self__, *,
                 condition: pulumi.Input['LogsAlertConditionArgs'],
                 filters: pulumi.Input['LogsAlertFiltersArgs'],
                 instance_id: pulumi.Input[_builtins.str],
                 is_active: pulumi.Input[_builtins.bool],
                 severity: pulumi.Input[_builtins.str],
                 active_when: Optional[pulumi.Input['LogsAlertActiveWhenArgs']] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 expiration: Optional[pulumi.Input['LogsAlertExpirationArgs']] = None,
                 incident_settings: Optional[pulumi.Input['LogsAlertIncidentSettingsArgs']] = None,
                 logs_alert_id: Optional[pulumi.Input[_builtins.str]] = None,
                 meta_labels: Optional[pulumi.Input[Sequence[pulumi.Input['LogsAlertMetaLabelArgs']]]] = None,
                 meta_labels_strings: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_groups: Optional[pulumi.Input[Sequence[pulumi.Input['LogsAlertNotificationGroupArgs']]]] = None,
                 notification_payload_filters: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a LogsAlert resource.
        :param pulumi.Input['LogsAlertConditionArgs'] condition: Alert condition.
        :param pulumi.Input['LogsAlertFiltersArgs'] filters: Alert filters.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the logs instance.
        :param pulumi.Input[_builtins.bool] is_active: Alert is active.
        :param pulumi.Input[_builtins.str] severity: Alert severity.
        :param pulumi.Input['LogsAlertActiveWhenArgs'] active_when: When should the alert be active.
        :param pulumi.Input[_builtins.str] description: Alert description.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input['LogsAlertExpirationArgs'] expiration: Alert expiration date.
        :param pulumi.Input['LogsAlertIncidentSettingsArgs'] incident_settings: Incident settings, will create the incident based on this configuration.
        :param pulumi.Input[Sequence[pulumi.Input['LogsAlertMetaLabelArgs']]] meta_labels: The Meta labels to add to the alert.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] meta_labels_strings: The Meta labels to add to the alert as string with ':' separator.
        :param pulumi.Input[_builtins.str] name: Alert name.
        :param pulumi.Input[Sequence[pulumi.Input['LogsAlertNotificationGroupArgs']]] notification_groups: Alert notification groups.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] notification_payload_filters: JSON keys to include in the alert notification, if left empty get the full log text in the alert notification.
        :param pulumi.Input[_builtins.str] region: The region of the logs instance.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "is_active", is_active)
        pulumi.set(__self__, "severity", severity)
        if active_when is not None:
            pulumi.set(__self__, "active_when", active_when)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if expiration is not None:
            pulumi.set(__self__, "expiration", expiration)
        if incident_settings is not None:
            pulumi.set(__self__, "incident_settings", incident_settings)
        if logs_alert_id is not None:
            pulumi.set(__self__, "logs_alert_id", logs_alert_id)
        if meta_labels is not None:
            pulumi.set(__self__, "meta_labels", meta_labels)
        if meta_labels_strings is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""meta_labels_strings is deprecated: Deprecated""")
        if meta_labels_strings is not None:
            pulumi.set(__self__, "meta_labels_strings", meta_labels_strings)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notification_groups is not None:
            pulumi.set(__self__, "notification_groups", notification_groups)
        if notification_payload_filters is not None:
            pulumi.set(__self__, "notification_payload_filters", notification_payload_filters)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def condition(self) -> pulumi.Input['LogsAlertConditionArgs']:
        """
        Alert condition.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input['LogsAlertConditionArgs']):
        pulumi.set(self, "condition", value)

    @_builtins.property
    @pulumi.getter
    def filters(self) -> pulumi.Input['LogsAlertFiltersArgs']:
        """
        Alert filters.
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: pulumi.Input['LogsAlertFiltersArgs']):
        pulumi.set(self, "filters", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the logs instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="isActive")
    def is_active(self) -> pulumi.Input[_builtins.bool]:
        """
        Alert is active.
        """
        return pulumi.get(self, "is_active")

    @is_active.setter
    def is_active(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "is_active", value)

    @_builtins.property
    @pulumi.getter
    def severity(self) -> pulumi.Input[_builtins.str]:
        """
        Alert severity.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "severity", value)

    @_builtins.property
    @pulumi.getter(name="activeWhen")
    def active_when(self) -> Optional[pulumi.Input['LogsAlertActiveWhenArgs']]:
        """
        When should the alert be active.
        """
        return pulumi.get(self, "active_when")

    @active_when.setter
    def active_when(self, value: Optional[pulumi.Input['LogsAlertActiveWhenArgs']]):
        pulumi.set(self, "active_when", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Alert description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter
    def expiration(self) -> Optional[pulumi.Input['LogsAlertExpirationArgs']]:
        """
        Alert expiration date.
        """
        return pulumi.get(self, "expiration")

    @expiration.setter
    def expiration(self, value: Optional[pulumi.Input['LogsAlertExpirationArgs']]):
        pulumi.set(self, "expiration", value)

    @_builtins.property
    @pulumi.getter(name="incidentSettings")
    def incident_settings(self) -> Optional[pulumi.Input['LogsAlertIncidentSettingsArgs']]:
        """
        Incident settings, will create the incident based on this configuration.
        """
        return pulumi.get(self, "incident_settings")

    @incident_settings.setter
    def incident_settings(self, value: Optional[pulumi.Input['LogsAlertIncidentSettingsArgs']]):
        pulumi.set(self, "incident_settings", value)

    @_builtins.property
    @pulumi.getter(name="logsAlertId")
    def logs_alert_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "logs_alert_id")

    @logs_alert_id.setter
    def logs_alert_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logs_alert_id", value)

    @_builtins.property
    @pulumi.getter(name="metaLabels")
    def meta_labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogsAlertMetaLabelArgs']]]]:
        """
        The Meta labels to add to the alert.
        """
        return pulumi.get(self, "meta_labels")

    @meta_labels.setter
    def meta_labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogsAlertMetaLabelArgs']]]]):
        pulumi.set(self, "meta_labels", value)

    @_builtins.property
    @pulumi.getter(name="metaLabelsStrings")
    @_utilities.deprecated("""Deprecated""")
    def meta_labels_strings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Meta labels to add to the alert as string with ':' separator.
        """
        return pulumi.get(self, "meta_labels_strings")

    @meta_labels_strings.setter
    def meta_labels_strings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "meta_labels_strings", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Alert name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="notificationGroups")
    def notification_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogsAlertNotificationGroupArgs']]]]:
        """
        Alert notification groups.
        """
        return pulumi.get(self, "notification_groups")

    @notification_groups.setter
    def notification_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogsAlertNotificationGroupArgs']]]]):
        pulumi.set(self, "notification_groups", value)

    @_builtins.property
    @pulumi.getter(name="notificationPayloadFilters")
    def notification_payload_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        JSON keys to include in the alert notification, if left empty get the full log text in the alert notification.
        """
        return pulumi.get(self, "notification_payload_filters")

    @notification_payload_filters.setter
    def notification_payload_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "notification_payload_filters", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the logs instance.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _LogsAlertState:
    def __init__(__self__, *,
                 active_when: Optional[pulumi.Input['LogsAlertActiveWhenArgs']] = None,
                 alert_id: Optional[pulumi.Input[_builtins.str]] = None,
                 condition: Optional[pulumi.Input['LogsAlertConditionArgs']] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 expiration: Optional[pulumi.Input['LogsAlertExpirationArgs']] = None,
                 filters: Optional[pulumi.Input['LogsAlertFiltersArgs']] = None,
                 incident_settings: Optional[pulumi.Input['LogsAlertIncidentSettingsArgs']] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_active: Optional[pulumi.Input[_builtins.bool]] = None,
                 logs_alert_id: Optional[pulumi.Input[_builtins.str]] = None,
                 meta_labels: Optional[pulumi.Input[Sequence[pulumi.Input['LogsAlertMetaLabelArgs']]]] = None,
                 meta_labels_strings: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_groups: Optional[pulumi.Input[Sequence[pulumi.Input['LogsAlertNotificationGroupArgs']]]] = None,
                 notification_payload_filters: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 severity: Optional[pulumi.Input[_builtins.str]] = None,
                 unique_identifier: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering LogsAlert resources.
        :param pulumi.Input['LogsAlertActiveWhenArgs'] active_when: When should the alert be active.
        :param pulumi.Input[_builtins.str] alert_id: Alert Id.
        :param pulumi.Input['LogsAlertConditionArgs'] condition: Alert condition.
        :param pulumi.Input[_builtins.str] description: Alert description.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input['LogsAlertExpirationArgs'] expiration: Alert expiration date.
        :param pulumi.Input['LogsAlertFiltersArgs'] filters: Alert filters.
        :param pulumi.Input['LogsAlertIncidentSettingsArgs'] incident_settings: Incident settings, will create the incident based on this configuration.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the logs instance.
        :param pulumi.Input[_builtins.bool] is_active: Alert is active.
        :param pulumi.Input[Sequence[pulumi.Input['LogsAlertMetaLabelArgs']]] meta_labels: The Meta labels to add to the alert.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] meta_labels_strings: The Meta labels to add to the alert as string with ':' separator.
        :param pulumi.Input[_builtins.str] name: Alert name.
        :param pulumi.Input[Sequence[pulumi.Input['LogsAlertNotificationGroupArgs']]] notification_groups: Alert notification groups.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] notification_payload_filters: JSON keys to include in the alert notification, if left empty get the full log text in the alert notification.
        :param pulumi.Input[_builtins.str] region: The region of the logs instance.
        :param pulumi.Input[_builtins.str] severity: Alert severity.
        :param pulumi.Input[_builtins.str] unique_identifier: Alert unique identifier.
        """
        if active_when is not None:
            pulumi.set(__self__, "active_when", active_when)
        if alert_id is not None:
            pulumi.set(__self__, "alert_id", alert_id)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if expiration is not None:
            pulumi.set(__self__, "expiration", expiration)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if incident_settings is not None:
            pulumi.set(__self__, "incident_settings", incident_settings)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if logs_alert_id is not None:
            pulumi.set(__self__, "logs_alert_id", logs_alert_id)
        if meta_labels is not None:
            pulumi.set(__self__, "meta_labels", meta_labels)
        if meta_labels_strings is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""meta_labels_strings is deprecated: Deprecated""")
        if meta_labels_strings is not None:
            pulumi.set(__self__, "meta_labels_strings", meta_labels_strings)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notification_groups is not None:
            pulumi.set(__self__, "notification_groups", notification_groups)
        if notification_payload_filters is not None:
            pulumi.set(__self__, "notification_payload_filters", notification_payload_filters)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if unique_identifier is not None:
            pulumi.set(__self__, "unique_identifier", unique_identifier)

    @_builtins.property
    @pulumi.getter(name="activeWhen")
    def active_when(self) -> Optional[pulumi.Input['LogsAlertActiveWhenArgs']]:
        """
        When should the alert be active.
        """
        return pulumi.get(self, "active_when")

    @active_when.setter
    def active_when(self, value: Optional[pulumi.Input['LogsAlertActiveWhenArgs']]):
        pulumi.set(self, "active_when", value)

    @_builtins.property
    @pulumi.getter(name="alertId")
    def alert_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Alert Id.
        """
        return pulumi.get(self, "alert_id")

    @alert_id.setter
    def alert_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "alert_id", value)

    @_builtins.property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input['LogsAlertConditionArgs']]:
        """
        Alert condition.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input['LogsAlertConditionArgs']]):
        pulumi.set(self, "condition", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Alert description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter
    def expiration(self) -> Optional[pulumi.Input['LogsAlertExpirationArgs']]:
        """
        Alert expiration date.
        """
        return pulumi.get(self, "expiration")

    @expiration.setter
    def expiration(self, value: Optional[pulumi.Input['LogsAlertExpirationArgs']]):
        pulumi.set(self, "expiration", value)

    @_builtins.property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input['LogsAlertFiltersArgs']]:
        """
        Alert filters.
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input['LogsAlertFiltersArgs']]):
        pulumi.set(self, "filters", value)

    @_builtins.property
    @pulumi.getter(name="incidentSettings")
    def incident_settings(self) -> Optional[pulumi.Input['LogsAlertIncidentSettingsArgs']]:
        """
        Incident settings, will create the incident based on this configuration.
        """
        return pulumi.get(self, "incident_settings")

    @incident_settings.setter
    def incident_settings(self, value: Optional[pulumi.Input['LogsAlertIncidentSettingsArgs']]):
        pulumi.set(self, "incident_settings", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the logs instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Alert is active.
        """
        return pulumi.get(self, "is_active")

    @is_active.setter
    def is_active(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_active", value)

    @_builtins.property
    @pulumi.getter(name="logsAlertId")
    def logs_alert_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "logs_alert_id")

    @logs_alert_id.setter
    def logs_alert_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logs_alert_id", value)

    @_builtins.property
    @pulumi.getter(name="metaLabels")
    def meta_labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogsAlertMetaLabelArgs']]]]:
        """
        The Meta labels to add to the alert.
        """
        return pulumi.get(self, "meta_labels")

    @meta_labels.setter
    def meta_labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogsAlertMetaLabelArgs']]]]):
        pulumi.set(self, "meta_labels", value)

    @_builtins.property
    @pulumi.getter(name="metaLabelsStrings")
    @_utilities.deprecated("""Deprecated""")
    def meta_labels_strings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The Meta labels to add to the alert as string with ':' separator.
        """
        return pulumi.get(self, "meta_labels_strings")

    @meta_labels_strings.setter
    def meta_labels_strings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "meta_labels_strings", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Alert name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="notificationGroups")
    def notification_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogsAlertNotificationGroupArgs']]]]:
        """
        Alert notification groups.
        """
        return pulumi.get(self, "notification_groups")

    @notification_groups.setter
    def notification_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogsAlertNotificationGroupArgs']]]]):
        pulumi.set(self, "notification_groups", value)

    @_builtins.property
    @pulumi.getter(name="notificationPayloadFilters")
    def notification_payload_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        JSON keys to include in the alert notification, if left empty get the full log text in the alert notification.
        """
        return pulumi.get(self, "notification_payload_filters")

    @notification_payload_filters.setter
    def notification_payload_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "notification_payload_filters", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the logs instance.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Alert severity.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "severity", value)

    @_builtins.property
    @pulumi.getter(name="uniqueIdentifier")
    def unique_identifier(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Alert unique identifier.
        """
        return pulumi.get(self, "unique_identifier")

    @unique_identifier.setter
    def unique_identifier(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "unique_identifier", value)


@pulumi.type_token("ibm:index/logsAlert:LogsAlert")
class LogsAlert(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active_when: Optional[pulumi.Input[Union['LogsAlertActiveWhenArgs', 'LogsAlertActiveWhenArgsDict']]] = None,
                 condition: Optional[pulumi.Input[Union['LogsAlertConditionArgs', 'LogsAlertConditionArgsDict']]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 expiration: Optional[pulumi.Input[Union['LogsAlertExpirationArgs', 'LogsAlertExpirationArgsDict']]] = None,
                 filters: Optional[pulumi.Input[Union['LogsAlertFiltersArgs', 'LogsAlertFiltersArgsDict']]] = None,
                 incident_settings: Optional[pulumi.Input[Union['LogsAlertIncidentSettingsArgs', 'LogsAlertIncidentSettingsArgsDict']]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_active: Optional[pulumi.Input[_builtins.bool]] = None,
                 logs_alert_id: Optional[pulumi.Input[_builtins.str]] = None,
                 meta_labels: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogsAlertMetaLabelArgs', 'LogsAlertMetaLabelArgsDict']]]]] = None,
                 meta_labels_strings: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogsAlertNotificationGroupArgs', 'LogsAlertNotificationGroupArgsDict']]]]] = None,
                 notification_payload_filters: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 severity: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a LogsAlert resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['LogsAlertActiveWhenArgs', 'LogsAlertActiveWhenArgsDict']] active_when: When should the alert be active.
        :param pulumi.Input[Union['LogsAlertConditionArgs', 'LogsAlertConditionArgsDict']] condition: Alert condition.
        :param pulumi.Input[_builtins.str] description: Alert description.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[Union['LogsAlertExpirationArgs', 'LogsAlertExpirationArgsDict']] expiration: Alert expiration date.
        :param pulumi.Input[Union['LogsAlertFiltersArgs', 'LogsAlertFiltersArgsDict']] filters: Alert filters.
        :param pulumi.Input[Union['LogsAlertIncidentSettingsArgs', 'LogsAlertIncidentSettingsArgsDict']] incident_settings: Incident settings, will create the incident based on this configuration.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the logs instance.
        :param pulumi.Input[_builtins.bool] is_active: Alert is active.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LogsAlertMetaLabelArgs', 'LogsAlertMetaLabelArgsDict']]]] meta_labels: The Meta labels to add to the alert.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] meta_labels_strings: The Meta labels to add to the alert as string with ':' separator.
        :param pulumi.Input[_builtins.str] name: Alert name.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LogsAlertNotificationGroupArgs', 'LogsAlertNotificationGroupArgsDict']]]] notification_groups: Alert notification groups.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] notification_payload_filters: JSON keys to include in the alert notification, if left empty get the full log text in the alert notification.
        :param pulumi.Input[_builtins.str] region: The region of the logs instance.
        :param pulumi.Input[_builtins.str] severity: Alert severity.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LogsAlertArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a LogsAlert resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LogsAlertArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LogsAlertArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active_when: Optional[pulumi.Input[Union['LogsAlertActiveWhenArgs', 'LogsAlertActiveWhenArgsDict']]] = None,
                 condition: Optional[pulumi.Input[Union['LogsAlertConditionArgs', 'LogsAlertConditionArgsDict']]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 expiration: Optional[pulumi.Input[Union['LogsAlertExpirationArgs', 'LogsAlertExpirationArgsDict']]] = None,
                 filters: Optional[pulumi.Input[Union['LogsAlertFiltersArgs', 'LogsAlertFiltersArgsDict']]] = None,
                 incident_settings: Optional[pulumi.Input[Union['LogsAlertIncidentSettingsArgs', 'LogsAlertIncidentSettingsArgsDict']]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 is_active: Optional[pulumi.Input[_builtins.bool]] = None,
                 logs_alert_id: Optional[pulumi.Input[_builtins.str]] = None,
                 meta_labels: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogsAlertMetaLabelArgs', 'LogsAlertMetaLabelArgsDict']]]]] = None,
                 meta_labels_strings: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notification_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogsAlertNotificationGroupArgs', 'LogsAlertNotificationGroupArgsDict']]]]] = None,
                 notification_payload_filters: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 severity: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LogsAlertArgs.__new__(LogsAlertArgs)

            __props__.__dict__["active_when"] = active_when
            if condition is None and not opts.urn:
                raise TypeError("Missing required property 'condition'")
            __props__.__dict__["condition"] = condition
            __props__.__dict__["description"] = description
            __props__.__dict__["endpoint_type"] = endpoint_type
            __props__.__dict__["expiration"] = expiration
            if filters is None and not opts.urn:
                raise TypeError("Missing required property 'filters'")
            __props__.__dict__["filters"] = filters
            __props__.__dict__["incident_settings"] = incident_settings
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if is_active is None and not opts.urn:
                raise TypeError("Missing required property 'is_active'")
            __props__.__dict__["is_active"] = is_active
            __props__.__dict__["logs_alert_id"] = logs_alert_id
            __props__.__dict__["meta_labels"] = meta_labels
            __props__.__dict__["meta_labels_strings"] = meta_labels_strings
            __props__.__dict__["name"] = name
            __props__.__dict__["notification_groups"] = notification_groups
            __props__.__dict__["notification_payload_filters"] = notification_payload_filters
            __props__.__dict__["region"] = region
            if severity is None and not opts.urn:
                raise TypeError("Missing required property 'severity'")
            __props__.__dict__["severity"] = severity
            __props__.__dict__["alert_id"] = None
            __props__.__dict__["unique_identifier"] = None
        super(LogsAlert, __self__).__init__(
            'ibm:index/logsAlert:LogsAlert',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            active_when: Optional[pulumi.Input[Union['LogsAlertActiveWhenArgs', 'LogsAlertActiveWhenArgsDict']]] = None,
            alert_id: Optional[pulumi.Input[_builtins.str]] = None,
            condition: Optional[pulumi.Input[Union['LogsAlertConditionArgs', 'LogsAlertConditionArgsDict']]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
            expiration: Optional[pulumi.Input[Union['LogsAlertExpirationArgs', 'LogsAlertExpirationArgsDict']]] = None,
            filters: Optional[pulumi.Input[Union['LogsAlertFiltersArgs', 'LogsAlertFiltersArgsDict']]] = None,
            incident_settings: Optional[pulumi.Input[Union['LogsAlertIncidentSettingsArgs', 'LogsAlertIncidentSettingsArgsDict']]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            is_active: Optional[pulumi.Input[_builtins.bool]] = None,
            logs_alert_id: Optional[pulumi.Input[_builtins.str]] = None,
            meta_labels: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogsAlertMetaLabelArgs', 'LogsAlertMetaLabelArgsDict']]]]] = None,
            meta_labels_strings: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            notification_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['LogsAlertNotificationGroupArgs', 'LogsAlertNotificationGroupArgsDict']]]]] = None,
            notification_payload_filters: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            severity: Optional[pulumi.Input[_builtins.str]] = None,
            unique_identifier: Optional[pulumi.Input[_builtins.str]] = None) -> 'LogsAlert':
        """
        Get an existing LogsAlert resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['LogsAlertActiveWhenArgs', 'LogsAlertActiveWhenArgsDict']] active_when: When should the alert be active.
        :param pulumi.Input[_builtins.str] alert_id: Alert Id.
        :param pulumi.Input[Union['LogsAlertConditionArgs', 'LogsAlertConditionArgsDict']] condition: Alert condition.
        :param pulumi.Input[_builtins.str] description: Alert description.
        :param pulumi.Input[_builtins.str] endpoint_type: public or private.
        :param pulumi.Input[Union['LogsAlertExpirationArgs', 'LogsAlertExpirationArgsDict']] expiration: Alert expiration date.
        :param pulumi.Input[Union['LogsAlertFiltersArgs', 'LogsAlertFiltersArgsDict']] filters: Alert filters.
        :param pulumi.Input[Union['LogsAlertIncidentSettingsArgs', 'LogsAlertIncidentSettingsArgsDict']] incident_settings: Incident settings, will create the incident based on this configuration.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the logs instance.
        :param pulumi.Input[_builtins.bool] is_active: Alert is active.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LogsAlertMetaLabelArgs', 'LogsAlertMetaLabelArgsDict']]]] meta_labels: The Meta labels to add to the alert.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] meta_labels_strings: The Meta labels to add to the alert as string with ':' separator.
        :param pulumi.Input[_builtins.str] name: Alert name.
        :param pulumi.Input[Sequence[pulumi.Input[Union['LogsAlertNotificationGroupArgs', 'LogsAlertNotificationGroupArgsDict']]]] notification_groups: Alert notification groups.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] notification_payload_filters: JSON keys to include in the alert notification, if left empty get the full log text in the alert notification.
        :param pulumi.Input[_builtins.str] region: The region of the logs instance.
        :param pulumi.Input[_builtins.str] severity: Alert severity.
        :param pulumi.Input[_builtins.str] unique_identifier: Alert unique identifier.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LogsAlertState.__new__(_LogsAlertState)

        __props__.__dict__["active_when"] = active_when
        __props__.__dict__["alert_id"] = alert_id
        __props__.__dict__["condition"] = condition
        __props__.__dict__["description"] = description
        __props__.__dict__["endpoint_type"] = endpoint_type
        __props__.__dict__["expiration"] = expiration
        __props__.__dict__["filters"] = filters
        __props__.__dict__["incident_settings"] = incident_settings
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["is_active"] = is_active
        __props__.__dict__["logs_alert_id"] = logs_alert_id
        __props__.__dict__["meta_labels"] = meta_labels
        __props__.__dict__["meta_labels_strings"] = meta_labels_strings
        __props__.__dict__["name"] = name
        __props__.__dict__["notification_groups"] = notification_groups
        __props__.__dict__["notification_payload_filters"] = notification_payload_filters
        __props__.__dict__["region"] = region
        __props__.__dict__["severity"] = severity
        __props__.__dict__["unique_identifier"] = unique_identifier
        return LogsAlert(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="activeWhen")
    def active_when(self) -> pulumi.Output[Optional['outputs.LogsAlertActiveWhen']]:
        """
        When should the alert be active.
        """
        return pulumi.get(self, "active_when")

    @_builtins.property
    @pulumi.getter(name="alertId")
    def alert_id(self) -> pulumi.Output[_builtins.str]:
        """
        Alert Id.
        """
        return pulumi.get(self, "alert_id")

    @_builtins.property
    @pulumi.getter
    def condition(self) -> pulumi.Output['outputs.LogsAlertCondition']:
        """
        Alert condition.
        """
        return pulumi.get(self, "condition")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Alert description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        public or private.
        """
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter
    def expiration(self) -> pulumi.Output[Optional['outputs.LogsAlertExpiration']]:
        """
        Alert expiration date.
        """
        return pulumi.get(self, "expiration")

    @_builtins.property
    @pulumi.getter
    def filters(self) -> pulumi.Output['outputs.LogsAlertFilters']:
        """
        Alert filters.
        """
        return pulumi.get(self, "filters")

    @_builtins.property
    @pulumi.getter(name="incidentSettings")
    def incident_settings(self) -> pulumi.Output[Optional['outputs.LogsAlertIncidentSettings']]:
        """
        Incident settings, will create the incident based on this configuration.
        """
        return pulumi.get(self, "incident_settings")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the logs instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="isActive")
    def is_active(self) -> pulumi.Output[_builtins.bool]:
        """
        Alert is active.
        """
        return pulumi.get(self, "is_active")

    @_builtins.property
    @pulumi.getter(name="logsAlertId")
    def logs_alert_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "logs_alert_id")

    @_builtins.property
    @pulumi.getter(name="metaLabels")
    def meta_labels(self) -> pulumi.Output[Optional[Sequence['outputs.LogsAlertMetaLabel']]]:
        """
        The Meta labels to add to the alert.
        """
        return pulumi.get(self, "meta_labels")

    @_builtins.property
    @pulumi.getter(name="metaLabelsStrings")
    @_utilities.deprecated("""Deprecated""")
    def meta_labels_strings(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        The Meta labels to add to the alert as string with ':' separator.
        """
        return pulumi.get(self, "meta_labels_strings")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Alert name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="notificationGroups")
    def notification_groups(self) -> pulumi.Output[Optional[Sequence['outputs.LogsAlertNotificationGroup']]]:
        """
        Alert notification groups.
        """
        return pulumi.get(self, "notification_groups")

    @_builtins.property
    @pulumi.getter(name="notificationPayloadFilters")
    def notification_payload_filters(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        JSON keys to include in the alert notification, if left empty get the full log text in the alert notification.
        """
        return pulumi.get(self, "notification_payload_filters")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region of the logs instance.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> pulumi.Output[_builtins.str]:
        """
        Alert severity.
        """
        return pulumi.get(self, "severity")

    @_builtins.property
    @pulumi.getter(name="uniqueIdentifier")
    def unique_identifier(self) -> pulumi.Output[_builtins.str]:
        """
        Alert unique identifier.
        """
        return pulumi.get(self, "unique_identifier")

