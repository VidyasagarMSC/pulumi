# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsBareMetalServerNetworkAttachmentInitArgs', 'IsBareMetalServerNetworkAttachment']

@pulumi.input_type
class IsBareMetalServerNetworkAttachmentInitArgs:
    def __init__(__self__, *,
                 bare_metal_server: pulumi.Input[_builtins.str],
                 allow_to_float: Optional[pulumi.Input[_builtins.bool]] = None,
                 allowed_vlans: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 hard_stop: Optional[pulumi.Input[_builtins.bool]] = None,
                 interface_type: Optional[pulumi.Input[_builtins.str]] = None,
                 is_bare_metal_server_network_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['IsBareMetalServerNetworkAttachmentTimeoutsArgs']] = None,
                 virtual_network_interface: Optional[pulumi.Input['IsBareMetalServerNetworkAttachmentVirtualNetworkInterfaceArgs']] = None,
                 vlan: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a IsBareMetalServerNetworkAttachment resource.
        :param pulumi.Input[_builtins.str] bare_metal_server: The bare metal server identifier.
        :param pulumi.Input[_builtins.bool] allow_to_float: Indicates if the bare metal server network attachment can automatically float to any other server within the same
               `resource_group`. The bare metal server network attachment will float automatically if the network detects a GARP or
               RARP on another bare metal server in the resource group. Applies only to bare metal server network attachments with
               `vlan` interface type.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] allowed_vlans: Indicates what VLAN IDs (for VLAN type only) can use this physical (PCI type) attachment.
        :param pulumi.Input[_builtins.bool] hard_stop: Only used for PCI network attachments, whether to hard/immediately stop server
        :param pulumi.Input[_builtins.str] interface_type: The network attachment's interface type:- `pci`: a physical PCI device which can only be created or deleted when the
               bare metal server is stopped - Has an `allowed_vlans` property which controls the VLANs that will be permitted to use
               the PCI attachment - Cannot directly use an IEEE 802.1q VLAN tag.- `vlan`: a virtual device, used through a `pci` device
               that has the `vlan` in its array of `allowed_vlans`. - Must use an IEEE 802.1q tag.The enumerated values for this
               property are expected to expand in the future. When processing this property, check for and log unknown values.
               Optionally halt processing and surface the error, or bypass the resource on which the unexpected property value was
               encountered.
        :param pulumi.Input[_builtins.str] name: The name for this bare metal server network attachment. The name is unique across all network attachments for the bare
               metal server.
        :param pulumi.Input['IsBareMetalServerNetworkAttachmentVirtualNetworkInterfaceArgs'] virtual_network_interface: A virtual network interface for the bare metal server network attachment. This can be specified using an existing
               virtual network interface, or a prototype object for a new virtual network interface.
        :param pulumi.Input[_builtins.float] vlan: Indicates the 802.1Q VLAN ID tag that must be used for all traffic on this attachment.
        """
        pulumi.set(__self__, "bare_metal_server", bare_metal_server)
        if allow_to_float is not None:
            pulumi.set(__self__, "allow_to_float", allow_to_float)
        if allowed_vlans is not None:
            pulumi.set(__self__, "allowed_vlans", allowed_vlans)
        if hard_stop is not None:
            pulumi.set(__self__, "hard_stop", hard_stop)
        if interface_type is not None:
            pulumi.set(__self__, "interface_type", interface_type)
        if is_bare_metal_server_network_attachment_id is not None:
            pulumi.set(__self__, "is_bare_metal_server_network_attachment_id", is_bare_metal_server_network_attachment_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if virtual_network_interface is not None:
            pulumi.set(__self__, "virtual_network_interface", virtual_network_interface)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @_builtins.property
    @pulumi.getter(name="bareMetalServer")
    def bare_metal_server(self) -> pulumi.Input[_builtins.str]:
        """
        The bare metal server identifier.
        """
        return pulumi.get(self, "bare_metal_server")

    @bare_metal_server.setter
    def bare_metal_server(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "bare_metal_server", value)

    @_builtins.property
    @pulumi.getter(name="allowToFloat")
    def allow_to_float(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if the bare metal server network attachment can automatically float to any other server within the same
        `resource_group`. The bare metal server network attachment will float automatically if the network detects a GARP or
        RARP on another bare metal server in the resource group. Applies only to bare metal server network attachments with
        `vlan` interface type.
        """
        return pulumi.get(self, "allow_to_float")

    @allow_to_float.setter
    def allow_to_float(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_to_float", value)

    @_builtins.property
    @pulumi.getter(name="allowedVlans")
    def allowed_vlans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        """
        Indicates what VLAN IDs (for VLAN type only) can use this physical (PCI type) attachment.
        """
        return pulumi.get(self, "allowed_vlans")

    @allowed_vlans.setter
    def allowed_vlans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "allowed_vlans", value)

    @_builtins.property
    @pulumi.getter(name="hardStop")
    def hard_stop(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Only used for PCI network attachments, whether to hard/immediately stop server
        """
        return pulumi.get(self, "hard_stop")

    @hard_stop.setter
    def hard_stop(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "hard_stop", value)

    @_builtins.property
    @pulumi.getter(name="interfaceType")
    def interface_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The network attachment's interface type:- `pci`: a physical PCI device which can only be created or deleted when the
        bare metal server is stopped - Has an `allowed_vlans` property which controls the VLANs that will be permitted to use
        the PCI attachment - Cannot directly use an IEEE 802.1q VLAN tag.- `vlan`: a virtual device, used through a `pci` device
        that has the `vlan` in its array of `allowed_vlans`. - Must use an IEEE 802.1q tag.The enumerated values for this
        property are expected to expand in the future. When processing this property, check for and log unknown values.
        Optionally halt processing and surface the error, or bypass the resource on which the unexpected property value was
        encountered.
        """
        return pulumi.get(self, "interface_type")

    @interface_type.setter
    def interface_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_type", value)

    @_builtins.property
    @pulumi.getter(name="isBareMetalServerNetworkAttachmentId")
    def is_bare_metal_server_network_attachment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_bare_metal_server_network_attachment_id")

    @is_bare_metal_server_network_attachment_id.setter
    def is_bare_metal_server_network_attachment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_bare_metal_server_network_attachment_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name for this bare metal server network attachment. The name is unique across all network attachments for the bare
        metal server.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsBareMetalServerNetworkAttachmentTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsBareMetalServerNetworkAttachmentTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="virtualNetworkInterface")
    def virtual_network_interface(self) -> Optional[pulumi.Input['IsBareMetalServerNetworkAttachmentVirtualNetworkInterfaceArgs']]:
        """
        A virtual network interface for the bare metal server network attachment. This can be specified using an existing
        virtual network interface, or a prototype object for a new virtual network interface.
        """
        return pulumi.get(self, "virtual_network_interface")

    @virtual_network_interface.setter
    def virtual_network_interface(self, value: Optional[pulumi.Input['IsBareMetalServerNetworkAttachmentVirtualNetworkInterfaceArgs']]):
        pulumi.set(self, "virtual_network_interface", value)

    @_builtins.property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Indicates the 802.1Q VLAN ID tag that must be used for all traffic on this attachment.
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "vlan", value)


@pulumi.input_type
class _IsBareMetalServerNetworkAttachmentState:
    def __init__(__self__, *,
                 allow_to_float: Optional[pulumi.Input[_builtins.bool]] = None,
                 allowed_vlans: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 bare_metal_server: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 floating_bare_metal_server: Optional[pulumi.Input[_builtins.str]] = None,
                 hard_stop: Optional[pulumi.Input[_builtins.bool]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 interface_type: Optional[pulumi.Input[_builtins.str]] = None,
                 is_bare_metal_server_network_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 network_attachment: Optional[pulumi.Input[_builtins.str]] = None,
                 port_speed: Optional[pulumi.Input[_builtins.float]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['IsBareMetalServerNetworkAttachmentTimeoutsArgs']] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 virtual_network_interface: Optional[pulumi.Input['IsBareMetalServerNetworkAttachmentVirtualNetworkInterfaceArgs']] = None,
                 virtual_network_interface_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vlan: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering IsBareMetalServerNetworkAttachment resources.
        :param pulumi.Input[_builtins.bool] allow_to_float: Indicates if the bare metal server network attachment can automatically float to any other server within the same
               `resource_group`. The bare metal server network attachment will float automatically if the network detects a GARP or
               RARP on another bare metal server in the resource group. Applies only to bare metal server network attachments with
               `vlan` interface type.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] allowed_vlans: Indicates what VLAN IDs (for VLAN type only) can use this physical (PCI type) attachment.
        :param pulumi.Input[_builtins.str] bare_metal_server: The bare metal server identifier.
        :param pulumi.Input[_builtins.str] created_at: The date and time that the bare metal server network attachment was created.
        :param pulumi.Input[_builtins.str] floating_bare_metal_server: The bare metal server identifier of the server where the attachment is floated to(only applicated for allow_to_float
               true).
        :param pulumi.Input[_builtins.bool] hard_stop: Only used for PCI network attachments, whether to hard/immediately stop server
        :param pulumi.Input[_builtins.str] href: The URL for this bare metal server network attachment.
        :param pulumi.Input[_builtins.str] interface_type: The network attachment's interface type:- `pci`: a physical PCI device which can only be created or deleted when the
               bare metal server is stopped - Has an `allowed_vlans` property which controls the VLANs that will be permitted to use
               the PCI attachment - Cannot directly use an IEEE 802.1q VLAN tag.- `vlan`: a virtual device, used through a `pci` device
               that has the `vlan` in its array of `allowed_vlans`. - Must use an IEEE 802.1q tag.The enumerated values for this
               property are expected to expand in the future. When processing this property, check for and log unknown values.
               Optionally halt processing and surface the error, or bypass the resource on which the unexpected property value was
               encountered.
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of the bare metal server network attachment.
        :param pulumi.Input[_builtins.str] name: The name for this bare metal server network attachment. The name is unique across all network attachments for the bare
               metal server.
        :param pulumi.Input[_builtins.str] network_attachment: The network attachment's id.
        :param pulumi.Input[_builtins.float] port_speed: The port speed for this bare metal server network attachment in Mbps.
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input[_builtins.str] type: The bare metal server network attachment type.
        :param pulumi.Input['IsBareMetalServerNetworkAttachmentVirtualNetworkInterfaceArgs'] virtual_network_interface: A virtual network interface for the bare metal server network attachment. This can be specified using an existing
               virtual network interface, or a prototype object for a new virtual network interface.
        :param pulumi.Input[_builtins.str] virtual_network_interface_id: The virtual_network_interface's id.
        :param pulumi.Input[_builtins.float] vlan: Indicates the 802.1Q VLAN ID tag that must be used for all traffic on this attachment.
        """
        if allow_to_float is not None:
            pulumi.set(__self__, "allow_to_float", allow_to_float)
        if allowed_vlans is not None:
            pulumi.set(__self__, "allowed_vlans", allowed_vlans)
        if bare_metal_server is not None:
            pulumi.set(__self__, "bare_metal_server", bare_metal_server)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if floating_bare_metal_server is not None:
            pulumi.set(__self__, "floating_bare_metal_server", floating_bare_metal_server)
        if hard_stop is not None:
            pulumi.set(__self__, "hard_stop", hard_stop)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if interface_type is not None:
            pulumi.set(__self__, "interface_type", interface_type)
        if is_bare_metal_server_network_attachment_id is not None:
            pulumi.set(__self__, "is_bare_metal_server_network_attachment_id", is_bare_metal_server_network_attachment_id)
        if lifecycle_state is not None:
            pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_attachment is not None:
            pulumi.set(__self__, "network_attachment", network_attachment)
        if port_speed is not None:
            pulumi.set(__self__, "port_speed", port_speed)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if virtual_network_interface is not None:
            pulumi.set(__self__, "virtual_network_interface", virtual_network_interface)
        if virtual_network_interface_id is not None:
            pulumi.set(__self__, "virtual_network_interface_id", virtual_network_interface_id)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @_builtins.property
    @pulumi.getter(name="allowToFloat")
    def allow_to_float(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if the bare metal server network attachment can automatically float to any other server within the same
        `resource_group`. The bare metal server network attachment will float automatically if the network detects a GARP or
        RARP on another bare metal server in the resource group. Applies only to bare metal server network attachments with
        `vlan` interface type.
        """
        return pulumi.get(self, "allow_to_float")

    @allow_to_float.setter
    def allow_to_float(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_to_float", value)

    @_builtins.property
    @pulumi.getter(name="allowedVlans")
    def allowed_vlans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]:
        """
        Indicates what VLAN IDs (for VLAN type only) can use this physical (PCI type) attachment.
        """
        return pulumi.get(self, "allowed_vlans")

    @allowed_vlans.setter
    def allowed_vlans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]]):
        pulumi.set(self, "allowed_vlans", value)

    @_builtins.property
    @pulumi.getter(name="bareMetalServer")
    def bare_metal_server(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The bare metal server identifier.
        """
        return pulumi.get(self, "bare_metal_server")

    @bare_metal_server.setter
    def bare_metal_server(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bare_metal_server", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time that the bare metal server network attachment was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="floatingBareMetalServer")
    def floating_bare_metal_server(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The bare metal server identifier of the server where the attachment is floated to(only applicated for allow_to_float
        true).
        """
        return pulumi.get(self, "floating_bare_metal_server")

    @floating_bare_metal_server.setter
    def floating_bare_metal_server(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "floating_bare_metal_server", value)

    @_builtins.property
    @pulumi.getter(name="hardStop")
    def hard_stop(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Only used for PCI network attachments, whether to hard/immediately stop server
        """
        return pulumi.get(self, "hard_stop")

    @hard_stop.setter
    def hard_stop(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "hard_stop", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL for this bare metal server network attachment.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="interfaceType")
    def interface_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The network attachment's interface type:- `pci`: a physical PCI device which can only be created or deleted when the
        bare metal server is stopped - Has an `allowed_vlans` property which controls the VLANs that will be permitted to use
        the PCI attachment - Cannot directly use an IEEE 802.1q VLAN tag.- `vlan`: a virtual device, used through a `pci` device
        that has the `vlan` in its array of `allowed_vlans`. - Must use an IEEE 802.1q tag.The enumerated values for this
        property are expected to expand in the future. When processing this property, check for and log unknown values.
        Optionally halt processing and surface the error, or bypass the resource on which the unexpected property value was
        encountered.
        """
        return pulumi.get(self, "interface_type")

    @interface_type.setter
    def interface_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "interface_type", value)

    @_builtins.property
    @pulumi.getter(name="isBareMetalServerNetworkAttachmentId")
    def is_bare_metal_server_network_attachment_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_bare_metal_server_network_attachment_id")

    @is_bare_metal_server_network_attachment_id.setter
    def is_bare_metal_server_network_attachment_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_bare_metal_server_network_attachment_id", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The lifecycle state of the bare metal server network attachment.
        """
        return pulumi.get(self, "lifecycle_state")

    @lifecycle_state.setter
    def lifecycle_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lifecycle_state", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name for this bare metal server network attachment. The name is unique across all network attachments for the bare
        metal server.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="networkAttachment")
    def network_attachment(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The network attachment's id.
        """
        return pulumi.get(self, "network_attachment")

    @network_attachment.setter
    def network_attachment(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_attachment", value)

    @_builtins.property
    @pulumi.getter(name="portSpeed")
    def port_speed(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The port speed for this bare metal server network attachment in Mbps.
        """
        return pulumi.get(self, "port_speed")

    @port_speed.setter
    def port_speed(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "port_speed", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['IsBareMetalServerNetworkAttachmentTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['IsBareMetalServerNetworkAttachmentTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The bare metal server network attachment type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="virtualNetworkInterface")
    def virtual_network_interface(self) -> Optional[pulumi.Input['IsBareMetalServerNetworkAttachmentVirtualNetworkInterfaceArgs']]:
        """
        A virtual network interface for the bare metal server network attachment. This can be specified using an existing
        virtual network interface, or a prototype object for a new virtual network interface.
        """
        return pulumi.get(self, "virtual_network_interface")

    @virtual_network_interface.setter
    def virtual_network_interface(self, value: Optional[pulumi.Input['IsBareMetalServerNetworkAttachmentVirtualNetworkInterfaceArgs']]):
        pulumi.set(self, "virtual_network_interface", value)

    @_builtins.property
    @pulumi.getter(name="virtualNetworkInterfaceId")
    def virtual_network_interface_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The virtual_network_interface's id.
        """
        return pulumi.get(self, "virtual_network_interface_id")

    @virtual_network_interface_id.setter
    def virtual_network_interface_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "virtual_network_interface_id", value)

    @_builtins.property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Indicates the 802.1Q VLAN ID tag that must be used for all traffic on this attachment.
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "vlan", value)


@pulumi.type_token("ibm:index/isBareMetalServerNetworkAttachment:IsBareMetalServerNetworkAttachment")
class IsBareMetalServerNetworkAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_to_float: Optional[pulumi.Input[_builtins.bool]] = None,
                 allowed_vlans: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 bare_metal_server: Optional[pulumi.Input[_builtins.str]] = None,
                 hard_stop: Optional[pulumi.Input[_builtins.bool]] = None,
                 interface_type: Optional[pulumi.Input[_builtins.str]] = None,
                 is_bare_metal_server_network_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsBareMetalServerNetworkAttachmentTimeoutsArgs', 'IsBareMetalServerNetworkAttachmentTimeoutsArgsDict']]] = None,
                 virtual_network_interface: Optional[pulumi.Input[Union['IsBareMetalServerNetworkAttachmentVirtualNetworkInterfaceArgs', 'IsBareMetalServerNetworkAttachmentVirtualNetworkInterfaceArgsDict']]] = None,
                 vlan: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a IsBareMetalServerNetworkAttachment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] allow_to_float: Indicates if the bare metal server network attachment can automatically float to any other server within the same
               `resource_group`. The bare metal server network attachment will float automatically if the network detects a GARP or
               RARP on another bare metal server in the resource group. Applies only to bare metal server network attachments with
               `vlan` interface type.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] allowed_vlans: Indicates what VLAN IDs (for VLAN type only) can use this physical (PCI type) attachment.
        :param pulumi.Input[_builtins.str] bare_metal_server: The bare metal server identifier.
        :param pulumi.Input[_builtins.bool] hard_stop: Only used for PCI network attachments, whether to hard/immediately stop server
        :param pulumi.Input[_builtins.str] interface_type: The network attachment's interface type:- `pci`: a physical PCI device which can only be created or deleted when the
               bare metal server is stopped - Has an `allowed_vlans` property which controls the VLANs that will be permitted to use
               the PCI attachment - Cannot directly use an IEEE 802.1q VLAN tag.- `vlan`: a virtual device, used through a `pci` device
               that has the `vlan` in its array of `allowed_vlans`. - Must use an IEEE 802.1q tag.The enumerated values for this
               property are expected to expand in the future. When processing this property, check for and log unknown values.
               Optionally halt processing and surface the error, or bypass the resource on which the unexpected property value was
               encountered.
        :param pulumi.Input[_builtins.str] name: The name for this bare metal server network attachment. The name is unique across all network attachments for the bare
               metal server.
        :param pulumi.Input[Union['IsBareMetalServerNetworkAttachmentVirtualNetworkInterfaceArgs', 'IsBareMetalServerNetworkAttachmentVirtualNetworkInterfaceArgsDict']] virtual_network_interface: A virtual network interface for the bare metal server network attachment. This can be specified using an existing
               virtual network interface, or a prototype object for a new virtual network interface.
        :param pulumi.Input[_builtins.float] vlan: Indicates the 802.1Q VLAN ID tag that must be used for all traffic on this attachment.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsBareMetalServerNetworkAttachmentInitArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsBareMetalServerNetworkAttachment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsBareMetalServerNetworkAttachmentInitArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsBareMetalServerNetworkAttachmentInitArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_to_float: Optional[pulumi.Input[_builtins.bool]] = None,
                 allowed_vlans: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
                 bare_metal_server: Optional[pulumi.Input[_builtins.str]] = None,
                 hard_stop: Optional[pulumi.Input[_builtins.bool]] = None,
                 interface_type: Optional[pulumi.Input[_builtins.str]] = None,
                 is_bare_metal_server_network_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['IsBareMetalServerNetworkAttachmentTimeoutsArgs', 'IsBareMetalServerNetworkAttachmentTimeoutsArgsDict']]] = None,
                 virtual_network_interface: Optional[pulumi.Input[Union['IsBareMetalServerNetworkAttachmentVirtualNetworkInterfaceArgs', 'IsBareMetalServerNetworkAttachmentVirtualNetworkInterfaceArgsDict']]] = None,
                 vlan: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsBareMetalServerNetworkAttachmentInitArgs.__new__(IsBareMetalServerNetworkAttachmentInitArgs)

            __props__.__dict__["allow_to_float"] = allow_to_float
            __props__.__dict__["allowed_vlans"] = allowed_vlans
            if bare_metal_server is None and not opts.urn:
                raise TypeError("Missing required property 'bare_metal_server'")
            __props__.__dict__["bare_metal_server"] = bare_metal_server
            __props__.__dict__["hard_stop"] = hard_stop
            __props__.__dict__["interface_type"] = interface_type
            __props__.__dict__["is_bare_metal_server_network_attachment_id"] = is_bare_metal_server_network_attachment_id
            __props__.__dict__["name"] = name
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["virtual_network_interface"] = virtual_network_interface
            __props__.__dict__["vlan"] = vlan
            __props__.__dict__["created_at"] = None
            __props__.__dict__["floating_bare_metal_server"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["lifecycle_state"] = None
            __props__.__dict__["network_attachment"] = None
            __props__.__dict__["port_speed"] = None
            __props__.__dict__["resource_type"] = None
            __props__.__dict__["type"] = None
            __props__.__dict__["virtual_network_interface_id"] = None
        super(IsBareMetalServerNetworkAttachment, __self__).__init__(
            'ibm:index/isBareMetalServerNetworkAttachment:IsBareMetalServerNetworkAttachment',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_to_float: Optional[pulumi.Input[_builtins.bool]] = None,
            allowed_vlans: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.float]]]] = None,
            bare_metal_server: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            floating_bare_metal_server: Optional[pulumi.Input[_builtins.str]] = None,
            hard_stop: Optional[pulumi.Input[_builtins.bool]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            interface_type: Optional[pulumi.Input[_builtins.str]] = None,
            is_bare_metal_server_network_attachment_id: Optional[pulumi.Input[_builtins.str]] = None,
            lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            network_attachment: Optional[pulumi.Input[_builtins.str]] = None,
            port_speed: Optional[pulumi.Input[_builtins.float]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['IsBareMetalServerNetworkAttachmentTimeoutsArgs', 'IsBareMetalServerNetworkAttachmentTimeoutsArgsDict']]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            virtual_network_interface: Optional[pulumi.Input[Union['IsBareMetalServerNetworkAttachmentVirtualNetworkInterfaceArgs', 'IsBareMetalServerNetworkAttachmentVirtualNetworkInterfaceArgsDict']]] = None,
            virtual_network_interface_id: Optional[pulumi.Input[_builtins.str]] = None,
            vlan: Optional[pulumi.Input[_builtins.float]] = None) -> 'IsBareMetalServerNetworkAttachment':
        """
        Get an existing IsBareMetalServerNetworkAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] allow_to_float: Indicates if the bare metal server network attachment can automatically float to any other server within the same
               `resource_group`. The bare metal server network attachment will float automatically if the network detects a GARP or
               RARP on another bare metal server in the resource group. Applies only to bare metal server network attachments with
               `vlan` interface type.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.float]]] allowed_vlans: Indicates what VLAN IDs (for VLAN type only) can use this physical (PCI type) attachment.
        :param pulumi.Input[_builtins.str] bare_metal_server: The bare metal server identifier.
        :param pulumi.Input[_builtins.str] created_at: The date and time that the bare metal server network attachment was created.
        :param pulumi.Input[_builtins.str] floating_bare_metal_server: The bare metal server identifier of the server where the attachment is floated to(only applicated for allow_to_float
               true).
        :param pulumi.Input[_builtins.bool] hard_stop: Only used for PCI network attachments, whether to hard/immediately stop server
        :param pulumi.Input[_builtins.str] href: The URL for this bare metal server network attachment.
        :param pulumi.Input[_builtins.str] interface_type: The network attachment's interface type:- `pci`: a physical PCI device which can only be created or deleted when the
               bare metal server is stopped - Has an `allowed_vlans` property which controls the VLANs that will be permitted to use
               the PCI attachment - Cannot directly use an IEEE 802.1q VLAN tag.- `vlan`: a virtual device, used through a `pci` device
               that has the `vlan` in its array of `allowed_vlans`. - Must use an IEEE 802.1q tag.The enumerated values for this
               property are expected to expand in the future. When processing this property, check for and log unknown values.
               Optionally halt processing and surface the error, or bypass the resource on which the unexpected property value was
               encountered.
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of the bare metal server network attachment.
        :param pulumi.Input[_builtins.str] name: The name for this bare metal server network attachment. The name is unique across all network attachments for the bare
               metal server.
        :param pulumi.Input[_builtins.str] network_attachment: The network attachment's id.
        :param pulumi.Input[_builtins.float] port_speed: The port speed for this bare metal server network attachment in Mbps.
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input[_builtins.str] type: The bare metal server network attachment type.
        :param pulumi.Input[Union['IsBareMetalServerNetworkAttachmentVirtualNetworkInterfaceArgs', 'IsBareMetalServerNetworkAttachmentVirtualNetworkInterfaceArgsDict']] virtual_network_interface: A virtual network interface for the bare metal server network attachment. This can be specified using an existing
               virtual network interface, or a prototype object for a new virtual network interface.
        :param pulumi.Input[_builtins.str] virtual_network_interface_id: The virtual_network_interface's id.
        :param pulumi.Input[_builtins.float] vlan: Indicates the 802.1Q VLAN ID tag that must be used for all traffic on this attachment.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsBareMetalServerNetworkAttachmentState.__new__(_IsBareMetalServerNetworkAttachmentState)

        __props__.__dict__["allow_to_float"] = allow_to_float
        __props__.__dict__["allowed_vlans"] = allowed_vlans
        __props__.__dict__["bare_metal_server"] = bare_metal_server
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["floating_bare_metal_server"] = floating_bare_metal_server
        __props__.__dict__["hard_stop"] = hard_stop
        __props__.__dict__["href"] = href
        __props__.__dict__["interface_type"] = interface_type
        __props__.__dict__["is_bare_metal_server_network_attachment_id"] = is_bare_metal_server_network_attachment_id
        __props__.__dict__["lifecycle_state"] = lifecycle_state
        __props__.__dict__["name"] = name
        __props__.__dict__["network_attachment"] = network_attachment
        __props__.__dict__["port_speed"] = port_speed
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["type"] = type
        __props__.__dict__["virtual_network_interface"] = virtual_network_interface
        __props__.__dict__["virtual_network_interface_id"] = virtual_network_interface_id
        __props__.__dict__["vlan"] = vlan
        return IsBareMetalServerNetworkAttachment(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="allowToFloat")
    def allow_to_float(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Indicates if the bare metal server network attachment can automatically float to any other server within the same
        `resource_group`. The bare metal server network attachment will float automatically if the network detects a GARP or
        RARP on another bare metal server in the resource group. Applies only to bare metal server network attachments with
        `vlan` interface type.
        """
        return pulumi.get(self, "allow_to_float")

    @_builtins.property
    @pulumi.getter(name="allowedVlans")
    def allowed_vlans(self) -> pulumi.Output[Optional[Sequence[_builtins.float]]]:
        """
        Indicates what VLAN IDs (for VLAN type only) can use this physical (PCI type) attachment.
        """
        return pulumi.get(self, "allowed_vlans")

    @_builtins.property
    @pulumi.getter(name="bareMetalServer")
    def bare_metal_server(self) -> pulumi.Output[_builtins.str]:
        """
        The bare metal server identifier.
        """
        return pulumi.get(self, "bare_metal_server")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time that the bare metal server network attachment was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="floatingBareMetalServer")
    def floating_bare_metal_server(self) -> pulumi.Output[_builtins.str]:
        """
        The bare metal server identifier of the server where the attachment is floated to(only applicated for allow_to_float
        true).
        """
        return pulumi.get(self, "floating_bare_metal_server")

    @_builtins.property
    @pulumi.getter(name="hardStop")
    def hard_stop(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Only used for PCI network attachments, whether to hard/immediately stop server
        """
        return pulumi.get(self, "hard_stop")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        The URL for this bare metal server network attachment.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="interfaceType")
    def interface_type(self) -> pulumi.Output[_builtins.str]:
        """
        The network attachment's interface type:- `pci`: a physical PCI device which can only be created or deleted when the
        bare metal server is stopped - Has an `allowed_vlans` property which controls the VLANs that will be permitted to use
        the PCI attachment - Cannot directly use an IEEE 802.1q VLAN tag.- `vlan`: a virtual device, used through a `pci` device
        that has the `vlan` in its array of `allowed_vlans`. - Must use an IEEE 802.1q tag.The enumerated values for this
        property are expected to expand in the future. When processing this property, check for and log unknown values.
        Optionally halt processing and surface the error, or bypass the resource on which the unexpected property value was
        encountered.
        """
        return pulumi.get(self, "interface_type")

    @_builtins.property
    @pulumi.getter(name="isBareMetalServerNetworkAttachmentId")
    def is_bare_metal_server_network_attachment_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_bare_metal_server_network_attachment_id")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> pulumi.Output[_builtins.str]:
        """
        The lifecycle state of the bare metal server network attachment.
        """
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name for this bare metal server network attachment. The name is unique across all network attachments for the bare
        metal server.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkAttachment")
    def network_attachment(self) -> pulumi.Output[_builtins.str]:
        """
        The network attachment's id.
        """
        return pulumi.get(self, "network_attachment")

    @_builtins.property
    @pulumi.getter(name="portSpeed")
    def port_speed(self) -> pulumi.Output[_builtins.float]:
        """
        The port speed for this bare metal server network attachment in Mbps.
        """
        return pulumi.get(self, "port_speed")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.IsBareMetalServerNetworkAttachmentTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        The bare metal server network attachment type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="virtualNetworkInterface")
    def virtual_network_interface(self) -> pulumi.Output[Optional['outputs.IsBareMetalServerNetworkAttachmentVirtualNetworkInterface']]:
        """
        A virtual network interface for the bare metal server network attachment. This can be specified using an existing
        virtual network interface, or a prototype object for a new virtual network interface.
        """
        return pulumi.get(self, "virtual_network_interface")

    @_builtins.property
    @pulumi.getter(name="virtualNetworkInterfaceId")
    def virtual_network_interface_id(self) -> pulumi.Output[_builtins.str]:
        """
        The virtual_network_interface's id.
        """
        return pulumi.get(self, "virtual_network_interface_id")

    @_builtins.property
    @pulumi.getter
    def vlan(self) -> pulumi.Output[_builtins.float]:
        """
        Indicates the 802.1Q VLAN ID tag that must be used for all traffic on this attachment.
        """
        return pulumi.get(self, "vlan")

