# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSchematicsActionResult',
    'AwaitableGetSchematicsActionResult',
    'get_schematics_action',
    'get_schematics_action_output',
]

@pulumi.output_type
class GetSchematicsActionResult:
    """
    A collection of values returned by getSchematicsAction.
    """
    def __init__(__self__, account=None, action_id=None, action_inputs=None, action_outputs=None, bastion_credentials=None, bastions=None, command_parameter=None, created_at=None, created_by=None, credentials=None, crn=None, description=None, id=None, inventory=None, location=None, name=None, playbook_names=None, resource_group=None, settings=None, source_created_at=None, source_created_by=None, source_readme_url=None, source_type=None, source_updated_at=None, source_updated_by=None, sources=None, states=None, sys_locks=None, tags=None, targets_ini=None, updated_at=None, updated_by=None, user_states=None):
        if account and not isinstance(account, str):
            raise TypeError("Expected argument 'account' to be a str")
        pulumi.set(__self__, "account", account)
        if action_id and not isinstance(action_id, str):
            raise TypeError("Expected argument 'action_id' to be a str")
        pulumi.set(__self__, "action_id", action_id)
        if action_inputs and not isinstance(action_inputs, list):
            raise TypeError("Expected argument 'action_inputs' to be a list")
        pulumi.set(__self__, "action_inputs", action_inputs)
        if action_outputs and not isinstance(action_outputs, list):
            raise TypeError("Expected argument 'action_outputs' to be a list")
        pulumi.set(__self__, "action_outputs", action_outputs)
        if bastion_credentials and not isinstance(bastion_credentials, list):
            raise TypeError("Expected argument 'bastion_credentials' to be a list")
        pulumi.set(__self__, "bastion_credentials", bastion_credentials)
        if bastions and not isinstance(bastions, list):
            raise TypeError("Expected argument 'bastions' to be a list")
        pulumi.set(__self__, "bastions", bastions)
        if command_parameter and not isinstance(command_parameter, str):
            raise TypeError("Expected argument 'command_parameter' to be a str")
        pulumi.set(__self__, "command_parameter", command_parameter)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if credentials and not isinstance(credentials, list):
            raise TypeError("Expected argument 'credentials' to be a list")
        pulumi.set(__self__, "credentials", credentials)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if inventory and not isinstance(inventory, str):
            raise TypeError("Expected argument 'inventory' to be a str")
        pulumi.set(__self__, "inventory", inventory)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if playbook_names and not isinstance(playbook_names, list):
            raise TypeError("Expected argument 'playbook_names' to be a list")
        pulumi.set(__self__, "playbook_names", playbook_names)
        if resource_group and not isinstance(resource_group, str):
            raise TypeError("Expected argument 'resource_group' to be a str")
        pulumi.set(__self__, "resource_group", resource_group)
        if settings and not isinstance(settings, list):
            raise TypeError("Expected argument 'settings' to be a list")
        pulumi.set(__self__, "settings", settings)
        if source_created_at and not isinstance(source_created_at, str):
            raise TypeError("Expected argument 'source_created_at' to be a str")
        pulumi.set(__self__, "source_created_at", source_created_at)
        if source_created_by and not isinstance(source_created_by, str):
            raise TypeError("Expected argument 'source_created_by' to be a str")
        pulumi.set(__self__, "source_created_by", source_created_by)
        if source_readme_url and not isinstance(source_readme_url, str):
            raise TypeError("Expected argument 'source_readme_url' to be a str")
        pulumi.set(__self__, "source_readme_url", source_readme_url)
        if source_type and not isinstance(source_type, str):
            raise TypeError("Expected argument 'source_type' to be a str")
        pulumi.set(__self__, "source_type", source_type)
        if source_updated_at and not isinstance(source_updated_at, str):
            raise TypeError("Expected argument 'source_updated_at' to be a str")
        pulumi.set(__self__, "source_updated_at", source_updated_at)
        if source_updated_by and not isinstance(source_updated_by, str):
            raise TypeError("Expected argument 'source_updated_by' to be a str")
        pulumi.set(__self__, "source_updated_by", source_updated_by)
        if sources and not isinstance(sources, list):
            raise TypeError("Expected argument 'sources' to be a list")
        pulumi.set(__self__, "sources", sources)
        if states and not isinstance(states, list):
            raise TypeError("Expected argument 'states' to be a list")
        pulumi.set(__self__, "states", states)
        if sys_locks and not isinstance(sys_locks, list):
            raise TypeError("Expected argument 'sys_locks' to be a list")
        pulumi.set(__self__, "sys_locks", sys_locks)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if targets_ini and not isinstance(targets_ini, str):
            raise TypeError("Expected argument 'targets_ini' to be a str")
        pulumi.set(__self__, "targets_ini", targets_ini)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)
        if updated_by and not isinstance(updated_by, str):
            raise TypeError("Expected argument 'updated_by' to be a str")
        pulumi.set(__self__, "updated_by", updated_by)
        if user_states and not isinstance(user_states, list):
            raise TypeError("Expected argument 'user_states' to be a list")
        pulumi.set(__self__, "user_states", user_states)

    @_builtins.property
    @pulumi.getter
    def account(self) -> _builtins.str:
        return pulumi.get(self, "account")

    @_builtins.property
    @pulumi.getter(name="actionId")
    def action_id(self) -> _builtins.str:
        return pulumi.get(self, "action_id")

    @_builtins.property
    @pulumi.getter(name="actionInputs")
    def action_inputs(self) -> Sequence['outputs.GetSchematicsActionActionInputResult']:
        return pulumi.get(self, "action_inputs")

    @_builtins.property
    @pulumi.getter(name="actionOutputs")
    def action_outputs(self) -> Sequence['outputs.GetSchematicsActionActionOutputResult']:
        return pulumi.get(self, "action_outputs")

    @_builtins.property
    @pulumi.getter(name="bastionCredentials")
    def bastion_credentials(self) -> Sequence['outputs.GetSchematicsActionBastionCredentialResult']:
        return pulumi.get(self, "bastion_credentials")

    @_builtins.property
    @pulumi.getter
    def bastions(self) -> Sequence['outputs.GetSchematicsActionBastionResult']:
        return pulumi.get(self, "bastions")

    @_builtins.property
    @pulumi.getter(name="commandParameter")
    def command_parameter(self) -> _builtins.str:
        return pulumi.get(self, "command_parameter")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def credentials(self) -> Sequence['outputs.GetSchematicsActionCredentialResult']:
        return pulumi.get(self, "credentials")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def inventory(self) -> _builtins.str:
        return pulumi.get(self, "inventory")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="playbookNames")
    def playbook_names(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "playbook_names")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> _builtins.str:
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter
    def settings(self) -> Sequence['outputs.GetSchematicsActionSettingResult']:
        return pulumi.get(self, "settings")

    @_builtins.property
    @pulumi.getter(name="sourceCreatedAt")
    def source_created_at(self) -> _builtins.str:
        return pulumi.get(self, "source_created_at")

    @_builtins.property
    @pulumi.getter(name="sourceCreatedBy")
    def source_created_by(self) -> _builtins.str:
        return pulumi.get(self, "source_created_by")

    @_builtins.property
    @pulumi.getter(name="sourceReadmeUrl")
    def source_readme_url(self) -> _builtins.str:
        return pulumi.get(self, "source_readme_url")

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> _builtins.str:
        return pulumi.get(self, "source_type")

    @_builtins.property
    @pulumi.getter(name="sourceUpdatedAt")
    def source_updated_at(self) -> _builtins.str:
        return pulumi.get(self, "source_updated_at")

    @_builtins.property
    @pulumi.getter(name="sourceUpdatedBy")
    def source_updated_by(self) -> _builtins.str:
        return pulumi.get(self, "source_updated_by")

    @_builtins.property
    @pulumi.getter
    def sources(self) -> Sequence['outputs.GetSchematicsActionSourceResult']:
        return pulumi.get(self, "sources")

    @_builtins.property
    @pulumi.getter
    def states(self) -> Sequence['outputs.GetSchematicsActionStateResult']:
        return pulumi.get(self, "states")

    @_builtins.property
    @pulumi.getter(name="sysLocks")
    def sys_locks(self) -> Sequence['outputs.GetSchematicsActionSysLockResult']:
        return pulumi.get(self, "sys_locks")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="targetsIni")
    def targets_ini(self) -> _builtins.str:
        return pulumi.get(self, "targets_ini")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> _builtins.str:
        return pulumi.get(self, "updated_by")

    @_builtins.property
    @pulumi.getter(name="userStates")
    def user_states(self) -> Sequence['outputs.GetSchematicsActionUserStateResult']:
        return pulumi.get(self, "user_states")


class AwaitableGetSchematicsActionResult(GetSchematicsActionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSchematicsActionResult(
            account=self.account,
            action_id=self.action_id,
            action_inputs=self.action_inputs,
            action_outputs=self.action_outputs,
            bastion_credentials=self.bastion_credentials,
            bastions=self.bastions,
            command_parameter=self.command_parameter,
            created_at=self.created_at,
            created_by=self.created_by,
            credentials=self.credentials,
            crn=self.crn,
            description=self.description,
            id=self.id,
            inventory=self.inventory,
            location=self.location,
            name=self.name,
            playbook_names=self.playbook_names,
            resource_group=self.resource_group,
            settings=self.settings,
            source_created_at=self.source_created_at,
            source_created_by=self.source_created_by,
            source_readme_url=self.source_readme_url,
            source_type=self.source_type,
            source_updated_at=self.source_updated_at,
            source_updated_by=self.source_updated_by,
            sources=self.sources,
            states=self.states,
            sys_locks=self.sys_locks,
            tags=self.tags,
            targets_ini=self.targets_ini,
            updated_at=self.updated_at,
            updated_by=self.updated_by,
            user_states=self.user_states)


def get_schematics_action(action_id: Optional[_builtins.str] = None,
                          location: Optional[_builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSchematicsActionResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['actionId'] = action_id
    __args__['location'] = location
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getSchematicsAction:getSchematicsAction', __args__, opts=opts, typ=GetSchematicsActionResult, package_ref=_utilities.get_package()).value

    return AwaitableGetSchematicsActionResult(
        account=pulumi.get(__ret__, 'account'),
        action_id=pulumi.get(__ret__, 'action_id'),
        action_inputs=pulumi.get(__ret__, 'action_inputs'),
        action_outputs=pulumi.get(__ret__, 'action_outputs'),
        bastion_credentials=pulumi.get(__ret__, 'bastion_credentials'),
        bastions=pulumi.get(__ret__, 'bastions'),
        command_parameter=pulumi.get(__ret__, 'command_parameter'),
        created_at=pulumi.get(__ret__, 'created_at'),
        created_by=pulumi.get(__ret__, 'created_by'),
        credentials=pulumi.get(__ret__, 'credentials'),
        crn=pulumi.get(__ret__, 'crn'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        inventory=pulumi.get(__ret__, 'inventory'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        playbook_names=pulumi.get(__ret__, 'playbook_names'),
        resource_group=pulumi.get(__ret__, 'resource_group'),
        settings=pulumi.get(__ret__, 'settings'),
        source_created_at=pulumi.get(__ret__, 'source_created_at'),
        source_created_by=pulumi.get(__ret__, 'source_created_by'),
        source_readme_url=pulumi.get(__ret__, 'source_readme_url'),
        source_type=pulumi.get(__ret__, 'source_type'),
        source_updated_at=pulumi.get(__ret__, 'source_updated_at'),
        source_updated_by=pulumi.get(__ret__, 'source_updated_by'),
        sources=pulumi.get(__ret__, 'sources'),
        states=pulumi.get(__ret__, 'states'),
        sys_locks=pulumi.get(__ret__, 'sys_locks'),
        tags=pulumi.get(__ret__, 'tags'),
        targets_ini=pulumi.get(__ret__, 'targets_ini'),
        updated_at=pulumi.get(__ret__, 'updated_at'),
        updated_by=pulumi.get(__ret__, 'updated_by'),
        user_states=pulumi.get(__ret__, 'user_states'))
def get_schematics_action_output(action_id: Optional[pulumi.Input[_builtins.str]] = None,
                                 location: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSchematicsActionResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['actionId'] = action_id
    __args__['location'] = location
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getSchematicsAction:getSchematicsAction', __args__, opts=opts, typ=GetSchematicsActionResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetSchematicsActionResult(
        account=pulumi.get(__response__, 'account'),
        action_id=pulumi.get(__response__, 'action_id'),
        action_inputs=pulumi.get(__response__, 'action_inputs'),
        action_outputs=pulumi.get(__response__, 'action_outputs'),
        bastion_credentials=pulumi.get(__response__, 'bastion_credentials'),
        bastions=pulumi.get(__response__, 'bastions'),
        command_parameter=pulumi.get(__response__, 'command_parameter'),
        created_at=pulumi.get(__response__, 'created_at'),
        created_by=pulumi.get(__response__, 'created_by'),
        credentials=pulumi.get(__response__, 'credentials'),
        crn=pulumi.get(__response__, 'crn'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        inventory=pulumi.get(__response__, 'inventory'),
        location=pulumi.get(__response__, 'location'),
        name=pulumi.get(__response__, 'name'),
        playbook_names=pulumi.get(__response__, 'playbook_names'),
        resource_group=pulumi.get(__response__, 'resource_group'),
        settings=pulumi.get(__response__, 'settings'),
        source_created_at=pulumi.get(__response__, 'source_created_at'),
        source_created_by=pulumi.get(__response__, 'source_created_by'),
        source_readme_url=pulumi.get(__response__, 'source_readme_url'),
        source_type=pulumi.get(__response__, 'source_type'),
        source_updated_at=pulumi.get(__response__, 'source_updated_at'),
        source_updated_by=pulumi.get(__response__, 'source_updated_by'),
        sources=pulumi.get(__response__, 'sources'),
        states=pulumi.get(__response__, 'states'),
        sys_locks=pulumi.get(__response__, 'sys_locks'),
        tags=pulumi.get(__response__, 'tags'),
        targets_ini=pulumi.get(__response__, 'targets_ini'),
        updated_at=pulumi.get(__response__, 'updated_at'),
        updated_by=pulumi.get(__response__, 'updated_by'),
        user_states=pulumi.get(__response__, 'user_states')))
