# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCmCatalogResult',
    'AwaitableGetCmCatalogResult',
    'get_cm_catalog',
    'get_cm_catalog_output',
]

@pulumi.output_type
class GetCmCatalogResult:
    """
    A collection of values returned by getCmCatalog.
    """
    def __init__(__self__, catalog_banner_url=None, catalog_filters=None, catalog_icon_url=None, catalog_identifier=None, created=None, crn=None, disabled=None, features=None, id=None, kind=None, label=None, label_i18n=None, metadata=None, offerings_url=None, owning_account=None, resource_group_id=None, rev=None, short_description=None, short_description_i18n=None, tags=None, target_account_contexts=None, updated=None, url=None):
        if catalog_banner_url and not isinstance(catalog_banner_url, str):
            raise TypeError("Expected argument 'catalog_banner_url' to be a str")
        pulumi.set(__self__, "catalog_banner_url", catalog_banner_url)
        if catalog_filters and not isinstance(catalog_filters, list):
            raise TypeError("Expected argument 'catalog_filters' to be a list")
        pulumi.set(__self__, "catalog_filters", catalog_filters)
        if catalog_icon_url and not isinstance(catalog_icon_url, str):
            raise TypeError("Expected argument 'catalog_icon_url' to be a str")
        pulumi.set(__self__, "catalog_icon_url", catalog_icon_url)
        if catalog_identifier and not isinstance(catalog_identifier, str):
            raise TypeError("Expected argument 'catalog_identifier' to be a str")
        pulumi.set(__self__, "catalog_identifier", catalog_identifier)
        if created and not isinstance(created, str):
            raise TypeError("Expected argument 'created' to be a str")
        pulumi.set(__self__, "created", created)
        if crn and not isinstance(crn, str):
            raise TypeError("Expected argument 'crn' to be a str")
        pulumi.set(__self__, "crn", crn)
        if disabled and not isinstance(disabled, bool):
            raise TypeError("Expected argument 'disabled' to be a bool")
        pulumi.set(__self__, "disabled", disabled)
        if features and not isinstance(features, list):
            raise TypeError("Expected argument 'features' to be a list")
        pulumi.set(__self__, "features", features)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        pulumi.set(__self__, "kind", kind)
        if label and not isinstance(label, str):
            raise TypeError("Expected argument 'label' to be a str")
        pulumi.set(__self__, "label", label)
        if label_i18n and not isinstance(label_i18n, dict):
            raise TypeError("Expected argument 'label_i18n' to be a dict")
        pulumi.set(__self__, "label_i18n", label_i18n)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        pulumi.set(__self__, "metadata", metadata)
        if offerings_url and not isinstance(offerings_url, str):
            raise TypeError("Expected argument 'offerings_url' to be a str")
        pulumi.set(__self__, "offerings_url", offerings_url)
        if owning_account and not isinstance(owning_account, str):
            raise TypeError("Expected argument 'owning_account' to be a str")
        pulumi.set(__self__, "owning_account", owning_account)
        if resource_group_id and not isinstance(resource_group_id, str):
            raise TypeError("Expected argument 'resource_group_id' to be a str")
        pulumi.set(__self__, "resource_group_id", resource_group_id)
        if rev and not isinstance(rev, str):
            raise TypeError("Expected argument 'rev' to be a str")
        pulumi.set(__self__, "rev", rev)
        if short_description and not isinstance(short_description, str):
            raise TypeError("Expected argument 'short_description' to be a str")
        pulumi.set(__self__, "short_description", short_description)
        if short_description_i18n and not isinstance(short_description_i18n, dict):
            raise TypeError("Expected argument 'short_description_i18n' to be a dict")
        pulumi.set(__self__, "short_description_i18n", short_description_i18n)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if target_account_contexts and not isinstance(target_account_contexts, list):
            raise TypeError("Expected argument 'target_account_contexts' to be a list")
        pulumi.set(__self__, "target_account_contexts", target_account_contexts)
        if updated and not isinstance(updated, str):
            raise TypeError("Expected argument 'updated' to be a str")
        pulumi.set(__self__, "updated", updated)
        if url and not isinstance(url, str):
            raise TypeError("Expected argument 'url' to be a str")
        pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter(name="catalogBannerUrl")
    def catalog_banner_url(self) -> _builtins.str:
        return pulumi.get(self, "catalog_banner_url")

    @_builtins.property
    @pulumi.getter(name="catalogFilters")
    def catalog_filters(self) -> Sequence['outputs.GetCmCatalogCatalogFilterResult']:
        return pulumi.get(self, "catalog_filters")

    @_builtins.property
    @pulumi.getter(name="catalogIconUrl")
    def catalog_icon_url(self) -> _builtins.str:
        return pulumi.get(self, "catalog_icon_url")

    @_builtins.property
    @pulumi.getter(name="catalogIdentifier")
    def catalog_identifier(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "catalog_identifier")

    @_builtins.property
    @pulumi.getter
    def created(self) -> _builtins.str:
        return pulumi.get(self, "created")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> _builtins.str:
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def disabled(self) -> _builtins.bool:
        return pulumi.get(self, "disabled")

    @_builtins.property
    @pulumi.getter
    def features(self) -> Sequence['outputs.GetCmCatalogFeatureResult']:
        return pulumi.get(self, "features")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def kind(self) -> _builtins.str:
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter
    def label(self) -> _builtins.str:
        return pulumi.get(self, "label")

    @_builtins.property
    @pulumi.getter(name="labelI18n")
    def label_i18n(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "label_i18n")

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "metadata")

    @_builtins.property
    @pulumi.getter(name="offeringsUrl")
    def offerings_url(self) -> _builtins.str:
        return pulumi.get(self, "offerings_url")

    @_builtins.property
    @pulumi.getter(name="owningAccount")
    def owning_account(self) -> _builtins.str:
        return pulumi.get(self, "owning_account")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> _builtins.str:
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter
    def rev(self) -> _builtins.str:
        return pulumi.get(self, "rev")

    @_builtins.property
    @pulumi.getter(name="shortDescription")
    def short_description(self) -> _builtins.str:
        return pulumi.get(self, "short_description")

    @_builtins.property
    @pulumi.getter(name="shortDescriptionI18n")
    def short_description_i18n(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "short_description_i18n")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="targetAccountContexts")
    def target_account_contexts(self) -> Sequence['outputs.GetCmCatalogTargetAccountContextResult']:
        return pulumi.get(self, "target_account_contexts")

    @_builtins.property
    @pulumi.getter
    def updated(self) -> _builtins.str:
        return pulumi.get(self, "updated")

    @_builtins.property
    @pulumi.getter
    def url(self) -> _builtins.str:
        return pulumi.get(self, "url")


class AwaitableGetCmCatalogResult(GetCmCatalogResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCmCatalogResult(
            catalog_banner_url=self.catalog_banner_url,
            catalog_filters=self.catalog_filters,
            catalog_icon_url=self.catalog_icon_url,
            catalog_identifier=self.catalog_identifier,
            created=self.created,
            crn=self.crn,
            disabled=self.disabled,
            features=self.features,
            id=self.id,
            kind=self.kind,
            label=self.label,
            label_i18n=self.label_i18n,
            metadata=self.metadata,
            offerings_url=self.offerings_url,
            owning_account=self.owning_account,
            resource_group_id=self.resource_group_id,
            rev=self.rev,
            short_description=self.short_description,
            short_description_i18n=self.short_description_i18n,
            tags=self.tags,
            target_account_contexts=self.target_account_contexts,
            updated=self.updated,
            url=self.url)


def get_cm_catalog(catalog_identifier: Optional[_builtins.str] = None,
                   label: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCmCatalogResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['catalogIdentifier'] = catalog_identifier
    __args__['label'] = label
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCmCatalog:getCmCatalog', __args__, opts=opts, typ=GetCmCatalogResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCmCatalogResult(
        catalog_banner_url=pulumi.get(__ret__, 'catalog_banner_url'),
        catalog_filters=pulumi.get(__ret__, 'catalog_filters'),
        catalog_icon_url=pulumi.get(__ret__, 'catalog_icon_url'),
        catalog_identifier=pulumi.get(__ret__, 'catalog_identifier'),
        created=pulumi.get(__ret__, 'created'),
        crn=pulumi.get(__ret__, 'crn'),
        disabled=pulumi.get(__ret__, 'disabled'),
        features=pulumi.get(__ret__, 'features'),
        id=pulumi.get(__ret__, 'id'),
        kind=pulumi.get(__ret__, 'kind'),
        label=pulumi.get(__ret__, 'label'),
        label_i18n=pulumi.get(__ret__, 'label_i18n'),
        metadata=pulumi.get(__ret__, 'metadata'),
        offerings_url=pulumi.get(__ret__, 'offerings_url'),
        owning_account=pulumi.get(__ret__, 'owning_account'),
        resource_group_id=pulumi.get(__ret__, 'resource_group_id'),
        rev=pulumi.get(__ret__, 'rev'),
        short_description=pulumi.get(__ret__, 'short_description'),
        short_description_i18n=pulumi.get(__ret__, 'short_description_i18n'),
        tags=pulumi.get(__ret__, 'tags'),
        target_account_contexts=pulumi.get(__ret__, 'target_account_contexts'),
        updated=pulumi.get(__ret__, 'updated'),
        url=pulumi.get(__ret__, 'url'))
def get_cm_catalog_output(catalog_identifier: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          label: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCmCatalogResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['catalogIdentifier'] = catalog_identifier
    __args__['label'] = label
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCmCatalog:getCmCatalog', __args__, opts=opts, typ=GetCmCatalogResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCmCatalogResult(
        catalog_banner_url=pulumi.get(__response__, 'catalog_banner_url'),
        catalog_filters=pulumi.get(__response__, 'catalog_filters'),
        catalog_icon_url=pulumi.get(__response__, 'catalog_icon_url'),
        catalog_identifier=pulumi.get(__response__, 'catalog_identifier'),
        created=pulumi.get(__response__, 'created'),
        crn=pulumi.get(__response__, 'crn'),
        disabled=pulumi.get(__response__, 'disabled'),
        features=pulumi.get(__response__, 'features'),
        id=pulumi.get(__response__, 'id'),
        kind=pulumi.get(__response__, 'kind'),
        label=pulumi.get(__response__, 'label'),
        label_i18n=pulumi.get(__response__, 'label_i18n'),
        metadata=pulumi.get(__response__, 'metadata'),
        offerings_url=pulumi.get(__response__, 'offerings_url'),
        owning_account=pulumi.get(__response__, 'owning_account'),
        resource_group_id=pulumi.get(__response__, 'resource_group_id'),
        rev=pulumi.get(__response__, 'rev'),
        short_description=pulumi.get(__response__, 'short_description'),
        short_description_i18n=pulumi.get(__response__, 'short_description_i18n'),
        tags=pulumi.get(__response__, 'tags'),
        target_account_contexts=pulumi.get(__response__, 'target_account_contexts'),
        updated=pulumi.get(__response__, 'updated'),
        url=pulumi.get(__response__, 'url')))
