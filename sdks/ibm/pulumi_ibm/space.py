# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['SpaceArgs', 'Space']

@pulumi.input_type
class SpaceArgs:
    def __init__(__self__, *,
                 org: pulumi.Input[_builtins.str],
                 auditors: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 developers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 managers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 space_id: Optional[pulumi.Input[_builtins.str]] = None,
                 space_quota: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a Space resource.
        :param pulumi.Input[_builtins.str] org: The org this space belongs to
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] auditors: The IBMID of the users who will have auditor role in this space, ex - user@example.com
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] developers: The IBMID of the users who will have developer role in this space, ex - user@example.com
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] managers: The IBMID of the users who will have manager role in this space, ex - user@example.com
        :param pulumi.Input[_builtins.str] name: The name for the space
        :param pulumi.Input[_builtins.str] space_quota: The name of the Space Quota Definition
        """
        pulumi.set(__self__, "org", org)
        if auditors is not None:
            pulumi.set(__self__, "auditors", auditors)
        if developers is not None:
            pulumi.set(__self__, "developers", developers)
        if managers is not None:
            pulumi.set(__self__, "managers", managers)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)
        if space_quota is not None:
            pulumi.set(__self__, "space_quota", space_quota)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def org(self) -> pulumi.Input[_builtins.str]:
        """
        The org this space belongs to
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "org", value)

    @_builtins.property
    @pulumi.getter
    def auditors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The IBMID of the users who will have auditor role in this space, ex - user@example.com
        """
        return pulumi.get(self, "auditors")

    @auditors.setter
    def auditors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "auditors", value)

    @_builtins.property
    @pulumi.getter
    def developers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The IBMID of the users who will have developer role in this space, ex - user@example.com
        """
        return pulumi.get(self, "developers")

    @developers.setter
    def developers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "developers", value)

    @_builtins.property
    @pulumi.getter
    def managers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The IBMID of the users who will have manager role in this space, ex - user@example.com
        """
        return pulumi.get(self, "managers")

    @managers.setter
    def managers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "managers", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name for the space
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "space_id", value)

    @_builtins.property
    @pulumi.getter(name="spaceQuota")
    def space_quota(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the Space Quota Definition
        """
        return pulumi.get(self, "space_quota")

    @space_quota.setter
    def space_quota(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "space_quota", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _SpaceState:
    def __init__(__self__, *,
                 auditors: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 developers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 managers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 org: Optional[pulumi.Input[_builtins.str]] = None,
                 space_id: Optional[pulumi.Input[_builtins.str]] = None,
                 space_quota: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering Space resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] auditors: The IBMID of the users who will have auditor role in this space, ex - user@example.com
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] developers: The IBMID of the users who will have developer role in this space, ex - user@example.com
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] managers: The IBMID of the users who will have manager role in this space, ex - user@example.com
        :param pulumi.Input[_builtins.str] name: The name for the space
        :param pulumi.Input[_builtins.str] org: The org this space belongs to
        :param pulumi.Input[_builtins.str] space_quota: The name of the Space Quota Definition
        """
        if auditors is not None:
            pulumi.set(__self__, "auditors", auditors)
        if developers is not None:
            pulumi.set(__self__, "developers", developers)
        if managers is not None:
            pulumi.set(__self__, "managers", managers)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org is not None:
            pulumi.set(__self__, "org", org)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)
        if space_quota is not None:
            pulumi.set(__self__, "space_quota", space_quota)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def auditors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The IBMID of the users who will have auditor role in this space, ex - user@example.com
        """
        return pulumi.get(self, "auditors")

    @auditors.setter
    def auditors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "auditors", value)

    @_builtins.property
    @pulumi.getter
    def developers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The IBMID of the users who will have developer role in this space, ex - user@example.com
        """
        return pulumi.get(self, "developers")

    @developers.setter
    def developers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "developers", value)

    @_builtins.property
    @pulumi.getter
    def managers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The IBMID of the users who will have manager role in this space, ex - user@example.com
        """
        return pulumi.get(self, "managers")

    @managers.setter
    def managers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "managers", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name for the space
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The org this space belongs to
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "org", value)

    @_builtins.property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "space_id", value)

    @_builtins.property
    @pulumi.getter(name="spaceQuota")
    def space_quota(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the Space Quota Definition
        """
        return pulumi.get(self, "space_quota")

    @space_quota.setter
    def space_quota(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "space_quota", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("ibm:index/space:Space")
class Space(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auditors: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 developers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 managers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 org: Optional[pulumi.Input[_builtins.str]] = None,
                 space_id: Optional[pulumi.Input[_builtins.str]] = None,
                 space_quota: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Create a Space resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] auditors: The IBMID of the users who will have auditor role in this space, ex - user@example.com
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] developers: The IBMID of the users who will have developer role in this space, ex - user@example.com
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] managers: The IBMID of the users who will have manager role in this space, ex - user@example.com
        :param pulumi.Input[_builtins.str] name: The name for the space
        :param pulumi.Input[_builtins.str] org: The org this space belongs to
        :param pulumi.Input[_builtins.str] space_quota: The name of the Space Quota Definition
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SpaceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Space resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SpaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SpaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auditors: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 developers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 managers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 org: Optional[pulumi.Input[_builtins.str]] = None,
                 space_id: Optional[pulumi.Input[_builtins.str]] = None,
                 space_quota: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SpaceArgs.__new__(SpaceArgs)

            __props__.__dict__["auditors"] = auditors
            __props__.__dict__["developers"] = developers
            __props__.__dict__["managers"] = managers
            __props__.__dict__["name"] = name
            if org is None and not opts.urn:
                raise TypeError("Missing required property 'org'")
            __props__.__dict__["org"] = org
            __props__.__dict__["space_id"] = space_id
            __props__.__dict__["space_quota"] = space_quota
            __props__.__dict__["tags"] = tags
        super(Space, __self__).__init__(
            'ibm:index/space:Space',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auditors: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            developers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            managers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            org: Optional[pulumi.Input[_builtins.str]] = None,
            space_id: Optional[pulumi.Input[_builtins.str]] = None,
            space_quota: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'Space':
        """
        Get an existing Space resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] auditors: The IBMID of the users who will have auditor role in this space, ex - user@example.com
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] developers: The IBMID of the users who will have developer role in this space, ex - user@example.com
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] managers: The IBMID of the users who will have manager role in this space, ex - user@example.com
        :param pulumi.Input[_builtins.str] name: The name for the space
        :param pulumi.Input[_builtins.str] org: The org this space belongs to
        :param pulumi.Input[_builtins.str] space_quota: The name of the Space Quota Definition
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SpaceState.__new__(_SpaceState)

        __props__.__dict__["auditors"] = auditors
        __props__.__dict__["developers"] = developers
        __props__.__dict__["managers"] = managers
        __props__.__dict__["name"] = name
        __props__.__dict__["org"] = org
        __props__.__dict__["space_id"] = space_id
        __props__.__dict__["space_quota"] = space_quota
        __props__.__dict__["tags"] = tags
        return Space(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def auditors(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        The IBMID of the users who will have auditor role in this space, ex - user@example.com
        """
        return pulumi.get(self, "auditors")

    @_builtins.property
    @pulumi.getter
    def developers(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        The IBMID of the users who will have developer role in this space, ex - user@example.com
        """
        return pulumi.get(self, "developers")

    @_builtins.property
    @pulumi.getter
    def managers(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        The IBMID of the users who will have manager role in this space, ex - user@example.com
        """
        return pulumi.get(self, "managers")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name for the space
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def org(self) -> pulumi.Output[_builtins.str]:
        """
        The org this space belongs to
        """
        return pulumi.get(self, "org")

    @_builtins.property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "space_id")

    @_builtins.property
    @pulumi.getter(name="spaceQuota")
    def space_quota(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The name of the Space Quota Definition
        """
        return pulumi.get(self, "space_quota")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        return pulumi.get(self, "tags")

