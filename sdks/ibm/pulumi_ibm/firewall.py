# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['FirewallArgs', 'Firewall']

@pulumi.input_type
class FirewallArgs:
    def __init__(__self__, *,
                 public_vlan_id: pulumi.Input[_builtins.float],
                 firewall_id: Optional[pulumi.Input[_builtins.str]] = None,
                 firewall_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ha_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a Firewall resource.
        :param pulumi.Input[_builtins.float] public_vlan_id: Public VLAN ID
        :param pulumi.Input[_builtins.str] firewall_type: Firewall type
        :param pulumi.Input[_builtins.bool] ha_enabled: set to true if High availability is enabled
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags for the firewall
        """
        pulumi.set(__self__, "public_vlan_id", public_vlan_id)
        if firewall_id is not None:
            pulumi.set(__self__, "firewall_id", firewall_id)
        if firewall_type is not None:
            pulumi.set(__self__, "firewall_type", firewall_type)
        if ha_enabled is not None:
            pulumi.set(__self__, "ha_enabled", ha_enabled)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="publicVlanId")
    def public_vlan_id(self) -> pulumi.Input[_builtins.float]:
        """
        Public VLAN ID
        """
        return pulumi.get(self, "public_vlan_id")

    @public_vlan_id.setter
    def public_vlan_id(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "public_vlan_id", value)

    @_builtins.property
    @pulumi.getter(name="firewallId")
    def firewall_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "firewall_id")

    @firewall_id.setter
    def firewall_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "firewall_id", value)

    @_builtins.property
    @pulumi.getter(name="firewallType")
    def firewall_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Firewall type
        """
        return pulumi.get(self, "firewall_type")

    @firewall_type.setter
    def firewall_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "firewall_type", value)

    @_builtins.property
    @pulumi.getter(name="haEnabled")
    def ha_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        set to true if High availability is enabled
        """
        return pulumi.get(self, "ha_enabled")

    @ha_enabled.setter
    def ha_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ha_enabled", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags for the firewall
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _FirewallState:
    def __init__(__self__, *,
                 firewall_id: Optional[pulumi.Input[_builtins.str]] = None,
                 firewall_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ha_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 public_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 username: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Firewall resources.
        :param pulumi.Input[_builtins.str] firewall_type: Firewall type
        :param pulumi.Input[_builtins.bool] ha_enabled: set to true if High availability is enabled
        :param pulumi.Input[_builtins.str] location: Location info
        :param pulumi.Input[_builtins.str] password: Password for the given User
        :param pulumi.Input[_builtins.str] primary_ip: Primary IP address
        :param pulumi.Input[_builtins.float] public_vlan_id: Public VLAN ID
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags for the firewall
        :param pulumi.Input[_builtins.str] username: User name
        """
        if firewall_id is not None:
            pulumi.set(__self__, "firewall_id", firewall_id)
        if firewall_type is not None:
            pulumi.set(__self__, "firewall_type", firewall_type)
        if ha_enabled is not None:
            pulumi.set(__self__, "ha_enabled", ha_enabled)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if primary_ip is not None:
            pulumi.set(__self__, "primary_ip", primary_ip)
        if public_vlan_id is not None:
            pulumi.set(__self__, "public_vlan_id", public_vlan_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter(name="firewallId")
    def firewall_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "firewall_id")

    @firewall_id.setter
    def firewall_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "firewall_id", value)

    @_builtins.property
    @pulumi.getter(name="firewallType")
    def firewall_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Firewall type
        """
        return pulumi.get(self, "firewall_type")

    @firewall_type.setter
    def firewall_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "firewall_type", value)

    @_builtins.property
    @pulumi.getter(name="haEnabled")
    def ha_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        set to true if High availability is enabled
        """
        return pulumi.get(self, "ha_enabled")

    @ha_enabled.setter
    def ha_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ha_enabled", value)

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Location info
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Password for the given User
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter(name="primaryIp")
    def primary_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Primary IP address
        """
        return pulumi.get(self, "primary_ip")

    @primary_ip.setter
    def primary_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "primary_ip", value)

    @_builtins.property
    @pulumi.getter(name="publicVlanId")
    def public_vlan_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Public VLAN ID
        """
        return pulumi.get(self, "public_vlan_id")

    @public_vlan_id.setter
    def public_vlan_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "public_vlan_id", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of tags for the firewall
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        User name
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "username", value)


@pulumi.type_token("ibm:index/firewall:Firewall")
class Firewall(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 firewall_id: Optional[pulumi.Input[_builtins.str]] = None,
                 firewall_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ha_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 public_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Create a Firewall resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] firewall_type: Firewall type
        :param pulumi.Input[_builtins.bool] ha_enabled: set to true if High availability is enabled
        :param pulumi.Input[_builtins.float] public_vlan_id: Public VLAN ID
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags for the firewall
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FirewallArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Firewall resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param FirewallArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FirewallArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 firewall_id: Optional[pulumi.Input[_builtins.str]] = None,
                 firewall_type: Optional[pulumi.Input[_builtins.str]] = None,
                 ha_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 public_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FirewallArgs.__new__(FirewallArgs)

            __props__.__dict__["firewall_id"] = firewall_id
            __props__.__dict__["firewall_type"] = firewall_type
            __props__.__dict__["ha_enabled"] = ha_enabled
            if public_vlan_id is None and not opts.urn:
                raise TypeError("Missing required property 'public_vlan_id'")
            __props__.__dict__["public_vlan_id"] = public_vlan_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["location"] = None
            __props__.__dict__["password"] = None
            __props__.__dict__["primary_ip"] = None
            __props__.__dict__["username"] = None
        super(Firewall, __self__).__init__(
            'ibm:index/firewall:Firewall',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            firewall_id: Optional[pulumi.Input[_builtins.str]] = None,
            firewall_type: Optional[pulumi.Input[_builtins.str]] = None,
            ha_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            location: Optional[pulumi.Input[_builtins.str]] = None,
            password: Optional[pulumi.Input[_builtins.str]] = None,
            primary_ip: Optional[pulumi.Input[_builtins.str]] = None,
            public_vlan_id: Optional[pulumi.Input[_builtins.float]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            username: Optional[pulumi.Input[_builtins.str]] = None) -> 'Firewall':
        """
        Get an existing Firewall resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] firewall_type: Firewall type
        :param pulumi.Input[_builtins.bool] ha_enabled: set to true if High availability is enabled
        :param pulumi.Input[_builtins.str] location: Location info
        :param pulumi.Input[_builtins.str] password: Password for the given User
        :param pulumi.Input[_builtins.str] primary_ip: Primary IP address
        :param pulumi.Input[_builtins.float] public_vlan_id: Public VLAN ID
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: List of tags for the firewall
        :param pulumi.Input[_builtins.str] username: User name
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FirewallState.__new__(_FirewallState)

        __props__.__dict__["firewall_id"] = firewall_id
        __props__.__dict__["firewall_type"] = firewall_type
        __props__.__dict__["ha_enabled"] = ha_enabled
        __props__.__dict__["location"] = location
        __props__.__dict__["password"] = password
        __props__.__dict__["primary_ip"] = primary_ip
        __props__.__dict__["public_vlan_id"] = public_vlan_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["username"] = username
        return Firewall(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="firewallId")
    def firewall_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "firewall_id")

    @_builtins.property
    @pulumi.getter(name="firewallType")
    def firewall_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Firewall type
        """
        return pulumi.get(self, "firewall_type")

    @_builtins.property
    @pulumi.getter(name="haEnabled")
    def ha_enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        set to true if High availability is enabled
        """
        return pulumi.get(self, "ha_enabled")

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Output[_builtins.str]:
        """
        Location info
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def password(self) -> pulumi.Output[_builtins.str]:
        """
        Password for the given User
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter(name="primaryIp")
    def primary_ip(self) -> pulumi.Output[_builtins.str]:
        """
        Primary IP address
        """
        return pulumi.get(self, "primary_ip")

    @_builtins.property
    @pulumi.getter(name="publicVlanId")
    def public_vlan_id(self) -> pulumi.Output[_builtins.float]:
        """
        Public VLAN ID
        """
        return pulumi.get(self, "public_vlan_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of tags for the firewall
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def username(self) -> pulumi.Output[_builtins.str]:
        """
        User name
        """
        return pulumi.get(self, "username")

