# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetLbaasResult',
    'AwaitableGetLbaasResult',
    'get_lbaas',
    'get_lbaas_output',
]

@pulumi.output_type
class GetLbaasResult:
    """
    A collection of values returned by getLbaas.
    """
    def __init__(__self__, active_connections=None, datacenter=None, description=None, health_monitors=None, id=None, name=None, protocols=None, server_instances=None, server_instances_down=None, server_instances_up=None, ssl_ciphers=None, status=None, type=None, use_system_public_ip_pool=None, vip=None):
        if active_connections and not isinstance(active_connections, float):
            raise TypeError("Expected argument 'active_connections' to be a float")
        pulumi.set(__self__, "active_connections", active_connections)
        if datacenter and not isinstance(datacenter, str):
            raise TypeError("Expected argument 'datacenter' to be a str")
        pulumi.set(__self__, "datacenter", datacenter)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if health_monitors and not isinstance(health_monitors, list):
            raise TypeError("Expected argument 'health_monitors' to be a list")
        pulumi.set(__self__, "health_monitors", health_monitors)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if protocols and not isinstance(protocols, list):
            raise TypeError("Expected argument 'protocols' to be a list")
        pulumi.set(__self__, "protocols", protocols)
        if server_instances and not isinstance(server_instances, list):
            raise TypeError("Expected argument 'server_instances' to be a list")
        pulumi.set(__self__, "server_instances", server_instances)
        if server_instances_down and not isinstance(server_instances_down, float):
            raise TypeError("Expected argument 'server_instances_down' to be a float")
        pulumi.set(__self__, "server_instances_down", server_instances_down)
        if server_instances_up and not isinstance(server_instances_up, float):
            raise TypeError("Expected argument 'server_instances_up' to be a float")
        pulumi.set(__self__, "server_instances_up", server_instances_up)
        if ssl_ciphers and not isinstance(ssl_ciphers, list):
            raise TypeError("Expected argument 'ssl_ciphers' to be a list")
        pulumi.set(__self__, "ssl_ciphers", ssl_ciphers)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if use_system_public_ip_pool and not isinstance(use_system_public_ip_pool, bool):
            raise TypeError("Expected argument 'use_system_public_ip_pool' to be a bool")
        pulumi.set(__self__, "use_system_public_ip_pool", use_system_public_ip_pool)
        if vip and not isinstance(vip, str):
            raise TypeError("Expected argument 'vip' to be a str")
        pulumi.set(__self__, "vip", vip)

    @_builtins.property
    @pulumi.getter(name="activeConnections")
    def active_connections(self) -> _builtins.float:
        return pulumi.get(self, "active_connections")

    @_builtins.property
    @pulumi.getter
    def datacenter(self) -> _builtins.str:
        return pulumi.get(self, "datacenter")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="healthMonitors")
    def health_monitors(self) -> Sequence['outputs.GetLbaasHealthMonitorResult']:
        return pulumi.get(self, "health_monitors")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def protocols(self) -> Sequence['outputs.GetLbaasProtocolResult']:
        return pulumi.get(self, "protocols")

    @_builtins.property
    @pulumi.getter(name="serverInstances")
    def server_instances(self) -> Sequence['outputs.GetLbaasServerInstanceResult']:
        return pulumi.get(self, "server_instances")

    @_builtins.property
    @pulumi.getter(name="serverInstancesDown")
    def server_instances_down(self) -> _builtins.float:
        return pulumi.get(self, "server_instances_down")

    @_builtins.property
    @pulumi.getter(name="serverInstancesUp")
    def server_instances_up(self) -> _builtins.float:
        return pulumi.get(self, "server_instances_up")

    @_builtins.property
    @pulumi.getter(name="sslCiphers")
    def ssl_ciphers(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "ssl_ciphers")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="useSystemPublicIpPool")
    def use_system_public_ip_pool(self) -> _builtins.bool:
        return pulumi.get(self, "use_system_public_ip_pool")

    @_builtins.property
    @pulumi.getter
    def vip(self) -> _builtins.str:
        return pulumi.get(self, "vip")


class AwaitableGetLbaasResult(GetLbaasResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLbaasResult(
            active_connections=self.active_connections,
            datacenter=self.datacenter,
            description=self.description,
            health_monitors=self.health_monitors,
            id=self.id,
            name=self.name,
            protocols=self.protocols,
            server_instances=self.server_instances,
            server_instances_down=self.server_instances_down,
            server_instances_up=self.server_instances_up,
            ssl_ciphers=self.ssl_ciphers,
            status=self.status,
            type=self.type,
            use_system_public_ip_pool=self.use_system_public_ip_pool,
            vip=self.vip)


def get_lbaas(id: Optional[_builtins.str] = None,
              name: Optional[_builtins.str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLbaasResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getLbaas:getLbaas', __args__, opts=opts, typ=GetLbaasResult, package_ref=_utilities.get_package()).value

    return AwaitableGetLbaasResult(
        active_connections=pulumi.get(__ret__, 'active_connections'),
        datacenter=pulumi.get(__ret__, 'datacenter'),
        description=pulumi.get(__ret__, 'description'),
        health_monitors=pulumi.get(__ret__, 'health_monitors'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        protocols=pulumi.get(__ret__, 'protocols'),
        server_instances=pulumi.get(__ret__, 'server_instances'),
        server_instances_down=pulumi.get(__ret__, 'server_instances_down'),
        server_instances_up=pulumi.get(__ret__, 'server_instances_up'),
        ssl_ciphers=pulumi.get(__ret__, 'ssl_ciphers'),
        status=pulumi.get(__ret__, 'status'),
        type=pulumi.get(__ret__, 'type'),
        use_system_public_ip_pool=pulumi.get(__ret__, 'use_system_public_ip_pool'),
        vip=pulumi.get(__ret__, 'vip'))
def get_lbaas_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                     name: Optional[pulumi.Input[_builtins.str]] = None,
                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetLbaasResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getLbaas:getLbaas', __args__, opts=opts, typ=GetLbaasResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetLbaasResult(
        active_connections=pulumi.get(__response__, 'active_connections'),
        datacenter=pulumi.get(__response__, 'datacenter'),
        description=pulumi.get(__response__, 'description'),
        health_monitors=pulumi.get(__response__, 'health_monitors'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        protocols=pulumi.get(__response__, 'protocols'),
        server_instances=pulumi.get(__response__, 'server_instances'),
        server_instances_down=pulumi.get(__response__, 'server_instances_down'),
        server_instances_up=pulumi.get(__response__, 'server_instances_up'),
        ssl_ciphers=pulumi.get(__response__, 'ssl_ciphers'),
        status=pulumi.get(__response__, 'status'),
        type=pulumi.get(__response__, 'type'),
        use_system_public_ip_pool=pulumi.get(__response__, 'use_system_public_ip_pool'),
        vip=pulumi.get(__response__, 'vip')))
