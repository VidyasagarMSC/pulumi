# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SccInstanceSettingsArgs', 'SccInstanceSettings']

@pulumi.input_type
class SccInstanceSettingsArgs:
    def __init__(__self__, *,
                 event_notifications: pulumi.Input['SccInstanceSettingsEventNotificationsArgs'],
                 instance_id: pulumi.Input[_builtins.str],
                 object_storage: pulumi.Input['SccInstanceSettingsObjectStorageArgs'],
                 scc_instance_settings_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a SccInstanceSettings resource.
        :param pulumi.Input['SccInstanceSettingsEventNotificationsArgs'] event_notifications: The Event Notifications settings.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Security and Compliance Center instance.
        :param pulumi.Input['SccInstanceSettingsObjectStorageArgs'] object_storage: The Cloud Object Storage settings.
        """
        pulumi.set(__self__, "event_notifications", event_notifications)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "object_storage", object_storage)
        if scc_instance_settings_id is not None:
            pulumi.set(__self__, "scc_instance_settings_id", scc_instance_settings_id)

    @_builtins.property
    @pulumi.getter(name="eventNotifications")
    def event_notifications(self) -> pulumi.Input['SccInstanceSettingsEventNotificationsArgs']:
        """
        The Event Notifications settings.
        """
        return pulumi.get(self, "event_notifications")

    @event_notifications.setter
    def event_notifications(self, value: pulumi.Input['SccInstanceSettingsEventNotificationsArgs']):
        pulumi.set(self, "event_notifications", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the Security and Compliance Center instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="objectStorage")
    def object_storage(self) -> pulumi.Input['SccInstanceSettingsObjectStorageArgs']:
        """
        The Cloud Object Storage settings.
        """
        return pulumi.get(self, "object_storage")

    @object_storage.setter
    def object_storage(self, value: pulumi.Input['SccInstanceSettingsObjectStorageArgs']):
        pulumi.set(self, "object_storage", value)

    @_builtins.property
    @pulumi.getter(name="sccInstanceSettingsId")
    def scc_instance_settings_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "scc_instance_settings_id")

    @scc_instance_settings_id.setter
    def scc_instance_settings_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scc_instance_settings_id", value)


@pulumi.input_type
class _SccInstanceSettingsState:
    def __init__(__self__, *,
                 event_notifications: Optional[pulumi.Input['SccInstanceSettingsEventNotificationsArgs']] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 object_storage: Optional[pulumi.Input['SccInstanceSettingsObjectStorageArgs']] = None,
                 scc_instance_settings_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SccInstanceSettings resources.
        :param pulumi.Input['SccInstanceSettingsEventNotificationsArgs'] event_notifications: The Event Notifications settings.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Security and Compliance Center instance.
        :param pulumi.Input['SccInstanceSettingsObjectStorageArgs'] object_storage: The Cloud Object Storage settings.
        """
        if event_notifications is not None:
            pulumi.set(__self__, "event_notifications", event_notifications)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if object_storage is not None:
            pulumi.set(__self__, "object_storage", object_storage)
        if scc_instance_settings_id is not None:
            pulumi.set(__self__, "scc_instance_settings_id", scc_instance_settings_id)

    @_builtins.property
    @pulumi.getter(name="eventNotifications")
    def event_notifications(self) -> Optional[pulumi.Input['SccInstanceSettingsEventNotificationsArgs']]:
        """
        The Event Notifications settings.
        """
        return pulumi.get(self, "event_notifications")

    @event_notifications.setter
    def event_notifications(self, value: Optional[pulumi.Input['SccInstanceSettingsEventNotificationsArgs']]):
        pulumi.set(self, "event_notifications", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the Security and Compliance Center instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="objectStorage")
    def object_storage(self) -> Optional[pulumi.Input['SccInstanceSettingsObjectStorageArgs']]:
        """
        The Cloud Object Storage settings.
        """
        return pulumi.get(self, "object_storage")

    @object_storage.setter
    def object_storage(self, value: Optional[pulumi.Input['SccInstanceSettingsObjectStorageArgs']]):
        pulumi.set(self, "object_storage", value)

    @_builtins.property
    @pulumi.getter(name="sccInstanceSettingsId")
    def scc_instance_settings_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "scc_instance_settings_id")

    @scc_instance_settings_id.setter
    def scc_instance_settings_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scc_instance_settings_id", value)


@pulumi.type_token("ibm:index/sccInstanceSettings:SccInstanceSettings")
class SccInstanceSettings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 event_notifications: Optional[pulumi.Input[Union['SccInstanceSettingsEventNotificationsArgs', 'SccInstanceSettingsEventNotificationsArgsDict']]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 object_storage: Optional[pulumi.Input[Union['SccInstanceSettingsObjectStorageArgs', 'SccInstanceSettingsObjectStorageArgsDict']]] = None,
                 scc_instance_settings_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a SccInstanceSettings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['SccInstanceSettingsEventNotificationsArgs', 'SccInstanceSettingsEventNotificationsArgsDict']] event_notifications: The Event Notifications settings.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Security and Compliance Center instance.
        :param pulumi.Input[Union['SccInstanceSettingsObjectStorageArgs', 'SccInstanceSettingsObjectStorageArgsDict']] object_storage: The Cloud Object Storage settings.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SccInstanceSettingsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SccInstanceSettings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SccInstanceSettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SccInstanceSettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 event_notifications: Optional[pulumi.Input[Union['SccInstanceSettingsEventNotificationsArgs', 'SccInstanceSettingsEventNotificationsArgsDict']]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 object_storage: Optional[pulumi.Input[Union['SccInstanceSettingsObjectStorageArgs', 'SccInstanceSettingsObjectStorageArgsDict']]] = None,
                 scc_instance_settings_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SccInstanceSettingsArgs.__new__(SccInstanceSettingsArgs)

            if event_notifications is None and not opts.urn:
                raise TypeError("Missing required property 'event_notifications'")
            __props__.__dict__["event_notifications"] = event_notifications
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if object_storage is None and not opts.urn:
                raise TypeError("Missing required property 'object_storage'")
            __props__.__dict__["object_storage"] = object_storage
            __props__.__dict__["scc_instance_settings_id"] = scc_instance_settings_id
        super(SccInstanceSettings, __self__).__init__(
            'ibm:index/sccInstanceSettings:SccInstanceSettings',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            event_notifications: Optional[pulumi.Input[Union['SccInstanceSettingsEventNotificationsArgs', 'SccInstanceSettingsEventNotificationsArgsDict']]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            object_storage: Optional[pulumi.Input[Union['SccInstanceSettingsObjectStorageArgs', 'SccInstanceSettingsObjectStorageArgsDict']]] = None,
            scc_instance_settings_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'SccInstanceSettings':
        """
        Get an existing SccInstanceSettings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['SccInstanceSettingsEventNotificationsArgs', 'SccInstanceSettingsEventNotificationsArgsDict']] event_notifications: The Event Notifications settings.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the Security and Compliance Center instance.
        :param pulumi.Input[Union['SccInstanceSettingsObjectStorageArgs', 'SccInstanceSettingsObjectStorageArgsDict']] object_storage: The Cloud Object Storage settings.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SccInstanceSettingsState.__new__(_SccInstanceSettingsState)

        __props__.__dict__["event_notifications"] = event_notifications
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["object_storage"] = object_storage
        __props__.__dict__["scc_instance_settings_id"] = scc_instance_settings_id
        return SccInstanceSettings(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="eventNotifications")
    def event_notifications(self) -> pulumi.Output['outputs.SccInstanceSettingsEventNotifications']:
        """
        The Event Notifications settings.
        """
        return pulumi.get(self, "event_notifications")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the Security and Compliance Center instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="objectStorage")
    def object_storage(self) -> pulumi.Output['outputs.SccInstanceSettingsObjectStorage']:
        """
        The Cloud Object Storage settings.
        """
        return pulumi.get(self, "object_storage")

    @_builtins.property
    @pulumi.getter(name="sccInstanceSettingsId")
    def scc_instance_settings_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "scc_instance_settings_id")

