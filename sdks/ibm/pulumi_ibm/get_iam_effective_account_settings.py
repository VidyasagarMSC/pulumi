# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIamEffectiveAccountSettingsResult',
    'AwaitableGetIamEffectiveAccountSettingsResult',
    'get_iam_effective_account_settings',
    'get_iam_effective_account_settings_output',
]

@pulumi.output_type
class GetIamEffectiveAccountSettingsResult:
    """
    A collection of values returned by getIamEffectiveAccountSettings.
    """
    def __init__(__self__, account_id=None, accounts=None, assigned_templates=None, contexts=None, effectives=None, id=None, include_history=None, resolve_user_mfa=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if accounts and not isinstance(accounts, list):
            raise TypeError("Expected argument 'accounts' to be a list")
        pulumi.set(__self__, "accounts", accounts)
        if assigned_templates and not isinstance(assigned_templates, list):
            raise TypeError("Expected argument 'assigned_templates' to be a list")
        pulumi.set(__self__, "assigned_templates", assigned_templates)
        if contexts and not isinstance(contexts, list):
            raise TypeError("Expected argument 'contexts' to be a list")
        pulumi.set(__self__, "contexts", contexts)
        if effectives and not isinstance(effectives, list):
            raise TypeError("Expected argument 'effectives' to be a list")
        pulumi.set(__self__, "effectives", effectives)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if include_history and not isinstance(include_history, bool):
            raise TypeError("Expected argument 'include_history' to be a bool")
        pulumi.set(__self__, "include_history", include_history)
        if resolve_user_mfa and not isinstance(resolve_user_mfa, bool):
            raise TypeError("Expected argument 'resolve_user_mfa' to be a bool")
        pulumi.set(__self__, "resolve_user_mfa", resolve_user_mfa)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter
    def accounts(self) -> Sequence['outputs.GetIamEffectiveAccountSettingsAccountResult']:
        return pulumi.get(self, "accounts")

    @_builtins.property
    @pulumi.getter(name="assignedTemplates")
    def assigned_templates(self) -> Sequence['outputs.GetIamEffectiveAccountSettingsAssignedTemplateResult']:
        return pulumi.get(self, "assigned_templates")

    @_builtins.property
    @pulumi.getter
    def contexts(self) -> Sequence['outputs.GetIamEffectiveAccountSettingsContextResult']:
        return pulumi.get(self, "contexts")

    @_builtins.property
    @pulumi.getter
    def effectives(self) -> Sequence['outputs.GetIamEffectiveAccountSettingsEffectiveResult']:
        return pulumi.get(self, "effectives")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="includeHistory")
    def include_history(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "include_history")

    @_builtins.property
    @pulumi.getter(name="resolveUserMfa")
    def resolve_user_mfa(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "resolve_user_mfa")


class AwaitableGetIamEffectiveAccountSettingsResult(GetIamEffectiveAccountSettingsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamEffectiveAccountSettingsResult(
            account_id=self.account_id,
            accounts=self.accounts,
            assigned_templates=self.assigned_templates,
            contexts=self.contexts,
            effectives=self.effectives,
            id=self.id,
            include_history=self.include_history,
            resolve_user_mfa=self.resolve_user_mfa)


def get_iam_effective_account_settings(account_id: Optional[_builtins.str] = None,
                                       id: Optional[_builtins.str] = None,
                                       include_history: Optional[_builtins.bool] = None,
                                       resolve_user_mfa: Optional[_builtins.bool] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamEffectiveAccountSettingsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['id'] = id
    __args__['includeHistory'] = include_history
    __args__['resolveUserMfa'] = resolve_user_mfa
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIamEffectiveAccountSettings:getIamEffectiveAccountSettings', __args__, opts=opts, typ=GetIamEffectiveAccountSettingsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIamEffectiveAccountSettingsResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        accounts=pulumi.get(__ret__, 'accounts'),
        assigned_templates=pulumi.get(__ret__, 'assigned_templates'),
        contexts=pulumi.get(__ret__, 'contexts'),
        effectives=pulumi.get(__ret__, 'effectives'),
        id=pulumi.get(__ret__, 'id'),
        include_history=pulumi.get(__ret__, 'include_history'),
        resolve_user_mfa=pulumi.get(__ret__, 'resolve_user_mfa'))
def get_iam_effective_account_settings_output(account_id: Optional[pulumi.Input[_builtins.str]] = None,
                                              id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              include_history: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                              resolve_user_mfa: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamEffectiveAccountSettingsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['id'] = id
    __args__['includeHistory'] = include_history
    __args__['resolveUserMfa'] = resolve_user_mfa
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIamEffectiveAccountSettings:getIamEffectiveAccountSettings', __args__, opts=opts, typ=GetIamEffectiveAccountSettingsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIamEffectiveAccountSettingsResult(
        account_id=pulumi.get(__response__, 'account_id'),
        accounts=pulumi.get(__response__, 'accounts'),
        assigned_templates=pulumi.get(__response__, 'assigned_templates'),
        contexts=pulumi.get(__response__, 'contexts'),
        effectives=pulumi.get(__response__, 'effectives'),
        id=pulumi.get(__response__, 'id'),
        include_history=pulumi.get(__response__, 'include_history'),
        resolve_user_mfa=pulumi.get(__response__, 'resolve_user_mfa')))
