# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCodeEngineFunctionResult',
    'AwaitableGetCodeEngineFunctionResult',
    'get_code_engine_function',
    'get_code_engine_function_output',
]

@pulumi.output_type
class GetCodeEngineFunctionResult:
    """
    A collection of values returned by getCodeEngineFunction.
    """
    def __init__(__self__, code_binary=None, code_main=None, code_reference=None, code_secret=None, computed_env_variables=None, created_at=None, endpoint=None, endpoint_internal=None, entity_tag=None, function_id=None, href=None, id=None, managed_domain_mappings=None, name=None, project_id=None, region=None, resource_type=None, run_env_variables=None, runtime=None, scale_concurrency=None, scale_cpu_limit=None, scale_down_delay=None, scale_max_execution_time=None, scale_memory_limit=None, status=None, status_details=None):
        if code_binary and not isinstance(code_binary, bool):
            raise TypeError("Expected argument 'code_binary' to be a bool")
        pulumi.set(__self__, "code_binary", code_binary)
        if code_main and not isinstance(code_main, str):
            raise TypeError("Expected argument 'code_main' to be a str")
        pulumi.set(__self__, "code_main", code_main)
        if code_reference and not isinstance(code_reference, str):
            raise TypeError("Expected argument 'code_reference' to be a str")
        pulumi.set(__self__, "code_reference", code_reference)
        if code_secret and not isinstance(code_secret, str):
            raise TypeError("Expected argument 'code_secret' to be a str")
        pulumi.set(__self__, "code_secret", code_secret)
        if computed_env_variables and not isinstance(computed_env_variables, list):
            raise TypeError("Expected argument 'computed_env_variables' to be a list")
        pulumi.set(__self__, "computed_env_variables", computed_env_variables)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if endpoint and not isinstance(endpoint, str):
            raise TypeError("Expected argument 'endpoint' to be a str")
        pulumi.set(__self__, "endpoint", endpoint)
        if endpoint_internal and not isinstance(endpoint_internal, str):
            raise TypeError("Expected argument 'endpoint_internal' to be a str")
        pulumi.set(__self__, "endpoint_internal", endpoint_internal)
        if entity_tag and not isinstance(entity_tag, str):
            raise TypeError("Expected argument 'entity_tag' to be a str")
        pulumi.set(__self__, "entity_tag", entity_tag)
        if function_id and not isinstance(function_id, str):
            raise TypeError("Expected argument 'function_id' to be a str")
        pulumi.set(__self__, "function_id", function_id)
        if href and not isinstance(href, str):
            raise TypeError("Expected argument 'href' to be a str")
        pulumi.set(__self__, "href", href)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if managed_domain_mappings and not isinstance(managed_domain_mappings, str):
            raise TypeError("Expected argument 'managed_domain_mappings' to be a str")
        pulumi.set(__self__, "managed_domain_mappings", managed_domain_mappings)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if run_env_variables and not isinstance(run_env_variables, list):
            raise TypeError("Expected argument 'run_env_variables' to be a list")
        pulumi.set(__self__, "run_env_variables", run_env_variables)
        if runtime and not isinstance(runtime, str):
            raise TypeError("Expected argument 'runtime' to be a str")
        pulumi.set(__self__, "runtime", runtime)
        if scale_concurrency and not isinstance(scale_concurrency, float):
            raise TypeError("Expected argument 'scale_concurrency' to be a float")
        pulumi.set(__self__, "scale_concurrency", scale_concurrency)
        if scale_cpu_limit and not isinstance(scale_cpu_limit, str):
            raise TypeError("Expected argument 'scale_cpu_limit' to be a str")
        pulumi.set(__self__, "scale_cpu_limit", scale_cpu_limit)
        if scale_down_delay and not isinstance(scale_down_delay, float):
            raise TypeError("Expected argument 'scale_down_delay' to be a float")
        pulumi.set(__self__, "scale_down_delay", scale_down_delay)
        if scale_max_execution_time and not isinstance(scale_max_execution_time, float):
            raise TypeError("Expected argument 'scale_max_execution_time' to be a float")
        pulumi.set(__self__, "scale_max_execution_time", scale_max_execution_time)
        if scale_memory_limit and not isinstance(scale_memory_limit, str):
            raise TypeError("Expected argument 'scale_memory_limit' to be a str")
        pulumi.set(__self__, "scale_memory_limit", scale_memory_limit)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if status_details and not isinstance(status_details, list):
            raise TypeError("Expected argument 'status_details' to be a list")
        pulumi.set(__self__, "status_details", status_details)

    @_builtins.property
    @pulumi.getter(name="codeBinary")
    def code_binary(self) -> _builtins.bool:
        return pulumi.get(self, "code_binary")

    @_builtins.property
    @pulumi.getter(name="codeMain")
    def code_main(self) -> _builtins.str:
        return pulumi.get(self, "code_main")

    @_builtins.property
    @pulumi.getter(name="codeReference")
    def code_reference(self) -> _builtins.str:
        return pulumi.get(self, "code_reference")

    @_builtins.property
    @pulumi.getter(name="codeSecret")
    def code_secret(self) -> _builtins.str:
        return pulumi.get(self, "code_secret")

    @_builtins.property
    @pulumi.getter(name="computedEnvVariables")
    def computed_env_variables(self) -> Sequence['outputs.GetCodeEngineFunctionComputedEnvVariableResult']:
        return pulumi.get(self, "computed_env_variables")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> _builtins.str:
        return pulumi.get(self, "endpoint")

    @_builtins.property
    @pulumi.getter(name="endpointInternal")
    def endpoint_internal(self) -> _builtins.str:
        return pulumi.get(self, "endpoint_internal")

    @_builtins.property
    @pulumi.getter(name="entityTag")
    def entity_tag(self) -> _builtins.str:
        return pulumi.get(self, "entity_tag")

    @_builtins.property
    @pulumi.getter(name="functionId")
    def function_id(self) -> _builtins.str:
        return pulumi.get(self, "function_id")

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="managedDomainMappings")
    def managed_domain_mappings(self) -> _builtins.str:
        return pulumi.get(self, "managed_domain_mappings")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="runEnvVariables")
    def run_env_variables(self) -> Sequence['outputs.GetCodeEngineFunctionRunEnvVariableResult']:
        return pulumi.get(self, "run_env_variables")

    @_builtins.property
    @pulumi.getter
    def runtime(self) -> _builtins.str:
        return pulumi.get(self, "runtime")

    @_builtins.property
    @pulumi.getter(name="scaleConcurrency")
    def scale_concurrency(self) -> _builtins.float:
        return pulumi.get(self, "scale_concurrency")

    @_builtins.property
    @pulumi.getter(name="scaleCpuLimit")
    def scale_cpu_limit(self) -> _builtins.str:
        return pulumi.get(self, "scale_cpu_limit")

    @_builtins.property
    @pulumi.getter(name="scaleDownDelay")
    def scale_down_delay(self) -> _builtins.float:
        return pulumi.get(self, "scale_down_delay")

    @_builtins.property
    @pulumi.getter(name="scaleMaxExecutionTime")
    def scale_max_execution_time(self) -> _builtins.float:
        return pulumi.get(self, "scale_max_execution_time")

    @_builtins.property
    @pulumi.getter(name="scaleMemoryLimit")
    def scale_memory_limit(self) -> _builtins.str:
        return pulumi.get(self, "scale_memory_limit")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> Sequence['outputs.GetCodeEngineFunctionStatusDetailResult']:
        return pulumi.get(self, "status_details")


class AwaitableGetCodeEngineFunctionResult(GetCodeEngineFunctionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCodeEngineFunctionResult(
            code_binary=self.code_binary,
            code_main=self.code_main,
            code_reference=self.code_reference,
            code_secret=self.code_secret,
            computed_env_variables=self.computed_env_variables,
            created_at=self.created_at,
            endpoint=self.endpoint,
            endpoint_internal=self.endpoint_internal,
            entity_tag=self.entity_tag,
            function_id=self.function_id,
            href=self.href,
            id=self.id,
            managed_domain_mappings=self.managed_domain_mappings,
            name=self.name,
            project_id=self.project_id,
            region=self.region,
            resource_type=self.resource_type,
            run_env_variables=self.run_env_variables,
            runtime=self.runtime,
            scale_concurrency=self.scale_concurrency,
            scale_cpu_limit=self.scale_cpu_limit,
            scale_down_delay=self.scale_down_delay,
            scale_max_execution_time=self.scale_max_execution_time,
            scale_memory_limit=self.scale_memory_limit,
            status=self.status,
            status_details=self.status_details)


def get_code_engine_function(id: Optional[_builtins.str] = None,
                             name: Optional[_builtins.str] = None,
                             project_id: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCodeEngineFunctionResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCodeEngineFunction:getCodeEngineFunction', __args__, opts=opts, typ=GetCodeEngineFunctionResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCodeEngineFunctionResult(
        code_binary=pulumi.get(__ret__, 'code_binary'),
        code_main=pulumi.get(__ret__, 'code_main'),
        code_reference=pulumi.get(__ret__, 'code_reference'),
        code_secret=pulumi.get(__ret__, 'code_secret'),
        computed_env_variables=pulumi.get(__ret__, 'computed_env_variables'),
        created_at=pulumi.get(__ret__, 'created_at'),
        endpoint=pulumi.get(__ret__, 'endpoint'),
        endpoint_internal=pulumi.get(__ret__, 'endpoint_internal'),
        entity_tag=pulumi.get(__ret__, 'entity_tag'),
        function_id=pulumi.get(__ret__, 'function_id'),
        href=pulumi.get(__ret__, 'href'),
        id=pulumi.get(__ret__, 'id'),
        managed_domain_mappings=pulumi.get(__ret__, 'managed_domain_mappings'),
        name=pulumi.get(__ret__, 'name'),
        project_id=pulumi.get(__ret__, 'project_id'),
        region=pulumi.get(__ret__, 'region'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        run_env_variables=pulumi.get(__ret__, 'run_env_variables'),
        runtime=pulumi.get(__ret__, 'runtime'),
        scale_concurrency=pulumi.get(__ret__, 'scale_concurrency'),
        scale_cpu_limit=pulumi.get(__ret__, 'scale_cpu_limit'),
        scale_down_delay=pulumi.get(__ret__, 'scale_down_delay'),
        scale_max_execution_time=pulumi.get(__ret__, 'scale_max_execution_time'),
        scale_memory_limit=pulumi.get(__ret__, 'scale_memory_limit'),
        status=pulumi.get(__ret__, 'status'),
        status_details=pulumi.get(__ret__, 'status_details'))
def get_code_engine_function_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    name: Optional[pulumi.Input[_builtins.str]] = None,
                                    project_id: Optional[pulumi.Input[_builtins.str]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCodeEngineFunctionResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCodeEngineFunction:getCodeEngineFunction', __args__, opts=opts, typ=GetCodeEngineFunctionResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCodeEngineFunctionResult(
        code_binary=pulumi.get(__response__, 'code_binary'),
        code_main=pulumi.get(__response__, 'code_main'),
        code_reference=pulumi.get(__response__, 'code_reference'),
        code_secret=pulumi.get(__response__, 'code_secret'),
        computed_env_variables=pulumi.get(__response__, 'computed_env_variables'),
        created_at=pulumi.get(__response__, 'created_at'),
        endpoint=pulumi.get(__response__, 'endpoint'),
        endpoint_internal=pulumi.get(__response__, 'endpoint_internal'),
        entity_tag=pulumi.get(__response__, 'entity_tag'),
        function_id=pulumi.get(__response__, 'function_id'),
        href=pulumi.get(__response__, 'href'),
        id=pulumi.get(__response__, 'id'),
        managed_domain_mappings=pulumi.get(__response__, 'managed_domain_mappings'),
        name=pulumi.get(__response__, 'name'),
        project_id=pulumi.get(__response__, 'project_id'),
        region=pulumi.get(__response__, 'region'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        run_env_variables=pulumi.get(__response__, 'run_env_variables'),
        runtime=pulumi.get(__response__, 'runtime'),
        scale_concurrency=pulumi.get(__response__, 'scale_concurrency'),
        scale_cpu_limit=pulumi.get(__response__, 'scale_cpu_limit'),
        scale_down_delay=pulumi.get(__response__, 'scale_down_delay'),
        scale_max_execution_time=pulumi.get(__response__, 'scale_max_execution_time'),
        scale_memory_limit=pulumi.get(__response__, 'scale_memory_limit'),
        status=pulumi.get(__response__, 'status'),
        status_details=pulumi.get(__response__, 'status_details')))
