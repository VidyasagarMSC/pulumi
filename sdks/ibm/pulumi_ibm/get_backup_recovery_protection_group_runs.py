# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetBackupRecoveryProtectionGroupRunsResult',
    'AwaitableGetBackupRecoveryProtectionGroupRunsResult',
    'get_backup_recovery_protection_group_runs',
    'get_backup_recovery_protection_group_runs_output',
]

@pulumi.output_type
class GetBackupRecoveryProtectionGroupRunsResult:
    """
    A collection of values returned by getBackupRecoveryProtectionGroupRuns.
    """
    def __init__(__self__, archival_run_statuses=None, cloud_spin_run_statuses=None, end_time_usecs=None, exclude_non_restorable_runs=None, filter_by_copy_task_end_time=None, filter_by_end_time=None, id=None, include_object_details=None, local_backup_run_statuses=None, num_runs=None, only_return_successful_copy_run=None, protection_group_id=None, replication_run_statuses=None, request_initiator_type=None, run_id=None, run_tags=None, run_types=None, runs=None, snapshot_target_types=None, start_time_usecs=None, total_runs=None, use_cached_data=None, x_ibm_tenant_id=None):
        if archival_run_statuses and not isinstance(archival_run_statuses, list):
            raise TypeError("Expected argument 'archival_run_statuses' to be a list")
        pulumi.set(__self__, "archival_run_statuses", archival_run_statuses)
        if cloud_spin_run_statuses and not isinstance(cloud_spin_run_statuses, list):
            raise TypeError("Expected argument 'cloud_spin_run_statuses' to be a list")
        pulumi.set(__self__, "cloud_spin_run_statuses", cloud_spin_run_statuses)
        if end_time_usecs and not isinstance(end_time_usecs, float):
            raise TypeError("Expected argument 'end_time_usecs' to be a float")
        pulumi.set(__self__, "end_time_usecs", end_time_usecs)
        if exclude_non_restorable_runs and not isinstance(exclude_non_restorable_runs, bool):
            raise TypeError("Expected argument 'exclude_non_restorable_runs' to be a bool")
        pulumi.set(__self__, "exclude_non_restorable_runs", exclude_non_restorable_runs)
        if filter_by_copy_task_end_time and not isinstance(filter_by_copy_task_end_time, bool):
            raise TypeError("Expected argument 'filter_by_copy_task_end_time' to be a bool")
        pulumi.set(__self__, "filter_by_copy_task_end_time", filter_by_copy_task_end_time)
        if filter_by_end_time and not isinstance(filter_by_end_time, bool):
            raise TypeError("Expected argument 'filter_by_end_time' to be a bool")
        pulumi.set(__self__, "filter_by_end_time", filter_by_end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if include_object_details and not isinstance(include_object_details, bool):
            raise TypeError("Expected argument 'include_object_details' to be a bool")
        pulumi.set(__self__, "include_object_details", include_object_details)
        if local_backup_run_statuses and not isinstance(local_backup_run_statuses, list):
            raise TypeError("Expected argument 'local_backup_run_statuses' to be a list")
        pulumi.set(__self__, "local_backup_run_statuses", local_backup_run_statuses)
        if num_runs and not isinstance(num_runs, float):
            raise TypeError("Expected argument 'num_runs' to be a float")
        pulumi.set(__self__, "num_runs", num_runs)
        if only_return_successful_copy_run and not isinstance(only_return_successful_copy_run, bool):
            raise TypeError("Expected argument 'only_return_successful_copy_run' to be a bool")
        pulumi.set(__self__, "only_return_successful_copy_run", only_return_successful_copy_run)
        if protection_group_id and not isinstance(protection_group_id, str):
            raise TypeError("Expected argument 'protection_group_id' to be a str")
        pulumi.set(__self__, "protection_group_id", protection_group_id)
        if replication_run_statuses and not isinstance(replication_run_statuses, list):
            raise TypeError("Expected argument 'replication_run_statuses' to be a list")
        pulumi.set(__self__, "replication_run_statuses", replication_run_statuses)
        if request_initiator_type and not isinstance(request_initiator_type, str):
            raise TypeError("Expected argument 'request_initiator_type' to be a str")
        pulumi.set(__self__, "request_initiator_type", request_initiator_type)
        if run_id and not isinstance(run_id, str):
            raise TypeError("Expected argument 'run_id' to be a str")
        pulumi.set(__self__, "run_id", run_id)
        if run_tags and not isinstance(run_tags, list):
            raise TypeError("Expected argument 'run_tags' to be a list")
        pulumi.set(__self__, "run_tags", run_tags)
        if run_types and not isinstance(run_types, list):
            raise TypeError("Expected argument 'run_types' to be a list")
        pulumi.set(__self__, "run_types", run_types)
        if runs and not isinstance(runs, list):
            raise TypeError("Expected argument 'runs' to be a list")
        pulumi.set(__self__, "runs", runs)
        if snapshot_target_types and not isinstance(snapshot_target_types, list):
            raise TypeError("Expected argument 'snapshot_target_types' to be a list")
        pulumi.set(__self__, "snapshot_target_types", snapshot_target_types)
        if start_time_usecs and not isinstance(start_time_usecs, float):
            raise TypeError("Expected argument 'start_time_usecs' to be a float")
        pulumi.set(__self__, "start_time_usecs", start_time_usecs)
        if total_runs and not isinstance(total_runs, float):
            raise TypeError("Expected argument 'total_runs' to be a float")
        pulumi.set(__self__, "total_runs", total_runs)
        if use_cached_data and not isinstance(use_cached_data, bool):
            raise TypeError("Expected argument 'use_cached_data' to be a bool")
        pulumi.set(__self__, "use_cached_data", use_cached_data)
        if x_ibm_tenant_id and not isinstance(x_ibm_tenant_id, str):
            raise TypeError("Expected argument 'x_ibm_tenant_id' to be a str")
        pulumi.set(__self__, "x_ibm_tenant_id", x_ibm_tenant_id)

    @_builtins.property
    @pulumi.getter(name="archivalRunStatuses")
    def archival_run_statuses(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "archival_run_statuses")

    @_builtins.property
    @pulumi.getter(name="cloudSpinRunStatuses")
    def cloud_spin_run_statuses(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "cloud_spin_run_statuses")

    @_builtins.property
    @pulumi.getter(name="endTimeUsecs")
    def end_time_usecs(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "end_time_usecs")

    @_builtins.property
    @pulumi.getter(name="excludeNonRestorableRuns")
    def exclude_non_restorable_runs(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "exclude_non_restorable_runs")

    @_builtins.property
    @pulumi.getter(name="filterByCopyTaskEndTime")
    def filter_by_copy_task_end_time(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "filter_by_copy_task_end_time")

    @_builtins.property
    @pulumi.getter(name="filterByEndTime")
    def filter_by_end_time(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "filter_by_end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="includeObjectDetails")
    def include_object_details(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "include_object_details")

    @_builtins.property
    @pulumi.getter(name="localBackupRunStatuses")
    def local_backup_run_statuses(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "local_backup_run_statuses")

    @_builtins.property
    @pulumi.getter(name="numRuns")
    def num_runs(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "num_runs")

    @_builtins.property
    @pulumi.getter(name="onlyReturnSuccessfulCopyRun")
    def only_return_successful_copy_run(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "only_return_successful_copy_run")

    @_builtins.property
    @pulumi.getter(name="protectionGroupId")
    def protection_group_id(self) -> _builtins.str:
        return pulumi.get(self, "protection_group_id")

    @_builtins.property
    @pulumi.getter(name="replicationRunStatuses")
    def replication_run_statuses(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "replication_run_statuses")

    @_builtins.property
    @pulumi.getter(name="requestInitiatorType")
    def request_initiator_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "request_initiator_type")

    @_builtins.property
    @pulumi.getter(name="runId")
    def run_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "run_id")

    @_builtins.property
    @pulumi.getter(name="runTags")
    def run_tags(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "run_tags")

    @_builtins.property
    @pulumi.getter(name="runTypes")
    def run_types(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "run_types")

    @_builtins.property
    @pulumi.getter
    def runs(self) -> Sequence['outputs.GetBackupRecoveryProtectionGroupRunsRunResult']:
        return pulumi.get(self, "runs")

    @_builtins.property
    @pulumi.getter(name="snapshotTargetTypes")
    def snapshot_target_types(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "snapshot_target_types")

    @_builtins.property
    @pulumi.getter(name="startTimeUsecs")
    def start_time_usecs(self) -> Optional[_builtins.float]:
        return pulumi.get(self, "start_time_usecs")

    @_builtins.property
    @pulumi.getter(name="totalRuns")
    def total_runs(self) -> _builtins.float:
        return pulumi.get(self, "total_runs")

    @_builtins.property
    @pulumi.getter(name="useCachedData")
    def use_cached_data(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "use_cached_data")

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> _builtins.str:
        return pulumi.get(self, "x_ibm_tenant_id")


class AwaitableGetBackupRecoveryProtectionGroupRunsResult(GetBackupRecoveryProtectionGroupRunsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupRecoveryProtectionGroupRunsResult(
            archival_run_statuses=self.archival_run_statuses,
            cloud_spin_run_statuses=self.cloud_spin_run_statuses,
            end_time_usecs=self.end_time_usecs,
            exclude_non_restorable_runs=self.exclude_non_restorable_runs,
            filter_by_copy_task_end_time=self.filter_by_copy_task_end_time,
            filter_by_end_time=self.filter_by_end_time,
            id=self.id,
            include_object_details=self.include_object_details,
            local_backup_run_statuses=self.local_backup_run_statuses,
            num_runs=self.num_runs,
            only_return_successful_copy_run=self.only_return_successful_copy_run,
            protection_group_id=self.protection_group_id,
            replication_run_statuses=self.replication_run_statuses,
            request_initiator_type=self.request_initiator_type,
            run_id=self.run_id,
            run_tags=self.run_tags,
            run_types=self.run_types,
            runs=self.runs,
            snapshot_target_types=self.snapshot_target_types,
            start_time_usecs=self.start_time_usecs,
            total_runs=self.total_runs,
            use_cached_data=self.use_cached_data,
            x_ibm_tenant_id=self.x_ibm_tenant_id)


def get_backup_recovery_protection_group_runs(archival_run_statuses: Optional[Sequence[_builtins.str]] = None,
                                              cloud_spin_run_statuses: Optional[Sequence[_builtins.str]] = None,
                                              end_time_usecs: Optional[_builtins.float] = None,
                                              exclude_non_restorable_runs: Optional[_builtins.bool] = None,
                                              filter_by_copy_task_end_time: Optional[_builtins.bool] = None,
                                              filter_by_end_time: Optional[_builtins.bool] = None,
                                              id: Optional[_builtins.str] = None,
                                              include_object_details: Optional[_builtins.bool] = None,
                                              local_backup_run_statuses: Optional[Sequence[_builtins.str]] = None,
                                              num_runs: Optional[_builtins.float] = None,
                                              only_return_successful_copy_run: Optional[_builtins.bool] = None,
                                              protection_group_id: Optional[_builtins.str] = None,
                                              replication_run_statuses: Optional[Sequence[_builtins.str]] = None,
                                              request_initiator_type: Optional[_builtins.str] = None,
                                              run_id: Optional[_builtins.str] = None,
                                              run_tags: Optional[Sequence[_builtins.str]] = None,
                                              run_types: Optional[Sequence[_builtins.str]] = None,
                                              snapshot_target_types: Optional[Sequence[_builtins.str]] = None,
                                              start_time_usecs: Optional[_builtins.float] = None,
                                              use_cached_data: Optional[_builtins.bool] = None,
                                              x_ibm_tenant_id: Optional[_builtins.str] = None,
                                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupRecoveryProtectionGroupRunsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['archivalRunStatuses'] = archival_run_statuses
    __args__['cloudSpinRunStatuses'] = cloud_spin_run_statuses
    __args__['endTimeUsecs'] = end_time_usecs
    __args__['excludeNonRestorableRuns'] = exclude_non_restorable_runs
    __args__['filterByCopyTaskEndTime'] = filter_by_copy_task_end_time
    __args__['filterByEndTime'] = filter_by_end_time
    __args__['id'] = id
    __args__['includeObjectDetails'] = include_object_details
    __args__['localBackupRunStatuses'] = local_backup_run_statuses
    __args__['numRuns'] = num_runs
    __args__['onlyReturnSuccessfulCopyRun'] = only_return_successful_copy_run
    __args__['protectionGroupId'] = protection_group_id
    __args__['replicationRunStatuses'] = replication_run_statuses
    __args__['requestInitiatorType'] = request_initiator_type
    __args__['runId'] = run_id
    __args__['runTags'] = run_tags
    __args__['runTypes'] = run_types
    __args__['snapshotTargetTypes'] = snapshot_target_types
    __args__['startTimeUsecs'] = start_time_usecs
    __args__['useCachedData'] = use_cached_data
    __args__['xIbmTenantId'] = x_ibm_tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getBackupRecoveryProtectionGroupRuns:getBackupRecoveryProtectionGroupRuns', __args__, opts=opts, typ=GetBackupRecoveryProtectionGroupRunsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetBackupRecoveryProtectionGroupRunsResult(
        archival_run_statuses=pulumi.get(__ret__, 'archival_run_statuses'),
        cloud_spin_run_statuses=pulumi.get(__ret__, 'cloud_spin_run_statuses'),
        end_time_usecs=pulumi.get(__ret__, 'end_time_usecs'),
        exclude_non_restorable_runs=pulumi.get(__ret__, 'exclude_non_restorable_runs'),
        filter_by_copy_task_end_time=pulumi.get(__ret__, 'filter_by_copy_task_end_time'),
        filter_by_end_time=pulumi.get(__ret__, 'filter_by_end_time'),
        id=pulumi.get(__ret__, 'id'),
        include_object_details=pulumi.get(__ret__, 'include_object_details'),
        local_backup_run_statuses=pulumi.get(__ret__, 'local_backup_run_statuses'),
        num_runs=pulumi.get(__ret__, 'num_runs'),
        only_return_successful_copy_run=pulumi.get(__ret__, 'only_return_successful_copy_run'),
        protection_group_id=pulumi.get(__ret__, 'protection_group_id'),
        replication_run_statuses=pulumi.get(__ret__, 'replication_run_statuses'),
        request_initiator_type=pulumi.get(__ret__, 'request_initiator_type'),
        run_id=pulumi.get(__ret__, 'run_id'),
        run_tags=pulumi.get(__ret__, 'run_tags'),
        run_types=pulumi.get(__ret__, 'run_types'),
        runs=pulumi.get(__ret__, 'runs'),
        snapshot_target_types=pulumi.get(__ret__, 'snapshot_target_types'),
        start_time_usecs=pulumi.get(__ret__, 'start_time_usecs'),
        total_runs=pulumi.get(__ret__, 'total_runs'),
        use_cached_data=pulumi.get(__ret__, 'use_cached_data'),
        x_ibm_tenant_id=pulumi.get(__ret__, 'x_ibm_tenant_id'))
def get_backup_recovery_protection_group_runs_output(archival_run_statuses: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                     cloud_spin_run_statuses: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                     end_time_usecs: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                                                     exclude_non_restorable_runs: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                                     filter_by_copy_task_end_time: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                                     filter_by_end_time: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                                     id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                     include_object_details: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                                     local_backup_run_statuses: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                     num_runs: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                                                     only_return_successful_copy_run: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                                     protection_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                     replication_run_statuses: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                     request_initiator_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                     run_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                     run_tags: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                     run_types: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                     snapshot_target_types: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                                     start_time_usecs: Optional[pulumi.Input[Optional[_builtins.float]]] = None,
                                                     use_cached_data: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                                     x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBackupRecoveryProtectionGroupRunsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['archivalRunStatuses'] = archival_run_statuses
    __args__['cloudSpinRunStatuses'] = cloud_spin_run_statuses
    __args__['endTimeUsecs'] = end_time_usecs
    __args__['excludeNonRestorableRuns'] = exclude_non_restorable_runs
    __args__['filterByCopyTaskEndTime'] = filter_by_copy_task_end_time
    __args__['filterByEndTime'] = filter_by_end_time
    __args__['id'] = id
    __args__['includeObjectDetails'] = include_object_details
    __args__['localBackupRunStatuses'] = local_backup_run_statuses
    __args__['numRuns'] = num_runs
    __args__['onlyReturnSuccessfulCopyRun'] = only_return_successful_copy_run
    __args__['protectionGroupId'] = protection_group_id
    __args__['replicationRunStatuses'] = replication_run_statuses
    __args__['requestInitiatorType'] = request_initiator_type
    __args__['runId'] = run_id
    __args__['runTags'] = run_tags
    __args__['runTypes'] = run_types
    __args__['snapshotTargetTypes'] = snapshot_target_types
    __args__['startTimeUsecs'] = start_time_usecs
    __args__['useCachedData'] = use_cached_data
    __args__['xIbmTenantId'] = x_ibm_tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getBackupRecoveryProtectionGroupRuns:getBackupRecoveryProtectionGroupRuns', __args__, opts=opts, typ=GetBackupRecoveryProtectionGroupRunsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetBackupRecoveryProtectionGroupRunsResult(
        archival_run_statuses=pulumi.get(__response__, 'archival_run_statuses'),
        cloud_spin_run_statuses=pulumi.get(__response__, 'cloud_spin_run_statuses'),
        end_time_usecs=pulumi.get(__response__, 'end_time_usecs'),
        exclude_non_restorable_runs=pulumi.get(__response__, 'exclude_non_restorable_runs'),
        filter_by_copy_task_end_time=pulumi.get(__response__, 'filter_by_copy_task_end_time'),
        filter_by_end_time=pulumi.get(__response__, 'filter_by_end_time'),
        id=pulumi.get(__response__, 'id'),
        include_object_details=pulumi.get(__response__, 'include_object_details'),
        local_backup_run_statuses=pulumi.get(__response__, 'local_backup_run_statuses'),
        num_runs=pulumi.get(__response__, 'num_runs'),
        only_return_successful_copy_run=pulumi.get(__response__, 'only_return_successful_copy_run'),
        protection_group_id=pulumi.get(__response__, 'protection_group_id'),
        replication_run_statuses=pulumi.get(__response__, 'replication_run_statuses'),
        request_initiator_type=pulumi.get(__response__, 'request_initiator_type'),
        run_id=pulumi.get(__response__, 'run_id'),
        run_tags=pulumi.get(__response__, 'run_tags'),
        run_types=pulumi.get(__response__, 'run_types'),
        runs=pulumi.get(__response__, 'runs'),
        snapshot_target_types=pulumi.get(__response__, 'snapshot_target_types'),
        start_time_usecs=pulumi.get(__response__, 'start_time_usecs'),
        total_runs=pulumi.get(__response__, 'total_runs'),
        use_cached_data=pulumi.get(__response__, 'use_cached_data'),
        x_ibm_tenant_id=pulumi.get(__response__, 'x_ibm_tenant_id')))
