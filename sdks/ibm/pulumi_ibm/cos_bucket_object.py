# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CosBucketObjectArgs', 'CosBucketObject']

@pulumi.input_type
class CosBucketObjectArgs:
    def __init__(__self__, *,
                 bucket_crn: pulumi.Input[_builtins.str],
                 bucket_location: pulumi.Input[_builtins.str],
                 key: pulumi.Input[_builtins.str],
                 content: Optional[pulumi.Input[_builtins.str]] = None,
                 content_base64: Optional[pulumi.Input[_builtins.str]] = None,
                 content_file: Optional[pulumi.Input[_builtins.str]] = None,
                 cos_bucket_object_id: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 etag: Optional[pulumi.Input[_builtins.str]] = None,
                 force_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 object_lock_legal_hold_status: Optional[pulumi.Input[_builtins.str]] = None,
                 object_lock_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 object_lock_retain_until_date: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['CosBucketObjectTimeoutsArgs']] = None,
                 website_redirect: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CosBucketObject resource.
        :param pulumi.Input[_builtins.str] bucket_crn: COS bucket CRN
        :param pulumi.Input[_builtins.str] bucket_location: COS bucket location
        :param pulumi.Input[_builtins.str] key: COS object key
        :param pulumi.Input[_builtins.str] content: COS object content
        :param pulumi.Input[_builtins.str] content_base64: COS object content in base64 encoding
        :param pulumi.Input[_builtins.str] content_file: COS object content file path
        :param pulumi.Input[_builtins.str] endpoint_type: COS endpoint type: public, private, direct
        :param pulumi.Input[_builtins.str] etag: COS object MD5 hexdigest
        :param pulumi.Input[_builtins.bool] force_delete: COS buckets need to be empty before they can be deleted. force_delete option empty the bucket and delete it.
        :param pulumi.Input[_builtins.str] object_lock_legal_hold_status: An object lock configuration on the object, the valid states are ON/OFF. When ON prevents deletion of the object
               version.
        :param pulumi.Input[_builtins.str] object_lock_mode: Retention modes apply different levels of protection to the objects.
        :param pulumi.Input[_builtins.str] object_lock_retain_until_date: An object cannot be deleted when the current time is earlier than the retainUntilDate. After this date, the object can
               be deleted.
        :param pulumi.Input[_builtins.str] website_redirect: Redirect a request to another object or an URL
        """
        pulumi.set(__self__, "bucket_crn", bucket_crn)
        pulumi.set(__self__, "bucket_location", bucket_location)
        pulumi.set(__self__, "key", key)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if content_base64 is not None:
            pulumi.set(__self__, "content_base64", content_base64)
        if content_file is not None:
            pulumi.set(__self__, "content_file", content_file)
        if cos_bucket_object_id is not None:
            pulumi.set(__self__, "cos_bucket_object_id", cos_bucket_object_id)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if force_delete is not None:
            pulumi.set(__self__, "force_delete", force_delete)
        if object_lock_legal_hold_status is not None:
            pulumi.set(__self__, "object_lock_legal_hold_status", object_lock_legal_hold_status)
        if object_lock_mode is not None:
            pulumi.set(__self__, "object_lock_mode", object_lock_mode)
        if object_lock_retain_until_date is not None:
            pulumi.set(__self__, "object_lock_retain_until_date", object_lock_retain_until_date)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if website_redirect is not None:
            pulumi.set(__self__, "website_redirect", website_redirect)

    @_builtins.property
    @pulumi.getter(name="bucketCrn")
    def bucket_crn(self) -> pulumi.Input[_builtins.str]:
        """
        COS bucket CRN
        """
        return pulumi.get(self, "bucket_crn")

    @bucket_crn.setter
    def bucket_crn(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "bucket_crn", value)

    @_builtins.property
    @pulumi.getter(name="bucketLocation")
    def bucket_location(self) -> pulumi.Input[_builtins.str]:
        """
        COS bucket location
        """
        return pulumi.get(self, "bucket_location")

    @bucket_location.setter
    def bucket_location(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "bucket_location", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> pulumi.Input[_builtins.str]:
        """
        COS object key
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        COS object content
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "content", value)

    @_builtins.property
    @pulumi.getter(name="contentBase64")
    def content_base64(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        COS object content in base64 encoding
        """
        return pulumi.get(self, "content_base64")

    @content_base64.setter
    def content_base64(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "content_base64", value)

    @_builtins.property
    @pulumi.getter(name="contentFile")
    def content_file(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        COS object content file path
        """
        return pulumi.get(self, "content_file")

    @content_file.setter
    def content_file(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "content_file", value)

    @_builtins.property
    @pulumi.getter(name="cosBucketObjectId")
    def cos_bucket_object_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cos_bucket_object_id")

    @cos_bucket_object_id.setter
    def cos_bucket_object_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cos_bucket_object_id", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        COS endpoint type: public, private, direct
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        COS object MD5 hexdigest
        """
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "etag", value)

    @_builtins.property
    @pulumi.getter(name="forceDelete")
    def force_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        COS buckets need to be empty before they can be deleted. force_delete option empty the bucket and delete it.
        """
        return pulumi.get(self, "force_delete")

    @force_delete.setter
    def force_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "force_delete", value)

    @_builtins.property
    @pulumi.getter(name="objectLockLegalHoldStatus")
    def object_lock_legal_hold_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        An object lock configuration on the object, the valid states are ON/OFF. When ON prevents deletion of the object
        version.
        """
        return pulumi.get(self, "object_lock_legal_hold_status")

    @object_lock_legal_hold_status.setter
    def object_lock_legal_hold_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "object_lock_legal_hold_status", value)

    @_builtins.property
    @pulumi.getter(name="objectLockMode")
    def object_lock_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Retention modes apply different levels of protection to the objects.
        """
        return pulumi.get(self, "object_lock_mode")

    @object_lock_mode.setter
    def object_lock_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "object_lock_mode", value)

    @_builtins.property
    @pulumi.getter(name="objectLockRetainUntilDate")
    def object_lock_retain_until_date(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        An object cannot be deleted when the current time is earlier than the retainUntilDate. After this date, the object can
        be deleted.
        """
        return pulumi.get(self, "object_lock_retain_until_date")

    @object_lock_retain_until_date.setter
    def object_lock_retain_until_date(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "object_lock_retain_until_date", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['CosBucketObjectTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['CosBucketObjectTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="websiteRedirect")
    def website_redirect(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Redirect a request to another object or an URL
        """
        return pulumi.get(self, "website_redirect")

    @website_redirect.setter
    def website_redirect(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "website_redirect", value)


@pulumi.input_type
class _CosBucketObjectState:
    def __init__(__self__, *,
                 body: Optional[pulumi.Input[_builtins.str]] = None,
                 bucket_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 bucket_location: Optional[pulumi.Input[_builtins.str]] = None,
                 content: Optional[pulumi.Input[_builtins.str]] = None,
                 content_base64: Optional[pulumi.Input[_builtins.str]] = None,
                 content_file: Optional[pulumi.Input[_builtins.str]] = None,
                 content_length: Optional[pulumi.Input[_builtins.float]] = None,
                 content_type: Optional[pulumi.Input[_builtins.str]] = None,
                 cos_bucket_object_id: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 etag: Optional[pulumi.Input[_builtins.str]] = None,
                 force_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 key: Optional[pulumi.Input[_builtins.str]] = None,
                 last_modified: Optional[pulumi.Input[_builtins.str]] = None,
                 object_lock_legal_hold_status: Optional[pulumi.Input[_builtins.str]] = None,
                 object_lock_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 object_lock_retain_until_date: Optional[pulumi.Input[_builtins.str]] = None,
                 object_sql_url: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['CosBucketObjectTimeoutsArgs']] = None,
                 version_id: Optional[pulumi.Input[_builtins.str]] = None,
                 website_redirect: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CosBucketObject resources.
        :param pulumi.Input[_builtins.str] body: COS object body
        :param pulumi.Input[_builtins.str] bucket_crn: COS bucket CRN
        :param pulumi.Input[_builtins.str] bucket_location: COS bucket location
        :param pulumi.Input[_builtins.str] content: COS object content
        :param pulumi.Input[_builtins.str] content_base64: COS object content in base64 encoding
        :param pulumi.Input[_builtins.str] content_file: COS object content file path
        :param pulumi.Input[_builtins.float] content_length: COS object content length
        :param pulumi.Input[_builtins.str] content_type: COS object content type
        :param pulumi.Input[_builtins.str] endpoint_type: COS endpoint type: public, private, direct
        :param pulumi.Input[_builtins.str] etag: COS object MD5 hexdigest
        :param pulumi.Input[_builtins.bool] force_delete: COS buckets need to be empty before they can be deleted. force_delete option empty the bucket and delete it.
        :param pulumi.Input[_builtins.str] key: COS object key
        :param pulumi.Input[_builtins.str] last_modified: COS object last modified date
        :param pulumi.Input[_builtins.str] object_lock_legal_hold_status: An object lock configuration on the object, the valid states are ON/OFF. When ON prevents deletion of the object
               version.
        :param pulumi.Input[_builtins.str] object_lock_mode: Retention modes apply different levels of protection to the objects.
        :param pulumi.Input[_builtins.str] object_lock_retain_until_date: An object cannot be deleted when the current time is earlier than the retainUntilDate. After this date, the object can
               be deleted.
        :param pulumi.Input[_builtins.str] object_sql_url: Access the object using an SQL Query instance.The reference url is used to perform queries against objects storing
               structured data.
        :param pulumi.Input[_builtins.str] website_redirect: Redirect a request to another object or an URL
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if bucket_crn is not None:
            pulumi.set(__self__, "bucket_crn", bucket_crn)
        if bucket_location is not None:
            pulumi.set(__self__, "bucket_location", bucket_location)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if content_base64 is not None:
            pulumi.set(__self__, "content_base64", content_base64)
        if content_file is not None:
            pulumi.set(__self__, "content_file", content_file)
        if content_length is not None:
            pulumi.set(__self__, "content_length", content_length)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if cos_bucket_object_id is not None:
            pulumi.set(__self__, "cos_bucket_object_id", cos_bucket_object_id)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if force_delete is not None:
            pulumi.set(__self__, "force_delete", force_delete)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if object_lock_legal_hold_status is not None:
            pulumi.set(__self__, "object_lock_legal_hold_status", object_lock_legal_hold_status)
        if object_lock_mode is not None:
            pulumi.set(__self__, "object_lock_mode", object_lock_mode)
        if object_lock_retain_until_date is not None:
            pulumi.set(__self__, "object_lock_retain_until_date", object_lock_retain_until_date)
        if object_sql_url is not None:
            pulumi.set(__self__, "object_sql_url", object_sql_url)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if version_id is not None:
            pulumi.set(__self__, "version_id", version_id)
        if website_redirect is not None:
            pulumi.set(__self__, "website_redirect", website_redirect)

    @_builtins.property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        COS object body
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "body", value)

    @_builtins.property
    @pulumi.getter(name="bucketCrn")
    def bucket_crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        COS bucket CRN
        """
        return pulumi.get(self, "bucket_crn")

    @bucket_crn.setter
    def bucket_crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bucket_crn", value)

    @_builtins.property
    @pulumi.getter(name="bucketLocation")
    def bucket_location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        COS bucket location
        """
        return pulumi.get(self, "bucket_location")

    @bucket_location.setter
    def bucket_location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bucket_location", value)

    @_builtins.property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        COS object content
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "content", value)

    @_builtins.property
    @pulumi.getter(name="contentBase64")
    def content_base64(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        COS object content in base64 encoding
        """
        return pulumi.get(self, "content_base64")

    @content_base64.setter
    def content_base64(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "content_base64", value)

    @_builtins.property
    @pulumi.getter(name="contentFile")
    def content_file(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        COS object content file path
        """
        return pulumi.get(self, "content_file")

    @content_file.setter
    def content_file(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "content_file", value)

    @_builtins.property
    @pulumi.getter(name="contentLength")
    def content_length(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        COS object content length
        """
        return pulumi.get(self, "content_length")

    @content_length.setter
    def content_length(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "content_length", value)

    @_builtins.property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        COS object content type
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "content_type", value)

    @_builtins.property
    @pulumi.getter(name="cosBucketObjectId")
    def cos_bucket_object_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cos_bucket_object_id")

    @cos_bucket_object_id.setter
    def cos_bucket_object_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cos_bucket_object_id", value)

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        COS endpoint type: public, private, direct
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_type", value)

    @_builtins.property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        COS object MD5 hexdigest
        """
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "etag", value)

    @_builtins.property
    @pulumi.getter(name="forceDelete")
    def force_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        COS buckets need to be empty before they can be deleted. force_delete option empty the bucket and delete it.
        """
        return pulumi.get(self, "force_delete")

    @force_delete.setter
    def force_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "force_delete", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        COS object key
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        COS object last modified date
        """
        return pulumi.get(self, "last_modified")

    @last_modified.setter
    def last_modified(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_modified", value)

    @_builtins.property
    @pulumi.getter(name="objectLockLegalHoldStatus")
    def object_lock_legal_hold_status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        An object lock configuration on the object, the valid states are ON/OFF. When ON prevents deletion of the object
        version.
        """
        return pulumi.get(self, "object_lock_legal_hold_status")

    @object_lock_legal_hold_status.setter
    def object_lock_legal_hold_status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "object_lock_legal_hold_status", value)

    @_builtins.property
    @pulumi.getter(name="objectLockMode")
    def object_lock_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Retention modes apply different levels of protection to the objects.
        """
        return pulumi.get(self, "object_lock_mode")

    @object_lock_mode.setter
    def object_lock_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "object_lock_mode", value)

    @_builtins.property
    @pulumi.getter(name="objectLockRetainUntilDate")
    def object_lock_retain_until_date(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        An object cannot be deleted when the current time is earlier than the retainUntilDate. After this date, the object can
        be deleted.
        """
        return pulumi.get(self, "object_lock_retain_until_date")

    @object_lock_retain_until_date.setter
    def object_lock_retain_until_date(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "object_lock_retain_until_date", value)

    @_builtins.property
    @pulumi.getter(name="objectSqlUrl")
    def object_sql_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Access the object using an SQL Query instance.The reference url is used to perform queries against objects storing
        structured data.
        """
        return pulumi.get(self, "object_sql_url")

    @object_sql_url.setter
    def object_sql_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "object_sql_url", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['CosBucketObjectTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['CosBucketObjectTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="versionId")
    def version_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "version_id")

    @version_id.setter
    def version_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version_id", value)

    @_builtins.property
    @pulumi.getter(name="websiteRedirect")
    def website_redirect(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Redirect a request to another object or an URL
        """
        return pulumi.get(self, "website_redirect")

    @website_redirect.setter
    def website_redirect(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "website_redirect", value)


@pulumi.type_token("ibm:index/cosBucketObject:CosBucketObject")
class CosBucketObject(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 bucket_location: Optional[pulumi.Input[_builtins.str]] = None,
                 content: Optional[pulumi.Input[_builtins.str]] = None,
                 content_base64: Optional[pulumi.Input[_builtins.str]] = None,
                 content_file: Optional[pulumi.Input[_builtins.str]] = None,
                 cos_bucket_object_id: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 etag: Optional[pulumi.Input[_builtins.str]] = None,
                 force_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 key: Optional[pulumi.Input[_builtins.str]] = None,
                 object_lock_legal_hold_status: Optional[pulumi.Input[_builtins.str]] = None,
                 object_lock_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 object_lock_retain_until_date: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['CosBucketObjectTimeoutsArgs', 'CosBucketObjectTimeoutsArgsDict']]] = None,
                 website_redirect: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a CosBucketObject resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] bucket_crn: COS bucket CRN
        :param pulumi.Input[_builtins.str] bucket_location: COS bucket location
        :param pulumi.Input[_builtins.str] content: COS object content
        :param pulumi.Input[_builtins.str] content_base64: COS object content in base64 encoding
        :param pulumi.Input[_builtins.str] content_file: COS object content file path
        :param pulumi.Input[_builtins.str] endpoint_type: COS endpoint type: public, private, direct
        :param pulumi.Input[_builtins.str] etag: COS object MD5 hexdigest
        :param pulumi.Input[_builtins.bool] force_delete: COS buckets need to be empty before they can be deleted. force_delete option empty the bucket and delete it.
        :param pulumi.Input[_builtins.str] key: COS object key
        :param pulumi.Input[_builtins.str] object_lock_legal_hold_status: An object lock configuration on the object, the valid states are ON/OFF. When ON prevents deletion of the object
               version.
        :param pulumi.Input[_builtins.str] object_lock_mode: Retention modes apply different levels of protection to the objects.
        :param pulumi.Input[_builtins.str] object_lock_retain_until_date: An object cannot be deleted when the current time is earlier than the retainUntilDate. After this date, the object can
               be deleted.
        :param pulumi.Input[_builtins.str] website_redirect: Redirect a request to another object or an URL
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CosBucketObjectArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CosBucketObject resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CosBucketObjectArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CosBucketObjectArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket_crn: Optional[pulumi.Input[_builtins.str]] = None,
                 bucket_location: Optional[pulumi.Input[_builtins.str]] = None,
                 content: Optional[pulumi.Input[_builtins.str]] = None,
                 content_base64: Optional[pulumi.Input[_builtins.str]] = None,
                 content_file: Optional[pulumi.Input[_builtins.str]] = None,
                 cos_bucket_object_id: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
                 etag: Optional[pulumi.Input[_builtins.str]] = None,
                 force_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 key: Optional[pulumi.Input[_builtins.str]] = None,
                 object_lock_legal_hold_status: Optional[pulumi.Input[_builtins.str]] = None,
                 object_lock_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 object_lock_retain_until_date: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['CosBucketObjectTimeoutsArgs', 'CosBucketObjectTimeoutsArgsDict']]] = None,
                 website_redirect: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CosBucketObjectArgs.__new__(CosBucketObjectArgs)

            if bucket_crn is None and not opts.urn:
                raise TypeError("Missing required property 'bucket_crn'")
            __props__.__dict__["bucket_crn"] = bucket_crn
            if bucket_location is None and not opts.urn:
                raise TypeError("Missing required property 'bucket_location'")
            __props__.__dict__["bucket_location"] = bucket_location
            __props__.__dict__["content"] = content
            __props__.__dict__["content_base64"] = content_base64
            __props__.__dict__["content_file"] = content_file
            __props__.__dict__["cos_bucket_object_id"] = cos_bucket_object_id
            __props__.__dict__["endpoint_type"] = endpoint_type
            __props__.__dict__["etag"] = etag
            __props__.__dict__["force_delete"] = force_delete
            if key is None and not opts.urn:
                raise TypeError("Missing required property 'key'")
            __props__.__dict__["key"] = key
            __props__.__dict__["object_lock_legal_hold_status"] = object_lock_legal_hold_status
            __props__.__dict__["object_lock_mode"] = object_lock_mode
            __props__.__dict__["object_lock_retain_until_date"] = object_lock_retain_until_date
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["website_redirect"] = website_redirect
            __props__.__dict__["body"] = None
            __props__.__dict__["content_length"] = None
            __props__.__dict__["content_type"] = None
            __props__.__dict__["last_modified"] = None
            __props__.__dict__["object_sql_url"] = None
            __props__.__dict__["version_id"] = None
        super(CosBucketObject, __self__).__init__(
            'ibm:index/cosBucketObject:CosBucketObject',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            body: Optional[pulumi.Input[_builtins.str]] = None,
            bucket_crn: Optional[pulumi.Input[_builtins.str]] = None,
            bucket_location: Optional[pulumi.Input[_builtins.str]] = None,
            content: Optional[pulumi.Input[_builtins.str]] = None,
            content_base64: Optional[pulumi.Input[_builtins.str]] = None,
            content_file: Optional[pulumi.Input[_builtins.str]] = None,
            content_length: Optional[pulumi.Input[_builtins.float]] = None,
            content_type: Optional[pulumi.Input[_builtins.str]] = None,
            cos_bucket_object_id: Optional[pulumi.Input[_builtins.str]] = None,
            endpoint_type: Optional[pulumi.Input[_builtins.str]] = None,
            etag: Optional[pulumi.Input[_builtins.str]] = None,
            force_delete: Optional[pulumi.Input[_builtins.bool]] = None,
            key: Optional[pulumi.Input[_builtins.str]] = None,
            last_modified: Optional[pulumi.Input[_builtins.str]] = None,
            object_lock_legal_hold_status: Optional[pulumi.Input[_builtins.str]] = None,
            object_lock_mode: Optional[pulumi.Input[_builtins.str]] = None,
            object_lock_retain_until_date: Optional[pulumi.Input[_builtins.str]] = None,
            object_sql_url: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['CosBucketObjectTimeoutsArgs', 'CosBucketObjectTimeoutsArgsDict']]] = None,
            version_id: Optional[pulumi.Input[_builtins.str]] = None,
            website_redirect: Optional[pulumi.Input[_builtins.str]] = None) -> 'CosBucketObject':
        """
        Get an existing CosBucketObject resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] body: COS object body
        :param pulumi.Input[_builtins.str] bucket_crn: COS bucket CRN
        :param pulumi.Input[_builtins.str] bucket_location: COS bucket location
        :param pulumi.Input[_builtins.str] content: COS object content
        :param pulumi.Input[_builtins.str] content_base64: COS object content in base64 encoding
        :param pulumi.Input[_builtins.str] content_file: COS object content file path
        :param pulumi.Input[_builtins.float] content_length: COS object content length
        :param pulumi.Input[_builtins.str] content_type: COS object content type
        :param pulumi.Input[_builtins.str] endpoint_type: COS endpoint type: public, private, direct
        :param pulumi.Input[_builtins.str] etag: COS object MD5 hexdigest
        :param pulumi.Input[_builtins.bool] force_delete: COS buckets need to be empty before they can be deleted. force_delete option empty the bucket and delete it.
        :param pulumi.Input[_builtins.str] key: COS object key
        :param pulumi.Input[_builtins.str] last_modified: COS object last modified date
        :param pulumi.Input[_builtins.str] object_lock_legal_hold_status: An object lock configuration on the object, the valid states are ON/OFF. When ON prevents deletion of the object
               version.
        :param pulumi.Input[_builtins.str] object_lock_mode: Retention modes apply different levels of protection to the objects.
        :param pulumi.Input[_builtins.str] object_lock_retain_until_date: An object cannot be deleted when the current time is earlier than the retainUntilDate. After this date, the object can
               be deleted.
        :param pulumi.Input[_builtins.str] object_sql_url: Access the object using an SQL Query instance.The reference url is used to perform queries against objects storing
               structured data.
        :param pulumi.Input[_builtins.str] website_redirect: Redirect a request to another object or an URL
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CosBucketObjectState.__new__(_CosBucketObjectState)

        __props__.__dict__["body"] = body
        __props__.__dict__["bucket_crn"] = bucket_crn
        __props__.__dict__["bucket_location"] = bucket_location
        __props__.__dict__["content"] = content
        __props__.__dict__["content_base64"] = content_base64
        __props__.__dict__["content_file"] = content_file
        __props__.__dict__["content_length"] = content_length
        __props__.__dict__["content_type"] = content_type
        __props__.__dict__["cos_bucket_object_id"] = cos_bucket_object_id
        __props__.__dict__["endpoint_type"] = endpoint_type
        __props__.__dict__["etag"] = etag
        __props__.__dict__["force_delete"] = force_delete
        __props__.__dict__["key"] = key
        __props__.__dict__["last_modified"] = last_modified
        __props__.__dict__["object_lock_legal_hold_status"] = object_lock_legal_hold_status
        __props__.__dict__["object_lock_mode"] = object_lock_mode
        __props__.__dict__["object_lock_retain_until_date"] = object_lock_retain_until_date
        __props__.__dict__["object_sql_url"] = object_sql_url
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["version_id"] = version_id
        __props__.__dict__["website_redirect"] = website_redirect
        return CosBucketObject(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def body(self) -> pulumi.Output[_builtins.str]:
        """
        COS object body
        """
        return pulumi.get(self, "body")

    @_builtins.property
    @pulumi.getter(name="bucketCrn")
    def bucket_crn(self) -> pulumi.Output[_builtins.str]:
        """
        COS bucket CRN
        """
        return pulumi.get(self, "bucket_crn")

    @_builtins.property
    @pulumi.getter(name="bucketLocation")
    def bucket_location(self) -> pulumi.Output[_builtins.str]:
        """
        COS bucket location
        """
        return pulumi.get(self, "bucket_location")

    @_builtins.property
    @pulumi.getter
    def content(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        COS object content
        """
        return pulumi.get(self, "content")

    @_builtins.property
    @pulumi.getter(name="contentBase64")
    def content_base64(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        COS object content in base64 encoding
        """
        return pulumi.get(self, "content_base64")

    @_builtins.property
    @pulumi.getter(name="contentFile")
    def content_file(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        COS object content file path
        """
        return pulumi.get(self, "content_file")

    @_builtins.property
    @pulumi.getter(name="contentLength")
    def content_length(self) -> pulumi.Output[_builtins.float]:
        """
        COS object content length
        """
        return pulumi.get(self, "content_length")

    @_builtins.property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Output[_builtins.str]:
        """
        COS object content type
        """
        return pulumi.get(self, "content_type")

    @_builtins.property
    @pulumi.getter(name="cosBucketObjectId")
    def cos_bucket_object_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cos_bucket_object_id")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        COS endpoint type: public, private, direct
        """
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter
    def etag(self) -> pulumi.Output[_builtins.str]:
        """
        COS object MD5 hexdigest
        """
        return pulumi.get(self, "etag")

    @_builtins.property
    @pulumi.getter(name="forceDelete")
    def force_delete(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        COS buckets need to be empty before they can be deleted. force_delete option empty the bucket and delete it.
        """
        return pulumi.get(self, "force_delete")

    @_builtins.property
    @pulumi.getter
    def key(self) -> pulumi.Output[_builtins.str]:
        """
        COS object key
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> pulumi.Output[_builtins.str]:
        """
        COS object last modified date
        """
        return pulumi.get(self, "last_modified")

    @_builtins.property
    @pulumi.getter(name="objectLockLegalHoldStatus")
    def object_lock_legal_hold_status(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        An object lock configuration on the object, the valid states are ON/OFF. When ON prevents deletion of the object
        version.
        """
        return pulumi.get(self, "object_lock_legal_hold_status")

    @_builtins.property
    @pulumi.getter(name="objectLockMode")
    def object_lock_mode(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Retention modes apply different levels of protection to the objects.
        """
        return pulumi.get(self, "object_lock_mode")

    @_builtins.property
    @pulumi.getter(name="objectLockRetainUntilDate")
    def object_lock_retain_until_date(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        An object cannot be deleted when the current time is earlier than the retainUntilDate. After this date, the object can
        be deleted.
        """
        return pulumi.get(self, "object_lock_retain_until_date")

    @_builtins.property
    @pulumi.getter(name="objectSqlUrl")
    def object_sql_url(self) -> pulumi.Output[_builtins.str]:
        """
        Access the object using an SQL Query instance.The reference url is used to perform queries against objects storing
        structured data.
        """
        return pulumi.get(self, "object_sql_url")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.CosBucketObjectTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter(name="versionId")
    def version_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "version_id")

    @_builtins.property
    @pulumi.getter(name="websiteRedirect")
    def website_redirect(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Redirect a request to another object or an URL
        """
        return pulumi.get(self, "website_redirect")

