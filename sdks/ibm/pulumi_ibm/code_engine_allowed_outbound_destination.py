# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['CodeEngineAllowedOutboundDestinationArgs', 'CodeEngineAllowedOutboundDestination']

@pulumi.input_type
class CodeEngineAllowedOutboundDestinationArgs:
    def __init__(__self__, *,
                 project_id: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 cidr_block: Optional[pulumi.Input[_builtins.str]] = None,
                 code_engine_allowed_outbound_destination_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CodeEngineAllowedOutboundDestination resource.
        :param pulumi.Input[_builtins.str] project_id: The ID of the project.
        :param pulumi.Input[_builtins.str] type: Specify the type of the allowed outbound destination. Allowed types are: 'cidr_block'.
        :param pulumi.Input[_builtins.str] cidr_block: The IPv4 address range.
        :param pulumi.Input[_builtins.str] name: The name of the CIDR block.
        """
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "type", type)
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if code_engine_allowed_outbound_destination_id is not None:
            pulumi.set(__self__, "code_engine_allowed_outbound_destination_id", code_engine_allowed_outbound_destination_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the project.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specify the type of the allowed outbound destination. Allowed types are: 'cidr_block'.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IPv4 address range.
        """
        return pulumi.get(self, "cidr_block")

    @cidr_block.setter
    def cidr_block(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cidr_block", value)

    @_builtins.property
    @pulumi.getter(name="codeEngineAllowedOutboundDestinationId")
    def code_engine_allowed_outbound_destination_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "code_engine_allowed_outbound_destination_id")

    @code_engine_allowed_outbound_destination_id.setter
    def code_engine_allowed_outbound_destination_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "code_engine_allowed_outbound_destination_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the CIDR block.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _CodeEngineAllowedOutboundDestinationState:
    def __init__(__self__, *,
                 cidr_block: Optional[pulumi.Input[_builtins.str]] = None,
                 code_engine_allowed_outbound_destination_id: Optional[pulumi.Input[_builtins.str]] = None,
                 entity_tag: Optional[pulumi.Input[_builtins.str]] = None,
                 etag: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CodeEngineAllowedOutboundDestination resources.
        :param pulumi.Input[_builtins.str] cidr_block: The IPv4 address range.
        :param pulumi.Input[_builtins.str] entity_tag: The version of the allowed outbound destination, which is used to achieve optimistic locking.
        :param pulumi.Input[_builtins.str] name: The name of the CIDR block.
        :param pulumi.Input[_builtins.str] project_id: The ID of the project.
        :param pulumi.Input[_builtins.str] type: Specify the type of the allowed outbound destination. Allowed types are: 'cidr_block'.
        """
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if code_engine_allowed_outbound_destination_id is not None:
            pulumi.set(__self__, "code_engine_allowed_outbound_destination_id", code_engine_allowed_outbound_destination_id)
        if entity_tag is not None:
            pulumi.set(__self__, "entity_tag", entity_tag)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The IPv4 address range.
        """
        return pulumi.get(self, "cidr_block")

    @cidr_block.setter
    def cidr_block(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cidr_block", value)

    @_builtins.property
    @pulumi.getter(name="codeEngineAllowedOutboundDestinationId")
    def code_engine_allowed_outbound_destination_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "code_engine_allowed_outbound_destination_id")

    @code_engine_allowed_outbound_destination_id.setter
    def code_engine_allowed_outbound_destination_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "code_engine_allowed_outbound_destination_id", value)

    @_builtins.property
    @pulumi.getter(name="entityTag")
    def entity_tag(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The version of the allowed outbound destination, which is used to achieve optimistic locking.
        """
        return pulumi.get(self, "entity_tag")

    @entity_tag.setter
    def entity_tag(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entity_tag", value)

    @_builtins.property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "etag", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the CIDR block.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the project.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specify the type of the allowed outbound destination. Allowed types are: 'cidr_block'.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("ibm:index/codeEngineAllowedOutboundDestination:CodeEngineAllowedOutboundDestination")
class CodeEngineAllowedOutboundDestination(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cidr_block: Optional[pulumi.Input[_builtins.str]] = None,
                 code_engine_allowed_outbound_destination_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a CodeEngineAllowedOutboundDestination resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cidr_block: The IPv4 address range.
        :param pulumi.Input[_builtins.str] name: The name of the CIDR block.
        :param pulumi.Input[_builtins.str] project_id: The ID of the project.
        :param pulumi.Input[_builtins.str] type: Specify the type of the allowed outbound destination. Allowed types are: 'cidr_block'.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CodeEngineAllowedOutboundDestinationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CodeEngineAllowedOutboundDestination resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CodeEngineAllowedOutboundDestinationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CodeEngineAllowedOutboundDestinationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cidr_block: Optional[pulumi.Input[_builtins.str]] = None,
                 code_engine_allowed_outbound_destination_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CodeEngineAllowedOutboundDestinationArgs.__new__(CodeEngineAllowedOutboundDestinationArgs)

            __props__.__dict__["cidr_block"] = cidr_block
            __props__.__dict__["code_engine_allowed_outbound_destination_id"] = code_engine_allowed_outbound_destination_id
            __props__.__dict__["name"] = name
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["entity_tag"] = None
            __props__.__dict__["etag"] = None
        super(CodeEngineAllowedOutboundDestination, __self__).__init__(
            'ibm:index/codeEngineAllowedOutboundDestination:CodeEngineAllowedOutboundDestination',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cidr_block: Optional[pulumi.Input[_builtins.str]] = None,
            code_engine_allowed_outbound_destination_id: Optional[pulumi.Input[_builtins.str]] = None,
            entity_tag: Optional[pulumi.Input[_builtins.str]] = None,
            etag: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            project_id: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None) -> 'CodeEngineAllowedOutboundDestination':
        """
        Get an existing CodeEngineAllowedOutboundDestination resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cidr_block: The IPv4 address range.
        :param pulumi.Input[_builtins.str] entity_tag: The version of the allowed outbound destination, which is used to achieve optimistic locking.
        :param pulumi.Input[_builtins.str] name: The name of the CIDR block.
        :param pulumi.Input[_builtins.str] project_id: The ID of the project.
        :param pulumi.Input[_builtins.str] type: Specify the type of the allowed outbound destination. Allowed types are: 'cidr_block'.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CodeEngineAllowedOutboundDestinationState.__new__(_CodeEngineAllowedOutboundDestinationState)

        __props__.__dict__["cidr_block"] = cidr_block
        __props__.__dict__["code_engine_allowed_outbound_destination_id"] = code_engine_allowed_outbound_destination_id
        __props__.__dict__["entity_tag"] = entity_tag
        __props__.__dict__["etag"] = etag
        __props__.__dict__["name"] = name
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["type"] = type
        return CodeEngineAllowedOutboundDestination(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The IPv4 address range.
        """
        return pulumi.get(self, "cidr_block")

    @_builtins.property
    @pulumi.getter(name="codeEngineAllowedOutboundDestinationId")
    def code_engine_allowed_outbound_destination_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "code_engine_allowed_outbound_destination_id")

    @_builtins.property
    @pulumi.getter(name="entityTag")
    def entity_tag(self) -> pulumi.Output[_builtins.str]:
        """
        The version of the allowed outbound destination, which is used to achieve optimistic locking.
        """
        return pulumi.get(self, "entity_tag")

    @_builtins.property
    @pulumi.getter
    def etag(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "etag")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the CIDR block.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the project.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specify the type of the allowed outbound destination. Allowed types are: 'cidr_block'.
        """
        return pulumi.get(self, "type")

