# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetPiInstanceIpResult',
    'AwaitableGetPiInstanceIpResult',
    'get_pi_instance_ip',
    'get_pi_instance_ip_output',
]

@pulumi.output_type
class GetPiInstanceIpResult:
    """
    A collection of values returned by getPiInstanceIp.
    """
    def __init__(__self__, external_ip=None, id=None, ip=None, ipoctet=None, mac_address=None, macaddress=None, network_id=None, network_interface_id=None, network_security_group_ids=None, network_security_groups_hreves=None, pi_cloud_instance_id=None, pi_instance_name=None, pi_network_name=None, type=None):
        if external_ip and not isinstance(external_ip, str):
            raise TypeError("Expected argument 'external_ip' to be a str")
        pulumi.set(__self__, "external_ip", external_ip)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip and not isinstance(ip, str):
            raise TypeError("Expected argument 'ip' to be a str")
        pulumi.set(__self__, "ip", ip)
        if ipoctet and not isinstance(ipoctet, str):
            raise TypeError("Expected argument 'ipoctet' to be a str")
        pulumi.set(__self__, "ipoctet", ipoctet)
        if mac_address and not isinstance(mac_address, str):
            raise TypeError("Expected argument 'mac_address' to be a str")
        pulumi.set(__self__, "mac_address", mac_address)
        if macaddress and not isinstance(macaddress, str):
            raise TypeError("Expected argument 'macaddress' to be a str")
        pulumi.set(__self__, "macaddress", macaddress)
        if network_id and not isinstance(network_id, str):
            raise TypeError("Expected argument 'network_id' to be a str")
        pulumi.set(__self__, "network_id", network_id)
        if network_interface_id and not isinstance(network_interface_id, str):
            raise TypeError("Expected argument 'network_interface_id' to be a str")
        pulumi.set(__self__, "network_interface_id", network_interface_id)
        if network_security_group_ids and not isinstance(network_security_group_ids, list):
            raise TypeError("Expected argument 'network_security_group_ids' to be a list")
        pulumi.set(__self__, "network_security_group_ids", network_security_group_ids)
        if network_security_groups_hreves and not isinstance(network_security_groups_hreves, list):
            raise TypeError("Expected argument 'network_security_groups_hreves' to be a list")
        pulumi.set(__self__, "network_security_groups_hreves", network_security_groups_hreves)
        if pi_cloud_instance_id and not isinstance(pi_cloud_instance_id, str):
            raise TypeError("Expected argument 'pi_cloud_instance_id' to be a str")
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_instance_name and not isinstance(pi_instance_name, str):
            raise TypeError("Expected argument 'pi_instance_name' to be a str")
        pulumi.set(__self__, "pi_instance_name", pi_instance_name)
        if pi_network_name and not isinstance(pi_network_name, str):
            raise TypeError("Expected argument 'pi_network_name' to be a str")
        pulumi.set(__self__, "pi_network_name", pi_network_name)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="externalIp")
    def external_ip(self) -> _builtins.str:
        return pulumi.get(self, "external_ip")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> _builtins.str:
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter
    def ipoctet(self) -> _builtins.str:
        return pulumi.get(self, "ipoctet")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> _builtins.str:
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def macaddress(self) -> _builtins.str:
        return pulumi.get(self, "macaddress")

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> _builtins.str:
        return pulumi.get(self, "network_id")

    @_builtins.property
    @pulumi.getter(name="networkInterfaceId")
    def network_interface_id(self) -> _builtins.str:
        return pulumi.get(self, "network_interface_id")

    @_builtins.property
    @pulumi.getter(name="networkSecurityGroupIds")
    def network_security_group_ids(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "network_security_group_ids")

    @_builtins.property
    @pulumi.getter(name="networkSecurityGroupsHreves")
    def network_security_groups_hreves(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "network_security_groups_hreves")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piInstanceName")
    def pi_instance_name(self) -> _builtins.str:
        return pulumi.get(self, "pi_instance_name")

    @_builtins.property
    @pulumi.getter(name="piNetworkName")
    def pi_network_name(self) -> _builtins.str:
        return pulumi.get(self, "pi_network_name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")


class AwaitableGetPiInstanceIpResult(GetPiInstanceIpResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPiInstanceIpResult(
            external_ip=self.external_ip,
            id=self.id,
            ip=self.ip,
            ipoctet=self.ipoctet,
            mac_address=self.mac_address,
            macaddress=self.macaddress,
            network_id=self.network_id,
            network_interface_id=self.network_interface_id,
            network_security_group_ids=self.network_security_group_ids,
            network_security_groups_hreves=self.network_security_groups_hreves,
            pi_cloud_instance_id=self.pi_cloud_instance_id,
            pi_instance_name=self.pi_instance_name,
            pi_network_name=self.pi_network_name,
            type=self.type)


def get_pi_instance_ip(id: Optional[_builtins.str] = None,
                       pi_cloud_instance_id: Optional[_builtins.str] = None,
                       pi_instance_name: Optional[_builtins.str] = None,
                       pi_network_name: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPiInstanceIpResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piInstanceName'] = pi_instance_name
    __args__['piNetworkName'] = pi_network_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getPiInstanceIp:getPiInstanceIp', __args__, opts=opts, typ=GetPiInstanceIpResult, package_ref=_utilities.get_package()).value

    return AwaitableGetPiInstanceIpResult(
        external_ip=pulumi.get(__ret__, 'external_ip'),
        id=pulumi.get(__ret__, 'id'),
        ip=pulumi.get(__ret__, 'ip'),
        ipoctet=pulumi.get(__ret__, 'ipoctet'),
        mac_address=pulumi.get(__ret__, 'mac_address'),
        macaddress=pulumi.get(__ret__, 'macaddress'),
        network_id=pulumi.get(__ret__, 'network_id'),
        network_interface_id=pulumi.get(__ret__, 'network_interface_id'),
        network_security_group_ids=pulumi.get(__ret__, 'network_security_group_ids'),
        network_security_groups_hreves=pulumi.get(__ret__, 'network_security_groups_hreves'),
        pi_cloud_instance_id=pulumi.get(__ret__, 'pi_cloud_instance_id'),
        pi_instance_name=pulumi.get(__ret__, 'pi_instance_name'),
        pi_network_name=pulumi.get(__ret__, 'pi_network_name'),
        type=pulumi.get(__ret__, 'type'))
def get_pi_instance_ip_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                              pi_instance_name: Optional[pulumi.Input[_builtins.str]] = None,
                              pi_network_name: Optional[pulumi.Input[_builtins.str]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPiInstanceIpResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['piCloudInstanceId'] = pi_cloud_instance_id
    __args__['piInstanceName'] = pi_instance_name
    __args__['piNetworkName'] = pi_network_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getPiInstanceIp:getPiInstanceIp', __args__, opts=opts, typ=GetPiInstanceIpResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetPiInstanceIpResult(
        external_ip=pulumi.get(__response__, 'external_ip'),
        id=pulumi.get(__response__, 'id'),
        ip=pulumi.get(__response__, 'ip'),
        ipoctet=pulumi.get(__response__, 'ipoctet'),
        mac_address=pulumi.get(__response__, 'mac_address'),
        macaddress=pulumi.get(__response__, 'macaddress'),
        network_id=pulumi.get(__response__, 'network_id'),
        network_interface_id=pulumi.get(__response__, 'network_interface_id'),
        network_security_group_ids=pulumi.get(__response__, 'network_security_group_ids'),
        network_security_groups_hreves=pulumi.get(__response__, 'network_security_groups_hreves'),
        pi_cloud_instance_id=pulumi.get(__response__, 'pi_cloud_instance_id'),
        pi_instance_name=pulumi.get(__response__, 'pi_instance_name'),
        pi_network_name=pulumi.get(__response__, 'pi_network_name'),
        type=pulumi.get(__response__, 'type')))
