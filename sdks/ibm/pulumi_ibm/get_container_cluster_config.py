# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetContainerClusterConfigResult',
    'AwaitableGetContainerClusterConfigResult',
    'get_container_cluster_config',
    'get_container_cluster_config_output',
]

@pulumi.output_type
class GetContainerClusterConfigResult:
    """
    A collection of values returned by getContainerClusterConfig.
    """
    def __init__(__self__, account_guid=None, admin=None, admin_certificate=None, admin_key=None, ca_certificate=None, calico_config_file_path=None, cluster_name_id=None, config_dir=None, config_file_path=None, download=None, endpoint_type=None, host=None, id=None, network=None, org_guid=None, region=None, resource_group_id=None, space_guid=None, token=None):
        if account_guid and not isinstance(account_guid, str):
            raise TypeError("Expected argument 'account_guid' to be a str")
        pulumi.set(__self__, "account_guid", account_guid)
        if admin and not isinstance(admin, bool):
            raise TypeError("Expected argument 'admin' to be a bool")
        pulumi.set(__self__, "admin", admin)
        if admin_certificate and not isinstance(admin_certificate, str):
            raise TypeError("Expected argument 'admin_certificate' to be a str")
        pulumi.set(__self__, "admin_certificate", admin_certificate)
        if admin_key and not isinstance(admin_key, str):
            raise TypeError("Expected argument 'admin_key' to be a str")
        pulumi.set(__self__, "admin_key", admin_key)
        if ca_certificate and not isinstance(ca_certificate, str):
            raise TypeError("Expected argument 'ca_certificate' to be a str")
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        if calico_config_file_path and not isinstance(calico_config_file_path, str):
            raise TypeError("Expected argument 'calico_config_file_path' to be a str")
        pulumi.set(__self__, "calico_config_file_path", calico_config_file_path)
        if cluster_name_id and not isinstance(cluster_name_id, str):
            raise TypeError("Expected argument 'cluster_name_id' to be a str")
        pulumi.set(__self__, "cluster_name_id", cluster_name_id)
        if config_dir and not isinstance(config_dir, str):
            raise TypeError("Expected argument 'config_dir' to be a str")
        pulumi.set(__self__, "config_dir", config_dir)
        if config_file_path and not isinstance(config_file_path, str):
            raise TypeError("Expected argument 'config_file_path' to be a str")
        pulumi.set(__self__, "config_file_path", config_file_path)
        if download and not isinstance(download, bool):
            raise TypeError("Expected argument 'download' to be a bool")
        pulumi.set(__self__, "download", download)
        if endpoint_type and not isinstance(endpoint_type, str):
            raise TypeError("Expected argument 'endpoint_type' to be a str")
        pulumi.set(__self__, "endpoint_type", endpoint_type)
        if host and not isinstance(host, str):
            raise TypeError("Expected argument 'host' to be a str")
        pulumi.set(__self__, "host", host)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if network and not isinstance(network, bool):
            raise TypeError("Expected argument 'network' to be a bool")
        pulumi.set(__self__, "network", network)
        if org_guid and not isinstance(org_guid, str):
            raise TypeError("Expected argument 'org_guid' to be a str")
        pulumi.set(__self__, "org_guid", org_guid)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_group_id and not isinstance(resource_group_id, str):
            raise TypeError("Expected argument 'resource_group_id' to be a str")
        pulumi.set(__self__, "resource_group_id", resource_group_id)
        if space_guid and not isinstance(space_guid, str):
            raise TypeError("Expected argument 'space_guid' to be a str")
        pulumi.set(__self__, "space_guid", space_guid)
        if token and not isinstance(token, str):
            raise TypeError("Expected argument 'token' to be a str")
        pulumi.set(__self__, "token", token)

    @_builtins.property
    @pulumi.getter(name="accountGuid")
    @_utilities.deprecated("""Deprecated""")
    def account_guid(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "account_guid")

    @_builtins.property
    @pulumi.getter
    def admin(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "admin")

    @_builtins.property
    @pulumi.getter(name="adminCertificate")
    def admin_certificate(self) -> _builtins.str:
        return pulumi.get(self, "admin_certificate")

    @_builtins.property
    @pulumi.getter(name="adminKey")
    def admin_key(self) -> _builtins.str:
        return pulumi.get(self, "admin_key")

    @_builtins.property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> _builtins.str:
        return pulumi.get(self, "ca_certificate")

    @_builtins.property
    @pulumi.getter(name="calicoConfigFilePath")
    def calico_config_file_path(self) -> _builtins.str:
        return pulumi.get(self, "calico_config_file_path")

    @_builtins.property
    @pulumi.getter(name="clusterNameId")
    def cluster_name_id(self) -> _builtins.str:
        return pulumi.get(self, "cluster_name_id")

    @_builtins.property
    @pulumi.getter(name="configDir")
    def config_dir(self) -> _builtins.str:
        return pulumi.get(self, "config_dir")

    @_builtins.property
    @pulumi.getter(name="configFilePath")
    def config_file_path(self) -> _builtins.str:
        return pulumi.get(self, "config_file_path")

    @_builtins.property
    @pulumi.getter
    def download(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "download")

    @_builtins.property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "endpoint_type")

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def network(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "network")

    @_builtins.property
    @pulumi.getter(name="orgGuid")
    @_utilities.deprecated("""Deprecated""")
    def org_guid(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "org_guid")

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def region(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter(name="spaceGuid")
    @_utilities.deprecated("""Deprecated""")
    def space_guid(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "space_guid")

    @_builtins.property
    @pulumi.getter
    def token(self) -> _builtins.str:
        return pulumi.get(self, "token")


class AwaitableGetContainerClusterConfigResult(GetContainerClusterConfigResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetContainerClusterConfigResult(
            account_guid=self.account_guid,
            admin=self.admin,
            admin_certificate=self.admin_certificate,
            admin_key=self.admin_key,
            ca_certificate=self.ca_certificate,
            calico_config_file_path=self.calico_config_file_path,
            cluster_name_id=self.cluster_name_id,
            config_dir=self.config_dir,
            config_file_path=self.config_file_path,
            download=self.download,
            endpoint_type=self.endpoint_type,
            host=self.host,
            id=self.id,
            network=self.network,
            org_guid=self.org_guid,
            region=self.region,
            resource_group_id=self.resource_group_id,
            space_guid=self.space_guid,
            token=self.token)


def get_container_cluster_config(account_guid: Optional[_builtins.str] = None,
                                 admin: Optional[_builtins.bool] = None,
                                 cluster_name_id: Optional[_builtins.str] = None,
                                 config_dir: Optional[_builtins.str] = None,
                                 download: Optional[_builtins.bool] = None,
                                 endpoint_type: Optional[_builtins.str] = None,
                                 id: Optional[_builtins.str] = None,
                                 network: Optional[_builtins.bool] = None,
                                 org_guid: Optional[_builtins.str] = None,
                                 region: Optional[_builtins.str] = None,
                                 resource_group_id: Optional[_builtins.str] = None,
                                 space_guid: Optional[_builtins.str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetContainerClusterConfigResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountGuid'] = account_guid
    __args__['admin'] = admin
    __args__['clusterNameId'] = cluster_name_id
    __args__['configDir'] = config_dir
    __args__['download'] = download
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['network'] = network
    __args__['orgGuid'] = org_guid
    __args__['region'] = region
    __args__['resourceGroupId'] = resource_group_id
    __args__['spaceGuid'] = space_guid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getContainerClusterConfig:getContainerClusterConfig', __args__, opts=opts, typ=GetContainerClusterConfigResult, package_ref=_utilities.get_package()).value

    return AwaitableGetContainerClusterConfigResult(
        account_guid=pulumi.get(__ret__, 'account_guid'),
        admin=pulumi.get(__ret__, 'admin'),
        admin_certificate=pulumi.get(__ret__, 'admin_certificate'),
        admin_key=pulumi.get(__ret__, 'admin_key'),
        ca_certificate=pulumi.get(__ret__, 'ca_certificate'),
        calico_config_file_path=pulumi.get(__ret__, 'calico_config_file_path'),
        cluster_name_id=pulumi.get(__ret__, 'cluster_name_id'),
        config_dir=pulumi.get(__ret__, 'config_dir'),
        config_file_path=pulumi.get(__ret__, 'config_file_path'),
        download=pulumi.get(__ret__, 'download'),
        endpoint_type=pulumi.get(__ret__, 'endpoint_type'),
        host=pulumi.get(__ret__, 'host'),
        id=pulumi.get(__ret__, 'id'),
        network=pulumi.get(__ret__, 'network'),
        org_guid=pulumi.get(__ret__, 'org_guid'),
        region=pulumi.get(__ret__, 'region'),
        resource_group_id=pulumi.get(__ret__, 'resource_group_id'),
        space_guid=pulumi.get(__ret__, 'space_guid'),
        token=pulumi.get(__ret__, 'token'))
def get_container_cluster_config_output(account_guid: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        admin: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                        cluster_name_id: Optional[pulumi.Input[_builtins.str]] = None,
                                        config_dir: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        download: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                        endpoint_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        network: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                        org_guid: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        resource_group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        space_guid: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetContainerClusterConfigResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountGuid'] = account_guid
    __args__['admin'] = admin
    __args__['clusterNameId'] = cluster_name_id
    __args__['configDir'] = config_dir
    __args__['download'] = download
    __args__['endpointType'] = endpoint_type
    __args__['id'] = id
    __args__['network'] = network
    __args__['orgGuid'] = org_guid
    __args__['region'] = region
    __args__['resourceGroupId'] = resource_group_id
    __args__['spaceGuid'] = space_guid
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getContainerClusterConfig:getContainerClusterConfig', __args__, opts=opts, typ=GetContainerClusterConfigResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetContainerClusterConfigResult(
        account_guid=pulumi.get(__response__, 'account_guid'),
        admin=pulumi.get(__response__, 'admin'),
        admin_certificate=pulumi.get(__response__, 'admin_certificate'),
        admin_key=pulumi.get(__response__, 'admin_key'),
        ca_certificate=pulumi.get(__response__, 'ca_certificate'),
        calico_config_file_path=pulumi.get(__response__, 'calico_config_file_path'),
        cluster_name_id=pulumi.get(__response__, 'cluster_name_id'),
        config_dir=pulumi.get(__response__, 'config_dir'),
        config_file_path=pulumi.get(__response__, 'config_file_path'),
        download=pulumi.get(__response__, 'download'),
        endpoint_type=pulumi.get(__response__, 'endpoint_type'),
        host=pulumi.get(__response__, 'host'),
        id=pulumi.get(__response__, 'id'),
        network=pulumi.get(__response__, 'network'),
        org_guid=pulumi.get(__response__, 'org_guid'),
        region=pulumi.get(__response__, 'region'),
        resource_group_id=pulumi.get(__response__, 'resource_group_id'),
        space_guid=pulumi.get(__response__, 'space_guid'),
        token=pulumi.get(__response__, 'token')))
