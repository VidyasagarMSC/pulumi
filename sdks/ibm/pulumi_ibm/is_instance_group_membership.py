# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsInstanceGroupMembershipArgs', 'IsInstanceGroupMembership']

@pulumi.input_type
class IsInstanceGroupMembershipArgs:
    def __init__(__self__, *,
                 instance_group: pulumi.Input[_builtins.str],
                 instance_group_membership: pulumi.Input[_builtins.str],
                 action_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_instance_group_membership_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a IsInstanceGroupMembership resource.
        :param pulumi.Input[_builtins.str] instance_group: The instance group identifier.
        :param pulumi.Input[_builtins.str] instance_group_membership: The unique identifier for this instance group membership.
        :param pulumi.Input[_builtins.bool] action_delete: The delete flag for this instance group membership. Must be set to true to delete instance group membership.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this instance group membership. Names must be unique within the instance group.
        """
        pulumi.set(__self__, "instance_group", instance_group)
        pulumi.set(__self__, "instance_group_membership", instance_group_membership)
        if action_delete is not None:
            pulumi.set(__self__, "action_delete", action_delete)
        if is_instance_group_membership_id is not None:
            pulumi.set(__self__, "is_instance_group_membership_id", is_instance_group_membership_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="instanceGroup")
    def instance_group(self) -> pulumi.Input[_builtins.str]:
        """
        The instance group identifier.
        """
        return pulumi.get(self, "instance_group")

    @instance_group.setter
    def instance_group(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_group", value)

    @_builtins.property
    @pulumi.getter(name="instanceGroupMembership")
    def instance_group_membership(self) -> pulumi.Input[_builtins.str]:
        """
        The unique identifier for this instance group membership.
        """
        return pulumi.get(self, "instance_group_membership")

    @instance_group_membership.setter
    def instance_group_membership(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_group_membership", value)

    @_builtins.property
    @pulumi.getter(name="actionDelete")
    def action_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The delete flag for this instance group membership. Must be set to true to delete instance group membership.
        """
        return pulumi.get(self, "action_delete")

    @action_delete.setter
    def action_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "action_delete", value)

    @_builtins.property
    @pulumi.getter(name="isInstanceGroupMembershipId")
    def is_instance_group_membership_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_instance_group_membership_id")

    @is_instance_group_membership_id.setter
    def is_instance_group_membership_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_instance_group_membership_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user-defined name for this instance group membership. Names must be unique within the instance group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _IsInstanceGroupMembershipState:
    def __init__(__self__, *,
                 action_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 delete_instance_on_membership_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 instance_group: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_group_membership: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_templates: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceGroupMembershipInstanceTemplateArgs']]]] = None,
                 instances: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceGroupMembershipInstanceArgs']]]] = None,
                 is_instance_group_membership_id: Optional[pulumi.Input[_builtins.str]] = None,
                 load_balancer_pool_member: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IsInstanceGroupMembership resources.
        :param pulumi.Input[_builtins.bool] action_delete: The delete flag for this instance group membership. Must be set to true to delete instance group membership.
        :param pulumi.Input[_builtins.bool] delete_instance_on_membership_delete: If set to true, when deleting the membership the instance will also be deleted.
        :param pulumi.Input[_builtins.str] instance_group: The instance group identifier.
        :param pulumi.Input[_builtins.str] instance_group_membership: The unique identifier for this instance group membership.
        :param pulumi.Input[_builtins.str] load_balancer_pool_member: The unique identifier for this load balancer pool member.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this instance group membership. Names must be unique within the instance group.
        :param pulumi.Input[_builtins.str] status: The status of the instance group membership- `deleting`: Membership is deleting dependent resources- `failed`:
               Membership was unable to maintain dependent resources- `healthy`: Membership is active and serving in the group-
               `pending`: Membership is waiting for dependent resources- `unhealthy`: Membership has unhealthy dependent resources.
        """
        if action_delete is not None:
            pulumi.set(__self__, "action_delete", action_delete)
        if delete_instance_on_membership_delete is not None:
            pulumi.set(__self__, "delete_instance_on_membership_delete", delete_instance_on_membership_delete)
        if instance_group is not None:
            pulumi.set(__self__, "instance_group", instance_group)
        if instance_group_membership is not None:
            pulumi.set(__self__, "instance_group_membership", instance_group_membership)
        if instance_templates is not None:
            pulumi.set(__self__, "instance_templates", instance_templates)
        if instances is not None:
            pulumi.set(__self__, "instances", instances)
        if is_instance_group_membership_id is not None:
            pulumi.set(__self__, "is_instance_group_membership_id", is_instance_group_membership_id)
        if load_balancer_pool_member is not None:
            pulumi.set(__self__, "load_balancer_pool_member", load_balancer_pool_member)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="actionDelete")
    def action_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The delete flag for this instance group membership. Must be set to true to delete instance group membership.
        """
        return pulumi.get(self, "action_delete")

    @action_delete.setter
    def action_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "action_delete", value)

    @_builtins.property
    @pulumi.getter(name="deleteInstanceOnMembershipDelete")
    def delete_instance_on_membership_delete(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, when deleting the membership the instance will also be deleted.
        """
        return pulumi.get(self, "delete_instance_on_membership_delete")

    @delete_instance_on_membership_delete.setter
    def delete_instance_on_membership_delete(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_instance_on_membership_delete", value)

    @_builtins.property
    @pulumi.getter(name="instanceGroup")
    def instance_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The instance group identifier.
        """
        return pulumi.get(self, "instance_group")

    @instance_group.setter
    def instance_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_group", value)

    @_builtins.property
    @pulumi.getter(name="instanceGroupMembership")
    def instance_group_membership(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier for this instance group membership.
        """
        return pulumi.get(self, "instance_group_membership")

    @instance_group_membership.setter
    def instance_group_membership(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_group_membership", value)

    @_builtins.property
    @pulumi.getter(name="instanceTemplates")
    def instance_templates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceGroupMembershipInstanceTemplateArgs']]]]:
        return pulumi.get(self, "instance_templates")

    @instance_templates.setter
    def instance_templates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceGroupMembershipInstanceTemplateArgs']]]]):
        pulumi.set(self, "instance_templates", value)

    @_builtins.property
    @pulumi.getter
    def instances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceGroupMembershipInstanceArgs']]]]:
        return pulumi.get(self, "instances")

    @instances.setter
    def instances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsInstanceGroupMembershipInstanceArgs']]]]):
        pulumi.set(self, "instances", value)

    @_builtins.property
    @pulumi.getter(name="isInstanceGroupMembershipId")
    def is_instance_group_membership_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_instance_group_membership_id")

    @is_instance_group_membership_id.setter
    def is_instance_group_membership_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_instance_group_membership_id", value)

    @_builtins.property
    @pulumi.getter(name="loadBalancerPoolMember")
    def load_balancer_pool_member(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier for this load balancer pool member.
        """
        return pulumi.get(self, "load_balancer_pool_member")

    @load_balancer_pool_member.setter
    def load_balancer_pool_member(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "load_balancer_pool_member", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user-defined name for this instance group membership. Names must be unique within the instance group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the instance group membership- `deleting`: Membership is deleting dependent resources- `failed`:
        Membership was unable to maintain dependent resources- `healthy`: Membership is active and serving in the group-
        `pending`: Membership is waiting for dependent resources- `unhealthy`: Membership has unhealthy dependent resources.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


@pulumi.type_token("ibm:index/isInstanceGroupMembership:IsInstanceGroupMembership")
class IsInstanceGroupMembership(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 instance_group: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_group_membership: Optional[pulumi.Input[_builtins.str]] = None,
                 is_instance_group_membership_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a IsInstanceGroupMembership resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] action_delete: The delete flag for this instance group membership. Must be set to true to delete instance group membership.
        :param pulumi.Input[_builtins.str] instance_group: The instance group identifier.
        :param pulumi.Input[_builtins.str] instance_group_membership: The unique identifier for this instance group membership.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this instance group membership. Names must be unique within the instance group.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsInstanceGroupMembershipArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsInstanceGroupMembership resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsInstanceGroupMembershipArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsInstanceGroupMembershipArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action_delete: Optional[pulumi.Input[_builtins.bool]] = None,
                 instance_group: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_group_membership: Optional[pulumi.Input[_builtins.str]] = None,
                 is_instance_group_membership_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsInstanceGroupMembershipArgs.__new__(IsInstanceGroupMembershipArgs)

            __props__.__dict__["action_delete"] = action_delete
            if instance_group is None and not opts.urn:
                raise TypeError("Missing required property 'instance_group'")
            __props__.__dict__["instance_group"] = instance_group
            if instance_group_membership is None and not opts.urn:
                raise TypeError("Missing required property 'instance_group_membership'")
            __props__.__dict__["instance_group_membership"] = instance_group_membership
            __props__.__dict__["is_instance_group_membership_id"] = is_instance_group_membership_id
            __props__.__dict__["name"] = name
            __props__.__dict__["delete_instance_on_membership_delete"] = None
            __props__.__dict__["instance_templates"] = None
            __props__.__dict__["instances"] = None
            __props__.__dict__["load_balancer_pool_member"] = None
            __props__.__dict__["status"] = None
        super(IsInstanceGroupMembership, __self__).__init__(
            'ibm:index/isInstanceGroupMembership:IsInstanceGroupMembership',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action_delete: Optional[pulumi.Input[_builtins.bool]] = None,
            delete_instance_on_membership_delete: Optional[pulumi.Input[_builtins.bool]] = None,
            instance_group: Optional[pulumi.Input[_builtins.str]] = None,
            instance_group_membership: Optional[pulumi.Input[_builtins.str]] = None,
            instance_templates: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceGroupMembershipInstanceTemplateArgs', 'IsInstanceGroupMembershipInstanceTemplateArgsDict']]]]] = None,
            instances: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsInstanceGroupMembershipInstanceArgs', 'IsInstanceGroupMembershipInstanceArgsDict']]]]] = None,
            is_instance_group_membership_id: Optional[pulumi.Input[_builtins.str]] = None,
            load_balancer_pool_member: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None) -> 'IsInstanceGroupMembership':
        """
        Get an existing IsInstanceGroupMembership resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] action_delete: The delete flag for this instance group membership. Must be set to true to delete instance group membership.
        :param pulumi.Input[_builtins.bool] delete_instance_on_membership_delete: If set to true, when deleting the membership the instance will also be deleted.
        :param pulumi.Input[_builtins.str] instance_group: The instance group identifier.
        :param pulumi.Input[_builtins.str] instance_group_membership: The unique identifier for this instance group membership.
        :param pulumi.Input[_builtins.str] load_balancer_pool_member: The unique identifier for this load balancer pool member.
        :param pulumi.Input[_builtins.str] name: The user-defined name for this instance group membership. Names must be unique within the instance group.
        :param pulumi.Input[_builtins.str] status: The status of the instance group membership- `deleting`: Membership is deleting dependent resources- `failed`:
               Membership was unable to maintain dependent resources- `healthy`: Membership is active and serving in the group-
               `pending`: Membership is waiting for dependent resources- `unhealthy`: Membership has unhealthy dependent resources.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsInstanceGroupMembershipState.__new__(_IsInstanceGroupMembershipState)

        __props__.__dict__["action_delete"] = action_delete
        __props__.__dict__["delete_instance_on_membership_delete"] = delete_instance_on_membership_delete
        __props__.__dict__["instance_group"] = instance_group
        __props__.__dict__["instance_group_membership"] = instance_group_membership
        __props__.__dict__["instance_templates"] = instance_templates
        __props__.__dict__["instances"] = instances
        __props__.__dict__["is_instance_group_membership_id"] = is_instance_group_membership_id
        __props__.__dict__["load_balancer_pool_member"] = load_balancer_pool_member
        __props__.__dict__["name"] = name
        __props__.__dict__["status"] = status
        return IsInstanceGroupMembership(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="actionDelete")
    def action_delete(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        The delete flag for this instance group membership. Must be set to true to delete instance group membership.
        """
        return pulumi.get(self, "action_delete")

    @_builtins.property
    @pulumi.getter(name="deleteInstanceOnMembershipDelete")
    def delete_instance_on_membership_delete(self) -> pulumi.Output[_builtins.bool]:
        """
        If set to true, when deleting the membership the instance will also be deleted.
        """
        return pulumi.get(self, "delete_instance_on_membership_delete")

    @_builtins.property
    @pulumi.getter(name="instanceGroup")
    def instance_group(self) -> pulumi.Output[_builtins.str]:
        """
        The instance group identifier.
        """
        return pulumi.get(self, "instance_group")

    @_builtins.property
    @pulumi.getter(name="instanceGroupMembership")
    def instance_group_membership(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier for this instance group membership.
        """
        return pulumi.get(self, "instance_group_membership")

    @_builtins.property
    @pulumi.getter(name="instanceTemplates")
    def instance_templates(self) -> pulumi.Output[Sequence['outputs.IsInstanceGroupMembershipInstanceTemplate']]:
        return pulumi.get(self, "instance_templates")

    @_builtins.property
    @pulumi.getter
    def instances(self) -> pulumi.Output[Sequence['outputs.IsInstanceGroupMembershipInstance']]:
        return pulumi.get(self, "instances")

    @_builtins.property
    @pulumi.getter(name="isInstanceGroupMembershipId")
    def is_instance_group_membership_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_instance_group_membership_id")

    @_builtins.property
    @pulumi.getter(name="loadBalancerPoolMember")
    def load_balancer_pool_member(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier for this load balancer pool member.
        """
        return pulumi.get(self, "load_balancer_pool_member")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The user-defined name for this instance group membership. Names must be unique within the instance group.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the instance group membership- `deleting`: Membership is deleting dependent resources- `failed`:
        Membership was unable to maintain dependent resources- `healthy`: Membership is active and serving in the group-
        `pending`: Membership is waiting for dependent resources- `unhealthy`: Membership has unhealthy dependent resources.
        """
        return pulumi.get(self, "status")

