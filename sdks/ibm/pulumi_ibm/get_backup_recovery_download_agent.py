# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetBackupRecoveryDownloadAgentResult',
    'AwaitableGetBackupRecoveryDownloadAgentResult',
    'get_backup_recovery_download_agent',
    'get_backup_recovery_download_agent_output',
]

@pulumi.output_type
class GetBackupRecoveryDownloadAgentResult:
    """
    A collection of values returned by getBackupRecoveryDownloadAgent.
    """
    def __init__(__self__, file_path=None, id=None, linux_params=None, platform=None, x_ibm_tenant_id=None):
        if file_path and not isinstance(file_path, str):
            raise TypeError("Expected argument 'file_path' to be a str")
        pulumi.set(__self__, "file_path", file_path)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if linux_params and not isinstance(linux_params, dict):
            raise TypeError("Expected argument 'linux_params' to be a dict")
        pulumi.set(__self__, "linux_params", linux_params)
        if platform and not isinstance(platform, str):
            raise TypeError("Expected argument 'platform' to be a str")
        pulumi.set(__self__, "platform", platform)
        if x_ibm_tenant_id and not isinstance(x_ibm_tenant_id, str):
            raise TypeError("Expected argument 'x_ibm_tenant_id' to be a str")
        pulumi.set(__self__, "x_ibm_tenant_id", x_ibm_tenant_id)

    @_builtins.property
    @pulumi.getter(name="filePath")
    def file_path(self) -> _builtins.str:
        return pulumi.get(self, "file_path")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="linuxParams")
    def linux_params(self) -> Optional['outputs.GetBackupRecoveryDownloadAgentLinuxParamsResult']:
        return pulumi.get(self, "linux_params")

    @_builtins.property
    @pulumi.getter
    def platform(self) -> _builtins.str:
        return pulumi.get(self, "platform")

    @_builtins.property
    @pulumi.getter(name="xIbmTenantId")
    def x_ibm_tenant_id(self) -> _builtins.str:
        return pulumi.get(self, "x_ibm_tenant_id")


class AwaitableGetBackupRecoveryDownloadAgentResult(GetBackupRecoveryDownloadAgentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupRecoveryDownloadAgentResult(
            file_path=self.file_path,
            id=self.id,
            linux_params=self.linux_params,
            platform=self.platform,
            x_ibm_tenant_id=self.x_ibm_tenant_id)


def get_backup_recovery_download_agent(file_path: Optional[_builtins.str] = None,
                                       id: Optional[_builtins.str] = None,
                                       linux_params: Optional[Union['GetBackupRecoveryDownloadAgentLinuxParamsArgs', 'GetBackupRecoveryDownloadAgentLinuxParamsArgsDict']] = None,
                                       platform: Optional[_builtins.str] = None,
                                       x_ibm_tenant_id: Optional[_builtins.str] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupRecoveryDownloadAgentResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filePath'] = file_path
    __args__['id'] = id
    __args__['linuxParams'] = linux_params
    __args__['platform'] = platform
    __args__['xIbmTenantId'] = x_ibm_tenant_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getBackupRecoveryDownloadAgent:getBackupRecoveryDownloadAgent', __args__, opts=opts, typ=GetBackupRecoveryDownloadAgentResult, package_ref=_utilities.get_package()).value

    return AwaitableGetBackupRecoveryDownloadAgentResult(
        file_path=pulumi.get(__ret__, 'file_path'),
        id=pulumi.get(__ret__, 'id'),
        linux_params=pulumi.get(__ret__, 'linux_params'),
        platform=pulumi.get(__ret__, 'platform'),
        x_ibm_tenant_id=pulumi.get(__ret__, 'x_ibm_tenant_id'))
def get_backup_recovery_download_agent_output(file_path: Optional[pulumi.Input[_builtins.str]] = None,
                                              id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                              linux_params: Optional[pulumi.Input[Optional[Union['GetBackupRecoveryDownloadAgentLinuxParamsArgs', 'GetBackupRecoveryDownloadAgentLinuxParamsArgsDict']]]] = None,
                                              platform: Optional[pulumi.Input[_builtins.str]] = None,
                                              x_ibm_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBackupRecoveryDownloadAgentResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filePath'] = file_path
    __args__['id'] = id
    __args__['linuxParams'] = linux_params
    __args__['platform'] = platform
    __args__['xIbmTenantId'] = x_ibm_tenant_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getBackupRecoveryDownloadAgent:getBackupRecoveryDownloadAgent', __args__, opts=opts, typ=GetBackupRecoveryDownloadAgentResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetBackupRecoveryDownloadAgentResult(
        file_path=pulumi.get(__response__, 'file_path'),
        id=pulumi.get(__response__, 'id'),
        linux_params=pulumi.get(__response__, 'linux_params'),
        platform=pulumi.get(__response__, 'platform'),
        x_ibm_tenant_id=pulumi.get(__response__, 'x_ibm_tenant_id')))
