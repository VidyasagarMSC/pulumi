# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CisLogpushJobArgs', 'CisLogpushJob']

@pulumi.input_type
class CisLogpushJobArgs:
    def __init__(__self__, *,
                 cis_id: pulumi.Input[_builtins.str],
                 dataset: pulumi.Input[_builtins.str],
                 domain_id: pulumi.Input[_builtins.str],
                 cis_logpush_job_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cos: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_conf: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 frequency: Optional[pulumi.Input[_builtins.str]] = None,
                 ibmcl: Optional[pulumi.Input['CisLogpushJobIbmclArgs']] = None,
                 logdna: Optional[pulumi.Input[_builtins.str]] = None,
                 logpull_options: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 ownership_challenge: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CisLogpushJob resource.
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] dataset: Dataset to be pulled
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.str] cos: Information to identify the COS bucket where the data will be pushed.
        :param pulumi.Input[_builtins.str] destination_conf: Uniquely identifies a resource (such as an s3 bucket) where data will be pushed.
        :param pulumi.Input[_builtins.bool] enabled: Whether the logpush job enabled or not
        :param pulumi.Input[_builtins.str] frequency: The frequency at which CIS sends batches of logs to your destination
        :param pulumi.Input['CisLogpushJobIbmclArgs'] ibmcl: Information to identify the IBM Cloud Log instance where the data will be pushed.
        :param pulumi.Input[_builtins.str] logdna: Information to identify the LogDNA instance the data will be pushed.
        :param pulumi.Input[_builtins.str] logpull_options: Configuration string
        :param pulumi.Input[_builtins.str] name: Logpush Job Name
        :param pulumi.Input[_builtins.str] ownership_challenge: Ownership challenge token to prove destination ownership.
        """
        pulumi.set(__self__, "cis_id", cis_id)
        pulumi.set(__self__, "dataset", dataset)
        pulumi.set(__self__, "domain_id", domain_id)
        if cis_logpush_job_id is not None:
            pulumi.set(__self__, "cis_logpush_job_id", cis_logpush_job_id)
        if cos is not None:
            pulumi.set(__self__, "cos", cos)
        if destination_conf is not None:
            pulumi.set(__self__, "destination_conf", destination_conf)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if frequency is not None:
            pulumi.set(__self__, "frequency", frequency)
        if ibmcl is not None:
            pulumi.set(__self__, "ibmcl", ibmcl)
        if logdna is not None:
            pulumi.set(__self__, "logdna", logdna)
        if logpull_options is not None:
            pulumi.set(__self__, "logpull_options", logpull_options)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ownership_challenge is not None:
            pulumi.set(__self__, "ownership_challenge", ownership_challenge)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Input[_builtins.str]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter
    def dataset(self) -> pulumi.Input[_builtins.str]:
        """
        Dataset to be pulled
        """
        return pulumi.get(self, "dataset")

    @dataset.setter
    def dataset(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "dataset", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Input[_builtins.str]:
        """
        Associated CIS domain
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter(name="cisLogpushJobId")
    def cis_logpush_job_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_logpush_job_id")

    @cis_logpush_job_id.setter
    def cis_logpush_job_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_logpush_job_id", value)

    @_builtins.property
    @pulumi.getter
    def cos(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Information to identify the COS bucket where the data will be pushed.
        """
        return pulumi.get(self, "cos")

    @cos.setter
    def cos(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cos", value)

    @_builtins.property
    @pulumi.getter(name="destinationConf")
    def destination_conf(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Uniquely identifies a resource (such as an s3 bucket) where data will be pushed.
        """
        return pulumi.get(self, "destination_conf")

    @destination_conf.setter
    def destination_conf(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_conf", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the logpush job enabled or not
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter
    def frequency(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The frequency at which CIS sends batches of logs to your destination
        """
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "frequency", value)

    @_builtins.property
    @pulumi.getter
    def ibmcl(self) -> Optional[pulumi.Input['CisLogpushJobIbmclArgs']]:
        """
        Information to identify the IBM Cloud Log instance where the data will be pushed.
        """
        return pulumi.get(self, "ibmcl")

    @ibmcl.setter
    def ibmcl(self, value: Optional[pulumi.Input['CisLogpushJobIbmclArgs']]):
        pulumi.set(self, "ibmcl", value)

    @_builtins.property
    @pulumi.getter
    def logdna(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Information to identify the LogDNA instance the data will be pushed.
        """
        return pulumi.get(self, "logdna")

    @logdna.setter
    def logdna(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logdna", value)

    @_builtins.property
    @pulumi.getter(name="logpullOptions")
    def logpull_options(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configuration string
        """
        return pulumi.get(self, "logpull_options")

    @logpull_options.setter
    def logpull_options(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logpull_options", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Logpush Job Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="ownershipChallenge")
    def ownership_challenge(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Ownership challenge token to prove destination ownership.
        """
        return pulumi.get(self, "ownership_challenge")

    @ownership_challenge.setter
    def ownership_challenge(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ownership_challenge", value)


@pulumi.input_type
class _CisLogpushJobState:
    def __init__(__self__, *,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_logpush_job_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cos: Optional[pulumi.Input[_builtins.str]] = None,
                 dataset: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_conf: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 error_message: Optional[pulumi.Input[_builtins.str]] = None,
                 frequency: Optional[pulumi.Input[_builtins.str]] = None,
                 ibmcl: Optional[pulumi.Input['CisLogpushJobIbmclArgs']] = None,
                 job_id: Optional[pulumi.Input[_builtins.float]] = None,
                 last_complete: Optional[pulumi.Input[_builtins.str]] = None,
                 last_error: Optional[pulumi.Input[_builtins.str]] = None,
                 logdna: Optional[pulumi.Input[_builtins.str]] = None,
                 logpull_options: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 ownership_challenge: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CisLogpushJob resources.
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] cos: Information to identify the COS bucket where the data will be pushed.
        :param pulumi.Input[_builtins.str] dataset: Dataset to be pulled
        :param pulumi.Input[_builtins.str] destination_conf: Uniquely identifies a resource (such as an s3 bucket) where data will be pushed.
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.bool] enabled: Whether the logpush job enabled or not
        :param pulumi.Input[_builtins.str] error_message: The last failure message.
        :param pulumi.Input[_builtins.str] frequency: The frequency at which CIS sends batches of logs to your destination
        :param pulumi.Input['CisLogpushJobIbmclArgs'] ibmcl: Information to identify the IBM Cloud Log instance where the data will be pushed.
        :param pulumi.Input[_builtins.float] job_id: Associated CIS domain
        :param pulumi.Input[_builtins.str] last_complete: Records the last time that logs have been successfully pushed.
        :param pulumi.Input[_builtins.str] last_error: Records the last time the job failed.
        :param pulumi.Input[_builtins.str] logdna: Information to identify the LogDNA instance the data will be pushed.
        :param pulumi.Input[_builtins.str] logpull_options: Configuration string
        :param pulumi.Input[_builtins.str] name: Logpush Job Name
        :param pulumi.Input[_builtins.str] ownership_challenge: Ownership challenge token to prove destination ownership.
        """
        if cis_id is not None:
            pulumi.set(__self__, "cis_id", cis_id)
        if cis_logpush_job_id is not None:
            pulumi.set(__self__, "cis_logpush_job_id", cis_logpush_job_id)
        if cos is not None:
            pulumi.set(__self__, "cos", cos)
        if dataset is not None:
            pulumi.set(__self__, "dataset", dataset)
        if destination_conf is not None:
            pulumi.set(__self__, "destination_conf", destination_conf)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if frequency is not None:
            pulumi.set(__self__, "frequency", frequency)
        if ibmcl is not None:
            pulumi.set(__self__, "ibmcl", ibmcl)
        if job_id is not None:
            pulumi.set(__self__, "job_id", job_id)
        if last_complete is not None:
            pulumi.set(__self__, "last_complete", last_complete)
        if last_error is not None:
            pulumi.set(__self__, "last_error", last_error)
        if logdna is not None:
            pulumi.set(__self__, "logdna", logdna)
        if logpull_options is not None:
            pulumi.set(__self__, "logpull_options", logpull_options)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ownership_challenge is not None:
            pulumi.set(__self__, "ownership_challenge", ownership_challenge)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @cis_id.setter
    def cis_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_id", value)

    @_builtins.property
    @pulumi.getter(name="cisLogpushJobId")
    def cis_logpush_job_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cis_logpush_job_id")

    @cis_logpush_job_id.setter
    def cis_logpush_job_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cis_logpush_job_id", value)

    @_builtins.property
    @pulumi.getter
    def cos(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Information to identify the COS bucket where the data will be pushed.
        """
        return pulumi.get(self, "cos")

    @cos.setter
    def cos(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cos", value)

    @_builtins.property
    @pulumi.getter
    def dataset(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Dataset to be pulled
        """
        return pulumi.get(self, "dataset")

    @dataset.setter
    def dataset(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dataset", value)

    @_builtins.property
    @pulumi.getter(name="destinationConf")
    def destination_conf(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Uniquely identifies a resource (such as an s3 bucket) where data will be pushed.
        """
        return pulumi.get(self, "destination_conf")

    @destination_conf.setter
    def destination_conf(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_conf", value)

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Associated CIS domain
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain_id", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the logpush job enabled or not
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The last failure message.
        """
        return pulumi.get(self, "error_message")

    @error_message.setter
    def error_message(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "error_message", value)

    @_builtins.property
    @pulumi.getter
    def frequency(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The frequency at which CIS sends batches of logs to your destination
        """
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "frequency", value)

    @_builtins.property
    @pulumi.getter
    def ibmcl(self) -> Optional[pulumi.Input['CisLogpushJobIbmclArgs']]:
        """
        Information to identify the IBM Cloud Log instance where the data will be pushed.
        """
        return pulumi.get(self, "ibmcl")

    @ibmcl.setter
    def ibmcl(self, value: Optional[pulumi.Input['CisLogpushJobIbmclArgs']]):
        pulumi.set(self, "ibmcl", value)

    @_builtins.property
    @pulumi.getter(name="jobId")
    def job_id(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Associated CIS domain
        """
        return pulumi.get(self, "job_id")

    @job_id.setter
    def job_id(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "job_id", value)

    @_builtins.property
    @pulumi.getter(name="lastComplete")
    def last_complete(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Records the last time that logs have been successfully pushed.
        """
        return pulumi.get(self, "last_complete")

    @last_complete.setter
    def last_complete(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_complete", value)

    @_builtins.property
    @pulumi.getter(name="lastError")
    def last_error(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Records the last time the job failed.
        """
        return pulumi.get(self, "last_error")

    @last_error.setter
    def last_error(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_error", value)

    @_builtins.property
    @pulumi.getter
    def logdna(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Information to identify the LogDNA instance the data will be pushed.
        """
        return pulumi.get(self, "logdna")

    @logdna.setter
    def logdna(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logdna", value)

    @_builtins.property
    @pulumi.getter(name="logpullOptions")
    def logpull_options(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configuration string
        """
        return pulumi.get(self, "logpull_options")

    @logpull_options.setter
    def logpull_options(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "logpull_options", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Logpush Job Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="ownershipChallenge")
    def ownership_challenge(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Ownership challenge token to prove destination ownership.
        """
        return pulumi.get(self, "ownership_challenge")

    @ownership_challenge.setter
    def ownership_challenge(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ownership_challenge", value)


@pulumi.type_token("ibm:index/cisLogpushJob:CisLogpushJob")
class CisLogpushJob(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_logpush_job_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cos: Optional[pulumi.Input[_builtins.str]] = None,
                 dataset: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_conf: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 frequency: Optional[pulumi.Input[_builtins.str]] = None,
                 ibmcl: Optional[pulumi.Input[Union['CisLogpushJobIbmclArgs', 'CisLogpushJobIbmclArgsDict']]] = None,
                 logdna: Optional[pulumi.Input[_builtins.str]] = None,
                 logpull_options: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 ownership_challenge: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a CisLogpushJob resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] cos: Information to identify the COS bucket where the data will be pushed.
        :param pulumi.Input[_builtins.str] dataset: Dataset to be pulled
        :param pulumi.Input[_builtins.str] destination_conf: Uniquely identifies a resource (such as an s3 bucket) where data will be pushed.
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.bool] enabled: Whether the logpush job enabled or not
        :param pulumi.Input[_builtins.str] frequency: The frequency at which CIS sends batches of logs to your destination
        :param pulumi.Input[Union['CisLogpushJobIbmclArgs', 'CisLogpushJobIbmclArgsDict']] ibmcl: Information to identify the IBM Cloud Log instance where the data will be pushed.
        :param pulumi.Input[_builtins.str] logdna: Information to identify the LogDNA instance the data will be pushed.
        :param pulumi.Input[_builtins.str] logpull_options: Configuration string
        :param pulumi.Input[_builtins.str] name: Logpush Job Name
        :param pulumi.Input[_builtins.str] ownership_challenge: Ownership challenge token to prove destination ownership.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CisLogpushJobArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CisLogpushJob resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CisLogpushJobArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CisLogpushJobArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cis_logpush_job_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cos: Optional[pulumi.Input[_builtins.str]] = None,
                 dataset: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_conf: Optional[pulumi.Input[_builtins.str]] = None,
                 domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 frequency: Optional[pulumi.Input[_builtins.str]] = None,
                 ibmcl: Optional[pulumi.Input[Union['CisLogpushJobIbmclArgs', 'CisLogpushJobIbmclArgsDict']]] = None,
                 logdna: Optional[pulumi.Input[_builtins.str]] = None,
                 logpull_options: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 ownership_challenge: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CisLogpushJobArgs.__new__(CisLogpushJobArgs)

            if cis_id is None and not opts.urn:
                raise TypeError("Missing required property 'cis_id'")
            __props__.__dict__["cis_id"] = cis_id
            __props__.__dict__["cis_logpush_job_id"] = cis_logpush_job_id
            __props__.__dict__["cos"] = None if cos is None else pulumi.Output.secret(cos)
            if dataset is None and not opts.urn:
                raise TypeError("Missing required property 'dataset'")
            __props__.__dict__["dataset"] = dataset
            __props__.__dict__["destination_conf"] = destination_conf
            if domain_id is None and not opts.urn:
                raise TypeError("Missing required property 'domain_id'")
            __props__.__dict__["domain_id"] = domain_id
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["frequency"] = frequency
            __props__.__dict__["ibmcl"] = ibmcl
            __props__.__dict__["logdna"] = None if logdna is None else pulumi.Output.secret(logdna)
            __props__.__dict__["logpull_options"] = logpull_options
            __props__.__dict__["name"] = name
            __props__.__dict__["ownership_challenge"] = None if ownership_challenge is None else pulumi.Output.secret(ownership_challenge)
            __props__.__dict__["error_message"] = None
            __props__.__dict__["job_id"] = None
            __props__.__dict__["last_complete"] = None
            __props__.__dict__["last_error"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["cos", "logdna", "ownershipChallenge"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(CisLogpushJob, __self__).__init__(
            'ibm:index/cisLogpushJob:CisLogpushJob',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cis_id: Optional[pulumi.Input[_builtins.str]] = None,
            cis_logpush_job_id: Optional[pulumi.Input[_builtins.str]] = None,
            cos: Optional[pulumi.Input[_builtins.str]] = None,
            dataset: Optional[pulumi.Input[_builtins.str]] = None,
            destination_conf: Optional[pulumi.Input[_builtins.str]] = None,
            domain_id: Optional[pulumi.Input[_builtins.str]] = None,
            enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            error_message: Optional[pulumi.Input[_builtins.str]] = None,
            frequency: Optional[pulumi.Input[_builtins.str]] = None,
            ibmcl: Optional[pulumi.Input[Union['CisLogpushJobIbmclArgs', 'CisLogpushJobIbmclArgsDict']]] = None,
            job_id: Optional[pulumi.Input[_builtins.float]] = None,
            last_complete: Optional[pulumi.Input[_builtins.str]] = None,
            last_error: Optional[pulumi.Input[_builtins.str]] = None,
            logdna: Optional[pulumi.Input[_builtins.str]] = None,
            logpull_options: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            ownership_challenge: Optional[pulumi.Input[_builtins.str]] = None) -> 'CisLogpushJob':
        """
        Get an existing CisLogpushJob resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cis_id: CIS instance crn
        :param pulumi.Input[_builtins.str] cos: Information to identify the COS bucket where the data will be pushed.
        :param pulumi.Input[_builtins.str] dataset: Dataset to be pulled
        :param pulumi.Input[_builtins.str] destination_conf: Uniquely identifies a resource (such as an s3 bucket) where data will be pushed.
        :param pulumi.Input[_builtins.str] domain_id: Associated CIS domain
        :param pulumi.Input[_builtins.bool] enabled: Whether the logpush job enabled or not
        :param pulumi.Input[_builtins.str] error_message: The last failure message.
        :param pulumi.Input[_builtins.str] frequency: The frequency at which CIS sends batches of logs to your destination
        :param pulumi.Input[Union['CisLogpushJobIbmclArgs', 'CisLogpushJobIbmclArgsDict']] ibmcl: Information to identify the IBM Cloud Log instance where the data will be pushed.
        :param pulumi.Input[_builtins.float] job_id: Associated CIS domain
        :param pulumi.Input[_builtins.str] last_complete: Records the last time that logs have been successfully pushed.
        :param pulumi.Input[_builtins.str] last_error: Records the last time the job failed.
        :param pulumi.Input[_builtins.str] logdna: Information to identify the LogDNA instance the data will be pushed.
        :param pulumi.Input[_builtins.str] logpull_options: Configuration string
        :param pulumi.Input[_builtins.str] name: Logpush Job Name
        :param pulumi.Input[_builtins.str] ownership_challenge: Ownership challenge token to prove destination ownership.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CisLogpushJobState.__new__(_CisLogpushJobState)

        __props__.__dict__["cis_id"] = cis_id
        __props__.__dict__["cis_logpush_job_id"] = cis_logpush_job_id
        __props__.__dict__["cos"] = cos
        __props__.__dict__["dataset"] = dataset
        __props__.__dict__["destination_conf"] = destination_conf
        __props__.__dict__["domain_id"] = domain_id
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["error_message"] = error_message
        __props__.__dict__["frequency"] = frequency
        __props__.__dict__["ibmcl"] = ibmcl
        __props__.__dict__["job_id"] = job_id
        __props__.__dict__["last_complete"] = last_complete
        __props__.__dict__["last_error"] = last_error
        __props__.__dict__["logdna"] = logdna
        __props__.__dict__["logpull_options"] = logpull_options
        __props__.__dict__["name"] = name
        __props__.__dict__["ownership_challenge"] = ownership_challenge
        return CisLogpushJob(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> pulumi.Output[_builtins.str]:
        """
        CIS instance crn
        """
        return pulumi.get(self, "cis_id")

    @_builtins.property
    @pulumi.getter(name="cisLogpushJobId")
    def cis_logpush_job_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cis_logpush_job_id")

    @_builtins.property
    @pulumi.getter
    def cos(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Information to identify the COS bucket where the data will be pushed.
        """
        return pulumi.get(self, "cos")

    @_builtins.property
    @pulumi.getter
    def dataset(self) -> pulumi.Output[_builtins.str]:
        """
        Dataset to be pulled
        """
        return pulumi.get(self, "dataset")

    @_builtins.property
    @pulumi.getter(name="destinationConf")
    def destination_conf(self) -> pulumi.Output[_builtins.str]:
        """
        Uniquely identifies a resource (such as an s3 bucket) where data will be pushed.
        """
        return pulumi.get(self, "destination_conf")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Output[_builtins.str]:
        """
        Associated CIS domain
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Whether the logpush job enabled or not
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> pulumi.Output[_builtins.str]:
        """
        The last failure message.
        """
        return pulumi.get(self, "error_message")

    @_builtins.property
    @pulumi.getter
    def frequency(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The frequency at which CIS sends batches of logs to your destination
        """
        return pulumi.get(self, "frequency")

    @_builtins.property
    @pulumi.getter
    def ibmcl(self) -> pulumi.Output[Optional['outputs.CisLogpushJobIbmcl']]:
        """
        Information to identify the IBM Cloud Log instance where the data will be pushed.
        """
        return pulumi.get(self, "ibmcl")

    @_builtins.property
    @pulumi.getter(name="jobId")
    def job_id(self) -> pulumi.Output[_builtins.float]:
        """
        Associated CIS domain
        """
        return pulumi.get(self, "job_id")

    @_builtins.property
    @pulumi.getter(name="lastComplete")
    def last_complete(self) -> pulumi.Output[_builtins.str]:
        """
        Records the last time that logs have been successfully pushed.
        """
        return pulumi.get(self, "last_complete")

    @_builtins.property
    @pulumi.getter(name="lastError")
    def last_error(self) -> pulumi.Output[_builtins.str]:
        """
        Records the last time the job failed.
        """
        return pulumi.get(self, "last_error")

    @_builtins.property
    @pulumi.getter
    def logdna(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Information to identify the LogDNA instance the data will be pushed.
        """
        return pulumi.get(self, "logdna")

    @_builtins.property
    @pulumi.getter(name="logpullOptions")
    def logpull_options(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Configuration string
        """
        return pulumi.get(self, "logpull_options")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Logpush Job Name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="ownershipChallenge")
    def ownership_challenge(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Ownership challenge token to prove destination ownership.
        """
        return pulumi.get(self, "ownership_challenge")

