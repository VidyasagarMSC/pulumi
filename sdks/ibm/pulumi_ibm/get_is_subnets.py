# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIsSubnetsResult',
    'AwaitableGetIsSubnetsResult',
    'get_is_subnets',
    'get_is_subnets_output',
]

@pulumi.output_type
class GetIsSubnetsResult:
    """
    A collection of values returned by getIsSubnets.
    """
    def __init__(__self__, id=None, resource_group=None, routing_table=None, routing_table_name=None, subnets=None, vpc=None, vpc_crn=None, vpc_name=None, zone=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if resource_group and not isinstance(resource_group, str):
            raise TypeError("Expected argument 'resource_group' to be a str")
        pulumi.set(__self__, "resource_group", resource_group)
        if routing_table and not isinstance(routing_table, str):
            raise TypeError("Expected argument 'routing_table' to be a str")
        pulumi.set(__self__, "routing_table", routing_table)
        if routing_table_name and not isinstance(routing_table_name, str):
            raise TypeError("Expected argument 'routing_table_name' to be a str")
        pulumi.set(__self__, "routing_table_name", routing_table_name)
        if subnets and not isinstance(subnets, list):
            raise TypeError("Expected argument 'subnets' to be a list")
        pulumi.set(__self__, "subnets", subnets)
        if vpc and not isinstance(vpc, str):
            raise TypeError("Expected argument 'vpc' to be a str")
        pulumi.set(__self__, "vpc", vpc)
        if vpc_crn and not isinstance(vpc_crn, str):
            raise TypeError("Expected argument 'vpc_crn' to be a str")
        pulumi.set(__self__, "vpc_crn", vpc_crn)
        if vpc_name and not isinstance(vpc_name, str):
            raise TypeError("Expected argument 'vpc_name' to be a str")
        pulumi.set(__self__, "vpc_name", vpc_name)
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_group")

    @_builtins.property
    @pulumi.getter(name="routingTable")
    def routing_table(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "routing_table")

    @_builtins.property
    @pulumi.getter(name="routingTableName")
    def routing_table_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "routing_table_name")

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> Sequence['outputs.GetIsSubnetsSubnetResult']:
        return pulumi.get(self, "subnets")

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vpc")

    @_builtins.property
    @pulumi.getter(name="vpcCrn")
    def vpc_crn(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vpc_crn")

    @_builtins.property
    @pulumi.getter(name="vpcName")
    def vpc_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "vpc_name")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "zone")


class AwaitableGetIsSubnetsResult(GetIsSubnetsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIsSubnetsResult(
            id=self.id,
            resource_group=self.resource_group,
            routing_table=self.routing_table,
            routing_table_name=self.routing_table_name,
            subnets=self.subnets,
            vpc=self.vpc,
            vpc_crn=self.vpc_crn,
            vpc_name=self.vpc_name,
            zone=self.zone)


def get_is_subnets(id: Optional[_builtins.str] = None,
                   resource_group: Optional[_builtins.str] = None,
                   routing_table: Optional[_builtins.str] = None,
                   routing_table_name: Optional[_builtins.str] = None,
                   vpc: Optional[_builtins.str] = None,
                   vpc_crn: Optional[_builtins.str] = None,
                   vpc_name: Optional[_builtins.str] = None,
                   zone: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIsSubnetsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['resourceGroup'] = resource_group
    __args__['routingTable'] = routing_table
    __args__['routingTableName'] = routing_table_name
    __args__['vpc'] = vpc
    __args__['vpcCrn'] = vpc_crn
    __args__['vpcName'] = vpc_name
    __args__['zone'] = zone
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getIsSubnets:getIsSubnets', __args__, opts=opts, typ=GetIsSubnetsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetIsSubnetsResult(
        id=pulumi.get(__ret__, 'id'),
        resource_group=pulumi.get(__ret__, 'resource_group'),
        routing_table=pulumi.get(__ret__, 'routing_table'),
        routing_table_name=pulumi.get(__ret__, 'routing_table_name'),
        subnets=pulumi.get(__ret__, 'subnets'),
        vpc=pulumi.get(__ret__, 'vpc'),
        vpc_crn=pulumi.get(__ret__, 'vpc_crn'),
        vpc_name=pulumi.get(__ret__, 'vpc_name'),
        zone=pulumi.get(__ret__, 'zone'))
def get_is_subnets_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          resource_group: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          routing_table: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          routing_table_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          vpc: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          vpc_crn: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          vpc_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          zone: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIsSubnetsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['resourceGroup'] = resource_group
    __args__['routingTable'] = routing_table
    __args__['routingTableName'] = routing_table_name
    __args__['vpc'] = vpc
    __args__['vpcCrn'] = vpc_crn
    __args__['vpcName'] = vpc_name
    __args__['zone'] = zone
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getIsSubnets:getIsSubnets', __args__, opts=opts, typ=GetIsSubnetsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetIsSubnetsResult(
        id=pulumi.get(__response__, 'id'),
        resource_group=pulumi.get(__response__, 'resource_group'),
        routing_table=pulumi.get(__response__, 'routing_table'),
        routing_table_name=pulumi.get(__response__, 'routing_table_name'),
        subnets=pulumi.get(__response__, 'subnets'),
        vpc=pulumi.get(__response__, 'vpc'),
        vpc_crn=pulumi.get(__response__, 'vpc_crn'),
        vpc_name=pulumi.get(__response__, 'vpc_name'),
        zone=pulumi.get(__response__, 'zone')))
