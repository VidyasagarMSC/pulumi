# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsShareSnapshotArgs', 'IsShareSnapshot']

@pulumi.input_type
class IsShareSnapshotArgs:
    def __init__(__self__, *,
                 share: pulumi.Input[_builtins.str],
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 is_share_snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a IsShareSnapshot resource.
        :param pulumi.Input[_builtins.str] share: The file share identifier.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.str] name: The name for this share snapshot. The name is unique across all snapshots for the file share.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: The [user tags](https://cloud.ibm.com/apidocs/tagging#types-of-tags) associated with this share snapshot.
        """
        pulumi.set(__self__, "share", share)
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if is_share_snapshot_id is not None:
            pulumi.set(__self__, "is_share_snapshot_id", is_share_snapshot_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def share(self) -> pulumi.Input[_builtins.str]:
        """
        The file share identifier.
        """
        return pulumi.get(self, "share")

    @share.setter
    def share(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "share", value)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter(name="isShareSnapshotId")
    def is_share_snapshot_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_share_snapshot_id")

    @is_share_snapshot_id.setter
    def is_share_snapshot_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_share_snapshot_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name for this share snapshot. The name is unique across all snapshots for the file share.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The [user tags](https://cloud.ibm.com/apidocs/tagging#types-of-tags) associated with this share snapshot.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _IsShareSnapshotState:
    def __init__(__self__, *,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 backup_policy_plans: Optional[pulumi.Input[Sequence[pulumi.Input['IsShareSnapshotBackupPolicyPlanArgs']]]] = None,
                 captured_at: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 crn: Optional[pulumi.Input[_builtins.str]] = None,
                 fingerprint: Optional[pulumi.Input[_builtins.str]] = None,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 is_share_snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                 lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
                 minimum_size: Optional[pulumi.Input[_builtins.float]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input['IsShareSnapshotResourceGroupArgs']]]] = None,
                 resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                 share: Optional[pulumi.Input[_builtins.str]] = None,
                 share_snapshot: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 status_reasons: Optional[pulumi.Input[Sequence[pulumi.Input['IsShareSnapshotStatusReasonArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input['IsShareSnapshotZoneArgs']]]] = None):
        """
        Input properties used for looking up and filtering IsShareSnapshot resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[Sequence[pulumi.Input['IsShareSnapshotBackupPolicyPlanArgs']]] backup_policy_plans: If present, the backup policy plan which created this share snapshot.
        :param pulumi.Input[_builtins.str] captured_at: The date and time the data capture for this share snapshot was completed.If absent, this snapshot's data has not yet
               been captured.
        :param pulumi.Input[_builtins.str] created_at: The date and time that the share snapshot was created.
        :param pulumi.Input[_builtins.str] crn: The CRN for this share snapshot.
        :param pulumi.Input[_builtins.str] fingerprint: The fingerprint for this snapshot.
        :param pulumi.Input[_builtins.str] href: The URL for this share snapshot.
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of this share snapshot.
        :param pulumi.Input[_builtins.float] minimum_size: The minimum size of a share created from this snapshot. When a snapshot is created, this will be set to the size of the
               `source_share`.
        :param pulumi.Input[_builtins.str] name: The name for this share snapshot. The name is unique across all snapshots for the file share.
        :param pulumi.Input[Sequence[pulumi.Input['IsShareSnapshotResourceGroupArgs']]] resource_groups: The resource group for this file share.
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input[_builtins.str] share: The file share identifier.
        :param pulumi.Input[_builtins.str] share_snapshot: The unique identifier for this share snapshot.
        :param pulumi.Input[_builtins.str] status: The status of the share snapshot:- `available`: The share snapshot is available for use.- `failed`: The share snapshot
               is irrecoverably unusable.- `pending`: The share snapshot is being provisioned and is not yet usable.- `unusable`: The
               share snapshot is not currently usable (see `status_reasons`)The enumerated values for this property
               may[expand](https://cloud.ibm.com/apidocs/vpc#property-value-expansion) in the future.
        :param pulumi.Input[Sequence[pulumi.Input['IsShareSnapshotStatusReasonArgs']]] status_reasons: The reasons for the current status (if any).
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: The [user tags](https://cloud.ibm.com/apidocs/tagging#types-of-tags) associated with this share snapshot.
        :param pulumi.Input[Sequence[pulumi.Input['IsShareSnapshotZoneArgs']]] zones: The zone this share snapshot resides in.
        """
        if access_tags is not None:
            pulumi.set(__self__, "access_tags", access_tags)
        if backup_policy_plans is not None:
            pulumi.set(__self__, "backup_policy_plans", backup_policy_plans)
        if captured_at is not None:
            pulumi.set(__self__, "captured_at", captured_at)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if crn is not None:
            pulumi.set(__self__, "crn", crn)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if is_share_snapshot_id is not None:
            pulumi.set(__self__, "is_share_snapshot_id", is_share_snapshot_id)
        if lifecycle_state is not None:
            pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if minimum_size is not None:
            pulumi.set(__self__, "minimum_size", minimum_size)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_groups is not None:
            pulumi.set(__self__, "resource_groups", resource_groups)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if share is not None:
            pulumi.set(__self__, "share", share)
        if share_snapshot is not None:
            pulumi.set(__self__, "share_snapshot", share_snapshot)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_reasons is not None:
            pulumi.set(__self__, "status_reasons", status_reasons)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @access_tags.setter
    def access_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "access_tags", value)

    @_builtins.property
    @pulumi.getter(name="backupPolicyPlans")
    def backup_policy_plans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsShareSnapshotBackupPolicyPlanArgs']]]]:
        """
        If present, the backup policy plan which created this share snapshot.
        """
        return pulumi.get(self, "backup_policy_plans")

    @backup_policy_plans.setter
    def backup_policy_plans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsShareSnapshotBackupPolicyPlanArgs']]]]):
        pulumi.set(self, "backup_policy_plans", value)

    @_builtins.property
    @pulumi.getter(name="capturedAt")
    def captured_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time the data capture for this share snapshot was completed.If absent, this snapshot's data has not yet
        been captured.
        """
        return pulumi.get(self, "captured_at")

    @captured_at.setter
    def captured_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "captured_at", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time that the share snapshot was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def crn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The CRN for this share snapshot.
        """
        return pulumi.get(self, "crn")

    @crn.setter
    def crn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crn", value)

    @_builtins.property
    @pulumi.getter
    def fingerprint(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The fingerprint for this snapshot.
        """
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fingerprint", value)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL for this share snapshot.
        """
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter(name="isShareSnapshotId")
    def is_share_snapshot_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "is_share_snapshot_id")

    @is_share_snapshot_id.setter
    def is_share_snapshot_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "is_share_snapshot_id", value)

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The lifecycle state of this share snapshot.
        """
        return pulumi.get(self, "lifecycle_state")

    @lifecycle_state.setter
    def lifecycle_state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "lifecycle_state", value)

    @_builtins.property
    @pulumi.getter(name="minimumSize")
    def minimum_size(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        The minimum size of a share created from this snapshot. When a snapshot is created, this will be set to the size of the
        `source_share`.
        """
        return pulumi.get(self, "minimum_size")

    @minimum_size.setter
    def minimum_size(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "minimum_size", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name for this share snapshot. The name is unique across all snapshots for the file share.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsShareSnapshotResourceGroupArgs']]]]:
        """
        The resource group for this file share.
        """
        return pulumi.get(self, "resource_groups")

    @resource_groups.setter
    def resource_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsShareSnapshotResourceGroupArgs']]]]):
        pulumi.set(self, "resource_groups", value)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter
    def share(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The file share identifier.
        """
        return pulumi.get(self, "share")

    @share.setter
    def share(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "share", value)

    @_builtins.property
    @pulumi.getter(name="shareSnapshot")
    def share_snapshot(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique identifier for this share snapshot.
        """
        return pulumi.get(self, "share_snapshot")

    @share_snapshot.setter
    def share_snapshot(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "share_snapshot", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the share snapshot:- `available`: The share snapshot is available for use.- `failed`: The share snapshot
        is irrecoverably unusable.- `pending`: The share snapshot is being provisioned and is not yet usable.- `unusable`: The
        share snapshot is not currently usable (see `status_reasons`)The enumerated values for this property
        may[expand](https://cloud.ibm.com/apidocs/vpc#property-value-expansion) in the future.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsShareSnapshotStatusReasonArgs']]]]:
        """
        The reasons for the current status (if any).
        """
        return pulumi.get(self, "status_reasons")

    @status_reasons.setter
    def status_reasons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsShareSnapshotStatusReasonArgs']]]]):
        pulumi.set(self, "status_reasons", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The [user tags](https://cloud.ibm.com/apidocs/tagging#types-of-tags) associated with this share snapshot.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsShareSnapshotZoneArgs']]]]:
        """
        The zone this share snapshot resides in.
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsShareSnapshotZoneArgs']]]]):
        pulumi.set(self, "zones", value)


@pulumi.type_token("ibm:index/isShareSnapshot:IsShareSnapshot")
class IsShareSnapshot(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 is_share_snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 share: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Create a IsShareSnapshot resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[_builtins.str] name: The name for this share snapshot. The name is unique across all snapshots for the file share.
        :param pulumi.Input[_builtins.str] share: The file share identifier.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: The [user tags](https://cloud.ibm.com/apidocs/tagging#types-of-tags) associated with this share snapshot.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IsShareSnapshotArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IsShareSnapshot resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IsShareSnapshotArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsShareSnapshotArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 is_share_snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 share: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsShareSnapshotArgs.__new__(IsShareSnapshotArgs)

            __props__.__dict__["access_tags"] = access_tags
            __props__.__dict__["is_share_snapshot_id"] = is_share_snapshot_id
            __props__.__dict__["name"] = name
            if share is None and not opts.urn:
                raise TypeError("Missing required property 'share'")
            __props__.__dict__["share"] = share
            __props__.__dict__["tags"] = tags
            __props__.__dict__["backup_policy_plans"] = None
            __props__.__dict__["captured_at"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["crn"] = None
            __props__.__dict__["fingerprint"] = None
            __props__.__dict__["href"] = None
            __props__.__dict__["lifecycle_state"] = None
            __props__.__dict__["minimum_size"] = None
            __props__.__dict__["resource_groups"] = None
            __props__.__dict__["resource_type"] = None
            __props__.__dict__["share_snapshot"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["status_reasons"] = None
            __props__.__dict__["zones"] = None
        super(IsShareSnapshot, __self__).__init__(
            'ibm:index/isShareSnapshot:IsShareSnapshot',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            backup_policy_plans: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsShareSnapshotBackupPolicyPlanArgs', 'IsShareSnapshotBackupPolicyPlanArgsDict']]]]] = None,
            captured_at: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            crn: Optional[pulumi.Input[_builtins.str]] = None,
            fingerprint: Optional[pulumi.Input[_builtins.str]] = None,
            href: Optional[pulumi.Input[_builtins.str]] = None,
            is_share_snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
            lifecycle_state: Optional[pulumi.Input[_builtins.str]] = None,
            minimum_size: Optional[pulumi.Input[_builtins.float]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            resource_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsShareSnapshotResourceGroupArgs', 'IsShareSnapshotResourceGroupArgsDict']]]]] = None,
            resource_type: Optional[pulumi.Input[_builtins.str]] = None,
            share: Optional[pulumi.Input[_builtins.str]] = None,
            share_snapshot: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            status_reasons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsShareSnapshotStatusReasonArgs', 'IsShareSnapshotStatusReasonArgsDict']]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            zones: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IsShareSnapshotZoneArgs', 'IsShareSnapshotZoneArgsDict']]]]] = None) -> 'IsShareSnapshot':
        """
        Get an existing IsShareSnapshot resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] access_tags: List of access management tags
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsShareSnapshotBackupPolicyPlanArgs', 'IsShareSnapshotBackupPolicyPlanArgsDict']]]] backup_policy_plans: If present, the backup policy plan which created this share snapshot.
        :param pulumi.Input[_builtins.str] captured_at: The date and time the data capture for this share snapshot was completed.If absent, this snapshot's data has not yet
               been captured.
        :param pulumi.Input[_builtins.str] created_at: The date and time that the share snapshot was created.
        :param pulumi.Input[_builtins.str] crn: The CRN for this share snapshot.
        :param pulumi.Input[_builtins.str] fingerprint: The fingerprint for this snapshot.
        :param pulumi.Input[_builtins.str] href: The URL for this share snapshot.
        :param pulumi.Input[_builtins.str] lifecycle_state: The lifecycle state of this share snapshot.
        :param pulumi.Input[_builtins.float] minimum_size: The minimum size of a share created from this snapshot. When a snapshot is created, this will be set to the size of the
               `source_share`.
        :param pulumi.Input[_builtins.str] name: The name for this share snapshot. The name is unique across all snapshots for the file share.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsShareSnapshotResourceGroupArgs', 'IsShareSnapshotResourceGroupArgsDict']]]] resource_groups: The resource group for this file share.
        :param pulumi.Input[_builtins.str] resource_type: The resource type.
        :param pulumi.Input[_builtins.str] share: The file share identifier.
        :param pulumi.Input[_builtins.str] share_snapshot: The unique identifier for this share snapshot.
        :param pulumi.Input[_builtins.str] status: The status of the share snapshot:- `available`: The share snapshot is available for use.- `failed`: The share snapshot
               is irrecoverably unusable.- `pending`: The share snapshot is being provisioned and is not yet usable.- `unusable`: The
               share snapshot is not currently usable (see `status_reasons`)The enumerated values for this property
               may[expand](https://cloud.ibm.com/apidocs/vpc#property-value-expansion) in the future.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsShareSnapshotStatusReasonArgs', 'IsShareSnapshotStatusReasonArgsDict']]]] status_reasons: The reasons for the current status (if any).
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] tags: The [user tags](https://cloud.ibm.com/apidocs/tagging#types-of-tags) associated with this share snapshot.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IsShareSnapshotZoneArgs', 'IsShareSnapshotZoneArgsDict']]]] zones: The zone this share snapshot resides in.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsShareSnapshotState.__new__(_IsShareSnapshotState)

        __props__.__dict__["access_tags"] = access_tags
        __props__.__dict__["backup_policy_plans"] = backup_policy_plans
        __props__.__dict__["captured_at"] = captured_at
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["crn"] = crn
        __props__.__dict__["fingerprint"] = fingerprint
        __props__.__dict__["href"] = href
        __props__.__dict__["is_share_snapshot_id"] = is_share_snapshot_id
        __props__.__dict__["lifecycle_state"] = lifecycle_state
        __props__.__dict__["minimum_size"] = minimum_size
        __props__.__dict__["name"] = name
        __props__.__dict__["resource_groups"] = resource_groups
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["share"] = share
        __props__.__dict__["share_snapshot"] = share_snapshot
        __props__.__dict__["status"] = status
        __props__.__dict__["status_reasons"] = status_reasons
        __props__.__dict__["tags"] = tags
        __props__.__dict__["zones"] = zones
        return IsShareSnapshot(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessTags")
    def access_tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of access management tags
        """
        return pulumi.get(self, "access_tags")

    @_builtins.property
    @pulumi.getter(name="backupPolicyPlans")
    def backup_policy_plans(self) -> pulumi.Output[Sequence['outputs.IsShareSnapshotBackupPolicyPlan']]:
        """
        If present, the backup policy plan which created this share snapshot.
        """
        return pulumi.get(self, "backup_policy_plans")

    @_builtins.property
    @pulumi.getter(name="capturedAt")
    def captured_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time the data capture for this share snapshot was completed.If absent, this snapshot's data has not yet
        been captured.
        """
        return pulumi.get(self, "captured_at")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time that the share snapshot was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def crn(self) -> pulumi.Output[_builtins.str]:
        """
        The CRN for this share snapshot.
        """
        return pulumi.get(self, "crn")

    @_builtins.property
    @pulumi.getter
    def fingerprint(self) -> pulumi.Output[_builtins.str]:
        """
        The fingerprint for this snapshot.
        """
        return pulumi.get(self, "fingerprint")

    @_builtins.property
    @pulumi.getter
    def href(self) -> pulumi.Output[_builtins.str]:
        """
        The URL for this share snapshot.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="isShareSnapshotId")
    def is_share_snapshot_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "is_share_snapshot_id")

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> pulumi.Output[_builtins.str]:
        """
        The lifecycle state of this share snapshot.
        """
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter(name="minimumSize")
    def minimum_size(self) -> pulumi.Output[_builtins.float]:
        """
        The minimum size of a share created from this snapshot. When a snapshot is created, this will be set to the size of the
        `source_share`.
        """
        return pulumi.get(self, "minimum_size")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name for this share snapshot. The name is unique across all snapshots for the file share.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceGroups")
    def resource_groups(self) -> pulumi.Output[Sequence['outputs.IsShareSnapshotResourceGroup']]:
        """
        The resource group for this file share.
        """
        return pulumi.get(self, "resource_groups")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[_builtins.str]:
        """
        The resource type.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def share(self) -> pulumi.Output[_builtins.str]:
        """
        The file share identifier.
        """
        return pulumi.get(self, "share")

    @_builtins.property
    @pulumi.getter(name="shareSnapshot")
    def share_snapshot(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier for this share snapshot.
        """
        return pulumi.get(self, "share_snapshot")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the share snapshot:- `available`: The share snapshot is available for use.- `failed`: The share snapshot
        is irrecoverably unusable.- `pending`: The share snapshot is being provisioned and is not yet usable.- `unusable`: The
        share snapshot is not currently usable (see `status_reasons`)The enumerated values for this property
        may[expand](https://cloud.ibm.com/apidocs/vpc#property-value-expansion) in the future.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> pulumi.Output[Sequence['outputs.IsShareSnapshotStatusReason']]:
        """
        The reasons for the current status (if any).
        """
        return pulumi.get(self, "status_reasons")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The [user tags](https://cloud.ibm.com/apidocs/tagging#types-of-tags) associated with this share snapshot.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def zones(self) -> pulumi.Output[Sequence['outputs.IsShareSnapshotZone']]:
        """
        The zone this share snapshot resides in.
        """
        return pulumi.get(self, "zones")

