# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCisMtlsAppsResult',
    'AwaitableGetCisMtlsAppsResult',
    'get_cis_mtls_apps',
    'get_cis_mtls_apps_output',
]

@pulumi.output_type
class GetCisMtlsAppsResult:
    """
    A collection of values returned by getCisMtlsApps.
    """
    def __init__(__self__, cis_id=None, domain_id=None, id=None, mtls_access_app_policies=None, mtls_access_apps=None):
        if cis_id and not isinstance(cis_id, str):
            raise TypeError("Expected argument 'cis_id' to be a str")
        pulumi.set(__self__, "cis_id", cis_id)
        if domain_id and not isinstance(domain_id, str):
            raise TypeError("Expected argument 'domain_id' to be a str")
        pulumi.set(__self__, "domain_id", domain_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if mtls_access_app_policies and not isinstance(mtls_access_app_policies, list):
            raise TypeError("Expected argument 'mtls_access_app_policies' to be a list")
        pulumi.set(__self__, "mtls_access_app_policies", mtls_access_app_policies)
        if mtls_access_apps and not isinstance(mtls_access_apps, list):
            raise TypeError("Expected argument 'mtls_access_apps' to be a list")
        pulumi.set(__self__, "mtls_access_apps", mtls_access_apps)

    @_builtins.property
    @pulumi.getter(name="cisId")
    def cis_id(self) -> _builtins.str:
        return pulumi.get(self, "cis_id")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="mtlsAccessAppPolicies")
    def mtls_access_app_policies(self) -> Sequence['outputs.GetCisMtlsAppsMtlsAccessAppPolicyResult']:
        return pulumi.get(self, "mtls_access_app_policies")

    @_builtins.property
    @pulumi.getter(name="mtlsAccessApps")
    def mtls_access_apps(self) -> Sequence['outputs.GetCisMtlsAppsMtlsAccessAppResult']:
        return pulumi.get(self, "mtls_access_apps")


class AwaitableGetCisMtlsAppsResult(GetCisMtlsAppsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCisMtlsAppsResult(
            cis_id=self.cis_id,
            domain_id=self.domain_id,
            id=self.id,
            mtls_access_app_policies=self.mtls_access_app_policies,
            mtls_access_apps=self.mtls_access_apps)


def get_cis_mtls_apps(cis_id: Optional[_builtins.str] = None,
                      domain_id: Optional[_builtins.str] = None,
                      id: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCisMtlsAppsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cisId'] = cis_id
    __args__['domainId'] = domain_id
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getCisMtlsApps:getCisMtlsApps', __args__, opts=opts, typ=GetCisMtlsAppsResult, package_ref=_utilities.get_package()).value

    return AwaitableGetCisMtlsAppsResult(
        cis_id=pulumi.get(__ret__, 'cis_id'),
        domain_id=pulumi.get(__ret__, 'domain_id'),
        id=pulumi.get(__ret__, 'id'),
        mtls_access_app_policies=pulumi.get(__ret__, 'mtls_access_app_policies'),
        mtls_access_apps=pulumi.get(__ret__, 'mtls_access_apps'))
def get_cis_mtls_apps_output(cis_id: Optional[pulumi.Input[_builtins.str]] = None,
                             domain_id: Optional[pulumi.Input[_builtins.str]] = None,
                             id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCisMtlsAppsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['cisId'] = cis_id
    __args__['domainId'] = domain_id
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getCisMtlsApps:getCisMtlsApps', __args__, opts=opts, typ=GetCisMtlsAppsResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetCisMtlsAppsResult(
        cis_id=pulumi.get(__response__, 'cis_id'),
        domain_id=pulumi.get(__response__, 'domain_id'),
        id=pulumi.get(__response__, 'id'),
        mtls_access_app_policies=pulumi.get(__response__, 'mtls_access_app_policies'),
        mtls_access_apps=pulumi.get(__response__, 'mtls_access_apps')))
