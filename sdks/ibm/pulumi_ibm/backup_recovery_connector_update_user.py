# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BackupRecoveryConnectorUpdateUserArgs', 'BackupRecoveryConnectorUpdateUser']

@pulumi.input_type
class BackupRecoveryConnectorUpdateUserArgs:
    def __init__(__self__, *,
                 session_name_cookie: pulumi.Input[_builtins.str],
                 ad_user_info: Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserAdUserInfoArgs']] = None,
                 additional_group_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 allow_dso_modify: Optional[pulumi.Input[_builtins.bool]] = None,
                 audit_log_settings: Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserAuditLogSettingsArgs']] = None,
                 authentication_type: Optional[pulumi.Input[_builtins.str]] = None,
                 backup_recovery_connector_update_user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_identifiers: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryConnectorUpdateUserClusterIdentifierArgs']]]] = None,
                 created_time_msecs: Optional[pulumi.Input[_builtins.float]] = None,
                 current_password: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 domain: Optional[pulumi.Input[_builtins.str]] = None,
                 effective_time_msecs: Optional[pulumi.Input[_builtins.float]] = None,
                 email_address: Optional[pulumi.Input[_builtins.str]] = None,
                 expired_time_msecs: Optional[pulumi.Input[_builtins.float]] = None,
                 force_password_change: Optional[pulumi.Input[_builtins.bool]] = None,
                 google_account: Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserGoogleAccountArgs']] = None,
                 group_roles: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 idp_user_info: Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserIdpUserInfoArgs']] = None,
                 intercom_messenger_token: Optional[pulumi.Input[_builtins.str]] = None,
                 is_account_locked: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_active: Optional[pulumi.Input[_builtins.bool]] = None,
                 last_successful_login_time_msecs: Optional[pulumi.Input[_builtins.float]] = None,
                 last_updated_time_msecs: Optional[pulumi.Input[_builtins.float]] = None,
                 mfa_info: Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserMfaInfoArgs']] = None,
                 mfa_methods: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 object_class: Optional[pulumi.Input[_builtins.str]] = None,
                 org_memberships: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryConnectorUpdateUserOrgMembershipArgs']]]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 preferences: Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserPreferencesArgs']] = None,
                 previous_login_time_msecs: Optional[pulumi.Input[_builtins.float]] = None,
                 primary_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 privilege_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 profiles: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryConnectorUpdateUserProfileArgs']]]] = None,
                 restricted: Optional[pulumi.Input[_builtins.bool]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 s3_access_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 s3_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 s3_secret_key: Optional[pulumi.Input[_builtins.str]] = None,
                 salesforce_account: Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserSalesforceAccountArgs']] = None,
                 sid: Optional[pulumi.Input[_builtins.str]] = None,
                 spog_context: Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserSpogContextArgs']] = None,
                 subscription_info: Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserSubscriptionInfoArgs']] = None,
                 tenant_accesses: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryConnectorUpdateUserTenantAccessArgs']]]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 username: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a BackupRecoveryConnectorUpdateUser resource.
        :param pulumi.Input[_builtins.str] session_name_cookie: Specifies the session name cookie of the Cohesity user.
        :param pulumi.Input['BackupRecoveryConnectorUpdateUserAdUserInfoArgs'] ad_user_info: Specifies an AD User's information logged in using an active directory. This information is not stored on the Cluster.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] additional_group_names: Specifies the names of additional groups this User may belong to.
        :param pulumi.Input[_builtins.bool] allow_dso_modify: Specifies if the data security user can be modified by the admin users.
        :param pulumi.Input['BackupRecoveryConnectorUpdateUserAuditLogSettingsArgs'] audit_log_settings: AuditLogSettings specifies struct with audt log configuration. Make these settings in such a way that zero values are
               cluster default when bb is not present.
        :param pulumi.Input[_builtins.str] authentication_type: Specifies the authentication type of the user. 'kAuthLocal' implies authenticated user is a local user. 'kAuthAd'
               implies authenticated user is an Active Directory user. 'kAuthSalesforce' implies authenticated user is a Salesforce
               user. 'kAuthGoogle' implies authenticated user is a Google user. 'kAuthSso' implies authenticated user is an SSO user.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoveryConnectorUpdateUserClusterIdentifierArgs']]] cluster_identifiers: Specifies the list of clusters this user has access to. If this is not specified, access will be granted to all
               clusters.
        :param pulumi.Input[_builtins.float] created_time_msecs: Specifies the epoch time in milliseconds when the user account was created on the Cohesity Cluster.
        :param pulumi.Input[_builtins.str] current_password: Specifies the current password when updating the password.
        :param pulumi.Input[_builtins.str] description: Specifies a description about the user.
        :param pulumi.Input[_builtins.str] domain: Specifies the fully qualified domain name (FQDN) of an Active Directory or LOCAL for the default LOCAL domain on the
               Cohesity Cluster. A user is uniquely identified by combination of the username and the domain.
        :param pulumi.Input[_builtins.float] effective_time_msecs: Specifies the epoch time in milliseconds when the user becomes effective. Until that time, the user cannot log in.
        :param pulumi.Input[_builtins.str] email_address: Specifies the email address of the user.
        :param pulumi.Input[_builtins.float] expired_time_msecs: Specifies the epoch time in milliseconds when the user becomes expired. After that, the user cannot log in.
        :param pulumi.Input[_builtins.bool] force_password_change: Specifies whether to force user to change password.
        :param pulumi.Input['BackupRecoveryConnectorUpdateUserGoogleAccountArgs'] google_account: Google Account Information of a Helios BaaS user.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] group_roles: Specifies the Cohesity roles to associate with the user' group. These roles can only be edited from group.
        :param pulumi.Input['BackupRecoveryConnectorUpdateUserIdpUserInfoArgs'] idp_user_info: Specifies an IdP User's information logged in using an IdP. This information is not stored on the Cluster.
        :param pulumi.Input[_builtins.str] intercom_messenger_token: Specifies the messenger token for intercom identity verification.
        :param pulumi.Input[_builtins.bool] is_account_locked: Specifies whether the user account is locked.
        :param pulumi.Input[_builtins.bool] is_active: IsActive specifies whether or not a user is active, or has been disactivated by the customer. The default behavior is
               'true'.
        :param pulumi.Input[_builtins.float] last_successful_login_time_msecs: Specifies the epoch time in milliseconds when the user was last logged in successfully.
        :param pulumi.Input[_builtins.float] last_updated_time_msecs: Specifies the epoch time in milliseconds when the user account was last modified on the Cohesity Cluster.
        :param pulumi.Input['BackupRecoveryConnectorUpdateUserMfaInfoArgs'] mfa_info: Specifies information about MFA.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] mfa_methods: Specifies MFA methods that enabled on the cluster.
        :param pulumi.Input[_builtins.str] object_class: Specifies object class of user, could be either user or group.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoveryConnectorUpdateUserOrgMembershipArgs']]] org_memberships: OrgMembership contains the list of all available tenantIds for this user to switch to. Only when creating the session
               user, this field is populated on the fly. We discover the tenantIds from various groups assigned to the users.
        :param pulumi.Input[_builtins.str] password: Specifies the password of this user.
        :param pulumi.Input['BackupRecoveryConnectorUpdateUserPreferencesArgs'] preferences: Specifies the preferences of this user.
        :param pulumi.Input[_builtins.float] previous_login_time_msecs: Specifies the epoch time in milliseconds of previous user login.
        :param pulumi.Input[_builtins.str] primary_group_name: Specifies the name of the primary group of this User.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] privilege_ids: Specifies the Cohesity privileges from the roles. This will be populated based on the union of all privileges in roles.
               Type for unique privilege Id values. All below enum values specify a value for all uniquely defined privileges in
               Cohesity.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoveryConnectorUpdateUserProfileArgs']]] profiles: Specifies the user profiles. NOTE:- Currently used for Helios.
        :param pulumi.Input[_builtins.bool] restricted: Whether the user is a restricted user. A restricted user can only view the objects he has permissions to.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] roles: Specifies the Cohesity roles to associate with the user such as such as 'Admin', 'Ops' or 'View'. The Cohesity roles
               determine privileges on the Cohesity Cluster for this user.
        :param pulumi.Input[_builtins.str] s3_access_key_id: Specifies the S3 Account Access Key ID.
        :param pulumi.Input[_builtins.str] s3_account_id: Specifies the S3 Account Canonical User ID.
        :param pulumi.Input[_builtins.str] s3_secret_key: Specifies the S3 Account Secret Key.
        :param pulumi.Input['BackupRecoveryConnectorUpdateUserSalesforceAccountArgs'] salesforce_account: Salesforce Account Information of a Helios user.
        :param pulumi.Input[_builtins.str] sid: Specifies the unique Security ID (SID) of the user. This field is mandatory in modifying user.
        :param pulumi.Input['BackupRecoveryConnectorUpdateUserSpogContextArgs'] spog_context: SpogContext specifies all of the information about the user and cluster which is performing action on this cluster.
        :param pulumi.Input['BackupRecoveryConnectorUpdateUserSubscriptionInfoArgs'] subscription_info: Extends this to have Helios, DRaaS and DSaaS.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoveryConnectorUpdateUserTenantAccessArgs']]] tenant_accesses: Specfies the Tenant Access for MCM User.
        :param pulumi.Input[_builtins.str] tenant_id: Specifies the effective Tenant ID of the user.
        :param pulumi.Input[_builtins.str] username: Specifies the login name of the user.
        """
        pulumi.set(__self__, "session_name_cookie", session_name_cookie)
        if ad_user_info is not None:
            pulumi.set(__self__, "ad_user_info", ad_user_info)
        if additional_group_names is not None:
            pulumi.set(__self__, "additional_group_names", additional_group_names)
        if allow_dso_modify is not None:
            pulumi.set(__self__, "allow_dso_modify", allow_dso_modify)
        if audit_log_settings is not None:
            pulumi.set(__self__, "audit_log_settings", audit_log_settings)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if backup_recovery_connector_update_user_id is not None:
            pulumi.set(__self__, "backup_recovery_connector_update_user_id", backup_recovery_connector_update_user_id)
        if cluster_identifiers is not None:
            pulumi.set(__self__, "cluster_identifiers", cluster_identifiers)
        if created_time_msecs is not None:
            pulumi.set(__self__, "created_time_msecs", created_time_msecs)
        if current_password is not None:
            pulumi.set(__self__, "current_password", current_password)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if effective_time_msecs is not None:
            pulumi.set(__self__, "effective_time_msecs", effective_time_msecs)
        if email_address is not None:
            pulumi.set(__self__, "email_address", email_address)
        if expired_time_msecs is not None:
            pulumi.set(__self__, "expired_time_msecs", expired_time_msecs)
        if force_password_change is not None:
            pulumi.set(__self__, "force_password_change", force_password_change)
        if google_account is not None:
            pulumi.set(__self__, "google_account", google_account)
        if group_roles is not None:
            pulumi.set(__self__, "group_roles", group_roles)
        if idp_user_info is not None:
            pulumi.set(__self__, "idp_user_info", idp_user_info)
        if intercom_messenger_token is not None:
            pulumi.set(__self__, "intercom_messenger_token", intercom_messenger_token)
        if is_account_locked is not None:
            pulumi.set(__self__, "is_account_locked", is_account_locked)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if last_successful_login_time_msecs is not None:
            pulumi.set(__self__, "last_successful_login_time_msecs", last_successful_login_time_msecs)
        if last_updated_time_msecs is not None:
            pulumi.set(__self__, "last_updated_time_msecs", last_updated_time_msecs)
        if mfa_info is not None:
            pulumi.set(__self__, "mfa_info", mfa_info)
        if mfa_methods is not None:
            pulumi.set(__self__, "mfa_methods", mfa_methods)
        if object_class is not None:
            pulumi.set(__self__, "object_class", object_class)
        if org_memberships is not None:
            pulumi.set(__self__, "org_memberships", org_memberships)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if preferences is not None:
            pulumi.set(__self__, "preferences", preferences)
        if previous_login_time_msecs is not None:
            pulumi.set(__self__, "previous_login_time_msecs", previous_login_time_msecs)
        if primary_group_name is not None:
            pulumi.set(__self__, "primary_group_name", primary_group_name)
        if privilege_ids is not None:
            pulumi.set(__self__, "privilege_ids", privilege_ids)
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)
        if restricted is not None:
            pulumi.set(__self__, "restricted", restricted)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if s3_access_key_id is not None:
            pulumi.set(__self__, "s3_access_key_id", s3_access_key_id)
        if s3_account_id is not None:
            pulumi.set(__self__, "s3_account_id", s3_account_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)
        if salesforce_account is not None:
            pulumi.set(__self__, "salesforce_account", salesforce_account)
        if sid is not None:
            pulumi.set(__self__, "sid", sid)
        if spog_context is not None:
            pulumi.set(__self__, "spog_context", spog_context)
        if subscription_info is not None:
            pulumi.set(__self__, "subscription_info", subscription_info)
        if tenant_accesses is not None:
            pulumi.set(__self__, "tenant_accesses", tenant_accesses)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter(name="sessionNameCookie")
    def session_name_cookie(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the session name cookie of the Cohesity user.
        """
        return pulumi.get(self, "session_name_cookie")

    @session_name_cookie.setter
    def session_name_cookie(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "session_name_cookie", value)

    @_builtins.property
    @pulumi.getter(name="adUserInfo")
    def ad_user_info(self) -> Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserAdUserInfoArgs']]:
        """
        Specifies an AD User's information logged in using an active directory. This information is not stored on the Cluster.
        """
        return pulumi.get(self, "ad_user_info")

    @ad_user_info.setter
    def ad_user_info(self, value: Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserAdUserInfoArgs']]):
        pulumi.set(self, "ad_user_info", value)

    @_builtins.property
    @pulumi.getter(name="additionalGroupNames")
    def additional_group_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the names of additional groups this User may belong to.
        """
        return pulumi.get(self, "additional_group_names")

    @additional_group_names.setter
    def additional_group_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "additional_group_names", value)

    @_builtins.property
    @pulumi.getter(name="allowDsoModify")
    def allow_dso_modify(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies if the data security user can be modified by the admin users.
        """
        return pulumi.get(self, "allow_dso_modify")

    @allow_dso_modify.setter
    def allow_dso_modify(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_dso_modify", value)

    @_builtins.property
    @pulumi.getter(name="auditLogSettings")
    def audit_log_settings(self) -> Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserAuditLogSettingsArgs']]:
        """
        AuditLogSettings specifies struct with audt log configuration. Make these settings in such a way that zero values are
        cluster default when bb is not present.
        """
        return pulumi.get(self, "audit_log_settings")

    @audit_log_settings.setter
    def audit_log_settings(self, value: Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserAuditLogSettingsArgs']]):
        pulumi.set(self, "audit_log_settings", value)

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the authentication type of the user. 'kAuthLocal' implies authenticated user is a local user. 'kAuthAd'
        implies authenticated user is an Active Directory user. 'kAuthSalesforce' implies authenticated user is a Salesforce
        user. 'kAuthGoogle' implies authenticated user is a Google user. 'kAuthSso' implies authenticated user is an SSO user.
        """
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_type", value)

    @_builtins.property
    @pulumi.getter(name="backupRecoveryConnectorUpdateUserId")
    def backup_recovery_connector_update_user_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "backup_recovery_connector_update_user_id")

    @backup_recovery_connector_update_user_id.setter
    def backup_recovery_connector_update_user_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_recovery_connector_update_user_id", value)

    @_builtins.property
    @pulumi.getter(name="clusterIdentifiers")
    def cluster_identifiers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryConnectorUpdateUserClusterIdentifierArgs']]]]:
        """
        Specifies the list of clusters this user has access to. If this is not specified, access will be granted to all
        clusters.
        """
        return pulumi.get(self, "cluster_identifiers")

    @cluster_identifiers.setter
    def cluster_identifiers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryConnectorUpdateUserClusterIdentifierArgs']]]]):
        pulumi.set(self, "cluster_identifiers", value)

    @_builtins.property
    @pulumi.getter(name="createdTimeMsecs")
    def created_time_msecs(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the epoch time in milliseconds when the user account was created on the Cohesity Cluster.
        """
        return pulumi.get(self, "created_time_msecs")

    @created_time_msecs.setter
    def created_time_msecs(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "created_time_msecs", value)

    @_builtins.property
    @pulumi.getter(name="currentPassword")
    def current_password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the current password when updating the password.
        """
        return pulumi.get(self, "current_password")

    @current_password.setter
    def current_password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "current_password", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies a description about the user.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the fully qualified domain name (FQDN) of an Active Directory or LOCAL for the default LOCAL domain on the
        Cohesity Cluster. A user is uniquely identified by combination of the username and the domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain", value)

    @_builtins.property
    @pulumi.getter(name="effectiveTimeMsecs")
    def effective_time_msecs(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the epoch time in milliseconds when the user becomes effective. Until that time, the user cannot log in.
        """
        return pulumi.get(self, "effective_time_msecs")

    @effective_time_msecs.setter
    def effective_time_msecs(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "effective_time_msecs", value)

    @_builtins.property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the email address of the user.
        """
        return pulumi.get(self, "email_address")

    @email_address.setter
    def email_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "email_address", value)

    @_builtins.property
    @pulumi.getter(name="expiredTimeMsecs")
    def expired_time_msecs(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the epoch time in milliseconds when the user becomes expired. After that, the user cannot log in.
        """
        return pulumi.get(self, "expired_time_msecs")

    @expired_time_msecs.setter
    def expired_time_msecs(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "expired_time_msecs", value)

    @_builtins.property
    @pulumi.getter(name="forcePasswordChange")
    def force_password_change(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to force user to change password.
        """
        return pulumi.get(self, "force_password_change")

    @force_password_change.setter
    def force_password_change(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "force_password_change", value)

    @_builtins.property
    @pulumi.getter(name="googleAccount")
    def google_account(self) -> Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserGoogleAccountArgs']]:
        """
        Google Account Information of a Helios BaaS user.
        """
        return pulumi.get(self, "google_account")

    @google_account.setter
    def google_account(self, value: Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserGoogleAccountArgs']]):
        pulumi.set(self, "google_account", value)

    @_builtins.property
    @pulumi.getter(name="groupRoles")
    def group_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the Cohesity roles to associate with the user' group. These roles can only be edited from group.
        """
        return pulumi.get(self, "group_roles")

    @group_roles.setter
    def group_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "group_roles", value)

    @_builtins.property
    @pulumi.getter(name="idpUserInfo")
    def idp_user_info(self) -> Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserIdpUserInfoArgs']]:
        """
        Specifies an IdP User's information logged in using an IdP. This information is not stored on the Cluster.
        """
        return pulumi.get(self, "idp_user_info")

    @idp_user_info.setter
    def idp_user_info(self, value: Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserIdpUserInfoArgs']]):
        pulumi.set(self, "idp_user_info", value)

    @_builtins.property
    @pulumi.getter(name="intercomMessengerToken")
    def intercom_messenger_token(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the messenger token for intercom identity verification.
        """
        return pulumi.get(self, "intercom_messenger_token")

    @intercom_messenger_token.setter
    def intercom_messenger_token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "intercom_messenger_token", value)

    @_builtins.property
    @pulumi.getter(name="isAccountLocked")
    def is_account_locked(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the user account is locked.
        """
        return pulumi.get(self, "is_account_locked")

    @is_account_locked.setter
    def is_account_locked(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_account_locked", value)

    @_builtins.property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        IsActive specifies whether or not a user is active, or has been disactivated by the customer. The default behavior is
        'true'.
        """
        return pulumi.get(self, "is_active")

    @is_active.setter
    def is_active(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_active", value)

    @_builtins.property
    @pulumi.getter(name="lastSuccessfulLoginTimeMsecs")
    def last_successful_login_time_msecs(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the epoch time in milliseconds when the user was last logged in successfully.
        """
        return pulumi.get(self, "last_successful_login_time_msecs")

    @last_successful_login_time_msecs.setter
    def last_successful_login_time_msecs(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "last_successful_login_time_msecs", value)

    @_builtins.property
    @pulumi.getter(name="lastUpdatedTimeMsecs")
    def last_updated_time_msecs(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the epoch time in milliseconds when the user account was last modified on the Cohesity Cluster.
        """
        return pulumi.get(self, "last_updated_time_msecs")

    @last_updated_time_msecs.setter
    def last_updated_time_msecs(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "last_updated_time_msecs", value)

    @_builtins.property
    @pulumi.getter(name="mfaInfo")
    def mfa_info(self) -> Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserMfaInfoArgs']]:
        """
        Specifies information about MFA.
        """
        return pulumi.get(self, "mfa_info")

    @mfa_info.setter
    def mfa_info(self, value: Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserMfaInfoArgs']]):
        pulumi.set(self, "mfa_info", value)

    @_builtins.property
    @pulumi.getter(name="mfaMethods")
    def mfa_methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies MFA methods that enabled on the cluster.
        """
        return pulumi.get(self, "mfa_methods")

    @mfa_methods.setter
    def mfa_methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "mfa_methods", value)

    @_builtins.property
    @pulumi.getter(name="objectClass")
    def object_class(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies object class of user, could be either user or group.
        """
        return pulumi.get(self, "object_class")

    @object_class.setter
    def object_class(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "object_class", value)

    @_builtins.property
    @pulumi.getter(name="orgMemberships")
    def org_memberships(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryConnectorUpdateUserOrgMembershipArgs']]]]:
        """
        OrgMembership contains the list of all available tenantIds for this user to switch to. Only when creating the session
        user, this field is populated on the fly. We discover the tenantIds from various groups assigned to the users.
        """
        return pulumi.get(self, "org_memberships")

    @org_memberships.setter
    def org_memberships(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryConnectorUpdateUserOrgMembershipArgs']]]]):
        pulumi.set(self, "org_memberships", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the password of this user.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter
    def preferences(self) -> Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserPreferencesArgs']]:
        """
        Specifies the preferences of this user.
        """
        return pulumi.get(self, "preferences")

    @preferences.setter
    def preferences(self, value: Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserPreferencesArgs']]):
        pulumi.set(self, "preferences", value)

    @_builtins.property
    @pulumi.getter(name="previousLoginTimeMsecs")
    def previous_login_time_msecs(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the epoch time in milliseconds of previous user login.
        """
        return pulumi.get(self, "previous_login_time_msecs")

    @previous_login_time_msecs.setter
    def previous_login_time_msecs(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "previous_login_time_msecs", value)

    @_builtins.property
    @pulumi.getter(name="primaryGroupName")
    def primary_group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the primary group of this User.
        """
        return pulumi.get(self, "primary_group_name")

    @primary_group_name.setter
    def primary_group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "primary_group_name", value)

    @_builtins.property
    @pulumi.getter(name="privilegeIds")
    def privilege_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the Cohesity privileges from the roles. This will be populated based on the union of all privileges in roles.
        Type for unique privilege Id values. All below enum values specify a value for all uniquely defined privileges in
        Cohesity.
        """
        return pulumi.get(self, "privilege_ids")

    @privilege_ids.setter
    def privilege_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "privilege_ids", value)

    @_builtins.property
    @pulumi.getter
    def profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryConnectorUpdateUserProfileArgs']]]]:
        """
        Specifies the user profiles. NOTE:- Currently used for Helios.
        """
        return pulumi.get(self, "profiles")

    @profiles.setter
    def profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryConnectorUpdateUserProfileArgs']]]]):
        pulumi.set(self, "profiles", value)

    @_builtins.property
    @pulumi.getter
    def restricted(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the user is a restricted user. A restricted user can only view the objects he has permissions to.
        """
        return pulumi.get(self, "restricted")

    @restricted.setter
    def restricted(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "restricted", value)

    @_builtins.property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the Cohesity roles to associate with the user such as such as 'Admin', 'Ops' or 'View'. The Cohesity roles
        determine privileges on the Cohesity Cluster for this user.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "roles", value)

    @_builtins.property
    @pulumi.getter(name="s3AccessKeyId")
    def s3_access_key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the S3 Account Access Key ID.
        """
        return pulumi.get(self, "s3_access_key_id")

    @s3_access_key_id.setter
    def s3_access_key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "s3_access_key_id", value)

    @_builtins.property
    @pulumi.getter(name="s3AccountId")
    def s3_account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the S3 Account Canonical User ID.
        """
        return pulumi.get(self, "s3_account_id")

    @s3_account_id.setter
    def s3_account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "s3_account_id", value)

    @_builtins.property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the S3 Account Secret Key.
        """
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "s3_secret_key", value)

    @_builtins.property
    @pulumi.getter(name="salesforceAccount")
    def salesforce_account(self) -> Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserSalesforceAccountArgs']]:
        """
        Salesforce Account Information of a Helios user.
        """
        return pulumi.get(self, "salesforce_account")

    @salesforce_account.setter
    def salesforce_account(self, value: Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserSalesforceAccountArgs']]):
        pulumi.set(self, "salesforce_account", value)

    @_builtins.property
    @pulumi.getter
    def sid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the unique Security ID (SID) of the user. This field is mandatory in modifying user.
        """
        return pulumi.get(self, "sid")

    @sid.setter
    def sid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sid", value)

    @_builtins.property
    @pulumi.getter(name="spogContext")
    def spog_context(self) -> Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserSpogContextArgs']]:
        """
        SpogContext specifies all of the information about the user and cluster which is performing action on this cluster.
        """
        return pulumi.get(self, "spog_context")

    @spog_context.setter
    def spog_context(self, value: Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserSpogContextArgs']]):
        pulumi.set(self, "spog_context", value)

    @_builtins.property
    @pulumi.getter(name="subscriptionInfo")
    def subscription_info(self) -> Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserSubscriptionInfoArgs']]:
        """
        Extends this to have Helios, DRaaS and DSaaS.
        """
        return pulumi.get(self, "subscription_info")

    @subscription_info.setter
    def subscription_info(self, value: Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserSubscriptionInfoArgs']]):
        pulumi.set(self, "subscription_info", value)

    @_builtins.property
    @pulumi.getter(name="tenantAccesses")
    def tenant_accesses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryConnectorUpdateUserTenantAccessArgs']]]]:
        """
        Specfies the Tenant Access for MCM User.
        """
        return pulumi.get(self, "tenant_accesses")

    @tenant_accesses.setter
    def tenant_accesses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryConnectorUpdateUserTenantAccessArgs']]]]):
        pulumi.set(self, "tenant_accesses", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the effective Tenant ID of the user.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tenant_id", value)

    @_builtins.property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the login name of the user.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class _BackupRecoveryConnectorUpdateUserState:
    def __init__(__self__, *,
                 ad_user_info: Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserAdUserInfoArgs']] = None,
                 additional_group_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 allow_dso_modify: Optional[pulumi.Input[_builtins.bool]] = None,
                 audit_log_settings: Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserAuditLogSettingsArgs']] = None,
                 authentication_type: Optional[pulumi.Input[_builtins.str]] = None,
                 backup_recovery_connector_update_user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_identifiers: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryConnectorUpdateUserClusterIdentifierArgs']]]] = None,
                 created_time_msecs: Optional[pulumi.Input[_builtins.float]] = None,
                 current_password: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 domain: Optional[pulumi.Input[_builtins.str]] = None,
                 effective_time_msecs: Optional[pulumi.Input[_builtins.float]] = None,
                 email_address: Optional[pulumi.Input[_builtins.str]] = None,
                 expired_time_msecs: Optional[pulumi.Input[_builtins.float]] = None,
                 force_password_change: Optional[pulumi.Input[_builtins.bool]] = None,
                 google_account: Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserGoogleAccountArgs']] = None,
                 group_roles: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 idp_user_info: Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserIdpUserInfoArgs']] = None,
                 intercom_messenger_token: Optional[pulumi.Input[_builtins.str]] = None,
                 is_account_locked: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_account_mfa_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_active: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_cluster_mfa_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 last_successful_login_time_msecs: Optional[pulumi.Input[_builtins.float]] = None,
                 last_updated_time_msecs: Optional[pulumi.Input[_builtins.float]] = None,
                 mfa_info: Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserMfaInfoArgs']] = None,
                 mfa_methods: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 object_class: Optional[pulumi.Input[_builtins.str]] = None,
                 org_memberships: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryConnectorUpdateUserOrgMembershipArgs']]]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 preferences: Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserPreferencesArgs']] = None,
                 previous_login_time_msecs: Optional[pulumi.Input[_builtins.float]] = None,
                 primary_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 privilege_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 profiles: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryConnectorUpdateUserProfileArgs']]]] = None,
                 restricted: Optional[pulumi.Input[_builtins.bool]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 s3_access_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 s3_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 s3_secret_key: Optional[pulumi.Input[_builtins.str]] = None,
                 salesforce_account: Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserSalesforceAccountArgs']] = None,
                 session_name_cookie: Optional[pulumi.Input[_builtins.str]] = None,
                 sid: Optional[pulumi.Input[_builtins.str]] = None,
                 spog_context: Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserSpogContextArgs']] = None,
                 subscription_info: Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserSubscriptionInfoArgs']] = None,
                 tenant_accesses: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryConnectorUpdateUserTenantAccessArgs']]]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 username: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering BackupRecoveryConnectorUpdateUser resources.
        :param pulumi.Input['BackupRecoveryConnectorUpdateUserAdUserInfoArgs'] ad_user_info: Specifies an AD User's information logged in using an active directory. This information is not stored on the Cluster.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] additional_group_names: Specifies the names of additional groups this User may belong to.
        :param pulumi.Input[_builtins.bool] allow_dso_modify: Specifies if the data security user can be modified by the admin users.
        :param pulumi.Input['BackupRecoveryConnectorUpdateUserAuditLogSettingsArgs'] audit_log_settings: AuditLogSettings specifies struct with audt log configuration. Make these settings in such a way that zero values are
               cluster default when bb is not present.
        :param pulumi.Input[_builtins.str] authentication_type: Specifies the authentication type of the user. 'kAuthLocal' implies authenticated user is a local user. 'kAuthAd'
               implies authenticated user is an Active Directory user. 'kAuthSalesforce' implies authenticated user is a Salesforce
               user. 'kAuthGoogle' implies authenticated user is a Google user. 'kAuthSso' implies authenticated user is an SSO user.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoveryConnectorUpdateUserClusterIdentifierArgs']]] cluster_identifiers: Specifies the list of clusters this user has access to. If this is not specified, access will be granted to all
               clusters.
        :param pulumi.Input[_builtins.float] created_time_msecs: Specifies the epoch time in milliseconds when the user account was created on the Cohesity Cluster.
        :param pulumi.Input[_builtins.str] current_password: Specifies the current password when updating the password.
        :param pulumi.Input[_builtins.str] description: Specifies a description about the user.
        :param pulumi.Input[_builtins.str] domain: Specifies the fully qualified domain name (FQDN) of an Active Directory or LOCAL for the default LOCAL domain on the
               Cohesity Cluster. A user is uniquely identified by combination of the username and the domain.
        :param pulumi.Input[_builtins.float] effective_time_msecs: Specifies the epoch time in milliseconds when the user becomes effective. Until that time, the user cannot log in.
        :param pulumi.Input[_builtins.str] email_address: Specifies the email address of the user.
        :param pulumi.Input[_builtins.float] expired_time_msecs: Specifies the epoch time in milliseconds when the user becomes expired. After that, the user cannot log in.
        :param pulumi.Input[_builtins.bool] force_password_change: Specifies whether to force user to change password.
        :param pulumi.Input['BackupRecoveryConnectorUpdateUserGoogleAccountArgs'] google_account: Google Account Information of a Helios BaaS user.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] group_roles: Specifies the Cohesity roles to associate with the user' group. These roles can only be edited from group.
        :param pulumi.Input['BackupRecoveryConnectorUpdateUserIdpUserInfoArgs'] idp_user_info: Specifies an IdP User's information logged in using an IdP. This information is not stored on the Cluster.
        :param pulumi.Input[_builtins.str] intercom_messenger_token: Specifies the messenger token for intercom identity verification.
        :param pulumi.Input[_builtins.bool] is_account_locked: Specifies whether the user account is locked.
        :param pulumi.Input[_builtins.bool] is_account_mfa_enabled: Specifies if MFA is enabled for the Helios Account.
        :param pulumi.Input[_builtins.bool] is_active: IsActive specifies whether or not a user is active, or has been disactivated by the customer. The default behavior is
               'true'.
        :param pulumi.Input[_builtins.bool] is_cluster_mfa_enabled: Specifies if MFA is enabled on cluster.
        :param pulumi.Input[_builtins.float] last_successful_login_time_msecs: Specifies the epoch time in milliseconds when the user was last logged in successfully.
        :param pulumi.Input[_builtins.float] last_updated_time_msecs: Specifies the epoch time in milliseconds when the user account was last modified on the Cohesity Cluster.
        :param pulumi.Input['BackupRecoveryConnectorUpdateUserMfaInfoArgs'] mfa_info: Specifies information about MFA.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] mfa_methods: Specifies MFA methods that enabled on the cluster.
        :param pulumi.Input[_builtins.str] object_class: Specifies object class of user, could be either user or group.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoveryConnectorUpdateUserOrgMembershipArgs']]] org_memberships: OrgMembership contains the list of all available tenantIds for this user to switch to. Only when creating the session
               user, this field is populated on the fly. We discover the tenantIds from various groups assigned to the users.
        :param pulumi.Input[_builtins.str] password: Specifies the password of this user.
        :param pulumi.Input['BackupRecoveryConnectorUpdateUserPreferencesArgs'] preferences: Specifies the preferences of this user.
        :param pulumi.Input[_builtins.float] previous_login_time_msecs: Specifies the epoch time in milliseconds of previous user login.
        :param pulumi.Input[_builtins.str] primary_group_name: Specifies the name of the primary group of this User.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] privilege_ids: Specifies the Cohesity privileges from the roles. This will be populated based on the union of all privileges in roles.
               Type for unique privilege Id values. All below enum values specify a value for all uniquely defined privileges in
               Cohesity.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoveryConnectorUpdateUserProfileArgs']]] profiles: Specifies the user profiles. NOTE:- Currently used for Helios.
        :param pulumi.Input[_builtins.bool] restricted: Whether the user is a restricted user. A restricted user can only view the objects he has permissions to.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] roles: Specifies the Cohesity roles to associate with the user such as such as 'Admin', 'Ops' or 'View'. The Cohesity roles
               determine privileges on the Cohesity Cluster for this user.
        :param pulumi.Input[_builtins.str] s3_access_key_id: Specifies the S3 Account Access Key ID.
        :param pulumi.Input[_builtins.str] s3_account_id: Specifies the S3 Account Canonical User ID.
        :param pulumi.Input[_builtins.str] s3_secret_key: Specifies the S3 Account Secret Key.
        :param pulumi.Input['BackupRecoveryConnectorUpdateUserSalesforceAccountArgs'] salesforce_account: Salesforce Account Information of a Helios user.
        :param pulumi.Input[_builtins.str] session_name_cookie: Specifies the session name cookie of the Cohesity user.
        :param pulumi.Input[_builtins.str] sid: Specifies the unique Security ID (SID) of the user. This field is mandatory in modifying user.
        :param pulumi.Input['BackupRecoveryConnectorUpdateUserSpogContextArgs'] spog_context: SpogContext specifies all of the information about the user and cluster which is performing action on this cluster.
        :param pulumi.Input['BackupRecoveryConnectorUpdateUserSubscriptionInfoArgs'] subscription_info: Extends this to have Helios, DRaaS and DSaaS.
        :param pulumi.Input[Sequence[pulumi.Input['BackupRecoveryConnectorUpdateUserTenantAccessArgs']]] tenant_accesses: Specfies the Tenant Access for MCM User.
        :param pulumi.Input[_builtins.str] tenant_id: Specifies the effective Tenant ID of the user.
        :param pulumi.Input[_builtins.str] username: Specifies the login name of the user.
        """
        if ad_user_info is not None:
            pulumi.set(__self__, "ad_user_info", ad_user_info)
        if additional_group_names is not None:
            pulumi.set(__self__, "additional_group_names", additional_group_names)
        if allow_dso_modify is not None:
            pulumi.set(__self__, "allow_dso_modify", allow_dso_modify)
        if audit_log_settings is not None:
            pulumi.set(__self__, "audit_log_settings", audit_log_settings)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if backup_recovery_connector_update_user_id is not None:
            pulumi.set(__self__, "backup_recovery_connector_update_user_id", backup_recovery_connector_update_user_id)
        if cluster_identifiers is not None:
            pulumi.set(__self__, "cluster_identifiers", cluster_identifiers)
        if created_time_msecs is not None:
            pulumi.set(__self__, "created_time_msecs", created_time_msecs)
        if current_password is not None:
            pulumi.set(__self__, "current_password", current_password)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if effective_time_msecs is not None:
            pulumi.set(__self__, "effective_time_msecs", effective_time_msecs)
        if email_address is not None:
            pulumi.set(__self__, "email_address", email_address)
        if expired_time_msecs is not None:
            pulumi.set(__self__, "expired_time_msecs", expired_time_msecs)
        if force_password_change is not None:
            pulumi.set(__self__, "force_password_change", force_password_change)
        if google_account is not None:
            pulumi.set(__self__, "google_account", google_account)
        if group_roles is not None:
            pulumi.set(__self__, "group_roles", group_roles)
        if idp_user_info is not None:
            pulumi.set(__self__, "idp_user_info", idp_user_info)
        if intercom_messenger_token is not None:
            pulumi.set(__self__, "intercom_messenger_token", intercom_messenger_token)
        if is_account_locked is not None:
            pulumi.set(__self__, "is_account_locked", is_account_locked)
        if is_account_mfa_enabled is not None:
            pulumi.set(__self__, "is_account_mfa_enabled", is_account_mfa_enabled)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if is_cluster_mfa_enabled is not None:
            pulumi.set(__self__, "is_cluster_mfa_enabled", is_cluster_mfa_enabled)
        if last_successful_login_time_msecs is not None:
            pulumi.set(__self__, "last_successful_login_time_msecs", last_successful_login_time_msecs)
        if last_updated_time_msecs is not None:
            pulumi.set(__self__, "last_updated_time_msecs", last_updated_time_msecs)
        if mfa_info is not None:
            pulumi.set(__self__, "mfa_info", mfa_info)
        if mfa_methods is not None:
            pulumi.set(__self__, "mfa_methods", mfa_methods)
        if object_class is not None:
            pulumi.set(__self__, "object_class", object_class)
        if org_memberships is not None:
            pulumi.set(__self__, "org_memberships", org_memberships)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if preferences is not None:
            pulumi.set(__self__, "preferences", preferences)
        if previous_login_time_msecs is not None:
            pulumi.set(__self__, "previous_login_time_msecs", previous_login_time_msecs)
        if primary_group_name is not None:
            pulumi.set(__self__, "primary_group_name", primary_group_name)
        if privilege_ids is not None:
            pulumi.set(__self__, "privilege_ids", privilege_ids)
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)
        if restricted is not None:
            pulumi.set(__self__, "restricted", restricted)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if s3_access_key_id is not None:
            pulumi.set(__self__, "s3_access_key_id", s3_access_key_id)
        if s3_account_id is not None:
            pulumi.set(__self__, "s3_account_id", s3_account_id)
        if s3_secret_key is not None:
            pulumi.set(__self__, "s3_secret_key", s3_secret_key)
        if salesforce_account is not None:
            pulumi.set(__self__, "salesforce_account", salesforce_account)
        if session_name_cookie is not None:
            pulumi.set(__self__, "session_name_cookie", session_name_cookie)
        if sid is not None:
            pulumi.set(__self__, "sid", sid)
        if spog_context is not None:
            pulumi.set(__self__, "spog_context", spog_context)
        if subscription_info is not None:
            pulumi.set(__self__, "subscription_info", subscription_info)
        if tenant_accesses is not None:
            pulumi.set(__self__, "tenant_accesses", tenant_accesses)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter(name="adUserInfo")
    def ad_user_info(self) -> Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserAdUserInfoArgs']]:
        """
        Specifies an AD User's information logged in using an active directory. This information is not stored on the Cluster.
        """
        return pulumi.get(self, "ad_user_info")

    @ad_user_info.setter
    def ad_user_info(self, value: Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserAdUserInfoArgs']]):
        pulumi.set(self, "ad_user_info", value)

    @_builtins.property
    @pulumi.getter(name="additionalGroupNames")
    def additional_group_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the names of additional groups this User may belong to.
        """
        return pulumi.get(self, "additional_group_names")

    @additional_group_names.setter
    def additional_group_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "additional_group_names", value)

    @_builtins.property
    @pulumi.getter(name="allowDsoModify")
    def allow_dso_modify(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies if the data security user can be modified by the admin users.
        """
        return pulumi.get(self, "allow_dso_modify")

    @allow_dso_modify.setter
    def allow_dso_modify(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_dso_modify", value)

    @_builtins.property
    @pulumi.getter(name="auditLogSettings")
    def audit_log_settings(self) -> Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserAuditLogSettingsArgs']]:
        """
        AuditLogSettings specifies struct with audt log configuration. Make these settings in such a way that zero values are
        cluster default when bb is not present.
        """
        return pulumi.get(self, "audit_log_settings")

    @audit_log_settings.setter
    def audit_log_settings(self, value: Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserAuditLogSettingsArgs']]):
        pulumi.set(self, "audit_log_settings", value)

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the authentication type of the user. 'kAuthLocal' implies authenticated user is a local user. 'kAuthAd'
        implies authenticated user is an Active Directory user. 'kAuthSalesforce' implies authenticated user is a Salesforce
        user. 'kAuthGoogle' implies authenticated user is a Google user. 'kAuthSso' implies authenticated user is an SSO user.
        """
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authentication_type", value)

    @_builtins.property
    @pulumi.getter(name="backupRecoveryConnectorUpdateUserId")
    def backup_recovery_connector_update_user_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "backup_recovery_connector_update_user_id")

    @backup_recovery_connector_update_user_id.setter
    def backup_recovery_connector_update_user_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_recovery_connector_update_user_id", value)

    @_builtins.property
    @pulumi.getter(name="clusterIdentifiers")
    def cluster_identifiers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryConnectorUpdateUserClusterIdentifierArgs']]]]:
        """
        Specifies the list of clusters this user has access to. If this is not specified, access will be granted to all
        clusters.
        """
        return pulumi.get(self, "cluster_identifiers")

    @cluster_identifiers.setter
    def cluster_identifiers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryConnectorUpdateUserClusterIdentifierArgs']]]]):
        pulumi.set(self, "cluster_identifiers", value)

    @_builtins.property
    @pulumi.getter(name="createdTimeMsecs")
    def created_time_msecs(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the epoch time in milliseconds when the user account was created on the Cohesity Cluster.
        """
        return pulumi.get(self, "created_time_msecs")

    @created_time_msecs.setter
    def created_time_msecs(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "created_time_msecs", value)

    @_builtins.property
    @pulumi.getter(name="currentPassword")
    def current_password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the current password when updating the password.
        """
        return pulumi.get(self, "current_password")

    @current_password.setter
    def current_password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "current_password", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies a description about the user.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the fully qualified domain name (FQDN) of an Active Directory or LOCAL for the default LOCAL domain on the
        Cohesity Cluster. A user is uniquely identified by combination of the username and the domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "domain", value)

    @_builtins.property
    @pulumi.getter(name="effectiveTimeMsecs")
    def effective_time_msecs(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the epoch time in milliseconds when the user becomes effective. Until that time, the user cannot log in.
        """
        return pulumi.get(self, "effective_time_msecs")

    @effective_time_msecs.setter
    def effective_time_msecs(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "effective_time_msecs", value)

    @_builtins.property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the email address of the user.
        """
        return pulumi.get(self, "email_address")

    @email_address.setter
    def email_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "email_address", value)

    @_builtins.property
    @pulumi.getter(name="expiredTimeMsecs")
    def expired_time_msecs(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the epoch time in milliseconds when the user becomes expired. After that, the user cannot log in.
        """
        return pulumi.get(self, "expired_time_msecs")

    @expired_time_msecs.setter
    def expired_time_msecs(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "expired_time_msecs", value)

    @_builtins.property
    @pulumi.getter(name="forcePasswordChange")
    def force_password_change(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether to force user to change password.
        """
        return pulumi.get(self, "force_password_change")

    @force_password_change.setter
    def force_password_change(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "force_password_change", value)

    @_builtins.property
    @pulumi.getter(name="googleAccount")
    def google_account(self) -> Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserGoogleAccountArgs']]:
        """
        Google Account Information of a Helios BaaS user.
        """
        return pulumi.get(self, "google_account")

    @google_account.setter
    def google_account(self, value: Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserGoogleAccountArgs']]):
        pulumi.set(self, "google_account", value)

    @_builtins.property
    @pulumi.getter(name="groupRoles")
    def group_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the Cohesity roles to associate with the user' group. These roles can only be edited from group.
        """
        return pulumi.get(self, "group_roles")

    @group_roles.setter
    def group_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "group_roles", value)

    @_builtins.property
    @pulumi.getter(name="idpUserInfo")
    def idp_user_info(self) -> Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserIdpUserInfoArgs']]:
        """
        Specifies an IdP User's information logged in using an IdP. This information is not stored on the Cluster.
        """
        return pulumi.get(self, "idp_user_info")

    @idp_user_info.setter
    def idp_user_info(self, value: Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserIdpUserInfoArgs']]):
        pulumi.set(self, "idp_user_info", value)

    @_builtins.property
    @pulumi.getter(name="intercomMessengerToken")
    def intercom_messenger_token(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the messenger token for intercom identity verification.
        """
        return pulumi.get(self, "intercom_messenger_token")

    @intercom_messenger_token.setter
    def intercom_messenger_token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "intercom_messenger_token", value)

    @_builtins.property
    @pulumi.getter(name="isAccountLocked")
    def is_account_locked(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies whether the user account is locked.
        """
        return pulumi.get(self, "is_account_locked")

    @is_account_locked.setter
    def is_account_locked(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_account_locked", value)

    @_builtins.property
    @pulumi.getter(name="isAccountMfaEnabled")
    def is_account_mfa_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies if MFA is enabled for the Helios Account.
        """
        return pulumi.get(self, "is_account_mfa_enabled")

    @is_account_mfa_enabled.setter
    def is_account_mfa_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_account_mfa_enabled", value)

    @_builtins.property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        IsActive specifies whether or not a user is active, or has been disactivated by the customer. The default behavior is
        'true'.
        """
        return pulumi.get(self, "is_active")

    @is_active.setter
    def is_active(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_active", value)

    @_builtins.property
    @pulumi.getter(name="isClusterMfaEnabled")
    def is_cluster_mfa_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Specifies if MFA is enabled on cluster.
        """
        return pulumi.get(self, "is_cluster_mfa_enabled")

    @is_cluster_mfa_enabled.setter
    def is_cluster_mfa_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_cluster_mfa_enabled", value)

    @_builtins.property
    @pulumi.getter(name="lastSuccessfulLoginTimeMsecs")
    def last_successful_login_time_msecs(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the epoch time in milliseconds when the user was last logged in successfully.
        """
        return pulumi.get(self, "last_successful_login_time_msecs")

    @last_successful_login_time_msecs.setter
    def last_successful_login_time_msecs(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "last_successful_login_time_msecs", value)

    @_builtins.property
    @pulumi.getter(name="lastUpdatedTimeMsecs")
    def last_updated_time_msecs(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the epoch time in milliseconds when the user account was last modified on the Cohesity Cluster.
        """
        return pulumi.get(self, "last_updated_time_msecs")

    @last_updated_time_msecs.setter
    def last_updated_time_msecs(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "last_updated_time_msecs", value)

    @_builtins.property
    @pulumi.getter(name="mfaInfo")
    def mfa_info(self) -> Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserMfaInfoArgs']]:
        """
        Specifies information about MFA.
        """
        return pulumi.get(self, "mfa_info")

    @mfa_info.setter
    def mfa_info(self, value: Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserMfaInfoArgs']]):
        pulumi.set(self, "mfa_info", value)

    @_builtins.property
    @pulumi.getter(name="mfaMethods")
    def mfa_methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies MFA methods that enabled on the cluster.
        """
        return pulumi.get(self, "mfa_methods")

    @mfa_methods.setter
    def mfa_methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "mfa_methods", value)

    @_builtins.property
    @pulumi.getter(name="objectClass")
    def object_class(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies object class of user, could be either user or group.
        """
        return pulumi.get(self, "object_class")

    @object_class.setter
    def object_class(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "object_class", value)

    @_builtins.property
    @pulumi.getter(name="orgMemberships")
    def org_memberships(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryConnectorUpdateUserOrgMembershipArgs']]]]:
        """
        OrgMembership contains the list of all available tenantIds for this user to switch to. Only when creating the session
        user, this field is populated on the fly. We discover the tenantIds from various groups assigned to the users.
        """
        return pulumi.get(self, "org_memberships")

    @org_memberships.setter
    def org_memberships(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryConnectorUpdateUserOrgMembershipArgs']]]]):
        pulumi.set(self, "org_memberships", value)

    @_builtins.property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the password of this user.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "password", value)

    @_builtins.property
    @pulumi.getter
    def preferences(self) -> Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserPreferencesArgs']]:
        """
        Specifies the preferences of this user.
        """
        return pulumi.get(self, "preferences")

    @preferences.setter
    def preferences(self, value: Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserPreferencesArgs']]):
        pulumi.set(self, "preferences", value)

    @_builtins.property
    @pulumi.getter(name="previousLoginTimeMsecs")
    def previous_login_time_msecs(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Specifies the epoch time in milliseconds of previous user login.
        """
        return pulumi.get(self, "previous_login_time_msecs")

    @previous_login_time_msecs.setter
    def previous_login_time_msecs(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "previous_login_time_msecs", value)

    @_builtins.property
    @pulumi.getter(name="primaryGroupName")
    def primary_group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the primary group of this User.
        """
        return pulumi.get(self, "primary_group_name")

    @primary_group_name.setter
    def primary_group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "primary_group_name", value)

    @_builtins.property
    @pulumi.getter(name="privilegeIds")
    def privilege_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the Cohesity privileges from the roles. This will be populated based on the union of all privileges in roles.
        Type for unique privilege Id values. All below enum values specify a value for all uniquely defined privileges in
        Cohesity.
        """
        return pulumi.get(self, "privilege_ids")

    @privilege_ids.setter
    def privilege_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "privilege_ids", value)

    @_builtins.property
    @pulumi.getter
    def profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryConnectorUpdateUserProfileArgs']]]]:
        """
        Specifies the user profiles. NOTE:- Currently used for Helios.
        """
        return pulumi.get(self, "profiles")

    @profiles.setter
    def profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryConnectorUpdateUserProfileArgs']]]]):
        pulumi.set(self, "profiles", value)

    @_builtins.property
    @pulumi.getter
    def restricted(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the user is a restricted user. A restricted user can only view the objects he has permissions to.
        """
        return pulumi.get(self, "restricted")

    @restricted.setter
    def restricted(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "restricted", value)

    @_builtins.property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the Cohesity roles to associate with the user such as such as 'Admin', 'Ops' or 'View'. The Cohesity roles
        determine privileges on the Cohesity Cluster for this user.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "roles", value)

    @_builtins.property
    @pulumi.getter(name="s3AccessKeyId")
    def s3_access_key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the S3 Account Access Key ID.
        """
        return pulumi.get(self, "s3_access_key_id")

    @s3_access_key_id.setter
    def s3_access_key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "s3_access_key_id", value)

    @_builtins.property
    @pulumi.getter(name="s3AccountId")
    def s3_account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the S3 Account Canonical User ID.
        """
        return pulumi.get(self, "s3_account_id")

    @s3_account_id.setter
    def s3_account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "s3_account_id", value)

    @_builtins.property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the S3 Account Secret Key.
        """
        return pulumi.get(self, "s3_secret_key")

    @s3_secret_key.setter
    def s3_secret_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "s3_secret_key", value)

    @_builtins.property
    @pulumi.getter(name="salesforceAccount")
    def salesforce_account(self) -> Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserSalesforceAccountArgs']]:
        """
        Salesforce Account Information of a Helios user.
        """
        return pulumi.get(self, "salesforce_account")

    @salesforce_account.setter
    def salesforce_account(self, value: Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserSalesforceAccountArgs']]):
        pulumi.set(self, "salesforce_account", value)

    @_builtins.property
    @pulumi.getter(name="sessionNameCookie")
    def session_name_cookie(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the session name cookie of the Cohesity user.
        """
        return pulumi.get(self, "session_name_cookie")

    @session_name_cookie.setter
    def session_name_cookie(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "session_name_cookie", value)

    @_builtins.property
    @pulumi.getter
    def sid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the unique Security ID (SID) of the user. This field is mandatory in modifying user.
        """
        return pulumi.get(self, "sid")

    @sid.setter
    def sid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sid", value)

    @_builtins.property
    @pulumi.getter(name="spogContext")
    def spog_context(self) -> Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserSpogContextArgs']]:
        """
        SpogContext specifies all of the information about the user and cluster which is performing action on this cluster.
        """
        return pulumi.get(self, "spog_context")

    @spog_context.setter
    def spog_context(self, value: Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserSpogContextArgs']]):
        pulumi.set(self, "spog_context", value)

    @_builtins.property
    @pulumi.getter(name="subscriptionInfo")
    def subscription_info(self) -> Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserSubscriptionInfoArgs']]:
        """
        Extends this to have Helios, DRaaS and DSaaS.
        """
        return pulumi.get(self, "subscription_info")

    @subscription_info.setter
    def subscription_info(self, value: Optional[pulumi.Input['BackupRecoveryConnectorUpdateUserSubscriptionInfoArgs']]):
        pulumi.set(self, "subscription_info", value)

    @_builtins.property
    @pulumi.getter(name="tenantAccesses")
    def tenant_accesses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryConnectorUpdateUserTenantAccessArgs']]]]:
        """
        Specfies the Tenant Access for MCM User.
        """
        return pulumi.get(self, "tenant_accesses")

    @tenant_accesses.setter
    def tenant_accesses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BackupRecoveryConnectorUpdateUserTenantAccessArgs']]]]):
        pulumi.set(self, "tenant_accesses", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the effective Tenant ID of the user.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tenant_id", value)

    @_builtins.property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the login name of the user.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "username", value)


@pulumi.type_token("ibm:index/backupRecoveryConnectorUpdateUser:BackupRecoveryConnectorUpdateUser")
class BackupRecoveryConnectorUpdateUser(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ad_user_info: Optional[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserAdUserInfoArgs', 'BackupRecoveryConnectorUpdateUserAdUserInfoArgsDict']]] = None,
                 additional_group_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 allow_dso_modify: Optional[pulumi.Input[_builtins.bool]] = None,
                 audit_log_settings: Optional[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserAuditLogSettingsArgs', 'BackupRecoveryConnectorUpdateUserAuditLogSettingsArgsDict']]] = None,
                 authentication_type: Optional[pulumi.Input[_builtins.str]] = None,
                 backup_recovery_connector_update_user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_identifiers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserClusterIdentifierArgs', 'BackupRecoveryConnectorUpdateUserClusterIdentifierArgsDict']]]]] = None,
                 created_time_msecs: Optional[pulumi.Input[_builtins.float]] = None,
                 current_password: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 domain: Optional[pulumi.Input[_builtins.str]] = None,
                 effective_time_msecs: Optional[pulumi.Input[_builtins.float]] = None,
                 email_address: Optional[pulumi.Input[_builtins.str]] = None,
                 expired_time_msecs: Optional[pulumi.Input[_builtins.float]] = None,
                 force_password_change: Optional[pulumi.Input[_builtins.bool]] = None,
                 google_account: Optional[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserGoogleAccountArgs', 'BackupRecoveryConnectorUpdateUserGoogleAccountArgsDict']]] = None,
                 group_roles: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 idp_user_info: Optional[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserIdpUserInfoArgs', 'BackupRecoveryConnectorUpdateUserIdpUserInfoArgsDict']]] = None,
                 intercom_messenger_token: Optional[pulumi.Input[_builtins.str]] = None,
                 is_account_locked: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_active: Optional[pulumi.Input[_builtins.bool]] = None,
                 last_successful_login_time_msecs: Optional[pulumi.Input[_builtins.float]] = None,
                 last_updated_time_msecs: Optional[pulumi.Input[_builtins.float]] = None,
                 mfa_info: Optional[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserMfaInfoArgs', 'BackupRecoveryConnectorUpdateUserMfaInfoArgsDict']]] = None,
                 mfa_methods: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 object_class: Optional[pulumi.Input[_builtins.str]] = None,
                 org_memberships: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserOrgMembershipArgs', 'BackupRecoveryConnectorUpdateUserOrgMembershipArgsDict']]]]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 preferences: Optional[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserPreferencesArgs', 'BackupRecoveryConnectorUpdateUserPreferencesArgsDict']]] = None,
                 previous_login_time_msecs: Optional[pulumi.Input[_builtins.float]] = None,
                 primary_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 privilege_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 profiles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserProfileArgs', 'BackupRecoveryConnectorUpdateUserProfileArgsDict']]]]] = None,
                 restricted: Optional[pulumi.Input[_builtins.bool]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 s3_access_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 s3_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 s3_secret_key: Optional[pulumi.Input[_builtins.str]] = None,
                 salesforce_account: Optional[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserSalesforceAccountArgs', 'BackupRecoveryConnectorUpdateUserSalesforceAccountArgsDict']]] = None,
                 session_name_cookie: Optional[pulumi.Input[_builtins.str]] = None,
                 sid: Optional[pulumi.Input[_builtins.str]] = None,
                 spog_context: Optional[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserSpogContextArgs', 'BackupRecoveryConnectorUpdateUserSpogContextArgsDict']]] = None,
                 subscription_info: Optional[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserSubscriptionInfoArgs', 'BackupRecoveryConnectorUpdateUserSubscriptionInfoArgsDict']]] = None,
                 tenant_accesses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserTenantAccessArgs', 'BackupRecoveryConnectorUpdateUserTenantAccessArgsDict']]]]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 username: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a BackupRecoveryConnectorUpdateUser resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['BackupRecoveryConnectorUpdateUserAdUserInfoArgs', 'BackupRecoveryConnectorUpdateUserAdUserInfoArgsDict']] ad_user_info: Specifies an AD User's information logged in using an active directory. This information is not stored on the Cluster.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] additional_group_names: Specifies the names of additional groups this User may belong to.
        :param pulumi.Input[_builtins.bool] allow_dso_modify: Specifies if the data security user can be modified by the admin users.
        :param pulumi.Input[Union['BackupRecoveryConnectorUpdateUserAuditLogSettingsArgs', 'BackupRecoveryConnectorUpdateUserAuditLogSettingsArgsDict']] audit_log_settings: AuditLogSettings specifies struct with audt log configuration. Make these settings in such a way that zero values are
               cluster default when bb is not present.
        :param pulumi.Input[_builtins.str] authentication_type: Specifies the authentication type of the user. 'kAuthLocal' implies authenticated user is a local user. 'kAuthAd'
               implies authenticated user is an Active Directory user. 'kAuthSalesforce' implies authenticated user is a Salesforce
               user. 'kAuthGoogle' implies authenticated user is a Google user. 'kAuthSso' implies authenticated user is an SSO user.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserClusterIdentifierArgs', 'BackupRecoveryConnectorUpdateUserClusterIdentifierArgsDict']]]] cluster_identifiers: Specifies the list of clusters this user has access to. If this is not specified, access will be granted to all
               clusters.
        :param pulumi.Input[_builtins.float] created_time_msecs: Specifies the epoch time in milliseconds when the user account was created on the Cohesity Cluster.
        :param pulumi.Input[_builtins.str] current_password: Specifies the current password when updating the password.
        :param pulumi.Input[_builtins.str] description: Specifies a description about the user.
        :param pulumi.Input[_builtins.str] domain: Specifies the fully qualified domain name (FQDN) of an Active Directory or LOCAL for the default LOCAL domain on the
               Cohesity Cluster. A user is uniquely identified by combination of the username and the domain.
        :param pulumi.Input[_builtins.float] effective_time_msecs: Specifies the epoch time in milliseconds when the user becomes effective. Until that time, the user cannot log in.
        :param pulumi.Input[_builtins.str] email_address: Specifies the email address of the user.
        :param pulumi.Input[_builtins.float] expired_time_msecs: Specifies the epoch time in milliseconds when the user becomes expired. After that, the user cannot log in.
        :param pulumi.Input[_builtins.bool] force_password_change: Specifies whether to force user to change password.
        :param pulumi.Input[Union['BackupRecoveryConnectorUpdateUserGoogleAccountArgs', 'BackupRecoveryConnectorUpdateUserGoogleAccountArgsDict']] google_account: Google Account Information of a Helios BaaS user.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] group_roles: Specifies the Cohesity roles to associate with the user' group. These roles can only be edited from group.
        :param pulumi.Input[Union['BackupRecoveryConnectorUpdateUserIdpUserInfoArgs', 'BackupRecoveryConnectorUpdateUserIdpUserInfoArgsDict']] idp_user_info: Specifies an IdP User's information logged in using an IdP. This information is not stored on the Cluster.
        :param pulumi.Input[_builtins.str] intercom_messenger_token: Specifies the messenger token for intercom identity verification.
        :param pulumi.Input[_builtins.bool] is_account_locked: Specifies whether the user account is locked.
        :param pulumi.Input[_builtins.bool] is_active: IsActive specifies whether or not a user is active, or has been disactivated by the customer. The default behavior is
               'true'.
        :param pulumi.Input[_builtins.float] last_successful_login_time_msecs: Specifies the epoch time in milliseconds when the user was last logged in successfully.
        :param pulumi.Input[_builtins.float] last_updated_time_msecs: Specifies the epoch time in milliseconds when the user account was last modified on the Cohesity Cluster.
        :param pulumi.Input[Union['BackupRecoveryConnectorUpdateUserMfaInfoArgs', 'BackupRecoveryConnectorUpdateUserMfaInfoArgsDict']] mfa_info: Specifies information about MFA.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] mfa_methods: Specifies MFA methods that enabled on the cluster.
        :param pulumi.Input[_builtins.str] object_class: Specifies object class of user, could be either user or group.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserOrgMembershipArgs', 'BackupRecoveryConnectorUpdateUserOrgMembershipArgsDict']]]] org_memberships: OrgMembership contains the list of all available tenantIds for this user to switch to. Only when creating the session
               user, this field is populated on the fly. We discover the tenantIds from various groups assigned to the users.
        :param pulumi.Input[_builtins.str] password: Specifies the password of this user.
        :param pulumi.Input[Union['BackupRecoveryConnectorUpdateUserPreferencesArgs', 'BackupRecoveryConnectorUpdateUserPreferencesArgsDict']] preferences: Specifies the preferences of this user.
        :param pulumi.Input[_builtins.float] previous_login_time_msecs: Specifies the epoch time in milliseconds of previous user login.
        :param pulumi.Input[_builtins.str] primary_group_name: Specifies the name of the primary group of this User.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] privilege_ids: Specifies the Cohesity privileges from the roles. This will be populated based on the union of all privileges in roles.
               Type for unique privilege Id values. All below enum values specify a value for all uniquely defined privileges in
               Cohesity.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserProfileArgs', 'BackupRecoveryConnectorUpdateUserProfileArgsDict']]]] profiles: Specifies the user profiles. NOTE:- Currently used for Helios.
        :param pulumi.Input[_builtins.bool] restricted: Whether the user is a restricted user. A restricted user can only view the objects he has permissions to.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] roles: Specifies the Cohesity roles to associate with the user such as such as 'Admin', 'Ops' or 'View'. The Cohesity roles
               determine privileges on the Cohesity Cluster for this user.
        :param pulumi.Input[_builtins.str] s3_access_key_id: Specifies the S3 Account Access Key ID.
        :param pulumi.Input[_builtins.str] s3_account_id: Specifies the S3 Account Canonical User ID.
        :param pulumi.Input[_builtins.str] s3_secret_key: Specifies the S3 Account Secret Key.
        :param pulumi.Input[Union['BackupRecoveryConnectorUpdateUserSalesforceAccountArgs', 'BackupRecoveryConnectorUpdateUserSalesforceAccountArgsDict']] salesforce_account: Salesforce Account Information of a Helios user.
        :param pulumi.Input[_builtins.str] session_name_cookie: Specifies the session name cookie of the Cohesity user.
        :param pulumi.Input[_builtins.str] sid: Specifies the unique Security ID (SID) of the user. This field is mandatory in modifying user.
        :param pulumi.Input[Union['BackupRecoveryConnectorUpdateUserSpogContextArgs', 'BackupRecoveryConnectorUpdateUserSpogContextArgsDict']] spog_context: SpogContext specifies all of the information about the user and cluster which is performing action on this cluster.
        :param pulumi.Input[Union['BackupRecoveryConnectorUpdateUserSubscriptionInfoArgs', 'BackupRecoveryConnectorUpdateUserSubscriptionInfoArgsDict']] subscription_info: Extends this to have Helios, DRaaS and DSaaS.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserTenantAccessArgs', 'BackupRecoveryConnectorUpdateUserTenantAccessArgsDict']]]] tenant_accesses: Specfies the Tenant Access for MCM User.
        :param pulumi.Input[_builtins.str] tenant_id: Specifies the effective Tenant ID of the user.
        :param pulumi.Input[_builtins.str] username: Specifies the login name of the user.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BackupRecoveryConnectorUpdateUserArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a BackupRecoveryConnectorUpdateUser resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param BackupRecoveryConnectorUpdateUserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BackupRecoveryConnectorUpdateUserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ad_user_info: Optional[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserAdUserInfoArgs', 'BackupRecoveryConnectorUpdateUserAdUserInfoArgsDict']]] = None,
                 additional_group_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 allow_dso_modify: Optional[pulumi.Input[_builtins.bool]] = None,
                 audit_log_settings: Optional[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserAuditLogSettingsArgs', 'BackupRecoveryConnectorUpdateUserAuditLogSettingsArgsDict']]] = None,
                 authentication_type: Optional[pulumi.Input[_builtins.str]] = None,
                 backup_recovery_connector_update_user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_identifiers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserClusterIdentifierArgs', 'BackupRecoveryConnectorUpdateUserClusterIdentifierArgsDict']]]]] = None,
                 created_time_msecs: Optional[pulumi.Input[_builtins.float]] = None,
                 current_password: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 domain: Optional[pulumi.Input[_builtins.str]] = None,
                 effective_time_msecs: Optional[pulumi.Input[_builtins.float]] = None,
                 email_address: Optional[pulumi.Input[_builtins.str]] = None,
                 expired_time_msecs: Optional[pulumi.Input[_builtins.float]] = None,
                 force_password_change: Optional[pulumi.Input[_builtins.bool]] = None,
                 google_account: Optional[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserGoogleAccountArgs', 'BackupRecoveryConnectorUpdateUserGoogleAccountArgsDict']]] = None,
                 group_roles: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 idp_user_info: Optional[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserIdpUserInfoArgs', 'BackupRecoveryConnectorUpdateUserIdpUserInfoArgsDict']]] = None,
                 intercom_messenger_token: Optional[pulumi.Input[_builtins.str]] = None,
                 is_account_locked: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_active: Optional[pulumi.Input[_builtins.bool]] = None,
                 last_successful_login_time_msecs: Optional[pulumi.Input[_builtins.float]] = None,
                 last_updated_time_msecs: Optional[pulumi.Input[_builtins.float]] = None,
                 mfa_info: Optional[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserMfaInfoArgs', 'BackupRecoveryConnectorUpdateUserMfaInfoArgsDict']]] = None,
                 mfa_methods: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 object_class: Optional[pulumi.Input[_builtins.str]] = None,
                 org_memberships: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserOrgMembershipArgs', 'BackupRecoveryConnectorUpdateUserOrgMembershipArgsDict']]]]] = None,
                 password: Optional[pulumi.Input[_builtins.str]] = None,
                 preferences: Optional[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserPreferencesArgs', 'BackupRecoveryConnectorUpdateUserPreferencesArgsDict']]] = None,
                 previous_login_time_msecs: Optional[pulumi.Input[_builtins.float]] = None,
                 primary_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 privilege_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 profiles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserProfileArgs', 'BackupRecoveryConnectorUpdateUserProfileArgsDict']]]]] = None,
                 restricted: Optional[pulumi.Input[_builtins.bool]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 s3_access_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 s3_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 s3_secret_key: Optional[pulumi.Input[_builtins.str]] = None,
                 salesforce_account: Optional[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserSalesforceAccountArgs', 'BackupRecoveryConnectorUpdateUserSalesforceAccountArgsDict']]] = None,
                 session_name_cookie: Optional[pulumi.Input[_builtins.str]] = None,
                 sid: Optional[pulumi.Input[_builtins.str]] = None,
                 spog_context: Optional[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserSpogContextArgs', 'BackupRecoveryConnectorUpdateUserSpogContextArgsDict']]] = None,
                 subscription_info: Optional[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserSubscriptionInfoArgs', 'BackupRecoveryConnectorUpdateUserSubscriptionInfoArgsDict']]] = None,
                 tenant_accesses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserTenantAccessArgs', 'BackupRecoveryConnectorUpdateUserTenantAccessArgsDict']]]]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 username: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BackupRecoveryConnectorUpdateUserArgs.__new__(BackupRecoveryConnectorUpdateUserArgs)

            __props__.__dict__["ad_user_info"] = ad_user_info
            __props__.__dict__["additional_group_names"] = additional_group_names
            __props__.__dict__["allow_dso_modify"] = allow_dso_modify
            __props__.__dict__["audit_log_settings"] = audit_log_settings
            __props__.__dict__["authentication_type"] = authentication_type
            __props__.__dict__["backup_recovery_connector_update_user_id"] = backup_recovery_connector_update_user_id
            __props__.__dict__["cluster_identifiers"] = cluster_identifiers
            __props__.__dict__["created_time_msecs"] = created_time_msecs
            __props__.__dict__["current_password"] = current_password
            __props__.__dict__["description"] = description
            __props__.__dict__["domain"] = domain
            __props__.__dict__["effective_time_msecs"] = effective_time_msecs
            __props__.__dict__["email_address"] = email_address
            __props__.__dict__["expired_time_msecs"] = expired_time_msecs
            __props__.__dict__["force_password_change"] = force_password_change
            __props__.__dict__["google_account"] = google_account
            __props__.__dict__["group_roles"] = group_roles
            __props__.__dict__["idp_user_info"] = idp_user_info
            __props__.__dict__["intercom_messenger_token"] = intercom_messenger_token
            __props__.__dict__["is_account_locked"] = is_account_locked
            __props__.__dict__["is_active"] = is_active
            __props__.__dict__["last_successful_login_time_msecs"] = last_successful_login_time_msecs
            __props__.__dict__["last_updated_time_msecs"] = last_updated_time_msecs
            __props__.__dict__["mfa_info"] = mfa_info
            __props__.__dict__["mfa_methods"] = mfa_methods
            __props__.__dict__["object_class"] = object_class
            __props__.__dict__["org_memberships"] = org_memberships
            __props__.__dict__["password"] = password
            __props__.__dict__["preferences"] = preferences
            __props__.__dict__["previous_login_time_msecs"] = previous_login_time_msecs
            __props__.__dict__["primary_group_name"] = primary_group_name
            __props__.__dict__["privilege_ids"] = privilege_ids
            __props__.__dict__["profiles"] = profiles
            __props__.__dict__["restricted"] = restricted
            __props__.__dict__["roles"] = roles
            __props__.__dict__["s3_access_key_id"] = s3_access_key_id
            __props__.__dict__["s3_account_id"] = s3_account_id
            __props__.__dict__["s3_secret_key"] = s3_secret_key
            __props__.__dict__["salesforce_account"] = salesforce_account
            if session_name_cookie is None and not opts.urn:
                raise TypeError("Missing required property 'session_name_cookie'")
            __props__.__dict__["session_name_cookie"] = None if session_name_cookie is None else pulumi.Output.secret(session_name_cookie)
            __props__.__dict__["sid"] = sid
            __props__.__dict__["spog_context"] = spog_context
            __props__.__dict__["subscription_info"] = subscription_info
            __props__.__dict__["tenant_accesses"] = tenant_accesses
            __props__.__dict__["tenant_id"] = tenant_id
            __props__.__dict__["username"] = username
            __props__.__dict__["is_account_mfa_enabled"] = None
            __props__.__dict__["is_cluster_mfa_enabled"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["sessionNameCookie"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(BackupRecoveryConnectorUpdateUser, __self__).__init__(
            'ibm:index/backupRecoveryConnectorUpdateUser:BackupRecoveryConnectorUpdateUser',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ad_user_info: Optional[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserAdUserInfoArgs', 'BackupRecoveryConnectorUpdateUserAdUserInfoArgsDict']]] = None,
            additional_group_names: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            allow_dso_modify: Optional[pulumi.Input[_builtins.bool]] = None,
            audit_log_settings: Optional[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserAuditLogSettingsArgs', 'BackupRecoveryConnectorUpdateUserAuditLogSettingsArgsDict']]] = None,
            authentication_type: Optional[pulumi.Input[_builtins.str]] = None,
            backup_recovery_connector_update_user_id: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_identifiers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserClusterIdentifierArgs', 'BackupRecoveryConnectorUpdateUserClusterIdentifierArgsDict']]]]] = None,
            created_time_msecs: Optional[pulumi.Input[_builtins.float]] = None,
            current_password: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            domain: Optional[pulumi.Input[_builtins.str]] = None,
            effective_time_msecs: Optional[pulumi.Input[_builtins.float]] = None,
            email_address: Optional[pulumi.Input[_builtins.str]] = None,
            expired_time_msecs: Optional[pulumi.Input[_builtins.float]] = None,
            force_password_change: Optional[pulumi.Input[_builtins.bool]] = None,
            google_account: Optional[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserGoogleAccountArgs', 'BackupRecoveryConnectorUpdateUserGoogleAccountArgsDict']]] = None,
            group_roles: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            idp_user_info: Optional[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserIdpUserInfoArgs', 'BackupRecoveryConnectorUpdateUserIdpUserInfoArgsDict']]] = None,
            intercom_messenger_token: Optional[pulumi.Input[_builtins.str]] = None,
            is_account_locked: Optional[pulumi.Input[_builtins.bool]] = None,
            is_account_mfa_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            is_active: Optional[pulumi.Input[_builtins.bool]] = None,
            is_cluster_mfa_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            last_successful_login_time_msecs: Optional[pulumi.Input[_builtins.float]] = None,
            last_updated_time_msecs: Optional[pulumi.Input[_builtins.float]] = None,
            mfa_info: Optional[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserMfaInfoArgs', 'BackupRecoveryConnectorUpdateUserMfaInfoArgsDict']]] = None,
            mfa_methods: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            object_class: Optional[pulumi.Input[_builtins.str]] = None,
            org_memberships: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserOrgMembershipArgs', 'BackupRecoveryConnectorUpdateUserOrgMembershipArgsDict']]]]] = None,
            password: Optional[pulumi.Input[_builtins.str]] = None,
            preferences: Optional[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserPreferencesArgs', 'BackupRecoveryConnectorUpdateUserPreferencesArgsDict']]] = None,
            previous_login_time_msecs: Optional[pulumi.Input[_builtins.float]] = None,
            primary_group_name: Optional[pulumi.Input[_builtins.str]] = None,
            privilege_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            profiles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserProfileArgs', 'BackupRecoveryConnectorUpdateUserProfileArgsDict']]]]] = None,
            restricted: Optional[pulumi.Input[_builtins.bool]] = None,
            roles: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            s3_access_key_id: Optional[pulumi.Input[_builtins.str]] = None,
            s3_account_id: Optional[pulumi.Input[_builtins.str]] = None,
            s3_secret_key: Optional[pulumi.Input[_builtins.str]] = None,
            salesforce_account: Optional[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserSalesforceAccountArgs', 'BackupRecoveryConnectorUpdateUserSalesforceAccountArgsDict']]] = None,
            session_name_cookie: Optional[pulumi.Input[_builtins.str]] = None,
            sid: Optional[pulumi.Input[_builtins.str]] = None,
            spog_context: Optional[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserSpogContextArgs', 'BackupRecoveryConnectorUpdateUserSpogContextArgsDict']]] = None,
            subscription_info: Optional[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserSubscriptionInfoArgs', 'BackupRecoveryConnectorUpdateUserSubscriptionInfoArgsDict']]] = None,
            tenant_accesses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserTenantAccessArgs', 'BackupRecoveryConnectorUpdateUserTenantAccessArgsDict']]]]] = None,
            tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
            username: Optional[pulumi.Input[_builtins.str]] = None) -> 'BackupRecoveryConnectorUpdateUser':
        """
        Get an existing BackupRecoveryConnectorUpdateUser resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['BackupRecoveryConnectorUpdateUserAdUserInfoArgs', 'BackupRecoveryConnectorUpdateUserAdUserInfoArgsDict']] ad_user_info: Specifies an AD User's information logged in using an active directory. This information is not stored on the Cluster.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] additional_group_names: Specifies the names of additional groups this User may belong to.
        :param pulumi.Input[_builtins.bool] allow_dso_modify: Specifies if the data security user can be modified by the admin users.
        :param pulumi.Input[Union['BackupRecoveryConnectorUpdateUserAuditLogSettingsArgs', 'BackupRecoveryConnectorUpdateUserAuditLogSettingsArgsDict']] audit_log_settings: AuditLogSettings specifies struct with audt log configuration. Make these settings in such a way that zero values are
               cluster default when bb is not present.
        :param pulumi.Input[_builtins.str] authentication_type: Specifies the authentication type of the user. 'kAuthLocal' implies authenticated user is a local user. 'kAuthAd'
               implies authenticated user is an Active Directory user. 'kAuthSalesforce' implies authenticated user is a Salesforce
               user. 'kAuthGoogle' implies authenticated user is a Google user. 'kAuthSso' implies authenticated user is an SSO user.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserClusterIdentifierArgs', 'BackupRecoveryConnectorUpdateUserClusterIdentifierArgsDict']]]] cluster_identifiers: Specifies the list of clusters this user has access to. If this is not specified, access will be granted to all
               clusters.
        :param pulumi.Input[_builtins.float] created_time_msecs: Specifies the epoch time in milliseconds when the user account was created on the Cohesity Cluster.
        :param pulumi.Input[_builtins.str] current_password: Specifies the current password when updating the password.
        :param pulumi.Input[_builtins.str] description: Specifies a description about the user.
        :param pulumi.Input[_builtins.str] domain: Specifies the fully qualified domain name (FQDN) of an Active Directory or LOCAL for the default LOCAL domain on the
               Cohesity Cluster. A user is uniquely identified by combination of the username and the domain.
        :param pulumi.Input[_builtins.float] effective_time_msecs: Specifies the epoch time in milliseconds when the user becomes effective. Until that time, the user cannot log in.
        :param pulumi.Input[_builtins.str] email_address: Specifies the email address of the user.
        :param pulumi.Input[_builtins.float] expired_time_msecs: Specifies the epoch time in milliseconds when the user becomes expired. After that, the user cannot log in.
        :param pulumi.Input[_builtins.bool] force_password_change: Specifies whether to force user to change password.
        :param pulumi.Input[Union['BackupRecoveryConnectorUpdateUserGoogleAccountArgs', 'BackupRecoveryConnectorUpdateUserGoogleAccountArgsDict']] google_account: Google Account Information of a Helios BaaS user.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] group_roles: Specifies the Cohesity roles to associate with the user' group. These roles can only be edited from group.
        :param pulumi.Input[Union['BackupRecoveryConnectorUpdateUserIdpUserInfoArgs', 'BackupRecoveryConnectorUpdateUserIdpUserInfoArgsDict']] idp_user_info: Specifies an IdP User's information logged in using an IdP. This information is not stored on the Cluster.
        :param pulumi.Input[_builtins.str] intercom_messenger_token: Specifies the messenger token for intercom identity verification.
        :param pulumi.Input[_builtins.bool] is_account_locked: Specifies whether the user account is locked.
        :param pulumi.Input[_builtins.bool] is_account_mfa_enabled: Specifies if MFA is enabled for the Helios Account.
        :param pulumi.Input[_builtins.bool] is_active: IsActive specifies whether or not a user is active, or has been disactivated by the customer. The default behavior is
               'true'.
        :param pulumi.Input[_builtins.bool] is_cluster_mfa_enabled: Specifies if MFA is enabled on cluster.
        :param pulumi.Input[_builtins.float] last_successful_login_time_msecs: Specifies the epoch time in milliseconds when the user was last logged in successfully.
        :param pulumi.Input[_builtins.float] last_updated_time_msecs: Specifies the epoch time in milliseconds when the user account was last modified on the Cohesity Cluster.
        :param pulumi.Input[Union['BackupRecoveryConnectorUpdateUserMfaInfoArgs', 'BackupRecoveryConnectorUpdateUserMfaInfoArgsDict']] mfa_info: Specifies information about MFA.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] mfa_methods: Specifies MFA methods that enabled on the cluster.
        :param pulumi.Input[_builtins.str] object_class: Specifies object class of user, could be either user or group.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserOrgMembershipArgs', 'BackupRecoveryConnectorUpdateUserOrgMembershipArgsDict']]]] org_memberships: OrgMembership contains the list of all available tenantIds for this user to switch to. Only when creating the session
               user, this field is populated on the fly. We discover the tenantIds from various groups assigned to the users.
        :param pulumi.Input[_builtins.str] password: Specifies the password of this user.
        :param pulumi.Input[Union['BackupRecoveryConnectorUpdateUserPreferencesArgs', 'BackupRecoveryConnectorUpdateUserPreferencesArgsDict']] preferences: Specifies the preferences of this user.
        :param pulumi.Input[_builtins.float] previous_login_time_msecs: Specifies the epoch time in milliseconds of previous user login.
        :param pulumi.Input[_builtins.str] primary_group_name: Specifies the name of the primary group of this User.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] privilege_ids: Specifies the Cohesity privileges from the roles. This will be populated based on the union of all privileges in roles.
               Type for unique privilege Id values. All below enum values specify a value for all uniquely defined privileges in
               Cohesity.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserProfileArgs', 'BackupRecoveryConnectorUpdateUserProfileArgsDict']]]] profiles: Specifies the user profiles. NOTE:- Currently used for Helios.
        :param pulumi.Input[_builtins.bool] restricted: Whether the user is a restricted user. A restricted user can only view the objects he has permissions to.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] roles: Specifies the Cohesity roles to associate with the user such as such as 'Admin', 'Ops' or 'View'. The Cohesity roles
               determine privileges on the Cohesity Cluster for this user.
        :param pulumi.Input[_builtins.str] s3_access_key_id: Specifies the S3 Account Access Key ID.
        :param pulumi.Input[_builtins.str] s3_account_id: Specifies the S3 Account Canonical User ID.
        :param pulumi.Input[_builtins.str] s3_secret_key: Specifies the S3 Account Secret Key.
        :param pulumi.Input[Union['BackupRecoveryConnectorUpdateUserSalesforceAccountArgs', 'BackupRecoveryConnectorUpdateUserSalesforceAccountArgsDict']] salesforce_account: Salesforce Account Information of a Helios user.
        :param pulumi.Input[_builtins.str] session_name_cookie: Specifies the session name cookie of the Cohesity user.
        :param pulumi.Input[_builtins.str] sid: Specifies the unique Security ID (SID) of the user. This field is mandatory in modifying user.
        :param pulumi.Input[Union['BackupRecoveryConnectorUpdateUserSpogContextArgs', 'BackupRecoveryConnectorUpdateUserSpogContextArgsDict']] spog_context: SpogContext specifies all of the information about the user and cluster which is performing action on this cluster.
        :param pulumi.Input[Union['BackupRecoveryConnectorUpdateUserSubscriptionInfoArgs', 'BackupRecoveryConnectorUpdateUserSubscriptionInfoArgsDict']] subscription_info: Extends this to have Helios, DRaaS and DSaaS.
        :param pulumi.Input[Sequence[pulumi.Input[Union['BackupRecoveryConnectorUpdateUserTenantAccessArgs', 'BackupRecoveryConnectorUpdateUserTenantAccessArgsDict']]]] tenant_accesses: Specfies the Tenant Access for MCM User.
        :param pulumi.Input[_builtins.str] tenant_id: Specifies the effective Tenant ID of the user.
        :param pulumi.Input[_builtins.str] username: Specifies the login name of the user.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BackupRecoveryConnectorUpdateUserState.__new__(_BackupRecoveryConnectorUpdateUserState)

        __props__.__dict__["ad_user_info"] = ad_user_info
        __props__.__dict__["additional_group_names"] = additional_group_names
        __props__.__dict__["allow_dso_modify"] = allow_dso_modify
        __props__.__dict__["audit_log_settings"] = audit_log_settings
        __props__.__dict__["authentication_type"] = authentication_type
        __props__.__dict__["backup_recovery_connector_update_user_id"] = backup_recovery_connector_update_user_id
        __props__.__dict__["cluster_identifiers"] = cluster_identifiers
        __props__.__dict__["created_time_msecs"] = created_time_msecs
        __props__.__dict__["current_password"] = current_password
        __props__.__dict__["description"] = description
        __props__.__dict__["domain"] = domain
        __props__.__dict__["effective_time_msecs"] = effective_time_msecs
        __props__.__dict__["email_address"] = email_address
        __props__.__dict__["expired_time_msecs"] = expired_time_msecs
        __props__.__dict__["force_password_change"] = force_password_change
        __props__.__dict__["google_account"] = google_account
        __props__.__dict__["group_roles"] = group_roles
        __props__.__dict__["idp_user_info"] = idp_user_info
        __props__.__dict__["intercom_messenger_token"] = intercom_messenger_token
        __props__.__dict__["is_account_locked"] = is_account_locked
        __props__.__dict__["is_account_mfa_enabled"] = is_account_mfa_enabled
        __props__.__dict__["is_active"] = is_active
        __props__.__dict__["is_cluster_mfa_enabled"] = is_cluster_mfa_enabled
        __props__.__dict__["last_successful_login_time_msecs"] = last_successful_login_time_msecs
        __props__.__dict__["last_updated_time_msecs"] = last_updated_time_msecs
        __props__.__dict__["mfa_info"] = mfa_info
        __props__.__dict__["mfa_methods"] = mfa_methods
        __props__.__dict__["object_class"] = object_class
        __props__.__dict__["org_memberships"] = org_memberships
        __props__.__dict__["password"] = password
        __props__.__dict__["preferences"] = preferences
        __props__.__dict__["previous_login_time_msecs"] = previous_login_time_msecs
        __props__.__dict__["primary_group_name"] = primary_group_name
        __props__.__dict__["privilege_ids"] = privilege_ids
        __props__.__dict__["profiles"] = profiles
        __props__.__dict__["restricted"] = restricted
        __props__.__dict__["roles"] = roles
        __props__.__dict__["s3_access_key_id"] = s3_access_key_id
        __props__.__dict__["s3_account_id"] = s3_account_id
        __props__.__dict__["s3_secret_key"] = s3_secret_key
        __props__.__dict__["salesforce_account"] = salesforce_account
        __props__.__dict__["session_name_cookie"] = session_name_cookie
        __props__.__dict__["sid"] = sid
        __props__.__dict__["spog_context"] = spog_context
        __props__.__dict__["subscription_info"] = subscription_info
        __props__.__dict__["tenant_accesses"] = tenant_accesses
        __props__.__dict__["tenant_id"] = tenant_id
        __props__.__dict__["username"] = username
        return BackupRecoveryConnectorUpdateUser(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="adUserInfo")
    def ad_user_info(self) -> pulumi.Output[Optional['outputs.BackupRecoveryConnectorUpdateUserAdUserInfo']]:
        """
        Specifies an AD User's information logged in using an active directory. This information is not stored on the Cluster.
        """
        return pulumi.get(self, "ad_user_info")

    @_builtins.property
    @pulumi.getter(name="additionalGroupNames")
    def additional_group_names(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies the names of additional groups this User may belong to.
        """
        return pulumi.get(self, "additional_group_names")

    @_builtins.property
    @pulumi.getter(name="allowDsoModify")
    def allow_dso_modify(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies if the data security user can be modified by the admin users.
        """
        return pulumi.get(self, "allow_dso_modify")

    @_builtins.property
    @pulumi.getter(name="auditLogSettings")
    def audit_log_settings(self) -> pulumi.Output[Optional['outputs.BackupRecoveryConnectorUpdateUserAuditLogSettings']]:
        """
        AuditLogSettings specifies struct with audt log configuration. Make these settings in such a way that zero values are
        cluster default when bb is not present.
        """
        return pulumi.get(self, "audit_log_settings")

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the authentication type of the user. 'kAuthLocal' implies authenticated user is a local user. 'kAuthAd'
        implies authenticated user is an Active Directory user. 'kAuthSalesforce' implies authenticated user is a Salesforce
        user. 'kAuthGoogle' implies authenticated user is a Google user. 'kAuthSso' implies authenticated user is an SSO user.
        """
        return pulumi.get(self, "authentication_type")

    @_builtins.property
    @pulumi.getter(name="backupRecoveryConnectorUpdateUserId")
    def backup_recovery_connector_update_user_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "backup_recovery_connector_update_user_id")

    @_builtins.property
    @pulumi.getter(name="clusterIdentifiers")
    def cluster_identifiers(self) -> pulumi.Output[Optional[Sequence['outputs.BackupRecoveryConnectorUpdateUserClusterIdentifier']]]:
        """
        Specifies the list of clusters this user has access to. If this is not specified, access will be granted to all
        clusters.
        """
        return pulumi.get(self, "cluster_identifiers")

    @_builtins.property
    @pulumi.getter(name="createdTimeMsecs")
    def created_time_msecs(self) -> pulumi.Output[_builtins.float]:
        """
        Specifies the epoch time in milliseconds when the user account was created on the Cohesity Cluster.
        """
        return pulumi.get(self, "created_time_msecs")

    @_builtins.property
    @pulumi.getter(name="currentPassword")
    def current_password(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the current password when updating the password.
        """
        return pulumi.get(self, "current_password")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies a description about the user.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def domain(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the fully qualified domain name (FQDN) of an Active Directory or LOCAL for the default LOCAL domain on the
        Cohesity Cluster. A user is uniquely identified by combination of the username and the domain.
        """
        return pulumi.get(self, "domain")

    @_builtins.property
    @pulumi.getter(name="effectiveTimeMsecs")
    def effective_time_msecs(self) -> pulumi.Output[_builtins.float]:
        """
        Specifies the epoch time in milliseconds when the user becomes effective. Until that time, the user cannot log in.
        """
        return pulumi.get(self, "effective_time_msecs")

    @_builtins.property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the email address of the user.
        """
        return pulumi.get(self, "email_address")

    @_builtins.property
    @pulumi.getter(name="expiredTimeMsecs")
    def expired_time_msecs(self) -> pulumi.Output[_builtins.float]:
        """
        Specifies the epoch time in milliseconds when the user becomes expired. After that, the user cannot log in.
        """
        return pulumi.get(self, "expired_time_msecs")

    @_builtins.property
    @pulumi.getter(name="forcePasswordChange")
    def force_password_change(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether to force user to change password.
        """
        return pulumi.get(self, "force_password_change")

    @_builtins.property
    @pulumi.getter(name="googleAccount")
    def google_account(self) -> pulumi.Output[Optional['outputs.BackupRecoveryConnectorUpdateUserGoogleAccount']]:
        """
        Google Account Information of a Helios BaaS user.
        """
        return pulumi.get(self, "google_account")

    @_builtins.property
    @pulumi.getter(name="groupRoles")
    def group_roles(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies the Cohesity roles to associate with the user' group. These roles can only be edited from group.
        """
        return pulumi.get(self, "group_roles")

    @_builtins.property
    @pulumi.getter(name="idpUserInfo")
    def idp_user_info(self) -> pulumi.Output[Optional['outputs.BackupRecoveryConnectorUpdateUserIdpUserInfo']]:
        """
        Specifies an IdP User's information logged in using an IdP. This information is not stored on the Cluster.
        """
        return pulumi.get(self, "idp_user_info")

    @_builtins.property
    @pulumi.getter(name="intercomMessengerToken")
    def intercom_messenger_token(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the messenger token for intercom identity verification.
        """
        return pulumi.get(self, "intercom_messenger_token")

    @_builtins.property
    @pulumi.getter(name="isAccountLocked")
    def is_account_locked(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies whether the user account is locked.
        """
        return pulumi.get(self, "is_account_locked")

    @_builtins.property
    @pulumi.getter(name="isAccountMfaEnabled")
    def is_account_mfa_enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies if MFA is enabled for the Helios Account.
        """
        return pulumi.get(self, "is_account_mfa_enabled")

    @_builtins.property
    @pulumi.getter(name="isActive")
    def is_active(self) -> pulumi.Output[_builtins.bool]:
        """
        IsActive specifies whether or not a user is active, or has been disactivated by the customer. The default behavior is
        'true'.
        """
        return pulumi.get(self, "is_active")

    @_builtins.property
    @pulumi.getter(name="isClusterMfaEnabled")
    def is_cluster_mfa_enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        Specifies if MFA is enabled on cluster.
        """
        return pulumi.get(self, "is_cluster_mfa_enabled")

    @_builtins.property
    @pulumi.getter(name="lastSuccessfulLoginTimeMsecs")
    def last_successful_login_time_msecs(self) -> pulumi.Output[_builtins.float]:
        """
        Specifies the epoch time in milliseconds when the user was last logged in successfully.
        """
        return pulumi.get(self, "last_successful_login_time_msecs")

    @_builtins.property
    @pulumi.getter(name="lastUpdatedTimeMsecs")
    def last_updated_time_msecs(self) -> pulumi.Output[_builtins.float]:
        """
        Specifies the epoch time in milliseconds when the user account was last modified on the Cohesity Cluster.
        """
        return pulumi.get(self, "last_updated_time_msecs")

    @_builtins.property
    @pulumi.getter(name="mfaInfo")
    def mfa_info(self) -> pulumi.Output[Optional['outputs.BackupRecoveryConnectorUpdateUserMfaInfo']]:
        """
        Specifies information about MFA.
        """
        return pulumi.get(self, "mfa_info")

    @_builtins.property
    @pulumi.getter(name="mfaMethods")
    def mfa_methods(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies MFA methods that enabled on the cluster.
        """
        return pulumi.get(self, "mfa_methods")

    @_builtins.property
    @pulumi.getter(name="objectClass")
    def object_class(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies object class of user, could be either user or group.
        """
        return pulumi.get(self, "object_class")

    @_builtins.property
    @pulumi.getter(name="orgMemberships")
    def org_memberships(self) -> pulumi.Output[Optional[Sequence['outputs.BackupRecoveryConnectorUpdateUserOrgMembership']]]:
        """
        OrgMembership contains the list of all available tenantIds for this user to switch to. Only when creating the session
        user, this field is populated on the fly. We discover the tenantIds from various groups assigned to the users.
        """
        return pulumi.get(self, "org_memberships")

    @_builtins.property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the password of this user.
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter
    def preferences(self) -> pulumi.Output[Optional['outputs.BackupRecoveryConnectorUpdateUserPreferences']]:
        """
        Specifies the preferences of this user.
        """
        return pulumi.get(self, "preferences")

    @_builtins.property
    @pulumi.getter(name="previousLoginTimeMsecs")
    def previous_login_time_msecs(self) -> pulumi.Output[_builtins.float]:
        """
        Specifies the epoch time in milliseconds of previous user login.
        """
        return pulumi.get(self, "previous_login_time_msecs")

    @_builtins.property
    @pulumi.getter(name="primaryGroupName")
    def primary_group_name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the primary group of this User.
        """
        return pulumi.get(self, "primary_group_name")

    @_builtins.property
    @pulumi.getter(name="privilegeIds")
    def privilege_ids(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies the Cohesity privileges from the roles. This will be populated based on the union of all privileges in roles.
        Type for unique privilege Id values. All below enum values specify a value for all uniquely defined privileges in
        Cohesity.
        """
        return pulumi.get(self, "privilege_ids")

    @_builtins.property
    @pulumi.getter
    def profiles(self) -> pulumi.Output[Optional[Sequence['outputs.BackupRecoveryConnectorUpdateUserProfile']]]:
        """
        Specifies the user profiles. NOTE:- Currently used for Helios.
        """
        return pulumi.get(self, "profiles")

    @_builtins.property
    @pulumi.getter
    def restricted(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether the user is a restricted user. A restricted user can only view the objects he has permissions to.
        """
        return pulumi.get(self, "restricted")

    @_builtins.property
    @pulumi.getter
    def roles(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Specifies the Cohesity roles to associate with the user such as such as 'Admin', 'Ops' or 'View'. The Cohesity roles
        determine privileges on the Cohesity Cluster for this user.
        """
        return pulumi.get(self, "roles")

    @_builtins.property
    @pulumi.getter(name="s3AccessKeyId")
    def s3_access_key_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the S3 Account Access Key ID.
        """
        return pulumi.get(self, "s3_access_key_id")

    @_builtins.property
    @pulumi.getter(name="s3AccountId")
    def s3_account_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the S3 Account Canonical User ID.
        """
        return pulumi.get(self, "s3_account_id")

    @_builtins.property
    @pulumi.getter(name="s3SecretKey")
    def s3_secret_key(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the S3 Account Secret Key.
        """
        return pulumi.get(self, "s3_secret_key")

    @_builtins.property
    @pulumi.getter(name="salesforceAccount")
    def salesforce_account(self) -> pulumi.Output[Optional['outputs.BackupRecoveryConnectorUpdateUserSalesforceAccount']]:
        """
        Salesforce Account Information of a Helios user.
        """
        return pulumi.get(self, "salesforce_account")

    @_builtins.property
    @pulumi.getter(name="sessionNameCookie")
    def session_name_cookie(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the session name cookie of the Cohesity user.
        """
        return pulumi.get(self, "session_name_cookie")

    @_builtins.property
    @pulumi.getter
    def sid(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the unique Security ID (SID) of the user. This field is mandatory in modifying user.
        """
        return pulumi.get(self, "sid")

    @_builtins.property
    @pulumi.getter(name="spogContext")
    def spog_context(self) -> pulumi.Output[Optional['outputs.BackupRecoveryConnectorUpdateUserSpogContext']]:
        """
        SpogContext specifies all of the information about the user and cluster which is performing action on this cluster.
        """
        return pulumi.get(self, "spog_context")

    @_builtins.property
    @pulumi.getter(name="subscriptionInfo")
    def subscription_info(self) -> pulumi.Output[Optional['outputs.BackupRecoveryConnectorUpdateUserSubscriptionInfo']]:
        """
        Extends this to have Helios, DRaaS and DSaaS.
        """
        return pulumi.get(self, "subscription_info")

    @_builtins.property
    @pulumi.getter(name="tenantAccesses")
    def tenant_accesses(self) -> pulumi.Output[Optional[Sequence['outputs.BackupRecoveryConnectorUpdateUserTenantAccess']]]:
        """
        Specfies the Tenant Access for MCM User.
        """
        return pulumi.get(self, "tenant_accesses")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the effective Tenant ID of the user.
        """
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter
    def username(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the login name of the user.
        """
        return pulumi.get(self, "username")

