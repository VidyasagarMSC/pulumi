# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PiKeyArgs', 'PiKey']

@pulumi.input_type
class PiKeyArgs:
    def __init__(__self__, *,
                 pi_cloud_instance_id: pulumi.Input[_builtins.str],
                 pi_key_name: pulumi.Input[_builtins.str],
                 pi_ssh_key: pulumi.Input[_builtins.str],
                 pi_description: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_visibility: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['PiKeyTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a PiKey resource.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_key_name: User defined name for the SSH key.
        :param pulumi.Input[_builtins.str] pi_ssh_key: SSH RSA key.
        :param pulumi.Input[_builtins.str] pi_description: Description of the ssh key.
        :param pulumi.Input[_builtins.str] pi_visibility: Visibility of the ssh key. Valid values are: ["account", "workspace"].
        """
        pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        pulumi.set(__self__, "pi_key_name", pi_key_name)
        pulumi.set(__self__, "pi_ssh_key", pi_ssh_key)
        if pi_description is not None:
            pulumi.set(__self__, "pi_description", pi_description)
        if pi_key_id is not None:
            pulumi.set(__self__, "pi_key_id", pi_key_id)
        if pi_visibility is not None:
            pulumi.set(__self__, "pi_visibility", pi_visibility)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piKeyName")
    def pi_key_name(self) -> pulumi.Input[_builtins.str]:
        """
        User defined name for the SSH key.
        """
        return pulumi.get(self, "pi_key_name")

    @pi_key_name.setter
    def pi_key_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_key_name", value)

    @_builtins.property
    @pulumi.getter(name="piSshKey")
    def pi_ssh_key(self) -> pulumi.Input[_builtins.str]:
        """
        SSH RSA key.
        """
        return pulumi.get(self, "pi_ssh_key")

    @pi_ssh_key.setter
    def pi_ssh_key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "pi_ssh_key", value)

    @_builtins.property
    @pulumi.getter(name="piDescription")
    def pi_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the ssh key.
        """
        return pulumi.get(self, "pi_description")

    @pi_description.setter
    def pi_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_description", value)

    @_builtins.property
    @pulumi.getter(name="piKeyId")
    def pi_key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_key_id")

    @pi_key_id.setter
    def pi_key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_key_id", value)

    @_builtins.property
    @pulumi.getter(name="piVisibility")
    def pi_visibility(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Visibility of the ssh key. Valid values are: ["account", "workspace"].
        """
        return pulumi.get(self, "pi_visibility")

    @pi_visibility.setter
    def pi_visibility(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_visibility", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiKeyTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiKeyTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _PiKeyState:
    def __init__(__self__, *,
                 creation_date: Optional[pulumi.Input[_builtins.str]] = None,
                 key: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_description: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_key_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_ssh_key: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_visibility: Optional[pulumi.Input[_builtins.str]] = None,
                 primary_workspace: Optional[pulumi.Input[_builtins.bool]] = None,
                 ssh_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['PiKeyTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering PiKey resources.
        :param pulumi.Input[_builtins.str] creation_date: Date of SSH Key creation.
        :param pulumi.Input[_builtins.str] key: SSH RSA key.
        :param pulumi.Input[_builtins.str] name: User defined name for the SSH key.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_description: Description of the ssh key.
        :param pulumi.Input[_builtins.str] pi_key_name: User defined name for the SSH key.
        :param pulumi.Input[_builtins.str] pi_ssh_key: SSH RSA key.
        :param pulumi.Input[_builtins.str] pi_visibility: Visibility of the ssh key. Valid values are: ["account", "workspace"].
        :param pulumi.Input[_builtins.bool] primary_workspace: Indicates if the current workspace owns the ssh key or not.
        :param pulumi.Input[_builtins.str] ssh_key_id: Unique ID of SSH key.
        """
        if creation_date is not None:
            pulumi.set(__self__, "creation_date", creation_date)
        if key is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""key is deprecated: Deprecated""")
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""name is deprecated: Deprecated""")
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pi_cloud_instance_id is not None:
            pulumi.set(__self__, "pi_cloud_instance_id", pi_cloud_instance_id)
        if pi_description is not None:
            pulumi.set(__self__, "pi_description", pi_description)
        if pi_key_id is not None:
            pulumi.set(__self__, "pi_key_id", pi_key_id)
        if pi_key_name is not None:
            pulumi.set(__self__, "pi_key_name", pi_key_name)
        if pi_ssh_key is not None:
            pulumi.set(__self__, "pi_ssh_key", pi_ssh_key)
        if pi_visibility is not None:
            pulumi.set(__self__, "pi_visibility", pi_visibility)
        if primary_workspace is not None:
            pulumi.set(__self__, "primary_workspace", primary_workspace)
        if ssh_key_id is not None:
            pulumi.set(__self__, "ssh_key_id", ssh_key_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Date of SSH Key creation.
        """
        return pulumi.get(self, "creation_date")

    @creation_date.setter
    def creation_date(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "creation_date", value)

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        SSH RSA key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        User defined name for the SSH key.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @pi_cloud_instance_id.setter
    def pi_cloud_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_cloud_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="piDescription")
    def pi_description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the ssh key.
        """
        return pulumi.get(self, "pi_description")

    @pi_description.setter
    def pi_description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_description", value)

    @_builtins.property
    @pulumi.getter(name="piKeyId")
    def pi_key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "pi_key_id")

    @pi_key_id.setter
    def pi_key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_key_id", value)

    @_builtins.property
    @pulumi.getter(name="piKeyName")
    def pi_key_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        User defined name for the SSH key.
        """
        return pulumi.get(self, "pi_key_name")

    @pi_key_name.setter
    def pi_key_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_key_name", value)

    @_builtins.property
    @pulumi.getter(name="piSshKey")
    def pi_ssh_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        SSH RSA key.
        """
        return pulumi.get(self, "pi_ssh_key")

    @pi_ssh_key.setter
    def pi_ssh_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_ssh_key", value)

    @_builtins.property
    @pulumi.getter(name="piVisibility")
    def pi_visibility(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Visibility of the ssh key. Valid values are: ["account", "workspace"].
        """
        return pulumi.get(self, "pi_visibility")

    @pi_visibility.setter
    def pi_visibility(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "pi_visibility", value)

    @_builtins.property
    @pulumi.getter(name="primaryWorkspace")
    def primary_workspace(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates if the current workspace owns the ssh key or not.
        """
        return pulumi.get(self, "primary_workspace")

    @primary_workspace.setter
    def primary_workspace(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "primary_workspace", value)

    @_builtins.property
    @pulumi.getter(name="sshKeyId")
    def ssh_key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique ID of SSH key.
        """
        return pulumi.get(self, "ssh_key_id")

    @ssh_key_id.setter
    def ssh_key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ssh_key_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['PiKeyTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['PiKeyTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("ibm:index/piKey:PiKey")
class PiKey(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_description: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_key_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_ssh_key: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_visibility: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiKeyTimeoutsArgs', 'PiKeyTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Create a PiKey resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_description: Description of the ssh key.
        :param pulumi.Input[_builtins.str] pi_key_name: User defined name for the SSH key.
        :param pulumi.Input[_builtins.str] pi_ssh_key: SSH RSA key.
        :param pulumi.Input[_builtins.str] pi_visibility: Visibility of the ssh key. Valid values are: ["account", "workspace"].
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PiKeyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PiKey resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PiKeyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PiKeyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_description: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_key_name: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_ssh_key: Optional[pulumi.Input[_builtins.str]] = None,
                 pi_visibility: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['PiKeyTimeoutsArgs', 'PiKeyTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PiKeyArgs.__new__(PiKeyArgs)

            if pi_cloud_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'pi_cloud_instance_id'")
            __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
            __props__.__dict__["pi_description"] = pi_description
            __props__.__dict__["pi_key_id"] = pi_key_id
            if pi_key_name is None and not opts.urn:
                raise TypeError("Missing required property 'pi_key_name'")
            __props__.__dict__["pi_key_name"] = pi_key_name
            if pi_ssh_key is None and not opts.urn:
                raise TypeError("Missing required property 'pi_ssh_key'")
            __props__.__dict__["pi_ssh_key"] = pi_ssh_key
            __props__.__dict__["pi_visibility"] = pi_visibility
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["creation_date"] = None
            __props__.__dict__["key"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["primary_workspace"] = None
            __props__.__dict__["ssh_key_id"] = None
        super(PiKey, __self__).__init__(
            'ibm:index/piKey:PiKey',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            creation_date: Optional[pulumi.Input[_builtins.str]] = None,
            key: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            pi_cloud_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_description: Optional[pulumi.Input[_builtins.str]] = None,
            pi_key_id: Optional[pulumi.Input[_builtins.str]] = None,
            pi_key_name: Optional[pulumi.Input[_builtins.str]] = None,
            pi_ssh_key: Optional[pulumi.Input[_builtins.str]] = None,
            pi_visibility: Optional[pulumi.Input[_builtins.str]] = None,
            primary_workspace: Optional[pulumi.Input[_builtins.bool]] = None,
            ssh_key_id: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['PiKeyTimeoutsArgs', 'PiKeyTimeoutsArgsDict']]] = None) -> 'PiKey':
        """
        Get an existing PiKey resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] creation_date: Date of SSH Key creation.
        :param pulumi.Input[_builtins.str] key: SSH RSA key.
        :param pulumi.Input[_builtins.str] name: User defined name for the SSH key.
        :param pulumi.Input[_builtins.str] pi_cloud_instance_id: The GUID of the service instance associated with an account.
        :param pulumi.Input[_builtins.str] pi_description: Description of the ssh key.
        :param pulumi.Input[_builtins.str] pi_key_name: User defined name for the SSH key.
        :param pulumi.Input[_builtins.str] pi_ssh_key: SSH RSA key.
        :param pulumi.Input[_builtins.str] pi_visibility: Visibility of the ssh key. Valid values are: ["account", "workspace"].
        :param pulumi.Input[_builtins.bool] primary_workspace: Indicates if the current workspace owns the ssh key or not.
        :param pulumi.Input[_builtins.str] ssh_key_id: Unique ID of SSH key.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PiKeyState.__new__(_PiKeyState)

        __props__.__dict__["creation_date"] = creation_date
        __props__.__dict__["key"] = key
        __props__.__dict__["name"] = name
        __props__.__dict__["pi_cloud_instance_id"] = pi_cloud_instance_id
        __props__.__dict__["pi_description"] = pi_description
        __props__.__dict__["pi_key_id"] = pi_key_id
        __props__.__dict__["pi_key_name"] = pi_key_name
        __props__.__dict__["pi_ssh_key"] = pi_ssh_key
        __props__.__dict__["pi_visibility"] = pi_visibility
        __props__.__dict__["primary_workspace"] = primary_workspace
        __props__.__dict__["ssh_key_id"] = ssh_key_id
        __props__.__dict__["timeouts"] = timeouts
        return PiKey(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> pulumi.Output[_builtins.str]:
        """
        Date of SSH Key creation.
        """
        return pulumi.get(self, "creation_date")

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def key(self) -> pulumi.Output[_builtins.str]:
        """
        SSH RSA key.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Deprecated""")
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        User defined name for the SSH key.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="piCloudInstanceId")
    def pi_cloud_instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The GUID of the service instance associated with an account.
        """
        return pulumi.get(self, "pi_cloud_instance_id")

    @_builtins.property
    @pulumi.getter(name="piDescription")
    def pi_description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Description of the ssh key.
        """
        return pulumi.get(self, "pi_description")

    @_builtins.property
    @pulumi.getter(name="piKeyId")
    def pi_key_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "pi_key_id")

    @_builtins.property
    @pulumi.getter(name="piKeyName")
    def pi_key_name(self) -> pulumi.Output[_builtins.str]:
        """
        User defined name for the SSH key.
        """
        return pulumi.get(self, "pi_key_name")

    @_builtins.property
    @pulumi.getter(name="piSshKey")
    def pi_ssh_key(self) -> pulumi.Output[_builtins.str]:
        """
        SSH RSA key.
        """
        return pulumi.get(self, "pi_ssh_key")

    @_builtins.property
    @pulumi.getter(name="piVisibility")
    def pi_visibility(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Visibility of the ssh key. Valid values are: ["account", "workspace"].
        """
        return pulumi.get(self, "pi_visibility")

    @_builtins.property
    @pulumi.getter(name="primaryWorkspace")
    def primary_workspace(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates if the current workspace owns the ssh key or not.
        """
        return pulumi.get(self, "primary_workspace")

    @_builtins.property
    @pulumi.getter(name="sshKeyId")
    def ssh_key_id(self) -> pulumi.Output[_builtins.str]:
        """
        Unique ID of SSH key.
        """
        return pulumi.get(self, "ssh_key_id")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.PiKeyTimeouts']]:
        return pulumi.get(self, "timeouts")

