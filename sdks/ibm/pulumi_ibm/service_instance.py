# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ServiceInstanceArgs', 'ServiceInstance']

@pulumi.input_type
class ServiceInstanceArgs:
    def __init__(__self__, *,
                 plan: pulumi.Input[_builtins.str],
                 service: pulumi.Input[_builtins.str],
                 space_guid: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 service_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 wait_time_minutes: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a ServiceInstance resource.
        :param pulumi.Input[_builtins.str] plan: The plan type of the service
        :param pulumi.Input[_builtins.str] service: The name of the service offering like speech_to_text, text_to_speech etc
        :param pulumi.Input[_builtins.str] space_guid: The guid of the space in which the instance will be created
        :param pulumi.Input[_builtins.str] name: A name for the service instance
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] parameters: Arbitrary parameters to pass along to the service broker. Must be a JSON object
        :param pulumi.Input[_builtins.float] wait_time_minutes: Define timeout to wait for the service instances to succeeded/deleted etc.
        """
        pulumi.set(__self__, "plan", plan)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "space_guid", space_guid)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if service_instance_id is not None:
            pulumi.set(__self__, "service_instance_id", service_instance_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if wait_time_minutes is not None:
            pulumi.set(__self__, "wait_time_minutes", wait_time_minutes)

    @_builtins.property
    @pulumi.getter
    def plan(self) -> pulumi.Input[_builtins.str]:
        """
        The plan type of the service
        """
        return pulumi.get(self, "plan")

    @plan.setter
    def plan(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "plan", value)

    @_builtins.property
    @pulumi.getter
    def service(self) -> pulumi.Input[_builtins.str]:
        """
        The name of the service offering like speech_to_text, text_to_speech etc
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "service", value)

    @_builtins.property
    @pulumi.getter(name="spaceGuid")
    def space_guid(self) -> pulumi.Input[_builtins.str]:
        """
        The guid of the space in which the instance will be created
        """
        return pulumi.get(self, "space_guid")

    @space_guid.setter
    def space_guid(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "space_guid", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A name for the service instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Arbitrary parameters to pass along to the service broker. Must be a JSON object
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter(name="serviceInstanceId")
    def service_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "service_instance_id")

    @service_instance_id.setter
    def service_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_instance_id", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="waitTimeMinutes")
    def wait_time_minutes(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Define timeout to wait for the service instances to succeeded/deleted etc.
        """
        return pulumi.get(self, "wait_time_minutes")

    @wait_time_minutes.setter
    def wait_time_minutes(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "wait_time_minutes", value)


@pulumi.input_type
class _ServiceInstanceState:
    def __init__(__self__, *,
                 credentials: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 dashboard_url: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 plan: Optional[pulumi.Input[_builtins.str]] = None,
                 service: Optional[pulumi.Input[_builtins.str]] = None,
                 service_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service_keys: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceInstanceServiceKeyArgs']]]] = None,
                 service_plan_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 space_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 wait_time_minutes: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering ServiceInstance resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] credentials: The service broker-provided credentials to use this service.
        :param pulumi.Input[_builtins.str] dashboard_url: Dashboard URL to access resource.
        :param pulumi.Input[_builtins.str] name: A name for the service instance
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] parameters: Arbitrary parameters to pass along to the service broker. Must be a JSON object
        :param pulumi.Input[_builtins.str] plan: The plan type of the service
        :param pulumi.Input[_builtins.str] service: The name of the service offering like speech_to_text, text_to_speech etc
        :param pulumi.Input[Sequence[pulumi.Input['ServiceInstanceServiceKeyArgs']]] service_keys: The service keys asociated with the service instance
        :param pulumi.Input[_builtins.str] service_plan_guid: The uniquie identifier of the service offering plan type
        :param pulumi.Input[_builtins.str] space_guid: The guid of the space in which the instance will be created
        :param pulumi.Input[_builtins.float] wait_time_minutes: Define timeout to wait for the service instances to succeeded/deleted etc.
        """
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if dashboard_url is not None:
            pulumi.set(__self__, "dashboard_url", dashboard_url)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if plan is not None:
            pulumi.set(__self__, "plan", plan)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if service_instance_id is not None:
            pulumi.set(__self__, "service_instance_id", service_instance_id)
        if service_keys is not None:
            pulumi.set(__self__, "service_keys", service_keys)
        if service_plan_guid is not None:
            pulumi.set(__self__, "service_plan_guid", service_plan_guid)
        if space_guid is not None:
            pulumi.set(__self__, "space_guid", space_guid)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if wait_time_minutes is not None:
            pulumi.set(__self__, "wait_time_minutes", wait_time_minutes)

    @_builtins.property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        The service broker-provided credentials to use this service.
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "credentials", value)

    @_builtins.property
    @pulumi.getter(name="dashboardUrl")
    def dashboard_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Dashboard URL to access resource.
        """
        return pulumi.get(self, "dashboard_url")

    @dashboard_url.setter
    def dashboard_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dashboard_url", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A name for the service instance
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Arbitrary parameters to pass along to the service broker. Must be a JSON object
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "parameters", value)

    @_builtins.property
    @pulumi.getter
    def plan(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The plan type of the service
        """
        return pulumi.get(self, "plan")

    @plan.setter
    def plan(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "plan", value)

    @_builtins.property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the service offering like speech_to_text, text_to_speech etc
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service", value)

    @_builtins.property
    @pulumi.getter(name="serviceInstanceId")
    def service_instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "service_instance_id")

    @service_instance_id.setter
    def service_instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_instance_id", value)

    @_builtins.property
    @pulumi.getter(name="serviceKeys")
    def service_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceInstanceServiceKeyArgs']]]]:
        """
        The service keys asociated with the service instance
        """
        return pulumi.get(self, "service_keys")

    @service_keys.setter
    def service_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceInstanceServiceKeyArgs']]]]):
        pulumi.set(self, "service_keys", value)

    @_builtins.property
    @pulumi.getter(name="servicePlanGuid")
    def service_plan_guid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The uniquie identifier of the service offering plan type
        """
        return pulumi.get(self, "service_plan_guid")

    @service_plan_guid.setter
    def service_plan_guid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_plan_guid", value)

    @_builtins.property
    @pulumi.getter(name="spaceGuid")
    def space_guid(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The guid of the space in which the instance will be created
        """
        return pulumi.get(self, "space_guid")

    @space_guid.setter
    def space_guid(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "space_guid", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="waitTimeMinutes")
    def wait_time_minutes(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Define timeout to wait for the service instances to succeeded/deleted etc.
        """
        return pulumi.get(self, "wait_time_minutes")

    @wait_time_minutes.setter
    def wait_time_minutes(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "wait_time_minutes", value)


@pulumi.type_token("ibm:index/serviceInstance:ServiceInstance")
class ServiceInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 plan: Optional[pulumi.Input[_builtins.str]] = None,
                 service: Optional[pulumi.Input[_builtins.str]] = None,
                 service_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 space_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 wait_time_minutes: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        Create a ServiceInstance resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: A name for the service instance
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] parameters: Arbitrary parameters to pass along to the service broker. Must be a JSON object
        :param pulumi.Input[_builtins.str] plan: The plan type of the service
        :param pulumi.Input[_builtins.str] service: The name of the service offering like speech_to_text, text_to_speech etc
        :param pulumi.Input[_builtins.str] space_guid: The guid of the space in which the instance will be created
        :param pulumi.Input[_builtins.float] wait_time_minutes: Define timeout to wait for the service instances to succeeded/deleted etc.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ServiceInstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ServiceInstance resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ServiceInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServiceInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 plan: Optional[pulumi.Input[_builtins.str]] = None,
                 service: Optional[pulumi.Input[_builtins.str]] = None,
                 service_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 space_guid: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 wait_time_minutes: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServiceInstanceArgs.__new__(ServiceInstanceArgs)

            __props__.__dict__["name"] = name
            __props__.__dict__["parameters"] = parameters
            if plan is None and not opts.urn:
                raise TypeError("Missing required property 'plan'")
            __props__.__dict__["plan"] = plan
            if service is None and not opts.urn:
                raise TypeError("Missing required property 'service'")
            __props__.__dict__["service"] = service
            __props__.__dict__["service_instance_id"] = service_instance_id
            if space_guid is None and not opts.urn:
                raise TypeError("Missing required property 'space_guid'")
            __props__.__dict__["space_guid"] = space_guid
            __props__.__dict__["tags"] = tags
            __props__.__dict__["wait_time_minutes"] = wait_time_minutes
            __props__.__dict__["credentials"] = None
            __props__.__dict__["dashboard_url"] = None
            __props__.__dict__["service_keys"] = None
            __props__.__dict__["service_plan_guid"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["credentials"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ServiceInstance, __self__).__init__(
            'ibm:index/serviceInstance:ServiceInstance',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            credentials: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            dashboard_url: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            plan: Optional[pulumi.Input[_builtins.str]] = None,
            service: Optional[pulumi.Input[_builtins.str]] = None,
            service_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            service_keys: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceInstanceServiceKeyArgs', 'ServiceInstanceServiceKeyArgsDict']]]]] = None,
            service_plan_guid: Optional[pulumi.Input[_builtins.str]] = None,
            space_guid: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            wait_time_minutes: Optional[pulumi.Input[_builtins.float]] = None) -> 'ServiceInstance':
        """
        Get an existing ServiceInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] credentials: The service broker-provided credentials to use this service.
        :param pulumi.Input[_builtins.str] dashboard_url: Dashboard URL to access resource.
        :param pulumi.Input[_builtins.str] name: A name for the service instance
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] parameters: Arbitrary parameters to pass along to the service broker. Must be a JSON object
        :param pulumi.Input[_builtins.str] plan: The plan type of the service
        :param pulumi.Input[_builtins.str] service: The name of the service offering like speech_to_text, text_to_speech etc
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServiceInstanceServiceKeyArgs', 'ServiceInstanceServiceKeyArgsDict']]]] service_keys: The service keys asociated with the service instance
        :param pulumi.Input[_builtins.str] service_plan_guid: The uniquie identifier of the service offering plan type
        :param pulumi.Input[_builtins.str] space_guid: The guid of the space in which the instance will be created
        :param pulumi.Input[_builtins.float] wait_time_minutes: Define timeout to wait for the service instances to succeeded/deleted etc.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServiceInstanceState.__new__(_ServiceInstanceState)

        __props__.__dict__["credentials"] = credentials
        __props__.__dict__["dashboard_url"] = dashboard_url
        __props__.__dict__["name"] = name
        __props__.__dict__["parameters"] = parameters
        __props__.__dict__["plan"] = plan
        __props__.__dict__["service"] = service
        __props__.__dict__["service_instance_id"] = service_instance_id
        __props__.__dict__["service_keys"] = service_keys
        __props__.__dict__["service_plan_guid"] = service_plan_guid
        __props__.__dict__["space_guid"] = space_guid
        __props__.__dict__["tags"] = tags
        __props__.__dict__["wait_time_minutes"] = wait_time_minutes
        return ServiceInstance(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def credentials(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        """
        The service broker-provided credentials to use this service.
        """
        return pulumi.get(self, "credentials")

    @_builtins.property
    @pulumi.getter(name="dashboardUrl")
    def dashboard_url(self) -> pulumi.Output[_builtins.str]:
        """
        Dashboard URL to access resource.
        """
        return pulumi.get(self, "dashboard_url")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        A name for the service instance
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Arbitrary parameters to pass along to the service broker. Must be a JSON object
        """
        return pulumi.get(self, "parameters")

    @_builtins.property
    @pulumi.getter
    def plan(self) -> pulumi.Output[_builtins.str]:
        """
        The plan type of the service
        """
        return pulumi.get(self, "plan")

    @_builtins.property
    @pulumi.getter
    def service(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the service offering like speech_to_text, text_to_speech etc
        """
        return pulumi.get(self, "service")

    @_builtins.property
    @pulumi.getter(name="serviceInstanceId")
    def service_instance_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "service_instance_id")

    @_builtins.property
    @pulumi.getter(name="serviceKeys")
    def service_keys(self) -> pulumi.Output[Sequence['outputs.ServiceInstanceServiceKey']]:
        """
        The service keys asociated with the service instance
        """
        return pulumi.get(self, "service_keys")

    @_builtins.property
    @pulumi.getter(name="servicePlanGuid")
    def service_plan_guid(self) -> pulumi.Output[_builtins.str]:
        """
        The uniquie identifier of the service offering plan type
        """
        return pulumi.get(self, "service_plan_guid")

    @_builtins.property
    @pulumi.getter(name="spaceGuid")
    def space_guid(self) -> pulumi.Output[_builtins.str]:
        """
        The guid of the space in which the instance will be created
        """
        return pulumi.get(self, "space_guid")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="waitTimeMinutes")
    def wait_time_minutes(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Define timeout to wait for the service instances to succeeded/deleted etc.
        """
        return pulumi.get(self, "wait_time_minutes")

