# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['AppidApplicationScopesArgs', 'AppidApplicationScopes']

@pulumi.input_type
class AppidApplicationScopesArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[_builtins.str],
                 scopes: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 tenant_id: pulumi.Input[_builtins.str],
                 appid_application_scopes_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AppidApplicationScopes resource.
        :param pulumi.Input[_builtins.str] client_id: The `client_id` is a public identifier for applications
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] scopes: A `scope` is a runtime action in your application that you register with IBM Cloud App ID to create an access permission
        :param pulumi.Input[_builtins.str] tenant_id: The service `tenantId`
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "scopes", scopes)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if appid_application_scopes_id is not None:
            pulumi.set(__self__, "appid_application_scopes_id", appid_application_scopes_id)

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[_builtins.str]:
        """
        The `client_id` is a public identifier for applications
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "client_id", value)

    @_builtins.property
    @pulumi.getter
    def scopes(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        A `scope` is a runtime action in your application that you register with IBM Cloud App ID to create an access permission
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "scopes", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[_builtins.str]:
        """
        The service `tenantId`
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "tenant_id", value)

    @_builtins.property
    @pulumi.getter(name="appidApplicationScopesId")
    def appid_application_scopes_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "appid_application_scopes_id")

    @appid_application_scopes_id.setter
    def appid_application_scopes_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "appid_application_scopes_id", value)


@pulumi.input_type
class _AppidApplicationScopesState:
    def __init__(__self__, *,
                 appid_application_scopes_id: Optional[pulumi.Input[_builtins.str]] = None,
                 client_id: Optional[pulumi.Input[_builtins.str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AppidApplicationScopes resources.
        :param pulumi.Input[_builtins.str] client_id: The `client_id` is a public identifier for applications
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] scopes: A `scope` is a runtime action in your application that you register with IBM Cloud App ID to create an access permission
        :param pulumi.Input[_builtins.str] tenant_id: The service `tenantId`
        """
        if appid_application_scopes_id is not None:
            pulumi.set(__self__, "appid_application_scopes_id", appid_application_scopes_id)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @_builtins.property
    @pulumi.getter(name="appidApplicationScopesId")
    def appid_application_scopes_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "appid_application_scopes_id")

    @appid_application_scopes_id.setter
    def appid_application_scopes_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "appid_application_scopes_id", value)

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The `client_id` is a public identifier for applications
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "client_id", value)

    @_builtins.property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        A `scope` is a runtime action in your application that you register with IBM Cloud App ID to create an access permission
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "scopes", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The service `tenantId`
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tenant_id", value)


@pulumi.type_token("ibm:index/appidApplicationScopes:AppidApplicationScopes")
class AppidApplicationScopes(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 appid_application_scopes_id: Optional[pulumi.Input[_builtins.str]] = None,
                 client_id: Optional[pulumi.Input[_builtins.str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a AppidApplicationScopes resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] client_id: The `client_id` is a public identifier for applications
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] scopes: A `scope` is a runtime action in your application that you register with IBM Cloud App ID to create an access permission
        :param pulumi.Input[_builtins.str] tenant_id: The service `tenantId`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppidApplicationScopesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AppidApplicationScopes resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AppidApplicationScopesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppidApplicationScopesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 appid_application_scopes_id: Optional[pulumi.Input[_builtins.str]] = None,
                 client_id: Optional[pulumi.Input[_builtins.str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppidApplicationScopesArgs.__new__(AppidApplicationScopesArgs)

            __props__.__dict__["appid_application_scopes_id"] = appid_application_scopes_id
            if client_id is None and not opts.urn:
                raise TypeError("Missing required property 'client_id'")
            __props__.__dict__["client_id"] = client_id
            if scopes is None and not opts.urn:
                raise TypeError("Missing required property 'scopes'")
            __props__.__dict__["scopes"] = scopes
            if tenant_id is None and not opts.urn:
                raise TypeError("Missing required property 'tenant_id'")
            __props__.__dict__["tenant_id"] = tenant_id
        super(AppidApplicationScopes, __self__).__init__(
            'ibm:index/appidApplicationScopes:AppidApplicationScopes',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            appid_application_scopes_id: Optional[pulumi.Input[_builtins.str]] = None,
            client_id: Optional[pulumi.Input[_builtins.str]] = None,
            scopes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            tenant_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'AppidApplicationScopes':
        """
        Get an existing AppidApplicationScopes resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] client_id: The `client_id` is a public identifier for applications
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] scopes: A `scope` is a runtime action in your application that you register with IBM Cloud App ID to create an access permission
        :param pulumi.Input[_builtins.str] tenant_id: The service `tenantId`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppidApplicationScopesState.__new__(_AppidApplicationScopesState)

        __props__.__dict__["appid_application_scopes_id"] = appid_application_scopes_id
        __props__.__dict__["client_id"] = client_id
        __props__.__dict__["scopes"] = scopes
        __props__.__dict__["tenant_id"] = tenant_id
        return AppidApplicationScopes(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="appidApplicationScopesId")
    def appid_application_scopes_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "appid_application_scopes_id")

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Output[_builtins.str]:
        """
        The `client_id` is a public identifier for applications
        """
        return pulumi.get(self, "client_id")

    @_builtins.property
    @pulumi.getter
    def scopes(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        A `scope` is a runtime action in your application that you register with IBM Cloud App ID to create an access permission
        """
        return pulumi.get(self, "scopes")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Output[_builtins.str]:
        """
        The service `tenantId`
        """
        return pulumi.get(self, "tenant_id")

