# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetContainerDedicatedHostPoolResult',
    'AwaitableGetContainerDedicatedHostPoolResult',
    'get_container_dedicated_host_pool',
    'get_container_dedicated_host_pool_output',
]

@pulumi.output_type
class GetContainerDedicatedHostPoolResult:
    """
    A collection of values returned by getContainerDedicatedHostPool.
    """
    def __init__(__self__, flavor_class=None, host_count=None, host_pool_id=None, id=None, metro=None, name=None, state=None, worker_pools=None, zones=None):
        if flavor_class and not isinstance(flavor_class, str):
            raise TypeError("Expected argument 'flavor_class' to be a str")
        pulumi.set(__self__, "flavor_class", flavor_class)
        if host_count and not isinstance(host_count, float):
            raise TypeError("Expected argument 'host_count' to be a float")
        pulumi.set(__self__, "host_count", host_count)
        if host_pool_id and not isinstance(host_pool_id, str):
            raise TypeError("Expected argument 'host_pool_id' to be a str")
        pulumi.set(__self__, "host_pool_id", host_pool_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if metro and not isinstance(metro, str):
            raise TypeError("Expected argument 'metro' to be a str")
        pulumi.set(__self__, "metro", metro)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if worker_pools and not isinstance(worker_pools, list):
            raise TypeError("Expected argument 'worker_pools' to be a list")
        pulumi.set(__self__, "worker_pools", worker_pools)
        if zones and not isinstance(zones, list):
            raise TypeError("Expected argument 'zones' to be a list")
        pulumi.set(__self__, "zones", zones)

    @_builtins.property
    @pulumi.getter(name="flavorClass")
    def flavor_class(self) -> _builtins.str:
        return pulumi.get(self, "flavor_class")

    @_builtins.property
    @pulumi.getter(name="hostCount")
    def host_count(self) -> _builtins.float:
        return pulumi.get(self, "host_count")

    @_builtins.property
    @pulumi.getter(name="hostPoolId")
    def host_pool_id(self) -> _builtins.str:
        return pulumi.get(self, "host_pool_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def metro(self) -> _builtins.str:
        return pulumi.get(self, "metro")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="workerPools")
    def worker_pools(self) -> Sequence['outputs.GetContainerDedicatedHostPoolWorkerPoolResult']:
        return pulumi.get(self, "worker_pools")

    @_builtins.property
    @pulumi.getter
    def zones(self) -> Sequence['outputs.GetContainerDedicatedHostPoolZoneResult']:
        return pulumi.get(self, "zones")


class AwaitableGetContainerDedicatedHostPoolResult(GetContainerDedicatedHostPoolResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetContainerDedicatedHostPoolResult(
            flavor_class=self.flavor_class,
            host_count=self.host_count,
            host_pool_id=self.host_pool_id,
            id=self.id,
            metro=self.metro,
            name=self.name,
            state=self.state,
            worker_pools=self.worker_pools,
            zones=self.zones)


def get_container_dedicated_host_pool(host_pool_id: Optional[_builtins.str] = None,
                                      id: Optional[_builtins.str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetContainerDedicatedHostPoolResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['hostPoolId'] = host_pool_id
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ibm:index/getContainerDedicatedHostPool:getContainerDedicatedHostPool', __args__, opts=opts, typ=GetContainerDedicatedHostPoolResult, package_ref=_utilities.get_package()).value

    return AwaitableGetContainerDedicatedHostPoolResult(
        flavor_class=pulumi.get(__ret__, 'flavor_class'),
        host_count=pulumi.get(__ret__, 'host_count'),
        host_pool_id=pulumi.get(__ret__, 'host_pool_id'),
        id=pulumi.get(__ret__, 'id'),
        metro=pulumi.get(__ret__, 'metro'),
        name=pulumi.get(__ret__, 'name'),
        state=pulumi.get(__ret__, 'state'),
        worker_pools=pulumi.get(__ret__, 'worker_pools'),
        zones=pulumi.get(__ret__, 'zones'))
def get_container_dedicated_host_pool_output(host_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                                             id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetContainerDedicatedHostPoolResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['hostPoolId'] = host_pool_id
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ibm:index/getContainerDedicatedHostPool:getContainerDedicatedHostPool', __args__, opts=opts, typ=GetContainerDedicatedHostPoolResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetContainerDedicatedHostPoolResult(
        flavor_class=pulumi.get(__response__, 'flavor_class'),
        host_count=pulumi.get(__response__, 'host_count'),
        host_pool_id=pulumi.get(__response__, 'host_pool_id'),
        id=pulumi.get(__response__, 'id'),
        metro=pulumi.get(__response__, 'metro'),
        name=pulumi.get(__response__, 'name'),
        state=pulumi.get(__response__, 'state'),
        worker_pools=pulumi.get(__response__, 'worker_pools'),
        zones=pulumi.get(__response__, 'zones')))
